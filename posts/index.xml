<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on ZCodeTea Blog</title>
        <link>https://zcodetea.github.io/posts/</link>
        <description>Recent content in Posts on ZCodeTea Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 29 Jan 2022 08:07:30 +0800</lastBuildDate>
        <atom:link href="https://zcodetea.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>杯茗藏香，君闻几何</title>
            <link>https://zcodetea.github.io/posts/%E6%9D%AF%E8%8C%97%E8%97%8F%E9%A6%99%E5%90%9B%E9%97%BB%E5%87%A0%E4%BD%95/</link>
            <pubDate>Sat, 29 Jan 2022 08:07:30 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/%E6%9D%AF%E8%8C%97%E8%97%8F%E9%A6%99%E5%90%9B%E9%97%BB%E5%87%A0%E4%BD%95/</guid>
            <description>杯茗藏香，君闻几何 “浅谈密码学”  密文寥寥，清茶袅袅。
杯杯入境，字字明心。
 密码学是主要研究密码编码和解码的一种学科，主要目标是提供在不安全的信道上的安全通信机制^1^
根据OWASP上面的定义来开启我们的闲聊。“密码学是主要研究密码编码和解码的一种学科”，这里有两个比较关键的词汇。密码编码和解码，密码比较好理解。平时我们注册一个账户的时候通常就需要一个密码来进行登入，密码和账户构成了网络账户的基本符号。那么，编码和解码又该怎么理解呢？
编码是信息从一种形式或格式转换为另一种形式的过程，也称为计算机编程语言的代码简称编码。^2^
编码，简单来说就是对内容进行编制，来确保内容不会影响到互联网整体的传输过程。在互联网中，数据传输通常是采用http，ftp，https等协议进行传输的。这些协议中也会有些特殊的字符有特殊的功能性作用，如果不进行编码，可能会出现预期之外的事故。当然编码也有一些安全性的作用，可以确保数据传输过程中数据不是特别明显的暴露，有较大的截获风险。
编码是互联网中不可或缺的一种数据处理方式。
解码是一种用特定方法，把数码还原成它所代表的内容或将电脉冲信号、光信号、无线电波等转换成它所代表的信息、数据等的过程。解码是受传者将接受到的符号或代码还原为信息的过程，与编码过程相对应。^3^
解码，就是将编码的内容进行还原的过程。意思很明了，在互联网中一般会将解码后的信息展示给用户，在数据传输的过程中，将数据进行编码传输。为什么这样做？一方面是为了用户的使用体验，另一方面是为了数据传输的正常进行和安全性保障。
OWASP的密码学定义相对来说是比较狭义的，只对互联网中的简单过程进行了定义，将密码学研究的范围缩小了。
那么，密码学是什么呢？
密码学，就是将OWASP对于密码学的定义进行推广和扩充。编码不仅仅限制于互联网、计算机领域中，解码也不仅仅仅限于互联网、计算机领域方面。编码就变成了加密的一个子集，解码就变成了解密的一个子集。加密前的数据就有了一个比较完整的概念，即明文。加密后的数据也有了一个名字叫密文。进行加密的工具叫做密钥。这些是密码学的基础性的概念。这些概念和体系形成了密码学的大集体。
下面是百度百科给出的对于密码学的具体定义和描述。
密码学（在西欧语文中，源于希腊语kryptós“隐藏的”，和gráphein“书写”）是研究如何隐密地传递信息的学科。在现代特别指对信息以及其传输的数学性研究，常被认为是数学和计算机科学的分支，和信息论也密切相关。著名的密码学者Ron Rivest解释道：“密码学是关于如何在敌人存在的环境中通讯”，自工程学的角度，这相当于密码学与纯数学的异同。密码学是信息安全等相关议题，如认证、访问控制的核心。密码学的首要目的是隐藏信息的涵义，并不是隐藏信息的存在。密码学也促进了计算机科学，特别是在于电脑与网络安全所使用的技术，如访问控制与信息的机密性。密码学已被应用在日常生活：包括自动柜员机的芯片卡、电脑使用者存取密码、电子商务等等。^4^
密码学不仅仅只是计算机领域的内容，也是一种比较多元化的体系，但是主要应用于计算机领域。密码学会涉及到很多与数学相关联的知识体系，从微积分到线性代数、概率论以及离散数学，再从线性代数到抽象代数，再从抽象代数到数论。几乎数学方面比较难的模块都涉及到了密码学中，仿佛富有丰富的能量和特别的活力。
这回只是对密码学的初步探索和学习，有时候知识都是相通的，都是彼此有联系的存在。密码学何尝不是呢？喝杯茶其实也是种生活种的密码学。
密码学有密文和明文，茶叶中有遗传密码和表现型，有香气分子和味觉感受。密码学应该是和生物学一样，是非常beautiful的学科，一定非常好玩！
请君先闻龙井香，道出多少古时芳。
参考：  http://www.owasp.org.cn/ https://baike.baidu.com/item/%E7%BC%96%E7%A0%81/80092 https://baike.baidu.com/item/%E8%A7%A3%E7%A0%81 https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E5%AD%A6  闲聊到此为止，来喝杯茶可好？</description>
            <content type="html"><![CDATA[<h1 id="杯茗藏香君闻几何">杯茗藏香，君闻几何</h1>
<h2 id="浅谈密码学">“浅谈密码学”</h2>
<blockquote>
<p>密文寥寥，清茶袅袅。</p>
<p>杯杯入境，字字明心。</p>
</blockquote>
<p>密码学是主要研究密码编码和解码的一种学科，主要目标是提供在不安全的信道上的安全通信机制^1^</p>
<p>根据OWASP上面的定义来开启我们的闲聊。“密码学是主要研究密码编码和解码的一种学科”，这里有两个比较关键的词汇。密码编码和解码，密码比较好理解。平时我们注册一个账户的时候通常就需要一个密码来进行登入，密码和账户构成了网络账户的基本符号。那么，编码和解码又该怎么理解呢？</p>
<p>编码是信息从一种形式或格式转换为另一种形式的过程，也称为计算机编程语言的代码简称编码。^2^</p>
<p>编码，简单来说就是对内容进行编制，来确保内容不会影响到互联网整体的传输过程。在互联网中，数据传输通常是采用http，ftp，https等协议进行传输的。这些协议中也会有些特殊的字符有特殊的功能性作用，如果不进行编码，可能会出现预期之外的事故。当然编码也有一些安全性的作用，可以确保数据传输过程中数据不是特别明显的暴露，有较大的截获风险。</p>
<p>编码是互联网中不可或缺的一种数据处理方式。</p>
<p>解码是一种用特定方法，把数码还原成它所代表的内容或将电脉冲信号、光信号、无线电波等转换成它所代表的信息、数据等的过程。解码是受传者将接受到的符号或代码还原为信息的过程，与编码过程相对应。^3^</p>
<p>解码，就是将编码的内容进行还原的过程。意思很明了，在互联网中一般会将解码后的信息展示给用户，在数据传输的过程中，将数据进行编码传输。为什么这样做？一方面是为了用户的使用体验，另一方面是为了数据传输的正常进行和安全性保障。</p>
<p>OWASP的密码学定义相对来说是比较狭义的，只对互联网中的简单过程进行了定义，将密码学研究的范围缩小了。</p>
<p>那么，密码学是什么呢？</p>
<p>密码学，就是将OWASP对于密码学的定义进行推广和扩充。编码不仅仅限制于互联网、计算机领域中，解码也不仅仅仅限于互联网、计算机领域方面。编码就变成了加密的一个子集，解码就变成了解密的一个子集。加密前的数据就有了一个比较完整的概念，即明文。加密后的数据也有了一个名字叫密文。进行加密的工具叫做密钥。这些是密码学的基础性的概念。这些概念和体系形成了密码学的大集体。</p>
<p>下面是百度百科给出的对于密码学的具体定义和描述。</p>
<p>密码学（在西欧语文中，源于希腊语kryptós“隐藏的”，和gráphein“书写”）是研究如何隐密地传递信息的学科。在现代特别指对信息以及其传输的数学性研究，常被认为是数学和计算机科学的分支，和信息论也密切相关。著名的密码学者Ron Rivest解释道：“密码学是关于如何在敌人存在的环境中通讯”，自工程学的角度，这相当于密码学与纯数学的异同。密码学是信息安全等相关议题，如认证、访问控制的核心。密码学的首要目的是隐藏信息的涵义，并不是隐藏信息的存在。密码学也促进了计算机科学，特别是在于电脑与网络安全所使用的技术，如访问控制与信息的机密性。密码学已被应用在日常生活：包括自动柜员机的芯片卡、电脑使用者存取密码、电子商务等等。^4^</p>
<p>密码学不仅仅只是计算机领域的内容，也是一种比较多元化的体系，但是主要应用于计算机领域。密码学会涉及到很多与数学相关联的知识体系，从微积分到线性代数、概率论以及离散数学，再从线性代数到抽象代数，再从抽象代数到数论。几乎数学方面比较难的模块都涉及到了密码学中，仿佛富有丰富的能量和特别的活力。</p>
<p>这回只是对密码学的初步探索和学习，有时候知识都是相通的，都是彼此有联系的存在。密码学何尝不是呢？喝杯茶其实也是种生活种的密码学。</p>
<p>密码学有密文和明文，茶叶中有遗传密码和表现型，有香气分子和味觉感受。密码学应该是和生物学一样，是非常beautiful的学科，一定非常好玩！</p>
<p>请君先闻龙井香，道出多少古时芳。</p>
<h2 id="参考">参考：</h2>
<ol>
<li><a href="http://www.owasp.org.cn/%E2%80%A8https://baike.baidu.com/item/%E7%BC%96%E7%A0%81/80092%E2%80%A8https://baike.baidu.com/item/%E8%A7%A3%E7%A0%81">http://www.owasp.org.cn/</a></li>
<li><a href="http://www.owasp.org.cn/%E2%80%A8https://baike.baidu.com/item/%E7%BC%96%E7%A0%81/80092%E2%80%A8https://baike.baidu.com/item/%E8%A7%A3%E7%A0%81">https://baike.baidu.com/item/%E7%BC%96%E7%A0%81/80092</a></li>
<li><a href="http://www.owasp.org.cn/%E2%80%A8https://baike.baidu.com/item/%E7%BC%96%E7%A0%81/80092%E2%80%A8https://baike.baidu.com/item/%E8%A7%A3%E7%A0%81">https://baike.baidu.com/item/%E8%A7%A3%E7%A0%81</a></li>
<li><a href="https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E5%AD%A6">https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E5%AD%A6</a></li>
</ol>
<p>闲聊到此为止，来喝杯茶可好？</p>
]]></content>
        </item>
        
        <item>
            <title>一花一世界，一码一千秋</title>
            <link>https://zcodetea.github.io/posts/%E4%B8%80%E8%8A%B1%E4%B8%80%E4%B8%96%E7%95%8C%E4%B8%80%E7%A0%81%E4%B8%80%E5%8D%83%E7%A7%8B/</link>
            <pubDate>Sat, 29 Jan 2022 08:02:58 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/%E4%B8%80%E8%8A%B1%E4%B8%80%E4%B8%96%E7%95%8C%E4%B8%80%E7%A0%81%E4%B8%80%E5%8D%83%E7%A7%8B/</guid>
            <description>一花一世界，一码一千秋 ”逆向工程初步“  逆向工程应该是一门优雅的艺术，而不是一些低层次者手中的粗陋工具；
逆向工程的目的是学习与再利用；
逆向工程的精神是“自由”。
《加密与解密》
 什么是逆向工程？ 逆向工程（Reverse engineering），又称反向工程，是一种技术过程，即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能性能规格等设计要素，以制作出功能相近，但又不完全一样的产品。逆向工程源于商业及军事领域中的硬件分析。其主要目的是，在无法轻易获得必要的生产信息下，直接从成品的分析，推导产品的设计原理。^1^
通俗来讲，逆向工程就是将机器才能够懂的机器代码（0101二进制代码）翻译成人能够读懂的代码（汇编、smali代码）。 但实际情况往往是，我们只寻找关键的代码去翻译或仅了解其业务逻辑，因为要将所有的机器代码翻译出来，工作量是极其巨大的且繁琐的。^2^
逆向技术在实际业务中一般应用于以下几个方面：二进制漏洞挖掘、软件破解、恶意代码分析、竞品分析等。
逆向工程涉及的知识面非常广，从计算机基础原理到计算机架构，再到各种编程语言的编译原理。逆向工程往往需要对算法进行逆向，对操作系统架构进行逆向，这就要求逆向工程师有不错的算法水平，而且对计算机相关的原理深入理解。
一个逆向工程大师，也许具有如下特征。
 永远保持好奇心，崇尚自由——既能促使探索，也能抵抗商业利益和欲望的侵袭。有了它，枯燥的代码世界才有了生气。 勤奋与毅力。在一篇关于逆向的文章中有这样的语句：“让我们搞清楚作为一名逆向工作者需要具备的基本条件，其实那并不是扎实的汇编功底和编程基础——可以完全不懂这些，秘诀就是勤奋加上执着！记住并做到这两点，你一样可以变得优秀。” 精通至少一门编程语言——不仅仅是代码，更重要的是编程思想。 扎实的汇编功底和系统编程知识。  基础知识  汇编语言 C语言 一门脚本语言(Python) Windows核心编程 PE文件格式 程序加载流程  基础工具  查壳工具（DIE、PEID、EXEINFO、LordPE、ResourceHacker等） 常用脱壳工具或脱壳脚本（专属壳的脱壳器例如upx等、各种壳的脱壳脚本） 十六进制编辑器（010Editor、winhex等） 反汇编工具（IDA、Hopper） 调试器（Ollydbg、gdb、windbg等）  这些都是比较常用的逆向工具。其中特别要熟练使用IDA与Ollydbg，IDA一般用来做静态分析，其中的F5功能更是强大到没朋友，新手必备。Ollydbg简称OD一般用来做动态调试使用，两者结合使用堪比倚天剑和屠龙刀，可谓是神挡杀神佛挡杀佛。^3^
逆向的分类  解释型语言的逆向 编译型语言的逆向  分析手段  静态分析 动态分析 网络流量分析 猜  静态分析 将机器代码反汇编成方便人类理解的代码，如smali代码（Java）、汇编代码或汇编代码翻译的C语言伪代码等等，通过分析这些比较低级的编程语言的代码，找到程序的业务流程或设计逻辑。
动态分析 通过断点调试手段，让程序单步执行进行分析。动态分析往往是在静态分析出一定的结果的基础上进行，找到合适的地方给代码打断点，即时地读取当前变量的值，来进一步分析程序的逻辑、获取程序关系数据。
网络流量分析 通过代理方式或者其他方式，截取程序与服务器通信的数据流量（抓包），来分析客户端和服务端的通信协议。网络流量分析比较有局限性，若客户端使用Http这种明文传输的协议，会比较容易分析；但如果客户端使用SSL、Https等加密传输协议与服务端进行通信，那么抓包的前提是需要拿到服务端下发给客户端的证书才能进一步解密分析，这种情况下就比较棘手。网上有方案通过安装插件拿到Chrome或者Firefox浏览器的本地证书，但只适用于客户端是网页的情况。若其他大佬有好的宝贵经验，还望能指点迷津。
猜 猜测的前提是，你需要有一定的编程经验，能够在逆向分析出一些代码后，对其上下的代码进行合理的推测，推测不出来的代码再通过以上手段分析。可以这么说，你的推测能力决定了你的逆向分析效率，而编程经验则是你猜测能力的基石。
 逆向工程的学习是一条漫长的道路，每一个逆向工程师都是一个优秀的开发者，只不过他们选择去挑战更有深度，更有趣味的事情。加密与解密，解开每一段代码的意味，看到软件背后潜藏的世界，正所谓，一花一世界，一码一千秋嘛。
 参考  逆向工程-维基百科 逆向工程入门概述-知乎 CTF逆向选手入坑指南-FreeBuf  闲聊到此为止，来喝杯茶可好？</description>
            <content type="html"><![CDATA[<h1 id="一花一世界一码一千秋">一花一世界，一码一千秋</h1>
<h2 id="逆向工程初步">”逆向工程初步“</h2>
<blockquote>
<p>逆向工程应该是一门优雅的艺术，而不是一些低层次者手中的粗陋工具；</p>
<p>逆向工程的目的是学习与再利用；</p>
<p>逆向工程的精神是“自由”。</p>
<p>《加密与解密》</p>
</blockquote>
<h3 id="什么是逆向工程">什么是逆向工程？</h3>
<p>逆向工程（Reverse engineering），又称反向工程，是一种技术过程，即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能性能规格等设计要素，以制作出功能相近，但又不完全一样的产品。逆向工程源于商业及军事领域中的硬件分析。其主要目的是，在无法轻易获得必要的生产信息下，直接从成品的分析，推导产品的设计原理。^1^</p>
<p>通俗来讲，逆向工程就是将机器才能够懂的机器代码（0101二进制代码）翻译成人能够读懂的代码（汇编、smali代码）。 但实际情况往往是，我们只寻找关键的代码去翻译或仅了解其业务逻辑，因为要将所有的机器代码翻译出来，工作量是极其巨大的且繁琐的。^2^</p>
<p>逆向技术在实际业务中一般应用于以下几个方面：二进制漏洞挖掘、软件破解、恶意代码分析、竞品分析等。</p>
<p>逆向工程涉及的知识面非常广，从计算机基础原理到计算机架构，再到各种编程语言的编译原理。逆向工程往往需要对算法进行逆向，对操作系统架构进行逆向，这就要求逆向工程师有不错的算法水平，而且对计算机相关的原理深入理解。</p>
<p>一个逆向工程大师，也许具有如下特征。</p>
<ul>
<li>永远保持好奇心，崇尚自由——既能促使探索，也能抵抗商业利益和欲望的侵袭。有了它，枯燥的代码世界才有了生气。</li>
<li>勤奋与毅力。在一篇关于逆向的文章中有这样的语句：“让我们搞清楚作为一名逆向工作者需要具备的基本条件，其实那并不是扎实的汇编功底和编程基础——可以完全不懂这些，秘诀就是勤奋加上执着！记住并做到这两点，你一样可以变得优秀。”</li>
<li>精通至少一门编程语言——不仅仅是代码，更重要的是编程思想。</li>
<li>扎实的汇编功底和系统编程知识。</li>
</ul>
<h3 id="基础知识">基础知识</h3>
<ol>
<li>汇编语言</li>
<li>C语言</li>
<li>一门脚本语言(Python)</li>
<li>Windows核心编程</li>
<li>PE文件格式</li>
<li>程序加载流程</li>
</ol>
<h3 id="基础工具">基础工具</h3>
<ol>
<li>查壳工具（DIE、PEID、EXEINFO、LordPE、ResourceHacker等）</li>
<li>常用脱壳工具或脱壳脚本（专属壳的脱壳器例如upx等、各种壳的脱壳脚本）</li>
<li>十六进制编辑器（010Editor、winhex等）</li>
<li>反汇编工具（IDA、Hopper）</li>
<li>调试器（Ollydbg、gdb、windbg等）</li>
</ol>
<p>这些都是比较常用的逆向工具。其中特别要熟练使用IDA与Ollydbg，IDA一般用来做静态分析，其中的F5功能更是强大到没朋友，新手必备。Ollydbg简称OD一般用来做动态调试使用，两者结合使用堪比倚天剑和屠龙刀，可谓是神挡杀神佛挡杀佛。^3^</p>
<h3 id="逆向的分类">逆向的分类</h3>
<ul>
<li>解释型语言的逆向</li>
<li>编译型语言的逆向</li>
</ul>
<h3 id="分析手段">分析手段</h3>
<ol>
<li>静态分析</li>
<li>动态分析</li>
<li>网络流量分析</li>
<li>猜</li>
</ol>
<h4 id="静态分析">静态分析</h4>
<p>将机器代码反汇编成方便人类理解的代码，如smali代码（Java）、汇编代码或汇编代码翻译的C语言伪代码等等，通过分析这些比较低级的编程语言的代码，找到程序的业务流程或设计逻辑。</p>
<h4 id="动态分析">动态分析</h4>
<p>通过断点调试手段，让程序单步执行进行分析。动态分析往往是在静态分析出一定的结果的基础上进行，找到合适的地方给代码打断点，即时地读取当前变量的值，来进一步分析程序的逻辑、获取程序关系数据。</p>
<h4 id="网络流量分析">网络流量分析</h4>
<p>通过代理方式或者其他方式，截取程序与服务器通信的数据流量（抓包），来分析客户端和服务端的通信协议。网络流量分析比较有局限性，若客户端使用<em>Http</em>这种明文传输的协议，会比较容易分析；但如果客户端使用SSL、<em>Https</em>等加密传输协议与服务端进行通信，那么抓包的前提是需要拿到服务端下发给客户端的证书才能进一步解密分析，这种情况下就比较棘手。网上有方案通过安装插件拿到Chrome或者Firefox浏览器的本地证书，但只适用于客户端是网页的情况。若其他大佬有好的宝贵经验，还望能指点迷津。</p>
<h4 id="猜">猜</h4>
<p>猜测的前提是，你需要有一定的编程经验，能够在逆向分析出一些代码后，对其上下的代码进行合理的推测，推测不出来的代码再通过以上手段分析。可以这么说，你的推测能力决定了你的逆向分析效率，而编程经验则是你猜测能力的基石。</p>
<blockquote>
<p>逆向工程的学习是一条漫长的道路，每一个逆向工程师都是一个优秀的开发者，只不过他们选择去挑战更有深度，更有趣味的事情。加密与解密，解开每一段代码的意味，看到软件背后潜藏的世界，正所谓，一花一世界，一码一千秋嘛。</p>
</blockquote>
<h3 id="参考">参考</h3>
<ol>
<li><a href="https://wiwiki.kfd.me/wiki/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B">逆向工程-维基百科</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/148099666">逆向工程入门概述-知乎</a></li>
<li><a href="https://www.freebuf.com/column/225999.html">CTF逆向选手入坑指南-FreeBuf</a></li>
</ol>
<p>闲聊到此为止，来喝杯茶可好？</p>
]]></content>
        </item>
        
        <item>
            <title>XCTF REVERSE Expert [13~18]_Writeup</title>
            <link>https://zcodetea.github.io/posts/xctf-reverse-expert-13-18_writeup/</link>
            <pubDate>Fri, 28 Jan 2022 19:34:08 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/xctf-reverse-expert-13-18_writeup/</guid>
            <description>XCTF-REVERSE-高手区-[13-18] writeup 继续玩一玩逆向的题目，感觉还是蛮有意思的。
0x0 srm-50 使用DIE进行探测：
32位PE程序，无壳。可以尝试运行一下：
应该是一个邮箱破解的程序，终于有点稍微有意思的题目了
首先进行静态分析看代码：
根据WIN32的编程基础，关键函数应该是在DialogFunc中，登录的细节应该是在DialogFunc中。
跟进DialogFunc函数，来寻找更多的细节
INT_PTR __stdcall DialogFunc(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4) { HMODULE v5; // eax  HICON v6; // eax  HMODULE v7; // eax  HWND v8; // eax  HCURSOR v9; // [esp-4h] [ebp-34Ch]  CHAR String[256]; // [esp+8h] [ebp-340h] BYREF  CHAR v11[256]; // [esp+108h] [ebp-240h] BYREF  CHAR Text[256]; // [esp+208h] [ebp-140h] BYREF  char Source[60]; // [esp+308h] [ebp-40h] BYREF  if ( a2 == 16 ) { EndDialog(hDlg, 0); return 0; } if ( a2 == 272 ) { v5 = GetModuleHandleW(0); v6 = LoadIconW(v5, (LPCWSTR)0x67); SetClassLongA(hDlg, -14, (LONG)v6); v7 = GetModuleHandleW(0); v9 = LoadCursorW(v7, (LPCWSTR)0x66); v8 = GetDlgItem(hDlg, 1); SetClassLongA(v8, -12, (LONG)v9); return 1; } if ( a2 !</description>
            <content type="html"><![CDATA[<h1 id="xctf-reverse-高手区-13-18-writeup">XCTF-REVERSE-高手区-[13-18] writeup</h1>
<p>继续玩一玩逆向的题目，感觉还是蛮有意思的。</p>
<h2 id="0x0-srm-50">0x0 srm-50</h2>
<p>使用DIE进行探测：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103093725322.png" alt="image-20211103093725322"></p>
<p>32位PE程序，无壳。可以尝试运行一下：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103093811981.png" alt="image-20211103093811981"></p>
<p>应该是一个邮箱破解的程序，终于有点稍微有意思的题目了</p>
<p>首先进行静态分析看代码：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103094139950.png" alt="image-20211103094139950"></p>
<p>根据WIN32的编程基础，关键函数应该是在<code>DialogFunc</code>中，登录的细节应该是在<code>DialogFunc</code>中。</p>
<p>跟进<code>DialogFunc</code>函数，来寻找更多的细节</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">INT_PTR <span style="color:#66d9ef">__stdcall</span> <span style="color:#a6e22e">DialogFunc</span>(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4)
{
  HMODULE v5; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  HICON v6; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  HMODULE v7; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  HWND v8; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  HCURSOR v9; <span style="color:#75715e">// [esp-4h] [ebp-34Ch]
</span><span style="color:#75715e"></span>  CHAR String[<span style="color:#ae81ff">256</span>]; <span style="color:#75715e">// [esp+8h] [ebp-340h] BYREF
</span><span style="color:#75715e"></span>  CHAR v11[<span style="color:#ae81ff">256</span>]; <span style="color:#75715e">// [esp+108h] [ebp-240h] BYREF
</span><span style="color:#75715e"></span>  CHAR Text[<span style="color:#ae81ff">256</span>]; <span style="color:#75715e">// [esp+208h] [ebp-140h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Source[<span style="color:#ae81ff">60</span>]; <span style="color:#75715e">// [esp+308h] [ebp-40h] BYREF
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">16</span> )
  {
    EndDialog(hDlg, <span style="color:#ae81ff">0</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  }
  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">272</span> )
  {
    v5 <span style="color:#f92672">=</span> GetModuleHandleW(<span style="color:#ae81ff">0</span>);
    v6 <span style="color:#f92672">=</span> LoadIconW(v5, (LPCWSTR)<span style="color:#ae81ff">0x67</span>);
    SetClassLongA(hDlg, <span style="color:#f92672">-</span><span style="color:#ae81ff">14</span>, (LONG)v6);
    v7 <span style="color:#f92672">=</span> GetModuleHandleW(<span style="color:#ae81ff">0</span>);
    v9 <span style="color:#f92672">=</span> LoadCursorW(v7, (LPCWSTR)<span style="color:#ae81ff">0x66</span>);
    v8 <span style="color:#f92672">=</span> GetDlgItem(hDlg, <span style="color:#ae81ff">1</span>);
    SetClassLongA(v8, <span style="color:#f92672">-</span><span style="color:#ae81ff">12</span>, (LONG)v9);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
  }
  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">273</span> <span style="color:#f92672">||</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)a3 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  memset(String, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)a3 <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#66d9ef">sizeof</span>(String));
  memset(v11, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(v11));
  memset(Text, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(Text));
  GetDlgItemTextA(hDlg, <span style="color:#ae81ff">1001</span>, String, <span style="color:#ae81ff">256</span>);
  GetDlgItemTextA(hDlg, <span style="color:#ae81ff">1002</span>, v11, <span style="color:#ae81ff">256</span>);
  <span style="color:#66d9ef">if</span> ( strstr(String, <span style="color:#e6db74">&#34;@&#34;</span>) <span style="color:#f92672">&amp;&amp;</span> strstr(String, <span style="color:#e6db74">&#34;.&#34;</span>) <span style="color:#f92672">&amp;&amp;</span> strstr(String, <span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&amp;&amp;</span> strstr(String, <span style="color:#e6db74">&#34;@&#34;</span>)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">46</span> )
  {
    strcpy(<span style="color:#f92672">&amp;</span>Source[<span style="color:#ae81ff">36</span>], <span style="color:#e6db74">&#34;Registration failure.&#34;</span>);
    strcpy(Source, <span style="color:#e6db74">&#34;Registration Success!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Your flag is:&#34;</span>);
    <span style="color:#66d9ef">if</span> ( strlen(v11) <span style="color:#f92672">==</span> <span style="color:#ae81ff">16</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">67</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">88</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">90</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">65</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">57</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">98</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">100</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">55</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">109</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">71</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">113</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">57</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">52</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">103</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">99</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">56</span> )
    {
      strcpy_s(Text, <span style="color:#ae81ff">0x100u</span>, Source);
      strcat_s(Text, <span style="color:#ae81ff">0x100u</span>, v11);
    }
    <span style="color:#66d9ef">else</span>
    {
      strcpy_s(Text, <span style="color:#ae81ff">0x100u</span>, <span style="color:#f92672">&amp;</span>Source[<span style="color:#ae81ff">36</span>]);
    }
  }
  <span style="color:#66d9ef">else</span>
  {
    strcpy_s(Text, <span style="color:#ae81ff">0x100u</span>, <span style="color:#e6db74">&#34;Your E-mail address in not valid.&#34;</span>);
  }
  MessageBoxA(hDlg, Text, <span style="color:#e6db74">&#34;Registeration&#34;</span>, <span style="color:#ae81ff">0x40u</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
}
</code></pre></div><p>flag直接展示的非常清晰了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">if</span> ( strstr(String, <span style="color:#e6db74">&#34;@&#34;</span>) <span style="color:#f92672">&amp;&amp;</span> strstr(String, <span style="color:#e6db74">&#34;.&#34;</span>) <span style="color:#f92672">&amp;&amp;</span> strstr(String, <span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&amp;&amp;</span> strstr(String, <span style="color:#e6db74">&#34;@&#34;</span>)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">46</span> )
  {
    strcpy(<span style="color:#f92672">&amp;</span>Source[<span style="color:#ae81ff">36</span>], <span style="color:#e6db74">&#34;Registration failure.&#34;</span>);
    strcpy(Source, <span style="color:#e6db74">&#34;Registration Success!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Your flag is:&#34;</span>);
    <span style="color:#66d9ef">if</span> ( strlen(v11) <span style="color:#f92672">==</span> <span style="color:#ae81ff">16</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">67</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">88</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">90</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">65</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">57</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">98</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">100</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">55</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">109</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">71</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">113</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">57</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">52</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">103</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">99</span>
      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">56</span> )
    {
      strcpy_s(Text, <span style="color:#ae81ff">0x100u</span>, Source);
      strcat_s(Text, <span style="color:#ae81ff">0x100u</span>, v11);
    }
    <span style="color:#66d9ef">else</span>
    {
      strcpy_s(Text, <span style="color:#ae81ff">0x100u</span>, <span style="color:#f92672">&amp;</span>Source[<span style="color:#ae81ff">36</span>]);
    }
  }
</code></pre></div><p>对<code>v11</code>数组进行运算就可以得到，非常简单，可以非常容易地得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">CZ9dmq4c8g9G7bAX
</code></pre></div><p>故本题的flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">CZ9dmq4c8g9G7bAX
</code></pre></div><h2 id="0x1-simple-check-100">0x1 simple-check-100</h2>
<p>先使用DIE姐姐进行探测一下，呐呐~</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103095757150.png" alt="image-20211103095757150"></p>
<p>PE32程序，没有加壳。直接静态分析看一波：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>v3; <span style="color:#75715e">// esp
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>v4; <span style="color:#75715e">// esp
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v6; <span style="color:#75715e">// [esp+8h] [ebp-40h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v7; <span style="color:#75715e">// [esp+1Bh] [ebp-2Dh] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v8; <span style="color:#75715e">// [esp+1Ch] [ebp-2Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// [esp+20h] [ebp-28h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v10; <span style="color:#75715e">// [esp+25h] [ebp-23h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v11; <span style="color:#75715e">// [esp+26h] [ebp-22h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v12; <span style="color:#75715e">// [esp+27h] [ebp-21h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v13; <span style="color:#75715e">// [esp+28h] [ebp-20h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v14; <span style="color:#75715e">// [esp+29h] [ebp-1Fh]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v15; <span style="color:#75715e">// [esp+2Ah] [ebp-1Eh]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v16; <span style="color:#75715e">// [esp+2Bh] [ebp-1Dh]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v17; <span style="color:#75715e">// [esp+2Ch] [ebp-1Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v18; <span style="color:#75715e">// [esp+2Dh] [ebp-1Bh]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v19; <span style="color:#75715e">// [esp+2Eh] [ebp-1Ah]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v20; <span style="color:#75715e">// [esp+2Fh] [ebp-19h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v21; <span style="color:#75715e">// [esp+30h] [ebp-18h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v22; <span style="color:#75715e">// [esp+31h] [ebp-17h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v23; <span style="color:#75715e">// [esp+32h] [ebp-16h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v24; <span style="color:#75715e">// [esp+33h] [ebp-15h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v25; <span style="color:#75715e">// [esp+34h] [ebp-14h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v26; <span style="color:#75715e">// [esp+35h] [ebp-13h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v27; <span style="color:#75715e">// [esp+36h] [ebp-12h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v28; <span style="color:#75715e">// [esp+37h] [ebp-11h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v29; <span style="color:#75715e">// [esp+38h] [ebp-10h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v30; <span style="color:#75715e">// [esp+39h] [ebp-Fh]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v31; <span style="color:#75715e">// [esp+3Ah] [ebp-Eh]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v32; <span style="color:#75715e">// [esp+3Bh] [ebp-Dh]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v33; <span style="color:#75715e">// [esp+3Ch] [ebp-Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v34; <span style="color:#75715e">// [esp+3Dh] [ebp-Bh]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v35; <span style="color:#75715e">// [esp+3Eh] [ebp-Ah]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v36; <span style="color:#75715e">// [esp+3Fh] [ebp-9h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>v37; <span style="color:#75715e">// [esp+40h] [ebp-8h]
</span><span style="color:#75715e"></span>
  v37 <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>argc;
  __main();
  v7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">84</span>;
  v36 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">56</span>;
  v35 <span style="color:#f92672">=</span> <span style="color:#ae81ff">126</span>;
  v34 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">29</span>;
  v33 <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>;
  v32 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">57</span>;
  v31 <span style="color:#f92672">=</span> <span style="color:#ae81ff">22</span>;
  v30 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">102</span>;
  v29 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">51</span>;
  v28 <span style="color:#f92672">=</span> <span style="color:#ae81ff">17</span>;
  v27 <span style="color:#f92672">=</span> <span style="color:#ae81ff">101</span>;
  v26 <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;
  v25 <span style="color:#f92672">=</span> <span style="color:#ae81ff">45</span>;
  v24 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">29</span>;
  v23 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">45</span>;
  v22 <span style="color:#f92672">=</span> <span style="color:#ae81ff">67</span>;
  v21 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">110</span>;
  v20 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">87</span>;
  v19 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">99</span>;
  v18 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">46</span>;
  v17 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">26</span>;
  v16 <span style="color:#f92672">=</span> <span style="color:#ae81ff">109</span>;
  v15 <span style="color:#f92672">=</span> <span style="color:#ae81ff">44</span>;
  v14 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">45</span>;
  v13 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">74</span>;
  v12 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">67</span>;
  v11 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>;
  v10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">106</span>;
  v9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">19</span>;
  v3 <span style="color:#f92672">=</span> alloca(<span style="color:#ae81ff">32</span>);
  v4 <span style="color:#f92672">=</span> alloca(<span style="color:#ae81ff">32</span>);
  v8 <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>v6;
  printf(<span style="color:#e6db74">&#34;Key: &#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%s&#34;</span>, v8);
  <span style="color:#66d9ef">if</span> ( check_key((<span style="color:#66d9ef">int</span>)v8) )
    interesting_function((<span style="color:#66d9ef">int</span>)<span style="color:#f92672">&amp;</span>v7);
  <span style="color:#66d9ef">else</span>
    puts(<span style="color:#e6db74">&#34;Wrong&#34;</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>关键函数是<code>check_key</code>函数，只要对<code>check_key</code>函数进行绕过应该就可以拿到flag</p>
<p>使用Ollydbg进行动态调试：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103155250920.png" alt="image-20211103155250920"></p>
<p>发现Ollydbg总是会输出乱码。不能够正确地将flag输出出来，可能是由于WINDOW编码的问题，也可能是由于题目的WINDOWS程序没有写好。需要再进行对Linux程序进行分析，但是考虑到Linux程序的代码应该是和Windows的代码结构大致一致</p>
<p>把程序拖到Kali Linux中，使用GDB进行调试：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103160210709.png" alt="image-20211103160210709"></p>
<p>成功调试出了flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag_is_you_know_cracking!!!
</code></pre></div><h2 id="0x2-mysterious">0x2 Mysterious</h2>
<p>先使用DIE探测一下：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103163229333.png" alt="image-20211103163229333"></p>
<p>32位PE程序，无壳</p>
<p>尝试运行一下这个程序：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103163501910.png" alt="image-20211103163501910"></p>
<p>密码破解的程序，先进行静态分析确定位置：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103163903336.png" alt="image-20211103163903336"></p>
<p>经典的WIN32程序，继续跟进</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103164106092.png" alt="image-20211103164106092"></p>
<p>跟进<code>DialogFunc</code>函数，这个函数主要就是WIN32的窗口创建函数，代码逻辑应该就在WIN32中。</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103164207779.png" alt="image-20211103164207779"></p>
<p>继续跟进，胜利就在前方！</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103164237890.png" alt="image-20211103164237890"></p>
<p>找到主要的逻辑函数，在下面寻找逻辑判断语句</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103164423968.png" alt="image-20211103164423968"></p>
<p>这个<code>loc_401183</code>应该是关键函数，这个函数的地址是<code>0x401183</code>，使用Ollydbg进行同时调试来绕过这个判断条件直接出flag</p>
<p>使用Ollydbg，使用快捷键<code>CTRL+G</code>快速跳转到<code>0x401183</code>的地址，同时也要根据代码静态分析的逻辑来进行判断，发现需要进行输入的代码段是122，这个可以作为Key进行输入：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103165814525.png" alt="image-20211103165814525"></p>
<p>在Ollydbg中修改汇编，修改跳转条件，然后输入122</p>
<p>就可以拿到flag了</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103171857297.png" alt="image-20211103171857297"></p>
<p>flag为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{123_Buff3r_0v3rf|0w}
</code></pre></div><hr>
<p>本题还有一种更简单的解法，就是直接静态分析来读取密码直接输入来拿到flag</p>
<p>本菜鸡只是希望可以学习到更多的技能点，于是使用另一种思路进行求解。</p>
<h2 id="0x3-re1-100">0x3 re1-100</h2>
<p>先进行一下探测：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103172548605.png" alt="image-20211103172548605"></p>
<p>64位的ELF文件，直接静态分析：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103172742437.png" alt="image-20211103172742437"></p>
<p>代码中有反调试函数，这道题目使用动态调试会有些麻烦，应该是使用静态调试进行求解</p>
<p>查看静态调试代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  __pid_t v3; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  size_t v4; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  ssize_t v5; <span style="color:#75715e">// rbx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">bool</span> v6; <span style="color:#75715e">// al
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">bool</span> bCheckPtrace; <span style="color:#75715e">// [rsp+13h] [rbp-1BDh]
</span><span style="color:#75715e"></span>  ssize_t numRead; <span style="color:#75715e">// [rsp+18h] [rbp-1B8h]
</span><span style="color:#75715e"></span>  ssize_t numReada; <span style="color:#75715e">// [rsp+18h] [rbp-1B8h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> bufWrite[<span style="color:#ae81ff">200</span>]; <span style="color:#75715e">// [rsp+20h] [rbp-1B0h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> bufParentRead[<span style="color:#ae81ff">200</span>]; <span style="color:#75715e">// [rsp+F0h] [rbp-E0h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v12; <span style="color:#75715e">// [rsp+1B8h] [rbp-18h]
</span><span style="color:#75715e"></span>
  v12 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
  bCheckPtrace <span style="color:#f92672">=</span> detectDebugging();
  <span style="color:#66d9ef">if</span> ( pipe(pParentWrite) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
    exit(<span style="color:#ae81ff">1</span>);
  <span style="color:#66d9ef">if</span> ( pipe(pParentRead) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
    exit(<span style="color:#ae81ff">1</span>);
  v3 <span style="color:#f92672">=</span> fork();
  <span style="color:#66d9ef">if</span> ( v3 <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
  {
    <span style="color:#66d9ef">if</span> ( v3 )
    {
      close(pParentWrite[<span style="color:#ae81ff">0</span>]);
      close(pParentRead[<span style="color:#ae81ff">1</span>]);
      <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
      {
        printf(<span style="color:#e6db74">&#34;Input key : &#34;</span>);
        memset(bufWrite, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(bufWrite));
        gets(bufWrite);
        v4 <span style="color:#f92672">=</span> strlen(bufWrite);
        v5 <span style="color:#f92672">=</span> write(pParentWrite[<span style="color:#ae81ff">1</span>], bufWrite, v4);
        <span style="color:#66d9ef">if</span> ( v5 <span style="color:#f92672">!=</span> strlen(bufWrite) )
          printf(<span style="color:#e6db74">&#34;parent - partial/failed write&#34;</span>);
        <span style="color:#66d9ef">do</span>
        {
          memset(bufParentRead, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(bufParentRead));
          numReada <span style="color:#f92672">=</span> read(pParentRead[<span style="color:#ae81ff">0</span>], bufParentRead, <span style="color:#ae81ff">0xC8uLL</span>);
          v6 <span style="color:#f92672">=</span> bCheckPtrace <span style="color:#f92672">||</span> checkDebuggerProcessRunning();
          <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>v6 <span style="color:#f92672">&amp;&amp;</span> checkStringIsNumber(bufParentRead) <span style="color:#f92672">&amp;&amp;</span> atoi(bufParentRead) )
          {
            puts(<span style="color:#e6db74">&#34;True&#34;</span>);
            <span style="color:#66d9ef">if</span> ( close(pParentWrite[<span style="color:#ae81ff">1</span>]) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
              exit(<span style="color:#ae81ff">1</span>);
            exit(<span style="color:#ae81ff">0</span>);
          }
          puts(<span style="color:#e6db74">&#34;Wrong !!!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        }
        <span style="color:#66d9ef">while</span> ( numReada <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> );
      }
    }
    close(pParentWrite[<span style="color:#ae81ff">1</span>]);
    close(pParentRead[<span style="color:#ae81ff">0</span>]);
    <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
    {
      memset(bufParentRead, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(bufParentRead));
      numRead <span style="color:#f92672">=</span> read(pParentWrite[<span style="color:#ae81ff">0</span>], bufParentRead, <span style="color:#ae81ff">0xC8uLL</span>);
      <span style="color:#66d9ef">if</span> ( numRead <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
        <span style="color:#66d9ef">break</span>;
      <span style="color:#66d9ef">if</span> ( numRead )
      {
        <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>childCheckDebugResult()
          <span style="color:#f92672">&amp;&amp;</span> bufParentRead[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">123</span>
          <span style="color:#f92672">&amp;&amp;</span> strlen(bufParentRead) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;*&#39;</span>
          <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>strncmp(<span style="color:#f92672">&amp;</span>bufParentRead[<span style="color:#ae81ff">1</span>], <span style="color:#e6db74">&#34;53fc275d81&#34;</span>, <span style="color:#ae81ff">0xAuLL</span>)
          <span style="color:#f92672">&amp;&amp;</span> bufParentRead[strlen(bufParentRead) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">125</span>
          <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>strncmp(<span style="color:#f92672">&amp;</span>bufParentRead[<span style="color:#ae81ff">31</span>], <span style="color:#e6db74">&#34;4938ae4efd&#34;</span>, <span style="color:#ae81ff">0xAuLL</span>)
          <span style="color:#f92672">&amp;&amp;</span> confuseKey(bufParentRead, <span style="color:#ae81ff">42</span>)
          <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>strncmp(bufParentRead, <span style="color:#e6db74">&#34;{daf29f59034938ae4efd53fc275d81053ed5be8c}&#34;</span>, <span style="color:#ae81ff">0x2AuLL</span>) )
        {
          responseTrue();
        }
        <span style="color:#66d9ef">else</span>
        {
          responseFalse();
        }
      }
    }
    exit(<span style="color:#ae81ff">1</span>);
  }
  exit(<span style="color:#ae81ff">1</span>);
}
</code></pre></div><p>发现存在有一个可疑的字符串：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">{daf29f59034938ae4efd53fc275d81053ed5be8c}
</code></pre></div><p>这个字符串可能是flag，但是感觉似乎有些不太对劲</p>
<p>往上观察，发现存在有一个进行变换的函数<code>confusekey</code></p>
<p>进入这个函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">confuseKey</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>szKey, <span style="color:#66d9ef">int</span> iKeyLength)
{
  <span style="color:#66d9ef">char</span> szPart1[<span style="color:#ae81ff">15</span>]; <span style="color:#75715e">// [rsp+10h] [rbp-50h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> szPart2[<span style="color:#ae81ff">15</span>]; <span style="color:#75715e">// [rsp+20h] [rbp-40h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> szPart3[<span style="color:#ae81ff">15</span>]; <span style="color:#75715e">// [rsp+30h] [rbp-30h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> szPart4[<span style="color:#ae81ff">15</span>]; <span style="color:#75715e">// [rsp+40h] [rbp-20h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v7; <span style="color:#75715e">// [rsp+58h] [rbp-8h]
</span><span style="color:#75715e"></span>
  v7 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
  <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)szPart1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart1[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#f92672">*</span>(_WORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart1[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  szPart1[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)szPart2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart2[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#f92672">*</span>(_WORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart2[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  szPart2[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)szPart3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart3[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#f92672">*</span>(_WORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart3[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  szPart3[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)szPart4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart4[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#f92672">*</span>(_WORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart4[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  szPart4[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">if</span> ( iKeyLength <span style="color:#f92672">!=</span> <span style="color:#ae81ff">42</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>szKey )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">if</span> ( strlen(szKey) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">42</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>szKey <span style="color:#f92672">!=</span> <span style="color:#ae81ff">123</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  strncpy(szPart1, szKey <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0xAuLL</span>);
  strncpy(szPart2, szKey <span style="color:#f92672">+</span> <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">0xAuLL</span>);
  strncpy(szPart3, szKey <span style="color:#f92672">+</span> <span style="color:#ae81ff">21</span>, <span style="color:#ae81ff">0xAuLL</span>);
  strncpy(szPart4, szKey <span style="color:#f92672">+</span> <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">0xAuLL</span>);
  memset(szKey, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x2AuLL</span>);
  <span style="color:#f92672">*</span>szKey <span style="color:#f92672">=</span> <span style="color:#ae81ff">123</span>;
  strcat(szKey, szPart3);
  strcat(szKey, szPart4);
  strcat(szKey, szPart1);
  strcat(szKey, szPart2);
  szKey[<span style="color:#ae81ff">41</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">125</span>;
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
}
</code></pre></div><p>发现字符串发生了位置的变化，将位置变化还原应该就是flag</p>
<p>看代码可以直接对字符进行变换处理：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">53fc275d81053ed5be8cdaf29f59034938ae4efd
</code></pre></div><p>本题的flag为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">53fc275d81053ed5be8cdaf29f59034938ae4efd
</code></pre></div><h2 id="0x4-crazy">0x4 crazy</h2>
<p>探测探测，看看是什么样的程序：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103185717266.png" alt="image-20211103185717266"></p>
<p>64位的ELF程序，无壳。直接上静态分析看一看：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v4; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v6; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v7; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v8; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v9; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v10; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v11; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v12; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v13; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v14; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v15; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v16; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v18[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+10h] [rbp-130h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v19[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+30h] [rbp-110h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v20[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+50h] [rbp-F0h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v21[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+70h] [rbp-D0h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v22[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+90h] [rbp-B0h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v23[<span style="color:#ae81ff">120</span>]; <span style="color:#75715e">// [rsp+B0h] [rbp-90h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v24; <span style="color:#75715e">// [rsp+128h] [rbp-18h]
</span><span style="color:#75715e"></span>
  v24 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span>basic_string(v18, argv, envp);
  std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&gt;&gt;&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cin, v18);
  v3 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;-------------------------------------------&#34;</span>);
  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v3, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
  v4 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;Quote from people&#39;s champ&#34;</span>);
  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v4, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
  v5 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;-------------------------------------------&#34;</span>);
  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v5, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
  v6 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(
         <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout,
         <span style="color:#e6db74">&#34;*My goal was never to be the loudest or the craziest. It was to be the most entertaining.&#34;</span>);
  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v6, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
  v7 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;*Wrestling was like stand-up comedy for me.&#34;</span>);
  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v7, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
  v8 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(
         <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout,
         <span style="color:#e6db74">&#34;*I like to use the hard times in the past to motivate me today.&#34;</span>);
  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v8, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
  v9 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;-------------------------------------------&#34;</span>);
  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v9, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
  HighTemplar<span style="color:#f92672">::</span>HighTemplar((DarkTemplar <span style="color:#f92672">*</span>)v23, (<span style="color:#66d9ef">__int64</span>)v18);
  v10 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;Checking....&#34;</span>);
  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v10, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span>basic_string(v19, v18);
  func1(v20, v19);
  func2(v21, v20);
  func3(v21, <span style="color:#ae81ff">0LL</span>);
  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::~</span>basic_string(v21);
  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::~</span>basic_string(v20);
  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::~</span>basic_string(v19);
  HighTemplar<span style="color:#f92672">::</span>calculate((HighTemplar <span style="color:#f92672">*</span>)v23);
  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)HighTemplar<span style="color:#f92672">::</span>getSerial((HighTemplar <span style="color:#f92672">*</span>)v23) )
  {
    v11 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;/////////////////////////////////&#34;</span>);
    std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v11, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
    v12 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;Do not be angry. Happy Hacking :)&#34;</span>);
    std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v12, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
    v13 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;/////////////////////////////////&#34;</span>);
    std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v13, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
    HighTemplar<span style="color:#f92672">::</span>getFlag[abi:cxx11](v22, v23);
    v14 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;flag{&#34;</span>);
    v15 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>(v14, v22);
    v16 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(v15, <span style="color:#e6db74">&#34;}&#34;</span>);
    std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v16, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
    std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::~</span>basic_string(v22);
  }
  HighTemplar<span style="color:#f92672">::~</span>HighTemplar((HighTemplar <span style="color:#f92672">*</span>)v23);
  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::~</span>basic_string(v18);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>这道题目的难点应该是C++反汇编反编译代码的阅读，需要寻找关键函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">HighTemplar<span style="color:#f92672">::</span>HighTemplar((DarkTemplar <span style="color:#f92672">*</span>)v23, (<span style="color:#66d9ef">__int64</span>)v18); <span style="color:#75715e">// 数据：&#34;327a6c4304ad5938eaf0efb6cc3e53dc&#34;
</span><span style="color:#75715e"></span>HighTemplar<span style="color:#f92672">::</span>calculate((HighTemplar <span style="color:#f92672">*</span>)v23); <span style="color:#75715e">// 加密
</span><span style="color:#75715e"></span>HighTemplar<span style="color:#f92672">::</span>getSerial((HighTemplar <span style="color:#f92672">*</span>)v23); <span style="color:#75715e">// 验证
</span></code></pre></div><p>现在通过审计获得了三个关键函数，现在就可以逐一分析了</p>
<p>先看看加密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">__fastcall</span> HighTemplar<span style="color:#f92672">::</span>calculate(HighTemplar <span style="color:#f92672">*</span><span style="color:#66d9ef">this</span>)
{
  <span style="color:#66d9ef">__int64</span> v1; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v2; <span style="color:#75715e">// rbx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">bool</span> result; <span style="color:#75715e">// al
</span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v4; <span style="color:#75715e">// rbx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+18h] [rbp-18h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> j; <span style="color:#75715e">// [rsp+1Ch] [rbp-14h]
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">if</span> ( std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span>length((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">32</span> )
  {
    v1 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;Too short or too long&#34;</span>);
    std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v1, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
    exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
  }
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
        i <span style="color:#f92672">&lt;=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span>length((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>);
        <span style="color:#f92672">++</span>i )
  {
    v2 <span style="color:#f92672">=</span> (_BYTE <span style="color:#f92672">*</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span><span style="color:#66d9ef">operator</span>[](
                    (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>,
                    i);
    <span style="color:#f92672">*</span>v2 <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span><span style="color:#66d9ef">operator</span>[](
                       (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>,
                       i) <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x50</span>)
        <span style="color:#f92672">+</span> <span style="color:#ae81ff">23</span>;
  }
  <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; ; <span style="color:#f92672">++</span>j )
  {
    result <span style="color:#f92672">=</span> j <span style="color:#f92672">&lt;=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span>length((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>);
    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>result )
      <span style="color:#66d9ef">break</span>;
    v4 <span style="color:#f92672">=</span> (_BYTE <span style="color:#f92672">*</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span><span style="color:#66d9ef">operator</span>[](
                    (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>,
                    j);
    <span style="color:#f92672">*</span>v4 <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span><span style="color:#66d9ef">operator</span>[](
                       (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>,
                       j) <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x13</span>)
        <span style="color:#f92672">+</span> <span style="color:#ae81ff">11</span>;
  }
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>对加密代码简要分析就是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">c <span style="color:#f92672">=</span> (((m <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x50</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">23</span>) <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x13</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">11</span>
</code></pre></div><p>然后查看一下验证函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> HighTemplar<span style="color:#f92672">::</span>getSerial(HighTemplar <span style="color:#f92672">*</span><span style="color:#66d9ef">this</span>)
{
  <span style="color:#66d9ef">char</span> v1; <span style="color:#75715e">// bl
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v2; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v4; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+1Ch] [rbp-14h]
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
        (<span style="color:#66d9ef">int</span>)i <span style="color:#f92672">&lt;</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span>length((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>);
        <span style="color:#f92672">++</span>i )
  {
    v1 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span><span style="color:#66d9ef">operator</span>[](
                     (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">80</span>,
                     (<span style="color:#66d9ef">int</span>)i);
    <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">!=</span> <span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span><span style="color:#66d9ef">operator</span>[](
                           (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>,
                           (<span style="color:#66d9ef">int</span>)i) )
    {
      v4 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;You did not pass &#34;</span>);
      v5 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v4, i);
      std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v5, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
      <span style="color:#f92672">*</span>((_DWORD <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
      <span style="color:#66d9ef">return</span> <span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span>);
    }
    v2 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;Pass &#34;</span>);
    v3 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v2, i);
    std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v3, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
  }
  <span style="color:#66d9ef">return</span> <span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span>);
}
</code></pre></div><p>也是对于字符<code>327a6c4304ad5938eaf0efb6cc3e53dc</code>的验证</p>
<p>于是这道题目就非常简单了，直接对于异或操作进行逆向求解，写个python即可求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">data<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;327a6c4304ad5938eaf0efb6cc3e53dc&#39;</span>
flag<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(data)):
    n<span style="color:#f92672">=</span>ord(data[i])
    flag<span style="color:#f92672">+=</span>chr((((n<span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>)<span style="color:#f92672">^</span><span style="color:#ae81ff">0x13</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">23</span>)<span style="color:#f92672">^</span><span style="color:#ae81ff">0x50</span>)
print(<span style="color:#e6db74">&#39;flag{&#39;</span><span style="color:#f92672">+</span>flag<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;}&#39;</span>)
</code></pre></div><p>运行就能得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{tMx~qdstOs~crvtwb~aOba}qddtbrtcd}
</code></pre></div><h2 id="0x5-windows-reverse1">0x5 Windows Reverse1</h2>
<p>探测程序：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103200343354.png" alt="image-20211103200343354"></p>
<p>程序是32位PE程序，使用了UPX的压缩壳，需要进行程序脱壳</p>
<p>使用 <code>upx -d</code>命令进行脱壳</p>
<p>脱壳后再次检查：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211103202849197.png" alt="image-20211103202849197"></p>
<p>脱壳之后然后进行静态分析：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">char</span> v4; <span style="color:#75715e">// [esp+4h] [ebp-804h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5[<span style="color:#ae81ff">1023</span>]; <span style="color:#75715e">// [esp+5h] [ebp-803h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v6; <span style="color:#75715e">// [esp+404h] [ebp-404h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v7[<span style="color:#ae81ff">1023</span>]; <span style="color:#75715e">// [esp+405h] [ebp-403h] BYREF
</span><span style="color:#75715e"></span>
  v6 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  memset(v7, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(v7));
  v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  memset(v5, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(v5));
  printf(<span style="color:#e6db74">&#34;please input code:&#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#f92672">&amp;</span>v6);
  sub_401000(<span style="color:#f92672">&amp;</span>v6);
  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>strcmp(<span style="color:#f92672">&amp;</span>v4, <span style="color:#e6db74">&#34;DDCTF{reverseME}&#34;</span>) )
    printf(<span style="color:#e6db74">&#34;You&#39;ve got it!!%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#f92672">&amp;</span>v4);
  <span style="color:#66d9ef">else</span>
    printf(<span style="color:#e6db74">&#34;Try again later.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>进行静态分析发现，存在一个关键函数在进行处理，即<code>sub_401000</code>函数在进行处理</p>
<p>跟进这个函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_401000</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>a1)
{
  _BYTE <span style="color:#f92672">*</span>v1; <span style="color:#75715e">// ecx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v2; <span style="color:#75715e">// edi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// ebx
</span><span style="color:#75715e"></span>
  v2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  result <span style="color:#f92672">=</span> strlen(a1);
  <span style="color:#66d9ef">if</span> ( result )
  {
    v4 <span style="color:#f92672">=</span> a1 <span style="color:#f92672">-</span> v1;
    <span style="color:#66d9ef">do</span>
    {
      <span style="color:#f92672">*</span>v1 <span style="color:#f92672">=</span> byte_402FF8[(<span style="color:#66d9ef">char</span>)v1[v4]];
      <span style="color:#f92672">++</span>v2;
      <span style="color:#f92672">++</span>v1;
      result <span style="color:#f92672">=</span> strlen(a1);
    }
    <span style="color:#66d9ef">while</span> ( v2 <span style="color:#f92672">&lt;</span> result );
  }
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>发现这个函数的具体实现算法相对而言是比较难以理解，当然也是本垃圾太菜了，对这个算法的逻辑搞不太清楚。</p>
<p>看看这个代码的汇编语句：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211104075853810.png" alt="image-20211104075853810"></p>
<p>对汇编代码的阅读，就可以理解关键语句</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#f92672">*</span>v1 <span style="color:#f92672">=</span> byte_402FF8[(<span style="color:#66d9ef">char</span>)v1[v4]];
</code></pre></div><p>这个代码就可以转换为</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#f92672">*</span>v1 <span style="color:#f92672">=</span> byte_402FF8[(<span style="color:#66d9ef">char</span>)(v1<span style="color:#f92672">+</span>v4)];
</code></pre></div><p>同时，由于：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">v4 <span style="color:#f92672">=</span> a1 <span style="color:#f92672">-</span> v1;
</code></pre></div><p>因此：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#f92672">*</span>v1 <span style="color:#f92672">=</span> byte_402FF8[(<span style="color:#66d9ef">char</span>)a1];
</code></pre></div><p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211104084802229.png" alt="image-20211104084802229"></p>
<p>这样子就很好分析了，就是将<code>a1</code>进行遍历，将数据存储在v1里面。下面就是寻找<code>byte_402FF8</code></p>
<p>由于本题是在进行很多地址的运算，数组也大概率被存储在更高位的地址，依着逻辑去寻找可以找到<code>byte_402FF8</code></p>
<p><img src="/images/XCTF-REVERSE-expert-%5B13-18%5D_writeup/image-20211104085233187.png" alt="image-20211104085233187"></p>
<p>应该就是下面那一坨字符，进行提取就可以了。</p>
<p>现在逻辑已经大致梳理清楚了，可以写个程序进行求解了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cstring&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
  <span style="color:#66d9ef">char</span> data[]{
    <span style="color:#ae81ff">126</span>, <span style="color:#ae81ff">125</span>, <span style="color:#ae81ff">124</span>, <span style="color:#ae81ff">123</span>, <span style="color:#ae81ff">122</span>, <span style="color:#ae81ff">121</span>, <span style="color:#ae81ff">120</span>, <span style="color:#ae81ff">119</span>, <span style="color:#ae81ff">118</span>, <span style="color:#ae81ff">117</span>, 
    <span style="color:#ae81ff">116</span>, <span style="color:#ae81ff">115</span>, <span style="color:#ae81ff">114</span>, <span style="color:#ae81ff">113</span>, <span style="color:#ae81ff">112</span>, <span style="color:#ae81ff">111</span>, <span style="color:#ae81ff">110</span>, <span style="color:#ae81ff">109</span>, <span style="color:#ae81ff">108</span>, <span style="color:#ae81ff">107</span>, 
    <span style="color:#ae81ff">106</span>, <span style="color:#ae81ff">105</span>, <span style="color:#ae81ff">104</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">102</span>, <span style="color:#ae81ff">101</span>, <span style="color:#ae81ff">100</span>,  <span style="color:#ae81ff">99</span>,  <span style="color:#ae81ff">98</span>,  <span style="color:#ae81ff">97</span>, 
     <span style="color:#ae81ff">96</span>,  <span style="color:#ae81ff">95</span>,  <span style="color:#ae81ff">94</span>,  <span style="color:#ae81ff">93</span>,  <span style="color:#ae81ff">92</span>,  <span style="color:#ae81ff">91</span>,  <span style="color:#ae81ff">90</span>,  <span style="color:#ae81ff">89</span>,  <span style="color:#ae81ff">88</span>,  <span style="color:#ae81ff">87</span>, 
     <span style="color:#ae81ff">86</span>,  <span style="color:#ae81ff">85</span>,  <span style="color:#ae81ff">84</span>,  <span style="color:#ae81ff">83</span>,  <span style="color:#ae81ff">82</span>,  <span style="color:#ae81ff">81</span>,  <span style="color:#ae81ff">80</span>,  <span style="color:#ae81ff">79</span>,  <span style="color:#ae81ff">78</span>,  <span style="color:#ae81ff">77</span>, 
     <span style="color:#ae81ff">76</span>,  <span style="color:#ae81ff">75</span>,  <span style="color:#ae81ff">74</span>,  <span style="color:#ae81ff">73</span>,  <span style="color:#ae81ff">72</span>,  <span style="color:#ae81ff">71</span>,  <span style="color:#ae81ff">70</span>,  <span style="color:#ae81ff">69</span>,  <span style="color:#ae81ff">68</span>,  <span style="color:#ae81ff">67</span>, 
     <span style="color:#ae81ff">66</span>,  <span style="color:#ae81ff">65</span>,  <span style="color:#ae81ff">64</span>,  <span style="color:#ae81ff">63</span>,  <span style="color:#ae81ff">62</span>,  <span style="color:#ae81ff">61</span>,  <span style="color:#ae81ff">60</span>,  <span style="color:#ae81ff">59</span>,  <span style="color:#ae81ff">58</span>,  <span style="color:#ae81ff">57</span>, 
     <span style="color:#ae81ff">56</span>,  <span style="color:#ae81ff">55</span>,  <span style="color:#ae81ff">54</span>,  <span style="color:#ae81ff">53</span>,  <span style="color:#ae81ff">52</span>,  <span style="color:#ae81ff">51</span>,  <span style="color:#ae81ff">50</span>,  <span style="color:#ae81ff">49</span>,  <span style="color:#ae81ff">48</span>,  <span style="color:#ae81ff">47</span>, 
     <span style="color:#ae81ff">46</span>,  <span style="color:#ae81ff">45</span>,  <span style="color:#ae81ff">44</span>,  <span style="color:#ae81ff">43</span>,  <span style="color:#ae81ff">42</span>,  <span style="color:#ae81ff">41</span>,  <span style="color:#ae81ff">40</span>,  <span style="color:#ae81ff">39</span>,  <span style="color:#ae81ff">38</span>,  <span style="color:#ae81ff">37</span>, 
     <span style="color:#ae81ff">36</span>,  <span style="color:#ae81ff">35</span>,  <span style="color:#ae81ff">34</span>,  <span style="color:#ae81ff">33</span>,  <span style="color:#ae81ff">32</span>,   <span style="color:#ae81ff">0</span>
  };
  <span style="color:#66d9ef">char</span> c[]{<span style="color:#e6db74">&#34;DDCTF{reverseME}&#34;</span>};
  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;flag{&#34;</span>;
  <span style="color:#66d9ef">for</span>(size_t i{ <span style="color:#ae81ff">0</span> };i <span style="color:#f92672">&lt;</span> strlen(c);i<span style="color:#f92672">++</span>)
  {
    <span style="color:#66d9ef">for</span>(size_t j{ <span style="color:#ae81ff">0</span> };j <span style="color:#f92672">&lt;</span> strlen(data); j<span style="color:#f92672">++</span>)
    {
      <span style="color:#66d9ef">if</span>(c[i] <span style="color:#f92672">==</span> data[j])
              putchar(<span style="color:#ae81ff">32</span><span style="color:#f92672">+</span>j);
    }
  }
  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;}&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>编译并运行，就能拿到flag啦：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{ZZ[JX#,9(9,+9QY!}
</code></pre></div><p>这道题目坑好多，而且考察的点是相对比较偏的。</p>
]]></content>
        </item>
        
        <item>
            <title>XCTF REVERSE Expert [7~12]_Writeup</title>
            <link>https://zcodetea.github.io/posts/xctf-reverse-expert-7-12_writeup/</link>
            <pubDate>Fri, 28 Jan 2022 19:33:59 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/xctf-reverse-expert-7-12_writeup/</guid>
            <description>XCTF-REVERSE-高手区-[7-12] writeup 感觉攻防世界的逆向题目还是蛮有意思的，刷着玩玩，就当作闯关游戏一样！
0x0 EasyRE 使用DIE查看一下程序信息：
无壳32位程序，直接静态分析走起！
int __cdecl main(int argc, const char **argv, const char **envp) { unsigned int v3; // kr00_4  int v4; // edx  char *v5; // esi  char v6; // al  unsigned int i; // edx  int v8; // eax  char Arglist[16]; // [esp+2h] [ebp-24h] BYREF  __int64 v11; // [esp+12h] [ebp-14h] BYREF  int v12; // [esp+1Ah] [ebp-Ch]  __int16 v13; // [esp+1Eh] [ebp-8h]  sub_401020(Format, Arglist[0]); v12 = 0; v13 = 0; *(_OWORD *)Arglist = 0i64; v11 = 0i64; sub_401050(&amp;#34;%s&amp;#34;, (char)Arglist); v3 = strlen(Arglist); if ( v3 &amp;gt;= 0x10 &amp;amp;&amp;amp; v3 == 24 ) { v4 = 0; v5 = (char *)&amp;amp;v11 + 7; do { v6 = *v5--; byte_40336C[v4++] = v6; } while ( v4 &amp;lt; 24 ); for ( i = 0; i &amp;lt; 0x18; ++i ) byte_40336C[i] = (byte_40336C[i] + 1) ^ 6; v8 = strcmp(byte_40336C, aXircjR2twsv3pt); if ( v8 ) v8 = v8 &amp;lt; 0 ?</description>
            <content type="html"><![CDATA[<h1 id="xctf-reverse-高手区-7-12-writeup">XCTF-REVERSE-高手区-[7-12] writeup</h1>
<p>感觉攻防世界的逆向题目还是蛮有意思的，刷着玩玩，就当作闯关游戏一样！</p>
<h2 id="0x0-easyre">0x0 EasyRE</h2>
<p>使用DIE查看一下程序信息：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B7-12%5D_writeup/image-20211101090530961.png" alt="image-20211101090530961"></p>
<p>无壳32位程序，直接静态分析走起！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// kr00_4
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// edx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v5; <span style="color:#75715e">// esi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v6; <span style="color:#75715e">// al
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// edx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Arglist[<span style="color:#ae81ff">16</span>]; <span style="color:#75715e">// [esp+2h] [ebp-24h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v11; <span style="color:#75715e">// [esp+12h] [ebp-14h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v12; <span style="color:#75715e">// [esp+1Ah] [ebp-Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int16</span> v13; <span style="color:#75715e">// [esp+1Eh] [ebp-8h]
</span><span style="color:#75715e"></span>
  sub_401020(Format, Arglist[<span style="color:#ae81ff">0</span>]);
  v12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#f92672">*</span>(_OWORD <span style="color:#f92672">*</span>)Arglist <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>i64;
  v11 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>i64;
  sub_401050(<span style="color:#e6db74">&#34;%s&#34;</span>, (<span style="color:#66d9ef">char</span>)Arglist);
  v3 <span style="color:#f92672">=</span> strlen(Arglist);
  <span style="color:#66d9ef">if</span> ( v3 <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0x10</span> <span style="color:#f92672">&amp;&amp;</span> v3 <span style="color:#f92672">==</span> <span style="color:#ae81ff">24</span> )
  {
    v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    v5 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v11 <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>;
    <span style="color:#66d9ef">do</span>
    {
      v6 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>v5<span style="color:#f92672">--</span>;
      byte_40336C[v4<span style="color:#f92672">++</span>] <span style="color:#f92672">=</span> v6;
    }
    <span style="color:#66d9ef">while</span> ( v4 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">24</span> );
    <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x18</span>; <span style="color:#f92672">++</span>i )
      byte_40336C[i] <span style="color:#f92672">=</span> (byte_40336C[i] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">^</span> <span style="color:#ae81ff">6</span>;
    v8 <span style="color:#f92672">=</span> strcmp(byte_40336C, aXircjR2twsv3pt);
    <span style="color:#66d9ef">if</span> ( v8 )
      v8 <span style="color:#f92672">=</span> v8 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">?</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>v8 )
    {
      sub_401020(<span style="color:#e6db74">&#34;right</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, Arglist[<span style="color:#ae81ff">0</span>]);
      system(<span style="color:#e6db74">&#34;pause&#34;</span>);
    }
  }
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>看代码，应该是比较简单的。但是需要对代码进行相对比较仔细的审计，来确保代码审计的成功</p>
<p>首先程序先对数组进行了倒序处理</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
v5 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v11 <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>;
<span style="color:#66d9ef">do</span>
{
  v6 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>v5<span style="color:#f92672">--</span>;
  byte_40336C[v4<span style="color:#f92672">++</span>] <span style="color:#f92672">=</span> v6;
}
<span style="color:#66d9ef">while</span> ( v4 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">24</span> );
</code></pre></div><p>然后是对数据进行处理</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x18</span>; <span style="color:#f92672">++</span>i )
  byte_40336C[i] <span style="color:#f92672">=</span> (byte_40336C[i] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">^</span> <span style="color:#ae81ff">6</span>;
</code></pre></div><p>而我们的目标是得到原始匹配的输入数据来获取到flag</p>
<p>编写一个小程序来获得flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cstring&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
  <span style="color:#66d9ef">int</span> data[]{
    <span style="color:#ae81ff">0x78</span>, <span style="color:#ae81ff">0x49</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x43</span>, <span style="color:#ae81ff">0x6A</span>, <span style="color:#ae81ff">0x7E</span>, <span style="color:#ae81ff">0x3C</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x7C</span>, <span style="color:#ae81ff">0x32</span>, 
    <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0x57</span>, <span style="color:#ae81ff">0x73</span>, <span style="color:#ae81ff">0x76</span>, <span style="color:#ae81ff">0x33</span>, <span style="color:#ae81ff">0x50</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0x49</span>, <span style="color:#ae81ff">0x7F</span>, <span style="color:#ae81ff">0x7A</span>, 
    <span style="color:#ae81ff">0x6E</span>, <span style="color:#ae81ff">0x64</span>, <span style="color:#ae81ff">0x6B</span>, <span style="color:#ae81ff">0x61</span>
  };
  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i{ <span style="color:#ae81ff">0</span> };i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">24</span>;i<span style="color:#f92672">++</span>)
  {
    data[i] <span style="color:#f92672">=</span> (data[i]<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
  }
  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> j{<span style="color:#ae81ff">23</span>};j<span style="color:#f92672">&gt;=</span><span style="color:#ae81ff">0</span>;j<span style="color:#f92672">--</span>)
  {
    putchar(data[j]);
  }
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>编译并运行程序得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{xNqU4otPq3ys9wkDsN} 
</code></pre></div><h2 id="0x1-shuffle">0x1 Shuffle</h2>
<p>丢到DIE探测一波：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B7-12%5D_writeup/image-20211101161009642.png" alt="image-20211101161009642"></p>
<p>没有壳，32位的Ubuntu编译的程序，直接静态分析</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  time_t v3; <span style="color:#75715e">// ebx
</span><span style="color:#75715e"></span>  __pid_t v4; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+14h] [ebp-44h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// [esp+18h] [ebp-40h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// [esp+1Ch] [ebp-3Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v9; <span style="color:#75715e">// [esp+20h] [ebp-38h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">40</span>]; <span style="color:#75715e">// [esp+24h] [ebp-34h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v11; <span style="color:#75715e">// [esp+4Ch] [ebp-Ch]
</span><span style="color:#75715e"></span>
  v11 <span style="color:#f92672">=</span> __readgsdword(<span style="color:#ae81ff">0x14u</span>);
  strcpy(s, <span style="color:#e6db74">&#34;SECCON{Welcome to the SECCON 2014 CTF!}&#34;</span>);
  v3 <span style="color:#f92672">=</span> time(<span style="color:#ae81ff">0</span>);
  v4 <span style="color:#f92672">=</span> getpid();
  srand(v3 <span style="color:#f92672">+</span> v4);
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">99</span>; <span style="color:#f92672">++</span>i )
  {
    v7 <span style="color:#f92672">=</span> rand() <span style="color:#f92672">%</span> <span style="color:#ae81ff">0x28u</span>;
    v8 <span style="color:#f92672">=</span> rand() <span style="color:#f92672">%</span> <span style="color:#ae81ff">0x28u</span>;
    v9 <span style="color:#f92672">=</span> s[v7];
    s[v7] <span style="color:#f92672">=</span> s[v8];
    s[v8] <span style="color:#f92672">=</span> v9;
  }
  puts(s);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>由于题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">找到字符串在随机化之前
</code></pre></div><p>故flag为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">SECCON{Welcome to the SECCON 2014 CTF!}
</code></pre></div><h2 id="0x2-re-for-50-plz-50">0x2 re-for-50-plz-50</h2>
<p>使用DIE查看程序信息：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B7-12%5D_writeup/image-20211102081907475.png" alt="image-20211102081907475"></p>
<p>没有壳32位程序，直接静态分析：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [sp+18h] [+18h]
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">31</span>; <span style="color:#f92672">++</span>i )
  {
    <span style="color:#66d9ef">if</span> ( meow[i] <span style="color:#f92672">!=</span> (<span style="color:#66d9ef">char</span>)(argv[<span style="color:#ae81ff">1</span>][i] <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x37</span>) )
    {
      print(<span style="color:#e6db74">&#34;NOOOOOOOOOOOOOOOOOO</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
      exit_funct();
    }
  }
  puts(<span style="color:#e6db74">&#34;C0ngr4ssulations!! U did it.&#34;</span>, argv, envp);
  exit_funct();
}
</code></pre></div><p>代码非常简单，就是对程序静态字符串进行按位异或操作，编写一个程序来求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
  <span style="color:#66d9ef">int</span> meow[]{
    <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0x62</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0x71</span>, <span style="color:#ae81ff">0x4C</span>, <span style="color:#ae81ff">0x55</span>, <span style="color:#ae81ff">0x42</span>, <span style="color:#ae81ff">0x43</span>, <span style="color:#ae81ff">0x68</span>, 
    <span style="color:#ae81ff">0x45</span>, <span style="color:#ae81ff">0x52</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x5B</span>, <span style="color:#ae81ff">0x5B</span>, <span style="color:#ae81ff">0x4E</span>, <span style="color:#ae81ff">0x68</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x5F</span>, <span style="color:#ae81ff">0x58</span>, 
    <span style="color:#ae81ff">0x5E</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x5D</span>, <span style="color:#ae81ff">0x58</span>, <span style="color:#ae81ff">0x5F</span>, <span style="color:#ae81ff">0x59</span>, <span style="color:#ae81ff">0x50</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x5B</span>, <span style="color:#ae81ff">0x43</span>, 
    <span style="color:#ae81ff">0x4A</span>
  };
  <span style="color:#66d9ef">int</span> f{<span style="color:#ae81ff">0x37</span>};
  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i{<span style="color:#ae81ff">0</span>};i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">31</span>;i<span style="color:#f92672">++</span>)
  {
    putchar(meow[i]<span style="color:#f92672">^</span>f);
  }
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>编译并运行得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">TUCTF{but_really_whoisjohngalt}
</code></pre></div><h2 id="0x3-dmd-50">0x3 dmd-50</h2>
<p>使用DIE来进行探测：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B7-12%5D_writeup/image-20211102130922964.png" alt="image-20211102130922964"></p>
<p>64位ELF程序，静态分析一探究竟：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B7-12%5D_writeup/image-20211102135037235.png" alt="image-20211102135037235"></p>
<p>看样子应该是C++编写的程序，可以发现汇编代码有个<code>md5</code>的函数，应该是使用了md5加密</p>
<p>后面的汇编语句进行了一系列的比较操作：</p>
<pre tabindex="0"><code class="language-assembly" data-lang="assembly">0x00400f36      cmp     al, 0x37   ; 55
0x00400f38      jne     0x40129b
0x00400f3e      mov     rax, qword [var_58h]
0x00400f42      add     rax, 1
0x00400f46      movzx   eax, byte [rax]
0x00400f49      cmp     al, 0x38   ; 56
0x00400f4b      jne     0x40129b
0x00400f51      mov     rax, qword [var_58h]
0x00400f55      add     rax, 2
0x00400f59      movzx   eax, byte [rax]
0x00400f5c      cmp     al, 0x30   ; 48
0x00400f5e      jne     0x40129b
0x00400f64      mov     rax, qword [var_58h]
0x00400f68      add     rax, 3
0x00400f6c      movzx   eax, byte [rax]
0x00400f6f      cmp     al, 0x34   ; 52
0x00400f71      jne     0x40129b
0x00400f77      mov     rax, qword [var_58h]
0x00400f7b      add     rax, 4
0x00400f7f      movzx   eax, byte [rax]
0x00400f82      cmp     al, 0x33   ; 51
0x00400f84      jne     0x40129b
0x00400f8a      mov     rax, qword [var_58h]
0x00400f8e      add     rax, 5
0x00400f92      movzx   eax, byte [rax]
0x00400f95      cmp     al, 0x38   ; 56
0x00400f97      jne     0x40129b
0x00400f9d      mov     rax, qword [var_58h]
0x00400fa1      add     rax, 6
0x00400fa5      movzx   eax, byte [rax]
0x00400fa8      cmp     al, 0x64   ; 100
0x00400faa      jne     0x40129b
0x00400fb0      mov     rax, qword [var_58h]
0x00400fb4      add     rax, 7
0x00400fb8      movzx   eax, byte [rax]
0x00400fbb      cmp     al, 0x35   ; 53
0x00400fbd      jne     0x40129b
0x00400fc3      mov     rax, qword [var_58h]
0x00400fc7      add     rax, 8
0x00400fcb      movzx   eax, byte [rax]
0x00400fce      cmp     al, 0x62   ; 98
0x00400fd0      jne     0x40129b
0x00400fd6      mov     rax, qword [var_58h]
0x00400fda      add     rax, 9
0x00400fde      movzx   eax, byte [rax]
0x00400fe1      cmp     al, 0x36   ; 54
0x00400fe3      jne     0x40129b
0x00400fe9      mov     rax, qword [var_58h]
0x00400fed      add     rax, 0xa
0x00400ff1      movzx   eax, byte [rax]
0x00400ff4      cmp     al, 0x65   ; 101
0x00400ff6      jne     0x40129b
0x00400ffc      mov     rax, qword [var_58h]
0x00401000      add     rax, 0xb   ; 11
0x00401004      movzx   eax, byte [rax]
0x00401007      cmp     al, 0x32   ; 50
0x00401009      jne     0x40129b
0x0040100f      mov     rax, qword [var_58h]
0x00401013      add     rax, 0xc   ; 12
0x00401017      movzx   eax, byte [rax]
0x0040101a      cmp     al, 0x39   ; 57
0x0040101c      jne     0x40129b
0x00401022      mov     rax, qword [var_58h]
0x00401026      add     rax, 0xd   ; 13
0x0040102a      movzx   eax, byte [rax]
0x0040102d      cmp     al, 0x64   ; 100
0x0040102f      jne     0x40129b
0x00401035      mov     rax, qword [var_58h]
0x00401039      add     rax, 0xe   ; 14
0x0040103d      movzx   eax, byte [rax]
0x00401040      cmp     al, 0x62   ; 98
0x00401042      jne     0x40129b
0x00401048      mov     rax, qword [var_58h]
0x0040104c      add     rax, 0xf   ; 15
0x00401050      movzx   eax, byte [rax]
0x00401053      cmp     al, 0x30   ; 48
0x00401055      jne     0x40129b
0x0040105b      mov     rax, qword [var_58h]
0x0040105f      add     rax, 0x10  ; 16
0x00401063      movzx   eax, byte [rax]
0x00401066      cmp     al, 0x38   ; 56
0x00401068      jne     0x40129b
0x0040106e      mov     rax, qword [var_58h]
0x00401072      add     rax, 0x11  ; 17
0x00401076      movzx   eax, byte [rax]
0x00401079      cmp     al, 0x39   ; 57
0x0040107b      jne     0x40129b
0x00401081      mov     rax, qword [var_58h]
0x00401085      add     rax, 0x12  ; 18
0x00401089      movzx   eax, byte [rax]
0x0040108c      cmp     al, 0x38   ; 56
0x0040108e      jne     0x40129b
0x00401094      mov     rax, qword [var_58h]
0x00401098      add     rax, 0x13  ; 19
0x0040109c      movzx   eax, byte [rax]
0x0040109f      cmp     al, 0x62   ; 98
0x004010a1      jne     0x40129b
0x004010a7      mov     rax, qword [var_58h]
0x004010ab      add     rax, 0x14  ; 20
0x004010af      movzx   eax, byte [rax]
0x004010b2      cmp     al, 0x63   ; 99
0x004010b4      jne     0x40129b
0x004010ba      mov     rax, qword [var_58h]
0x004010be      add     rax, 0x15  ; 21
0x004010c2      movzx   eax, byte [rax]
0x004010c5      cmp     al, 0x34   ; 52
0x004010c7      jne     0x40129b
0x004010cd      mov     rax, qword [var_58h]
0x004010d1      add     rax, 0x16  ; 22
0x004010d5      movzx   eax, byte [rax]
0x004010d8      cmp     al, 0x66   ; 102
0x004010da      jne     0x40129b
0x004010e0      mov     rax, qword [var_58h]
0x004010e4      add     rax, 0x17  ; 23
0x004010e8      movzx   eax, byte [rax]
0x004010eb      cmp     al, 0x30   ; 48
0x004010ed      jne     0x40129b
0x004010f3      mov     rax, qword [var_58h]
0x004010f7      add     rax, 0x18  ; 24
0x004010fb      movzx   eax, byte [rax]
0x004010fe      cmp     al, 0x32   ; 50
0x00401100      jne     0x40129b
0x00401106      mov     rax, qword [var_58h]
0x0040110a      add     rax, 0x19  ; 25
0x0040110e      movzx   eax, byte [rax]
0x00401111      cmp     al, 0x32   ; 50
0x00401113      jne     0x40129b
0x00401119      mov     rax, qword [var_58h]
0x0040111d      add     rax, 0x1a  ; 26
0x00401121      movzx   eax, byte [rax]
0x00401124      cmp     al, 0x35   ; 53
0x00401126      jne     0x40129b
0x0040112c      mov     rax, qword [var_58h]
0x00401130      add     rax, 0x1b  ; 27
0x00401134      movzx   eax, byte [rax]
0x00401137      cmp     al, 0x39   ; 57
0x00401139      jne     0x40129b
0x0040113f      mov     rax, qword [var_58h]
0x00401143      add     rax, 0x1c  ; 28
0x00401147      movzx   eax, byte [rax]
0x0040114a      cmp     al, 0x33   ; 51
0x0040114c      jne     0x40129b
0x00401152      mov     rax, qword [var_58h]
0x00401156      add     rax, 0x1d  ; 29
0x0040115a      movzx   eax, byte [rax]
0x0040115d      cmp     al, 0x35   ; 53
0x0040115f      jne     0x40129b
0x00401165      mov     rax, qword [var_58h]
0x00401169      add     rax, 0x1e  ; 30
0x0040116d      movzx   eax, byte [rax]
0x00401170      cmp     al, 0x63   ; 99
0x00401172      jne     0x40129b
0x00401178      mov     rax, qword [var_58h]
0x0040117c      add     rax, 0x1f  ; 31
0x00401180      movzx   eax, byte [rax]
0x00401183      cmp     al, 0x30   ; 48
0x00401185      jne     0x40129b
</code></pre><p>根据汇编语句可以得到md5的字符应该是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">780438d5b6e29db0898bc4f0225935c0
</code></pre></div><p>试试使用一些md5破解的工具进行破解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">b781cbb29054db12f88f08c6e161c199
</code></pre></div><p>这个应该就是flag了，题目思路也就很简单。可能感到困难的是C++的反汇编。</p>
<p>本题flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">b781cbb29054db12f88f08c6e161c199
</code></pre></div><h2 id="0x4-parallel-comparator-200">0x4 parallel-comparator-200</h2>
<p>题目直接给到了C的源代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;pthread.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#75715e">#define FLAG_LEN 20
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">checking</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>arg) {
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>result <span style="color:#f92672">=</span> malloc(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>));
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argument <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)arg;
    <span style="color:#f92672">*</span>result <span style="color:#f92672">=</span> (argument[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span>argument[<span style="color:#ae81ff">1</span>]) <span style="color:#f92672">^</span> argument[<span style="color:#ae81ff">2</span>];
    <span style="color:#66d9ef">return</span> result;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">highly_optimized_parallel_comparsion</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>user_string)
{
    <span style="color:#66d9ef">int</span> initialization_number;
    <span style="color:#66d9ef">int</span> i;
    <span style="color:#66d9ef">char</span> generated_string[FLAG_LEN <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>];
    generated_string[FLAG_LEN] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;\0&#39;</span>;

    <span style="color:#66d9ef">while</span> ((initialization_number <span style="color:#f92672">=</span> random()) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">64</span>);
    
    <span style="color:#66d9ef">int</span> first_letter;
    first_letter <span style="color:#f92672">=</span> (initialization_number <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;

    pthread_t <span style="color:#66d9ef">thread</span>[FLAG_LEN];
    <span style="color:#66d9ef">char</span> differences[FLAG_LEN] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">6</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">6</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>};
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>arguments[<span style="color:#ae81ff">20</span>];
    <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> FLAG_LEN; i<span style="color:#f92672">++</span>) {
        arguments[i] <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)malloc(<span style="color:#ae81ff">3</span><span style="color:#f92672">*</span><span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>));
        arguments[i][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> first_letter;
        arguments[i][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> differences[i];
        arguments[i][<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> user_string[i];

        pthread_create((pthread_t<span style="color:#f92672">*</span>)(<span style="color:#66d9ef">thread</span><span style="color:#f92672">+</span>i), NULL, checking, arguments[i]);
    }

    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>result;
    <span style="color:#66d9ef">int</span> just_a_string[FLAG_LEN] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">115</span>, <span style="color:#ae81ff">116</span>, <span style="color:#ae81ff">114</span>, <span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">110</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">101</span>, <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">115</span>, <span style="color:#ae81ff">116</span>, <span style="color:#ae81ff">114</span>, <span style="color:#ae81ff">105</span>, <span style="color:#ae81ff">110</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">105</span>, <span style="color:#ae81ff">116</span>, <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">105</span>, <span style="color:#ae81ff">115</span>};
    <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> FLAG_LEN; i<span style="color:#f92672">++</span>) {
        pthread_join(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">thread</span><span style="color:#f92672">+</span>i), <span style="color:#f92672">&amp;</span>result);
        generated_string[i] <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)result <span style="color:#f92672">+</span> just_a_string[i];
        free(result);
        free(arguments[i]);
    }

    <span style="color:#66d9ef">int</span> is_ok <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> FLAG_LEN; i<span style="color:#f92672">++</span>) {
        <span style="color:#66d9ef">if</span> (generated_string[i] <span style="color:#f92672">!=</span> just_a_string[i])
            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
    }

    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>user_string <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)calloc(FLAG_LEN<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>));
    fgets(user_string, FLAG_LEN<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, stdin);
    <span style="color:#66d9ef">int</span> is_ok <span style="color:#f92672">=</span> highly_optimized_parallel_comparsion(user_string);
    <span style="color:#66d9ef">if</span> (is_ok)
        printf(<span style="color:#e6db74">&#34;You win!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">else</span>
        printf(<span style="color:#e6db74">&#34;Wrong!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>应该是一个代码审计的题目，对C语言源码进行审计</p>
<p>找到关键函数代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">pthread_t <span style="color:#66d9ef">thread</span>[FLAG_LEN];
<span style="color:#66d9ef">char</span> differences[FLAG_LEN] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">6</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">6</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>};
<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>arguments[<span style="color:#ae81ff">20</span>];
<span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> FLAG_LEN; i<span style="color:#f92672">++</span>) {
    arguments[i] <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)malloc(<span style="color:#ae81ff">3</span><span style="color:#f92672">*</span><span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>));
    arguments[i][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> first_letter;
    arguments[i][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> differences[i];
    arguments[i][<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> user_string[i];

    pthread_create((pthread_t<span style="color:#f92672">*</span>)(<span style="color:#66d9ef">thread</span><span style="color:#f92672">+</span>i), NULL, checking, arguments[i]);
}
</code></pre></div><p>关键应该是<code>pthread_create</code>函数和<code>checking</code>函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">checking</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>arg) {
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>result <span style="color:#f92672">=</span> malloc(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>));
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argument <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)arg;
    <span style="color:#f92672">*</span>result <span style="color:#f92672">=</span> (argument[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span>argument[<span style="color:#ae81ff">1</span>]) <span style="color:#f92672">^</span> argument[<span style="color:#ae81ff">2</span>];
    <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>通过对函数<code>pthread_create</code>的查阅并根据<code>checking</code>的返回值可以得到：</p>
<p><code>result == 0</code> ，也就是可以得到一个等式关系来进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">(argument[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span>argument[<span style="color:#ae81ff">1</span>]) <span style="color:#f92672">==</span> argument[<span style="color:#ae81ff">2</span>];
</code></pre></div><p>故现在只需要得到<code>argument[0]</code>的数值就可以进行求解了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> first_letter;
first_letter <span style="color:#f92672">=</span> (initialization_number <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;
</code></pre></div><p>现在可以知道<code>argument[0]</code>的取值范围在 0 ~ 25根据这个范围进行爆破。</p>
<p>根据上述分析，写一个python脚本求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">differences <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">6</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">6</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>]
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">97</span>,<span style="color:#ae81ff">97</span><span style="color:#f92672">+</span><span style="color:#ae81ff">26</span>):
    flag <span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> differences:
        flag <span style="color:#f92672">+=</span> chr(k<span style="color:#f92672">+</span>i)
    print(flag)
</code></pre></div><p>运行代码在输出结果中可以找到：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B7-12%5D_writeup/image-20211102180423890.png" alt="image-20211102180423890"></p>
<p>故本题的flag:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">lucky_hacker_you_are
</code></pre></div><h2 id="0x5-secret-galaxy-300">0x5 secret-galaxy-300</h2>
<p>使用DIE来对程序进行探测：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B7-12%5D_writeup/image-20211102184409728.png" alt="image-20211102184409728"></p>
<p>没有壳，静态分析看下代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  __main();
  fill_starbase(<span style="color:#f92672">&amp;</span>starbase);
  print_starbase(<span style="color:#f92672">&amp;</span>starbase);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>分别跟进两个函数来查看</p>
<p>fill_starbase：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">fill_starbase</span>(<span style="color:#66d9ef">int</span> a1)
{
  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+8h] [ebp-10h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v2; <span style="color:#75715e">// [esp+Ch] [ebp-Ch]
</span><span style="color:#75715e"></span>
  v2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4</span>; <span style="color:#f92672">++</span>i )
  {
    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i) <span style="color:#f92672">=</span> galaxy_name[i];
    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">=</span> rand();
    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">12</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> (i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> a1;
    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">20</span>) <span style="color:#f92672">=</span> v2;
    v2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1;
  }
</code></pre></div><p>print_starbase：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">print_starbase</span>(<span style="color:#66d9ef">int</span> a1)
{
  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v2; <span style="color:#75715e">// edx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+1Ch] [ebp-Ch]
</span><span style="color:#75715e"></span>
  puts(<span style="color:#e6db74">&#34;--------------GALAXY DATABASE-------------&#34;</span>);
  printf(<span style="color:#e6db74">&#34;%10s | %s | %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#e6db74">&#34;Galaxy name&#34;</span>, <span style="color:#e6db74">&#34;Existence of life&#34;</span>, <span style="color:#e6db74">&#34;Distance from Earth&#34;</span>);
  result <span style="color:#f92672">=</span> puts(<span style="color:#e6db74">&#34;-------------------------------------------&#34;</span>);
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4</span>; <span style="color:#f92672">++</span>i )
  {
    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
      v2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;INHABITED&#34;</span>;
    <span style="color:#66d9ef">else</span>
      v2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;IS NOT INHABITED&#34;</span>;
    result <span style="color:#f92672">=</span> printf(<span style="color:#e6db74">&#34;%11s | %17s | %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#f92672">*</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1), v2, <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>));
  }
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>实在是看不出什么线索，查看一下字符串输出</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B7-12%5D_writeup/image-20211102191117327.png" alt="image-20211102191117327"></p>
<p>发现有个字符串没有进行输出，有点可疑，跟进去一探究竟</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B7-12%5D_writeup/image-20211102191250757.png" alt="image-20211102191250757"></p>
<p>果然有些端倪，继续追踪</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B7-12%5D_writeup/image-20211102191341004.png" alt="image-20211102191341004"></p>
<p>再接再励，真相就在眼前</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B7-12%5D_writeup/image-20211102191448118.png" alt="image-20211102191448118"></p>
<p>这个字符串的地址是0x4013E0，拿到了地址就可以做很多事情了，可以使用Ollydbg跟踪到这个地址来进行动态分析，如果没有问题的话，flag应该就在动态调试的内存中。先来尝试一下调试调试：</p>
<p>步入到断点0x4013E0，不断进行F8单步运行，运行到函数结尾位置，查看一下内存：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B7-12%5D_writeup/image-20211102192916295.png" alt="image-20211102192916295"></p>
<p>发现可疑字符，这段字符应该就是可能的flag</p>
<p>这道题目的flag是</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">aliens_are_around_us
</code></pre></div><hr>
]]></content>
        </item>
        
        <item>
            <title>XCTF REVERSE Expert [1~6]_Writeup</title>
            <link>https://zcodetea.github.io/posts/xctf-reverse-expert-1-6_writeup/</link>
            <pubDate>Fri, 28 Jan 2022 19:33:49 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/xctf-reverse-expert-1-6_writeup/</guid>
            <description>XCTF-REVERSE-高手区-[1-6] writeup 有段时间没有刷题了，刷刷题找找手感
0x0 answer_to_everything 使用DIE查看程序信息
程序没有壳，而且是64位。然后看看文件长什么样，静态分析的时刻来临：
发现关键函数，跟进这个函数
__int64 __fastcall not_the_flag(int a1) { if ( a1 == 42 ) puts(&amp;#34;Cipher from Bill \nSubmit without any tags\n#kdudpeh&amp;#34;); else puts(&amp;#34;YOUSUCK&amp;#34;); return 0LL; } 根据题目要求，应该是要对一个字段进行sha1加密，仔细观察逆向程序，发现应该是对kdudpeh进行sha1加密
使用python进行sha1加密得：
80ee2a3fe31da904c596d993f7f1de4827c1450a 故本题flag为
flag{80ee2a3fe31da904c596d993f7f1de4827c1450a} 0x1 elrond32 使用DIE查询一下文件信息
32位的exec文件，使用IDA pro打开
定位到main函数的位置
int __cdecl main(int a1, char **a2) { if ( a1 &amp;gt; 1 &amp;amp;&amp;amp; sub_8048414(a2[1], 0) ) { puts(&amp;#34;Access granted&amp;#34;); sub_8048538(a2[1]); } else { puts(&amp;#34;Access denied&amp;#34;); } return 0; } 关键函数应该是在sub_8048538(a2[1])函数里面</description>
            <content type="html"><![CDATA[<h1 id="xctf-reverse-高手区-1-6-writeup">XCTF-REVERSE-高手区-[1-6] writeup</h1>
<p>有段时间没有刷题了，刷刷题找找手感</p>
<h2 id="0x0-answer_to_everything">0x0 answer_to_everything</h2>
<p>使用DIE查看程序信息</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B1-6%5D_writeup/image-20211031104627471.png" alt="image-20211031104627471"></p>
<p>程序没有壳，而且是64位。然后看看文件长什么样，静态分析的时刻来临：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B1-6%5D_writeup/image-20211031104740182.png" alt="image-20211031104740182"></p>
<p>发现关键函数，跟进这个函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">not_the_flag</span>(<span style="color:#66d9ef">int</span> a1)
{
  <span style="color:#66d9ef">if</span> ( a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">42</span> )
    puts(<span style="color:#e6db74">&#34;Cipher from Bill </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Submit without any tags</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">#kdudpeh&#34;</span>);
  <span style="color:#66d9ef">else</span>
    puts(<span style="color:#e6db74">&#34;YOUSUCK&#34;</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
}
</code></pre></div><p>根据题目要求，应该是要对一个字段进行sha1加密，仔细观察逆向程序，发现应该是对<code>kdudpeh</code>进行sha1加密</p>
<p>使用python进行sha1加密得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">80ee2a3fe31da904c596d993f7f1de4827c1450a
</code></pre></div><p>故本题flag为</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{80ee2a3fe31da904c596d993f7f1de4827c1450a}
</code></pre></div><h2 id="0x1-elrond32">0x1 elrond32</h2>
<p>使用DIE查询一下文件信息</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B1-6%5D_writeup/image-20211031105318823.png" alt="image-20211031105318823"></p>
<p>32位的exec文件，使用IDA pro打开</p>
<p>定位到main函数的位置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> a1, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a2)
{
  <span style="color:#66d9ef">if</span> ( a1 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> sub_8048414(a2[<span style="color:#ae81ff">1</span>], <span style="color:#ae81ff">0</span>) )
  {
    puts(<span style="color:#e6db74">&#34;Access granted&#34;</span>);
    sub_8048538(a2[<span style="color:#ae81ff">1</span>]);
  }
  <span style="color:#66d9ef">else</span>
  {
    puts(<span style="color:#e6db74">&#34;Access denied&#34;</span>);
  }
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>关键函数应该是在<code>sub_8048538(a2[1])</code>函数里面</p>
<p>跟进到<code>sub_8048538(a2[1])</code>函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_8048538</span>(<span style="color:#66d9ef">int</span> a1)
{
  <span style="color:#66d9ef">int</span> v2[<span style="color:#ae81ff">33</span>]; <span style="color:#75715e">// [esp+18h] [ebp-A0h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+9Ch] [ebp-1Ch]
</span><span style="color:#75715e"></span>
  qmemcpy(v2, <span style="color:#f92672">&amp;</span>unk_8048760, <span style="color:#66d9ef">sizeof</span>(v2));
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">32</span>; <span style="color:#f92672">++</span>i )
    putchar(v2[i] <span style="color:#f92672">^</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">8</span>));
  <span style="color:#66d9ef">return</span> putchar(<span style="color:#ae81ff">10</span>);
}
</code></pre></div><p>发现和参数a2有关联，需要寻找<code>a2</code>的相关线索</p>
<p>发现<code>if</code>判断那个位置的函数有对<code>a2</code>数据进行处理，跟进那个函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_8048414</span>(_BYTE <span style="color:#f92672">*</span>a1, <span style="color:#66d9ef">int</span> a2)
{
  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">switch</span> ( a2 )
  {
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span>
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">105</span> )
        <span style="color:#66d9ef">goto</span> LABEL_19;
      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">101</span> )
        <span style="color:#66d9ef">goto</span> LABEL_19;
      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">:</span>
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">110</span> )
        <span style="color:#66d9ef">goto</span> LABEL_19;
      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">:</span>
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">100</span> )
        <span style="color:#66d9ef">goto</span> LABEL_19;
      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">:</span>
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">97</span> )
        <span style="color:#66d9ef">goto</span> LABEL_19;
      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">6</span><span style="color:#f92672">:</span>
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">103</span> )
        <span style="color:#66d9ef">goto</span> LABEL_19;
      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">7</span><span style="color:#f92672">:</span>
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">115</span> )
        <span style="color:#66d9ef">goto</span> LABEL_19;
      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">9</span><span style="color:#f92672">:</span>
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">114</span> )
LABEL_19:
        result <span style="color:#f92672">=</span> sub_8048414(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">7</span> <span style="color:#f92672">*</span> (a2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">11</span>);
      <span style="color:#66d9ef">else</span>
        result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
      <span style="color:#66d9ef">break</span>;
  }
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>对于<code>a2</code>进行递归变化，结合对于<code>a2</code>处理的函数，可以编写个小程序来生成flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
  <span style="color:#66d9ef">int</span> v2[]
  {
    <span style="color:#ae81ff">0x0F</span>, <span style="color:#ae81ff">0x1F</span>,  <span style="color:#ae81ff">0x04</span>, <span style="color:#ae81ff">0x09</span>, <span style="color:#ae81ff">0x1C</span>, <span style="color:#ae81ff">0x12</span>,  <span style="color:#ae81ff">0x42</span>,  <span style="color:#ae81ff">0x09</span>,  <span style="color:#ae81ff">0x0C</span>, <span style="color:#ae81ff">0x44</span>, 
    <span style="color:#ae81ff">0x0D</span>, <span style="color:#ae81ff">0x07</span>,  <span style="color:#ae81ff">0x09</span>, <span style="color:#ae81ff">0x06</span>, <span style="color:#ae81ff">0x2D</span>, <span style="color:#ae81ff">0x37</span>,  <span style="color:#ae81ff">0x59</span>,  <span style="color:#ae81ff">0x1E</span>,  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x59</span>, 
    <span style="color:#ae81ff">0x0F</span>, <span style="color:#ae81ff">0x08</span>,  <span style="color:#ae81ff">0x1C</span>, <span style="color:#ae81ff">0x23</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x07</span>,  <span style="color:#ae81ff">0x55</span>,  <span style="color:#ae81ff">0x02</span>,  <span style="color:#ae81ff">0x0C</span>, <span style="color:#ae81ff">0x08</span>, 
    <span style="color:#ae81ff">0x41</span>, <span style="color:#ae81ff">0x0A</span>,  <span style="color:#ae81ff">0x14</span>
  };
  <span style="color:#66d9ef">int</span> key[]
  {
    <span style="color:#ae81ff">105</span>,<span style="color:#ae81ff">115</span>,<span style="color:#ae81ff">101</span>,<span style="color:#ae81ff">110</span>,<span style="color:#ae81ff">103</span>,<span style="color:#ae81ff">97</span>,<span style="color:#ae81ff">114</span>,<span style="color:#ae81ff">100</span>
  };
  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">33</span>;i<span style="color:#f92672">++</span>)
  {
    putchar(v2[i]<span style="color:#f92672">^</span>key[i<span style="color:#f92672">%</span><span style="color:#ae81ff">8</span>]);
  }
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>编译并运行，就能得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{s0me7hing_S0me7hinG_t0lki3n}
</code></pre></div><h2 id="0x2-666">0x2 666</h2>
<p>使用DIE查询一下程序信息：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B1-6%5D_writeup/image-20211031153424353.png" alt="image-20211031153424353"></p>
<p>64位程序，使用GCC进行编译的无壳程序</p>
<p>使用IDA x64 pro 对程序进行静态分析：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">240</span>]; <span style="color:#75715e">// [rsp+0h] [rbp-1E0h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5[<span style="color:#ae81ff">240</span>]; <span style="color:#75715e">// [rsp+F0h] [rbp-F0h] BYREF
</span><span style="color:#75715e"></span>
  memset(s, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">30uLL</span>);
  printf(<span style="color:#e6db74">&#34;Please Input Key: &#34;</span>);
  __isoc99_scanf(<span style="color:#e6db74">&#34;%s&#34;</span>, v5);
  encode(v5, (<span style="color:#66d9ef">__int64</span>)s);
  <span style="color:#66d9ef">if</span> ( strlen(v5) <span style="color:#f92672">==</span> key )
  {
    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>strcmp(s, enflag) )
      puts(<span style="color:#e6db74">&#34;You are Right&#34;</span>);
    <span style="color:#66d9ef">else</span>
      puts(<span style="color:#e6db74">&#34;flag{This_1s_f4cker_flag}&#34;</span>);
  }
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>关键函数应该是在encode里面，这个程序的基本逻辑就是将输入进行<code>encode</code>函数处理，然后与指定的字符串进行比对来进行验证。</p>
<p>而输入的字符串就是flag数据。</p>
<p>因此，这道题目也就可以非常简单进行处理，也就是对<code>encode</code>函数进行逆向处理就可</p>
<p>首先，还是查看一下<code>encode</code>的内部实现情况：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">encode</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>a1, <span style="color:#66d9ef">__int64</span> a2)
{
  <span style="color:#66d9ef">char</span> v3[<span style="color:#ae81ff">104</span>]; <span style="color:#75715e">// [rsp+10h] [rbp-70h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// [rsp+78h] [rbp-8h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+7Ch] [rbp-4h]
</span><span style="color:#75715e"></span>
  i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">if</span> ( strlen(a1) <span style="color:#f92672">!=</span> key )
    <span style="color:#66d9ef">return</span> puts(<span style="color:#e6db74">&#34;Your Length is Wrong&#34;</span>);
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> key; i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">3</span> )
  {
    v3[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">64</span>] <span style="color:#f92672">=</span> key <span style="color:#f92672">^</span> (a1[i] <span style="color:#f92672">+</span> <span style="color:#ae81ff">6</span>);
    v3[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">33</span>] <span style="color:#f92672">=</span> (a1[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">6</span>) <span style="color:#f92672">^</span> key;
    v3[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> a1[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">6</span> <span style="color:#f92672">^</span> key;
    <span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)(a2 <span style="color:#f92672">+</span> i) <span style="color:#f92672">=</span> v3[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">64</span>];
    <span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)(a2 <span style="color:#f92672">+</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1LL</span>) <span style="color:#f92672">=</span> v3[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">33</span>];
    <span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)(a2 <span style="color:#f92672">+</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2LL</span>) <span style="color:#f92672">=</span> v3[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>];
  }
  <span style="color:#66d9ef">return</span> a2;
}
</code></pre></div><p>进行跟踪发现<code>key = 18</code></p>
<p>可以得知我们输入的内容长度为18</p>
<p>根据编码函数编写一个解密器进行程序破解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
  <span style="color:#66d9ef">int</span> enflag[] <span style="color:#f92672">=</span>
  {
    <span style="color:#ae81ff">0x69</span>, <span style="color:#ae81ff">0x7A</span>, <span style="color:#ae81ff">0x77</span>, <span style="color:#ae81ff">0x68</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x6F</span>, <span style="color:#ae81ff">0x7A</span>, <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x77</span>, 
    <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x76</span>, <span style="color:#ae81ff">0x2E</span>, <span style="color:#ae81ff">0x4B</span>, <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x2E</span>, <span style="color:#ae81ff">0x4E</span>, <span style="color:#ae81ff">0x69</span>, <span style="color:#ae81ff">0x00</span>
  };
  <span style="color:#66d9ef">int</span> key <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x12</span>;
  <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">for</span>(i;i<span style="color:#f92672">&lt;</span>key;i<span style="color:#f92672">+=</span><span style="color:#ae81ff">3</span>)
  {
    putchar((key<span style="color:#f92672">^</span>enflag[i])<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>);
    putchar((enflag[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">^</span>key)<span style="color:#f92672">+</span><span style="color:#ae81ff">6</span>);
    putchar((enflag[i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>]<span style="color:#f92672">^</span>key<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span>));
  }
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>编译并运行程序就能拿到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">unctf{b66_6b6_66b}
</code></pre></div><h2 id="0x3-igniteme">0x3 IgniteMe</h2>
<p>首先是使用DIE进行程序信息的查看：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B1-6%5D_writeup/image-20211031161028282.png" alt="image-20211031161028282"></p>
<p>32位的PE程序，PE程序可以使用的工具就有很多了，首先还是静态分析：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  size_t i; <span style="color:#75715e">// [esp+4Ch] [ebp-8Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5[<span style="color:#ae81ff">8</span>]; <span style="color:#75715e">// [esp+50h] [ebp-88h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Str[<span style="color:#ae81ff">128</span>]; <span style="color:#75715e">// [esp+58h] [ebp-80h] BYREF
</span><span style="color:#75715e"></span>
  sub_402B30(<span style="color:#f92672">&amp;</span>unk_446360, <span style="color:#e6db74">&#34;Give me your flag:&#34;</span>);
  sub_4013F0(sub_403670);
  sub_401440(Str, <span style="color:#ae81ff">127</span>);
  <span style="color:#66d9ef">if</span> ( strlen(Str) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x1E</span> <span style="color:#f92672">&amp;&amp;</span> strlen(Str) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">4</span> )
  {
    strcpy(v5, <span style="color:#e6db74">&#34;EIS{&#34;</span>);
    <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> strlen(v5); <span style="color:#f92672">++</span>i )
    {
      <span style="color:#66d9ef">if</span> ( Str[i] <span style="color:#f92672">!=</span> v5[i] )
        <span style="color:#66d9ef">goto</span> LABEL_7;
    }
    <span style="color:#66d9ef">if</span> ( Str[<span style="color:#ae81ff">28</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">125</span> )
    {
LABEL_7:
      sub_402B30(<span style="color:#f92672">&amp;</span>unk_446360, <span style="color:#e6db74">&#34;Sorry, keep trying! &#34;</span>);
      sub_4013F0(sub_403670);
      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
    }
    <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)sub_4011C0(Str) )
      sub_402B30(<span style="color:#f92672">&amp;</span>unk_446360, <span style="color:#e6db74">&#34;Congratulations! &#34;</span>);
    <span style="color:#66d9ef">else</span>
      sub_402B30(<span style="color:#f92672">&amp;</span>unk_446360, <span style="color:#e6db74">&#34;Sorry, keep trying! &#34;</span>);
    sub_4013F0(sub_403670);
    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  }
  <span style="color:#66d9ef">else</span>
  {
    sub_402B30(<span style="color:#f92672">&amp;</span>unk_446360, <span style="color:#e6db74">&#34;Sorry, keep trying!&#34;</span>);
    sub_4013F0(sub_403670);
    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  }
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>找到关键加密的位置进行分析</p>
<p>即对函数<code>sub_4011c0(str)</code>进行分析</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_4011C0</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>Str)
{
  size_t v2; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// [esp+50h] [ebp-B0h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Str2[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [esp+54h] [ebp-ACh] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// [esp+74h] [ebp-8Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// [esp+78h] [ebp-88h]
</span><span style="color:#75715e"></span>  size_t i; <span style="color:#75715e">// [esp+7Ch] [ebp-84h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v8[<span style="color:#ae81ff">128</span>]; <span style="color:#75715e">// [esp+80h] [ebp-80h] BYREF
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">if</span> ( strlen(Str) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  i <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
  v6 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">while</span> ( i <span style="color:#f92672">&lt;</span> strlen(Str) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> )
    v8[v6<span style="color:#f92672">++</span>] <span style="color:#f92672">=</span> Str[i<span style="color:#f92672">++</span>];
  v8[v6] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  v5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  memset(Str2, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(Str2));
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; ; <span style="color:#f92672">++</span>i )
  {
    v2 <span style="color:#f92672">=</span> strlen(v8);
    <span style="color:#66d9ef">if</span> ( i <span style="color:#f92672">&gt;=</span> v2 )
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">if</span> ( v8[i] <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">97</span> <span style="color:#f92672">&amp;&amp;</span> v8[i] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">122</span> )
    {
      v8[i] <span style="color:#f92672">-=</span> <span style="color:#ae81ff">32</span>;
      v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
    }
    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>v3 <span style="color:#f92672">&amp;&amp;</span> v8[i] <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">65</span> <span style="color:#f92672">&amp;&amp;</span> v8[i] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> )
      v8[i] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">32</span>;
    Str2[i] <span style="color:#f92672">=</span> byte_4420B0[i] <span style="color:#f92672">^</span> sub_4013C0(v8[i]);
    v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  }
  <span style="color:#66d9ef">return</span> strcmp(<span style="color:#e6db74">&#34;GONDPHyGjPEKruv{{pj]X@rF&#34;</span>, Str2) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>直接就是一个加密算法，直接进行手撸一个解密算法即可：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cstring&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
  <span style="color:#66d9ef">char</span> flag[<span style="color:#ae81ff">128</span>]{ <span style="color:#ae81ff">0</span> };
  <span style="color:#66d9ef">char</span> s[]{
  <span style="color:#ae81ff">0x0D</span>, <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0x17</span>, <span style="color:#ae81ff">0x11</span>, <span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x1D</span>, <span style="color:#ae81ff">0x0C</span>, <span style="color:#ae81ff">0x02</span>, 
  <span style="color:#ae81ff">0x19</span>, <span style="color:#ae81ff">0x2F</span>, <span style="color:#ae81ff">0x17</span>, <span style="color:#ae81ff">0x2B</span>, <span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x1F</span>, <span style="color:#ae81ff">0x1E</span>, <span style="color:#ae81ff">0x16</span>, <span style="color:#ae81ff">0x09</span>, <span style="color:#ae81ff">0x0F</span>, 
  <span style="color:#ae81ff">0x15</span>, <span style="color:#ae81ff">0x27</span>, <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0x26</span>, <span style="color:#ae81ff">0x0A</span>, <span style="color:#ae81ff">0x2F</span>, <span style="color:#ae81ff">0x1E</span>, <span style="color:#ae81ff">0x1A</span>, <span style="color:#ae81ff">0x2D</span>, <span style="color:#ae81ff">0x0C</span>, 
  <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x04</span>
  };
  <span style="color:#66d9ef">char</span> Str[]{ <span style="color:#e6db74">&#34;GONDPHyGjPEKruv{{pj]X@rF&#34;</span> };
  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i{ <span style="color:#ae81ff">0</span> };i<span style="color:#f92672">&lt;</span>strlen(Str);i<span style="color:#f92672">++</span>)
  {
    flag[i] <span style="color:#f92672">=</span> ((Str[i]<span style="color:#f92672">^</span>s[i])<span style="color:#f92672">-</span><span style="color:#ae81ff">72</span>)<span style="color:#f92672">^</span><span style="color:#ae81ff">0x55</span>;
    <span style="color:#66d9ef">if</span>(flag[i] <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">&amp;&amp;</span> flag[i] <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#39;z&#39;</span>)
    {
      flag[i] <span style="color:#f92672">-=</span> <span style="color:#ae81ff">32</span>;
    }
    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(flag[i] <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">&amp;&amp;</span> flag[i] <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#39;Z&#39;</span>)
    {
      flag[i] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">32</span>;
    }
  }
  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;EIS{&#34;</span> <span style="color:#f92672">&lt;&lt;</span> flag <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;}&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

</code></pre></div><p>编译并运行，就可以得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">EIS{wadx_tdgk_aihc_ihkn_pjlm}
</code></pre></div><h2 id="0x4-debug">0x4 debug</h2>
<p>使用DIE进行正常的程序信息查询：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B1-6%5D_writeup/image-20211101080738116.png" alt="image-20211101080738116"></p>
<p>.Net编译的程序，看样子不太友好。面对从未见到过的程序，该怎么做呢？这种情况下，就要使用强大的搜索引擎来寻找答案，经过搜索引擎的帮助，我这边找到了一个工具可以进行.Net程序的逆向——dnSpy</p>
<p>使用dnSpy来进行.Net程序的开心逆向吧！</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B1-6%5D_writeup/image-20211101082430169.png" alt="image-20211101082430169"></p>
<p>dnSpy程序载入页面，dnSpy是一个非常好用的.Net程序和C#程序逆向工具，而且dnSpy的操作方式与Visual Studio非常相似，可以根据Visual Studio的操作模式进行debug。</p>
<p>首先，需要寻找到关键函数和关键代码位置</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B1-6%5D_writeup/image-20211101082804148.png" alt="image-20211101082804148"></p>
<p>经过一番寻找，发现在02000003的位置有存在关键代码，根据关键代码跟进关键函数发现：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B1-6%5D_writeup/image-20211101083006881.png" alt="image-20211101083006881"></p>
<p>flag就存在在这里，使用断点断在入口函数这里来进行调试，得到：</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B1-6%5D_writeup/image-20211101083207311.png" alt="image-20211101083207311"></p>
<p>得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{967DDDFBCD32C1F53527C221D9E40A0B}
</code></pre></div><h2 id="0x5-guess-the-number">0x5 Guess-the-Number</h2>
<p>题目直接给了一个jar程序文件，应该是一个java逆向题目，java逆向和Android逆向类似，故可以使用相似的工具进行反编译：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> defpackage<span style="color:#f92672">;</span>

<span style="color:#f92672">import</span> java.math.BigInteger<span style="color:#f92672">;</span>

<span style="color:#75715e">/* renamed from: guess  reason: default package */</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">guess</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">XOR</span><span style="color:#f92672">(</span>String _str_one<span style="color:#f92672">,</span> String _str_two<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> BigInteger<span style="color:#f92672">(</span>_str_one<span style="color:#f92672">,</span> 16<span style="color:#f92672">).</span><span style="color:#a6e22e">xor</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> BigInteger<span style="color:#f92672">(</span>_str_two<span style="color:#f92672">,</span> 16<span style="color:#f92672">)).</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(</span>16<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>args<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">&gt;</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>309137378 <span style="color:#f92672">==</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">parseInt</span><span style="color:#f92672">(</span>args<span style="color:#f92672">[</span>0<span style="color:#f92672">]))</span> <span style="color:#f92672">{</span>
                    <span style="color:#66d9ef">int</span> my_num <span style="color:#f92672">=</span> 349763335 <span style="color:#f92672">+</span> 345736730<span style="color:#f92672">;</span>
                    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;your flag is: &#34;</span> <span style="color:#f92672">+</span> XOR<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;4b64ca12ace755516c178f72d05d7061&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;ecd44646cfe5994ebeb35bf922e25dba&#34;</span><span style="color:#f92672">));</span>
                    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
                <span style="color:#f92672">}</span>
                System<span style="color:#f92672">.</span><span style="color:#a6e22e">err</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;wrong guess!&#34;</span><span style="color:#f92672">);</span>
                System<span style="color:#f92672">.</span><span style="color:#a6e22e">exit</span><span style="color:#f92672">(</span>1<span style="color:#f92672">);</span>
            <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>NumberFormatException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                System<span style="color:#f92672">.</span><span style="color:#a6e22e">err</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;please enter an integer \nexample: java -jar guess 12&#34;</span><span style="color:#f92672">);</span>
                System<span style="color:#f92672">.</span><span style="color:#a6e22e">exit</span><span style="color:#f92672">(</span>1<span style="color:#f92672">);</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
            System<span style="color:#f92672">.</span><span style="color:#a6e22e">err</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;wrong guess!&#34;</span><span style="color:#f92672">);</span>
            <span style="color:#66d9ef">int</span> num <span style="color:#f92672">=</span> 1000000 <span style="color:#f92672">+</span> 1<span style="color:#f92672">;</span>
            System<span style="color:#f92672">.</span><span style="color:#a6e22e">exit</span><span style="color:#f92672">(</span>1<span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>可以直接拖到idea进行参数调试来得到flag:cat:（偷懒小技巧）</p>
<p><img src="/images/XCTF-REVERSE-expert-%5B1-6%5D_writeup/image-20211101084458531.png" alt="image-20211101084458531"></p>
<p>成功得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">a7b08c546302cc1fd2a4d48bf2bf2ddb
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>BUUCTF REVERSE [17~24]_Writeup</title>
            <link>https://zcodetea.github.io/posts/buuctf-reverse-17-24_writeup/</link>
            <pubDate>Fri, 28 Jan 2022 19:24:35 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/buuctf-reverse-17-24_writeup/</guid>
            <description>BUUCTF-REVERSE-[17-24] writeup 8道练手的逆向题目，可以尝试做一做
0x0 [GWCTF 2019] pyre 应该是python逆向的题目
果然是一个pyc文件，使用pyc的逆向工具进行处理得到python的代码
# uncompyle6 version 3.7.4 # Python bytecode 2.7 (62211) # Decompiled from: Python 3.8.8 (default, Apr 13 2021, 15:08:03) [MSC v.1916 64 bit (AMD64)] # Embedded file name: encode.py # Compiled at: 2019-08-19 21:01:57 print &amp;#39;Welcome to Re World!&amp;#39; print &amp;#39;Your input1 is your flag~&amp;#39; l = len(input1) for i in range(l): num = ((input1[i] + i) % 128 + 128) % 128 code += num for i in range(l - 1): code[i] = code[i] ^ code[(i + 1)] print code code = [&amp;#39;\x1f&amp;#39;, &amp;#39;\x12&amp;#39;, &amp;#39;\x1d&amp;#39;, &amp;#39;(&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;\x01&amp;#39;, &amp;#39;\x06&amp;#39;, &amp;#39;\x14&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;,&amp;#39;, &amp;#39;\x1b&amp;#39;, &amp;#39;U&amp;#39;, &amp;#39;?</description>
            <content type="html"><![CDATA[<h1 id="buuctf-reverse-17-24-writeup">BUUCTF-REVERSE-[17-24] writeup</h1>
<p>8道练手的逆向题目，可以尝试做一做</p>
<p><img src="/images/BUUCTF-REVERSE-%5B17-24%5D_writeup/image-20210914212658475.png" alt="image-20210914212658475"></p>
<h2 id="0x0-gwctf-2019-pyre">0x0 [GWCTF 2019] pyre</h2>
<p>应该是python逆向的题目</p>
<p>果然是一个pyc文件，使用pyc的逆向工具进行处理得到python的代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># uncompyle6 version 3.7.4</span>
<span style="color:#75715e"># Python bytecode 2.7 (62211)</span>
<span style="color:#75715e"># Decompiled from: Python 3.8.8 (default, Apr 13 2021, 15:08:03) [MSC v.1916 64 bit (AMD64)]</span>
<span style="color:#75715e"># Embedded file name: encode.py</span>
<span style="color:#75715e"># Compiled at: 2019-08-19 21:01:57</span>
print <span style="color:#e6db74">&#39;Welcome to Re World!&#39;</span>
print <span style="color:#e6db74">&#39;Your input1 is your flag~&#39;</span>
l <span style="color:#f92672">=</span> len(input1)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(l):
    num <span style="color:#f92672">=</span> ((input1[i] <span style="color:#f92672">+</span> i) <span style="color:#f92672">%</span> <span style="color:#ae81ff">128</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">128</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">128</span>
    code <span style="color:#f92672">+=</span> num

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(l <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>):
    code[i] <span style="color:#f92672">=</span> code[i] <span style="color:#f92672">^</span> code[(i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)]

print code
code <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x1f</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x12</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x1d</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;(&#39;</span>, <span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x01</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x06</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x14</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#e6db74">&#39;,&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;U&#39;</span>, <span style="color:#e6db74">&#39;?&#39;</span>, <span style="color:#e6db74">&#39;o&#39;</span>, <span style="color:#e6db74">&#39;6&#39;</span>, <span style="color:#e6db74">&#39;*&#39;</span>, <span style="color:#e6db74">&#39;:&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x01</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;D&#39;</span>, <span style="color:#e6db74">&#39;;&#39;</span>, <span style="color:#e6db74">&#39;%&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x13</span><span style="color:#e6db74">&#39;</span>]
<span style="color:#75715e"># okay decompiling .\attachment.pyc</span>
</code></pre></div><p>对代码进行审计，发现<code>input1</code>的数值没有给到，感觉应该是在<code>input1</code>里面。根据代码进行逆推</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">code <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x1f</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x12</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x1d</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;(&#39;</span>, <span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x01</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x06</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x14</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#e6db74">&#39;,&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;U&#39;</span>, <span style="color:#e6db74">&#39;?&#39;</span>, <span style="color:#e6db74">&#39;o&#39;</span>, <span style="color:#e6db74">&#39;6&#39;</span>, <span style="color:#e6db74">&#39;*&#39;</span>, <span style="color:#e6db74">&#39;:&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x01</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;D&#39;</span>, <span style="color:#e6db74">&#39;;&#39;</span>, <span style="color:#e6db74">&#39;%&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x13</span><span style="color:#e6db74">&#39;</span>]
l <span style="color:#f92672">=</span> len(code)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(l<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>,<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
    code[i] <span style="color:#f92672">=</span> chr(ord(code[i])<span style="color:#f92672">^</span>ord(code[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]))

flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(l):
    flag <span style="color:#f92672">+=</span> chr((ord(code[i]) <span style="color:#f92672">-</span> i)<span style="color:#f92672">%</span><span style="color:#ae81ff">128</span>)

print(flag)
</code></pre></div><p>运行脚本，得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">GWHT{Just_Re_1s_Ha66y!}
</code></pre></div><h2 id="0x1-rsa">0x1 rsa</h2>
<p>rsa还能出逆向题目：D！Crypto手狂喜</p>
<p>两个文件，一个enc文件和一个key文件，标准的RSA文件</p>
<p>可以使用python脚本来获取n的数值和e的数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.PublicKey <span style="color:#f92672">import</span> RSA
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;pub.key&#34;</span>,<span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
     public_key <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>import_key(f<span style="color:#f92672">.</span>read())
     e <span style="color:#f92672">=</span> public_key<span style="color:#f92672">.</span>e
     n <span style="color:#f92672">=</span> public_key<span style="color:#f92672">.</span>n

print(n)
</code></pre></div><p>得到n的数值</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">86934482296048119190666062003494800588905656017203025617216654058378322103517
</code></pre></div><p>然后使用yafu工具进行大数分解，得到p和q</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">P = 304008741604601924494328155975272418463
Q = 285960468890451637935629440372639283459
</code></pre></div><p>然后根据后续得到是数据写脚本求解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.PublicKey <span style="color:#f92672">import</span> RSA
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> long_to_bytes,bytes_to_long
<span style="color:#f92672">from</span> libnum <span style="color:#f92672">import</span> invmod
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;pub.key&#34;</span>,<span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
     public_key <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>import_key(f<span style="color:#f92672">.</span>read())
     e <span style="color:#f92672">=</span> public_key<span style="color:#f92672">.</span>e
     n <span style="color:#f92672">=</span> public_key<span style="color:#f92672">.</span>n

<span style="color:#75715e"># print(n)</span>
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;flag.enc&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
     c <span style="color:#f92672">=</span> bytes_to_long(f<span style="color:#f92672">.</span>read())
p <span style="color:#f92672">=</span> <span style="color:#ae81ff">304008741604601924494328155975272418463</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">285960468890451637935629440372639283459</span>

phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> invmod(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> long_to_bytes(m)

print(flag)
</code></pre></div><p>运行脚本得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">b&#39;\x02\x9d {zR\x1e\x08\xe4\xe6\x18\x06\x00flag{decrypt_256}\n&#39;
</code></pre></div><p>flag即为</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{decrypt_256}
</code></pre></div><h2 id="0x2-actf新生赛-easyre">0x2 [ACTF新生赛] easyre</h2>
<p>走下流程，查下壳</p>
<p><img src="/images/BUUCTF-REVERSE-%5B17-24%5D_writeup/image-20210915090016298.png" alt="image-20210915090016298"></p>
<p>发现有壳，需要进行脱壳</p>
<p>使用UPX进行脱壳处理</p>
<p><img src="/images/BUUCTF-REVERSE-%5B17-24%5D_writeup/image-20210915090432391.png" alt="image-20210915090432391"></p>
<p>然后再次查看信息</p>
<p><img src="/images/BUUCTF-REVERSE-%5B17-24%5D_writeup/image-20210915090516027.png" alt="image-20210915090516027"></p>
<p>32位程序，已经成功脱壳，可以丢进ida pro里面玩耍了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  _BYTE v4[<span style="color:#ae81ff">12</span>]; <span style="color:#75715e">// [esp+12h] [ebp-2Eh] BYREF
</span><span style="color:#75715e"></span>  _DWORD v5[<span style="color:#ae81ff">3</span>]; <span style="color:#75715e">// [esp+1Eh] [ebp-22h]
</span><span style="color:#75715e"></span>  _BYTE v6[<span style="color:#ae81ff">5</span>]; <span style="color:#75715e">// [esp+2Ah] [ebp-16h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// [esp+2Fh] [ebp-11h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// [esp+33h] [ebp-Dh]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// [esp+37h] [ebp-9h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v10; <span style="color:#75715e">// [esp+3Bh] [ebp-5h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+3Ch] [ebp-4h]
</span><span style="color:#75715e"></span>
  __main();
  qmemcpy(v4, <span style="color:#e6db74">&#34;*F&#39;</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">N,</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">(I?+@&#34;</span>, <span style="color:#66d9ef">sizeof</span>(v4));
  printf(<span style="color:#e6db74">&#34;Please input:&#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%s&#34;</span>, v6);
  <span style="color:#66d9ef">if</span> ( v6[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">65</span> <span style="color:#f92672">||</span> v6[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">67</span> <span style="color:#f92672">||</span> v6[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">84</span> <span style="color:#f92672">||</span> v6[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">70</span> <span style="color:#f92672">||</span> v6[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">123</span> <span style="color:#f92672">||</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">125</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  v5[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> v7;
  v5[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> v8;
  v5[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> v9;
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">11</span>; <span style="color:#f92672">++</span>i )
  {
    <span style="color:#66d9ef">if</span> ( v4[i] <span style="color:#f92672">!=</span> _data_start__[<span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v5 <span style="color:#f92672">+</span> i) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] )
      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  }
  printf(<span style="color:#e6db74">&#34;You are correct!&#34;</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>就是非常简单的算法了，进行简单的逆向算法就可以求解，写一个python脚本进行求解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">data_list <span style="color:#f92672">=</span> [<span style="color:#ae81ff">42</span>,<span style="color:#ae81ff">70</span>,<span style="color:#ae81ff">39</span>,<span style="color:#ae81ff">34</span>,<span style="color:#ae81ff">78</span>,<span style="color:#ae81ff">44</span>,<span style="color:#ae81ff">34</span>,<span style="color:#ae81ff">40</span>,<span style="color:#ae81ff">73</span>,<span style="color:#ae81ff">63</span>,<span style="color:#ae81ff">43</span>,<span style="color:#ae81ff">64</span>]

data <span style="color:#f92672">=</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;}|{zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(&#34;</span> <span style="color:#f92672">+</span> chr(<span style="color:#ae81ff">0x27</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;&amp;%$# !&#34;&#39;</span>

flag_list <span style="color:#f92672">=</span> []

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> data_list:
    flag_list<span style="color:#f92672">.</span>append(data<span style="color:#f92672">.</span>find(chr(i))<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
s <span style="color:#f92672">=</span> [chr(x <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> pos]
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(s)
print (<span style="color:#e6db74">&#39;flag{&#39;</span><span style="color:#f92672">+</span>flag<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;}&#39;</span>)
</code></pre></div><p>运行脚本就可以得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{U9X_1S_W6@T?}
</code></pre></div><h2 id="0x3-crackrtf">0x3 CrackRTF</h2>
<p>先查一下壳</p>
<p><img src="/images/BUUCTF-REVERSE-%5B17-24%5D_writeup/image-20210915115948303.png" alt="image-20210915115948303"></p>
<p>32位无壳的pe文件，使用ida pro打开文件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main_0</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  DWORD v3; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  DWORD v4; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Str[<span style="color:#ae81ff">260</span>]; <span style="color:#75715e">// [esp+4Ch] [ebp-310h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// [esp+150h] [ebp-20Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> String1[<span style="color:#ae81ff">260</span>]; <span style="color:#75715e">// [esp+154h] [ebp-208h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Destination[<span style="color:#ae81ff">260</span>]; <span style="color:#75715e">// [esp+258h] [ebp-104h] BYREF
</span><span style="color:#75715e"></span>
  memset(Destination, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(Destination));
  memset(String1, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(String1));
  v7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  printf(<span style="color:#e6db74">&#34;pls input the first passwd(1): &#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%s&#34;</span>, Destination);
  <span style="color:#66d9ef">if</span> ( strlen(Destination) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">6</span> )
  {
    printf(<span style="color:#e6db74">&#34;Must be 6 characters!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    ExitProcess(<span style="color:#ae81ff">0</span>);
  }
  v7 <span style="color:#f92672">=</span> atoi(Destination);
  <span style="color:#66d9ef">if</span> ( v7 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">100000</span> )
    ExitProcess(<span style="color:#ae81ff">0</span>);
  strcat(Destination, <span style="color:#e6db74">&#34;@DBApp&#34;</span>);
  v3 <span style="color:#f92672">=</span> strlen(Destination);
  sub_40100A((BYTE <span style="color:#f92672">*</span>)Destination, v3, String1);
  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>_strcmpi(String1, <span style="color:#e6db74">&#34;6E32D0943418C2C33385BC35A1470250DD8923A9&#34;</span>) )
  {
    printf(<span style="color:#e6db74">&#34;continue...</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>);
    printf(<span style="color:#e6db74">&#34;pls input the first passwd(2): &#34;</span>);
    memset(Str, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(Str));
    scanf(<span style="color:#e6db74">&#34;%s&#34;</span>, Str);
    <span style="color:#66d9ef">if</span> ( strlen(Str) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">6</span> )
    {
      printf(<span style="color:#e6db74">&#34;Must be 6 characters!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
      ExitProcess(<span style="color:#ae81ff">0</span>);
    }
    strcat(Str, Destination);
    memset(String1, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(String1));
    v4 <span style="color:#f92672">=</span> strlen(Str);
    sub_401019((BYTE <span style="color:#f92672">*</span>)Str, v4, String1);
    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>_strcmpi(<span style="color:#e6db74">&#34;27019e688a4e62a649fd99cadaafdb4e&#34;</span>, String1) )
    {
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)sub_40100F(Str) )
      {
        printf(<span style="color:#e6db74">&#34;Error!!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
        ExitProcess(<span style="color:#ae81ff">0</span>);
      }
      printf(<span style="color:#e6db74">&#34;bye ~~</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    }
  }
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>对代码进行审计分析，发现我们需要输入两次密码</p>
<p>首先看下第一次密码输入需要满足什么样的要求：</p>
<p>第一次输入需要进行链接然后使用md5加密然后获取的数值与某些数值相等，也就是:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">MD5(xxxxxx@DBAPP) == 6E32D0943418C2C33385BC35A1470250DD8923A9
</code></pre></div><p>sub_40100A函数代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_401230</span>(BYTE <span style="color:#f92672">*</span>pbData, DWORD dwDataLen, LPSTR lpString1)
{
  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  DWORD i; <span style="color:#75715e">// [esp+4Ch] [ebp-28h]
</span><span style="color:#75715e"></span>  CHAR String2[<span style="color:#ae81ff">4</span>]; <span style="color:#75715e">// [esp+50h] [ebp-24h] BYREF
</span><span style="color:#75715e"></span>  BYTE v6[<span style="color:#ae81ff">20</span>]; <span style="color:#75715e">// [esp+54h] [ebp-20h] BYREF
</span><span style="color:#75715e"></span>  DWORD pdwDataLen; <span style="color:#75715e">// [esp+68h] [ebp-Ch] BYREF
</span><span style="color:#75715e"></span>  HCRYPTHASH phHash; <span style="color:#75715e">// [esp+6Ch] [ebp-8h] BYREF
</span><span style="color:#75715e"></span>  HCRYPTPROV phProv; <span style="color:#75715e">// [esp+70h] [ebp-4h] BYREF
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>CryptAcquireContextA(<span style="color:#f92672">&amp;</span>phProv, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1u</span>, <span style="color:#ae81ff">0xF0000000</span>) )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">if</span> ( CryptCreateHash(phProv, <span style="color:#ae81ff">0x8004u</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&amp;</span>phHash) )
  {
    <span style="color:#66d9ef">if</span> ( CryptHashData(phHash, pbData, dwDataLen, <span style="color:#ae81ff">0</span>) )
    {
      CryptGetHashParam(phHash, <span style="color:#ae81ff">2u</span>, v6, <span style="color:#f92672">&amp;</span>pdwDataLen, <span style="color:#ae81ff">0</span>);
      <span style="color:#f92672">*</span>lpString1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> pdwDataLen; <span style="color:#f92672">++</span>i )
      {
        wsprintfA(String2, <span style="color:#e6db74">&#34;%02X&#34;</span>, v6[i]);
        lstrcatA(lpString1, String2);
      }
      CryptDestroyHash(phHash);
      CryptReleaseContext(phProv, <span style="color:#ae81ff">0</span>);
      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
    }
    <span style="color:#66d9ef">else</span>
    {
      CryptDestroyHash(phHash);
      CryptReleaseContext(phProv, <span style="color:#ae81ff">0</span>);
      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    }
  }
  <span style="color:#66d9ef">else</span>
  {
    CryptReleaseContext(phProv, <span style="color:#ae81ff">0</span>);
    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  }
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>程序直接调用WIN32的API函数进行调用来进行MD5的加密</p>
<p>使用在线的<a href="https://www.somd5.com/">MD5工具</a>进行解密获得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">123321@DBApp
</code></pre></div><p>下面解决一下第二次加密的问题，第二次加密显然也是一个MD5的比较问题，即：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">MD5(xxxxxx123321@DBApp@DBAPP) == 27019e688a4e62a649fd99cadaafdb4e
</code></pre></div><p>同样使用上面那个MD5的工具进行求解就可以得到数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">~!3a@0123321@DBApp
</code></pre></div><p>现在得到了所有的密码，是不是可以运行一下程序来得到结果：</p>
<p>运行程序得到了一个rtf文件，打开rtf文件就能得到flag啦：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Flag{N0_M0re_Free_Bugs}
</code></pre></div><h2 id="0x4-2019红帽杯-easyre">0x4 [2019红帽杯] easyRE</h2>
<p>得到一个ELF文件，可以确定是Linux系统的文件，虽然Linux系统的大多数文件是不带壳的，但是为了以防万一还是查下程序信息：</p>
<p><img src="/images/BUUCTF-REVERSE-%5B17-24%5D_writeup/image-20210918150158372.png" alt="image-20210918150158372"></p>
<p>64位程序，果然是没有壳的程序。使用x64 IDA pro打开一下程序，看看程序内部</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// positive sp value has been detected, the output may be wrong!
</span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#66d9ef">__fastcall</span> __noreturn <span style="color:#a6e22e">start</span>(<span style="color:#66d9ef">__int64</span> a1, <span style="color:#66d9ef">__int64</span> a2, <span style="color:#66d9ef">int</span> a3)
{
  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// esi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp-8h] [rbp-8h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>retaddr; <span style="color:#75715e">// [rsp+0h] [rbp+0h] BYREF
</span><span style="color:#75715e"></span>
  v4 <span style="color:#f92672">=</span> v5;
  v5 <span style="color:#f92672">=</span> v3;
  sub_401BC0(
    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_4009C6,
    v4,
    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#f92672">&amp;</span>retaddr,
    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_402080,
    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_402110,
    a3,
    (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v5);
}
</code></pre></div><p>好像是找不到什么具体的内容，使用字符串检索定位到关键函数的位置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">__int64</span> <span style="color:#a6e22e">sub_4009C6</span>()
{
  <span style="color:#66d9ef">__int64</span> result; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+Ch] [rbp-114h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v2; <span style="color:#75715e">// [rsp+10h] [rbp-110h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// [rsp+18h] [rbp-108h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v4; <span style="color:#75715e">// [rsp+20h] [rbp-100h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp+28h] [rbp-F8h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v6; <span style="color:#75715e">// [rsp+30h] [rbp-F0h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v7; <span style="color:#75715e">// [rsp+38h] [rbp-E8h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v8; <span style="color:#75715e">// [rsp+40h] [rbp-E0h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v9; <span style="color:#75715e">// [rsp+48h] [rbp-D8h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v10; <span style="color:#75715e">// [rsp+50h] [rbp-D0h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v11; <span style="color:#75715e">// [rsp+58h] [rbp-C8h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v12[<span style="color:#ae81ff">13</span>]; <span style="color:#75715e">// [rsp+60h] [rbp-C0h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v13[<span style="color:#ae81ff">4</span>]; <span style="color:#75715e">// [rsp+6Dh] [rbp-B3h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v14[<span style="color:#ae81ff">19</span>]; <span style="color:#75715e">// [rsp+71h] [rbp-AFh] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v15[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+90h] [rbp-90h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v16; <span style="color:#75715e">// [rsp+B0h] [rbp-70h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v17; <span style="color:#75715e">// [rsp+B4h] [rbp-6Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v18[<span style="color:#ae81ff">72</span>]; <span style="color:#75715e">// [rsp+C0h] [rbp-60h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v19; <span style="color:#75715e">// [rsp+108h] [rbp-18h]
</span><span style="color:#75715e"></span>
  v19 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
  qmemcpy(v12, <span style="color:#e6db74">&#34;Iodl&gt;Qnb(ocy&#34;</span>, <span style="color:#ae81ff">12</span>);
  v12[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">127</span>;
  qmemcpy(v13, <span style="color:#e6db74">&#34;y.i&#34;</span>, <span style="color:#ae81ff">3</span>);
  v13[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">127</span>;
  qmemcpy(v14, <span style="color:#e6db74">&#34;d`3w}wek9{iy=~yL@EC&#34;</span>, <span style="color:#66d9ef">sizeof</span>(v14));
  memset(v15, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(v15));
  v16 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  v17 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  sub_4406E0(<span style="color:#ae81ff">0LL</span>, v15, <span style="color:#ae81ff">37LL</span>);
  v17 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">if</span> ( sub_424BA0(v15) <span style="color:#f92672">==</span> <span style="color:#ae81ff">36</span> )
  {
    <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span>)sub_424BA0(v15); <span style="color:#f92672">++</span>i )
    {
      <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)(v15[i] <span style="color:#f92672">^</span> i) <span style="color:#f92672">!=</span> v12[i] )
      {
        result <span style="color:#f92672">=</span> <span style="color:#ae81ff">4294967294LL</span>;
        <span style="color:#66d9ef">goto</span> LABEL_13;
      }
    }
    sub_410CC0(<span style="color:#e6db74">&#34;continue!&#34;</span>);
    memset(v18, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x40uLL</span>);
    v18[<span style="color:#ae81ff">64</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    sub_4406E0(<span style="color:#ae81ff">0LL</span>, v18, <span style="color:#ae81ff">64LL</span>);
    v18[<span style="color:#ae81ff">39</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">if</span> ( sub_424BA0(v18) <span style="color:#f92672">==</span> <span style="color:#ae81ff">39</span> )
    {
      v2 <span style="color:#f92672">=</span> sub_400E44(v18);
      v3 <span style="color:#f92672">=</span> sub_400E44(v2);
      v4 <span style="color:#f92672">=</span> sub_400E44(v3);
      v5 <span style="color:#f92672">=</span> sub_400E44(v4);
      v6 <span style="color:#f92672">=</span> sub_400E44(v5);
      v7 <span style="color:#f92672">=</span> sub_400E44(v6);
      v8 <span style="color:#f92672">=</span> sub_400E44(v7);
      v9 <span style="color:#f92672">=</span> sub_400E44(v8);
      v10 <span style="color:#f92672">=</span> sub_400E44(v9);
      v11 <span style="color:#f92672">=</span> sub_400E44(v10);
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_400360(v11, off_6CC090) )
      {
        sub_410CC0(<span style="color:#e6db74">&#34;You found me!!!&#34;</span>);
        sub_410CC0(<span style="color:#e6db74">&#34;bye bye~&#34;</span>);
      }
      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
    }
    <span style="color:#66d9ef">else</span>
    {
      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">4294967293LL</span>;
    }
  }
  <span style="color:#66d9ef">else</span>
  {
    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xFFFFFFFFLL</span>;
  }
LABEL_13:
  <span style="color:#66d9ef">if</span> ( __readfsqword(<span style="color:#ae81ff">0x28u</span>) <span style="color:#f92672">!=</span> v19 )
    sub_444020();
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>找到关键函数，下面就是对关键函数进行分析来寻找线索</p>
<p>简单对代码进行审计，可以发现有很多混淆来防止我们进行正确的逆向分析操作</p>
<p>来，让我们跳进第一个坑：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"> v19 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
  qmemcpy(v12, <span style="color:#e6db74">&#34;Iodl&gt;Qnb(ocy&#34;</span>, <span style="color:#ae81ff">12</span>);
  v12[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">127</span>;
  qmemcpy(v13, <span style="color:#e6db74">&#34;y.i&#34;</span>, <span style="color:#ae81ff">3</span>);
  v13[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">127</span>;
  qmemcpy(v14, <span style="color:#e6db74">&#34;d`3w}wek9{iy=~yL@EC&#34;</span>, <span style="color:#66d9ef">sizeof</span>(v14));
  memset(v15, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(v15));
  v16 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  v17 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  sub_4406E0(<span style="color:#ae81ff">0LL</span>, v15, <span style="color:#ae81ff">37LL</span>);
  v17 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">if</span> ( sub_424BA0(v15) <span style="color:#f92672">==</span> <span style="color:#ae81ff">36</span> )
  {
    <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span>)sub_424BA0(v15); <span style="color:#f92672">++</span>i )
    {
      <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)(v15[i] <span style="color:#f92672">^</span> i) <span style="color:#f92672">!=</span> v12[i] )
      {
        result <span style="color:#f92672">=</span> <span style="color:#ae81ff">4294967294LL</span>;
        <span style="color:#66d9ef">goto</span> LABEL_13;
      }
    }
    sub_410CC0(<span style="color:#e6db74">&#34;continue!&#34;</span>);
</code></pre></div><p>写一个python脚本迭代出假flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">data <span style="color:#f92672">=</span> []
v12 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Iodl&gt;Qnb(ocy&#34;</span>
insert_v <span style="color:#f92672">=</span> <span style="color:#ae81ff">127</span>;
v13 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;y.i&#34;</span>
v14 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;d`3w}wek9{iy=~yL@EC&#34;</span>
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> v12:
    data<span style="color:#f92672">.</span>append(ord(i))
data<span style="color:#f92672">.</span>append(insert_v)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> v13:
    data<span style="color:#f92672">.</span>append(ord(i))
data<span style="color:#f92672">.</span>append(insert_v)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> v14:
    data<span style="color:#f92672">.</span>append(ord(i))

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">36</span>):
    flag <span style="color:#f92672">+=</span>chr(data[i]<span style="color:#f92672">^</span>i)

print(flag)
</code></pre></div><p>运行脚本得到fake flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Info:The first four chars are `flag`
</code></pre></div><p>然后走进下面一个坑：</p>
<p>（”吾愿称之为base64之坑“ XD ）</p>
<p><img src="/images/BUUCTF-REVERSE-%5B17-24%5D_writeup/image-20210918163713879.png" alt="image-20210918163713879"></p>
<p>提取数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Vm0wd2VHUXhTWGhpUm1SWVYwZDRWVll3Wkc5WFJsbDNXa1pPVlUxV2NIcFhhMk0xVmpKS1NHVkdXbFpOYmtKVVZtcEtTMUl5VGtsaVJtUk9ZV3hhZVZadGVHdFRNVTVYVW01T2FGSnRVbGhhVjNoaFZWWmtWMXBFVWxSTmJFcElWbTAxVDJGV1NuTlhia0pXWWxob1dGUnJXbXRXTVZaeVdrWm9hVlpyV1hwV1IzaGhXVmRHVjFOdVVsWmlhMHBZV1ZSR1lWZEdVbFZTYlhSWFRWWndNRlZ0TVc5VWJGcFZWbXR3VjJKSFVYZFdha1pXWlZaT2NtRkhhRk5pVjJoWVYxZDBhMVV3TlhOalJscFlZbGhTY1ZsclduZGxiR1J5VmxSR1ZXSlZjRWhaTUZKaFZqSktWVkZZYUZkV1JWcFlWV3BHYTFkWFRrZFRiV3hvVFVoQ1dsWXhaRFJpTWtsM1RVaG9hbEpYYUhOVmJUVkRZekZhY1ZKcmRGTk5Wa3A2VjJ0U1ExWlhTbFpqUldoYVRVWndkbFpxUmtwbGJVWklZVVprYUdFeGNHOVhXSEJIWkRGS2RGSnJhR2hTYXpWdlZGVm9RMlJzV25STldHUlZUVlpXTlZadE5VOVdiVXBJVld4c1dtSllUWGhXTUZwell6RmFkRkpzVWxOaVNFSktWa1phVTFFeFduUlRhMlJxVWxad1YxWnRlRXRXTVZaSFVsUnNVVlZVTURrPQ==
</code></pre></div><p>进行十次base64解密得到一个博客地址：https://bbs.pediy.com/thread-254172.htm</p>
<p>点开博客看一下，可以看到这段话：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">
所谓“让对手不要走正确的破解之路” 

讲人话 就是“把对手往沟里带” 

但对手并不傻 很多时候攻击方比防守方更聪明 

要想带对手进沟 防守方必须首先透彻了解攻击方 特别是其人性弱点（知道为什么是马克思主义学院了吧） 
</code></pre></div><p>Good, 现在知道自己掉坑里面了， 两个坑都掉了一遍所以flag在哪呢？</p>
<p>我们去找下主函数</p>
<p><img src="/images/BUUCTF-REVERSE-%5B17-24%5D_writeup/image-20210918173639284.png" alt="image-20210918173639284"></p>
<p>发现周围存在一个奇奇怪怪的函数，会不会就是这个函数呢</p>
<p>点开看看：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> <span style="color:#a6e22e">sub_400D35</span>()
{
  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> result; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v1; <span style="color:#75715e">// [rsp+Ch] [rbp-24h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+10h] [rbp-20h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> j; <span style="color:#75715e">// [rsp+14h] [rbp-1Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// [rsp+24h] [rbp-Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp+28h] [rbp-8h]
</span><span style="color:#75715e"></span>
  v5 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
  v1 <span style="color:#f92672">=</span> sub_43FD20(<span style="color:#ae81ff">0LL</span>) <span style="color:#f92672">-</span> qword_6CEE38;
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1233</span>; <span style="color:#f92672">++</span>i )
  {
    sub_40F790(v1);
    sub_40FE60();
    sub_40FE60();
    v1 <span style="color:#f92672">=</span> sub_40FE60() <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x98765432</span>;
  }
  v4 <span style="color:#f92672">=</span> v1;
  <span style="color:#66d9ef">if</span> ( ((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v1 <span style="color:#f92672">^</span> byte_6CC0A0[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">102</span> <span style="color:#f92672">&amp;&amp;</span> (HIBYTE(v4) <span style="color:#f92672">^</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)byte_6CC0A3) <span style="color:#f92672">==</span> <span style="color:#ae81ff">103</span> )
  {
    <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">24</span>; <span style="color:#f92672">++</span>j )
      sub_410E90((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)(byte_6CC0A0[j] <span style="color:#f92672">^</span> <span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v4 <span style="color:#f92672">+</span> j <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>)));
  }
  result <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>) <span style="color:#f92672">^</span> v5;
  <span style="color:#66d9ef">if</span> ( result )
    sub_444020();
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>应该就是简单的异或操作了，需要提取数据来进行异或来得到flag</p>
<p>提取数据并写一个异或脚本就就可以得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">data <span style="color:#f92672">=</span> [
  <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x35</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x5D</span>, <span style="color:#ae81ff">0x18</span>, <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x45</span>, <span style="color:#ae81ff">0x17</span>, <span style="color:#ae81ff">0x2F</span>, 
  <span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x6E</span>, <span style="color:#ae81ff">0x62</span>, <span style="color:#ae81ff">0x3C</span>, <span style="color:#ae81ff">0x27</span>, <span style="color:#ae81ff">0x54</span>, <span style="color:#ae81ff">0x48</span>, <span style="color:#ae81ff">0x6C</span>, <span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x6E</span>, 
  <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x3C</span>, <span style="color:#ae81ff">0x32</span>, <span style="color:#ae81ff">0x45</span>, <span style="color:#ae81ff">0x5B</span>
  ]
s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag&#34;</span>
key <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
    key <span style="color:#f92672">+=</span> chr(ord(s[i])<span style="color:#f92672">^</span>data[i])

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(data)):
    flag <span style="color:#f92672">+=</span> chr(data[i]<span style="color:#f92672">^</span>ord(key[i<span style="color:#f92672">%</span><span style="color:#ae81ff">4</span>]))

print(flag)
</code></pre></div><p>运行脚本就能得到flag，终于是over了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{Act1ve_Defen5e_Test}
</code></pre></div><h2 id="0x5-actf新生赛2020-rome">0x5 [ACTF新生赛2020] rome</h2>
<p>首先，查一下文件的信息</p>
<p><img src="/images/BUUCTF-REVERSE-%5B17-24%5D_writeup/image-20210919081555684.png" alt="image-20210919081555684"></p>
<p>32位程序，没有壳，丢进IDA prio里面看看：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">func</span>()
{
  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v1[<span style="color:#ae81ff">4</span>]; <span style="color:#75715e">// [esp+14h] [ebp-44h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v2; <span style="color:#75715e">// [esp+24h] [ebp-34h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v3; <span style="color:#75715e">// [esp+25h] [ebp-33h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v4; <span style="color:#75715e">// [esp+26h] [ebp-32h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v5; <span style="color:#75715e">// [esp+27h] [ebp-31h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v6; <span style="color:#75715e">// [esp+28h] [ebp-30h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// [esp+29h] [ebp-2Fh]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// [esp+2Dh] [ebp-2Bh]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// [esp+31h] [ebp-27h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v10; <span style="color:#75715e">// [esp+35h] [ebp-23h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v11; <span style="color:#75715e">// [esp+39h] [ebp-1Fh]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v12[<span style="color:#ae81ff">29</span>]; <span style="color:#75715e">// [esp+3Bh] [ebp-1Dh] BYREF
</span><span style="color:#75715e"></span>
  strcpy(v12, <span style="color:#e6db74">&#34;Qsw3sj_lz4_Ujw@l&#34;</span>);
  printf(<span style="color:#e6db74">&#34;Please input:&#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#f92672">&amp;</span>v2);
  result <span style="color:#f92672">=</span> v2;
  <span style="color:#66d9ef">if</span> ( v2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">65</span> )
  {
    result <span style="color:#f92672">=</span> v3;
    <span style="color:#66d9ef">if</span> ( v3 <span style="color:#f92672">==</span> <span style="color:#ae81ff">67</span> )
    {
      result <span style="color:#f92672">=</span> v4;
      <span style="color:#66d9ef">if</span> ( v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">84</span> )
      {
        result <span style="color:#f92672">=</span> v5;
        <span style="color:#66d9ef">if</span> ( v5 <span style="color:#f92672">==</span> <span style="color:#ae81ff">70</span> )
        {
          result <span style="color:#f92672">=</span> v6;
          <span style="color:#66d9ef">if</span> ( v6 <span style="color:#f92672">==</span> <span style="color:#ae81ff">123</span> )
          {
            result <span style="color:#f92672">=</span> v11;
            <span style="color:#66d9ef">if</span> ( v11 <span style="color:#f92672">==</span> <span style="color:#ae81ff">125</span> )
            {
              v1[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> v7;
              v1[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> v8;
              v1[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> v9;
              v1[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> v10;
              <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
              <span style="color:#66d9ef">while</span> ( <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">15</span> )
              {
                <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">64</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> )
                  <span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">51</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">65</span>;
                <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">96</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">122</span> )
                  <span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">79</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;
                <span style="color:#f92672">++*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>];
              }
              <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
              <span style="color:#66d9ef">while</span> ( <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">15</span> )
              {
                result <span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v12[<span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]];
                <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">!=</span> (_BYTE)result )
                  <span style="color:#66d9ef">return</span> result;
                <span style="color:#f92672">++*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>];
              }
              result <span style="color:#f92672">=</span> printf(<span style="color:#e6db74">&#34;You are correct!&#34;</span>);
            }
          }
        }
      }
    }
  }
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>对代码进行简单的审计，可以发现，程序的加密算法是类似与凯撒加密的位移方式，可以根据程序的这一特点写个Python脚本进行求解来得到flag的数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> string

data <span style="color:#f92672">=</span> [<span style="color:#ae81ff">81</span>,<span style="color:#ae81ff">115</span>,<span style="color:#ae81ff">119</span>,<span style="color:#ae81ff">51</span>,<span style="color:#ae81ff">115</span>,<span style="color:#ae81ff">106</span>,<span style="color:#ae81ff">95</span>,<span style="color:#ae81ff">108</span>,<span style="color:#ae81ff">122</span>,<span style="color:#ae81ff">52</span>,<span style="color:#ae81ff">95</span>,<span style="color:#ae81ff">85</span>,<span style="color:#ae81ff">106</span>,<span style="color:#ae81ff">119</span>,<span style="color:#ae81ff">64</span>,<span style="color:#ae81ff">108</span>]

Lower <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>ascii_lowercase
Upper <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>ascii_uppercase

flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> data:
    <span style="color:#66d9ef">if</span> i <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">64</span> <span style="color:#f92672">and</span> i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span>:
        flag <span style="color:#f92672">+=</span> Upper[i<span style="color:#f92672">-</span><span style="color:#ae81ff">14</span><span style="color:#f92672">-</span><span style="color:#ae81ff">65</span>]
    <span style="color:#66d9ef">elif</span> i <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">96</span> <span style="color:#f92672">and</span> i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">122</span>:
        flag <span style="color:#f92672">+=</span> Lower[i<span style="color:#f92672">-</span><span style="color:#ae81ff">18</span><span style="color:#f92672">-</span><span style="color:#ae81ff">97</span>]
    <span style="color:#66d9ef">else</span>:
        flag <span style="color:#f92672">+=</span> chr(i)
print (<span style="color:#e6db74">&#39;flag{&#39;</span><span style="color:#f92672">+</span>flag<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;}&#39;</span>)
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{Cae3ar_th4_Gre@t}
</code></pre></div><h2 id="0x6-flareon4-login">0x6 [FlareOn4] login</h2>
<p>发现文件是一个html文件，应该是需要进行源码阅读的题目，然后逆向算法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!DOCTYPE Html /&gt;</span>
&lt;<span style="color:#f92672">html</span>&gt;

&lt;<span style="color:#f92672">head</span>&gt;
    &lt;<span style="color:#f92672">title</span>&gt;FLARE On 2017&lt;/<span style="color:#f92672">title</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;

&lt;<span style="color:#f92672">body</span>&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;flag&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;flag&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Enter the flag&#34;</span> /&gt;
    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;button&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;prompt&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Click to check the flag&#34;</span> /&gt;
    &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span>&gt;
        document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;prompt&#34;</span>).<span style="color:#a6e22e">onclick</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> () {
            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">flag</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;flag&#34;</span>).<span style="color:#a6e22e">value</span>;
            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">rotFlag</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">flag</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/[a-zA-Z]/g</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">c</span>) { 
                <span style="color:#66d9ef">return</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">c</span> <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#34;Z&#34;</span> <span style="color:#f92672">?</span> <span style="color:#ae81ff">90</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">122</span>) <span style="color:#f92672">&gt;=</span> (<span style="color:#a6e22e">c</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">charCodeAt</span>(<span style="color:#ae81ff">0</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">13</span>) <span style="color:#f92672">?</span> <span style="color:#a6e22e">c</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">c</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">26</span>); 
            });
            <span style="color:#66d9ef">if</span> (<span style="color:#e6db74">&#34;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&#34;</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">rotFlag</span>) {
                <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;Correct flag!&#34;</span>);
            } <span style="color:#66d9ef">else</span> {
                <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;Incorrect flag, rot again&#34;</span>);
            }
        }
    &lt;/<span style="color:#f92672">script</span>&gt;
&lt;/<span style="color:#f92672">body</span>&gt;

&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>源码的核心逻辑是在JavaScript的代码中，看来题目要求我们可以能够对算法进行逆向分析，来得到flag数据</p>
<p>代码进行的操作无非就是±13的操作。</p>
<p>代码会区分大小写分别进行相应的操作来得到flag，如果字母+13小于字母表最后一位字母，字母最终就+13，否则字母最终就-13。逻辑非常简单，写个简单的逆向算法就能进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&#34;</span>
m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
    <span style="color:#66d9ef">if</span> ord(i) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">65</span> <span style="color:#f92672">and</span> ord(i) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span>:
        <span style="color:#66d9ef">if</span> ord(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">65</span>:
            m <span style="color:#f92672">+=</span> chr(ord(i)<span style="color:#f92672">+</span><span style="color:#ae81ff">13</span>)
        <span style="color:#66d9ef">else</span>:
            m <span style="color:#f92672">+=</span> chr(ord(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>)
    <span style="color:#66d9ef">elif</span> ord(i) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">97</span> <span style="color:#f92672">and</span> ord(i) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">122</span>:
        <span style="color:#66d9ef">if</span> ord(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">97</span>:
            m <span style="color:#f92672">+=</span> chr(ord(i)<span style="color:#f92672">+</span><span style="color:#ae81ff">13</span>)
        <span style="color:#66d9ef">else</span>:
            m <span style="color:#f92672">+=</span> chr(ord(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>)
    <span style="color:#66d9ef">else</span>:
        m <span style="color:#f92672">+=</span> i

print(m)
</code></pre></div><p>运行脚本，就能得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">ClientSideLoginsAreEasy@flare-on.com
</code></pre></div><p>唔~题目好像还有个hint可以看一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Hint:本题解出相应字符串后请用flag{}包裹，形如：flag{123456@flare-on.com}
</code></pre></div><p>所以，这道题目的flag应该就是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{ClientSideLoginsAreEasy@flare-on.com}
</code></pre></div><h2 id="0x7-guet-ctf2019-re">0x7 [GUET-CTF2019] re</h2>
<p>拿到程序，先看看程序的信息：</p>
<p><img src="/images/BUUCTF-REVERSE-%5B17-24%5D_writeup/image-20210919092405673.png" alt="image-20210919092405673"></p>
<p>发现程序有壳，而且是一个64位的ELF程序</p>
<p>需要进行脱壳处理，程序使用的是最基本的UPX的壳，可以使用UPX进行简单脱壳：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">upx -d re
</code></pre></div><p>脱壳后，然后使用Exeinfo再次进行查看</p>
<p><img src="/images/BUUCTF-REVERSE-%5B17-24%5D_writeup/image-20210919092939620.png" alt="image-20210919092939620"></p>
<p>壳已经被脱掉，然后使用x64 IDA pro进行查看程序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">// positive sp value has been detected, the output may be wrong!
</span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#66d9ef">__fastcall</span> __noreturn <span style="color:#a6e22e">start</span>(<span style="color:#66d9ef">__int64</span> a1, <span style="color:#66d9ef">__int64</span> a2, <span style="color:#66d9ef">int</span> a3)
{
  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// esi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp-8h] [rbp-8h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>retaddr; <span style="color:#75715e">// [rsp+0h] [rbp+0h] BYREF
</span><span style="color:#75715e"></span>
  v4 <span style="color:#f92672">=</span> v5;
  v5 <span style="color:#f92672">=</span> v3;
  sub_4016C0(
    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_400E28,
    v4,
    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#f92672">&amp;</span>retaddr,
    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_401B80,
    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_401C10,
    a3,
    (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v5);
}
</code></pre></div><p>发现程序入口并找不到什么东西，应该是将入口函数进行混淆和隐藏了</p>
<p>使用字符串检索来获取相应的信息，来定位到主函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">sub_400E28</span>(<span style="color:#66d9ef">__int64</span> a1, <span style="color:#66d9ef">int</span> a2, <span style="color:#66d9ef">int</span> a3, <span style="color:#66d9ef">int</span> a4, <span style="color:#66d9ef">int</span> a5, <span style="color:#66d9ef">int</span> a6)
{
  <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// edx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// ecx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// er8
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// er9
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> result; <span style="color:#75715e">// rax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v11; <span style="color:#75715e">// [rsp+0h] [rbp-30h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v12; <span style="color:#75715e">// [rsp+28h] [rbp-8h]
</span><span style="color:#75715e"></span>
  v12 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
  sub_40F950((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#e6db74">&#34;input your flag:&#34;</span>, a2, a3, a4, a5, a6, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0LL</span>);
  sub_40FA80((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#e6db74">&#34;%s&#34;</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#f92672">&amp;</span>v11, v6, v7, v8, v9, v11);
  <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_4009AE(<span style="color:#f92672">&amp;</span>v11) )
    sub_410350(<span style="color:#e6db74">&#34;Correct!&#34;</span>);
  <span style="color:#66d9ef">else</span>
    sub_410350(<span style="color:#e6db74">&#34;Wrong!&#34;</span>);
  result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( __readfsqword(<span style="color:#ae81ff">0x28u</span>) <span style="color:#f92672">!=</span> v12 )
    sub_443550();
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>主函数中的一些关键性的函数都被进行了混淆操作，代码进行审计分析</p>
<p>v11是关键输入函数，然后<code>sub_40FA80</code>是关键性的函数，对<code>sub_40FA80</code>分析：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">_BOOL8 <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">sub_4009AE</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>a1)
{
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">1629056</span> <span style="color:#f92672">*</span> <span style="color:#f92672">*</span>a1 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">166163712</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">6771600</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">731332800</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">3682944</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">357245568</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">10431000</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1074393000</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">3977328</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">489211344</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">5138336</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">518971936</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">7532250</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">406741500</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">5551632</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">294236496</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">3409728</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">177305856</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">13013670</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">650683500</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">6088797</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">298351053</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">7884663</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">386348487</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">8944053</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">438258597</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">5198490</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">249527520</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">4544518</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">445362764</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">3645600</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">174988800</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">10115280</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">981182160</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">9667504</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">493042704</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">5364450</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">257493600</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">13464540</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">767478780</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">5488432</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">312840624</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">14479500</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">22</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1404511500</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">6451830</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">23</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">316139670</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">6252576</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">24</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">619005024</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">7763364</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">25</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">372641472</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">7327320</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">26</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">373693320</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">8741520</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">27</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">498266640</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">8871876</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">28</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">452465676</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">4086720</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">29</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">208422720</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">9374400</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">30</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">515592000</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">5759124</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">31</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">719890500</span>;
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
}
</code></pre></div><p>写个C语言的flag生成器来生成flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
  <span style="color:#66d9ef">char</span> a1[<span style="color:#ae81ff">30</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
  <span style="color:#f92672">*</span>a1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">166163712</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">1629056</span>;
  a1[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">731332800</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">6771600</span>;
  a1[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">357245568</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3682944</span>;
  a1[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1074393000</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">10431000</span>;
  a1[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">489211344</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3977328</span>;
  a1[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">518971936</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5138336</span>;
  a1[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">406741500</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">7532250</span>;
  a1[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">294236496</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5551632</span>;
  a1[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">177305856</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3409728</span>;
  a1[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">650683500</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">13013670</span>;
  a1[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">298351053</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">6088797</span>;
  a1[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">386348487</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">7884663</span>;
  a1[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">438258597</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">8944053</span>;
  a1[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">249527520</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5198490</span>;
  a1[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">445362764</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">4544518</span>;
  a1[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">174988800</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3645600</span>;
  a1[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">981182160</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">10115280</span>;
  a1[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">493042704</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">9667504</span>;
  a1[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">257493600</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5364450</span>;
  a1[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">767478780</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">13464540</span>;
  a1[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">312840624</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5488432</span>;
  a1[<span style="color:#ae81ff">22</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1404511500</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">14479500</span>;
  a1[<span style="color:#ae81ff">23</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">316139670</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">6451830</span>;
  a1[<span style="color:#ae81ff">24</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">619005024</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">6252576</span>;
  a1[<span style="color:#ae81ff">25</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">372641472</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">7763364</span>;
  a1[<span style="color:#ae81ff">26</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">373693320</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">7327320</span>;
  a1[<span style="color:#ae81ff">27</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">498266640</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">8741520</span>;
  a1[<span style="color:#ae81ff">28</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">452465676</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">8871876</span>;
  a1[<span style="color:#ae81ff">29</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">208422720</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">4086720</span>;
  a1[<span style="color:#ae81ff">30</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">515592000</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">9374400</span>;
  a1[<span style="color:#ae81ff">31</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">719890500</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5759124</span>;
  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">32</span>;<span style="color:#f92672">++</span>i)
    {
      <span style="color:#66d9ef">if</span>(a1[i] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) printf(<span style="color:#e6db74">&#34;*&#34;</span>);
      <span style="color:#66d9ef">else</span> printf(<span style="color:#e6db74">&#34;%c&#34;</span>,a1[i]);
    }
  printf(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
}
</code></pre></div><p>编译并运行来得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{e*65421110ba03099a1c039337}
</code></pre></div><p>由于有一位的字符未知，需要进行爆破来得到flag:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{e165421110ba03099a1c039337}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>BUUCTF REVERSE [9~16]_Writeup</title>
            <link>https://zcodetea.github.io/posts/buuctf-reverse-9-16_writeup/</link>
            <pubDate>Fri, 28 Jan 2022 19:18:38 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/buuctf-reverse-9-16_writeup/</guid>
            <description>BUUCTF-REVERSE-[9-16] writeup 8道逆向工程的小题目，re真是越来越有意思了
0x0 不一样的flag 简单看看题目描述
是不是做习惯了常规的逆向题目？试试这道题，看你在能不能在程序中找到真正的flag！注意：flag并非是flag{XXX}形式，就是一个’字符串‘，考验眼力的时候到了！ 注意：得到的 flag 请包上 flag{} 提交 应该会是一道非常有趣的题目，非常有意思的题目。
首先还是先查询一下程序信息
没有壳，是一个32位的PE程序，丢进Cutter里面看个究竟吧
#include &amp;lt;stdint.h&amp;gt; int32_t dbg_main (void) { int32_t var_4h; char[5][5] a; int[2] location; int32_t var_34h; int32_t choice; int32_t i; int32_t var_40h; /* int main(); */ _main (ebx, esi, edi); location = 0; var_34h = 0; edx = &amp;amp;a; ebx = &amp;#34;*11110100001010000101111#&amp;#34;; eax = 0x19; edi = edx; esi = ebx; ecx = eax; do { *(es:edi) = *(esi); ecx--; esi++; es:edi++; } while (ecx !</description>
            <content type="html"><![CDATA[<h1 id="buuctf-reverse-9-16-writeup">BUUCTF-REVERSE-[9-16] writeup</h1>
<p>8道逆向工程的小题目，re真是越来越有意思了</p>
<p><img src="/images/BUUCTF-REVERSE-%5B9-16%5D_writeup/image-20210808095050806.png" alt="image-20210808095050806"></p>
<h2 id="0x0-不一样的flag">0x0 不一样的flag</h2>
<p>简单看看题目描述</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">是不是做习惯了常规的逆向题目？试试这道题，看你在能不能在程序中找到真正的flag！注意：flag并非是flag{XXX}形式，就是一个’字符串‘，考验眼力的时候到了！ 注意：得到的 flag 请包上 flag{} 提交
</code></pre></div><p>应该会是一道非常有趣的题目，非常有意思的题目。</p>
<p>首先还是先查询一下程序信息</p>
<p><img src="/images/BUUCTF-REVERSE-%5B9-16%5D_writeup/image-20210808211004969.png" alt="image-20210808211004969"></p>
<p>没有壳，是一个32位的PE程序，丢进Cutter里面看个究竟吧</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdint.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span> 
<span style="color:#66d9ef">int32_t</span> <span style="color:#a6e22e">dbg_main</span> (<span style="color:#66d9ef">void</span>) {
    <span style="color:#66d9ef">int32_t</span> var_4h;
    <span style="color:#66d9ef">char</span>[<span style="color:#ae81ff">5</span>][<span style="color:#ae81ff">5</span>] a;
    <span style="color:#66d9ef">int</span>[<span style="color:#ae81ff">2</span>] location;
    <span style="color:#66d9ef">int32_t</span> var_34h;
    <span style="color:#66d9ef">int32_t</span> choice;
    <span style="color:#66d9ef">int32_t</span> i;
    <span style="color:#66d9ef">int32_t</span> var_40h;
    <span style="color:#75715e">/* int main(); */</span>
    _main (ebx, esi, edi);
    location <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    var_34h <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    edx <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>a;
    ebx <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;*11110100001010000101111#&#34;</span>;
    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x19</span>;
    edi <span style="color:#f92672">=</span> edx;
    esi <span style="color:#f92672">=</span> ebx;
    ecx <span style="color:#f92672">=</span> eax;
    <span style="color:#66d9ef">do</span> {
        <span style="color:#f92672">*</span>(es:edi) <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(esi);
        ecx<span style="color:#f92672">--</span>;
        esi<span style="color:#f92672">++</span>;
        es:edi<span style="color:#f92672">++</span>;
    } <span style="color:#66d9ef">while</span> (ecx <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>);
    <span style="color:#66d9ef">goto</span> label_1;
label_0:
label_1:
    _puts (<span style="color:#e6db74">&#34;you can choose one action to execute&#34;</span>);
    _puts (<span style="color:#e6db74">&#34;1 up&#34;</span>);
    _puts (<span style="color:#e6db74">&#34;2 down&#34;</span>);
    _puts (<span style="color:#e6db74">&#34;3 left&#34;</span>);
    _printf (<span style="color:#e6db74">&#34;4 right</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">:&#34;</span>);
    eax <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>choice;
    _scanf (<span style="color:#ae81ff">0x403066</span>, eax);
    eax <span style="color:#f92672">=</span> choice;
    <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span>) {
        <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">2</span>) {
            <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>) {
            } <span style="color:#66d9ef">else</span> {
                <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">3</span>) {
                    <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">==</span> <span style="color:#ae81ff">4</span>) {
                        <span style="color:#66d9ef">goto</span> label_2;
                    }
                    eax <span style="color:#f92672">=</span> location;
                    eax<span style="color:#f92672">--</span>;
                    location <span style="color:#f92672">=</span> eax;
                } <span style="color:#66d9ef">else</span> {
                } <span style="color:#66d9ef">else</span> {
                    eax <span style="color:#f92672">=</span> location;
                    eax<span style="color:#f92672">++</span>;
                    location <span style="color:#f92672">=</span> eax;
                    <span style="color:#66d9ef">goto</span> label_3;
                }
            }
            eax <span style="color:#f92672">=</span> var_34h;
            eax<span style="color:#f92672">--</span>;
            var_34h <span style="color:#f92672">=</span> eax;
            <span style="color:#66d9ef">goto</span> label_3;
label_2:
            eax <span style="color:#f92672">=</span> var_34h;
            eax<span style="color:#f92672">++</span>;
            var_34h <span style="color:#f92672">=</span> eax;
            <span style="color:#66d9ef">goto</span> label_3;
        }
        _exit (<span style="color:#ae81ff">1</span>);
    }
label_3:
    i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">while</span> (i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span>) {
        eax <span style="color:#f92672">=</span> i;
        eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((esp <span style="color:#f92672">+</span> eax<span style="color:#f92672">*</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x30</span>));
        <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>) {
            eax <span style="color:#f92672">=</span> i;
            eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((esp <span style="color:#f92672">+</span> eax<span style="color:#f92672">*</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x30</span>));
            <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4</span>) {
                <span style="color:#66d9ef">goto</span> label_4;
            }
        }
        _exit (<span style="color:#ae81ff">1</span>);
label_4:
        i<span style="color:#f92672">++</span>;
    }
    edx <span style="color:#f92672">=</span> location;
    ecx <span style="color:#f92672">=</span> var_34h;
    eax <span style="color:#f92672">=</span> edx;
    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">2</span>;
    eax <span style="color:#f92672">+=</span> edx;
    edx <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>var_40h;
    eax <span style="color:#f92672">+=</span> edx;
    eax <span style="color:#f92672">+=</span> ecx;
    eax <span style="color:#f92672">-=</span> <span style="color:#ae81ff">0x29</span>;
    al <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(eax);
    <span style="color:#66d9ef">if</span> (al <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x31</span>) {
        _exit (<span style="color:#ae81ff">1</span>);
    }
    edx <span style="color:#f92672">=</span> location;
    ecx <span style="color:#f92672">=</span> var_34h;
    eax <span style="color:#f92672">=</span> edx;
    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">2</span>;
    eax <span style="color:#f92672">+=</span> edx;
    esi <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>var_40h;
    eax <span style="color:#f92672">+=</span> esi;
    eax <span style="color:#f92672">+=</span> ecx;
    eax <span style="color:#f92672">-=</span> <span style="color:#ae81ff">0x29</span>;
    al <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(eax);
    <span style="color:#66d9ef">if</span> (al <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x23</span>) {
        <span style="color:#66d9ef">goto</span> label_0;
    }
    _puts (<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">ok, the order you enter is the flag!&#34;</span>);
    _exit (<span style="color:#ae81ff">0</span>);
}
</code></pre></div><p>根据反编译的代码，可以发现这道题目是一个走迷宫的题目，总体而言，还是挺有意思的，找到迷宫数据然后走出迷宫。</p>
<p>根据迷宫的特性，需要寻找一下一些关键性的信息，来完成迷宫的</p>
<p>首先是迷宫的信息，可以从反编译的关键代码找到迷宫信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"> ebx <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;*11110100001010000101111#&#34;</span>;
</code></pre></div><p>将数据整合一下便得到如下内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">*1111
01000
01010
00010
1111#
</code></pre></div><p>对于这个数据可以非常清晰看出迷宫的形式，*是起点，#是终点，1不能通行，0可以通行。</p>
<p>然后是寻找操作指令，自然也可以从反编译代码中找到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">_puts (<span style="color:#e6db74">&#34;you can choose one action to execute&#34;</span>);
    _puts (<span style="color:#e6db74">&#34;1 up&#34;</span>);
    _puts (<span style="color:#e6db74">&#34;2 down&#34;</span>);
    _puts (<span style="color:#e6db74">&#34;3 left&#34;</span>);
    _printf (<span style="color:#e6db74">&#34;4 right</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">:&#34;</span>);
</code></pre></div><p>根据迷宫和操作数，就可以得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{222441144222}
</code></pre></div><h2 id="0x1-simplerev">0x1 SimpleRev</h2>
<p>首先查一下程序信息，看看程序具体是个什么</p>
<p><img src="/images/BUUCTF-REVERSE-%5B9-16%5D_writeup/image-20210809170725758.png" alt="image-20210809170725758"></p>
<p>是一个Linux程序，使用x64 IDA pro进行打开</p>
<p>找到main函数位置，查看反编译代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v4; <span style="color:#75715e">// [rsp+Fh] [rbp-1h]
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
  {
    <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
    {
      printf(<span style="color:#e6db74">&#34;Welcome to CTF game!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Please input d/D to start or input q/Q to quit this program: &#34;</span>);
      v4 <span style="color:#f92672">=</span> getchar();
      <span style="color:#66d9ef">if</span> ( v4 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">&amp;&amp;</span> v4 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">68</span> )
        <span style="color:#66d9ef">break</span>;
      Decry(<span style="color:#e6db74">&#34;Welcome to CTF game!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Please input d/D to start or input q/Q to quit this program: &#34;</span>, argv);
    }
    <span style="color:#66d9ef">if</span> ( v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">113</span> <span style="color:#f92672">||</span> v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">81</span> )
      Exit(<span style="color:#e6db74">&#34;Welcome to CTF game!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Please input d/D to start or input q/Q to quit this program: &#34;</span>, argv);
    puts(<span style="color:#e6db74">&#34;Input fault format!&#34;</span>);
    v3 <span style="color:#f92672">=</span> getchar();
    putchar(v3);
  }
}
</code></pre></div><p>对反编译的代码进行简单的审计，发现Decry函数是关键函数，可以看看这个函数的具体实现细节</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> <span style="color:#a6e22e">Decry</span>()
{
  <span style="color:#66d9ef">char</span> v1; <span style="color:#75715e">// [rsp+Fh] [rbp-51h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v2; <span style="color:#75715e">// [rsp+10h] [rbp-50h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// [rsp+14h] [rbp-4Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+18h] [rbp-48h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// [rsp+1Ch] [rbp-44h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> src[<span style="color:#ae81ff">8</span>]; <span style="color:#75715e">// [rsp+20h] [rbp-40h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v7; <span style="color:#75715e">// [rsp+28h] [rbp-38h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// [rsp+30h] [rbp-30h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v9[<span style="color:#ae81ff">2</span>]; <span style="color:#75715e">// [rsp+40h] [rbp-20h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v10; <span style="color:#75715e">// [rsp+50h] [rbp-10h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v11; <span style="color:#75715e">// [rsp+58h] [rbp-8h]
</span><span style="color:#75715e"></span>
  v11 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
  <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)src <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x534C43444ELL</span>;
  v7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
  v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  v9[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x776F646168LL</span>;
  v9[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
  v10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  text <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)join(key3, v9);
  strcpy(key, key1);
  strcat(key, src);
  v2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  getchar();
  v5 <span style="color:#f92672">=</span> strlen(key);
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> v5; <span style="color:#f92672">++</span>i )
  {
    <span style="color:#66d9ef">if</span> ( key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">64</span> <span style="color:#f92672">&amp;&amp;</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> )
      key[i] <span style="color:#f92672">=</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">32</span>;
    <span style="color:#f92672">++</span>v3;
  }
  printf(<span style="color:#e6db74">&#34;Please input your flag:&#34;</span>);
  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
  {
    v1 <span style="color:#f92672">=</span> getchar();
    <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">10</span> )
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">32</span> )
    {
      <span style="color:#f92672">++</span>v2;
    }
    <span style="color:#66d9ef">else</span>
    {
      <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">96</span> <span style="color:#f92672">||</span> v1 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">122</span> )
      {
        <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">64</span> <span style="color:#f92672">&amp;&amp;</span> v1 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> )
        {
          str2[v2] <span style="color:#f92672">=</span> (v1 <span style="color:#f92672">-</span> <span style="color:#ae81ff">39</span> <span style="color:#f92672">-</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;
          <span style="color:#f92672">++</span>v3;
        }
      }
      <span style="color:#66d9ef">else</span>
      {
        str2[v2] <span style="color:#f92672">=</span> (v1 <span style="color:#f92672">-</span> <span style="color:#ae81ff">39</span> <span style="color:#f92672">-</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;
        <span style="color:#f92672">++</span>v3;
      }
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>(v3 <span style="color:#f92672">%</span> v5) )
        putchar(<span style="color:#ae81ff">32</span>);
      <span style="color:#f92672">++</span>v2;
    }
  }
  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>strcmp(text, str2) )
    puts(<span style="color:#e6db74">&#34;Congratulation!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  <span style="color:#66d9ef">else</span>
    puts(<span style="color:#e6db74">&#34;Try again!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  <span style="color:#66d9ef">return</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>) <span style="color:#f92672">^</span> v11;
}
</code></pre></div><p>根据函数的核心代码可以知道，最开始的数据是</p>
<blockquote>
<p>Intel CPU/AMD CPU 计算机内部的数据存储的方式是以小端序存储的方式，因此部分数据是以颠倒方式进行存储的</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">text = &#39;killshadow&#39;
key =  &#39;ADSFKNDCLS&#39;
</code></pre></div><p>现在有原始数据就可以进一步对算法进行分析</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
{
    v1 <span style="color:#f92672">=</span> getchar();
    <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">10</span> )
        <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">32</span> )
    {
        <span style="color:#f92672">++</span>v2;
    }
    <span style="color:#66d9ef">else</span>
    {
        <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">96</span> <span style="color:#f92672">||</span> v1 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">122</span> )
        {
            <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">64</span> <span style="color:#f92672">&amp;&amp;</span> v1 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> )
            {
                str2[v2] <span style="color:#f92672">=</span> (v1 <span style="color:#f92672">-</span> <span style="color:#ae81ff">39</span> <span style="color:#f92672">-</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;
                <span style="color:#f92672">++</span>v3;
            }
        }
        <span style="color:#66d9ef">else</span>
        {
            str2[v2] <span style="color:#f92672">=</span> (v1 <span style="color:#f92672">-</span> <span style="color:#ae81ff">39</span> <span style="color:#f92672">-</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;
            <span style="color:#f92672">++</span>v3;
        }
        <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>(v3 <span style="color:#f92672">%</span> v5) )
            putchar(<span style="color:#ae81ff">32</span>);
        <span style="color:#f92672">++</span>v2;
    }
}
<span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>strcmp(text, str2) )
    puts(<span style="color:#e6db74">&#34;Congratulation!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
<span style="color:#66d9ef">else</span>
    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Try again!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</code></pre></div><p>对代码观察可以发现，最终的逻辑判断是<code>text</code>的数据和<code>str2</code>的数据相等</p>
<p>根据对于程序的逻辑判断，编写逆向算法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
	<span style="color:#66d9ef">int</span> i, j, n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, v2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;;
	<span style="color:#66d9ef">char</span> v1;
	string text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;killshadow&#34;</span>;
	string key <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ADSFKNDCLS&#34;</span>;
	<span style="color:#66d9ef">char</span> flag[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">=</span> { <span style="color:#ae81ff">0</span> };
	<span style="color:#66d9ef">char</span> str2[<span style="color:#ae81ff">104</span>] <span style="color:#f92672">=</span> { <span style="color:#ae81ff">0</span> };	
	<span style="color:#66d9ef">int</span> v5 <span style="color:#f92672">=</span> key.length();
	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span>v5; <span style="color:#f92672">++</span>i)
	{
		<span style="color:#66d9ef">if</span> ( key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">64</span> <span style="color:#f92672">&amp;&amp;</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> )
      		key[i] <span style="color:#f92672">=</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">32</span>;
    	<span style="color:#f92672">++</span>v3;
	}
	<span style="color:#66d9ef">for</span> (j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>; <span style="color:#f92672">++</span>j) {
        <span style="color:#66d9ef">for</span> (v2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; v2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>; <span style="color:#f92672">++</span>v2) {
            v1 <span style="color:#f92672">=</span> text[v2] <span style="color:#f92672">-</span> <span style="color:#ae81ff">97</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">-</span> <span style="color:#ae81ff">97</span> <span style="color:#f92672">+</span> key[v3<span style="color:#f92672">++</span> <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">39</span>;
            <span style="color:#66d9ef">if</span> ((v1 <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">65</span> <span style="color:#f92672">&amp;&amp;</span> v1 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span>) <span style="color:#f92672">||</span> (v1 <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">97</span> <span style="color:#f92672">&amp;&amp;</span> v1 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">122</span>)) {
                flag[v2] <span style="color:#f92672">=</span> v1;
                <span style="color:#66d9ef">if</span> (<span style="color:#f92672">++</span>n <span style="color:#f92672">==</span> <span style="color:#ae81ff">10</span>) {
                    cout <span style="color:#f92672">&lt;&lt;</span> flag <span style="color:#f92672">&lt;&lt;</span> endl;
                    system(<span style="color:#e6db74">&#34;PAUSE&#34;</span>);
                    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
                }
            }
        }
    }
	system(<span style="color:#e6db74">&#34;PAUSE&#34;</span>);
	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>运行得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">KLDQCUDFZO
</code></pre></div><h2 id="0x2-java逆向解密">0x2 Java逆向解密</h2>
<p>Java逆向的题目，本质上和安卓逆向有着异曲同工之处，可以使用安卓逆向工具进行打开，这里使用Jadx打开</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> defpackage<span style="color:#f92672">;</span>

<span style="color:#f92672">import</span> java.util.ArrayList<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> java.util.Scanner<span style="color:#f92672">;</span>

<span style="color:#75715e">/* renamed from: Reverse  reason: default package */</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Reverse</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        Scanner s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Scanner<span style="color:#f92672">(</span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">in</span><span style="color:#f92672">);</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Please input the flag ：&#34;</span><span style="color:#f92672">);</span>
        String str <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">();</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Your input is ：&#34;</span><span style="color:#f92672">);</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>str<span style="color:#f92672">);</span>
        Encrypt<span style="color:#f92672">(</span>str<span style="color:#f92672">.</span><span style="color:#a6e22e">toCharArray</span><span style="color:#f92672">());</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">Encrypt</span><span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> arr<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> KEY<span style="color:#f92672">;</span>
        ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> Resultlist <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span> c <span style="color:#f92672">:</span> arr<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            Resultlist<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">((</span>c <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;@&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">^</span> 32<span style="color:#f92672">));</span>
        <span style="color:#f92672">}</span>
        ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> KEYList <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">:</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{</span>180<span style="color:#f92672">,</span> 136<span style="color:#f92672">,</span> 137<span style="color:#f92672">,</span> 147<span style="color:#f92672">,</span> 191<span style="color:#f92672">,</span> 137<span style="color:#f92672">,</span> 147<span style="color:#f92672">,</span> 191<span style="color:#f92672">,</span> 148<span style="color:#f92672">,</span> 136<span style="color:#f92672">,</span> 133<span style="color:#f92672">,</span> 191<span style="color:#f92672">,</span> 134<span style="color:#f92672">,</span> 140<span style="color:#f92672">,</span> 129<span style="color:#f92672">,</span> 135<span style="color:#f92672">,</span> 191<span style="color:#f92672">,</span> 65<span style="color:#f92672">})</span> <span style="color:#f92672">{</span>
            KEYList<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>i<span style="color:#f92672">));</span>
        <span style="color:#f92672">}</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Result:&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>Resultlist<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>KEYList<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Congratulations！&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
            System<span style="color:#f92672">.</span><span style="color:#a6e22e">err</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Error！&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>应该就是最基本的代码审计</p>
<p>关键代码其实就在<code>Encrypt</code>函数里面</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">Encrypt</span><span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> arr<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> KEY<span style="color:#f92672">;</span>
        ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> Resultlist <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span> c <span style="color:#f92672">:</span> arr<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            Resultlist<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">((</span>c <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;@&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">^</span> 32<span style="color:#f92672">));</span>
        <span style="color:#f92672">}</span>
        ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> KEYList <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">:</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{</span>180<span style="color:#f92672">,</span> 136<span style="color:#f92672">,</span> 137<span style="color:#f92672">,</span> 147<span style="color:#f92672">,</span> 191<span style="color:#f92672">,</span> 137<span style="color:#f92672">,</span> 147<span style="color:#f92672">,</span> 191<span style="color:#f92672">,</span> 148<span style="color:#f92672">,</span> 136<span style="color:#f92672">,</span> 133<span style="color:#f92672">,</span> 191<span style="color:#f92672">,</span> 134<span style="color:#f92672">,</span> 140<span style="color:#f92672">,</span> 129<span style="color:#f92672">,</span> 135<span style="color:#f92672">,</span> 191<span style="color:#f92672">,</span> 65<span style="color:#f92672">})</span> <span style="color:#f92672">{</span>
            KEYList<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>i<span style="color:#f92672">));</span>
        <span style="color:#f92672">}</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Result:&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>Resultlist<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>KEYList<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Congratulations！&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
            System<span style="color:#f92672">.</span><span style="color:#a6e22e">err</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Error！&#34;</span><span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
</code></pre></div><p>应该是一个注册码校验程序，写一个java程序逆过去应该就可以得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> re<span style="color:#f92672">;</span>

<span style="color:#f92672">import</span> java.util.ArrayList<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JavaRe</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
	<span style="color:#f92672">{</span>
		ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> KEYList <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">:</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{</span>180<span style="color:#f92672">,</span> 136<span style="color:#f92672">,</span> 137<span style="color:#f92672">,</span> 147<span style="color:#f92672">,</span> 191<span style="color:#f92672">,</span> 137<span style="color:#f92672">,</span> 147<span style="color:#f92672">,</span> 191<span style="color:#f92672">,</span> 148<span style="color:#f92672">,</span> 136<span style="color:#f92672">,</span> 133<span style="color:#f92672">,</span> 191<span style="color:#f92672">,</span> 134<span style="color:#f92672">,</span> 140<span style="color:#f92672">,</span> 129<span style="color:#f92672">,</span> 135<span style="color:#f92672">,</span> 191<span style="color:#f92672">,</span> 65<span style="color:#f92672">})</span> <span style="color:#f92672">{</span>
            KEYList<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>i<span style="color:#f92672">));</span>
        <span style="color:#f92672">}</span>
        ArrayList<span style="color:#f92672">&lt;</span>Character<span style="color:#f92672">&gt;</span> Resultlist <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> c <span style="color:#f92672">:</span> KEYList<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            Resultlist<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(((</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)((</span>c<span style="color:#f92672">^</span> 32<span style="color:#f92672">)-</span><span style="color:#e6db74">&#39;@&#39;</span><span style="color:#f92672">)));</span>
        <span style="color:#f92672">}</span>
        String flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> String<span style="color:#f92672">();</span>
        <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">char</span> c<span style="color:#f92672">:</span>Resultlist<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        	flag <span style="color:#f92672">+=</span> c<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>flag<span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>

<span style="color:#f92672">}</span>
</code></pre></div><p>运行Java程序就可以得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">This_is_the_flag_!
</code></pre></div><h2 id="0x3-刮开有奖">0x3 刮开有奖</h2>
<p>看下题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">这是一个赌博程序，快去赚钱吧！！！！！！！！！！！！！！！！！！！！！！！！！！！(在编辑框中的输入值，即为flag，提交即可) 注意：得到的 flag 请包上 flag{} 提交
</code></pre></div><p>先查一下壳：</p>
<p><img src="/images/BUUCTF-REVERSE-%5B9-16%5D_writeup/image-20210901182834092.png" alt="image-20210901182834092"></p>
<p>没壳，32位的程序，使用IDA pro打开</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__stdcall</span> <span style="color:#a6e22e">WinMain</span>(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span style="color:#66d9ef">int</span> nShowCmd)
{
  DialogBoxParamA(hInstance, (LPCSTR)<span style="color:#ae81ff">0x67</span>, <span style="color:#ae81ff">0</span>, DialogFunc, <span style="color:#ae81ff">0</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>看样子是调用了一个WIN32的API函数，关键的代码应该是在DialogFunc函数代码中</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">INT_PTR <span style="color:#66d9ef">__stdcall</span> <span style="color:#a6e22e">DialogFunc</span>(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4)
{
  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v4; <span style="color:#75715e">// esi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v5; <span style="color:#75715e">// edi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7[<span style="color:#ae81ff">2</span>]; <span style="color:#75715e">// [esp+8h] [ebp-20030h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// [esp+10h] [ebp-20028h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// [esp+14h] [ebp-20024h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v10; <span style="color:#75715e">// [esp+18h] [ebp-20020h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v11; <span style="color:#75715e">// [esp+1Ch] [ebp-2001Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v12; <span style="color:#75715e">// [esp+20h] [ebp-20018h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v13; <span style="color:#75715e">// [esp+24h] [ebp-20014h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v14; <span style="color:#75715e">// [esp+28h] [ebp-20010h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v15; <span style="color:#75715e">// [esp+2Ch] [ebp-2000Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v16; <span style="color:#75715e">// [esp+30h] [ebp-20008h]
</span><span style="color:#75715e"></span>  CHAR String[<span style="color:#ae81ff">65536</span>]; <span style="color:#75715e">// [esp+34h] [ebp-20004h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v18[<span style="color:#ae81ff">65536</span>]; <span style="color:#75715e">// [esp+10034h] [ebp-10004h] BYREF
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">272</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">273</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">if</span> ( (_WORD)a3 <span style="color:#f92672">==</span> <span style="color:#ae81ff">1001</span> )
  {
    memset(String, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0xFFFFu</span>);
    GetDlgItemTextA(hDlg, <span style="color:#ae81ff">1000</span>, String, <span style="color:#ae81ff">0xFFFF</span>);
    <span style="color:#66d9ef">if</span> ( strlen(String) <span style="color:#f92672">==</span> <span style="color:#ae81ff">8</span> )
    {
      v7[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
      v7[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">74</span>;
      v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">83</span>;
      v9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">69</span>;
      v10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">67</span>;
      v11 <span style="color:#f92672">=</span> <span style="color:#ae81ff">97</span>;
      v12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">78</span>;
      v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">72</span>;
      v14 <span style="color:#f92672">=</span> <span style="color:#ae81ff">51</span>;
      v15 <span style="color:#f92672">=</span> <span style="color:#ae81ff">110</span>;
      v16 <span style="color:#f92672">=</span> <span style="color:#ae81ff">103</span>;
      sub_4010F0(v7, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>);
      memset(v18, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0xFFFFu</span>);
      v18[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> String[<span style="color:#ae81ff">5</span>];
      v18[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> String[<span style="color:#ae81ff">7</span>];
      v18[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> String[<span style="color:#ae81ff">6</span>];
      v4 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)sub_401000(v18, strlen(v18));
      memset(v18, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0xFFFFu</span>);
      v18[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> String[<span style="color:#ae81ff">3</span>];
      v18[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> String[<span style="color:#ae81ff">2</span>];
      v18[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> String[<span style="color:#ae81ff">4</span>];
      v5 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)sub_401000(v18, strlen(v18));
      <span style="color:#66d9ef">if</span> ( String[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> v7[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">34</span>
        <span style="color:#f92672">&amp;&amp;</span> String[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> v10
        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> String[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">141</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> v8
        <span style="color:#f92672">&amp;&amp;</span> String[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">/</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> (v13 <span style="color:#f92672">/</span> <span style="color:#ae81ff">9</span>)
        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>strcmp(v4, <span style="color:#e6db74">&#34;ak1w&#34;</span>)
        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>strcmp(v5, <span style="color:#e6db74">&#34;V1Ax&#34;</span>) )
      {
        MessageBoxA(hDlg, <span style="color:#e6db74">&#34;U g3t 1T!&#34;</span>, <span style="color:#e6db74">&#34;@_@&#34;</span>, <span style="color:#ae81ff">0</span>);
      }
    }
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  }
  <span style="color:#66d9ef">if</span> ( (_WORD)a3 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> (_WORD)a3 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span> )
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  EndDialog(hDlg, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)a3);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
}
</code></pre></div><p>也是调用了几个WIN32的API，对代码进行分析</p>
<p>可以知道：</p>
<p><code>GetDlgItemTextA</code> 函数是获取输入的字符串</p>
<p>这段代码对字符串进行了处理，主要是有两个处理函数<code>sub_4010F0</code> 和 <code>sub_401000</code></p>
<p>这个函数应该是处理这个程序字符串的关键函数</p>
<p>先来看看sub_4010F0函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_4010F0</span>(<span style="color:#66d9ef">int</span> a1, <span style="color:#66d9ef">int</span> a2, <span style="color:#66d9ef">int</span> a3)
{
  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// esi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// ecx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// edx
</span><span style="color:#75715e"></span>
  result <span style="color:#f92672">=</span> a3;
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> a2; i <span style="color:#f92672">&lt;=</span> a3; a2 <span style="color:#f92672">=</span> i )
  {
    v5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i;
    v6 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1);
    <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">&lt;</span> result <span style="color:#f92672">&amp;&amp;</span> i <span style="color:#f92672">&lt;</span> result )
    {
      <span style="color:#66d9ef">do</span>
      {
        <span style="color:#66d9ef">if</span> ( v6 <span style="color:#f92672">&gt;</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> result) )
        {
          <span style="color:#66d9ef">if</span> ( i <span style="color:#f92672">&gt;=</span> result )
            <span style="color:#66d9ef">break</span>;
          <span style="color:#f92672">++</span>i;
          <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(v5 <span style="color:#f92672">+</span> a1) <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> result);
          <span style="color:#66d9ef">if</span> ( i <span style="color:#f92672">&gt;=</span> result )
            <span style="color:#66d9ef">break</span>;
          <span style="color:#66d9ef">while</span> ( <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i) <span style="color:#f92672">&lt;=</span> v6 )
          {
            <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">++</span>i <span style="color:#f92672">&gt;=</span> result )
              <span style="color:#66d9ef">goto</span> LABEL_13;
          }
          <span style="color:#66d9ef">if</span> ( i <span style="color:#f92672">&gt;=</span> result )
            <span style="color:#66d9ef">break</span>;
          v5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i;
          <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> result) <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1);
        }
        <span style="color:#f92672">--</span>result;
      }
      <span style="color:#66d9ef">while</span> ( i <span style="color:#f92672">&lt;</span> result );
    }
LABEL_13:
    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> result) <span style="color:#f92672">=</span> v6;
    sub_4010F0(a1, a2, i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
    result <span style="color:#f92672">=</span> a3;
    <span style="color:#f92672">++</span>i;
  }
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>代码的功能暂时不太清楚，毕竟对C语言的审计功底还是不是很到位，根据代码进行转换为相应的Cpp代码运行一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;

<span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_4010F0</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>a1, <span style="color:#66d9ef">int</span> a2, <span style="color:#66d9ef">int</span> a3)
{
    <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// esi
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// ecx
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// edx
</span><span style="color:#75715e"></span>
    result <span style="color:#f92672">=</span> a3;
    <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> a2; i <span style="color:#f92672">&lt;=</span> a3; a2 <span style="color:#f92672">=</span> i)
    {
        v5 <span style="color:#f92672">=</span> i;
        v6 <span style="color:#f92672">=</span> a1[i];
        <span style="color:#66d9ef">if</span> (a2 <span style="color:#f92672">&lt;</span> result <span style="color:#f92672">&amp;&amp;</span> i <span style="color:#f92672">&lt;</span> result)
        {
            <span style="color:#66d9ef">do</span>
            {
                <span style="color:#66d9ef">if</span> (v6 <span style="color:#f92672">&gt;</span>a1[result])
                {
                    <span style="color:#66d9ef">if</span> (i <span style="color:#f92672">&gt;=</span> result)
                        <span style="color:#66d9ef">break</span>;
                    <span style="color:#f92672">++</span>i;
                    a1[v5] <span style="color:#f92672">=</span> a1[result];
                    <span style="color:#66d9ef">if</span> (i <span style="color:#f92672">&gt;=</span> result)
                        <span style="color:#66d9ef">break</span>;
                    <span style="color:#66d9ef">while</span> (a1[i] <span style="color:#f92672">&lt;=</span> v6)
                    {
                        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">++</span>i <span style="color:#f92672">&gt;=</span> result)
                            <span style="color:#66d9ef">goto</span> LABEL_13;
                    }
                    <span style="color:#66d9ef">if</span> (i <span style="color:#f92672">&gt;=</span> result)
                        <span style="color:#66d9ef">break</span>;
                    v5 <span style="color:#f92672">=</span> i;
                    a1[result] <span style="color:#f92672">=</span> a1[i];
                }
                <span style="color:#f92672">--</span>result;
            } <span style="color:#66d9ef">while</span> (i <span style="color:#f92672">&lt;</span> result);
        }
    LABEL_13:
        a1[result] <span style="color:#f92672">=</span> v6;
        sub_4010F0(a1, a2, i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
        result <span style="color:#f92672">=</span> a3;
        <span style="color:#f92672">++</span>i;
    }
    <span style="color:#66d9ef">return</span> result;
}
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
	<span style="color:#66d9ef">char</span> v7[<span style="color:#ae81ff">11</span>];
	v7[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
    v7[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">74</span>;
    v7[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">83</span>;
    v7[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">69</span>;
    v7[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">67</span>;
    v7[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">97</span>;
    v7[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">78</span>;
    v7[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">72</span>;
    v7[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">51</span>;
    v7[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">110</span>;
    v7[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">103</span>;
    cout <span style="color:#f92672">&lt;&lt;</span> v7 <span style="color:#f92672">&lt;&lt;</span> endl;
    sub_4010F0(v7, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>);
    
    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">11</span>;<span style="color:#f92672">++</span>i){
    	cout <span style="color:#f92672">&lt;&lt;</span> (<span style="color:#66d9ef">int</span>)v7[i] <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>;
	}
	cout <span style="color:#f92672">&lt;&lt;</span> endl;
	system(<span style="color:#e6db74">&#34;PAUSE&#34;</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>运行代码，得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ZJSECaNH3ng
<span style="color:#ae81ff">51</span>      <span style="color:#ae81ff">67</span>      <span style="color:#ae81ff">69</span>      <span style="color:#ae81ff">72</span>      <span style="color:#ae81ff">74</span>      <span style="color:#ae81ff">78</span>      <span style="color:#ae81ff">83</span>      <span style="color:#ae81ff">90</span>      <span style="color:#ae81ff">97</span>      <span style="color:#ae81ff">103</span>     <span style="color:#ae81ff">110</span>
</code></pre></div><p>看来应该是一个排序算法，按升序进行排序的</p>
<p>下面分析另一个函数具体是个什么东西：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">_BYTE <span style="color:#f92672">*</span><span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_401000</span>(<span style="color:#66d9ef">int</span> a1, <span style="color:#66d9ef">int</span> a2)
{
  <span style="color:#66d9ef">int</span> v2; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// esi
</span><span style="color:#75715e"></span>  size_t v4; <span style="color:#75715e">// ebx
</span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v5; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v6; <span style="color:#75715e">// edi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v8; <span style="color:#75715e">// ebx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// edi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v10; <span style="color:#75715e">// edx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v11; <span style="color:#75715e">// edi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v12; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// esi
</span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>result; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v15; <span style="color:#75715e">// [esp+Ch] [ebp-10h]
</span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v16; <span style="color:#75715e">// [esp+10h] [ebp-Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v17; <span style="color:#75715e">// [esp+14h] [ebp-8h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v18; <span style="color:#75715e">// [esp+18h] [ebp-4h]
</span><span style="color:#75715e"></span>
  v2 <span style="color:#f92672">=</span> a2 <span style="color:#f92672">/</span> <span style="color:#ae81ff">3</span>;
  v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">%</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> )
    <span style="color:#f92672">++</span>v2;
  v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> v2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
  v5 <span style="color:#f92672">=</span> malloc(v4);
  v6 <span style="color:#f92672">=</span> v5;
  v15 <span style="color:#f92672">=</span> v5;
  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>v5 )
    exit(<span style="color:#ae81ff">0</span>);
  memset(v5, <span style="color:#ae81ff">0</span>, v4);
  v7 <span style="color:#f92672">=</span> a2;
  v8 <span style="color:#f92672">=</span> v6;
  v16 <span style="color:#f92672">=</span> v6;
  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> )
  {
    <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
    {
      v9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      v10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      v18 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">do</span>
      {
        <span style="color:#66d9ef">if</span> ( v3 <span style="color:#f92672">&gt;=</span> v7 )
          <span style="color:#66d9ef">break</span>;
        <span style="color:#f92672">++</span>v10;
        v9 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> <span style="color:#f92672">*</span>)(v3 <span style="color:#f92672">+</span> a1) <span style="color:#f92672">|</span> (v9 <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">8</span>);
        <span style="color:#f92672">++</span>v3;
      }
      <span style="color:#66d9ef">while</span> ( v10 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span> );
      v11 <span style="color:#f92672">=</span> v9 <span style="color:#f92672">&lt;&lt;</span> (<span style="color:#ae81ff">8</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">-</span> v10));
      v12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      v17 <span style="color:#f92672">=</span> v3;
      <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>; i <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>; i <span style="color:#f92672">-=</span> <span style="color:#ae81ff">6</span> )
      {
        <span style="color:#66d9ef">if</span> ( v10 <span style="color:#f92672">&gt;=</span> v12 )
        {
          <span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v18 <span style="color:#f92672">+</span> v12) <span style="color:#f92672">=</span> (v11 <span style="color:#f92672">&gt;&gt;</span> i) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x3F</span>;
          v8 <span style="color:#f92672">=</span> v16;
        }
        <span style="color:#66d9ef">else</span>
        {
          <span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v18 <span style="color:#f92672">+</span> v12) <span style="color:#f92672">=</span> <span style="color:#ae81ff">64</span>;
        }
        <span style="color:#f92672">*</span>v8<span style="color:#f92672">++</span> <span style="color:#f92672">=</span> byte_407830[<span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v18 <span style="color:#f92672">+</span> v12<span style="color:#f92672">++</span>)];
        v16 <span style="color:#f92672">=</span> v8;
      }
      v3 <span style="color:#f92672">=</span> v17;
      <span style="color:#66d9ef">if</span> ( v17 <span style="color:#f92672">&gt;=</span> a2 )
        <span style="color:#66d9ef">break</span>;
      v7 <span style="color:#f92672">=</span> a2;
    }
    v6 <span style="color:#f92672">=</span> v15;
  }
  result <span style="color:#f92672">=</span> v6;
  <span style="color:#f92672">*</span>v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>看代码，发现有3和8移位的特征初步推测是base64编码，看到有一个<code>byte_407830</code>的数组，跟进点开查看数据内容</p>
<p><img src="/images/BUUCTF-REVERSE-%5B9-16%5D_writeup/image-20210901203207491.png" alt="image-20210901203207491"></p>
<p>看到这数据应该就可以断定是base64编码了。</p>
<p>现在知道了两个函数的功能作用，可以直接进行求解，直接定位到判断条件的位置：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">if</span> ( String[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> v7[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">34</span>
        <span style="color:#f92672">&amp;&amp;</span> String[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> v10
        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> String[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">141</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> v8
        <span style="color:#f92672">&amp;&amp;</span> String[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">/</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> (v13 <span style="color:#f92672">/</span> <span style="color:#ae81ff">9</span>)
        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>strcmp(v4, <span style="color:#e6db74">&#34;ak1w&#34;</span>)
        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>strcmp(v5, <span style="color:#e6db74">&#34;V1Ax&#34;</span>) )
      {
        MessageBoxA(hDlg, <span style="color:#e6db74">&#34;U g3t 1T!&#34;</span>, <span style="color:#e6db74">&#34;@_@&#34;</span>, <span style="color:#ae81ff">0</span>);
      }
</code></pre></div><p>进行简单的推断可以得出</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">String[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">85</span>; <span style="color:#75715e">// 51+34 = 85
</span><span style="color:#75715e"></span>String[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">74</span>;
String[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">87</span>; <span style="color:#75715e">//(3 x 69 +141)/4 = 87
</span><span style="color:#75715e"></span>String[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">80</span>;<span style="color:#75715e">// 2 x (90 / 9) x4 == 80
</span></code></pre></div><p>下面进行base64解码来得到后面四个字符的数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">b<span style="color:#e6db74">&#39;jMp&#39;</span>
b<span style="color:#e6db74">&#39;WP1&#39;</span>
</code></pre></div><p>根据推断出来的信息可以求解得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">UJWP1jMp
</code></pre></div><hr>
<p>也可以使用Python脚本快速求解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64

data <span style="color:#f92672">=</span> [<span style="color:#ae81ff">51</span>, <span style="color:#ae81ff">67</span>, <span style="color:#ae81ff">69</span>, <span style="color:#ae81ff">72</span>, <span style="color:#ae81ff">74</span>, <span style="color:#ae81ff">78</span>, <span style="color:#ae81ff">83</span>, <span style="color:#ae81ff">90</span>, <span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">110</span>]
String <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
String <span style="color:#f92672">+=</span> chr(data[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span><span style="color:#ae81ff">34</span>)
String <span style="color:#f92672">+=</span> chr(data[<span style="color:#ae81ff">4</span>])
String <span style="color:#f92672">+=</span> base64<span style="color:#f92672">.</span>b64decode(<span style="color:#e6db74">&#34;V1Ax&#34;</span>)<span style="color:#f92672">.</span>decode()
String <span style="color:#f92672">+=</span> base64<span style="color:#f92672">.</span>b64decode(<span style="color:#e6db74">&#34;ak1w&#34;</span>)<span style="color:#f92672">.</span>decode()
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>String<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
print(flag)
</code></pre></div><p>运行脚本就可以得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{UJWP1jMp}
</code></pre></div><h2 id="0x4-gxyctf2019luck_guy">0x4 [GXYCTF2019]luck_guy</h2>
<p>文件没有拓展名，感觉是一个ELF格式的文件</p>
<p>先走一下逆向的流程，首先查下壳</p>
<p><img src="/images/BUUCTF-REVERSE-%5B9-16%5D_writeup/image-20210902074301328.png" alt="image-20210902074301328"></p>
<p>果然是一个ELF文件，64位的文件，用x64 IDA pro打开文件，查看主程序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// [rsp+14h] [rbp-Ch] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp+18h] [rbp-8h]
</span><span style="color:#75715e"></span>
  v5 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
  welcome(argc, argv, envp);
  puts(<span style="color:#e6db74">&#34;_________________&#34;</span>);
  puts(<span style="color:#e6db74">&#34;try to patch me and find flag&#34;</span>);
  v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  puts(<span style="color:#e6db74">&#34;please input a lucky number&#34;</span>);
  __isoc99_scanf(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v4);
  patch_me(v4);
  puts(<span style="color:#e6db74">&#34;OK,see you again&#34;</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>程序挺简单的，需要寻找一下核心代码</p>
<p>看样子核心代码应该是在<code>patch_me(v4)</code>函数里面，进入函数内部</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">patch_me</span>(<span style="color:#66d9ef">int</span> a1)
{
  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">if</span> ( a1 <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
    result <span style="color:#f92672">=</span> puts(<span style="color:#e6db74">&#34;just finished&#34;</span>);
  <span style="color:#66d9ef">else</span>
    result <span style="color:#f92672">=</span> get_flag();
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>继续跟进到<code>get_flag()</code>函数里面</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> <span style="color:#a6e22e">get_flag</span>()
{
  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v0; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+4h] [rbp-3Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> j; <span style="color:#75715e">// [rsp+8h] [rbp-38h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> s; <span style="color:#75715e">// [rsp+10h] [rbp-30h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5; <span style="color:#75715e">// [rsp+18h] [rbp-28h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v6; <span style="color:#75715e">// [rsp+38h] [rbp-8h]
</span><span style="color:#75715e"></span>
  v6 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
  v0 <span style="color:#f92672">=</span> time(<span style="color:#ae81ff">0LL</span>);
  srand(v0);
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4</span>; <span style="color:#f92672">++</span>i )
  {
    <span style="color:#66d9ef">switch</span> ( rand() <span style="color:#f92672">%</span> <span style="color:#ae81ff">200</span> )
    {
      <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>
        puts(<span style="color:#e6db74">&#34;OK, it&#39;s flag:&#34;</span>);
        memset(<span style="color:#f92672">&amp;</span>s, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x28uLL</span>);
        strcat((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>s, f1);
        strcat((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>s, <span style="color:#f92672">&amp;</span>f2);
        printf(<span style="color:#e6db74">&#34;%s&#34;</span>, (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>s);
        <span style="color:#66d9ef">break</span>;
      <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span>
        printf(<span style="color:#e6db74">&#34;Solar not like you&#34;</span>);
        <span style="color:#66d9ef">break</span>;
      <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">:</span>
        printf(<span style="color:#e6db74">&#34;Solar want a girlfriend&#34;</span>);
        <span style="color:#66d9ef">break</span>;
      <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">:</span>
        s <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7F666F6067756369LL</span>;
        v5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
        strcat(<span style="color:#f92672">&amp;</span>f2, (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>s);
        <span style="color:#66d9ef">break</span>;
      <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">:</span>
        <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">7</span>; <span style="color:#f92672">++</span>j )
        {
          <span style="color:#66d9ef">if</span> ( j <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
            <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>f2 <span style="color:#f92672">+</span> j) <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>;
          <span style="color:#66d9ef">else</span>
            <span style="color:#f92672">--*</span>(<span style="color:#f92672">&amp;</span>f2 <span style="color:#f92672">+</span> j);
        }
        <span style="color:#66d9ef">break</span>;
      <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
        puts(<span style="color:#e6db74">&#34;emmm,you can&#39;t find flag 23333&#34;</span>);
        <span style="color:#66d9ef">break</span>;
    }
  }
  <span style="color:#66d9ef">return</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>) <span style="color:#f92672">^</span> v6;
}
</code></pre></div><p>看来flag应该就在这个函数里面，本来觉得可以使用gdb调试出来，无奈自己太菜了，不知道到gdb怎么修改汇编代码进行跳转，只能进行静态分析调试</p>
<p>进行分析发现，<code>switch</code> 条件的顺序应该是 4 –&gt; 5 —&gt;1的顺序依次输出flag</p>
<p>写一个脚本将flag数据输出</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;GXY{do_not_&#39;</span>
f2 <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0x7F</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0x6F</span>, <span style="color:#ae81ff">0x60</span>, <span style="color:#ae81ff">0x67</span>, <span style="color:#ae81ff">0x75</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0x69</span>][::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">8</span>):
    <span style="color:#66d9ef">if</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
        s <span style="color:#f92672">=</span> chr(f2[i] <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>)
    <span style="color:#66d9ef">else</span>:
        s <span style="color:#f92672">=</span> chr(f2[i] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
    flag <span style="color:#f92672">+=</span> s
print(flag)
</code></pre></div><p>运行脚本，得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">GXY{do_not_hate_me}
</code></pre></div><h2 id="0x5-findit">0x5 findit</h2>
<p>看下题目哈</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">不知不觉，小明长大了，变成了一个程序员，虽然很苦逼，但是偶尔编写个小东西坑害公司新人还是蛮好玩的。新人小萌一天问小明wifi账号密码，一分钟后，小萌收到了一个文件。小萌想了好久都没得到密码，怎么办，女朋友要买东西，流量告罄，没wifi上不了网，不买就分手，是时候该展现月老的实力了兄弟们！代表月亮惩罚小明！得出答案。 注意：得到的 flag 请包上 flag{} 提交
</code></pre></div><p>感觉像是一道APK的题目，下载附件发现果然是一个APK的题目，使用APK逆向工具jadx进行逆向</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> com.example.findit<span style="color:#f92672">;</span>

<span style="color:#f92672">import</span> android.os.Bundle<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.support.v7.app.ActionBarActivity<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.view.MenuItem<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.view.View<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.widget.Button<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.widget.EditText<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.widget.TextView<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MainActivity</span> <span style="color:#66d9ef">extends</span> ActionBarActivity <span style="color:#f92672">{</span>
    <span style="color:#75715e">/* access modifiers changed from: protected */</span>
    <span style="color:#a6e22e">@Override</span> <span style="color:#75715e">// android.support.v7.app.ActionBarActivity, android.support.v4.app.FragmentActivity
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onCreate</span><span style="color:#f92672">(</span>Bundle savedInstanceState<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">onCreate</span><span style="color:#f92672">(</span>savedInstanceState<span style="color:#f92672">);</span>
        setContentView<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">layout</span><span style="color:#f92672">.</span><span style="color:#a6e22e">activity_main</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">final</span> EditText edit <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>EditText<span style="color:#f92672">)</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">widget2</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">final</span> TextView text <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>TextView<span style="color:#f92672">)</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">widget1</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> a <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;T&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;h&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;i&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;s&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;I&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;s&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;T&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;h&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;e&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;F&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;l&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;g&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;H&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;o&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;e&#39;</span><span style="color:#f92672">};</span>
        <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> b <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;p&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;v&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;k&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;q&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;{&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;1&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;6&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;4&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;6&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;7&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;5&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;6&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;3&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;3&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;l&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;4&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;4&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;9&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;l&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;n&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;p&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;7&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;p&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;9&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;n&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;k&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;8&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;k&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;7&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;5&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;}&#39;</span><span style="color:#f92672">};</span>
        <span style="color:#f92672">((</span>Button<span style="color:#f92672">)</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">widget3</span><span style="color:#f92672">)).</span><span style="color:#a6e22e">setOnClickListener</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> View<span style="color:#f92672">.</span><span style="color:#a6e22e">OnClickListener</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">/* class com.example.findit.MainActivity.AnonymousClass1 */</span>

            <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onClick</span><span style="color:#f92672">(</span>View v<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> x <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[</span>17<span style="color:#f92672">];</span>
                <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> y <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[</span>38<span style="color:#f92672">];</span>
                <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> 17<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
                    <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;I&#39;</span> <span style="color:#f92672">&amp;&amp;</span> a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> <span style="color:#f92672">(</span>a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#f92672">&amp;&amp;</span> a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
                        x<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> 18<span style="color:#f92672">);</span>
                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">||</span> a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">||</span> a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
                        x<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> a<span style="color:#f92672">[</span>i<span style="color:#f92672">];</span>
                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
                        x<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;\b&#39;</span><span style="color:#f92672">);</span>
                    <span style="color:#f92672">}</span>
                <span style="color:#f92672">}</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>x<span style="color:#f92672">).</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>edit<span style="color:#f92672">.</span><span style="color:#a6e22e">getText</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()))</span> <span style="color:#f92672">{</span>
                    <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i2 <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i2 <span style="color:#f92672">&lt;</span> 38<span style="color:#f92672">;</span> i2<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
                        <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">||</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">||</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
                            y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">];</span>
                        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
                            y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> 16<span style="color:#f92672">);</span>
                            <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span> <span style="color:#f92672">&amp;&amp;</span> y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                                y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">-</span> 26<span style="color:#f92672">);</span>
                            <span style="color:#f92672">}</span>
                        <span style="color:#f92672">}</span>
                    <span style="color:#f92672">}</span>
                    text<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>y<span style="color:#f92672">));</span>
                    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
                <span style="color:#f92672">}</span>
                text<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;答案错了肿么办。。。不给你又不好意思。。。哎呀好纠结啊~~~&#34;</span><span style="color:#f92672">);</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">});</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">onOptionsItemSelected</span><span style="color:#f92672">(</span>MenuItem item<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>item<span style="color:#f92672">.</span><span style="color:#a6e22e">getItemId</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">action_settings</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">onOptionsItemSelected</span><span style="color:#f92672">(</span>item<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>看样子好像是一个简单的加密程序，可以进行简单的分析</p>
<p>发现主要的flag代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i2 <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i2 <span style="color:#f92672">&lt;</span> 38<span style="color:#f92672">;</span> i2<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">||</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">||</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
        y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">];</span>
    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
        y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> 16<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span> <span style="color:#f92672">&amp;&amp;</span> y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">-</span> 26<span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
text<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>y<span style="color:#f92672">));</span>
<span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</code></pre></div><p>这行代码稍加修改一下运行就可以直接俄得到flag了，写个Java的flag生成器，来生成flag吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> re<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Findit</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> b <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;p&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;v&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;k&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;q&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;{&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;1&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;6&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;4&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;6&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;7&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;5&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;6&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;3&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;3&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;l&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;4&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;4&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;9&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;l&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;n&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;p&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;7&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;p&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;9&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;n&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;k&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;8&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;k&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;7&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;5&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;}&#39;</span><span style="color:#f92672">};</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
	<span style="color:#f92672">{</span>
		<span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> y <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[</span>38<span style="color:#f92672">];</span>
		
		<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i2 <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i2 <span style="color:#f92672">&lt;</span> 38<span style="color:#f92672">;</span> i2<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
	        <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">||</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">||</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
	            y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">];</span>
	        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
	            y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> 16<span style="color:#f92672">);</span>
	            <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span> <span style="color:#f92672">&amp;&amp;</span> y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	                y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">-</span> 26<span style="color:#f92672">);</span>
	            <span style="color:#f92672">}</span>
	        <span style="color:#f92672">}</span>
	    <span style="color:#f92672">}</span>
		System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>y<span style="color:#f92672">));</span>
	<span style="color:#f92672">}</span>	
<span style="color:#f92672">}</span>
</code></pre></div><p>运行一下这个java程序就能生成flag啦！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{c164675262033b4c49bdf7f9cda28a75}
</code></pre></div><h2 id="0x6-简单的注册器">0x6 简单的注册器</h2>
<p>看下题目</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">生活中难免会有需要使用一些付费的程序，但是没有绿色版怎么办？只能自己逆向看看注册程序的代码是什么逻辑了。 注意：得到的 flag 请包上 flag{} 提交
</code></pre></div><p>下载附件，发现是一个apk文件，使用apk逆向工具jadx查看apk的伪代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> com.example.flag<span style="color:#f92672">;</span>

<span style="color:#f92672">import</span> android.os.Bundle<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.support.v4.app.Fragment<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.support.v7.app.ActionBarActivity<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.view.LayoutInflater<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.view.Menu<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.view.MenuItem<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.view.View<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.view.ViewGroup<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.widget.Button<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.widget.EditText<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> android.widget.TextView<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MainActivity</span> <span style="color:#66d9ef">extends</span> ActionBarActivity <span style="color:#f92672">{</span>
    <span style="color:#75715e">/* access modifiers changed from: protected */</span>
    <span style="color:#a6e22e">@Override</span> <span style="color:#75715e">// android.support.v7.app.ActionBarActivity, android.support.v4.app.FragmentActivity
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onCreate</span><span style="color:#f92672">(</span>Bundle savedInstanceState<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">onCreate</span><span style="color:#f92672">(</span>savedInstanceState<span style="color:#f92672">);</span>
        setContentView<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">layout</span><span style="color:#f92672">.</span><span style="color:#a6e22e">activity_main</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>savedInstanceState <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            getSupportFragmentManager<span style="color:#f92672">().</span><span style="color:#a6e22e">beginTransaction</span><span style="color:#f92672">().</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">container</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> PlaceholderFragment<span style="color:#f92672">()).</span><span style="color:#a6e22e">commit</span><span style="color:#f92672">();</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">final</span> TextView textview <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>TextView<span style="color:#f92672">)</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">textView1</span><span style="color:#f92672">);</span>
        <span style="color:#66d9ef">final</span> EditText editview <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>EditText<span style="color:#f92672">)</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">editText1</span><span style="color:#f92672">);</span>
        <span style="color:#f92672">((</span>Button<span style="color:#f92672">)</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">button1</span><span style="color:#f92672">)).</span><span style="color:#a6e22e">setOnClickListener</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> View<span style="color:#f92672">.</span><span style="color:#a6e22e">OnClickListener</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
            <span style="color:#75715e">/* class com.example.flag.MainActivity.AnonymousClass1 */</span>

            <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onClick</span><span style="color:#f92672">(</span>View v<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                <span style="color:#66d9ef">int</span> flag <span style="color:#f92672">=</span> 1<span style="color:#f92672">;</span>
                String xx <span style="color:#f92672">=</span> editview<span style="color:#f92672">.</span><span style="color:#a6e22e">getText</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">();</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!(</span>xx<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> 32 <span style="color:#f92672">&amp;&amp;</span> xx<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>31<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">&amp;&amp;</span> xx<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>1<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;b&#39;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>xx<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>0<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> xx<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span>2<span style="color:#f92672">))</span> <span style="color:#f92672">-</span> 48 <span style="color:#f92672">==</span> 56<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
                    flag <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
                <span style="color:#f92672">}</span>
                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>flag <span style="color:#f92672">==</span> 1<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                    <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dd2940c04462b4dd7c450528835cca15&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">toCharArray</span><span style="color:#f92672">();</span>
                    x<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span>3<span style="color:#f92672">])</span> <span style="color:#f92672">-</span> 50<span style="color:#f92672">);</span>
                    x<span style="color:#f92672">[</span>4<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span>5<span style="color:#f92672">])</span> <span style="color:#f92672">-</span> 48<span style="color:#f92672">);</span>
                    x<span style="color:#f92672">[</span>30<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span>31<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span>9<span style="color:#f92672">])</span> <span style="color:#f92672">-</span> 48<span style="color:#f92672">);</span>
                    x<span style="color:#f92672">[</span>14<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span>27<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span>28<span style="color:#f92672">])</span> <span style="color:#f92672">-</span> 97<span style="color:#f92672">);</span>
                    <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> 16<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
                        <span style="color:#66d9ef">char</span> a <span style="color:#f92672">=</span> x<span style="color:#f92672">[</span>31 <span style="color:#f92672">-</span> i<span style="color:#f92672">];</span>
                        x<span style="color:#f92672">[</span>31 <span style="color:#f92672">-</span> i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> x<span style="color:#f92672">[</span>i<span style="color:#f92672">];</span>
                        x<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> a<span style="color:#f92672">;</span>
                    <span style="color:#f92672">}</span>
                    textview<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;flag{&#34;</span> <span style="color:#f92672">+</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>x<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;}&#34;</span><span style="color:#f92672">);</span>
                    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
                <span style="color:#f92672">}</span>
                textview<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;输入注册码错误&#34;</span><span style="color:#f92672">);</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">});</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">onCreateOptionsMenu</span><span style="color:#f92672">(</span>Menu menu<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        getMenuInflater<span style="color:#f92672">().</span><span style="color:#a6e22e">inflate</span><span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">menu</span><span style="color:#f92672">.</span><span style="color:#a6e22e">main</span><span style="color:#f92672">,</span> menu<span style="color:#f92672">);</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">onOptionsItemSelected</span><span style="color:#f92672">(</span>MenuItem item<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>item<span style="color:#f92672">.</span><span style="color:#a6e22e">getItemId</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">action_settings</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">onOptionsItemSelected</span><span style="color:#f92672">(</span>item<span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>

    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PlaceholderFragment</span> <span style="color:#66d9ef">extends</span> Fragment <span style="color:#f92672">{</span>
        <span style="color:#a6e22e">@Override</span> <span style="color:#75715e">// android.support.v4.app.Fragment
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">public</span> View <span style="color:#a6e22e">onCreateView</span><span style="color:#f92672">(</span>LayoutInflater inflater<span style="color:#f92672">,</span> ViewGroup container<span style="color:#f92672">,</span> Bundle savedInstanceState<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> inflater<span style="color:#f92672">.</span><span style="color:#a6e22e">inflate</span><span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">layout</span><span style="color:#f92672">.</span><span style="color:#a6e22e">fragment_main</span><span style="color:#f92672">,</span> container<span style="color:#f92672">,</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>进行简单的代码审计，可以确定核心代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>flag <span style="color:#f92672">==</span> 1<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dd2940c04462b4dd7c450528835cca15&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">toCharArray</span><span style="color:#f92672">();</span>
    x<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span>3<span style="color:#f92672">])</span> <span style="color:#f92672">-</span> 50<span style="color:#f92672">);</span>
    x<span style="color:#f92672">[</span>4<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span>5<span style="color:#f92672">])</span> <span style="color:#f92672">-</span> 48<span style="color:#f92672">);</span>
    x<span style="color:#f92672">[</span>30<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span>31<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span>9<span style="color:#f92672">])</span> <span style="color:#f92672">-</span> 48<span style="color:#f92672">);</span>
    x<span style="color:#f92672">[</span>14<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span>27<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span>28<span style="color:#f92672">])</span> <span style="color:#f92672">-</span> 97<span style="color:#f92672">);</span>
    <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> 16<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
        <span style="color:#66d9ef">char</span> a <span style="color:#f92672">=</span> x<span style="color:#f92672">[</span>31 <span style="color:#f92672">-</span> i<span style="color:#f92672">];</span>
        x<span style="color:#f92672">[</span>31 <span style="color:#f92672">-</span> i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> x<span style="color:#f92672">[</span>i<span style="color:#f92672">];</span>
        x<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> a<span style="color:#f92672">;</span>
    <span style="color:#f92672">}</span>
    textview<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;flag{&#34;</span> <span style="color:#f92672">+</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>x<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;}&#34;</span><span style="color:#f92672">);</span>
    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>写一个Java注册器，把flag注册出来</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> re<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Register</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
	<span style="color:#f92672">{</span>
		<span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dd2940c04462b4dd7c450528835cca15&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">toCharArray</span><span style="color:#f92672">();</span>
	    x<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span>3<span style="color:#f92672">])</span> <span style="color:#f92672">-</span> 50<span style="color:#f92672">);</span>
	    x<span style="color:#f92672">[</span>4<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span>2<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span>5<span style="color:#f92672">])</span> <span style="color:#f92672">-</span> 48<span style="color:#f92672">);</span>
	    x<span style="color:#f92672">[</span>30<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span>31<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span>9<span style="color:#f92672">])</span> <span style="color:#f92672">-</span> 48<span style="color:#f92672">);</span>
	    x<span style="color:#f92672">[</span>14<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span>27<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span>28<span style="color:#f92672">])</span> <span style="color:#f92672">-</span> 97<span style="color:#f92672">);</span>
	    <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> 16<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
	        <span style="color:#66d9ef">char</span> a <span style="color:#f92672">=</span> x<span style="color:#f92672">[</span>31 <span style="color:#f92672">-</span> i<span style="color:#f92672">];</span>
	        x<span style="color:#f92672">[</span>31 <span style="color:#f92672">-</span> i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> x<span style="color:#f92672">[</span>i<span style="color:#f92672">];</span>
	        x<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> a<span style="color:#f92672">;</span>
	    <span style="color:#f92672">}</span>
	    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;flag{&#34;</span> <span style="color:#f92672">+</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>x<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;}&#34;</span><span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>

<span style="color:#f92672">}</span>
</code></pre></div><p>运行注册器来注册一个flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{59acc538825054c7de4b26440c0999dd}
</code></pre></div><h2 id="0x7-bjdctf2020justre">0x7 [BJDCTF2020]JustRE</h2>
<p>下载下来是一个挺有意思的exe程序</p>
<p><img src="/images/BUUCTF-REVERSE-%5B9-16%5D_writeup/image-20210902121321802.png" alt="image-20210902121321802"></p>
<p>走下流程，首先是查询文件</p>
<p><img src="/images/BUUCTF-REVERSE-%5B9-16%5D_writeup/image-20210902121542969.png" alt="image-20210902121542969"></p>
<p>32位的PE程序，使用IDA pro反汇编通过检索BJD的字符串来定位到核心代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">INT_PTR <span style="color:#66d9ef">__stdcall</span> <span style="color:#a6e22e">DialogFunc</span>(HWND hWnd, UINT a2, WPARAM a3, LPARAM a4)
{
  CHAR String[<span style="color:#ae81ff">100</span>]; <span style="color:#75715e">// [esp+0h] [ebp-64h] BYREF
</span><span style="color:#75715e"></span>
  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">272</span> )
  {
    <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">273</span> )
      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">if</span> ( (_WORD)a3 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> (_WORD)a3 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span> )
    {
      sprintf(String, Format, <span style="color:#f92672">++</span>dword_4099F0);
      <span style="color:#66d9ef">if</span> ( dword_4099F0 <span style="color:#f92672">==</span> <span style="color:#ae81ff">19999</span> )
      {
        sprintf(String, <span style="color:#e6db74">&#34; BJD{%d%d2069a45792d233ac}&#34;</span>, <span style="color:#ae81ff">19999</span>, <span style="color:#ae81ff">0</span>);
        SetWindowTextA(hWnd, String);
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
      }
      SetWindowTextA(hWnd, String);
      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
    }
    EndDialog(hWnd, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)a3);
  }
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
}
</code></pre></div><p>发现核心代码中隐藏着flag的信息，得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">BJD{1999902069a45792d233ac}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>XCTF REVERSE novice_writeup</title>
            <link>https://zcodetea.github.io/posts/xctf-reverse-novice_writeup/</link>
            <pubDate>Thu, 14 Oct 2021 13:27:13 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/xctf-reverse-novice_writeup/</guid>
            <description>XCTF-REVERSE-新手区 writeup 来XCTF平台，做做Re练练手
XCTF平台有十道题目：
十道题目应该是涵盖了逆向方向的主要内容，带着好奇心去探索逆向的世界吧
0x0 insanity 往往第一道题目都不是很难，下载附件，看看是个什么东西。
文件没有扩展名，可能是个ELF文件，走个流程
首先查一下壳
果然是ELF格式的文件，不过不是x64格式的ELF文件
使用IDA pro打开文件，查看主函数的反编译代码
int __cdecl main(int argc, const char **argv, const char **envp) { unsigned int v3; // eax  unsigned int v4; // eax  puts(&amp;#34;Reticulating splines, please wait..&amp;#34;); sleep(5u); v3 = time(0); srand(v3); v4 = rand(); puts((&amp;amp;strs)[v4 % 0xA]); return 0; } 跟进strs的数据
继续跟进strs的数据
get到了flag
9447{This_is_a_flag} 0x1 python-trade 看题目应该是一个Python的逆向题目
文件是一个pyc文件应该是Python的逆向文件，可以使用Python的反编译工具进行反编译
可以使用 uncompyle 进行反编译：
# uncompyle6 version 3.7.4 # Python bytecode 2.</description>
            <content type="html"><![CDATA[<h1 id="xctf-reverse-新手区-writeup">XCTF-REVERSE-新手区 writeup</h1>
<p>来XCTF平台，做做Re练练手</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902134256690.png" alt="image-20210902134256690"></p>
<p>XCTF平台有十道题目：</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902134352010.png" alt="image-20210902134352010"></p>
<p>十道题目应该是涵盖了逆向方向的主要内容，带着好奇心去探索逆向的世界吧</p>
<h2 id="0x0-insanity">0x0 insanity</h2>
<p>往往第一道题目都不是很难，下载附件，看看是个什么东西。</p>
<p>文件没有扩展名，可能是个ELF文件，走个流程</p>
<p>首先查一下壳</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902135713948.png" alt="image-20210902135713948"></p>
<p>果然是ELF格式的文件，不过不是x64格式的ELF文件</p>
<p>使用IDA pro打开文件，查看主函数的反编译代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>
  puts(<span style="color:#e6db74">&#34;Reticulating splines, please wait..&#34;</span>);
  sleep(<span style="color:#ae81ff">5u</span>);
  v3 <span style="color:#f92672">=</span> time(<span style="color:#ae81ff">0</span>);
  srand(v3);
  v4 <span style="color:#f92672">=</span> rand();
  puts((<span style="color:#f92672">&amp;</span>strs)[v4 <span style="color:#f92672">%</span> <span style="color:#ae81ff">0xA</span>]);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>跟进strs的数据</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902145813017.png" alt="image-20210902145813017"></p>
<p>继续跟进strs的数据</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902145852653.png" alt="image-20210902145852653"></p>
<p>get到了flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">9447{This_is_a_flag}
</code></pre></div><h2 id="0x1-python-trade">0x1 python-trade</h2>
<p>看题目应该是一个Python的逆向题目</p>
<p>文件是一个pyc文件应该是Python的逆向文件，可以使用Python的反编译工具进行反编译</p>
<p>可以使用 <code>uncompyle</code> 进行反编译：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># uncompyle6 version 3.7.4</span>
<span style="color:#75715e"># Python bytecode 2.7 (62211)</span>
<span style="color:#75715e"># Decompiled from: Python 3.8.8 (default, Apr 13 2021, 15:08:03) [MSC v.1916 64 bit (AMD64)]</span>
<span style="color:#75715e"># Embedded file name: 1.py</span>
<span style="color:#75715e"># Compiled at: 2017-06-03 10:20:43</span>
<span style="color:#f92672">import</span> base64

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode</span>(message):
    s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> message:
        x <span style="color:#f92672">=</span> ord(i) <span style="color:#f92672">^</span> <span style="color:#ae81ff">32</span>
        x <span style="color:#f92672">=</span> x <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>
        s <span style="color:#f92672">+=</span> chr(x)

    <span style="color:#66d9ef">return</span> base64<span style="color:#f92672">.</span>b64encode(s)


correct <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;XlNkVmtUI1MgXWBZXCFeKY+AaXNt&#39;</span>
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
print <span style="color:#e6db74">&#39;Input flag:&#39;</span>
flag <span style="color:#f92672">=</span> raw_input()
<span style="color:#66d9ef">if</span> encode(flag) <span style="color:#f92672">==</span> correct:
    print <span style="color:#e6db74">&#39;correct&#39;</span>
<span style="color:#66d9ef">else</span>:
    print <span style="color:#e6db74">&#39;wrong&#39;</span>
<span style="color:#75715e"># okay decompiling .\test.pyc</span>
</code></pre></div><p>应该是需要逆这个加密算法的进行求解，密码手的老本行了，写个求解脚本:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">Redecode</span>(cipher):
    message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
    cipher <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(cipher)<span style="color:#f92672">.</span>decode()
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
        x <span style="color:#f92672">=</span> ord(i) <span style="color:#f92672">-</span> <span style="color:#ae81ff">16</span>
        x <span style="color:#f92672">=</span> x <span style="color:#f92672">^</span> <span style="color:#ae81ff">32</span>
        message <span style="color:#f92672">+=</span> chr(x)

    <span style="color:#66d9ef">return</span> message

cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;XlNkVmtUI1MgXWBZXCFeKY+AaXNt&#39;</span>

flag <span style="color:#f92672">=</span> Redecode(cipher)
print(flag)
</code></pre></div><p>在python2环境下运行脚本，就能得到flag了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">nctf{d3c0mpil1n9_PyC}
</code></pre></div><h2 id="0x2-re1">0x2 re1</h2>
<p>附件有报毒，麻了</p>
<p>走一下流程，先查文件信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902152537015.png" alt="image-20210902152537015"></p>
<p>32位的可执行程序，程序没有壳，丢进IDA pro进行静态分析</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__m128i</span> v5; <span style="color:#75715e">// [esp+0h] [ebp-44h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v6[<span style="color:#ae81ff">8</span>]; <span style="color:#75715e">// [esp+10h] [ebp-34h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// [esp+18h] [ebp-2Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int16</span> v8; <span style="color:#75715e">// [esp+1Ch] [ebp-28h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v9[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [esp+20h] [ebp-24h] BYREF
</span><span style="color:#75715e"></span>
  v5 <span style="color:#f92672">=</span> _mm_loadu_si128((<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">__m128i</span> <span style="color:#f92672">*</span>)<span style="color:#e6db74">&#34;DUTCTF{We1c0met0DUTCTF}&#34;</span>);
  v7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  strcpy(v6, <span style="color:#e6db74">&#34;DUTCTF}&#34;</span>);
  v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  printf(<span style="color:#e6db74">&#34;欢迎来到DUTCTF呦</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  printf(<span style="color:#e6db74">&#34;这是一道很可爱很简单的逆向题呦</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  printf(<span style="color:#e6db74">&#34;输入flag吧:&#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%s&#34;</span>, v9);
  v3 <span style="color:#f92672">=</span> strcmp(v5.m128i_i8, v9);
  <span style="color:#66d9ef">if</span> ( v3 )
    v3 <span style="color:#f92672">=</span> v3 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">?</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>;
  <span style="color:#66d9ef">if</span> ( v3 )
    printf(aFlag_0);
  <span style="color:#66d9ef">else</span>
    printf(aFlagGet);
  system(<span style="color:#e6db74">&#34;pause&#34;</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>首先，我们需要知道具体的逻辑判断形式，逻辑判断是以什么形式进行判断的，找到逻辑判断语句</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">if</span> ( v3 )
    v3 <span style="color:#f92672">=</span> v3 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">?</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>;
<span style="color:#66d9ef">if</span> ( v3 )
    printf(aFlag_0);
<span style="color:#66d9ef">else</span>
    <span style="color:#a6e22e">printf</span>(aFlagGet);
</code></pre></div><p><code>v3</code> 数值不为0的情况下会先执行第一个 <code>if</code> 语句，将不正确的v3值进行转换</p>
<p>然后再进行一个<code>if - else </code> 的逻辑语句，判断<code>v3</code>的数值，如果<code>v3</code>的数值是等于<code>0</code>的，那么我们输入的flag就是正确的</p>
<p>那么，<code>v3</code> 是什么东西？</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">v3 <span style="color:#f92672">=</span> strcmp(v5.m128i_i8, v9);
</code></pre></div><p>是一个比较数值，如果 <code>v5.m128i_i8</code> 与 <code>v9</code> 相等，那么<code>v3</code> 的数值就等于0了，逻辑现在搞通了，下面跟进数据：</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902155119211.png" alt="image-20210902155119211"></p>
<p>这段数据应该就是 <code>v5 </code>的数据了，将数据转换成字符串</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902155219566.png" alt="image-20210902155219566"></p>
<p>成功得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">DUTCTF{We1c0met0DUTCTF}
</code></pre></div><h2 id="0x3-game">0x3 game</h2>
<p>应该是个游戏，感觉还是挺有意思的</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902160124008.png" alt="image-20210902160124008"></p>
<p>果然是一个游戏，还蛮有意思的，不过，还是要走下流程查一下信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902160325396.png" alt="image-20210902160325396"></p>
<p>32位程序，没有壳，先丢进IDA pro康一康</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main_0</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+DCh] [ebp-20h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// [esp+F4h] [ebp-8h] BYREF
</span><span style="color:#75715e"></span>
  sub_45A7BE(<span style="color:#f92672">&amp;</span>unk_50B110);
  sub_45A7BE(<span style="color:#f92672">&amp;</span>unk_50B158);
  sub_45A7BE(<span style="color:#f92672">&amp;</span>unk_50B1A0);
  sub_45A7BE(<span style="color:#f92672">&amp;</span>unk_50B1E8);
  sub_45A7BE(<span style="color:#f92672">&amp;</span>unk_50B230);
  sub_45A7BE(<span style="color:#f92672">&amp;</span>unk_50B278);
  sub_45A7BE(<span style="color:#f92672">&amp;</span>unk_50B2C0);
  sub_45A7BE(<span style="color:#f92672">&amp;</span>unk_50B308);
  sub_45A7BE(<span style="color:#e6db74">&#34;二                                                     |</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  sub_45A7BE(<span style="color:#e6db74">&#34;|              by 0x61                                 |</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  sub_45A7BE(<span style="color:#e6db74">&#34;|                                                      |</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  sub_45A7BE(<span style="color:#e6db74">&#34;|------------------------------------------------------|</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  sub_45A7BE(
    <span style="color:#e6db74">&#34;Play a game</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
    <span style="color:#e6db74">&#34;The n is the serial number of the lamp,and m is the state of the lamp</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
    <span style="color:#e6db74">&#34;If m of the Nth lamp is 1,it&#39;s on ,if not it&#39;s off</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
    <span style="color:#e6db74">&#34;At first all the lights were closed</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  sub_45A7BE(<span style="color:#e6db74">&#34;Now you can input n to change its state</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  sub_45A7BE(
    <span style="color:#e6db74">&#34;But you should pay attention to one thing,if you change the state of the Nth lamp,the state of (N-1)th and (N+1)th w&#34;</span>
    <span style="color:#e6db74">&#34;ill be changed too</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  sub_45A7BE(<span style="color:#e6db74">&#34;When all lamps are on,flag will appear</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  sub_45A7BE(<span style="color:#e6db74">&#34;Now,input n </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
  {
    <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
    {
      sub_45A7BE(<span style="color:#e6db74">&#34;input n,n(1-8)</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
      sub_459418();
      sub_45A7BE(<span style="color:#e6db74">&#34;n=&#34;</span>);
      sub_4596D4(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v5);
      sub_45A7BE(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
      <span style="color:#66d9ef">if</span> ( v5 <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> v5 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">8</span> )
        <span style="color:#66d9ef">break</span>;
      sub_45A7BE(<span style="color:#e6db74">&#34;sorry,n error,try again</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    }
    <span style="color:#66d9ef">if</span> ( v5 )
    {
      sub_4576D6(v5 <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
    }
    <span style="color:#66d9ef">else</span>
    {
      <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">8</span>; <span style="color:#f92672">++</span>i )
      {
        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)i <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">9</span> )
          sub_458919();
        byte_532E28[i] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      }
    }
    sub_4581B7(<span style="color:#e6db74">&#34;CLS&#34;</span>);
    sub_458054();
    <span style="color:#66d9ef">if</span> ( byte_532E28[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
    {
      sub_457AB4();
    }
  }
}
</code></pre></div><p>寻找到核心代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">if</span> ( byte_532E28[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
    {
      sub_457AB4();
    }
</code></pre></div><p>可以知道，可以确定是 <code>sub_457AB4();</code> 函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sub_45E940</span>()
{
  <span style="color:#66d9ef">char</span> v1; <span style="color:#75715e">// [esp+0h] [ebp-164h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+D0h] [ebp-94h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v3[<span style="color:#ae81ff">22</span>]; <span style="color:#75715e">// [esp+DCh] [ebp-88h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v4[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [esp+F2h] [ebp-72h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5[<span style="color:#ae81ff">4</span>]; <span style="color:#75715e">// [esp+112h] [ebp-52h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v6[<span style="color:#ae81ff">64</span>]; <span style="color:#75715e">// [esp+120h] [ebp-44h]
</span><span style="color:#75715e"></span>
  sub_45A7BE((<span style="color:#66d9ef">int</span>)<span style="color:#e6db74">&#34;done!!! the flag is &#34;</span>, v1);
  v6[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>;
  v6[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">64</span>;
  v6[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">98</span>;
  v6[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
  v6[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
  v6[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
  v6[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>;
  v6[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
  v6[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>;
  v6[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">48</span>;
  v6[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">49</span>;
  v6[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">65</span>;
  v6[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
  v6[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">12</span>;
  v6[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">48</span>;
  v6[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">65</span>;
  v6[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">31</span>;
  v6[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">78</span>;
  v6[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">62</span>;
  v6[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
  v6[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">49</span>;
  v6[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
  v6[<span style="color:#ae81ff">22</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
  v6[<span style="color:#ae81ff">23</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">57</span>;
  v6[<span style="color:#ae81ff">24</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">96</span>;
  v6[<span style="color:#ae81ff">25</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
  v6[<span style="color:#ae81ff">26</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">21</span>;
  v6[<span style="color:#ae81ff">27</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">9</span>;
  v6[<span style="color:#ae81ff">28</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
  v6[<span style="color:#ae81ff">29</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">62</span>;
  v6[<span style="color:#ae81ff">30</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
  v6[<span style="color:#ae81ff">31</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
  v6[<span style="color:#ae81ff">32</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
  v6[<span style="color:#ae81ff">33</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
  v6[<span style="color:#ae81ff">34</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
  v6[<span style="color:#ae81ff">35</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
  v6[<span style="color:#ae81ff">36</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">44</span>;
  v6[<span style="color:#ae81ff">37</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">65</span>;
  v6[<span style="color:#ae81ff">38</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">78</span>;
  v6[<span style="color:#ae81ff">39</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
  v6[<span style="color:#ae81ff">40</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>;
  v6[<span style="color:#ae81ff">41</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">97</span>;
  v6[<span style="color:#ae81ff">42</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">54</span>;
  v6[<span style="color:#ae81ff">43</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>;
  v6[<span style="color:#ae81ff">44</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">44</span>;
  v6[<span style="color:#ae81ff">45</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">52</span>;
  v6[<span style="color:#ae81ff">46</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
  v6[<span style="color:#ae81ff">47</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">64</span>;
  v6[<span style="color:#ae81ff">48</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">89</span>;
  v6[<span style="color:#ae81ff">49</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">45</span>;
  v6[<span style="color:#ae81ff">50</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
  v6[<span style="color:#ae81ff">51</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">65</span>;
  v6[<span style="color:#ae81ff">52</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">15</span>;
  v6[<span style="color:#ae81ff">53</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">34</span>;
  v6[<span style="color:#ae81ff">54</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>;
  v6[<span style="color:#ae81ff">55</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>;
  v6[<span style="color:#ae81ff">56</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  v3[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">123</span>;
  v3[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
  v3[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>;
  v3[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">98</span>;
  v3[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">119</span>;
  v3[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">108</span>;
  v3[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">65</span>;
  v3[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">41</span>;
  v3[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">124</span>;
  v3[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">80</span>;
  v3[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">125</span>;
  v3[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">38</span>;
  v3[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">124</span>;
  v3[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">111</span>;
  v3[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">74</span>;
  v3[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">49</span>;
  v3[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">83</span>;
  v3[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">108</span>;
  v3[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">94</span>;
  v3[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">108</span>;
  v3[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">84</span>;
  v3[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>;
  qmemcpy(v4, <span style="color:#e6db74">&#34;`S,yhn _uec{&#34;</span>, <span style="color:#ae81ff">12</span>);
  v4[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">127</span>;
  v4[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">119</span>;
  v4[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">96</span>;
  v4[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">48</span>;
  v4[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">107</span>;
  v4[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">71</span>;
  v4[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">92</span>;
  v4[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">29</span>;
  v4[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">81</span>;
  v4[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">107</span>;
  v4[<span style="color:#ae81ff">22</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
  v4[<span style="color:#ae81ff">23</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">85</span>;
  v4[<span style="color:#ae81ff">24</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">64</span>;
  v4[<span style="color:#ae81ff">25</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">12</span>;
  v4[<span style="color:#ae81ff">26</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">43</span>;
  v4[<span style="color:#ae81ff">27</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">76</span>;
  v4[<span style="color:#ae81ff">28</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">86</span>;
  v4[<span style="color:#ae81ff">29</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">13</span>;
  v4[<span style="color:#ae81ff">30</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">114</span>;
  v4[<span style="color:#ae81ff">31</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
  strcpy(v5, <span style="color:#e6db74">&#34;u~&#34;</span>);
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">56</span>; <span style="color:#f92672">++</span>i )
  {
    v3[i] <span style="color:#f92672">^=</span> v6[i];
    v3[i] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">0x13u</span>;
  }
  <span style="color:#66d9ef">return</span> sub_45A7BE((<span style="color:#66d9ef">int</span>)<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, (<span style="color:#66d9ef">char</span>)v3);
}
</code></pre></div><p>基本上可以确定在这里输出flag，基本逻辑应该可以清晰的知道</p>
<p>下面使用Ollydbg进行动态调试，调试出来flag</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909174908510.png" alt="image-20210909174908510"></p>
<p>先使用F8进行单步调试，确定关键函数位置</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909195648745.png" alt="image-20210909195648745"></p>
<p>F7进入函数的具体执行过程，进行字符串检索</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909195755383.png" alt="image-20210909195755383"></p>
<p>找到输入的关键位置，然后移动到关键位置</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909195839072.png" alt="image-20210909195839072"></p>
<p>根据已知的逻辑循环，修改逻辑循环</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909200656065.png" alt="image-20210909200656065"></p>
<p>修改这个关键性的跳转代码进行跳转修改，将跳转修改为call那个位置</p>
<p>修改为：</p>
<pre tabindex="0"><code class="language-assembly" data-lang="assembly">jnz short 00D2F66C
</code></pre><p>然后运行修改过汇编的程序</p>
<p>尝试输入几个参数就能获取到flag了</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909201014405.png" alt="image-20210909201014405"></p>
<p>得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">zsctf{T9is_tOpic_1s_v5ry_int7resting_b6t_others_are_n0t}
</code></pre></div><h2 id="0x4-hello-ctf">0x4 Hello, CTF</h2>
<p>首先查一下程序信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909201418156.png" alt="image-20210909201418156"></p>
<p>32位没有壳的程序</p>
<p>使用IDA pro的看一下程序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// ebx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v4; <span style="color:#75715e">// al
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// [esp+0h] [ebp-70h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// [esp+0h] [ebp-70h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Buffer[<span style="color:#ae81ff">2</span>]; <span style="color:#75715e">// [esp+12h] [ebp-5Eh] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v9[<span style="color:#ae81ff">20</span>]; <span style="color:#75715e">// [esp+14h] [ebp-5Ch] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v10[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [esp+28h] [ebp-48h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int16</span> v11; <span style="color:#75715e">// [esp+48h] [ebp-28h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v12; <span style="color:#75715e">// [esp+4Ah] [ebp-26h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v13[<span style="color:#ae81ff">36</span>]; <span style="color:#75715e">// [esp+4Ch] [ebp-24h] BYREF
</span><span style="color:#75715e"></span>
  strcpy(v13, <span style="color:#e6db74">&#34;437261636b4d654a757374466f7246756e&#34;</span>);
  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
  {
    memset(v10, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(v10));
    v11 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    v12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    sub_40134B(aPleaseInputYou, v6);
    scanf(<span style="color:#e6db74">&#34;%s&#34;</span>, v9);
    <span style="color:#66d9ef">if</span> ( strlen(v9) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0x11</span> )
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">17</span>; <span style="color:#f92672">++</span>i )
    {
      v4 <span style="color:#f92672">=</span> v9[i];
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>v4 )
        <span style="color:#66d9ef">break</span>;
      sprintf(Buffer, <span style="color:#e6db74">&#34;%x&#34;</span>, v4);
      strcat(v10, Buffer);
    }
    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>strcmp(v10, v13) )
      sub_40134B(aSuccess, v7);
    <span style="color:#66d9ef">else</span>
      sub_40134B(aWrong, v7);
  }
  sub_40134B(aWrong, v7);
  result <span style="color:#f92672">=</span> <span style="color:#f92672">--</span>Stream._cnt;
  <span style="color:#66d9ef">if</span> ( Stream._cnt <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> )
    <span style="color:#66d9ef">return</span> _filbuf(<span style="color:#f92672">&amp;</span>Stream);
  <span style="color:#f92672">++</span>Stream._ptr;
  <span style="color:#66d9ef">return</span> result;
}
</code></pre></div><p>代码非常清晰，应该可以明确v13的值和flag应该是一致的</p>
<p>v13应该是Hex编码的字符串，进行解码就得到flag了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">CrackMeJustForFun
</code></pre></div><h2 id="0x5-open-source">0x5 open-source</h2>
<p>下载附件，源代码审计，看看源代码内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argv[]) {
    <span style="color:#66d9ef">if</span> (argc <span style="color:#f92672">!=</span> <span style="color:#ae81ff">4</span>) {
    	printf(<span style="color:#e6db74">&#34;what?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    	exit(<span style="color:#ae81ff">1</span>);
    }

    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> first <span style="color:#f92672">=</span> atoi(argv[<span style="color:#ae81ff">1</span>]);
    <span style="color:#66d9ef">if</span> (first <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xcafe</span>) {
    	printf(<span style="color:#e6db74">&#34;you are wrong, sorry.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    	exit(<span style="color:#ae81ff">2</span>);
    }

    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> second <span style="color:#f92672">=</span> atoi(argv[<span style="color:#ae81ff">2</span>]);
    <span style="color:#66d9ef">if</span> (second <span style="color:#f92672">%</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">||</span> second <span style="color:#f92672">%</span> <span style="color:#ae81ff">17</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">8</span>) {
    	printf(<span style="color:#e6db74">&#34;ha, you won&#39;t get it!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    	exit(<span style="color:#ae81ff">3</span>);
    }

    <span style="color:#66d9ef">if</span> (strcmp(<span style="color:#e6db74">&#34;h4cky0u&#34;</span>, argv[<span style="color:#ae81ff">3</span>])) {
    	printf(<span style="color:#e6db74">&#34;so close, dude!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    	exit(<span style="color:#ae81ff">4</span>);
    }

    printf(<span style="color:#e6db74">&#34;Brr wrrr grr</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);

    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> hash <span style="color:#f92672">=</span> first <span style="color:#f92672">*</span> <span style="color:#ae81ff">31337</span> <span style="color:#f92672">+</span> (second <span style="color:#f92672">%</span> <span style="color:#ae81ff">17</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> strlen(argv[<span style="color:#ae81ff">3</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1615810207</span>;

    printf(<span style="color:#e6db74">&#34;Get your key: &#34;</span>);
    printf(<span style="color:#e6db74">&#34;%x</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, hash);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>根据源码进行求解，其实也就是解个方程</p>
<p>可以写个C程序直接求解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> first <span style="color:#f92672">=</span>  <span style="color:#ae81ff">0xcafe</span>;

    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> second <span style="color:#f92672">=</span> <span style="color:#ae81ff">25</span>;
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> Third <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;h4cky0u&#34;</span>;

    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> hash <span style="color:#f92672">=</span> first <span style="color:#f92672">*</span> <span style="color:#ae81ff">31337</span> <span style="color:#f92672">+</span> (second <span style="color:#f92672">%</span> <span style="color:#ae81ff">17</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> strlen(Third) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1615810207</span>;

    printf(<span style="color:#e6db74">&#34;Get your key: &#34;</span>);
    printf(<span style="color:#e6db74">&#34;%x</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, hash);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>编译并运行程序就能得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Get your key: c0ffee
</code></pre></div><h2 id="0x6-simple-unpack">0x6 simple-unpack</h2>
<p>看题目，应该是一个有壳的程序</p>
<p>就正常走一下流程首先先要看看程序的信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910132745520.png" alt="image-20210910132745520"></p>
<p>加壳的64位的程序，首先使用upx脱一下壳，然后使用x64 IDA pro查看</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910133500403.png" alt="image-20210910133500403"></p>
<p>直接就能看到flag信息数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{Upx_1s_n0t_a_d3liv3r_c0mp4ny}
</code></pre></div><h2 id="0x7-logmein">0x7 logmein</h2>
<p>查一下程序信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910133947331.png" alt="image-20210910133947331"></p>
<p>没有壳，64位的Linux程序</p>
<p>直接进行x64 ida pro静态调试</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#66d9ef">__fastcall</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> a1, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a2, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a3)
{
  size_t v3; <span style="color:#75715e">// rsi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+3Ch] [rbp-54h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">36</span>]; <span style="color:#75715e">// [rsp+40h] [rbp-50h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// [rsp+64h] [rbp-2Ch]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v7; <span style="color:#75715e">// [rsp+68h] [rbp-28h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v8[<span style="color:#ae81ff">28</span>]; <span style="color:#75715e">// [rsp+70h] [rbp-20h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// [rsp+8Ch] [rbp-4h]
</span><span style="color:#75715e"></span>
  v9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  strcpy(v8, <span style="color:#e6db74">&#34;:</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">AL_RT^L*.?+6/46&#34;</span>);
  v7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x65626D61726168LL</span>;
  v6 <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>;
  printf(<span style="color:#e6db74">&#34;Welcome to the RC3 secure password guesser.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  printf(<span style="color:#e6db74">&#34;To continue, you must enter the correct password.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  printf(<span style="color:#e6db74">&#34;Enter your guess: &#34;</span>);
  __isoc99_scanf(<span style="color:#e6db74">&#34;%32s&#34;</span>, s);
  v3 <span style="color:#f92672">=</span> strlen(s);
  <span style="color:#66d9ef">if</span> ( v3 <span style="color:#f92672">&lt;</span> strlen(v8) )
    sub_4007C0();
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> strlen(s); <span style="color:#f92672">++</span>i )
  {
    <span style="color:#66d9ef">if</span> ( i <span style="color:#f92672">&gt;=</span> strlen(v8) )
      sub_4007C0();
    <span style="color:#66d9ef">if</span> ( s[i] <span style="color:#f92672">!=</span> (<span style="color:#66d9ef">char</span>)(<span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v7 <span style="color:#f92672">+</span> i <span style="color:#f92672">%</span> v6) <span style="color:#f92672">^</span> v8[i]) )
      sub_4007C0();
  }
  sub_4007F0();
}
</code></pre></div><p>应该是对算法进行逆向来得到相应的flag</p>
<p>关键的数据是v7和v8，针对这两个数据写个C程序进行逆向算法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
        <span style="color:#66d9ef">char</span> v8[<span style="color:#ae81ff">28</span>];
        strcpy(v8, <span style="color:#e6db74">&#34;:</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">AL_RT^L*.?+6/46&#34;</span>);
        <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v7 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;harambe&#34;</span>;
        <span style="color:#66d9ef">int</span> v6 <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>;
        <span style="color:#66d9ef">char</span> s[strlen(v8)];
        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> strlen(v8); <span style="color:#f92672">++</span>i )
        {
                s[i] <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(v7<span style="color:#f92672">+</span>i <span style="color:#f92672">%</span> v6) <span style="color:#f92672">^</span> v8[i];
        }
        printf(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,s);
}
</code></pre></div><p>编译并运行得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">RC3-2016-XORISGUD
</code></pre></div><h2 id="0x8-no-string-attached">0x8 no-string-attached</h2>
<p>查一下文件的信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910153107869.png" alt="image-20210910153107869"></p>
<p>32位文件，没有壳，丢进到IDA pro查看</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  setlocale(<span style="color:#ae81ff">6</span>, <span style="color:#f92672">&amp;</span>locale);
  banner();
  prompt_authentication();
  authenticate();
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>进行分析，确定flag应该是在 <code>authenticate()</code>函数中</p>
<p>跟进到 <code>authenticate()</code>函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">authenticate</span>()
{
  wchar_t ws[<span style="color:#ae81ff">8192</span>]; <span style="color:#75715e">// [esp+1Ch] [ebp-800Ch] BYREF
</span><span style="color:#75715e"></span>  wchar_t <span style="color:#f92672">*</span>s2; <span style="color:#75715e">// [esp+801Ch] [ebp-Ch]
</span><span style="color:#75715e"></span>
  s2 <span style="color:#f92672">=</span> (wchar_t <span style="color:#f92672">*</span>)decrypt((wchar_t <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>s, (wchar_t <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>dword_8048A90);
  <span style="color:#66d9ef">if</span> ( fgetws(ws, <span style="color:#ae81ff">0x2000</span>, stdin) )
  {
    ws[wcslen(ws) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>wcscmp(ws, s2) )
      wprintf(<span style="color:#f92672">&amp;</span>unk_8048B44);
    <span style="color:#66d9ef">else</span>
      wprintf(<span style="color:#f92672">&amp;</span>unk_8048BA4);
  }
  free(s2);
}
</code></pre></div><p>关键数据应该是在s2中，调用了decrypt函数，看一下这个函数的汇编代码</p>
<pre tabindex="0"><code class="language-assembly" data-lang="assembly">ws= dword ptr -800Ch
s2= dword ptr -0Ch

; __unwind {
push    ebp
mov     ebp, esp
sub     esp, 8028h
mov     dword ptr [esp+4], offset dword_8048A90 ; wchar_t *
mov     dword ptr [esp], offset s ; s
call    decrypt
mov     [ebp+s2], eax
mov     eax, ds:stdin@@GLIBC_2_0
mov     [esp+8], eax    ; stream
mov     dword ptr [esp+4], 2000h ; n
lea     eax, [ebp+ws]
mov     [esp], eax      ; ws
call    _fgetws
test    eax, eax
jz      short loc_804879C
</code></pre><p>根据汇编代码，应该可以清晰的知道，flag数据应该是存储在eax寄存器中了</p>
<p>使用gdb动态调试程序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">gdb Re_demo
</code></pre></div><p>然后设置断点，根据刚刚了解到的信息，flag的数据应该是在decrypt函数中，设置断点</p>
<pre tabindex="0"><code class="language-gdb" data-lang="gdb">b decrypt
</code></pre><p>然后运行程序到断点</p>
<pre tabindex="0"><code class="language-gdb" data-lang="gdb">r
</code></pre><p>然后单步执行</p>
<pre tabindex="0"><code class="language-gdb" data-lang="gdb">n
</code></pre><p>查看寄存器</p>
<pre tabindex="0"><code class="language-gdb" data-lang="gdb">i r
</code></pre><p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910155818798.png" alt="image-20210910155818798"></p>
<p>然后查看eax寄存器存储的数据</p>
<pre tabindex="0"><code class="language-gdb" data-lang="gdb">x/sw $eax
</code></pre><p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910155914675.png" alt="image-20210910155914675"></p>
<p>成功拿到flag数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">9447{you_are_an_international_mystery}
</code></pre></div><h2 id="0x9-getit">0x9 getit</h2>
<p>基本流程，查看程序信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910160228522.png" alt="image-20210910160228522"></p>
<p>64位无壳的ELF可执行程序</p>
<p>先丢进x64 IDA pro看一看</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">char</span> v3; <span style="color:#75715e">// al
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+0h] [rbp-40h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> j; <span style="color:#75715e">// [rsp+4h] [rbp-3Ch]
</span><span style="color:#75715e"></span>  FILE <span style="color:#f92672">*</span>stream; <span style="color:#75715e">// [rsp+8h] [rbp-38h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> filename[<span style="color:#ae81ff">24</span>]; <span style="color:#75715e">// [rsp+10h] [rbp-30h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v9; <span style="color:#75715e">// [rsp+28h] [rbp-18h]
</span><span style="color:#75715e"></span>
  v9 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> strlen(s); <span style="color:#f92672">++</span>i )
  {
    <span style="color:#66d9ef">if</span> ( (i <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> )
      v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">else</span>
      v3 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
    <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>t <span style="color:#f92672">+</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">=</span> s[i] <span style="color:#f92672">+</span> v3;
  }
  strcpy(filename, <span style="color:#e6db74">&#34;/tmp/flag.txt&#34;</span>);
  stream <span style="color:#f92672">=</span> fopen(filename, <span style="color:#e6db74">&#34;w&#34;</span>);
  fprintf(stream, <span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, u);
  <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> strlen(<span style="color:#f92672">&amp;</span>t); <span style="color:#f92672">++</span>j )
  {
    fseek(stream, p[j], <span style="color:#ae81ff">0</span>);
    fputc(<span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>t <span style="color:#f92672">+</span> p[j]), stream);
    fseek(stream, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0</span>);
    fprintf(stream, <span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, u);
  }
  fclose(stream);
  remove(filename);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>应该是一个文件写入的程序，打开一个文件并进行写入</p>
<p>对程序进行分析应该可以看出三个部分</p>
<ol>
<li>初始化变量</li>
<li>生成flag数据</li>
<li>写入flag数据</li>
</ol>
<p>查看一下静态数据：</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210911072552068.png" alt="image-20210911072552068"></p>
<p>根据静态数据和对代码分析的结果，写一个flag生成器：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
        <span style="color:#66d9ef">char</span> t[] <span style="color:#f92672">=</span><span style="color:#e6db74">&#34; harifCTF{????????????????????????????????}&#34;</span>;
        <span style="color:#66d9ef">char</span> s[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;c61b68366edeb7bdce3c6820314b7498&#34;</span>;
        t[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x53</span>;
        <span style="color:#66d9ef">int</span> i, v3;
        <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> strlen(s); <span style="color:#f92672">++</span>i )
        {
                <span style="color:#66d9ef">if</span> ( (i <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> )
                        v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                <span style="color:#66d9ef">else</span>
                        v3 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
                <span style="color:#f92672">*</span>(t<span style="color:#f92672">+</span>i<span style="color:#f92672">+</span><span style="color:#ae81ff">10</span>) <span style="color:#f92672">=</span> s[i]<span style="color:#f92672">+</span>v3;
        }
        printf(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,t);
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>编译并运行flag生成器就可以生成flag啦！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">SharifCTF{b70c59275fcfa8aebf2d5911223c6589}
</code></pre></div><h2 id="0xa-csaw2013reversing2">0xA csaw2013reversing2</h2>
<p>杀软会报毒的程序，首先查一下壳</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210911082611406.png" alt="image-20210911082611406"></p>
<p>32位无壳程序，使用IDA pro查看详细信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// ecx
</span><span style="color:#75715e"></span>  CHAR <span style="color:#f92672">*</span>lpMem; <span style="color:#75715e">// [esp+8h] [ebp-Ch]
</span><span style="color:#75715e"></span>  HANDLE hHeap; <span style="color:#75715e">// [esp+10h] [ebp-4h]
</span><span style="color:#75715e"></span>
  hHeap <span style="color:#f92672">=</span> HeapCreate(<span style="color:#ae81ff">0x40000u</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
  lpMem <span style="color:#f92672">=</span> (CHAR <span style="color:#f92672">*</span>)HeapAlloc(hHeap, <span style="color:#ae81ff">8u</span>, SourceSize <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
  memcpy_s(lpMem, SourceSize, <span style="color:#f92672">&amp;</span>unk_409B10, SourceSize);
  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>sub_40102A() <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span>IsDebuggerPresent() )
  {
    MessageBoxA(<span style="color:#ae81ff">0</span>, lpMem <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;Flag&#34;</span>, <span style="color:#ae81ff">2u</span>);
    HeapFree(hHeap, <span style="color:#ae81ff">0</span>, lpMem);
    HeapDestroy(hHeap);
    ExitProcess(<span style="color:#ae81ff">0</span>);
  }
  __debugbreak();
  sub_401000(v3 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>, lpMem);
  ExitProcess(<span style="color:#ae81ff">0xFFFFFFFF</span>);
}
</code></pre></div><p>都是WIN32api的调用，尝试运行一下程序：</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210911084558336.png" alt="image-20210911084558336"></p>
<p>应该是有些关键的语句没有执行</p>
<p>可以查看下IDA pro的汇编语句</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210913082559422.png" alt="image-20210913082559422"></p>
<p>显然是有一个Flag没有进行相应的跳转，显然有着较大的嫌疑，可以尝试去搞一搞让其跳转</p>
<p>使用OD进行调试修改汇编让其进行跳转，首先定位到Flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">000D1092   .  85C0          test    eax, eax
000D1094      74 23         je      short 000D10B9
000D1096   &gt;  41            inc     ecx
000D1097   .  41            inc     ecx
000D1098   .  41            inc     ecx
000D1099   .  41            inc     ecx
000D109A      CC            int3
000D109B   .  8B55 F4       mov     edx, dword ptr [ebp-C]
000D109E   .  E8 5DFFFFFF   call    000D1000
000D10A3      EB 4A         jmp     short 000D10EF
000D10A5   .  6A 02         push    2                                ; /Style = MB_ABORTRETRYIGNORE|MB_APPLMODAL
000D10A7   .  68 20780D00   push    000D7820                         ; |Title = &#34;Flag&#34;
000D10AC   .  FF75 F4       push    dword ptr [ebp-C]                ; |Text
000D10AF   .  6A 00         push    0                                ; |hOwner = NULL
000D10B1   .  FF15 E4600D00 call    dword ptr [&lt;&amp;USER32.MessageBoxA&gt;&gt;; \MessageBoxA
000D10B7   .  EB 14         jmp     short 000D10CD
000D10B9   &gt;  6A 02         push    2                                ; /Style = MB_ABORTRETRYIGNORE|MB_APPLMODAL
000D10BB   .  68 20780D00   push    000D7820                         ; |Title = &#34;Flag&#34;
000D10C0   .  8B45 F4       mov     eax, dword ptr [ebp-C]           ; |
000D10C3   .  40            inc     eax                              ; |
000D10C4   .  50            push    eax                              ; |Text
000D10C5   .  6A 00         push    0                                ; |hOwner = NULL
000D10C7   .  FF15 E4600D00 call    dword ptr [&lt;&amp;USER32.MessageBoxA&gt;&gt;; \MessageBoxA
</code></pre></div><p>然后定位到if语句对应的汇编语句</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">000D1083   .  E8 A2FFFFFF   call    000D102A
000D1088   .  85C0          test    eax, eax
000D108A   .  75 0A         jnz     short 000D1096
000D108C   .  FF15 14600D00 call    dword ptr [&lt;&amp;KERNEL32.IsDebugger&gt;; [IsDebuggerPresent
000D1092   .  85C0          test    eax, eax
000D1094      74 23         je      short 000D10B9
000D1096   &gt;  41            inc     ecx
000D1097   .  41            inc     ecx
000D1098   .  41            inc     ecx
000D1099   .  41            inc     ecx
000D109A      CC            int3
000D109B   .  8B55 F4       mov     edx, dword ptr [ebp-C]
000D109E   .  E8 5DFFFFFF   call    000D1000
000D10A3      EB 4A         jmp     short 000D10EF
</code></pre></div><p>关键就是对这些汇编语句进行修改来获得flag数据，运行过程中有一个int3断点应该是让程序进行终止的，然后就是je跳转语句和jmp跳转语句了。对je跳转语句进行修改和jmp跳转语句进行修改，设置断点进行调试应该就可以获得flag</p>
<p>修改过的汇编语句</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">000D1083   .  E8 A2FFFFFF   call    000D102A
000D1088   .  85C0          test    eax, eax
000D108A   .  75 0A         jnz     short 000D1096
000D108C   .  FF15 14600D00 call    dword ptr [&lt;&amp;KERNEL32.IsDebugger&gt;; [IsDebuggerPresent
000D1092   .  85C0          test    eax, eax
000D1094      90            nop
000D1095      90            nop
000D1096   &gt;  41            inc     ecx
000D1097   .  41            inc     ecx
000D1098   .  41            inc     ecx
000D1099   .  41            inc     ecx
000D109A      90            nop
000D109B   .  8B55 F4       mov     edx, dword ptr [ebp-C]
000D109E   .  E8 5DFFFFFF   call    000D1000
000D10A3      EB 14         jmp     short 000D10B9
</code></pre></div><p>然后设置断点进行调试，来获得flag</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210913085300812.png" alt="image-20210913085300812"></p>
<p>成功得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{reversing_is_not_that_hard!}
</code></pre></div><h2 id="0xb-maze">0xB maze</h2>
<p>走迷宫的题目，逆向题目中多少有些趣味的题目，来一起走迷宫吧</p>
<p>首先查看一下程序信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210913085802357.png" alt="image-20210913085802357"></p>
<p>64位的程序，使用x64 IDA pro查看一下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> a1, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a2, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a3)
{
  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// rbx
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5; <span style="color:#75715e">// bp
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v6; <span style="color:#75715e">// al
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v7; <span style="color:#75715e">// rdi
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// [rsp+0h] [rbp-28h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v10[<span style="color:#ae81ff">9</span>]; <span style="color:#75715e">// [rsp+4h] [rbp-24h] BYREF
</span><span style="color:#75715e"></span>
  v10[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  v9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  puts(<span style="color:#e6db74">&#34;Input flag:&#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#f92672">&amp;</span>s1);
  <span style="color:#66d9ef">if</span> ( strlen(<span style="color:#f92672">&amp;</span>s1) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">||</span> strncmp(<span style="color:#f92672">&amp;</span>s1, <span style="color:#e6db74">&#34;nctf{&#34;</span>, <span style="color:#ae81ff">5uLL</span>) <span style="color:#f92672">||</span> <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>byte_6010BF <span style="color:#f92672">+</span> <span style="color:#ae81ff">24</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">125</span> )
  {
LABEL_22:
    puts(<span style="color:#e6db74">&#34;Wrong flag!&#34;</span>);
    exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
  }
  v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">5LL</span>;
  <span style="color:#66d9ef">if</span> ( strlen(<span style="color:#f92672">&amp;</span>s1) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span> )
  {
    <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
    {
      v4 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>s1 <span style="color:#f92672">+</span> v3);
      v5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">if</span> ( v4 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">78</span> )
      {
        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">79</span> )
        {
          v6 <span style="color:#f92672">=</span> sub_400650(v10);
          <span style="color:#66d9ef">goto</span> LABEL_14;
        }
        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">111</span> )
        {
          v6 <span style="color:#f92672">=</span> sub_400660(v10);
          <span style="color:#66d9ef">goto</span> LABEL_14;
        }
      }
      <span style="color:#66d9ef">else</span>
      {
        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">46</span> )
        {
          v6 <span style="color:#f92672">=</span> sub_400670(<span style="color:#f92672">&amp;</span>v9);
          <span style="color:#66d9ef">goto</span> LABEL_14;
        }
        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">48</span> )
        {
          v6 <span style="color:#f92672">=</span> sub_400680(<span style="color:#f92672">&amp;</span>v9);
LABEL_14:
          v5 <span style="color:#f92672">=</span> v6;
          <span style="color:#66d9ef">goto</span> LABEL_15;
        }
      }
LABEL_15:
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)sub_400690(asc_601060, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)v10[<span style="color:#ae81ff">0</span>], v9) )
        <span style="color:#66d9ef">goto</span> LABEL_22;
      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">++</span>v3 <span style="color:#f92672">&gt;=</span> strlen(<span style="color:#f92672">&amp;</span>s1) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> )
      {
        <span style="color:#66d9ef">if</span> ( v5 )
          <span style="color:#66d9ef">break</span>;
LABEL_20:
        v7 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Wrong flag!&#34;</span>;
        <span style="color:#66d9ef">goto</span> LABEL_21;
      }
    }
  }
  <span style="color:#66d9ef">if</span> ( asc_601060[<span style="color:#ae81ff">8</span> <span style="color:#f92672">*</span> v9 <span style="color:#f92672">+</span> v10[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">35</span> )
    <span style="color:#66d9ef">goto</span> LABEL_20;
  v7 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Congratulations!&#34;</span>;
LABEL_21:
  puts(v7);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
}
</code></pre></div><p>函数的主要逻辑应该是根据输入的值来进行走迷宫的，走出迷宫即得到flag。程序中肯定存在的有迷宫的地图作为静态数据存储。所以可以尝试查看静态数据：</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210913091057871.png" alt="image-20210913091057871"></p>
<p>果然有一个类似迷宫的数据，查看迷宫数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">  *******   *  **** * ****  * ***  *#  *** *** ***     *********
</code></pre></div><p>需要对代码进行分析来进一步得到迷宫的大致样子</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">if</span> ( strlen(<span style="color:#f92672">&amp;</span>s1) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">||</span> strncmp(<span style="color:#f92672">&amp;</span>s1, <span style="color:#e6db74">&#34;nctf{&#34;</span>, <span style="color:#ae81ff">5uLL</span>) <span style="color:#f92672">||</span> <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>byte_6010BF <span style="color:#f92672">+</span> <span style="color:#ae81ff">24</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">125</span> )
  {
LABEL_22:
    puts(<span style="color:#e6db74">&#34;Wrong flag!&#34;</span>);
    exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
  }
</code></pre></div><p>根据这段代码可以判断出走出迷宫需要18个操作数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
    {
      v4 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>s1 <span style="color:#f92672">+</span> v3);
      v5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">if</span> ( v4 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">78</span> )
      {
        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;O&#39;</span> )
        {
          v6 <span style="color:#f92672">=</span> sub_400650(v10);
          <span style="color:#66d9ef">goto</span> LABEL_14;
        }
        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;o&#39;</span> )
        {
          v6 <span style="color:#f92672">=</span> sub_400660(v10);
          <span style="color:#66d9ef">goto</span> LABEL_14;
        }
      }
      <span style="color:#66d9ef">else</span>
      {
        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.&#39;</span> )
        {
          v6 <span style="color:#f92672">=</span> sub_400670(<span style="color:#f92672">&amp;</span>v9);
          <span style="color:#66d9ef">goto</span> LABEL_14;
        }
        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;0&#39;</span> )
        {
          v6 <span style="color:#f92672">=</span> sub_400680(<span style="color:#f92672">&amp;</span>v9);
</code></pre></div><p>这些是对迷宫操作的判断，根据这些判断可以确定我们如何进行迷宫的操作</p>
<p>首先根据反汇编的代码进行分析，可以发现有两个关键数据有着比较重要的作用就是<code>v10</code>就<code>v9</code>的数据，根据跟进分析，发现<code>v10</code> 是进行横向操作，发现<code>v9</code> 是纵向操作。然后根据函数内部的加或减来确定 上下左右 的方向。</p>
<p>对代码进行进一步分析应该就知道对应操作：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">&#39;O&#39;  ←
&#39;o&#39;  →
&#39;.&#39;  ↑
&#39;0&#39;  ↓
</code></pre></div><p>根据代码的分析，迷宫应该是8x8的迷宫，可以排列出迷宫的样子</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">00******
*000*00*
***0*0**
**00*0**
*00*#00*
**0***0*
**00000*
********
</code></pre></div><p>根据目前的分析的结果就可以开心地走迷宫了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">o0oo00O000oooo..OO
</code></pre></div><p>迷宫路线即为flag，因此本题的flag为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">nctf{o0oo00O000oooo..OO}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>BUUCTF REVERSE [1~8]_writeup</title>
            <link>https://zcodetea.github.io/posts/buuctf-reverse-1-8_writeup/</link>
            <pubDate>Thu, 14 Oct 2021 13:03:43 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/buuctf-reverse-1-8_writeup/</guid>
            <description>BUUCTF-REVERSE-[1-8] writeup 逆向工程让密码学更加灵动，让密码学不再抽象。初步试水逆向工程题目，嘤嘤嘤！
0x0 easyre 非常简单的逆向题目，这道题目解决方法很多，基本思路就使用静态调试工具进行反汇编，然后检索字符串得到flag。这里使用一个开源的工具Cutter来逆向玩玩。
直接点击下面的Strings
使用过滤器，快速检索flag就能得到flag
得到flag
flag{this_Is_a_EaSyRe} 0x1 reverse1 先丢进IDA pro里面看看，会有什么神奇的反应和效果！
然后我们需要定位到主函数，定位到主函数的方法有很多，目前，我大致有两种，首先是检索字符串，其次就 是检索函数来快速定位主函数。
通过检索字符串来定位主函数，直接检索flag
然后通过检索结果定位到主函数
使用F5看到反编译的代码
代码非常清晰，找到关键的代码
for ( j = 0; ; ++j ) { v8 = j; v2 = j_strlen(Str2); if ( v8 &amp;gt; v2 ) break; if ( Str2[j] == 111 ) Str2[j] = 48; } sub_1400111D1(&amp;#34;input the flag:&amp;#34;); sub_14001128F(&amp;#34;%20s&amp;#34;, Str1); v3 = j_strlen(Str2); if ( !strncmp(Str1, Str2, v3) ) sub_1400111D1(&amp;#34;this is the right flag!</description>
            <content type="html"><![CDATA[<h1 id="buuctf-reverse-1-8-writeup">BUUCTF-REVERSE-[1-8] writeup</h1>
<p>逆向工程让密码学更加灵动，让密码学不再抽象。初步试水逆向工程题目，嘤嘤嘤！</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210806103313499.png" alt="image-20210806103313499"></p>
<h2 id="0x0-easyre">0x0 easyre</h2>
<p>非常简单的逆向题目，这道题目解决方法很多，基本思路就使用静态调试工具进行反汇编，然后检索字符串得到flag。这里使用一个开源的工具Cutter来逆向玩玩。</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210806113422474.png" alt="image-20210806113422474"></p>
<p>直接点击下面的Strings</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210806114025621.png" alt="image-20210806114025621"></p>
<p>使用过滤器，快速检索flag就能得到flag</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210806114828778.png" alt="image-20210806114828778"></p>
<p>得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{this_Is_a_EaSyRe}
</code></pre></div><h2 id="0x1-reverse1">0x1 reverse1</h2>
<p>先丢进IDA pro里面看看，会有什么神奇的反应和效果！</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210806192321775.png" alt="image-20210806192321775"></p>
<p>然后我们需要定位到主函数，定位到主函数的方法有很多，目前，我大致有两种，首先是检索字符串，其次就 是检索函数来快速定位主函数。</p>
<p>通过检索字符串来定位主函数，直接检索flag</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210806195615915.png" alt="image-20210806195615915"></p>
<p>然后通过检索结果定位到主函数</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210806195708832.png" alt="image-20210806195708832"></p>
<p>使用F5看到反编译的代码</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210806200411241.png" alt="image-20210806200411241"></p>
<p>代码非常清晰，找到关键的代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">  <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; ; <span style="color:#f92672">++</span>j )
  {
    v8 <span style="color:#f92672">=</span> j;
    v2 <span style="color:#f92672">=</span> j_strlen(Str2);
    <span style="color:#66d9ef">if</span> ( v8 <span style="color:#f92672">&gt;</span> v2 )
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">if</span> ( Str2[j] <span style="color:#f92672">==</span> <span style="color:#ae81ff">111</span> )
      Str2[j] <span style="color:#f92672">=</span> <span style="color:#ae81ff">48</span>;
  }
  sub_1400111D1(<span style="color:#e6db74">&#34;input the flag:&#34;</span>);
  sub_14001128F(<span style="color:#e6db74">&#34;%20s&#34;</span>, Str1);
  v3 <span style="color:#f92672">=</span> j_strlen(Str2);
  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>strncmp(Str1, Str2, v3) )
    sub_1400111D1(<span style="color:#e6db74">&#34;this is the right flag!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  <span style="color:#66d9ef">else</span>
    <span style="color:#a6e22e">sub_1400111D1</span>(<span style="color:#e6db74">&#34;wrong flag</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  sub_14001113B(v5, <span style="color:#f92672">&amp;</span>unk_140019D00);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>i64;
}
</code></pre></div><p>进行简单地代码审计可以明确地发现</p>
<p>flag就藏在Str2数据中，顺着这条线找下去可以看到Str2的数据</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210806210806832.png" alt="image-20210806210806832"></p>
<p>现在可以看到了flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">{hello_world}
</code></pre></div><p>不过，这道题目还没完，还是有个对于数据的变换，变换后的数据才是flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">  <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; ; <span style="color:#f92672">++</span>j )
  {
    v8 <span style="color:#f92672">=</span> j;
    v2 <span style="color:#f92672">=</span> j_strlen(Str2);
    <span style="color:#66d9ef">if</span> ( v8 <span style="color:#f92672">&gt;</span> v2 )
      <span style="color:#66d9ef">break</span>;
    <span style="color:#66d9ef">if</span> ( Str2[j] <span style="color:#f92672">==</span> <span style="color:#ae81ff">111</span> )
      Str2[j] <span style="color:#f92672">=</span> <span style="color:#ae81ff">48</span>;
  }
</code></pre></div><p>这段代码简单来说就是将原始数据中的<code>o</code>变成<code>0</code>，进行变换后就得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{hell0_w0rld}
</code></pre></div><h2 id="0x2-reverse2">0x2 reverse2</h2>
<p>也是一道简单的逆向题目，稍微走向流程。</p>
<p>查看文件格式信息，由于文件没有扩展名，推测很有可能ELF格式的Linux可执行文件而不是PE文件</p>
<p>使用Exeinfo PE工具查一下信息</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210806222154370.png" alt="image-20210806222154370"></p>
<p>发现是64位的ELF文件，使用Cutter进行反编译并进入到主函数，也就是main函数</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210806232340679.png" alt="image-20210806232340679"></p>
<p>可以找到反编译器中的关键代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    <span style="color:#66d9ef">while</span> (rbx <span style="color:#f92672">&lt;=</span> rax) {
        eax <span style="color:#f92672">=</span> var_38h;
        rax <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int64_t</span>) eax;
        eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((rax <span style="color:#f92672">+</span> flag));
        <span style="color:#66d9ef">if</span> (al <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x69</span>) {
            eax <span style="color:#f92672">=</span> var_38h;
            rax <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int64_t</span>) eax;
            eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((rax <span style="color:#f92672">+</span> flag));
            <span style="color:#66d9ef">if</span> (al <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x72</span>) {
                <span style="color:#66d9ef">goto</span> label_1;
            }
        }
        eax <span style="color:#f92672">=</span> var_38h;
        rax <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int64_t</span>) eax;
        <span style="color:#f92672">*</span>((rax <span style="color:#f92672">+</span> flag)) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x31</span>;
label_1:
        var_38h<span style="color:#f92672">++</span>;
        eax <span style="color:#f92672">=</span> var_38h;
        rbx <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int64_t</span>) eax;
        edi <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;{hacking_for_fun}&#34;</span>;
        rax <span style="color:#f92672">=</span> strlen ();
    }
    <span style="color:#66d9ef">goto</span> label_2;
label_0:
    rcx <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>wstatus;
    eax <span style="color:#f92672">=</span> pid;
    edx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    rsi <span style="color:#f92672">=</span> rcx;
    edi <span style="color:#f92672">=</span> eax;
    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    waitpid ();
label_2:
    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    printf (<span style="color:#e6db74">&#34;input the flag:&#34;</span>);
    rax <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>s2;
    rsi <span style="color:#f92672">=</span> rax;
    edi <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;%20s&#34;</span>;
    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    isoc99_scanf ();
    rax <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>s2;
    eax <span style="color:#f92672">=</span> strcmp (<span style="color:#e6db74">&#34;{hacking_for_fun}&#34;</span>, rax);
    <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
        puts (<span style="color:#e6db74">&#34;wrong flag!&#34;</span>);
    } <span style="color:#66d9ef">else</span> {
        puts (<span style="color:#e6db74">&#34;this is the right flag!&#34;</span>);
    }
    rdx <span style="color:#f92672">=</span> canary;
    rdx <span style="color:#f92672">^=</span> <span style="color:#f92672">*</span>(fs:<span style="color:#ae81ff">0x28</span>);
    <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
        stack_chk_fail ();
    }
</code></pre></div><p>对关键代码进行审计，发现原始数据是</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">{hacking_for_fun}
</code></pre></div><p>而且flag是对原始数据进行数据上的变换的，根据代码应该是将原始数据中的<code>r</code>和<code>i</code>进行替换，替换成了<code>1</code></p>
<p>因此，最终的flag就是</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{hack1ng_fo1_fun}
</code></pre></div><h2 id="0x3-内涵的软件">0x3 内涵的软件</h2>
<p>日常逆向走个流程，查一下软件信息</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210807135314713.png" alt="image-20210807135314713"></p>
<p>没有壳，32位程序</p>
<p>丢进Cutter简单看一下，可以发现flag应该就是在反编译的文件中</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210807141104750.png" alt="image-20210807141104750"></p>
<p>结合题目的名字，应该就可以推断出来flag就是那段看起来像是flag的字段，即</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{49d3c93df25caad81232130f3d2ebfad}
</code></pre></div><h2 id="0x4-新年快乐">0x4 新年快乐</h2>
<p>走下流程，先看看文件信息</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210807162409975.png" alt="image-20210807162409975"></p>
<p>发现文件被UPX进行了加壳处理</p>
<p>进行UPX脱壳后然后丢进Cutter就能看到flag</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210807164305469.png" alt="image-20210807164305469"></p>
<p>审计代码后可以看到flag就是</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{HappyNewYear!}
</code></pre></div><h2 id="0x5-xor">0x5 xor</h2>
<p>看样子像是ELF文件，使用linux的命令查询一下文件信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">file xor
</code></pre></div><p>可以得到以下信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">xor: Mach-O 64-bit x86_64 executable, flags:&lt;NOUNDEFS|DYLDLINK|TWOLEVEL|PIE&gt;
</code></pre></div><p>可以知道应该是一个Mac OS的可执行文件，而且是一个64位的程序，丢进IDA pro里面进行逆向得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+2Ch] [rbp-124h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> __b[<span style="color:#ae81ff">264</span>]; <span style="color:#75715e">// [rsp+40h] [rbp-110h] BYREF
</span><span style="color:#75715e"></span>
  memset(__b, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x100uLL</span>);
  printf(<span style="color:#e6db74">&#34;Input your flag:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
  get_line(__b, <span style="color:#ae81ff">256LL</span>);
  <span style="color:#66d9ef">if</span> ( strlen(__b) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">33</span> )
    <span style="color:#66d9ef">goto</span> LABEL_7;
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">33</span>; <span style="color:#f92672">++</span>i )
    __b[i] <span style="color:#f92672">^=</span> __b[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>];
  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>strncmp(__b, global, <span style="color:#ae81ff">0x21uLL</span>) )
    printf(<span style="color:#e6db74">&#34;Success&#34;</span>);
  <span style="color:#66d9ef">else</span>
LABEL_7:
    printf(<span style="color:#e6db74">&#34;Failed&#34;</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>关键函数应该是在global数组中，下面关键就是找到这个数组里面的数据</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210808061318446.png" alt="image-20210808061318446"></p>
<p>然后顺着这个global往上找，可以找aFKWOXZUPFVMDGH这个变量，数据应该存储在这个变量中，追踪这个变量可以找到内部的数据信息</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210808061948925.png" alt="image-20210808061948925"></p>
<p>然后提取数据得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> aFKWOXZUPFVMDGH[] <span style="color:#f92672">=</span>
{
  <span style="color:#ae81ff">102</span>,  <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">107</span>,  <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">119</span>,  <span style="color:#ae81ff">38</span>,  <span style="color:#ae81ff">79</span>,  <span style="color:#ae81ff">46</span>,  <span style="color:#ae81ff">64</span>,  <span style="color:#ae81ff">17</span>, 
  <span style="color:#ae81ff">120</span>,  <span style="color:#ae81ff">13</span>,  <span style="color:#ae81ff">90</span>,  <span style="color:#ae81ff">59</span>,  <span style="color:#ae81ff">85</span>,  <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">112</span>,  <span style="color:#ae81ff">25</span>,  <span style="color:#ae81ff">70</span>,  <span style="color:#ae81ff">31</span>, 
  <span style="color:#ae81ff">118</span>,  <span style="color:#ae81ff">34</span>,  <span style="color:#ae81ff">77</span>,  <span style="color:#ae81ff">35</span>,  <span style="color:#ae81ff">68</span>,  <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">103</span>,   <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">104</span>,  <span style="color:#ae81ff">15</span>, 
   <span style="color:#ae81ff">71</span>,  <span style="color:#ae81ff">50</span>,  <span style="color:#ae81ff">79</span>,   <span style="color:#ae81ff">0</span>
};
</code></pre></div><p>现在拿到数据了，下面就是对数据进行异或操作</p>
<p>由于异或操作是一个非常有趣的操作，就好像是在进行变魔术，非常有意思。因此可以根据异或运算的性质和特点来获取flag</p>
<p>写一个非常简单的异或脚本应该就能出flag了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">flag<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
xor<span style="color:#f92672">=</span>[<span style="color:#ae81ff">102</span>,  <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">107</span>,  <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">119</span>,  <span style="color:#ae81ff">38</span>,  <span style="color:#ae81ff">79</span>,  <span style="color:#ae81ff">46</span>,  <span style="color:#ae81ff">64</span>,  <span style="color:#ae81ff">17</span>, 
  <span style="color:#ae81ff">120</span>,  <span style="color:#ae81ff">13</span>,  <span style="color:#ae81ff">90</span>,  <span style="color:#ae81ff">59</span>,  <span style="color:#ae81ff">85</span>,  <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">112</span>,  <span style="color:#ae81ff">25</span>,  <span style="color:#ae81ff">70</span>,  <span style="color:#ae81ff">31</span>, 
  <span style="color:#ae81ff">118</span>,  <span style="color:#ae81ff">34</span>,  <span style="color:#ae81ff">77</span>,  <span style="color:#ae81ff">35</span>,  <span style="color:#ae81ff">68</span>,  <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">103</span>,   <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">104</span>,  <span style="color:#ae81ff">15</span>, 
   <span style="color:#ae81ff">71</span>,  <span style="color:#ae81ff">50</span>,  <span style="color:#ae81ff">79</span>,   <span style="color:#ae81ff">0</span>]

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">33</span>):
    flag <span style="color:#f92672">+=</span> chr(xor[i]<span style="color:#f92672">^</span>xor[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
print(flag)
</code></pre></div><p>运行脚本就能得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{QianQiuWanDai_YiTongJiangHu}
</code></pre></div><h2 id="0x6-helloworld">0x6 helloworld</h2>
<p>一个APK文件，丢到jadx反编译看看吧</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210808064410804.png" alt="image-20210808064410804"></p>
<p>如果是第一次接触apk程序的逆向工程可能对apk程序的结构不是非常熟悉，不知道怎么定位的主函数。一般而言，apk文件的主函数，也就是入口函数一般都是com.example.xxxx的包里面的MainActivity函数。因此找到这个函数，点开</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210808064814599.png" alt="image-20210808064814599"></p>
<p>flag就摆出来了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{7631a988259a00816deda84afb29430a}
</code></pre></div><h2 id="0x7-reverse3">0x7 reverse3</h2>
<p>查一下程序信息</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210808084057284.png" alt="image-20210808084057284"></p>
<p>是一个32位的程序，丢进Cutter里面看看主程序</p>
<p><img src="/images/BUUCTF-REVERSE-%5B1-8%5D_writeup/image-20210808084559776.png" alt="image-20210808084559776"></p>
<p>找到主程序的反编译代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdint.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span> 
<span style="color:#66d9ef">int32_t</span> <span style="color:#a6e22e">main</span> (<span style="color:#66d9ef">void</span>) {
    <span style="color:#66d9ef">int32_t</span> var_17ch;
    <span style="color:#66d9ef">int32_t</span> var_178h;
    <span style="color:#66d9ef">int32_t</span> var_ach;
    <span style="color:#66d9ef">int32_t</span> var_a0h;
    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> dest;
    <span style="color:#66d9ef">int32_t</span> var_28h;
    <span style="color:#66d9ef">int32_t</span> var_ch;
    <span style="color:#66d9ef">int32_t</span> var_4h;
    edi <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>var_17ch;
    ecx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5f</span>;
    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xcccccccc</span>;
    memset (edi, eax, ecx);
    eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#ae81ff">0x41a004</span>);
    eax <span style="color:#f92672">^=</span> ebp;
    var_4h <span style="color:#f92672">=</span> eax;
    var_a0h <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>) {
        eax <span style="color:#f92672">=</span> var_a0h;
        eax<span style="color:#f92672">++</span>;
        var_a0h <span style="color:#f92672">=</span> eax;
        <span style="color:#66d9ef">if</span> (var_a0h <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0x64</span>) {
            <span style="color:#66d9ef">goto</span> label_0;
        }
        eax <span style="color:#f92672">=</span> var_a0h;
        var_178h <span style="color:#f92672">=</span> var_a0h;
        <span style="color:#66d9ef">if</span> (var_178h <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x64</span>) {
        } <span style="color:#66d9ef">else</span> {
            fcn_00411154 ();
        }
        ecx <span style="color:#f92672">=</span> var_178h;
        <span style="color:#f92672">*</span>((ebp <span style="color:#f92672">+</span> ecx <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x94</span>)) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    }
label_0:
    fcn_0041132f (<span style="color:#e6db74">&#34;please enter the flag:&#34;</span>);
    fcn_00411375 (<span style="color:#e6db74">&#34;%20s&#34;</span>, var_28h);
    esi <span style="color:#f92672">=</span> esp;
    eax <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>var_ch;
    ecx <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>var_28h;
    eax <span style="color:#f92672">=</span> fcn_004110c8 ();
    eax <span style="color:#f92672">=</span> fcn_004110be (var_28h, eax);
    <span style="color:#66d9ef">uint32_t</span> (<span style="color:#f92672">*</span>strncpy)(<span style="color:#66d9ef">void</span>, <span style="color:#66d9ef">void</span>) (dest, eax);
    fcn_00411127 ();
    eax <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>dest;
    eax <span style="color:#f92672">=</span> fcn_004110c8 ();
    var_a0h <span style="color:#f92672">=</span> eax;
    var_ach <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>) {
        eax <span style="color:#f92672">=</span> var_ach;
        eax<span style="color:#f92672">++</span>;
        var_ach <span style="color:#f92672">=</span> eax;
        <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">&gt;=</span> var_a0h) {
            <span style="color:#66d9ef">goto</span> label_1;
        }
        eax <span style="color:#f92672">=</span> var_ach;
        ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ebp <span style="color:#f92672">+</span> eax <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x94</span>));
        ecx <span style="color:#f92672">+=</span> var_ach;
        edx <span style="color:#f92672">=</span> var_ach;
        <span style="color:#f92672">*</span>((ebp <span style="color:#f92672">+</span> edx <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x94</span>)) <span style="color:#f92672">=</span> cl;
    }
label_1:
    eax <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>dest;
    eax <span style="color:#f92672">=</span> fcn_004110c8 ();
    esi <span style="color:#f92672">=</span> esp;
    <span style="color:#66d9ef">uint32_t</span> (<span style="color:#f92672">*</span>strncmp)(<span style="color:#66d9ef">void</span>, <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>, <span style="color:#66d9ef">void</span>) (dest, <span style="color:#e6db74">&#34;e3nifIH9b_C@n@dH&#34;</span>, eax);
    eax <span style="color:#f92672">=</span> fcn_00411127 ();
    <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
        fcn_0041132f (<span style="color:#e6db74">&#34;wrong flag!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    } <span style="color:#66d9ef">else</span> {
        eax <span style="color:#f92672">=</span> fcn_0041132f (<span style="color:#e6db74">&#34;rigth flag!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
    }
    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    ecx <span style="color:#f92672">=</span> ebp;
    edx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x415890</span>;
    fcn_0041126c (eax);
    ecx <span style="color:#f92672">=</span> var_4h;
    ecx <span style="color:#f92672">^=</span> ebp;
    fcn_00411280 ();
    fcn_00411127 ();
}
</code></pre></div><p>主函数也有个关键函数 <code>fcn_004110be</code> ，定位到这个函数，看看这个函数的执行过程</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdint.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span> 
<span style="color:#66d9ef">int32_t</span> <span style="color:#a6e22e">fcn_004110be</span> (<span style="color:#66d9ef">uint32_t</span> arg_8h, <span style="color:#66d9ef">uint32_t</span> arg_ch, <span style="color:#66d9ef">int32_t</span> arg_10h) {
    <span style="color:#66d9ef">int32_t</span> var_100h;
    <span style="color:#66d9ef">int32_t</span> var_38h;
    <span style="color:#66d9ef">int32_t</span> var_2ch;
    size_t size;
    <span style="color:#66d9ef">uint32_t</span> var_14h;
    <span style="color:#66d9ef">int32_t</span> var_8h;
    edi <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>var_100h;
    ecx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x40</span>;
    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xcccccccc</span>;
    memset (edi, eax, ecx);
    var_8h <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    var_14h <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">if</span> (arg_8h <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
        <span style="color:#66d9ef">if</span> (arg_ch <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
            <span style="color:#66d9ef">goto</span> label_1;
        }
    }
    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">goto</span> label_2;
label_1:
    eax <span style="color:#f92672">=</span> arg_ch;
    edx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    ecx <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
    eax <span style="color:#f92672">=</span> edx:eax <span style="color:#f92672">/</span> ecx;
    edx <span style="color:#f92672">=</span> edx:eax <span style="color:#f92672">%</span> ecx;
    size <span style="color:#f92672">=</span> eax;
    edx:eax <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int64_t</span>) eax;
    ecx <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
    eax <span style="color:#f92672">=</span> edx:eax <span style="color:#f92672">/</span> ecx;
    edx <span style="color:#f92672">=</span> edx:eax <span style="color:#f92672">%</span> ecx;
    <span style="color:#66d9ef">if</span> (edx <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
        eax <span style="color:#f92672">=</span> size;
        eax<span style="color:#f92672">++</span>;
    }
    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">2</span>;
    eax <span style="color:#f92672">=</span> arg_10h;
    ecx <span style="color:#f92672">=</span> size;
    <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> ecx;
    eax <span style="color:#f92672">=</span> size;
    eax<span style="color:#f92672">++</span>;
    esi <span style="color:#f92672">=</span> esp;
    <span style="color:#66d9ef">uint32_t</span> (<span style="color:#f92672">*</span>malloc)(<span style="color:#66d9ef">void</span>, <span style="color:#66d9ef">void</span>, <span style="color:#66d9ef">void</span>) (eax, eax, eax);
    eax <span style="color:#f92672">=</span> fcn_00411127 ();
    var_14h <span style="color:#f92672">=</span> eax;
    <span style="color:#66d9ef">if</span> (var_14h <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
        eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
        <span style="color:#66d9ef">goto</span> label_2;
    }
    eax <span style="color:#f92672">=</span> size;
    eax<span style="color:#f92672">++</span>;
    ecx <span style="color:#f92672">=</span> var_14h;
    fcn_004110b9 ();
    eax <span style="color:#f92672">=</span> arg_8h;
    var_8h <span style="color:#f92672">=</span> arg_8h;
    eax <span style="color:#f92672">=</span> arg_ch;
    size <span style="color:#f92672">=</span> arg_ch;
    var_2ch <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    var_38h <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
label_0:
    <span style="color:#66d9ef">if</span> (size <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>) {
        <span style="color:#66d9ef">goto</span> label_3;
    }
    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">1</span>;
    <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>)) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    ecx <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
    ecx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>)) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    edx <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
    eax <span style="color:#f92672">=</span> edx <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>)) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    var_2ch <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>) {
        eax <span style="color:#f92672">=</span> var_2ch;
        eax<span style="color:#f92672">++</span>;
        var_2ch <span style="color:#f92672">=</span> eax;
        <span style="color:#66d9ef">if</span> (var_2ch <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">3</span>) {
            <span style="color:#66d9ef">goto</span> label_4;
        }
        <span style="color:#66d9ef">if</span> (size <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">1</span>) {
        } <span style="color:#66d9ef">else</span> {
            eax <span style="color:#f92672">=</span> var_2ch;
            ecx <span style="color:#f92672">=</span> var_8h;
            dl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(ecx);
            <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>)) <span style="color:#f92672">=</span> dl;
            eax <span style="color:#f92672">=</span> size;
            eax<span style="color:#f92672">--</span>;
            size <span style="color:#f92672">=</span> eax;
            eax <span style="color:#f92672">=</span> var_8h;
            eax<span style="color:#f92672">++</span>;
            var_8h <span style="color:#f92672">=</span> eax;
        }
    }
label_4:
    <span style="color:#66d9ef">if</span> (var_2ch <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
    } <span style="color:#66d9ef">else</span> {
        eax <span style="color:#f92672">=</span> var_2ch;
        var_100h <span style="color:#f92672">=</span> var_2ch;
        <span style="color:#66d9ef">if</span> (var_100h <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>) {
            <span style="color:#66d9ef">if</span> (var_100h <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span>) {
                <span style="color:#66d9ef">if</span> (var_100h <span style="color:#f92672">!=</span> <span style="color:#ae81ff">3</span>) {
                } <span style="color:#66d9ef">else</span> {
                    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                    ecx <span style="color:#f92672">=</span> eax <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
                    edx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
                    edx <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">2</span>;
                    eax <span style="color:#f92672">=</span> var_14h;
                    eax <span style="color:#f92672">+=</span> var_38h;
                    cl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
                    <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> cl;
                    edx <span style="color:#f92672">=</span> var_38h;
                    edx<span style="color:#f92672">++</span>;
                    var_38h <span style="color:#f92672">=</span> edx;
                    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                    ecx <span style="color:#f92672">=</span> eax <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
                    edx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
                    edx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">3</span>;
                    edx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">4</span>;
                    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">0</span>;
                    ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
                    ecx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xf0</span>;
                    ecx <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">4</span>;
                    edx <span style="color:#f92672">|=</span> ecx;
                    eax <span style="color:#f92672">=</span> var_14h;
                    eax <span style="color:#f92672">+=</span> var_38h;
                    cl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
                    <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> cl;
                    edx <span style="color:#f92672">=</span> var_38h;
                    edx<span style="color:#f92672">++</span>;
                    var_38h <span style="color:#f92672">=</span> edx;
                    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">6</span>;
                    ecx <span style="color:#f92672">=</span> var_14h;
                    ecx <span style="color:#f92672">+=</span> var_38h;
                    dl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
                    <span style="color:#f92672">*</span>(ecx) <span style="color:#f92672">=</span> dl;
                    eax <span style="color:#f92672">=</span> var_38h;
                    eax<span style="color:#f92672">++</span>;
                    var_38h <span style="color:#f92672">=</span> eax;
                    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">6</span>;
                    ecx <span style="color:#f92672">=</span> var_14h;
                    ecx <span style="color:#f92672">+=</span> var_38h;
                    dl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
                    <span style="color:#f92672">*</span>(ecx) <span style="color:#f92672">=</span> dl;
                    eax <span style="color:#f92672">=</span> var_38h;
                    eax<span style="color:#f92672">++</span>;
                    var_38h <span style="color:#f92672">=</span> eax;
                } <span style="color:#66d9ef">else</span> {
                    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                }
                ecx <span style="color:#f92672">=</span> eax <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
                edx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
                edx <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">2</span>;
                eax <span style="color:#f92672">=</span> var_14h;
                eax <span style="color:#f92672">+=</span> var_38h;
                cl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
                <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> cl;
                edx <span style="color:#f92672">=</span> var_38h;
                edx<span style="color:#f92672">++</span>;
                var_38h <span style="color:#f92672">=</span> edx;
                eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                ecx <span style="color:#f92672">=</span> eax <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
                edx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
                edx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">3</span>;
                edx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">4</span>;
                eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">0</span>;
                ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
                ecx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xf0</span>;
                ecx <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">4</span>;
                edx <span style="color:#f92672">|=</span> ecx;
                eax <span style="color:#f92672">=</span> var_14h;
                eax <span style="color:#f92672">+=</span> var_38h;
                cl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
                <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> cl;
                edx <span style="color:#f92672">=</span> var_38h;
                edx<span style="color:#f92672">++</span>;
                var_38h <span style="color:#f92672">=</span> edx;
                eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">0</span>;
                ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
                ecx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xf</span>;
                ecx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">2</span>;
                edx <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                edx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">1</span>;
                eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
                eax <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xc0</span>;
                eax <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">6</span>;
                ecx <span style="color:#f92672">|=</span> eax;
                edx <span style="color:#f92672">=</span> var_14h;
                edx <span style="color:#f92672">+=</span> var_38h;
                al <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
                <span style="color:#f92672">*</span>(edx) <span style="color:#f92672">=</span> al;
                ecx <span style="color:#f92672">=</span> var_38h;
                ecx<span style="color:#f92672">++</span>;
                var_38h <span style="color:#f92672">=</span> ecx;
                eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
                eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">6</span>;
                ecx <span style="color:#f92672">=</span> var_14h;
                ecx <span style="color:#f92672">+=</span> var_38h;
                dl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
                <span style="color:#f92672">*</span>(ecx) <span style="color:#f92672">=</span> dl;
                eax <span style="color:#f92672">=</span> var_38h;
                eax<span style="color:#f92672">++</span>;
                var_38h <span style="color:#f92672">=</span> eax;
            } <span style="color:#66d9ef">else</span> {
                eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
            }
            ecx <span style="color:#f92672">=</span> eax <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
            edx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
            edx <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">2</span>;
            eax <span style="color:#f92672">=</span> var_14h;
            eax <span style="color:#f92672">+=</span> var_38h;
            cl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
            <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> cl;
            edx <span style="color:#f92672">=</span> var_38h;
            edx<span style="color:#f92672">++</span>;
            var_38h <span style="color:#f92672">=</span> edx;
            eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
            ecx <span style="color:#f92672">=</span> eax <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
            edx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
            edx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">3</span>;
            edx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">4</span>;
            eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
            eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">0</span>;
            ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
            ecx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xf0</span>;
            ecx <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">4</span>;
            edx <span style="color:#f92672">|=</span> ecx;
            eax <span style="color:#f92672">=</span> var_14h;
            eax <span style="color:#f92672">+=</span> var_38h;
            cl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
            <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> cl;
            edx <span style="color:#f92672">=</span> var_38h;
            edx<span style="color:#f92672">++</span>;
            var_38h <span style="color:#f92672">=</span> edx;
            eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
            eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">0</span>;
            ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
            ecx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xf</span>;
            ecx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">2</span>;
            edx <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
            edx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">1</span>;
            eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
            eax <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xc0</span>;
            eax <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">6</span>;
            ecx <span style="color:#f92672">|=</span> eax;
            edx <span style="color:#f92672">=</span> var_14h;
            edx <span style="color:#f92672">+=</span> var_38h;
            al <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
            <span style="color:#f92672">*</span>(edx) <span style="color:#f92672">=</span> al;
            ecx <span style="color:#f92672">=</span> var_38h;
            ecx<span style="color:#f92672">++</span>;
            var_38h <span style="color:#f92672">=</span> ecx;
            eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
            eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">1</span>;
            ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
            ecx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0x3f</span>;
            edx <span style="color:#f92672">=</span> var_14h;
            edx <span style="color:#f92672">+=</span> var_38h;
            al <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
            <span style="color:#f92672">*</span>(edx) <span style="color:#f92672">=</span> al;
            ecx <span style="color:#f92672">=</span> var_38h;
            ecx<span style="color:#f92672">++</span>;
            var_38h <span style="color:#f92672">=</span> ecx;
        }
        <span style="color:#66d9ef">goto</span> label_0;
    }
label_3:
    eax <span style="color:#f92672">=</span> var_14h;
    eax <span style="color:#f92672">+=</span> var_38h;
    <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    eax <span style="color:#f92672">=</span> var_14h;
label_2:
    fcn_00411127 ();
    <span style="color:#66d9ef">return</span> eax;
}
</code></pre></div><p>看函数实现过程的细节像是base64的实现过程，实现之后主程序还有一个移位密码的变换</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">    <span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>) {
        eax <span style="color:#f92672">=</span> var_ach;
        eax<span style="color:#f92672">++</span>;
        var_ach <span style="color:#f92672">=</span> eax;
        <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">&gt;=</span> var_a0h) {
            <span style="color:#66d9ef">goto</span> label_1;
        }
        eax <span style="color:#f92672">=</span> var_ach;
        ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ebp <span style="color:#f92672">+</span> eax <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x94</span>));
        ecx <span style="color:#f92672">+=</span> var_ach;
        edx <span style="color:#f92672">=</span> var_ach;
        <span style="color:#f92672">*</span>((ebp <span style="color:#f92672">+</span> edx <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x94</span>)) <span style="color:#f92672">=</span> cl;
    }
</code></pre></div><p>变换后肯定有一个校验的过程，找到校验的数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">e3nifIH9b_C@n@dH
</code></pre></div><p>最后根据目前收集到的数据和信息编写个python脚本</p>
<p>（感觉挺像密码学的）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64

c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;e3nifIH9b_C@n@dH&#34;</span>
m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(c)):
    m <span style="color:#f92672">+=</span>chr(ord(c[i])<span style="color:#f92672">-</span>i)

flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag&#34;</span><span style="color:#f92672">+</span>base64<span style="color:#f92672">.</span>b64decode(m)<span style="color:#f92672">.</span>decode()
print(flag)
</code></pre></div><p>运行脚本就得到flag了</p>
<pre tabindex="0"><code>flag{i_l0ve_you}
</code></pre>]]></content>
        </item>
        
        <item>
            <title>BUUCTF CRYPTO [81~96]_writeup</title>
            <link>https://zcodetea.github.io/posts/buuctf-crypto-81-96_writeup/</link>
            <pubDate>Thu, 08 Jul 2021 16:26:32 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/buuctf-crypto-81-96_writeup/</guid>
            <description>BUUCTF-CRYPTO-[81-96] writeup 百题计划，冲呀！冲呀！冲呀！
本次16道题目，难度开始逐渐上升，越来越有挑战性喽！
0x0 RSA &amp;amp; what 开场就是一道RSA题目，真是不错！
附件有四个文件，一个README.txt文件，一个rsa.py算法文件，一个HUB1输出文件和一个HUB2输出文件。看看这些文件都是些什么内容吧！
README.txt：
素数生成算法太麻烦了，有没有取巧的方法呢？ 诶，这里好像有个不错的想法哟。 看起来节约了不少时间呢，嘿嘿嘿…… 顺便问问，应该大家都知道base64吧，用来编码还是很方便的呢！ rsa.py：
from Crypto.Util.number import bytes_to_long, getPrime from random import randint from gmpy2 import powmod p = getPrime(2048) q = getPrime(2048) N = p*q Phi = (p-1)*(q-1) def get_enc_key(N,Phi): e = getPrime(N) if Phi % e == 0: return get_enc_key(N, Phi) else: return e e1 = get_enc_key(randint(10, 12), Phi) e2 = get_enc_key(randint(10, 12), Phi) fr = open(r&amp;#34;.</description>
            <content type="html"><![CDATA[<h1 id="buuctf-crypto-81-96-writeup">BUUCTF-CRYPTO-[81-96] writeup</h1>
<p>百题计划，冲呀！冲呀！冲呀！</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B81-96%5D_writeup/image-20210701110042258.png" alt="image-20210701110042258"></p>
<p>本次16道题目，难度开始逐渐上升，越来越有挑战性喽！</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B81-96%5D_writeup/image-20210701110832867.png" alt="image-20210701110832867"></p>
<h2 id="0x0-rsa--what">0x0 RSA &amp; what</h2>
<p>开场就是一道RSA题目，真是不错！</p>
<p>附件有四个文件，一个<code>README.txt</code>文件，一个<code>rsa.py</code>算法文件，一个<code>HUB1</code>输出文件和一个<code>HUB2</code>输出文件。看看这些文件都是些什么内容吧！</p>
<p>README.txt：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">素数生成算法太麻烦了，有没有取巧的方法呢？
诶，这里好像有个不错的想法哟。
看起来节约了不少时间呢，嘿嘿嘿……
顺便问问，应该大家都知道base64吧，用来编码还是很方便的呢！
</code></pre></div><p>rsa.py：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> bytes_to_long, getPrime
<span style="color:#f92672">from</span> random <span style="color:#f92672">import</span> randint
<span style="color:#f92672">from</span> gmpy2 <span style="color:#f92672">import</span> powmod

p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">2048</span>)
q <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">2048</span>)
N <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
Phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_enc_key</span>(N,Phi):
    e <span style="color:#f92672">=</span> getPrime(N)
    <span style="color:#66d9ef">if</span> Phi <span style="color:#f92672">%</span> e <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        <span style="color:#66d9ef">return</span> get_enc_key(N, Phi)
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">return</span> e
e1 <span style="color:#f92672">=</span> get_enc_key(randint(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">12</span>), Phi)
e2 <span style="color:#f92672">=</span> get_enc_key(randint(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">12</span>), Phi)

fr <span style="color:#f92672">=</span> open(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;./base64&#34;</span>, <span style="color:#e6db74">&#34;rb&#34;</span>)<span style="color:#75715e">#flag is in this file</span>
f1 <span style="color:#f92672">=</span> open(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;./HUB1&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>)
f2 <span style="color:#f92672">=</span> open(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;./HUB2&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>)
base64 <span style="color:#f92672">=</span> fr<span style="color:#f92672">.</span>read(<span style="color:#ae81ff">255</span>)
f1<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> (N, e1))
f2<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> (N, e2))
<span style="color:#66d9ef">while</span> len(base64)<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">0</span>:
    pt <span style="color:#f92672">=</span> bytes_to_long(base64)
    ct1 <span style="color:#f92672">=</span> powmod(pt, e1, N)
    ct2 <span style="color:#f92672">=</span> powmod(pt, e2, N)
    f1<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> ct1)
    f2<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> ct2)
    base64 <span style="color:#f92672">=</span> fr<span style="color:#f92672">.</span>read(<span style="color:#ae81ff">255</span>)
fr<span style="color:#f92672">.</span>close()
f1<span style="color:#f92672">.</span>close()
f2<span style="color:#f92672">.</span>close()
</code></pre></div><p>HUB1：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">785095419718268286866508214304816985447077293766819398728046411166917810820484759314291028976498223661229395009474063173705162627037610993539617751905443039278227583504604808251931083818909467613277587874545761074364427549966555519371913859875313577282243053150056274667798049694695703660313532933165449312949725581708965417273055582216295994587600975970124811496270080896977076946000102701030260990598181466447208054713391526313700681341093922240317428173599031624125155188216489476825606191521182034969120343287691181300399683515414809262700457525876691808180257730351707673660380698973884642306898810000633684878715402823143549139850732982897459698089649561190746850698130299458080255582312696873149210028240898137822888492559957665067936573356367589784593119016624072433872744537432005911668494455733330689385141214653091888017782049043434862620306783436169856564175929871100669913438980899219579329897753233450934770193915434791427728636586218049874617231705308003720066269312729135764175698611068808404054125581540114956463603240222497919384691718744014002554201602395969312999994159599536026359879060218056496345745457493919771337601177449899066579857630036350871090452649830775029695488575574985078428560054253180863725364147
1697







</code></pre></div><p>HUB2：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">785095419718268286866508214304816985447077293766819398728046411166917810820484759314291028976498223661229395009474063173705162627037610993539617751905443039278227583504604808251931083818909467613277587874545761074364427549966555519371913859875313577282243053150056274667798049694695703660313532933165449312949725581708965417273055582216295994587600975970124811496270080896977076946000102701030260990598181466447208054713391526313700681341093922240317428173599031624125155188216489476825606191521182034969120343287691181300399683515414809262700457525876691808180257730351707673660380698973884642306898810000633684878715402823143549139850732982897459698089649561190746850698130299458080255582312696873149210028240898137822888492559957665067936573356367589784593119016624072433872744537432005911668494455733330689385141214653091888017782049043434862620306783436169856564175929871100669913438980899219579329897753233450934770193915434791427728636586218049874617231705308003720066269312729135764175698611068808404054125581540114956463603240222497919384691718744014002554201602395969312999994159599536026359879060218056496345745457493919771337601177449899066579857630036350871090452649830775029695488575574985078428560054253180863725364147
599


373940646416832740878733255707567753033716583448402000789202767511920210382830343955553654111486728333980557319799362514960627879016797491389812007768832730979916230647641872759001906846747977631675704310179448857128160385701185892914523053669366534408863734305635222625590986006420486092550427301086984563126480814987024980594613542978310129247678826691418335300577577527951623696426435497835228167084738007750914270251001921329521479047662848650808989996085600197309361410863238526802127877523767262921515150984998560136647154865791163316503073285223966216441025637452229043510097323724381056976302288136843260163922706692913035222445496716008888946581535004546355744211680390731257309941902587303353139951102244865270295414474488798335404630458489706639805186573874814586736746232358849677477533671968344154242963289415569487579895910660999043578737461300406937828924818002658292769882181668784501439254131996848948120781562158861495883827848139425862249576454689133681009549361314460818658995959098228995702202268649635363105549975932395335076521137604288520082040121286614922986554652700056148966514178935952363036963217619879899671383604638416567950421350546204434902113156720006282720889591288850271076074941927715678306057176




</code></pre></div><p>这道题目的关键应该就是加密算法的那个python文件和提示文件，需要看懂并了解rsa.py里面具体的加密算法，是以什么样的方式进行加密的。</p>
<p>审计一下加密算法，发现<code>N</code>使用了两次，可以断定这题是共模攻击的题目，先丢进共模攻击的脚本里面瞧一瞧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
<span style="color:#f92672">import</span> gmpy2

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">common_modulus</span>(n,c1,c2,e1,e2):
    <span style="color:#66d9ef">assert</span>(libnum<span style="color:#f92672">.</span>gcd(e1, e2))
    _, s1, s2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>gcdext(e1, e2)
    <span style="color:#66d9ef">if</span> s1 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
        s1 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s1
        c1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c1,n)
    <span style="color:#66d9ef">if</span> s2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
        s2 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s2
        c2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c2,n)
    <span style="color:#66d9ef">return</span> pow(c1,s1,n) <span style="color:#f92672">*</span> pow(c2,s2,n) <span style="color:#f92672">%</span> n

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">785095419718268286866508214304816985447077293766819398728046411166917810820484759314291028976498223661229395009474063173705162627037610993539617751905443039278227583504604808251931083818909467613277587874545761074364427549966555519371913859875313577282243053150056274667798049694695703660313532933165449312949725581708965417273055582216295994587600975970124811496270080896977076946000102701030260990598181466447208054713391526313700681341093922240317428173599031624125155188216489476825606191521182034969120343287691181300399683515414809262700457525876691808180257730351707673660380698973884642306898810000633684878715402823143549139850732982897459698089649561190746850698130299458080255582312696873149210028240898137822888492559957665067936573356367589784593119016624072433872744537432005911668494455733330689385141214653091888017782049043434862620306783436169856564175929871100669913438980899219579329897753233450934770193915434791427728636586218049874617231705308003720066269312729135764175698611068808404054125581540114956463603240222497919384691718744014002554201602395969312999994159599536026359879060218056496345745457493919771337601177449899066579857630036350871090452649830775029695488575574985078428560054253180863725364147</span>
e1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1697</span>
e2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">599</span>
c1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
c2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
hub1 <span style="color:#f92672">=</span> [
        <span style="color:#ae81ff">412629526163150748619328091306742267675740578011800062477174189782151273970783531227579758540364970485350157944321579108232221072397135934034064481497887079641131808838242743811511451355024436983050572020925065644355566434625618133203024215941534926113892937988520918939061441606915556516246057349589921494351383160036280826024605351878408056180907759973804117263002554923041750587548819746346813966673034182913325507826219961923932100526305289894965216608254252188398580139545189681875824089456195044984585824938384521905334289906422454152976834867304693292466676355760173232407753256256317546190171995276258924613533179898467683358934751999655196790168438343198229183747091108262988777659858609744709324571850262293294975336628234767258858873839342596887193772615000676401522431518310648303975593582965021189182246986957349253156736526071639973844039068996404290548474640668851856078201093335425412842295604919065487301340901573809617549185106072798799159726375235125260509158832996701927878713084753334549129580912412168594170659605421750204835970231909591063407612779337478065175988365401590396247576709343727196106058477166945670117868989025903023998142850338956985816131805349549059377047477131270847579095628384569645636821650</span>,
<span style="color:#ae81ff">494644347943710545224678831941589086572700792465459558770782213550069709458568349686998660541810166872034041584767487150140111151788221460027897193248273461607411027815984883969396220626358625041781558277804930212654296704055890683796941327712758797770820006623289146990000114915293539639766846910274034245607746230740851938158390562286057002223177609606376329007676845450142537930798148258428701466415483232670659815791064681384406494388237742330786225557303988025468036820082959712050733095860546860468575857084616069132051094882919253745234762029759124776348047587755897123575123506976140900565238840752841856713613368250071926171873213897914794115466890719123299469964019450899291410760762179836946570945555295288184698184555018368687708432612286248476073758067175481771199066581572870175460016017100414479346437034291784837132240891321931601494414908927713208448927221095745802380014441841139882391378410438764884597938773868771896252329517440068673532468372840830510218585255432000690265226016573313570977945083879214961394087065558376158826938257664840570952233832852869328785568175434516247720356520242602299510374317488182738732700078879665745909603766482100138001417023680647717824323143388857817595766172152883484274718248</span>,
<span style="color:#ae81ff">152942283599728307168144137370127212672611894072038732126041098102628831053000986759260271210671922070555948023688596575415822984026159010574404359474670428678518262175033880513984372909748992727828381694416776740981021730545374002974037896534944567124543272737618380646771071804878796585983783360553761828325817820260204820004421979881871027255562690952334900616675606524933557440263648233514757200263521499508373975003431306847453046714027687108396945719803444444954079308404947126216395526551292104722047878178373207886033071857277857997932255251315982837892164421298202073945919187779856785892717251746704537315003771369737854896595170485152591013676942418134278534037654467840633528916812275267230155352077736583130992587670941654695382287023971261529987384520843829695778029311786431227409189019205818351911572757145556993606643464336196802350204616056286497246016800105003143046120608673496196758720552776772796609670537056331996894322779267635281472481559819839042424017171718303214059720568484939239370144038161541354254182769979771948759413102933987773401644506930205164891773826513161783736386604783484446345744957119469799231796368324927570694496679453313927562345656690240414624431304646248599226046524702364131095964335</span>,
<span style="color:#ae81ff">79717988936247951265489157583697956031893477858854186991051529161879478488281744062318600470906120960002282886511477294555606503083169449335174864424180701080203993329996226566203834693869525797695969610065991941396723959032680019082506816443041598300477625793433080664346470586416385854692124426348587211026568667694805849554780794033764714016521711467557284846737236374990121316809833819996821592832639024026411520407330206281265390130763948165694574512140518775603040182029818771866749548761938870605590174330887949847420877829240131490902432602005681085180807294176837646062568094875766945890382971790015490163385088144673549085079635083262975154206269679142412897438231719704933258660779310737302680265445437771977749959110744959368586293082016067927548564967400845992380076107522755566531760628823374519718763740378295585535591752887339222947397184116326706799921515431185636740825707782742373783475781052674257292910213843986132987466810027275052416774693363446184518901899202502828670309452622347532932678874990809930682575738653876289384151496807194146308614368821006660626870989784697045160231069428458961107751207771093777394616856305293335603892178327520756554333365975114235981173451368131680404850832773147333013716920</span>,
<span style="color:#ae81ff">123111353650401158556639983459870663057297871992927053886971224773529636525110628183715748795987525113177540092814119928708272290370336537110381023134637759740716140969662183269370676630325583385284994943164692397459103195434968057377474610500216801375394703781249039351368816958227409657934091741509357152328382960684515093945552479461382281913961956745154260686029997827565075768703774895750561575155143606297116391666385705899138085693913246313778033627210312268959737394553510894720099165193981333775907531107232556909478156441457899797515694348816961762796703443502856101079430585547997496001098926600499728389113862894833789669213630332988693669889340482430613291490613803204484751470676686041002772556117213612152322606737150858116122936539131795111263513114569794532805886643087299918196635113037777138666914296986040549274559835214505300618256105508764026461518876579387159881983544667258537064954616097750399839661065797883103731694314852301848272092388637114950059216922969842082648527035538090054093890365647676119748995243416337805666557501345234056968476142608491830438065401219751688687373709390057521910942736632126729711606256158399963682990881473178216060827021373776598901281958527655543318413664277921492723185984</span>,
<span style="color:#ae81ff">36869806815936046911848195817405817350259890871483063184373728397968909458432625046025376290214729914038387534731762237978339011724858818860181178811639468996206294711495853807311240013786226884265118119546377272154555615363105236192878292703331473547623021744317034819416624562896226194523639793573028006666236271812390759036235867495803255905843636447252225413871038762657801345647584493917576263471587347202664391908570140389126903204602391093990827188675090199750617303773574821926387194478875191828814971296674530519321530805302667925998711835019806761133078403281404889374663875077339168901297819436499920958268483684335998301056068380228873524800383911402490807139268964095165069610454677558808756444381542173782815227920906224931028457073652453777424387873533280455944646592996920617956675786286711447540353883400282402551158169958389450168079568459656526911857835375748015814860506707921852997096156275804955989964215077733621769938075413007804223217091604613132253046399456747595300404564172224333936405545921819654435437072133387523533568472443532200069133022979195685683508297337961701169394794966256415112246587706103819620428258245999539040721929317130088874161577093962579487428358736401687123174207198251449851429295</span>
        ]

hub2 <span style="color:#f92672">=</span> [
        <span style="color:#ae81ff">592169079372093727306100216011395857825646323934289480976073629037543922902098120901138454462177159996376654176248238979132528728327590301098966139983157980612320563496546128644967731000716697705104079039156276714872147463350811303393260622707024952543509891692246246277965823414460326811240048060543656588688604452353899779068825120910282167004715339763187734797180326976132213325054697165320479166356562518029805927741656605174809726397565772271562066078076105491745903986597877400370206718954975288721072048333678609055008135809089304229015364348490924974097403734627265297637171818849461766523691595241613878709865506436588268999163342945070495338153600520537498539457396582804692959296612715752573140296135784933206146091436617979599749774330699946637591406356289409716084034451049094715202196203486088368791744107629271647320273259836915312794297246589501008666299165717722507702866033454215783240025504356157664454861755286285777763585177751796252655008206383024707883077513745863312079349790275094080707502392866946325796914450602264462588722052297430827681750827349094323968337670311272933785838850649376115667223821665435911506351891489985627506615492005617098615432522564204152887767244129985681083657783356557756654335186</span>,
<span style="color:#ae81ff">373940646416832740878733255707567753033716583448402000789202767511920210382830343955553654111486728333980557319799362514960627879016797491389812007768832730979916230647641872759001906846747977631675704310179448857128160385701185892914523053669366534408863734305635222625590986006420486092550427301086984563126480814987024980594613542978310129247678826691418335300577577527951623696426435497835228167084738007750914270251001921329521479047662848650808989996085600197309361410863238526802127877523767262921515150984998560136647154865791163316503073285223966216441025637452229043510097323724381056976302288136843260163922706692913035222445496716008888946581535004546355744211680390731257309941902587303353139951102244865270295414474488798335404630458489706639805186573874814586736746232358849677477533671968344154242963289415569487579895910660999043578737461300406937828924818002658292769882181668784501439254131996848948120781562158861495883827848139425862249576454689133681009549361314460818658995959098228995702202268649635363105549975932395335076521137604288520082040121286614922986554652700056148966514178935952363036963217619879899671383604638416567950421350546204434902113156720006282720889591288850271076074941927715678306057176</span>,
<span style="color:#ae81ff">527630926460622936571385649841758214453416849039412401087443444317101857090904711485538107058823056085840539073345920792871368232355475394571098380596835468509997340505604333730547799560998822989747473780307779717715522787724471724766494090783971030594671013168209717686720448579582618378459567979027822271918653169622428153856198907810040224340270362413432495029672123261375400927159831537760709974778708160583252613784358234858583174544777979242887938827573604837766801998381379999076416444683891078093889686055482709838668356120916040352123019019255084513769603803814947774554028717814638951416291274696771515474086351482107953150253616922787262398450376249126999644026382478413080973933173079111305142716133389111399235545279259017424722601848670061556859163943895466553927946412523750166582734005733378328468250568944945912238495877929717101722314678120172228493787964904072583905721074766711732215815561012960394537195757832959268603775112932862105945720853959285187521763557915356428113876893276879775603217718981852114599706699524551973934242045743122744146361596971245034059345915315495232135483464496114770357536576200511490922413208178149869347802988786513451486411409887164516065062084917556120712465074206435831498113605</span>,
<span style="color:#ae81ff">8786437178698940322877889807009957616777351844979869726962356553244050911283984280960665761649310895230455072977431415102053987735969326553978994853162483051544656873294555116009995592043183070208706258164840540599577072097104139505857517663273929851202628854185356185647194933800084230503413037858893307713037149307477830536758283681093517617820169181420796105338681582230788318108428132051793761014952837330456262272828627355701464740578197966332613127307037255647286823496355917642353327912440019621838870388091824748629637425759125214639885130163183752378908729773517053259212525494555880921052679512582051516604297098204363525081039382358483926727008679327719083138865969291911863630382097160230960738043575559330264018212774424527719153248563876760067931499029384228993253862501939337758514377472011933279273181144830381169849387893799390755052093069179605579485710343655570028592595882436632426527654452895431758715126580164902410286422637215098476316042367916779431052267545769495994723721129943616294879642305545894912914632980455031755879087401575310699765408473606166727137934224515998416625122213056208800095077933103150699272650116151674702438463062734472714004926103668378506804002740045547964716693536349447660850580</span>,
<span style="color:#ae81ff">205314962204511500352858372254132533167549960825498949618514841570703199264867431580754674275990554478140637041427842111391746883257447120035947621456863890934062044010795443059281736346976175772415034838334682726635263432655537852942177334888025283748611576171534251461847349566505628290587224150869640386437623371249743165260396675220683302142805646368906930575140628610003919131999295855501215111393294818218799982703289304596989070475000081175510085432290264502023736899104746316830742226946395027029820825791831870857382647221322734605026210073093918331247494307555600335550942340526536281372036612138713881098866303169425501998978400008829873080965592009371176208668290074288903681417933657472279670688597862835627506340169978450918788539270346340385928840299573889292189531738082166408734046381423516467694328971385421907314814283489322619386570046183556572383980777277173349209330683424343658179781015072259378576130442222984963071166207642585589822061597282467850868050737957726423713761694231879497037175627546427449730638216214828463003483408928375620315193290871300316930139260521382533279767663839278693750409419493280753368451508802658272220767624766390639285308433607255253282702383762149755935518922075584637512494819</span>,
<span style="color:#ae81ff">271453634732502613378948161256470991260052778799128789839624515809143527363206813219580098196957510291648493698144497567392065251244844074992734669490296293997386198359280316655904691639367482203210051809125904410431506925238374843856343243276508280641059690938930957474434518308646618959004216831130099873532714372402117796666560677624822509159287675432413016478948594640872091688482149004426363946048517480052906306290126242866034249478040406351940088231081456109195799442996799641647167552689564613346415247906852055588498305665928450828756152103096629274760601528737639415361467941349982213641454967962723875032638267311935042334584913897338553953961877439389588793074211502597238465542889335363559052368180212013206172712561221352833891640659020253527584706465205486408990762759230842192028381048563437724528409174790022752557512795782713125166158329880702730769957185428522011430144840232256419113631679343171680631630775266488738173707357123139368825087043785842169049943237537188129367275730984789479909103397937113837824575137021012333461552176687570010445744268373840742899299977372834041925102853718964831225250407279578465008537542659673685686242773379131904890865110699190451534445434533919127658976874721029586168106207</span>
        ]
<span style="color:#66d9ef">assert</span> len(hub1) <span style="color:#f92672">==</span> len(hub2)
length <span style="color:#f92672">=</span> len(hub2)
baseCipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(length):
    c1 <span style="color:#f92672">=</span> hub1[i]
    c2 <span style="color:#f92672">=</span> hub2[i]
    m <span style="color:#f92672">=</span> common_modulus(n,c1,c2,e1,e2)
    baseCipher <span style="color:#f92672">+=</span> libnum<span style="color:#f92672">.</span>n2s(m)

print baseCipher
</code></pre></div><p>运行脚本后，输出的是一堆base64：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">VEhJUz==
RkxBR3==
SVN=
SElEREVOLo==
Q0FO
WU9V
RklORM==
SVT=
T1VUP4==
RE8=
WU9V
S05PV9==
QkFTRTY0P5==
WW91bmdD
VEhJTku=
WU9V
QVJF
Tk9U
VEhBVE==
RkFNSUxJQVI=
V0lUSO==
QkFTRTY0Lh==
QmFzZTY0
aXO=
YW==
Z3JvdXA=
b2b=
c2ltaWxhcn==
YmluYXJ5LXRvLXRleHR=
ZW5jb2Rpbme=
c2NoZW1lc0==
dGhhdD==
cmVwcmVzZW50
YmluYXJ5
ZGF0YW==
aW5=
YW6=
QVNDSUl=
c3RyaW5n
Zm9ybWF0
Ynk=
dHJhbnNsYXRpbmd=
aXS=
aW50b1==
YT==
cmFkaXgtNjQ=
cmVwcmVzZW50YXRpb24u
VGhl
dGVybc==
QmFzZTY0
b3JpZ2luYXRlc8==
ZnJvbd==
YY==
c3BlY2lmaWN=
TUlNRT==
Y29udGVudI==
dHJhbnNmZXI=
ZW5jb2Rpbmcu
VGhl
cGFydGljdWxhct==
c2V0
b2b=
NjR=
Y2hhcmFjdGVyc5==
Y2hvc2Vu
dG+=
cmVwcmVzZW50
dGhl
NjQ=
cGxhY2UtdmFsdWVz
Zm9y
dGhl
YmFzZd==
dmFyaWVz
YmV0d2Vlbt==
aW1wbGVtZW50YXRpb25zLp==
VGhl
Z2VuZXJhbI==
c3RyYXRlZ3n=
aXO=
dG9=
Y2hvb3Nl
NjR=
Y2hhcmFjdGVyc5==
dGhhdA==
YXJl
Ym90aN==
bWVtYmVyc5==
b2a=
YS==
c3Vic2V0
Y29tbW9u
dG8=
bW9zdM==
ZW5jb2RpbmdzLA==
YW5k
YWxzb8==
cHJpbnRhYmxlLg==
VGhpc9==
Y29tYmluYXRpb25=
bGVhdmVz
dGhl
ZGF0YW==
dW5saWtlbHk=
dG/=
YmV=
bW9kaWZpZWS=
aW5=
dHJhbnNpdE==
dGhyb3VnaN==
aW5mb3JtYXRpb26=
c3lzdGVtcyw=
c3VjaN==
YXM=
RS1tYWlsLD==
dGhhdA==
d2VyZQ==
dHJhZGl0aW9uYWxseQ==
bm90
OC1iaXQ=
Y2xlYW4uWzFd
Rm9y
ZXhhbXBsZSw=
TUlNRSdz
QmFzZTY0
aW1wbGVtZW50YXRpb24=
dXNlcw==
QahDWiw=
YahDeiw=
YW5k
MKhDOQ==
Zm9y
dGhl
Zmlyc3Q=
NjI=
dmFsdWVzLg==
T3RoZXI=
dmFyaWF0aW9ucw==
c2hhcmU=
dGhpcw==
cHJvcGVydHk=
YnV0
ZGlmZmVy
aW4=
dGhl
c3ltYm9scw==
Y2hvc2Vu
Zm9y
dGhl
bGFzdA==
dHdv
dmFsdWVzOw==
YW4=
ZXhhbXBsZQ==
aXM=
VVRGLTcu
</code></pre></div><p>看样子像是base64隐写，可以将内容写入一个txt文件，然后借一个base64隐写的脚本处理一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_base64_diff_value</span>(s1, s2):
    base64chars <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#39;</span>
    res <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> xrange(len(s2)):
        <span style="color:#66d9ef">if</span> s1[i] <span style="color:#f92672">!=</span> s2[i]:
            <span style="color:#66d9ef">return</span> abs(base64chars<span style="color:#f92672">.</span>index(s1[i]) <span style="color:#f92672">-</span> base64chars<span style="color:#f92672">.</span>index(s2[i]))
    <span style="color:#66d9ef">return</span> res


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve_stego</span>():
    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;cipher.txt&#39;</span>, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> f:
        file_lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
        bin_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
        <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> file_lines:
            steg_line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
            norm_line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;base64&#39;</span>)<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;base64&#39;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
            diff <span style="color:#f92672">=</span> get_base64_diff_value(steg_line, norm_line)
            print diff
            pads_num <span style="color:#f92672">=</span> steg_line<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#39;=&#39;</span>)
            <span style="color:#66d9ef">if</span> diff:
                bin_str <span style="color:#f92672">+=</span> bin(diff)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>zfill(pads_num <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>)
            <span style="color:#66d9ef">else</span>:
                bin_str <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">*</span> pads_num <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>
            print goflag(bin_str)


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">goflag</span>(bin_str):
    res_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> xrange(<span style="color:#ae81ff">0</span>, len(bin_str), <span style="color:#ae81ff">8</span>):
        res_str <span style="color:#f92672">+=</span> chr(int(bin_str[i:i <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>], <span style="color:#ae81ff">2</span>))
    <span style="color:#66d9ef">return</span> res_str


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    solve_stego()
</code></pre></div><p>运行一个这个脚本，flag就有了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">7c86d8f7d6de33a87f7f9d6b005ce640
</code></pre></div><p>完整EXP：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
<span style="color:#f92672">import</span> gmpy2

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">common_modulus</span>(n,c1,c2,e1,e2):
    <span style="color:#66d9ef">assert</span>(libnum<span style="color:#f92672">.</span>gcd(e1, e2))
    _, s1, s2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>gcdext(e1, e2)
    <span style="color:#66d9ef">if</span> s1 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
        s1 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s1
        c1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c1,n)
    <span style="color:#66d9ef">if</span> s2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
        s2 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s2
        c2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c2,n)
    <span style="color:#66d9ef">return</span> pow(c1,s1,n) <span style="color:#f92672">*</span> pow(c2,s2,n) <span style="color:#f92672">%</span> n

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">785095419718268286866508214304816985447077293766819398728046411166917810820484759314291028976498223661229395009474063173705162627037610993539617751905443039278227583504604808251931083818909467613277587874545761074364427549966555519371913859875313577282243053150056274667798049694695703660313532933165449312949725581708965417273055582216295994587600975970124811496270080896977076946000102701030260990598181466447208054713391526313700681341093922240317428173599031624125155188216489476825606191521182034969120343287691181300399683515414809262700457525876691808180257730351707673660380698973884642306898810000633684878715402823143549139850732982897459698089649561190746850698130299458080255582312696873149210028240898137822888492559957665067936573356367589784593119016624072433872744537432005911668494455733330689385141214653091888017782049043434862620306783436169856564175929871100669913438980899219579329897753233450934770193915434791427728636586218049874617231705308003720066269312729135764175698611068808404054125581540114956463603240222497919384691718744014002554201602395969312999994159599536026359879060218056496345745457493919771337601177449899066579857630036350871090452649830775029695488575574985078428560054253180863725364147</span>
e1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1697</span>
e2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">599</span>
c1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
c2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
hub1 <span style="color:#f92672">=</span> [
        <span style="color:#ae81ff">412629526163150748619328091306742267675740578011800062477174189782151273970783531227579758540364970485350157944321579108232221072397135934034064481497887079641131808838242743811511451355024436983050572020925065644355566434625618133203024215941534926113892937988520918939061441606915556516246057349589921494351383160036280826024605351878408056180907759973804117263002554923041750587548819746346813966673034182913325507826219961923932100526305289894965216608254252188398580139545189681875824089456195044984585824938384521905334289906422454152976834867304693292466676355760173232407753256256317546190171995276258924613533179898467683358934751999655196790168438343198229183747091108262988777659858609744709324571850262293294975336628234767258858873839342596887193772615000676401522431518310648303975593582965021189182246986957349253156736526071639973844039068996404290548474640668851856078201093335425412842295604919065487301340901573809617549185106072798799159726375235125260509158832996701927878713084753334549129580912412168594170659605421750204835970231909591063407612779337478065175988365401590396247576709343727196106058477166945670117868989025903023998142850338956985816131805349549059377047477131270847579095628384569645636821650</span>,
<span style="color:#ae81ff">494644347943710545224678831941589086572700792465459558770782213550069709458568349686998660541810166872034041584767487150140111151788221460027897193248273461607411027815984883969396220626358625041781558277804930212654296704055890683796941327712758797770820006623289146990000114915293539639766846910274034245607746230740851938158390562286057002223177609606376329007676845450142537930798148258428701466415483232670659815791064681384406494388237742330786225557303988025468036820082959712050733095860546860468575857084616069132051094882919253745234762029759124776348047587755897123575123506976140900565238840752841856713613368250071926171873213897914794115466890719123299469964019450899291410760762179836946570945555295288184698184555018368687708432612286248476073758067175481771199066581572870175460016017100414479346437034291784837132240891321931601494414908927713208448927221095745802380014441841139882391378410438764884597938773868771896252329517440068673532468372840830510218585255432000690265226016573313570977945083879214961394087065558376158826938257664840570952233832852869328785568175434516247720356520242602299510374317488182738732700078879665745909603766482100138001417023680647717824323143388857817595766172152883484274718248</span>,
<span style="color:#ae81ff">152942283599728307168144137370127212672611894072038732126041098102628831053000986759260271210671922070555948023688596575415822984026159010574404359474670428678518262175033880513984372909748992727828381694416776740981021730545374002974037896534944567124543272737618380646771071804878796585983783360553761828325817820260204820004421979881871027255562690952334900616675606524933557440263648233514757200263521499508373975003431306847453046714027687108396945719803444444954079308404947126216395526551292104722047878178373207886033071857277857997932255251315982837892164421298202073945919187779856785892717251746704537315003771369737854896595170485152591013676942418134278534037654467840633528916812275267230155352077736583130992587670941654695382287023971261529987384520843829695778029311786431227409189019205818351911572757145556993606643464336196802350204616056286497246016800105003143046120608673496196758720552776772796609670537056331996894322779267635281472481559819839042424017171718303214059720568484939239370144038161541354254182769979771948759413102933987773401644506930205164891773826513161783736386604783484446345744957119469799231796368324927570694496679453313927562345656690240414624431304646248599226046524702364131095964335</span>,
<span style="color:#ae81ff">79717988936247951265489157583697956031893477858854186991051529161879478488281744062318600470906120960002282886511477294555606503083169449335174864424180701080203993329996226566203834693869525797695969610065991941396723959032680019082506816443041598300477625793433080664346470586416385854692124426348587211026568667694805849554780794033764714016521711467557284846737236374990121316809833819996821592832639024026411520407330206281265390130763948165694574512140518775603040182029818771866749548761938870605590174330887949847420877829240131490902432602005681085180807294176837646062568094875766945890382971790015490163385088144673549085079635083262975154206269679142412897438231719704933258660779310737302680265445437771977749959110744959368586293082016067927548564967400845992380076107522755566531760628823374519718763740378295585535591752887339222947397184116326706799921515431185636740825707782742373783475781052674257292910213843986132987466810027275052416774693363446184518901899202502828670309452622347532932678874990809930682575738653876289384151496807194146308614368821006660626870989784697045160231069428458961107751207771093777394616856305293335603892178327520756554333365975114235981173451368131680404850832773147333013716920</span>,
<span style="color:#ae81ff">123111353650401158556639983459870663057297871992927053886971224773529636525110628183715748795987525113177540092814119928708272290370336537110381023134637759740716140969662183269370676630325583385284994943164692397459103195434968057377474610500216801375394703781249039351368816958227409657934091741509357152328382960684515093945552479461382281913961956745154260686029997827565075768703774895750561575155143606297116391666385705899138085693913246313778033627210312268959737394553510894720099165193981333775907531107232556909478156441457899797515694348816961762796703443502856101079430585547997496001098926600499728389113862894833789669213630332988693669889340482430613291490613803204484751470676686041002772556117213612152322606737150858116122936539131795111263513114569794532805886643087299918196635113037777138666914296986040549274559835214505300618256105508764026461518876579387159881983544667258537064954616097750399839661065797883103731694314852301848272092388637114950059216922969842082648527035538090054093890365647676119748995243416337805666557501345234056968476142608491830438065401219751688687373709390057521910942736632126729711606256158399963682990881473178216060827021373776598901281958527655543318413664277921492723185984</span>,
<span style="color:#ae81ff">36869806815936046911848195817405817350259890871483063184373728397968909458432625046025376290214729914038387534731762237978339011724858818860181178811639468996206294711495853807311240013786226884265118119546377272154555615363105236192878292703331473547623021744317034819416624562896226194523639793573028006666236271812390759036235867495803255905843636447252225413871038762657801345647584493917576263471587347202664391908570140389126903204602391093990827188675090199750617303773574821926387194478875191828814971296674530519321530805302667925998711835019806761133078403281404889374663875077339168901297819436499920958268483684335998301056068380228873524800383911402490807139268964095165069610454677558808756444381542173782815227920906224931028457073652453777424387873533280455944646592996920617956675786286711447540353883400282402551158169958389450168079568459656526911857835375748015814860506707921852997096156275804955989964215077733621769938075413007804223217091604613132253046399456747595300404564172224333936405545921819654435437072133387523533568472443532200069133022979195685683508297337961701169394794966256415112246587706103819620428258245999539040721929317130088874161577093962579487428358736401687123174207198251449851429295</span>
        ]

hub2 <span style="color:#f92672">=</span> [
        <span style="color:#ae81ff">592169079372093727306100216011395857825646323934289480976073629037543922902098120901138454462177159996376654176248238979132528728327590301098966139983157980612320563496546128644967731000716697705104079039156276714872147463350811303393260622707024952543509891692246246277965823414460326811240048060543656588688604452353899779068825120910282167004715339763187734797180326976132213325054697165320479166356562518029805927741656605174809726397565772271562066078076105491745903986597877400370206718954975288721072048333678609055008135809089304229015364348490924974097403734627265297637171818849461766523691595241613878709865506436588268999163342945070495338153600520537498539457396582804692959296612715752573140296135784933206146091436617979599749774330699946637591406356289409716084034451049094715202196203486088368791744107629271647320273259836915312794297246589501008666299165717722507702866033454215783240025504356157664454861755286285777763585177751796252655008206383024707883077513745863312079349790275094080707502392866946325796914450602264462588722052297430827681750827349094323968337670311272933785838850649376115667223821665435911506351891489985627506615492005617098615432522564204152887767244129985681083657783356557756654335186</span>,
<span style="color:#ae81ff">373940646416832740878733255707567753033716583448402000789202767511920210382830343955553654111486728333980557319799362514960627879016797491389812007768832730979916230647641872759001906846747977631675704310179448857128160385701185892914523053669366534408863734305635222625590986006420486092550427301086984563126480814987024980594613542978310129247678826691418335300577577527951623696426435497835228167084738007750914270251001921329521479047662848650808989996085600197309361410863238526802127877523767262921515150984998560136647154865791163316503073285223966216441025637452229043510097323724381056976302288136843260163922706692913035222445496716008888946581535004546355744211680390731257309941902587303353139951102244865270295414474488798335404630458489706639805186573874814586736746232358849677477533671968344154242963289415569487579895910660999043578737461300406937828924818002658292769882181668784501439254131996848948120781562158861495883827848139425862249576454689133681009549361314460818658995959098228995702202268649635363105549975932395335076521137604288520082040121286614922986554652700056148966514178935952363036963217619879899671383604638416567950421350546204434902113156720006282720889591288850271076074941927715678306057176</span>,
<span style="color:#ae81ff">527630926460622936571385649841758214453416849039412401087443444317101857090904711485538107058823056085840539073345920792871368232355475394571098380596835468509997340505604333730547799560998822989747473780307779717715522787724471724766494090783971030594671013168209717686720448579582618378459567979027822271918653169622428153856198907810040224340270362413432495029672123261375400927159831537760709974778708160583252613784358234858583174544777979242887938827573604837766801998381379999076416444683891078093889686055482709838668356120916040352123019019255084513769603803814947774554028717814638951416291274696771515474086351482107953150253616922787262398450376249126999644026382478413080973933173079111305142716133389111399235545279259017424722601848670061556859163943895466553927946412523750166582734005733378328468250568944945912238495877929717101722314678120172228493787964904072583905721074766711732215815561012960394537195757832959268603775112932862105945720853959285187521763557915356428113876893276879775603217718981852114599706699524551973934242045743122744146361596971245034059345915315495232135483464496114770357536576200511490922413208178149869347802988786513451486411409887164516065062084917556120712465074206435831498113605</span>,
<span style="color:#ae81ff">8786437178698940322877889807009957616777351844979869726962356553244050911283984280960665761649310895230455072977431415102053987735969326553978994853162483051544656873294555116009995592043183070208706258164840540599577072097104139505857517663273929851202628854185356185647194933800084230503413037858893307713037149307477830536758283681093517617820169181420796105338681582230788318108428132051793761014952837330456262272828627355701464740578197966332613127307037255647286823496355917642353327912440019621838870388091824748629637425759125214639885130163183752378908729773517053259212525494555880921052679512582051516604297098204363525081039382358483926727008679327719083138865969291911863630382097160230960738043575559330264018212774424527719153248563876760067931499029384228993253862501939337758514377472011933279273181144830381169849387893799390755052093069179605579485710343655570028592595882436632426527654452895431758715126580164902410286422637215098476316042367916779431052267545769495994723721129943616294879642305545894912914632980455031755879087401575310699765408473606166727137934224515998416625122213056208800095077933103150699272650116151674702438463062734472714004926103668378506804002740045547964716693536349447660850580</span>,
<span style="color:#ae81ff">205314962204511500352858372254132533167549960825498949618514841570703199264867431580754674275990554478140637041427842111391746883257447120035947621456863890934062044010795443059281736346976175772415034838334682726635263432655537852942177334888025283748611576171534251461847349566505628290587224150869640386437623371249743165260396675220683302142805646368906930575140628610003919131999295855501215111393294818218799982703289304596989070475000081175510085432290264502023736899104746316830742226946395027029820825791831870857382647221322734605026210073093918331247494307555600335550942340526536281372036612138713881098866303169425501998978400008829873080965592009371176208668290074288903681417933657472279670688597862835627506340169978450918788539270346340385928840299573889292189531738082166408734046381423516467694328971385421907314814283489322619386570046183556572383980777277173349209330683424343658179781015072259378576130442222984963071166207642585589822061597282467850868050737957726423713761694231879497037175627546427449730638216214828463003483408928375620315193290871300316930139260521382533279767663839278693750409419493280753368451508802658272220767624766390639285308433607255253282702383762149755935518922075584637512494819</span>,
<span style="color:#ae81ff">271453634732502613378948161256470991260052778799128789839624515809143527363206813219580098196957510291648493698144497567392065251244844074992734669490296293997386198359280316655904691639367482203210051809125904410431506925238374843856343243276508280641059690938930957474434518308646618959004216831130099873532714372402117796666560677624822509159287675432413016478948594640872091688482149004426363946048517480052906306290126242866034249478040406351940088231081456109195799442996799641647167552689564613346415247906852055588498305665928450828756152103096629274760601528737639415361467941349982213641454967962723875032638267311935042334584913897338553953961877439389588793074211502597238465542889335363559052368180212013206172712561221352833891640659020253527584706465205486408990762759230842192028381048563437724528409174790022752557512795782713125166158329880702730769957185428522011430144840232256419113631679343171680631630775266488738173707357123139368825087043785842169049943237537188129367275730984789479909103397937113837824575137021012333461552176687570010445744268373840742899299977372834041925102853718964831225250407279578465008537542659673685686242773379131904890865110699190451534445434533919127658976874721029586168106207</span>
        ]
<span style="color:#66d9ef">assert</span> len(hub1) <span style="color:#f92672">==</span> len(hub2)
length <span style="color:#f92672">=</span> len(hub2)
baseCipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(length):
    c1 <span style="color:#f92672">=</span> hub1[i]
    c2 <span style="color:#f92672">=</span> hub2[i]
    m <span style="color:#f92672">=</span> common_modulus(n,c1,c2,e1,e2)
    baseCipher <span style="color:#f92672">+=</span> libnum<span style="color:#f92672">.</span>n2s(m)

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;cipher.txt&#34;</span>,<span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> f:
    f<span style="color:#f92672">.</span>write(baseCipher)


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_base64_diff_value</span>(s1, s2):
    base64chars <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#39;</span>
    res <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> xrange(len(s2)):
        <span style="color:#66d9ef">if</span> s1[i] <span style="color:#f92672">!=</span> s2[i]:
            <span style="color:#66d9ef">return</span> abs(base64chars<span style="color:#f92672">.</span>index(s1[i]) <span style="color:#f92672">-</span> base64chars<span style="color:#f92672">.</span>index(s2[i]))
    <span style="color:#66d9ef">return</span> res


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve_stego</span>():
    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;cipher.txt&#39;</span>, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> f:
        file_lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
        bin_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
        <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> file_lines:
            steg_line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
            norm_line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;base64&#39;</span>)<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;base64&#39;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
            diff <span style="color:#f92672">=</span> get_base64_diff_value(steg_line, norm_line)
            print diff
            pads_num <span style="color:#f92672">=</span> steg_line<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#39;=&#39;</span>)
            <span style="color:#66d9ef">if</span> diff:
                bin_str <span style="color:#f92672">+=</span> bin(diff)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>zfill(pads_num <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>)
            <span style="color:#66d9ef">else</span>:
                bin_str <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">*</span> pads_num <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>
            print goflag(bin_str)


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">goflag</span>(bin_str):
    res_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> xrange(<span style="color:#ae81ff">0</span>, len(bin_str), <span style="color:#ae81ff">8</span>):
        res_str <span style="color:#f92672">+=</span> chr(int(bin_str[i:i <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>], <span style="color:#ae81ff">2</span>))
    <span style="color:#66d9ef">return</span> res_str


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    solve_stego()
</code></pre></div><hr>
<p>base64隐写其实是利用base64编码原理的一个漏洞进行隐写来进行隐藏数据的一种隐写数据的方式。具体隐写原理和解密脚本，可以参照这篇博客：<a href="https://blog.csdn.net/qq_43431158/article/details/109525795">MISC | base64隐写_Lemon&rsquo;s blog-CSDN博客</a> 讲的很清楚，base64隐写其实也就那回事了。</p>
<h2 id="0x1-wustctf2020大数计算">0x1 [WUSTCTF2020]大数计算</h2>
<p>大数计算，应该是数学题目吧，看看吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag等于 wctf2020{Part1-Part2-Part3-Part4} 每一Part都为数的十六进制形式（不需要0x)，并用 &#39;-&#39; 连接
Part1 = 2020*2019*2018* ... *3*2*1 的前8位
Part2 = 520^1314 + 2333^666 的前8位
Part3 = 宇宙终极问题的答案 x,y,z绝对值和的前8位
Part4 = 见图片附件，计算结果乘上1314
</code></pre></div><p>感觉也不过如此嘛，解决思路还是比较简单的，采用数学计算加搜索引擎应该就解决了</p>
<p>不过还是根据题目写个完整的exp吧，采用sage脚本（由于涉及到的数学计算比较多，选择sagemath编写脚本会简单许多）：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">part1 <span style="color:#f92672">=</span>int(str(factorial(<span style="color:#ae81ff">2020</span>))[:<span style="color:#ae81ff">8</span>])

part2 <span style="color:#f92672">=</span>int(str((<span style="color:#ae81ff">520</span><span style="color:#f92672">**</span><span style="color:#ae81ff">1314</span>) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">2333</span><span style="color:#f92672">**</span><span style="color:#ae81ff">666</span>))[:<span style="color:#ae81ff">8</span>])

x_ <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">80538738812075974</span>
y_ <span style="color:#f92672">=</span> <span style="color:#ae81ff">80435758145817515</span>
z_ <span style="color:#f92672">=</span> <span style="color:#ae81ff">12602123297335631</span>
part3 <span style="color:#f92672">=</span>int(str(abs(x_)<span style="color:#f92672">+</span>abs(y_)<span style="color:#f92672">+</span>abs(z_))[:<span style="color:#ae81ff">8</span>])

x <span style="color:#f92672">=</span> var(x)
f(x) <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>x
result <span style="color:#f92672">=</span> integral(f,x,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">22</span>)
part4 <span style="color:#f92672">=</span> (result<span style="color:#f92672">+</span><span style="color:#ae81ff">36</span>)<span style="color:#f92672">*</span><span style="color:#ae81ff">1314</span>

flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;wctf2020{&#34;</span><span style="color:#f92672">+</span>hex(part1)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;-&#34;</span><span style="color:#f92672">+</span>hex(part2)[<span style="color:#ae81ff">2</span>:] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;-&#34;</span><span style="color:#f92672">+</span> hex(part3)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;-&#34;</span><span style="color:#f92672">+</span>hex(part4)[<span style="color:#ae81ff">2</span>:] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;}&#34;</span>
print(flag)
</code></pre></div><p>使用sage运行一下，flag就有了：(中间的x,y,z是宇宙终极问题的解)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">wctf2020{24d231f-403cfd3-108db5e-a6d10}
</code></pre></div><h2 id="0x2-坏蛋是雷宾">0x2 坏蛋是雷宾</h2>
<p>看题目还是挺有意思的，看看题目具体是什么吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">老牌刺客之王混进了女王的住所。一天，女王得到了一个匿名举报，说她的侍卫里有一个刺客，叫做Rabin，而他的信息就在一份文件里，文件中有附带一个Pk，是523798549，密文是162853095，校验码二进制值是110001，根据说明是放在明文后一起加密的，明文与密文长度相同。加密算法和这位老牌刺客同名。快拯救女王，答案是求得的明文，进行32位md5小写哈希字符串，提交即可。 注意：得到的 flag 请包上 flag{} 提交
</code></pre></div><p>看到Rabin这个词汇，应该是比较敏感的，因为Rabin算法是一个非常有名的RSA扩展算法，这道题目应该考察的也是Rabin算法进行求解的。应该是使用一个Rabin算法，Rabin算法有很多轮子，可以直接搬来用，或者稍微修改修改也就能得到相应的结果。</p>
<p>题目中Pk就是n， 密文就是c，校验码二进制值是Rabin算法得出四个结果，四个结果的二进制值最后六位数字就是校验码二进制值。只有校验码二进制值与题目给出的校验码二进制值相符合的结果，才是本题的flag</p>
<p>而且题目中的n值非常小，可以直接进行分解。</p>
<p>这里给出一个小脚本求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">import</span> hashlib

c <span style="color:#f92672">=</span> <span style="color:#ae81ff">162853095</span>
p <span style="color:#f92672">=</span> <span style="color:#ae81ff">49123</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">10663</span>
n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q

r <span style="color:#f92672">=</span> pow(c,(p<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">4</span>,p)
s <span style="color:#f92672">=</span> pow(c,(q<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">4</span>,q)
a <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(p,q)
b <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(q,p)
x <span style="color:#f92672">=</span>(a<span style="color:#f92672">*</span>p<span style="color:#f92672">*</span>s<span style="color:#f92672">+</span>b<span style="color:#f92672">*</span>q<span style="color:#f92672">*</span>r)<span style="color:#f92672">%</span>n
y <span style="color:#f92672">=</span>(a<span style="color:#f92672">*</span>p<span style="color:#f92672">*</span>s<span style="color:#f92672">-</span>b<span style="color:#f92672">*</span>q<span style="color:#f92672">*</span>r)<span style="color:#f92672">%</span>n

m1 <span style="color:#f92672">=</span>  x<span style="color:#f92672">%</span>n
m2 <span style="color:#f92672">=</span> (<span style="color:#f92672">-</span>x)<span style="color:#f92672">%</span>n
m3 <span style="color:#f92672">=</span> y<span style="color:#f92672">%</span>n
m4 <span style="color:#f92672">=</span> (<span style="color:#f92672">-</span>y)<span style="color:#f92672">%</span>n

yz <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;110001&#39;</span>
result <span style="color:#f92672">=</span> [m1,m2,m3,m4]
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> result:
    bin_i <span style="color:#f92672">=</span> bin(i)[<span style="color:#ae81ff">2</span>:]
    <span style="color:#66d9ef">if</span>  bin_i[<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>:] <span style="color:#f92672">==</span> yz:
        m <span style="color:#f92672">=</span> str(int(bin_i[:<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>],<span style="color:#ae81ff">2</span>))
        flag <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5(m)<span style="color:#f92672">.</span>hexdigest()
        print flag
</code></pre></div><p>运行脚本，就能拿到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">ca5cec442b2734735406d78c88e90f35
</code></pre></div><h2 id="0x3-hdctf2019together">0x3 [HDCTF2019]together</h2>
<p>看题目together，第一时间相到的应该是RSA题目的共模攻击，看看我的猜测对不对：</p>
<p>题目给出四个文件，两个公钥文件，两个明文文件。非常明显的是RSA共模攻击的题目，下面就是看看RSA公钥的modulus是否相同，就可以进一步确定是否是RSA共模攻击。</p>
<p>经过读取文件进行测试，发现两个公钥文件的modulus数值是一样的。</p>
<p>下面直接丢脚本求解吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.PublicKey <span style="color:#f92672">import</span> RSA
<span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">import</span> base64
<span style="color:#f92672">import</span> libnum

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_key</span>(key_file):
    <span style="color:#66d9ef">with</span> open(key_file,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
        data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
        key <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>importKey(data)
    <span style="color:#66d9ef">return</span> key

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_c</span>(flag_file):
    <span style="color:#66d9ef">with</span> open(flag_file) <span style="color:#66d9ef">as</span> f:
        data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
        c <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>s2n(base64<span style="color:#f92672">.</span>b64decode(data))
    <span style="color:#66d9ef">return</span> c
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">common_modulus</span>(n,c1,c2,e1,e2):
    <span style="color:#66d9ef">assert</span>(libnum<span style="color:#f92672">.</span>gcd(e1, e2))
    _, s1, s2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>gcdext(e1, e2)
    <span style="color:#66d9ef">if</span> s1 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
        s1 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s1
        c1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c1,n)
    <span style="color:#66d9ef">if</span> s2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
        s2 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s2
        c2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c2,n)
    <span style="color:#66d9ef">return</span> pow(c1,s1,n) <span style="color:#f92672">*</span> pow(c2,s2,n) <span style="color:#f92672">%</span> n

key1 <span style="color:#f92672">=</span> get_key(<span style="color:#e6db74">&#34;pubkey1.pem&#34;</span>)
key2 <span style="color:#f92672">=</span> get_key(<span style="color:#e6db74">&#34;pubkey2.pem&#34;</span>)

<span style="color:#66d9ef">assert</span>(key1<span style="color:#f92672">.</span>n <span style="color:#f92672">==</span> key2<span style="color:#f92672">.</span>n)
n <span style="color:#f92672">=</span> key1<span style="color:#f92672">.</span>n
e1 <span style="color:#f92672">=</span> key1<span style="color:#f92672">.</span>e
e2 <span style="color:#f92672">=</span> key2<span style="color:#f92672">.</span>e
c1 <span style="color:#f92672">=</span> get_c(<span style="color:#e6db74">&#34;myflag1&#34;</span>)
c2 <span style="color:#f92672">=</span> get_c(<span style="color:#e6db74">&#34;myflag2&#34;</span>)

m <span style="color:#f92672">=</span> common_modulus(n,c1,c2,e1,e2)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
print flag
</code></pre></div><p>运行脚本，就能得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{23re_SDxF_y78hu_5rFgS}
</code></pre></div><h2 id="0x4-mrctf2020babyrsa">0x4 [MRCTF2020]babyRSA</h2>
<p>RSA题目，应该会有点意思，看看题目具体是什么：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> sympy
<span style="color:#f92672">import</span> random
<span style="color:#f92672">from</span> gmpy2 <span style="color:#f92672">import</span> gcd, invert
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> getPrime, isPrime, getRandomNBitInteger, bytes_to_long, long_to_bytes
<span style="color:#f92672">from</span> z3 <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;MRCTF</span><span style="color:#e6db74">{xxxx}</span><span style="color:#e6db74">&#34;</span>
base <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">GCD</span>(A):
    B <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, len(A)):
        B <span style="color:#f92672">=</span> gcd(A[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], A[i])
    <span style="color:#66d9ef">return</span> B


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gen_p</span>():
    P <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">17</span>)]
    P[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">128</span>)
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">17</span>):
        P[i] <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(P[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
    print(<span style="color:#e6db74">&#34;P_p :&#34;</span>, P[<span style="color:#ae81ff">9</span>])
    n <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">17</span>):
        n <span style="color:#f92672">*=</span> P[i]
    p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
    factor <span style="color:#f92672">=</span> pow(p, base, n)
    print(<span style="color:#e6db74">&#34;P_factor :&#34;</span>, factor)
    <span style="color:#66d9ef">return</span> sympy<span style="color:#f92672">.</span>nextprime(p)


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gen_q</span>():
    sub_Q <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
    Q_1 <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
    Q_2 <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
    Q <span style="color:#f92672">=</span> sub_Q <span style="color:#f92672">**</span> Q_2 <span style="color:#f92672">%</span> Q_1
    print(<span style="color:#e6db74">&#34;Q_1: &#34;</span>, Q_1)
    print(<span style="color:#e6db74">&#34;Q_2: &#34;</span>, Q_2)
    print(<span style="color:#e6db74">&#34;sub_Q: &#34;</span>, sub_Q)
    <span style="color:#66d9ef">return</span> sympy<span style="color:#f92672">.</span>nextprime(Q)


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    _E <span style="color:#f92672">=</span> base
    _P <span style="color:#f92672">=</span> gen_p()
    _Q <span style="color:#f92672">=</span> gen_q()
    <span style="color:#66d9ef">assert</span> (gcd(_E, (_P <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> (_Q <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>)
    _M <span style="color:#f92672">=</span> bytes_to_long(flag)
    _C <span style="color:#f92672">=</span> pow(_M, _E, _P <span style="color:#f92672">*</span> _Q)
    print(<span style="color:#e6db74">&#34;Ciphertext = &#34;</span>, _C)
<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">P_p : 206027926847308612719677572554991143421
</span><span style="color:#e6db74">P_factor : 213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839
</span><span style="color:#e6db74">Q_1:  103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521
</span><span style="color:#e6db74">Q_2:  151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743
</span><span style="color:#e6db74">sub_Q:  168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651
</span><span style="color:#e6db74">Ciphertext =  1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</code></pre></div><p>一个python文件，应该是这道题目的求解关键，考察的应该就是对于加密算法的审计和算法的逆向运算咯，开始搞吧！</p>
<p>核心代码应该就是这个：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    _E <span style="color:#f92672">=</span> base
    _P <span style="color:#f92672">=</span> gen_p()
    _Q <span style="color:#f92672">=</span> gen_q()
    <span style="color:#66d9ef">assert</span> (gcd(_E, (_P <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> (_Q <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>)
    _M <span style="color:#f92672">=</span> bytes_to_long(flag)
    _C <span style="color:#f92672">=</span> pow(_M, _E, _P <span style="color:#f92672">*</span> _Q)
    print(<span style="color:#e6db74">&#34;Ciphertext = &#34;</span>, _C)
</code></pre></div><p>根据核心代码，可以找到：</p>
<p><code>base</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">base <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</code></pre></div><p><code>gen_p()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gen_p</span>():
    P <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">17</span>)]
    P[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">128</span>)
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">17</span>):
        P[i] <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(P[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
    print(<span style="color:#e6db74">&#34;P_p :&#34;</span>, P[<span style="color:#ae81ff">9</span>])
    n <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">17</span>):
        n <span style="color:#f92672">*=</span> P[i]
    p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
    factor <span style="color:#f92672">=</span> pow(p, base, n)
    print(<span style="color:#e6db74">&#34;P_factor :&#34;</span>, factor)
    <span style="color:#66d9ef">return</span> sympy<span style="color:#f92672">.</span>nextprime(p)
</code></pre></div><p><code>gen_q()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gen_q</span>():
    sub_Q <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
    Q_1 <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
    Q_2 <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
    Q <span style="color:#f92672">=</span> sub_Q <span style="color:#f92672">**</span> Q_2 <span style="color:#f92672">%</span> Q_1
    print(<span style="color:#e6db74">&#34;Q_1: &#34;</span>, Q_1)
    print(<span style="color:#e6db74">&#34;Q_2: &#34;</span>, Q_2)
    print(<span style="color:#e6db74">&#34;sub_Q: &#34;</span>, sub_Q)
    <span style="color:#66d9ef">return</span> sympy<span style="color:#f92672">.</span>nextprime(Q)
</code></pre></div><p>核心代码就是这些，然后看看具体的输出结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">P_p : 206027926847308612719677572554991143421
</span><span style="color:#e6db74">P_factor : 213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839
</span><span style="color:#e6db74">Q_1:  103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521
</span><span style="color:#e6db74">Q_2:  151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743
</span><span style="color:#e6db74">sub_Q:  168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651
</span><span style="color:#e6db74">Ciphertext =  1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</code></pre></div><p>分析核心代码后，可以大致推导出来：
$$
P = \text{nextprime}(p^{base} \text{mod}n)
$$</p>
<p>$$
Q = sub_Q ^ {Q_2} \text{mod}Q_1
$$</p>
<p>$$
C = M^E \text{mod}(P\times Q)
$$</p>
<p>根据算法泄露出来的数据，进行还原数据<code>P</code>和<code>Q</code> ，然后根据<code>p</code>和<code>Q</code>的数值进行正常的RSA解密运算，这道题目就over了。</p>
<p>下面给出完整的EXP：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> sympy
<span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">import</span> libnum
P_p <span style="color:#f92672">=</span> <span style="color:#ae81ff">206027926847308612719677572554991143421</span>
P_factor <span style="color:#f92672">=</span> <span style="color:#ae81ff">213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839</span>
Q_1 <span style="color:#f92672">=</span>  <span style="color:#ae81ff">103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521</span>
Q_2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743</span>
sub_Q <span style="color:#f92672">=</span> <span style="color:#ae81ff">168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651</span>
Ciphertext <span style="color:#f92672">=</span> <span style="color:#ae81ff">1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832</span>
base <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
_Q <span style="color:#f92672">=</span>sympy<span style="color:#f92672">.</span>nextprime(pow(sub_Q,Q_2,Q_1))
P <span style="color:#f92672">=</span> [<span style="color:#66d9ef">None</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">17</span>
P[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> P_p
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">9</span>):
    P[<span style="color:#ae81ff">9</span><span style="color:#f92672">-</span>(i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)] <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>prevprime(P[<span style="color:#ae81ff">9</span><span style="color:#f92672">-</span>i])
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">16</span>):
    P[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(P[i])

P_phi <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
P_n <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> P:
    P_n <span style="color:#f92672">*=</span> i
    P_phi <span style="color:#f92672">*=</span> (i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
<span style="color:#66d9ef">assert</span>(libnum<span style="color:#f92672">.</span>gcd(base,P_phi)<span style="color:#f92672">==</span><span style="color:#ae81ff">1</span>)
P_d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(base,P_phi)
p <span style="color:#f92672">=</span> pow(P_factor, P_d, P_n)
_P <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(p)

phi <span style="color:#f92672">=</span> (_Q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> (_P<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
n <span style="color:#f92672">=</span> _Q <span style="color:#f92672">*</span> _P
_E <span style="color:#f92672">=</span> base
_D <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(_E,phi)
_M <span style="color:#f92672">=</span> pow(Ciphertext, _D, n)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(_M)
print flag
</code></pre></div><p>运行一下脚本，flag就出来了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">MRCTF{sti11_@_b@by_qu3st10n}
</code></pre></div><h2 id="0x5-网鼎杯-2020-青龙组you_raise_me_up">0x5 [网鼎杯 2020 青龙组]you_raise_me_up</h2>
<p>题目目前看不出什么提示来，直接看题目吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python</span>
<span style="color:#75715e"># -*- coding: utf-8 -*-</span>
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">import</span> random

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">512</span>
m <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">2</span>, n<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">|</span> <span style="color:#ae81ff">1</span>
c <span style="color:#f92672">=</span> pow(m, bytes_to_long(flag), n)
print <span style="color:#e6db74">&#39;m = &#39;</span> <span style="color:#f92672">+</span> str(m)
print <span style="color:#e6db74">&#39;c = &#39;</span> <span style="color:#f92672">+</span> str(c)

<span style="color:#75715e"># m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span>
<span style="color:#75715e"># c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span>
</code></pre></div><p>非常简单的一个小脚本，但是脚本过程中的加密过程有些特别，麻雀虽小五脏俱全。真可谓浓缩的都是精华，看看大致的加密过程吧：
$$
n = 2^{512}
$$</p>
<p>$$
c = m^{\text{bytes_to_long(flag)}}\text{mod}n
$$</p>
<p>一时半会儿看不出怎么进行求解，求助了下大佬的博客，发现这道题目考察的是一个离散对数问题，即：
$$
\text{bytes_to_long(flag)} = log_{(m\ \text{mod}\ n)} (c\ \text{mod}\ n)
$$
对于这种离散对数的问题，可以使用sage求解，这里使用sage脚本进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">512</span>
m <span style="color:#f92672">=</span> <span style="color:#ae81ff">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span>
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(int(discrete_log(c,mod(m,n))))

print(flag)
</code></pre></div><p>非常简单的脚本，运行一下flag就有了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{5f95ca93-1594-762d-ed0b-a9139692cb4a}
</code></pre></div><h2 id="0x6-bjdctf2020polybius">0x6 [BJDCTF2020]Polybius</h2>
<p>看题目应该是Polybius密码，一种古典密码。看一下题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">密文：ouauuuoooeeaaiaeauieuooeeiea
hint：VGhlIGxlbmd0aCBvZiB0aGlzIHBsYWludGV4dDogMTQ=
flag:解出明文后，请加上BJD{}
</code></pre></div><p>波利比奥斯方阵密码，也叫ADFGX密码，一种棋盘密码，解密方式也相对比较简单。因为是一种棋盘密码，也就是根据方阵进行加密。</p>
<p>对hint进行解密，得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">The length of this plaintext: 14
</code></pre></div><p>密文长度是14x2位，更是说明了这是Polybius方阵密码。不过观察密文内容，发现是aeiou五个字母的重复出现而不是adfgx五个字母的反复出现，因此暂时找不到良好的对应关系，只得进行爆破求解，然后从解出的结果中找到flag。借网上的一个<a href="https://www.cnblogs.com/labster/p/13842837.html">脚本</a>稍微修改一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> itertools
ciper <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;ouauuuoooeeaaiaeauieuooeeiea&#39;</span>
head <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;aeoiu&#39;</span>
headlist <span style="color:#f92672">=</span> []
num_headlist <span style="color:#f92672">=</span> []

x <span style="color:#f92672">=</span> itertools<span style="color:#f92672">.</span>permutations(head,<span style="color:#ae81ff">5</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> x:
    temp <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(i)
    headlist<span style="color:#f92672">.</span>append(temp)

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> headlist:
    temp <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> ciper:
        temp <span style="color:#f92672">+=</span> str(i<span style="color:#f92672">.</span>index(j) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
    num_headlist<span style="color:#f92672">.</span>append(temp)

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> num_headlist:
    temp <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,len(i),<span style="color:#ae81ff">2</span>):
        xx <span style="color:#f92672">=</span> (int(i[j]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> int(i[j<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]) <span style="color:#f92672">+</span> <span style="color:#ae81ff">96</span>
        <span style="color:#66d9ef">if</span> xx<span style="color:#f92672">&gt;</span>ord(<span style="color:#e6db74">&#39;i&#39;</span>):
            xx<span style="color:#f92672">+=</span><span style="color:#ae81ff">1</span>
        temp <span style="color:#f92672">+=</span> chr(xx)
    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;flag&#39;</span> <span style="color:#f92672">in</span> temp:
        print temp
</code></pre></div><p>运行一下脚本，flag就有了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flagispolybius
flagkxoplubkyx
</code></pre></div><h2 id="0x7-wustctf2020情书">0x7 [WUSTCTF2020]情书</h2>
<p>看样子好像挺有意思的样子，看看题目吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Premise: Enumerate the alphabet by 0、1、2、.....  、25
Using the RSA system 
Encryption:0156 0821 1616 0041 0140 2130 1616 0793
Public Key:2537 and 13
Private Key:2537 and 937

flag: wctf2020{Decryption}
</code></pre></div><p>看样子是一个小rsa题目，题目公钥和私钥都告知了，密文也有，应该是比较简单的题目。</p>
<p>题目文件第一行提示了是得到的数字是根据字母表的顺序排列，0-25的样子，应该是每段加密的文段进行解密后都是一个数字，数字映射到字母表中就是相应的密码了。</p>
<p>写个简单的脚本就可以处理了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> string

letters <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>lowercase
c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0156 0821 1616 0041 0140 2130 1616 0793&#34;</span>
c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
N <span style="color:#f92672">=</span> <span style="color:#ae81ff">2537</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">13</span>
d <span style="color:#f92672">=</span> <span style="color:#ae81ff">937</span>

m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(letters[pow(int(i),d,N)] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list)
print m
</code></pre></div><p>运行脚本，即可得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">iloveyou
</code></pre></div><h2 id="0x8-bjdctf2020编码与调制">0x8 [BJDCTF2020]编码与调制</h2>
<p>看题目，这道题目应该是通信的题目。</p>
<p>看看题目内容吧：</p>
<p>两个文件，一个题目求解内容和一个提示图片</p>
<p>题目内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">密文：2559659965656A9A65656996696965A6695669A9695A699569666A5A6A6569666A59695A69AA696569666AA6
</code></pre></div><p>提示图片：</p>
<p>![I&rsquo;m hint!!!](/images/BUUCTF-CRYPTO-[81-96]_writeup/I&rsquo;m hint!!!.png)</p>
<p>大致看一下图片，应该是曼彻斯特编码进行编码的调制。但是题目有两种可能的结果，一种是曼彻斯特编码，另一种就是差分曼彻斯特编码。由于不知道这道题目要求求解的那种编码，只能分别解码。</p>
<p>写个脚本进行测试：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum

c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x2559659965656A9A65656996696965A6695669A9695A699569666A5A6A6569666A59695A69AA696569666AA6</span>
c_bin <span style="color:#f92672">=</span> bin(c)[<span style="color:#ae81ff">2</span>:]
m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,len(c_bin),<span style="color:#ae81ff">2</span>):
    test <span style="color:#f92672">=</span> c_bin[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>]
    <span style="color:#66d9ef">if</span> test <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;10&#34;</span>:
        m <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;1&#34;</span>
    <span style="color:#66d9ef">elif</span> test <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;01&#34;</span>:
        m <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;0&#34;</span>

print libnum<span style="color:#f92672">.</span>n2s(int(m,<span style="color:#ae81ff">2</span>))

Dif_m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>,len(c_bin),<span style="color:#ae81ff">3</span>):
    test <span style="color:#f92672">=</span> c_bin[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>]
    <span style="color:#66d9ef">if</span> (test <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;00&#34;</span> <span style="color:#f92672">or</span> test <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;11&#34;</span>):
        Dif_m <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;1&#34;</span>
    <span style="color:#66d9ef">elif</span> (test <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;10&#34;</span> <span style="color:#f92672">or</span> test <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;01&#34;</span>):
        Dif_m <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;0&#34;</span>
print libnum<span style="color:#f92672">.</span>n2s(int(Dif_m,<span style="color:#ae81ff">2</span>))
</code></pre></div><p>运行发现，编码是Manchester编码，而不是差分Manchester编码。得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">BJD{DifManchestercode}
</code></pre></div><h2 id="0x9-actf新生赛crypto-classic1">0x9 [ACTF新生赛]crypto-classic1</h2>
<p>看样子是古典密码学题目没错了，看看都有些什么东西吧：</p>
<p>两个文件，一个提示文件，一个加密的压缩文件。提示文件应该是用来解密压缩文件的。</p>
<p>hint.txt</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">哇，这里有压缩包的密码哦，于是我低下了头，看向了我的双手，试图从中找到某些规律
xdfv ujko98 edft54 xdfv pok,.; wsdr43
</code></pre></div><p>仔细观察一下，发现是非常有规律的，就是键盘密码，观察一下键盘就可以得到结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">circle
</code></pre></div><p>这应该就是压缩文件的密码，进行解密得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">SRLU{OWSI_S_RDPKHARSA_NXYTFTJT}
</code></pre></div><p>由于压缩文件名是<code>vigenere.zip</code>, 应该是维吉尼亚密码，根据题目的特点进行观察发现SRLU是对应着ACTF，密钥应该是就是sp。求解得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">ACTF{WHAT_A_CLASSICAL_VIGENERE}
</code></pre></div><hr>
<p>buu的题目好像是错误，buu给到的 SRLU{LZPL_S_UASHKXUPD_NXYTFTJT}</p>
<p>正确的的数据是 SRLU{OWSI_S_RDPKHARSA_NXYTFTJT}</p>
<h2 id="0xa-utctf2020basic-crypto">0xA [UTCTF2020]basic-crypto</h2>
<p>看样子应该是一道古典密码学的题目，应该是层层套娃的。</p>
<p>看看题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt
</code></pre></div><p>一堆二进制码，应该需要进行转码，将二进制码转成字符，可以使用个非常简单的脚本处理一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
c <span style="color:#f92672">=</span> <span style="color:#e6dbspan><span style="color:#e6db74">&#34;</span>

c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
c_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
    c_str <span style="color:#f92672">+=</span> libnum<span style="color:#f92672">.</span>n2s(int(i,<span style="color:#ae81ff">2</span>))

print c_str
</code></pre></div><p>得到一个结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Uh-oh, looks like we have another block of text, with some sort of special encoding. Can you figure out what this encoding is? (hint: if you look carefully, you&#39;ll notice that there only characters present are A-Z, a-z, 0-9, and sometimes / and +. See if you can find an encoding that looks like this one.)
TmV3IGNoYWxsZW5nZSEgQ2FuIHlvdSBmaWd1cmUgb3V0IHdoYXQncyBnb2luZyBvbiBoZXJlPyBJdCBsb29rcyBsaWtlIHRoZSBsZXR0ZXJzIGFyZSBzaGlmdGVkIGJ5IHNvbWUgY29uc3RhbnQuIChoaW50OiB5b3UgbWlnaHQgd2FudCB0byBzdGFydCBsb29raW5nIHVwIFJvbWFuIHBlb3BsZSkuCmt2YnNxcmQsIGl5ZSdibyBrdnd5Y2QgZHJvYm8hIFh5ZyBweWIgZHJvIHBzeGt2IChreG4gd2tpbG8gZHJvIHJrYm5vY2QuLi4pIHprYmQ6IGsgY2VsY2RzZGVkc3l4IG1zenJvYi4gU3ggZHJvIHB5dnZ5Z3N4cSBkb2hkLCBTJ2ZvIGRrdW94IHdpIHdvY2NrcW8ga3huIGJvenZrbW9uIG9mb2JpIGt2enJrbG9kc20gbXJrYmttZG9iIGdzZHIgayBteWJib2N6eXhub3htbyBkeSBrIG5zcHBvYm94ZCBtcmtia21kb2IgLSB1eHlneCBrYyBrIGNlbGNkc2RlZHN5eCBtc3pyb2IuIE1reCBpeWUgcHN4biBkcm8gcHN4a3YgcHZrcT8gcnN4ZDogR28gdXh5ZyBkcmtkIGRybyBwdmtxIHNjIHF5c3hxIGR5IGxvIHlwIGRybyBweWJ3a2QgZWRwdmtxey4uLn0gLSBncnNtciB3b2t4YyBkcmtkIHNwIGl5ZSBjb28gZHJrZCB6a2Rkb2J4LCBpeWUgdXh5ZyBncmtkIGRybyBteWJib2N6eXhub3htb2MgcHliIGUsIGQsIHAsIHYgaywga3huIHEga2JvLiBJeWUgbWt4IHpieWxrbHZpIGd5YnUgeWVkIGRybyBib3drc3hzeHEgbXJrYmttZG9iYyBsaSBib3p2a21zeHEgZHJvdyBreG4gc3hwb2Jic3hxIG15d3d5eCBneWJuYyBzeCBkcm8gT3hxdnNjciB2a3hxZWtxby4gS3h5ZHJvYiBxYm9rZCB3b2RyeW4gc2MgZHkgZWNvIHBib2Flb3htaSBreGt2aWNzYzogZ28gdXh5ZyBkcmtkICdvJyBjcnlnYyBleiB3eWNkIHlwZG94IHN4IGRybyBrdnpya2xvZCwgY3kgZHJrZCdjIHpieWxrbHZpIGRybyB3eWNkIG15d3d5eCBtcmtia21kb2Igc3ggZHJvIGRvaGQsIHB5dnZ5Z29uIGxpICdkJywga3huIGN5IHl4LiBZeG1vIGl5ZSB1eHlnIGsgcG9nIG1ya2JrbWRvYmMsIGl5ZSBta3ggc3hwb2IgZHJvIGJvY2QgeXAgZHJvIGd5Ym5jIGxrY29uIHl4IG15d3d5eCBneWJuYyBkcmtkIGNyeWcgZXogc3ggZHJvIE94cXZzY3Igdmt4cWVrcW8uCnJnaG54c2RmeXNkdGdodSEgcWdmIGlzYWsgY3RodHVpa2UgZGlrIHprbnRoaGt4IHJ4cWxkZ254c2xpcSByaXN5eWtobmsuIGlreGsgdHUgcyBjeXNuIGNneCBzeXkgcWdmeCBpc3hlIGtjY2d4ZHU6IGZkY3lzbntoMHZfZGk0ZHVfdmk0ZF90X3I0eXlfcnhxbGQwfS4gcWdmIHZ0eXkgY3RoZSBkaXNkIHMgeWdkIGdjIHJ4cWxkZ254c2xpcSB0dSBwZnVkIHpmdHlldGhuIGdjYyBkaXR1IHVneGQgZ2MgenN1dHIgYmhndnlrZW5rLCBzaGUgdGQgeGtzeXlxIHR1IGhnZCB1ZyB6c2Ugc2Nka3ggc3l5LiBpZ2xrIHFnZiBraHBncWtlIGRpayByaXN5eWtobmsh
</code></pre></div><p>根据解码出来的结构，应该是base64编码，还需要进一步解码，接着这个脚本进行完善：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64
c_base64 <span style="color:#f92672">=</span> c_str[c_str<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#34;Tm&#34;</span>):]
print base64<span style="color:#f92672">.</span>b64decode(c_base64)
</code></pre></div><p>看看输出结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">New challenge! Can you figure out what&#39;s going on here? It looks like the letters are shifted by some constant. (hint: you might want to start looking up Roman people).
kvbsqrd, iye&#39;bo kvwycd drobo! Xyg pyb dro psxkv (kxn wkilo dro rkbnocd...) zkbd: k celcdsdedsyx mszrob. Sx dro pyvvygsxq dohd, S&#39;fo dkuox wi wocckqo kxn bozvkmon ofobi kvzrklodsm mrkbkmdob gsdr k mybboczyxnoxmo dy k nsppoboxd mrkbkmdob - uxygx kc k celcdsdedsyx mszrob. Mkx iye psxn dro psxkv pvkq? rsxd: Go uxyg drkd dro pvkq sc qysxq dy lo yp dro pybwkd edpvkq{...} - grsmr wokxc drkd sp iye coo drkd zkddobx, iye uxyg grkd dro mybboczyxnoxmoc pyb e, d, p, v k, kxn q kbo. Iye mkx zbylklvi gybu yed dro bowksxsxq mrkbkmdobc li bozvkmsxq drow kxn sxpobbsxq mywwyx gybnc sx dro Oxqvscr vkxqekqo. Kxydrob qbokd wodryn sc dy eco pboaeoxmi kxkvicsc: go uxyg drkd &#39;o&#39; crygc ez wycd ypdox sx dro kvzrklod, cy drkd&#39;c zbylklvi dro wycd mywwyx mrkbkmdob sx dro dohd, pyvvygon li &#39;d&#39;, kxn cy yx. Yxmo iye uxyg k pog mrkbkmdobc, iye mkx sxpob dro bocd yp dro gybnc lkcon yx mywwyx gybnc drkd cryg ez sx dro Oxqvscr vkxqekqo.
rghnxsdfysdtghu! qgf isak cthtuike dik zknthhkx rxqldgnxsliq risyykhnk. ikxk tu s cysn cgx syy qgfx isxe kccgxdu: fdcysn{h0v_di4du_vi4d_t_r4yy_rxqld0}. qgf vtyy cthe disd s ygd gc rxqldgnxsliq tu pfud zftyethn gcc ditu ugxd gc zsutr bhgvykenk, she td xksyyq tu hgd ug zse scdkx syy. iglk qgf khpgqke dik risyykhnk!
</code></pre></div><p>果然继续啊套娃，看样子新挑战是词频分析，凯撒密码，使用凯撒密码求解得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">alright, you&#39;re almost there! Now for the final (and maybe the hardest...) part: a substitution cipher. In the following text, I&#39;ve taken my message and replaced every alphabetic character with a correspondence to a different character - known as a substitution cipher. Can you find the final flag? hint: We know that the flag is going to be of the format utflag{...} - which means that if you see that pattern, you know what the correspondences for u, t, f, l a, and g are. You can probably work out the remaining characters by replacing them and inferring common words in the English language. Another great method is to use frequency analysis: we know that &#39;e&#39; shows up most often in the alphabet, so that&#39;s probably the most common character in the text, followed by &#39;t&#39;, and so on. Once you know a few characters, you can infer the rest of the words based on common words that show up in the English language.
hwxdnitvoitjwxk! gwv yiqa sjxjkyau tya padjxxan hngbtwdnibyg hyiooaxda. yana jk i soid swn ioo gwvn yinu asswntk: vtsoid{x0l_ty4tk_ly4t_j_h4oo_hngbt0}. gwv ljoo sjxu tyit i owt ws hngbtwdnibyg jk fvkt pvjoujxd wss tyjk kwnt ws pikjh rxwloauda, ixu jt naioog jk xwt kw piu istan ioo. ywba gwv axfwgau tya hyiooaxda!
</code></pre></div><p>看样子最后的挑战，应该是词频分析，丢进<a href="https://quipqiup.com/">在线工具</a>得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">congratulations! you have finished the beginner cryptography challenge. here is a flag for all your hard efforts: utflag{n0w_th4ts_wh4t_i_c4ll_crypt0}. you will find that a lot of cryptography is just building off this sort of basic knowledge, and it really is not so bad after all. hope you enjoyed the challenge!
</code></pre></div><p>看来顺利完成挑战，拿到了flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">utflag{n0w_th4ts_wh4t_i_c4ll_crypt0}
</code></pre></div><h2 id="0xb-wustctf2020dp_leaking_1s_very_dangerous">0xB [WUSTCTF2020]dp_leaking_1s_very_d@angerous</h2>
<p>看题目应该是RSA题目的dp泄露问题，dp泄露问题。需要进行推导一下，和前面的RSA2题目一样，可以直接拉那道题的脚本稍微修改一下进行求解。</p>
<p>在求解之前，还是先看看题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">e = 65537
n = 156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847
c = 108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869
dp = 734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825
</code></pre></div><p>直接拉之前的dp脚本，修改数据得到修改后的脚本</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">import</span> gmpy2

e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847</span>
dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825</span>

c <span style="color:#f92672">=</span> <span style="color:#ae81ff">108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869</span>

temp <span style="color:#f92672">=</span> dp <span style="color:#f92672">*</span>e
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>,e):
    <span style="color:#66d9ef">if</span> (temp<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">%</span>i <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        x <span style="color:#f92672">=</span> (temp<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">//</span>i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
        y <span style="color:#f92672">=</span> n<span style="color:#f92672">%</span>x
        <span style="color:#66d9ef">if</span> y <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            p<span style="color:#f92672">=</span>x
            <span style="color:#66d9ef">break</span>
q <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span> p

<span style="color:#75715e"># print p</span>
<span style="color:#75715e"># print q</span>

phi <span style="color:#f92672">=</span> (q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> long_to_bytes(m)
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">wctf2020{dp_leaking_1s_very_d@angerous}
</code></pre></div><h2 id="0xc-afctf2018你听过一次一密么">0xC [AFCTF2018]你听过一次一密么？</h2>
<p>一次一密的题目，应该是比较有难度的题目。</p>
<p>看看题目吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">25030206463d3d393131555f7f1d061d4052111a19544e2e5d
0f020606150f203f307f5c0a7f24070747130e16545000035d
1203075429152a7020365c167f390f1013170b1006481e1314
0f4610170e1e2235787f7853372c0f065752111b15454e0e09
081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a18
0909075412132e247436425332281a1c561f04071d520f0b11
4116111b101e2170203011113a69001b475206011552050219
041006064612297020375453342c17545a01451811411a470e
021311114a5b0335207f7c167f22001b44520c15544801125d
06140611460c26243c7f5c167f3d015446010053005907145d
0f05110d160f263f3a7f4210372c03111313090415481d49
</code></pre></div><p>暂时看不出什么求解方法。只好看看[大佬的wp](<a href="https://www.ruanx.net/many-time-pad/">Many-Time-Pad 攻击 (ruanx.net)</a>) 发现这道题目是采用Many-Time-Pad攻击，是对于流密码的加密进行的攻击方式。目前的知识空缺还不足以让我驾驭这个这道题目的脚本和这道题目的思路方式，于是就借个脚本和大佬的wp来求解吧。</p>
<p>丢个EXP：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/python</span>
<span style="color:#75715e">## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017</span>
<span style="color:#75715e"># Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)</span>

<span style="color:#f92672">import</span> string
<span style="color:#f92672">import</span> collections
<span style="color:#f92672">import</span> sets<span style="color:#f92672">,</span> sys

<span style="color:#75715e"># 11 unknown ciphertexts (in hex format), all encrpyted with the same key</span>

c1<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;25030206463d3d393131555f7f1d061d4052111a19544e2e5d&#39;</span>
c2<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;0f020606150f203f307f5c0a7f24070747130e16545000035d&#39;</span>
c3<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;1203075429152a7020365c167f390f1013170b1006481e1314&#39;</span>
c4<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;0f4610170e1e2235787f7853372c0f065752111b15454e0e09&#39;</span>
c5<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a18&#39;</span>
c6<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;0909075412132e247436425332281a1c561f04071d520f0b11&#39;</span>
c7<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;4116111b101e2170203011113a69001b475206011552050219&#39;</span>
c8<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;041006064612297020375453342c17545a01451811411a470e&#39;</span>
c9<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;021311114a5b0335207f7c167f22001b44520c15544801125d&#39;</span>
c10<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;06140611460c26243c7f5c167f3d015446010053005907145d&#39;</span>
c11<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;0f05110d160f263f3a7f4210372c03111313090415481d49&#39;</span>
ciphers <span style="color:#f92672">=</span> [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11]
<span style="color:#75715e"># The target ciphertext we want to crack</span>
<span style="color:#75715e">#target_cipher = &#34;0529242a631234122d2b36697f13272c207f2021283a6b0c7908&#34;</span>

<span style="color:#75715e"># XORs two string</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">strxor</span>(a, b):     <span style="color:#75715e"># xor two strings (trims the longer input)</span>
    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([chr(ord(x) <span style="color:#f92672">^</span> ord(y)) <span style="color:#66d9ef">for</span> (x, y) <span style="color:#f92672">in</span> zip(a, b)])

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">target_fix</span>(target_cipher):
	<span style="color:#75715e"># To store the final key</span>
	final_key <span style="color:#f92672">=</span> [<span style="color:#66d9ef">None</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">150</span>
	<span style="color:#75715e"># To store the positions we know are broken</span>
	known_key_positions <span style="color:#f92672">=</span> set()

	<span style="color:#75715e"># For each ciphertext</span>
	<span style="color:#66d9ef">for</span> current_index, ciphertext <span style="color:#f92672">in</span> enumerate(ciphers):
		counter <span style="color:#f92672">=</span> collections<span style="color:#f92672">.</span>Counter()
		<span style="color:#75715e"># for each other ciphertext</span>
		<span style="color:#66d9ef">for</span> index, ciphertext2 <span style="color:#f92672">in</span> enumerate(ciphers):
			<span style="color:#66d9ef">if</span> current_index <span style="color:#f92672">!=</span> index: <span style="color:#75715e"># don&#39;t xor a ciphertext with itself</span>
				<span style="color:#66d9ef">for</span> indexOfChar, char <span style="color:#f92672">in</span> enumerate(strxor(ciphertext<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>), ciphertext2<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>))): <span style="color:#75715e"># Xor the two ciphertexts</span>
					<span style="color:#75715e"># If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don&#39;t know which one)</span>
					<span style="color:#66d9ef">if</span> char <span style="color:#f92672">in</span> string<span style="color:#f92672">.</span>printable <span style="color:#f92672">and</span> char<span style="color:#f92672">.</span>isalpha(): counter[indexOfChar] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span> <span style="color:#75715e"># Increment the counter at this index</span>
		knownSpaceIndexes <span style="color:#f92672">=</span> []

		<span style="color:#75715e"># Loop through all positions where a space character was possible in the current_index cipher</span>
		<span style="color:#66d9ef">for</span> ind, val <span style="color:#f92672">in</span> counter<span style="color:#f92672">.</span>items():
			<span style="color:#75715e"># If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!</span>
			<span style="color:#66d9ef">if</span> val <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">7</span>: knownSpaceIndexes<span style="color:#f92672">.</span>append(ind)
		<span style="color:#75715e">#print knownSpaceIndexes # Shows all the positions where we now know the key!</span>

		<span style="color:#75715e"># Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!</span>
		xor_with_spaces <span style="color:#f92672">=</span> strxor(ciphertext<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>),<span style="color:#e6db74">&#39; &#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">150</span>)
		<span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> knownSpaceIndexes:
			<span style="color:#75715e"># Store the key&#39;s value at the correct position</span>
			final_key[index] <span style="color:#f92672">=</span> xor_with_spaces[index]<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;hex&#39;</span>)
			<span style="color:#75715e"># Record that we known the key at this position</span>
			known_key_positions<span style="color:#f92672">.</span>add(index)

	<span style="color:#75715e"># Construct a hex key from the currently known key, adding in &#39;00&#39; hex chars where we do not know (to make a complete hex string)</span>
	final_key_hex <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join([val <span style="color:#66d9ef">if</span> val <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span> <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#39;00&#39;</span> <span style="color:#66d9ef">for</span> val <span style="color:#f92672">in</span> final_key])
	<span style="color:#75715e"># Xor the currently known key with the target cipher</span>
	output <span style="color:#f92672">=</span> strxor(target_cipher<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>),final_key_hex<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>))

	print <span style="color:#e6db74">&#34;Fix this sentence:&#34;</span>
	print <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join([char <span style="color:#66d9ef">if</span> index <span style="color:#f92672">in</span> known_key_positions <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#39;*&#39;</span> <span style="color:#66d9ef">for</span> index, char <span style="color:#f92672">in</span> enumerate(output)])<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;n&#34;</span>

	<span style="color:#75715e"># WAIT.. MANUAL STEP HERE </span>
	<span style="color:#75715e"># This output are printing a * if that character is not known yet</span>
	<span style="color:#75715e"># fix the missing characters like this: &#34;Let*M**k*ow if *o{*a&#34; = &#34;cure, Let Me know if you a&#34;</span>
	<span style="color:#75715e"># if is too hard, change the target_cipher to another one and try again</span>
	<span style="color:#75715e"># and we have our key to fix the entire text!</span>

	<span style="color:#75715e">#sys.exit(0) #comment and continue if u got a good key</span>

	target_plaintext <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cure, Let Me know if you a&#34;</span>
	print <span style="color:#e6db74">&#34;Fixed:&#34;</span>
	print target_plaintext<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;n&#34;</span>

	key <span style="color:#f92672">=</span> strxor(target_cipher<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>),target_plaintext)

	print <span style="color:#e6db74">&#34;Decrypted msg:&#34;</span>
	<span style="color:#66d9ef">for</span> cipher <span style="color:#f92672">in</span> ciphers:
		print strxor(cipher<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>),key)

	print <span style="color:#e6db74">&#34;nPrivate key recovered: &#34;</span><span style="color:#f92672">+</span>key<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;n&#34;</span>
	
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ciphers:
	target_fix(i)
</code></pre></div><p>这道题目也有一个秒杀解法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pip install mtp
mtp Problem.txt
</code></pre></div><p>也可以获取密钥和明文，得到flag。流密码题目，以后还是有待继续研究和学习的。</p>
<h2 id="0xd-afctf2018base">0xD [AFCTF2018]BASE</h2>
<p>应该会是BASE家族的题目，考察BASE编码。</p>
<p>看题目：</p>
<p>一个非常大的密文文件，文件内容是Base加密。</p>
<p>看样子像是Base，但是发现解码后又是一个Base，之后又是一个不断循环。应该是套了好多层。写个脚本进行循环解码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64
file <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;flag_encode.txt&#34;</span>,<span style="color:#e6db74">&#39;r&#39;</span>)
file_out <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;flag.txt&#34;</span>,<span style="color:#e6db74">&#39;w&#39;</span>) 
base <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>read()
index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">while</span>(<span style="color:#ae81ff">1</span>):
    <span style="color:#66d9ef">try</span>:
        base <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b32decode(base)<span style="color:#f92672">.</span>decode()
        index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">except</span>:
        <span style="color:#66d9ef">try</span>:
            base <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(base)<span style="color:#f92672">.</span>decode()
            index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
        <span style="color:#66d9ef">except</span>:
            <span style="color:#66d9ef">try</span>:
                base <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b16decode(base)<span style="color:#f92672">.</span>decode()
                index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
            <span style="color:#66d9ef">except</span>:
                print(<span style="color:#e6db74">&#34;decode finish QWQ！&#34;</span>)
                file_out<span style="color:#f92672">.</span>write(base)
                file_out<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
                file_out<span style="color:#f92672">.</span>write(str(index))
                <span style="color:#66d9ef">break</span>
</code></pre></div><p>运行脚本后，查看写入的文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">afctf{U_5h0u1d_Us3_T00l5}
30
</code></pre></div><p>嵌套了30层base，最后也成功拿到了flag。</p>
<h2 id="0xe-npuctf2020classical-cipher">0xE [NPUCTF2020]Classical Cipher</h2>
<p>古典密码的题目，打开看看：</p>
<p>两个文件，一个<code>key.txt</code>解压密码文件，一个<code>flag.zip</code>压缩文件。压缩文件有密码，可以看看<code>key.txt</code>里面具体是什么东西：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">解密后的flag请用flag{}包裹

压缩包密码：gsv_pvb_rh_zgyzhs

对应明文：   ***_key_**_******
</code></pre></div><p>对应明文，应该是这个古典密码的提示，k对应p，e对应v以及y对应b。这种古典密码有非常好的对称性，可以自然而然地联想到埃特巴什码。</p>
<p>然后使用Atbash码进行解密，就能得到压缩包的解压密码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">the_key_is_atbash
</code></pre></div><p>使用解出的密码，解开压缩文件，得到一张图片：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B81-96%5D_writeup/flag.png" alt="flag"></p>
<p>看样子奇奇怪怪的，是猪圈密码和古埃及象形密码的组合</p>
<p>直接根据猪圈密码变体和古埃及象形密码的对应关系进行解码得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">classicalcode
</code></pre></div><hr>
<p>猪圈密码变体：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B81-96%5D_writeup/20200820143837525.png" alt="img"></p>
<p>古埃及象形密码：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B81-96%5D_writeup/20200820143847305.png" alt="img"></p>
<h2 id="easyprogram">EasyProgram</h2>
<p>简单的程序，应该是针对这个程序进行逆算法设计来完成相应的算法求解来获取到flag，看看题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Eeemmm......this is a easy game.Have fun~ 注意：得到的 flag 请包上 flag{} 提交
</code></pre></div><p>题目附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">get buf unsign s[256]
get buf t[256]
we have key:whoami
we have flag:????????????????????????????????

for i:0 to 256
    set s[i]:i

for i:0 to 256
    set t[i]:key[(i)mod(key.lenth)]

for i:0 to 256
    set j:(j+s[i]+t[i])mod(256)
        swap:s[i],s[j]

for m:0 to 38
    set i:(i + 1)mod(256)
    set j:(j + S[i])mod(256)
    swap:s[i],s[j]
    set x:(s[i] + (s[j]mod(256))mod(256))
    set flag[m]:flag[m]^s[x]

fprint flagx to file
</code></pre></div><p>附件是伪代码文件，写一个逆算法程序脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">key <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;whoami&#34;</span>
flags <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
s <span style="color:#f92672">=</span> [i <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>)]
t <span style="color:#f92672">=</span> [key[i<span style="color:#f92672">%</span>(len(key))] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>)]
j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>):
    j <span style="color:#f92672">=</span> (j<span style="color:#f92672">+</span>s[i]<span style="color:#f92672">+</span>ord(t[i]))<span style="color:#f92672">%</span><span style="color:#ae81ff">256</span>
    s[i],s[j] <span style="color:#f92672">=</span> s[j],s[i]
j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;file.txt&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
    flag <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
<span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">38</span>):
    i <span style="color:#f92672">=</span> (i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">256</span>
    j <span style="color:#f92672">=</span> (j<span style="color:#f92672">+</span>s[i])<span style="color:#f92672">%</span><span style="color:#ae81ff">256</span>
    s[i],s[j] <span style="color:#f92672">=</span> s[j],s[i]
    x <span style="color:#f92672">=</span> (s[i]<span style="color:#f92672">+</span>(s[j]<span style="color:#f92672">%</span><span style="color:#ae81ff">256</span>))<span style="color:#f92672">%</span><span style="color:#ae81ff">256</span>
    flags <span style="color:#f92672">+=</span> chr(ord(flag[m])<span style="color:#f92672">^</span>s[x])

print flags
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{f238yu28323uf28u2yef2ud8uf289euf}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>BUUCTF CRYPTO [64~80]_writeup</title>
            <link>https://zcodetea.github.io/posts/buuctf-crypto-65-80_writeup/</link>
            <pubDate>Thu, 01 Jul 2021 10:14:15 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/buuctf-crypto-65-80_writeup/</guid>
            <description>BUUCTF-CRYPTO-[65-80] writeup 密码学百题计划启动！进行勇往直前！
本次的16道题目，也是非常有意思的呢！各种各样的呢……
0x0 浪里淘沙 看样子，应该是个脑洞题没错了
来康康这题的题目：
我有密集恐惧症，所以大家自求多福吧，把获得的单词连在一起提交即可。（我这里有一串数字：4，8，11，15，16） 注意：得到的 flag 请包上 flag{} 提交 这题目好像有点意思，可以从题目中提炼一些信息：
 密集恐惧症 获得的单词连在一起提交 我这里有一串数字：4，8，11，15，16  根据提炼的数据进行分享，应该是词频统计类的题目，这题有点意思
看看附件是啥吧：
tonightsuccessnoticenoticewewesuccesstonightweexamplecryptoshouldwebackspacetonightbackspaceexamplelearnwesublimlearnbackspacetheshouldwelearnfoundsublimsystemexamplesublimfoundlearnshouldmorningsublimsystemuserlearnthecryptomorningexamplenoticetonightlearntonightlearntonightsublimenterusermorningfoundtonightweenterfoundnoticethecryptomorningthebackspacelearntonightlearnsublimtonightlearnfoundenterfoundsuccesstonightsuccessuserfoundmorningtonighttheshouldsublimentertonightenterbackspacelearnexamplenoticeexamplefoundsystemsuccesssublimsuccessshouldtonightcryptowelearncryptofoundshouldsublimsublimweentertonightsuccessshouldentertheentercryptouserbackspaceshouldentersystemsuccesssystementerfoundenterlearnexampletonightnoticemorningusertonightlearnmorningtonightfoundfoundsuccessnoticesystementerlearnexamplebackspaceshouldcryptocryptosublimweexampletonighttheshouldthemorningbackspacelearntonightsystemsuccesssuccessbackspacemorningnoticeuserfoundfoundtonightmorningenterenterthefoundbackspacelearnenterentershouldthesystemfounduserlearnlearnsystemnoticetonighttheshouldlearnuserbackspaceweusernoticeshouldthewefoundsystemwecryptocryptowethebackspacesystementershouldtonightsystemnoticemorningsystemweentermorningfoundsuccessusertonightsuccesstonightbackspaceshouldweenterthewesystemusernoticesystemthelearnexamplelearnfoundlearnnoticeexamplesystemthecryptocryptolearnsystemthecryptoenterlearnexamplemorningmorningweenterentersuccessexampleuserthebackspacenoticesublimenterbackspacesuccessbackspacethesublimexamplesystemtheexamplecryptolearnuserexamplelearnsystemusersuccessenterentersuccesstheuserbackspacelearnsuccessbackspacethesublimshouldwebackspaceexamplesuccesssuccesstonightweusershouldsuccessmorningcryptomorningfoundbackspacesublimshouldentershouldnoticesuccessmorningsuccessexamplelearnshouldsublimlearntonightshoulduserbackspacesublimlearncryptosuccessenternoticetonightmorningtonightwesuccessweuserbackspaceexamplewesystemnoticemorningsystemmorningcryptolearnsystemthethefoundcryptouserlearnusersystemwemorningenterexampleshouldlearncryptofoundenterbackspacelearnenterenterbackspaceshouldbackspacetheshouldthesystemshouldshouldsuccessmorningthefoundsystementersystemtonightcryptowelearnexampleexamplesystementerbackspaceshouldtheentersublimtonightfoundfoundsuccesssuccesssystemsublimcryptoshouldentersublimmorninglearnfoundtonightcryptobackspacesuccesscryptowebackspacefoundshouldnoticeshouldmorningnoticesystemcryptosystemlearnsystemnoticemorningsystementerwemorninglearnsuccessfoundwesuccesswetheusercryptousernoticebackspacesuccessshouldtonightmorningentermorninguserenternoticefoundmorningwetonightsystemthecryptotonightcryptosystemuserthefoundexampletonightusersystemcryptosublimmorninguserthefoundbackspaceshouldsuccesscryptotonightsystemnoticebackspaceusershouldenterthecryptomorningwesublimnoticesuccessnoticeusersuccesstonightlearnweuserenterfounduserexampleshouldshouldtonightwelearnthenoticethewefoundmorningexampleshouldexamplethesuccessnoticeenterfoundthecryptonoticeuserlearnuserweenterfoundmorningsystemweexamplenoticethebackspaceexamplesublimtheusermorningtonightthesuccesscryptosuccessusersuccesstonighttonightwelearnenterenterthemorningentersystemcryptobackspacemorningsystemexamplecryptouserexamplelearnsublimsuccessusersystemfoundmorningshouldcryptotonightsublimtheexamplemorningsystemuserexampleweexamplenoticesuccesssublimnoticecryptoshouldbackspaceshouldthetonightfoundsublimbackspacebackspacetonightshouldbackspacesuccesstonightbackspacesuccessmorningsystemcryptobackspaceentertonighttonightnoticelearnshoulduserfoundexamplesystemthesuccessweusertonightcryptousernoticeenternoticebackspaceusersystemfoundusernoticeshouldlearnuserfoundexampleusermorningshouldsuccessmorningmorningexampleexamplefoundsublimfoundenterbackspacenoticelearnfoundmorningcryptonoticecryptoshouldweshouldtonightcryptobackspacesublimcryptosublimenterentersublimentercryptonoticethethesublimexampleenterentershouldlearncryptoentershouldmorninglearnnoticeuserexamplesublimtonightshouldfoundtonightsuccessshouldmorningfoundtheweuserlearnsublimsystembackspacecryptotheusertonightcryptosublimmorningmorningexamplenoticetheenterlearnshouldmorningsublimfoundtonightsublimsublimexamplefounduserexamplethefoundwemorningnoticefoundcryptosuccesssublimsublimexamplethesuccessexamplenoticesuccessbackspacesublimlearnuserexamplesuccesssuccesssystemsuccessmorningmorninglearnexamplemorningtonightfoundbackspaceenternoticemorningentersuccessmorningusermorningbackspacelearncryptoenteruserenteruserthetonighttonightsuccesslearnenterfoundsuccesssystemfoundbackspaceenterlearnsystemsublimcryptoentermorningwetonightshouldlearnenterfoundcryptonoticelearnlearnshouldfoundsuccessexampletonightthesuccessfoundusertonightenterfoundsuccessshouldmorningusernoticemorningsystemsystemsuccessshouldwelearnenterfoundexamplewethefoundweshouldsystemsystemmorningmorningbackspaceshouldentersublimentertonightsuccesssystemsystemcryptousershouldsublimfoundwetonightnoticeexamplewewesuccessfoundusertonightfoundsystemexamplecryptofoundshouldshouldsuccessenterbackspaceexampletonightthelearnnoticeuserlearnsystemsublimfoundlearnsuccesssystemshouldsublimnoticelearnsystemnoticetonightexamplefoundusernoticeenterlearnnoticecryptousersystemmorningthewesystemfoundfoundshouldsystementerenterbackspacesystemsublimcryptousermorninglearnlearntonightsublimlearnenterenterbackspacesystemuserusercryptoentershouldtheusersublimnoticeexamplemorningexamplesublimsublimbackspacesystemexampleshouldsublimlearnfoundenterbackspacelearnmorningmorningfoundthetonightmorningnoticeenterlearnusersystemtonightbackspaceexamplelearntonightbackspaceweshouldcryptosuccessbackspaceexamplesuccesstheshouldmorninguserbackspacelearnthetheshouldcryptocryptotonightbackspacecryptocryptobackspacebackspacenoticeusertonightentermorningfoundweenterexampleenterfoundusersublimsystemtheexampleexamplesystemsuccessusersublimentermorningbackspacesystemfoundlearnsystemshouldsublimsublimentershouldtheusershouldexampleexampleshouldsuccesswelearnfoundsublimshoulduserweentertonightwenoticesublimsystemlearnshouldfoundsuccessuserentersuccessmorningcryptoenteruserfoundexampletonightlearnexampleexamplefoundlearnsuccesssystembackspacecryptonoticethefoundbackspacelearncryptothelearnlearnexamplesuccessnoticenoticesystemmorningcryptotonightnoticenoticeentersuccesscryptoenterbackspacesublimexampleenterfoundtonightcryptotonightsublimnoticesuccesssublimtheentertonighttheshouldthefoundsystemtonightuserbackspacesuccessshouldwebackspacenoticebackspacebackspacenoticewecryptobackspacebackspaceusertonightlearnsuccessmorningusertonightsuccessshouldbackspacecryptoenterentershouldsublimsystemexamplemorningcryptonoticethesuccessthebackspacenoticelearnsublimlearnsuccesscryptothesuccessenternoticecryptosystemsublimsuccesswebackspaceuserenterlearnuserwewemorningsuccesslearncryptobackspacewecryptosystemlearnenterenteruserexamplefoundsystemcryptousernoticefoundusersublimbackspacewesublimnoticemorningshouldexamplenoticecryptoshouldtonightmorningthefoundsystementerentersystemthecryptobackspacesublimlearnsuccessmorningsublimsystemcryptousersublimwesuccessmorningsublimbackspacecryptobackspacesublimthelearnsuccesssublimlearncryptoweweexamplecryptowenoticelearnfoundbackspacesystemsystemexampleshouldlearnsuccesssublimcryptobackspacetonightbackspacemorningmorningnoticeshouldnoticefoundthetheshouldtheshouldfoundfoundcryptosuccessbackspacesuccessshouldweenternoticeweweshouldmorningfoundusersuccessbackspacewenoticeusersuccessenterenterexamplelearnfoundwetonightusercryptothesublimsublimtonightsuccesslearnbackspacetonightentertonightthesublimnoticewefoundcryptobackspaceenterenterlearnlearntonightexamplesystementersublimnoticecryptoshoulduseruserbackspaceuserwesublimmorningwesystemshouldtonighttheusershouldnoticefoundusernoticeentersublimwethewefoundfoundlearnfoundwecryptosystemexamplemorningcryptocryptosublimtheexamplenoticefoundlearnwelearnmorningtheenterthesystemsublimtonightsuccesssystemlearnshouldenterbackspaceentersuccesssuccessbackspaceexamplenoticeentershouldsublimlearnbackspacetheshouldexamplelearnsystemusersublimbackspacebackspacesuccesswelearntonightexamplewecryptoenterwesystemsystemsublimexamplecryptolearnmorningsublimfoundsublimfoundbackspacefoundtonighttonightnoticesuccesssuccessexampleusersuccesstonightsublimcryptosystemweenterexamplesystemthethenoticesublimtonightbackspacenoticesystemexamplethesuccesstonightmorningsuccesstonightwenoticesublimtonightwelearntonightmorningsublimbackspaceenterthetonightenterwecryptofoundtheenternoticebackspacesuccesswesystemuserexamplebackspaceentersuccesstonightsublimwemorningsuccesssuccesswesublimsuccessnoticesublimfoundlearnlearnweexamplecryptonoticelearnweusershoulduserfoundcryptolearnfoundmorningtonightmorningmorningnoticewecryptowewesuccessfoundsublimweuserentershouldshouldshouldsublimbackspacetonightenterwesublimsuccessshouldfoundthethetonightwecryptoweenterfoundcryptoshouldcryptouseruserfoundentersublimsublimthelearntheshouldnoticebackspacefoundsuccessshouldtonightentermorningsystemmorningtonightwenoticelearnbackspaceexampleusershouldnoticesublimsublimexamplethesuccessnoticesystemmorningnoticecryptosystemsublimcryptosystemsuccessshouldmorningbackspaceshouldmorninglearnnoticenoticeshouldthewewesublimsublimnoticeusersuccessentersystemfoundshouldshouldcryptobackspaceusermorningsystemshouldshouldtonightwesublimuserfoundlearnbackspacethetonightmorningexampleuserthefoundbackspaceshouldtonightcryptocryptofounduserexamplenoticecryptousernoticethenoticeshouldweshouldfoundwemorningcryptosuccesslearnfoundtonightsublimnoticenoticewefoundwewesuccesssublimsublimcryptoweexampletonightsuccessfoundshouldsuccesstonightbackspacesystemshouldwesystemnoticebackspaceusersystembackspacewenoticelearnnoticenoticesuccesslearntonightuserlearnsuccessbackspacesuccesswesystemusercryptonoticethesystemusernoticewethesuccessweshouldfoundshouldcryptomorningtonightwethewesuccesslearntheshouldweexampletonightsuccessnoticenoticemorningfoundmorningfoundusersublimsystemsuccessbackspacesuccessmorninguserthefoundweexamplemorningsublimlearnfoundfoundnoticemorningshouldweuserwemorningexamplesuccesssuccessfoundthetheshouldweusershouldtheshouldexamplenoticefoundsuccesssystemfoundshouldsublimbackspacetonightshouldsystemtonightsuccesslearntonightsystemsublimsuccesscryptobackspacesystemsublimmorningmorningshouldmorninglearnsuccesslearnmorningusermorninglearnexamplecryptoshouldbackspacesublimshouldfoundbackspacesystemsystemweexamplesystemtonightsublimmorningmorninguserfoundcryptolearnbackspaceshouldbackspacenoticesublimfoundthecryptousershouldsuccesssystemsuccessshouldsystembackspacesublimshouldsublimsystembackspaceexampleshouldbackspacesublimnoticelearnsublimuserbackspaceusersublimsuccesssublimuserusernoticeshouldsuccessnoticenoticelearnexamplesystemweexamplesublimbackspacebackspacecryptoshouldusercryptosublimbackspacesublimshouldsystemnoticenoticethesuccesssuccesslearnsystemsublimwenoticelearnusersublimsystemusernoticeuserthesuccesslearnwelearnwenoticecryptolearncryptonoticenoticebackspacecryptothecryptousercryptobackspacesuccesslearnthesystemsuccessthesystemsystemcryptosuccessbackspacesublimlearnsublimcryptobackspacelearnsublimusersublimexamplecryptosublimsystemnoticecryptocryptousertheusernoticebackspacenoticenoticethecryptocryptosystembackspacesublimbackspacecryptocryptobackspacesystemuserthenoticesystemsystemsystemusernoticethecryptouserusersystemtheusercryptoexamplenoticecryptoexamplenoticetheexampleexamplethecryptotheusernoticetheexampleexamplecryptotheexampleexamplethenoticethecryptocryptoexampletheexamplecryptocryptothenoticeexamplecryptonoticetheexampleexampleexamplecryptocryptoexampleexamplethenoticethecryptothethethethethetheexampleexamplethetheexampletheexampletheexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample 好多连在一起的词汇，应该是一个简单NTP题目，也就是NLP最基础的一个步骤，分词。
这道题目的大致思路应该是：
 分词 词频统计 统计排序 根据排序位置找到指定的单词 拼接单词  根据这个思路，写个脚本处理一下哈：
from collections import Counter // 统计库 import wordninja // 英语单词词库 data=&amp;#34;tonightsuccessnoticenoticewewesuccesstonightweexamplecryptoshouldwebackspacetonightbackspaceexamplelearnwesublimlearnbackspacetheshouldwelearnfoundsublimsystemexamplesublimfoundlearnshouldmorningsublimsystemuserlearnthecryptomorningexamplenoticetonightlearntonightlearntonightsublimenterusermorningfoundtonightweenterfoundnoticethecryptomorningthebackspacelearntonightlearnsublimtonightlearnfoundenterfoundsuccesstonightsuccessuserfoundmorningtonighttheshouldsublimentertonightenterbackspacelearnexamplenoticeexamplefoundsystemsuccesssublimsuccessshouldtonightcryptowelearncryptofoundshouldsublimsublimweentertonightsuccessshouldentertheentercryptouserbackspaceshouldentersystemsuccesssystementerfoundenterlearnexampletonightnoticemorningusertonightlearnmorningtonightfoundfoundsuccessnoticesystementerlearnexamplebackspaceshouldcryptocryptosublimweexampletonighttheshouldthemorningbackspacelearntonightsystemsuccesssuccessbackspacemorningnoticeuserfoundfoundtonightmorningenterenterthefoundbackspacelearnenterentershouldthesystemfounduserlearnlearnsystemnoticetonighttheshouldlearnuserbackspaceweusernoticeshouldthewefoundsystemwecryptocryptowethebackspacesystementershouldtonightsystemnoticemorningsystemweentermorningfoundsuccessusertonightsuccesstonightbackspaceshouldweenterthewesystemusernoticesystemthelearnexamplelearnfoundlearnnoticeexamplesystemthecryptocryptolearnsystemthecryptoenterlearnexamplemorningmorningweenterentersuccessexampleuserthebackspacenoticesublimenterbackspacesuccessbackspacethesublimexamplesystemtheexamplecryptolearnuserexamplelearnsystemusersuccessenterentersuccesstheuserbackspacelearnsuccessbackspacethesublimshouldwebackspaceexamplesuccesssuccesstonightweusershouldsuccessmorningcryptomorningfoundbackspacesublimshouldentershouldnoticesuccessmorningsuccessexamplelearnshouldsublimlearntonightshoulduserbackspacesublimlearncryptosuccessenternoticetonightmorningtonightwesuccessweuserbackspaceexamplewesystemnoticemorningsystemmorningcryptolearnsystemthethefoundcryptouserlearnusersystemwemorningenterexampleshouldlearncryptofoundenterbackspacelearnenterenterbackspaceshouldbackspacetheshouldthesystemshouldshouldsuccessmorningthefoundsystementersystemtonightcryptowelearnexampleexamplesystementerbackspaceshouldtheentersublimtonightfoundfoundsuccesssuccesssystemsublimcryptoshouldentersublimmorninglearnfoundtonightcryptobackspacesuccesscryptowebackspacefoundshouldnoticeshouldmorningnoticesystemcryptosystemlearnsystemnoticemorningsystementerwemorninglearnsuccessfoundwesuccesswetheusercryptousernoticebackspacesuccessshouldtonightmorningentermorninguserenternoticefoundmorningwetonightsystemthecryptotonightcryptosystemuserthefoundexampletonightusersystemcryptosublimmorninguserthefoundbackspaceshouldsuccesscryptotonightsystemnoticebackspaceusershouldenterthecryptomorningwesublimnoticesuccessnoticeusersuccesstonightlearnweuserenterfounduserexampleshouldshouldtonightwelearnthenoticethewefoundmorningexampleshouldexamplethesuccessnoticeenterfoundthecryptonoticeuserlearnuserweenterfoundmorningsystemweexamplenoticethebackspaceexamplesublimtheusermorningtonightthesuccesscryptosuccessusersuccesstonighttonightwelearnenterenterthemorningentersystemcryptobackspacemorningsystemexamplecryptouserexamplelearnsublimsuccessusersystemfoundmorningshouldcryptotonightsublimtheexamplemorningsystemuserexampleweexamplenoticesuccesssublimnoticecryptoshouldbackspaceshouldthetonightfoundsublimbackspacebackspacetonightshouldbackspacesuccesstonightbackspacesuccessmorningsystemcryptobackspaceentertonighttonightnoticelearnshoulduserfoundexamplesystemthesuccessweusertonightcryptousernoticeenternoticebackspaceusersystemfoundusernoticeshouldlearnuserfoundexampleusermorningshouldsuccessmorningmorningexampleexamplefoundsublimfoundenterbackspacenoticelearnfoundmorningcryptonoticecryptoshouldweshouldtonightcryptobackspacesublimcryptosublimenterentersublimentercryptonoticethethesublimexampleenterentershouldlearncryptoentershouldmorninglearnnoticeuserexamplesublimtonightshouldfoundtonightsuccessshouldmorningfoundtheweuserlearnsublimsystembackspacecryptotheusertonightcryptosublimmorningmorningexamplenoticetheenterlearnshouldmorningsublimfoundtonightsublimsublimexamplefounduserexamplethefoundwemorningnoticefoundcryptosuccesssublimsublimexamplethesuccessexamplenoticesuccessbackspacesublimlearnuserexamplesuccesssuccesssystemsuccessmorningmorninglearnexamplemorningtonightfoundbackspaceenternoticemorningentersuccessmorningusermorningbackspacelearncryptoenteruserenteruserthetonighttonightsuccesslearnenterfoundsuccesssystemfoundbackspaceenterlearnsystemsublimcryptoentermorningwetonightshouldlearnenterfoundcryptonoticelearnlearnshouldfoundsuccessexampletonightthesuccessfoundusertonightenterfoundsuccessshouldmorningusernoticemorningsystemsystemsuccessshouldwelearnenterfoundexamplewethefoundweshouldsystemsystemmorningmorningbackspaceshouldentersublimentertonightsuccesssystemsystemcryptousershouldsublimfoundwetonightnoticeexamplewewesuccessfoundusertonightfoundsystemexamplecryptofoundshouldshouldsuccessenterbackspaceexampletonightthelearnnoticeuserlearnsystemsublimfoundlearnsuccesssystemshouldsublimnoticelearnsystemnoticetonightexamplefoundusernoticeenterlearnnoticecryptousersystemmorningthewesystemfoundfoundshouldsystementerenterbackspacesystemsublimcryptousermorninglearnlearntonightsublimlearnenterenterbackspacesystemuserusercryptoentershouldtheusersublimnoticeexamplemorningexamplesublimsublimbackspacesystemexampleshouldsublimlearnfoundenterbackspacelearnmorningmorningfoundthetonightmorningnoticeenterlearnusersystemtonightbackspaceexamplelearntonightbackspaceweshouldcryptosuccessbackspaceexamplesuccesstheshouldmorninguserbackspacelearnthetheshouldcryptocryptotonightbackspacecryptocryptobackspacebackspacenoticeusertonightentermorningfoundweenterexampleenterfoundusersublimsystemtheexampleexamplesystemsuccessusersublimentermorningbackspacesystemfoundlearnsystemshouldsublimsublimentershouldtheusershouldexampleexampleshouldsuccesswelearnfoundsublimshoulduserweentertonightwenoticesublimsystemlearnshouldfoundsuccessuserentersuccessmorningcryptoenteruserfoundexampletonightlearnexampleexamplefoundlearnsuccesssystembackspacecryptonoticethefoundbackspacelearncryptothelearnlearnexamplesuccessnoticenoticesystemmorningcryptotonightnoticenoticeentersuccesscryptoenterbackspacesublimexampleenterfoundtonightcryptotonightsublimnoticesuccesssublimtheentertonighttheshouldthefoundsystemtonightuserbackspacesuccessshouldwebackspacenoticebackspacebackspacenoticewecryptobackspacebackspaceusertonightlearnsuccessmorningusertonightsuccessshouldbackspacecryptoenterentershouldsublimsystemexamplemorningcryptonoticethesuccessthebackspacenoticelearnsublimlearnsuccesscryptothesuccessenternoticecryptosystemsublimsuccesswebackspaceuserenterlearnuserwewemorningsuccesslearncryptobackspacewecryptosystemlearnenterenteruserexamplefoundsystemcryptousernoticefoundusersublimbackspacewesublimnoticemorningshouldexamplenoticecryptoshouldtonightmorningthefoundsystementerentersystemthecryptobackspacesublimlearnsuccessmorningsublimsystemcryptousersublimwesuccessmorningsublimbackspacecryptobackspacesublimthelearnsuccesssublimlearncryptoweweexamplecryptowenoticelearnfoundbackspacesystemsystemexampleshouldlearnsuccesssublimcryptobackspacetonightbackspacemorningmorningnoticeshouldnoticefoundthetheshouldtheshouldfoundfoundcryptosuccessbackspacesuccessshouldweenternoticeweweshouldmorningfoundusersuccessbackspacewenoticeusersuccessenterenterexamplelearnfoundwetonightusercryptothesublimsublimtonightsuccesslearnbackspacetonightentertonightthesublimnoticewefoundcryptobackspaceenterenterlearnlearntonightexamplesystementersublimnoticecryptoshoulduseruserbackspaceuserwesublimmorningwesystemshouldtonighttheusershouldnoticefoundusernoticeentersublimwethewefoundfoundlearnfoundwecryptosystemexamplemorningcryptocryptosublimtheexamplenoticefoundlearnwelearnmorningtheenterthesystemsublimtonightsuccesssystemlearnshouldenterbackspaceentersuccesssuccessbackspaceexamplenoticeentershouldsublimlearnbackspacetheshouldexamplelearnsystemusersublimbackspacebackspacesuccesswelearntonightexamplewecryptoenterwesystemsystemsublimexamplecryptolearnmorningsublimfoundsublimfoundbackspacefoundtonighttonightnoticesuccesssuccessexampleusersuccesstonightsublimcryptosystemweenterexamplesystemthethenoticesublimtonightbackspacenoticesystemexamplethesuccesstonightmorningsuccesstonightwenoticesublimtonightwelearntonightmorningsublimbackspaceenterthetonightenterwecryptofoundtheenternoticebackspacesuccesswesystemuserexamplebackspaceentersuccesstonightsublimwemorningsuccesssuccesswesublimsuccessnoticesublimfoundlearnlearnweexamplecryptonoticelearnweusershoulduserfoundcryptolearnfoundmorningtonightmorningmorningnoticewecryptowewesuccessfoundsublimweuserentershouldshouldshouldsublimbackspacetonightenterwesublimsuccessshouldfoundthethetonightwecryptoweenterfoundcryptoshouldcryptouseruserfoundentersublimsublimthelearntheshouldnoticebackspacefoundsuccessshouldtonightentermorningsystemmorningtonightwenoticelearnbackspaceexampleusershouldnoticesublimsublimexamplethesuccessnoticesystemmorningnoticecryptosystemsublimcryptosystemsuccessshouldmorningbackspaceshouldmorninglearnnoticenoticeshouldthewewesublimsublimnoticeusersuccessentersystemfoundshouldshouldcryptobackspaceusermorningsystemshouldshouldtonightwesublimuserfoundlearnbackspacethetonightmorningexampleuserthefoundbackspaceshouldtonightcryptocryptofounduserexamplenoticecryptousernoticethenoticeshouldweshouldfoundwemorningcryptosuccesslearnfoundtonightsublimnoticenoticewefoundwewesuccesssublimsublimcryptoweexampletonightsuccessfoundshouldsuccesstonightbackspacesystemshouldwesystemnoticebackspaceusersystembackspacewenoticelearnnoticenoticesuccesslearntonightuserlearnsuccessbackspacesuccesswesystemusercryptonoticethesystemusernoticewethesuccessweshouldfoundshouldcryptomorningtonightwethewesuccesslearntheshouldweexampletonightsuccessnoticenoticemorningfoundmorningfoundusersublimsystemsuccessbackspacesuccessmorninguserthefoundweexamplemorningsublimlearnfoundfoundnoticemorningshouldweuserwemorningexamplesuccesssuccessfoundthetheshouldweusershouldtheshouldexamplenoticefoundsuccesssystemfoundshouldsublimbackspacetonightshouldsystemtonightsuccesslearntonightsystemsublimsuccesscryptobackspacesystemsublimmorningmorningshouldmorninglearnsuccesslearnmorningusermorninglearnexamplecryptoshouldbackspacesublimshouldfoundbackspacesystemsystemweexamplesystemtonightsublimmorningmorninguserfoundcryptolearnbackspaceshouldbackspacenoticesublimfoundthecryptousershouldsuccesssystemsuccessshouldsystembackspacesublimshouldsublimsystembackspaceexampleshouldbackspacesublimnoticelearnsublimuserbackspaceusersublimsuccesssublimuserusernoticeshouldsuccessnoticenoticelearnexamplesystemweexamplesublimbackspacebackspacecryptoshouldusercryptosublimbackspacesublimshouldsystemnoticenoticethesuccesssuccesslearnsystemsublimwenoticelearnusersublimsystemusernoticeuserthesuccesslearnwelearnwenoticecryptolearncryptonoticenoticebackspacecryptothecryptousercryptobackspacesuccesslearnthesystemsuccessthesystemsystemcryptosuccessbackspacesublimlearnsublimcryptobackspacelearnsublimusersublimexamplecryptosublimsystemnoticecryptocryptousertheusernoticebackspacenoticenoticethecryptocryptosystembackspacesublimbackspacecryptocryptobackspacesystemuserthenoticesystemsystemsystemusernoticethecryptouserusersystemtheusercryptoexamplenoticecryptoexamplenoticetheexampleexamplethecryptotheusernoticetheexampleexamplecryptotheexampleexamplethenoticethecryptocryptoexampletheexamplecryptocryptothenoticeexamplecryptonoticetheexampleexampleexamplecryptocryptoexampleexamplethenoticethecryptothethethethethetheexampleexamplethetheexampletheexampletheexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample&amp;#34; lm = wordninja.LanguageModel(&amp;#39;my_dict.txt.gz&amp;#39;) // 通过调试写出的简单字典 data_list = lm.split(data) data_count = Counter(data_list) index = 1 hint_list = [4,8,11,15,16] m = &amp;#34;&amp;#34; for i in data_count.most_common(20)[::-1]: if index in hint_list: m += i[0] index += 1 print(m) 运行一下脚本：</description>
            <content type="html"><![CDATA[<h1 id="buuctf-crypto-65-80-writeup">BUUCTF-CRYPTO-[65-80] writeup</h1>
<p>密码学百题计划启动！进行勇往直前！</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B64-80%5D_writeup/image-20210628200701835.png" alt="image-20210628200701835"></p>
<p>本次的16道题目，也是非常有意思的呢！各种各样的呢……</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B64-80%5D_writeup/image-20210628200448759.png" alt="image-20210628200448759"></p>
<h2 id="0x0-浪里淘沙">0x0 浪里淘沙</h2>
<p>看样子，应该是个脑洞题没错了</p>
<p>来康康这题的题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">我有密集恐惧症，所以大家自求多福吧，把获得的单词连在一起提交即可。（我这里有一串数字：4，8，11，15，16） 注意：得到的 flag 请包上 flag{} 提交
</code></pre></div><p>这题目好像有点意思，可以从题目中提炼一些信息：</p>
<ol>
<li>密集恐惧症</li>
<li>获得的单词连在一起提交</li>
<li>我这里有一串数字：4，8，11，15，16</li>
</ol>
<p>根据提炼的数据进行分享，应该是词频统计类的题目，这题有点意思</p>
<p>看看附件是啥吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">tonightsuccessnoticenoticewewesuccesstonightweexamplecryptoshouldwebackspacetonightbackspaceexamplelearnwesublimlearnbackspacetheshouldwelearnfoundsublimsystemexamplesublimfoundlearnshouldmorningsublimsystemuserlearnthecryptomorningexamplenoticetonightlearntonightlearntonightsublimenterusermorningfoundtonightweenterfoundnoticethecryptomorningthebackspacelearntonightlearnsublimtonightlearnfoundenterfoundsuccesstonightsuccessuserfoundmorningtonighttheshouldsublimentertonightenterbackspacelearnexamplenoticeexamplefoundsystemsuccesssublimsuccessshouldtonightcryptowelearncryptofoundshouldsublimsublimweentertonightsuccessshouldentertheentercryptouserbackspaceshouldentersystemsuccesssystementerfoundenterlearnexampletonightnoticemorningusertonightlearnmorningtonightfoundfoundsuccessnoticesystementerlearnexamplebackspaceshouldcryptocryptosublimweexampletonighttheshouldthemorningbackspacelearntonightsystemsuccesssuccessbackspacemorningnoticeuserfoundfoundtonightmorningenterenterthefoundbackspacelearnenterentershouldthesystemfounduserlearnlearnsystemnoticetonighttheshouldlearnuserbackspaceweusernoticeshouldthewefoundsystemwecryptocryptowethebackspacesystementershouldtonightsystemnoticemorningsystemweentermorningfoundsuccessusertonightsuccesstonightbackspaceshouldweenterthewesystemusernoticesystemthelearnexamplelearnfoundlearnnoticeexamplesystemthecryptocryptolearnsystemthecryptoenterlearnexamplemorningmorningweenterentersuccessexampleuserthebackspacenoticesublimenterbackspacesuccessbackspacethesublimexamplesystemtheexamplecryptolearnuserexamplelearnsystemusersuccessenterentersuccesstheuserbackspacelearnsuccessbackspacethesublimshouldwebackspaceexamplesuccesssuccesstonightweusershouldsuccessmorningcryptomorningfoundbackspacesublimshouldentershouldnoticesuccessmorningsuccessexamplelearnshouldsublimlearntonightshoulduserbackspacesublimlearncryptosuccessenternoticetonightmorningtonightwesuccessweuserbackspaceexamplewesystemnoticemorningsystemmorningcryptolearnsystemthethefoundcryptouserlearnusersystemwemorningenterexampleshouldlearncryptofoundenterbackspacelearnenterenterbackspaceshouldbackspacetheshouldthesystemshouldshouldsuccessmorningthefoundsystementersystemtonightcryptowelearnexampleexamplesystementerbackspaceshouldtheentersublimtonightfoundfoundsuccesssuccesssystemsublimcryptoshouldentersublimmorninglearnfoundtonightcryptobackspacesuccesscryptowebackspacefoundshouldnoticeshouldmorningnoticesystemcryptosystemlearnsystemnoticemorningsystementerwemorninglearnsuccessfoundwesuccesswetheusercryptousernoticebackspacesuccessshouldtonightmorningentermorninguserenternoticefoundmorningwetonightsystemthecryptotonightcryptosystemuserthefoundexampletonightusersystemcryptosublimmorninguserthefoundbackspaceshouldsuccesscryptotonightsystemnoticebackspaceusershouldenterthecryptomorningwesublimnoticesuccessnoticeusersuccesstonightlearnweuserenterfounduserexampleshouldshouldtonightwelearnthenoticethewefoundmorningexampleshouldexamplethesuccessnoticeenterfoundthecryptonoticeuserlearnuserweenterfoundmorningsystemweexamplenoticethebackspaceexamplesublimtheusermorningtonightthesuccesscryptosuccessusersuccesstonighttonightwelearnenterenterthemorningentersystemcryptobackspacemorningsystemexamplecryptouserexamplelearnsublimsuccessusersystemfoundmorningshouldcryptotonightsublimtheexamplemorningsystemuserexampleweexamplenoticesuccesssublimnoticecryptoshouldbackspaceshouldthetonightfoundsublimbackspacebackspacetonightshouldbackspacesuccesstonightbackspacesuccessmorningsystemcryptobackspaceentertonighttonightnoticelearnshoulduserfoundexamplesystemthesuccessweusertonightcryptousernoticeenternoticebackspaceusersystemfoundusernoticeshouldlearnuserfoundexampleusermorningshouldsuccessmorningmorningexampleexamplefoundsublimfoundenterbackspacenoticelearnfoundmorningcryptonoticecryptoshouldweshouldtonightcryptobackspacesublimcryptosublimenterentersublimentercryptonoticethethesublimexampleenterentershouldlearncryptoentershouldmorninglearnnoticeuserexamplesublimtonightshouldfoundtonightsuccessshouldmorningfoundtheweuserlearnsublimsystembackspacecryptotheusertonightcryptosublimmorningmorningexamplenoticetheenterlearnshouldmorningsublimfoundtonightsublimsublimexamplefounduserexamplethefoundwemorningnoticefoundcryptosuccesssublimsublimexamplethesuccessexamplenoticesuccessbackspacesublimlearnuserexamplesuccesssuccesssystemsuccessmorningmorninglearnexamplemorningtonightfoundbackspaceenternoticemorningentersuccessmorningusermorningbackspacelearncryptoenteruserenteruserthetonighttonightsuccesslearnenterfoundsuccesssystemfoundbackspaceenterlearnsystemsublimcryptoentermorningwetonightshouldlearnenterfoundcryptonoticelearnlearnshouldfoundsuccessexampletonightthesuccessfoundusertonightenterfoundsuccessshouldmorningusernoticemorningsystemsystemsuccessshouldwelearnenterfoundexamplewethefoundweshouldsystemsystemmorningmorningbackspaceshouldentersublimentertonightsuccesssystemsystemcryptousershouldsublimfoundwetonightnoticeexamplewewesuccessfoundusertonightfoundsystemexamplecryptofoundshouldshouldsuccessenterbackspaceexampletonightthelearnnoticeuserlearnsystemsublimfoundlearnsuccesssystemshouldsublimnoticelearnsystemnoticetonightexamplefoundusernoticeenterlearnnoticecryptousersystemmorningthewesystemfoundfoundshouldsystementerenterbackspacesystemsublimcryptousermorninglearnlearntonightsublimlearnenterenterbackspacesystemuserusercryptoentershouldtheusersublimnoticeexamplemorningexamplesublimsublimbackspacesystemexampleshouldsublimlearnfoundenterbackspacelearnmorningmorningfoundthetonightmorningnoticeenterlearnusersystemtonightbackspaceexamplelearntonightbackspaceweshouldcryptosuccessbackspaceexamplesuccesstheshouldmorninguserbackspacelearnthetheshouldcryptocryptotonightbackspacecryptocryptobackspacebackspacenoticeusertonightentermorningfoundweenterexampleenterfoundusersublimsystemtheexampleexamplesystemsuccessusersublimentermorningbackspacesystemfoundlearnsystemshouldsublimsublimentershouldtheusershouldexampleexampleshouldsuccesswelearnfoundsublimshoulduserweentertonightwenoticesublimsystemlearnshouldfoundsuccessuserentersuccessmorningcryptoenteruserfoundexampletonightlearnexampleexamplefoundlearnsuccesssystembackspacecryptonoticethefoundbackspacelearncryptothelearnlearnexamplesuccessnoticenoticesystemmorningcryptotonightnoticenoticeentersuccesscryptoenterbackspacesublimexampleenterfoundtonightcryptotonightsublimnoticesuccesssublimtheentertonighttheshouldthefoundsystemtonightuserbackspacesuccessshouldwebackspacenoticebackspacebackspacenoticewecryptobackspacebackspaceusertonightlearnsuccessmorningusertonightsuccessshouldbackspacecryptoenterentershouldsublimsystemexamplemorningcryptonoticethesuccessthebackspacenoticelearnsublimlearnsuccesscryptothesuccessenternoticecryptosystemsublimsuccesswebackspaceuserenterlearnuserwewemorningsuccesslearncryptobackspacewecryptosystemlearnenterenteruserexamplefoundsystemcryptousernoticefoundusersublimbackspacewesublimnoticemorningshouldexamplenoticecryptoshouldtonightmorningthefoundsystementerentersystemthecryptobackspacesublimlearnsuccessmorningsublimsystemcryptousersublimwesuccessmorningsublimbackspacecryptobackspacesublimthelearnsuccesssublimlearncryptoweweexamplecryptowenoticelearnfoundbackspacesystemsystemexampleshouldlearnsuccesssublimcryptobackspacetonightbackspacemorningmorningnoticeshouldnoticefoundthetheshouldtheshouldfoundfoundcryptosuccessbackspacesuccessshouldweenternoticeweweshouldmorningfoundusersuccessbackspacewenoticeusersuccessenterenterexamplelearnfoundwetonightusercryptothesublimsublimtonightsuccesslearnbackspacetonightentertonightthesublimnoticewefoundcryptobackspaceenterenterlearnlearntonightexamplesystementersublimnoticecryptoshoulduseruserbackspaceuserwesublimmorningwesystemshouldtonighttheusershouldnoticefoundusernoticeentersublimwethewefoundfoundlearnfoundwecryptosystemexamplemorningcryptocryptosublimtheexamplenoticefoundlearnwelearnmorningtheenterthesystemsublimtonightsuccesssystemlearnshouldenterbackspaceentersuccesssuccessbackspaceexamplenoticeentershouldsublimlearnbackspacetheshouldexamplelearnsystemusersublimbackspacebackspacesuccesswelearntonightexamplewecryptoenterwesystemsystemsublimexamplecryptolearnmorningsublimfoundsublimfoundbackspacefoundtonighttonightnoticesuccesssuccessexampleusersuccesstonightsublimcryptosystemweenterexamplesystemthethenoticesublimtonightbackspacenoticesystemexamplethesuccesstonightmorningsuccesstonightwenoticesublimtonightwelearntonightmorningsublimbackspaceenterthetonightenterwecryptofoundtheenternoticebackspacesuccesswesystemuserexamplebackspaceentersuccesstonightsublimwemorningsuccesssuccesswesublimsuccessnoticesublimfoundlearnlearnweexamplecryptonoticelearnweusershoulduserfoundcryptolearnfoundmorningtonightmorningmorningnoticewecryptowewesuccessfoundsublimweuserentershouldshouldshouldsublimbackspacetonightenterwesublimsuccessshouldfoundthethetonightwecryptoweenterfoundcryptoshouldcryptouseruserfoundentersublimsublimthelearntheshouldnoticebackspacefoundsuccessshouldtonightentermorningsystemmorningtonightwenoticelearnbackspaceexampleusershouldnoticesublimsublimexamplethesuccessnoticesystemmorningnoticecryptosystemsublimcryptosystemsuccessshouldmorningbackspaceshouldmorninglearnnoticenoticeshouldthewewesublimsublimnoticeusersuccessentersystemfoundshouldshouldcryptobackspaceusermorningsystemshouldshouldtonightwesublimuserfoundlearnbackspacethetonightmorningexampleuserthefoundbackspaceshouldtonightcryptocryptofounduserexamplenoticecryptousernoticethenoticeshouldweshouldfoundwemorningcryptosuccesslearnfoundtonightsublimnoticenoticewefoundwewesuccesssublimsublimcryptoweexampletonightsuccessfoundshouldsuccesstonightbackspacesystemshouldwesystemnoticebackspaceusersystembackspacewenoticelearnnoticenoticesuccesslearntonightuserlearnsuccessbackspacesuccesswesystemusercryptonoticethesystemusernoticewethesuccessweshouldfoundshouldcryptomorningtonightwethewesuccesslearntheshouldweexampletonightsuccessnoticenoticemorningfoundmorningfoundusersublimsystemsuccessbackspacesuccessmorninguserthefoundweexamplemorningsublimlearnfoundfoundnoticemorningshouldweuserwemorningexamplesuccesssuccessfoundthetheshouldweusershouldtheshouldexamplenoticefoundsuccesssystemfoundshouldsublimbackspacetonightshouldsystemtonightsuccesslearntonightsystemsublimsuccesscryptobackspacesystemsublimmorningmorningshouldmorninglearnsuccesslearnmorningusermorninglearnexamplecryptoshouldbackspacesublimshouldfoundbackspacesystemsystemweexamplesystemtonightsublimmorningmorninguserfoundcryptolearnbackspaceshouldbackspacenoticesublimfoundthecryptousershouldsuccesssystemsuccessshouldsystembackspacesublimshouldsublimsystembackspaceexampleshouldbackspacesublimnoticelearnsublimuserbackspaceusersublimsuccesssublimuserusernoticeshouldsuccessnoticenoticelearnexamplesystemweexamplesublimbackspacebackspacecryptoshouldusercryptosublimbackspacesublimshouldsystemnoticenoticethesuccesssuccesslearnsystemsublimwenoticelearnusersublimsystemusernoticeuserthesuccesslearnwelearnwenoticecryptolearncryptonoticenoticebackspacecryptothecryptousercryptobackspacesuccesslearnthesystemsuccessthesystemsystemcryptosuccessbackspacesublimlearnsublimcryptobackspacelearnsublimusersublimexamplecryptosublimsystemnoticecryptocryptousertheusernoticebackspacenoticenoticethecryptocryptosystembackspacesublimbackspacecryptocryptobackspacesystemuserthenoticesystemsystemsystemusernoticethecryptouserusersystemtheusercryptoexamplenoticecryptoexamplenoticetheexampleexamplethecryptotheusernoticetheexampleexamplecryptotheexampleexamplethenoticethecryptocryptoexampletheexamplecryptocryptothenoticeexamplecryptonoticetheexampleexampleexamplecryptocryptoexampleexamplethenoticethecryptothethethethethetheexampleexamplethetheexampletheexampletheexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample
</code></pre></div><p>好多连在一起的词汇，应该是一个简单NTP题目，也就是NLP最基础的一个步骤，分词。</p>
<p>这道题目的大致思路应该是：</p>
<ol>
<li>分词</li>
<li>词频统计</li>
<li>统计排序</li>
<li>根据排序位置找到指定的单词</li>
<li>拼接单词</li>
</ol>
<p>根据这个思路，写个脚本处理一下哈：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> Counter <span style="color:#f92672">//</span> 统计库
<span style="color:#f92672">import</span> wordninja <span style="color:#f92672">//</span> 英语单词词库
data<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;tonightsuccessnoticenoticewewesuccesstonightweexamplecryptoshouldwebackspacetonightbackspaceexamplelearnwesublimlearnbackspacetheshouldwelearnfoundsublimsystemexamplesublimfoundlearnshouldmorningsublimsystemuserlearnthecryptomorningexamplenoticetonightlearntonightlearntonightsublimenterusermorningfoundtonightweenterfoundnoticethecryptomorningthebackspacelearntonightlearnsublimtonightlearnfoundenterfoundsuccesstonightsuccessuserfoundmorningtonighttheshouldsublimentertonightenterbackspacelearnexamplenoticeexamplefoundsystemsuccesssublimsuccessshouldtonightcryptowelearncryptofoundshouldsublimsublimweentertonightsuccessshouldentertheentercryptouserbackspaceshouldentersystemsuccesssystementerfoundenterlearnexampletonightnoticemorningusertonightlearnmorningtonightfoundfoundsuccessnoticesystementerlearnexamplebackspaceshouldcryptocryptosublimweexampletonighttheshouldthemorningbackspacelearntonightsystemsuccesssuccessbackspacemorningnoticeuserfoundfoundtonightmorningenterenterthefoundbackspacelearnenterentershouldthesystemfounduserlearnlearnsystemnoticetonighttheshouldlearnuserbackspaceweusernoticeshouldthewefoundsystemwecryptocryptowethebackspacesystementershouldtonightsystemnoticemorningsystemweentermorningfoundsuccessusertonightsuccesstonightbackspaceshouldweenterthewesystemusernoticesystemthelearnexamplelearnfoundlearnnoticeexamplesystemthecryptocryptolearnsystemthecryptoenterlearnexamplemorningmorningweenterentersuccessexampleuserthebackspacenoticesublimenterbackspacesuccessbackspacethesublimexamplesystemtheexamplecryptolearnuserexamplelearnsystemusersuccessenterentersuccesstheuserbackspacelearnsuccessbackspacethesublimshouldwebackspaceexamplesuccesssuccesstonightweusershouldsuccessmorningcryptomorningfoundbackspacesublimshouldentershouldnoticesuccessmorningsuccessexamplelearnshouldsublimlearntonightshoulduserbackspacesublimlearncryptosuccessenternoticetonightmorningtonightwesuccessweuserbackspaceexamplewesystemnoticemorningsystemmorningcryptolearnsystemthethefoundcryptouserlearnusersystemwemorningenterexampleshouldlearncryptofoundenterbackspacelearnenterenterbackspaceshouldbackspacetheshouldthesystemshouldshouldsuccessmorningthefoundsystementersystemtonightcryptowelearnexampleexamplesystementerbackspaceshouldtheentersublimtonightfoundfoundsuccesssuccesssystemsublimcryptoshouldentersublimmorninglearnfoundtonightcryptobackspacesuccesscryptowebackspacefoundshouldnoticeshouldmorningnoticesystemcryptosystemlearnsystemnoticemorningsystementerwemorninglearnsuccessfoundwesuccesswetheusercryptousernoticebackspacesuccessshouldtonightmorningentermorninguserenternoticefoundmorningwetonightsystemthecryptotonightcryptosystemuserthefoundexampletonightusersystemcryptosublimmorninguserthefoundbackspaceshouldsuccesscryptotonightsystemnoticebackspaceusershouldenterthecryptomorningwesublimnoticesuccessnoticeusersuccesstonightlearnweuserenterfounduserexampleshouldshouldtonightwelearnthenoticethewefoundmorningexampleshouldexamplethesuccessnoticeenterfoundthecryptonoticeuserlearnuserweenterfoundmorningsystemweexamplenoticethebackspaceexamplesublimtheusermorningtonightthesuccesscryptosuccessusersuccesstonighttonightwelearnenterenterthemorningentersystemcryptobackspacemorningsystemexamplecryptouserexamplelearnsublimsuccessusersystemfoundmorningshouldcryptotonightsublimtheexamplemorningsystemuserexampleweexamplenoticesuccesssublimnoticecryptoshouldbackspaceshouldthetonightfoundsublimbackspacebackspacetonightshouldbackspacesuccesstonightbackspacesuccessmorningsystemcryptobackspaceentertonighttonightnoticelearnshoulduserfoundexamplesystemthesuccessweusertonightcryptousernoticeenternoticebackspaceusersystemfoundusernoticeshouldlearnuserfoundexampleusermorningshouldsuccessmorningmorningexampleexamplefoundsublimfoundenterbackspacenoticelearnfoundmorningcryptonoticecryptoshouldweshouldtonightcryptobackspacesublimcryptosublimenterentersublimentercryptonoticethethesublimexampleenterentershouldlearncryptoentershouldmorninglearnnoticeuserexamplesublimtonightshouldfoundtonightsuccessshouldmorningfoundtheweuserlearnsublimsystembackspacecryptotheusertonightcryptosublimmorningmorningexamplenoticetheenterlearnshouldmorningsublimfoundtonightsublimsublimexamplefounduserexamplethefoundwemorningnoticefoundcryptosuccesssublimsublimexamplethesuccessexamplenoticesuccessbackspacesublimlearnuserexamplesuccesssuccesssystemsuccessmorningmorninglearnexamplemorningtonightfoundbackspaceenternoticemorningentersuccessmorningusermorningbackspacelearncryptoenteruserenteruserthetonighttonightsuccesslearnenterfoundsuccesssystemfoundbackspaceenterlearnsystemsublimcryptoentermorningwetonightshouldlearnenterfoundcryptonoticelearnlearnshouldfoundsuccessexampletonightthesuccessfoundusertonightenterfoundsuccessshouldmorningusernoticemorningsystemsystemsuccessshouldwelearnenterfoundexamplewethefoundweshouldsystemsystemmorningmorningbackspaceshouldentersublimentertonightsuccesssystemsystemcryptousershouldsublimfoundwetonightnoticeexamplewewesuccessfoundusertonightfoundsystemexamplecryptofoundshouldshouldsuccessenterbackspaceexampletonightthelearnnoticeuserlearnsystemsublimfoundlearnsuccesssystemshouldsublimnoticelearnsystemnoticetonightexamplefoundusernoticeenterlearnnoticecryptousersystemmorningthewesystemfoundfoundshouldsystementerenterbackspacesystemsublimcryptousermorninglearnlearntonightsublimlearnenterenterbackspacesystemuserusercryptoentershouldtheusersublimnoticeexamplemorningexamplesublimsublimbackspacesystemexampleshouldsublimlearnfoundenterbackspacelearnmorningmorningfoundthetonightmorningnoticeenterlearnusersystemtonightbackspaceexamplelearntonightbackspaceweshouldcryptosuccessbackspaceexamplesuccesstheshouldmorninguserbackspacelearnthetheshouldcryptocryptotonightbackspacecryptocryptobackspacebackspacenoticeusertonightentermorningfoundweenterexampleenterfoundusersublimsystemtheexampleexamplesystemsuccessusersublimentermorningbackspacesystemfoundlearnsystemshouldsublimsublimentershouldtheusershouldexampleexampleshouldsuccesswelearnfoundsublimshoulduserweentertonightwenoticesublimsystemlearnshouldfoundsuccessuserentersuccessmorningcryptoenteruserfoundexampletonightlearnexampleexamplefoundlearnsuccesssystembackspacecryptonoticethefoundbackspacelearncryptothelearnlearnexamplesuccessnoticenoticesystemmorningcryptotonightnoticenoticeentersuccesscryptoenterbackspacesublimexampleenterfoundtonightcryptotonightsublimnoticesuccesssublimtheentertonighttheshouldthefoundsystemtonightuserbackspacesuccessshouldwebackspacenoticebackspacebackspacenoticewecryptobackspacebackspaceusertonightlearnsuccessmorningusertonightsuccessshouldbackspacecryptoenterentershouldsublimsystemexamplemorningcryptonoticethesuccessthebackspacenoticelearnsublimlearnsuccesscryptothesuccessenternoticecryptosystemsublimsuccesswebackspaceuserenterlearnuserwewemorningsuccesslearncryptobackspacewecryptosystemlearnenterenteruserexamplefoundsystemcryptousernoticefoundusersublimbackspacewesublimnoticemorningshouldexamplenoticecryptoshouldtonightmorningthefoundsystementerentersystemthecryptobackspacesublimlearnsuccessmorningsublimsystemcryptousersublimwesuccessmorningsublimbackspacecryptobackspacesublimthelearnsuccesssublimlearncryptoweweexamplecryptowenoticelearnfoundbackspacesystemsystemexampleshouldlearnsuccesssublimcryptobackspacetonightbackspacemorningmorningnoticeshouldnoticefoundthetheshouldtheshouldfoundfoundcryptosuccessbackspacesuccessshouldweenternoticeweweshouldmorningfoundusersuccessbackspacewenoticeusersuccessenterenterexamplelearnfoundwetonightusercryptothesublimsublimtonightsuccesslearnbackspacetonightentertonightthesublimnoticewefoundcryptobackspaceenterenterlearnlearntonightexamplesystementersublimnoticecryptoshoulduseruserbackspaceuserwesublimmorningwesystemshouldtonighttheusershouldnoticefoundusernoticeentersublimwethewefoundfoundlearnfoundwecryptosystemexamplemorningcryptocryptosublimtheexamplenoticefoundlearnwelearnmorningtheenterthesystemsublimtonightsuccesssystemlearnshouldenterbackspaceentersuccesssuccessbackspaceexamplenoticeentershouldsublimlearnbackspacetheshouldexamplelearnsystemusersublimbackspacebackspacesuccesswelearntonightexamplewecryptoenterwesystemsystemsublimexamplecryptolearnmorningsublimfoundsublimfoundbackspacefoundtonighttonightnoticesuccesssuccessexampleusersuccesstonightsublimcryptosystemweenterexamplesystemthethenoticesublimtonightbackspacenoticesystemexamplethesuccesstonightmorningsuccesstonightwenoticesublimtonightwelearntonightmorningsublimbackspaceenterthetonightenterwecryptofoundtheenternoticebackspacesuccesswesystemuserexamplebackspaceentersuccesstonightsublimwemorningsuccesssuccesswesublimsuccessnoticesublimfoundlearnlearnweexamplecryptonoticelearnweusershoulduserfoundcryptolearnfoundmorningtonightmorningmorningnoticewecryptowewesuccessfoundsublimweuserentershouldshouldshouldsublimbackspacetonightenterwesublimsuccessshouldfoundthethetonightwecryptoweenterfoundcryptoshouldcryptouseruserfoundentersublimsublimthelearntheshouldnoticebackspacefoundsuccessshouldtonightentermorningsystemmorningtonightwenoticelearnbackspaceexampleusershouldnoticesublimsublimexamplethesuccessnoticesystemmorningnoticecryptosystemsublimcryptosystemsuccessshouldmorningbackspaceshouldmorninglearnnoticenoticeshouldthewewesublimsublimnoticeusersuccessentersystemfoundshouldshouldcryptobackspaceusermorningsystemshouldshouldtonightwesublimuserfoundlearnbackspacethetonightmorningexampleuserthefoundbackspaceshouldtonightcryptocryptofounduserexamplenoticecryptousernoticethenoticeshouldweshouldfoundwemorningcryptosuccesslearnfoundtonightsublimnoticenoticewefoundwewesuccesssublimsublimcryptoweexampletonightsuccessfoundshouldsuccesstonightbackspacesystemshouldwesystemnoticebackspaceusersystembackspacewenoticelearnnoticenoticesuccesslearntonightuserlearnsuccessbackspacesuccesswesystemusercryptonoticethesystemusernoticewethesuccessweshouldfoundshouldcryptomorningtonightwethewesuccesslearntheshouldweexampletonightsuccessnoticenoticemorningfoundmorningfoundusersublimsystemsuccessbackspacesuccessmorninguserthefoundweexamplemorningsublimlearnfoundfoundnoticemorningshouldweuserwemorningexamplesuccesssuccessfoundthetheshouldweusershouldtheshouldexamplenoticefoundsuccesssystemfoundshouldsublimbackspacetonightshouldsystemtonightsuccesslearntonightsystemsublimsuccesscryptobackspacesystemsublimmorningmorningshouldmorninglearnsuccesslearnmorningusermorninglearnexamplecryptoshouldbackspacesublimshouldfoundbackspacesystemsystemweexamplesystemtonightsublimmorningmorninguserfoundcryptolearnbackspaceshouldbackspacenoticesublimfoundthecryptousershouldsuccesssystemsuccessshouldsystembackspacesublimshouldsublimsystembackspaceexampleshouldbackspacesublimnoticelearnsublimuserbackspaceusersublimsuccesssublimuserusernoticeshouldsuccessnoticenoticelearnexamplesystemweexamplesublimbackspacebackspacecryptoshouldusercryptosublimbackspacesublimshouldsystemnoticenoticethesuccesssuccesslearnsystemsublimwenoticelearnusersublimsystemusernoticeuserthesuccesslearnwelearnwenoticecryptolearncryptonoticenoticebackspacecryptothecryptousercryptobackspacesuccesslearnthesystemsuccessthesystemsystemcryptosuccessbackspacesublimlearnsublimcryptobackspacelearnsublimusersublimexamplecryptosublimsystemnoticecryptocryptousertheusernoticebackspacenoticenoticethecryptocryptosystembackspacesublimbackspacecryptocryptobackspacesystemuserthenoticesystemsystemsystemusernoticethecryptouserusersystemtheusercryptoexamplenoticecryptoexamplenoticetheexampleexamplethecryptotheusernoticetheexampleexamplecryptotheexampleexamplethenoticethecryptocryptoexampletheexamplecryptocryptothenoticeexamplecryptonoticetheexampleexampleexamplecryptocryptoexampleexamplethenoticethecryptothethethethethetheexampleexamplethetheexampletheexampletheexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample</span><span style="color:#e6db74">&#34;</span>
lm <span style="color:#f92672">=</span> wordninja<span style="color:#f92672">.</span>LanguageModel(<span style="color:#e6db74">&#39;my_dict.txt.gz&#39;</span>) <span style="color:#f92672">//</span> 通过调试写出的简单字典
data_list <span style="color:#f92672">=</span> lm<span style="color:#f92672">.</span>split(data)
data_count <span style="color:#f92672">=</span> Counter(data_list)
index <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
hint_list <span style="color:#f92672">=</span> [<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">15</span>,<span style="color:#ae81ff">16</span>]
m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> data_count<span style="color:#f92672">.</span>most_common(<span style="color:#ae81ff">20</span>)[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]:
    <span style="color:#66d9ef">if</span> index <span style="color:#f92672">in</span> hint_list:
        m <span style="color:#f92672">+=</span> i[<span style="color:#ae81ff">0</span>]
    index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
print(m)
</code></pre></div><p>运行一下脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">weshouldlearnthecrypto
</code></pre></div><p>游戏结束！得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{weshouldlearnthecrypto}
</code></pre></div><h2 id="0x1-afctf2018vigenere">0x1 [AFCTF2018]Vigenere</h2>
<p>维吉尼亚密码，多表替换密码。来瞧瞧题目的附件：</p>
<p>两个附件文件，一个加密的<code>flag_encode.txt</code>和加密算法的<code>Encode.c</code></p>
<p>Encode.c</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
	freopen(<span style="color:#e6db74">&#34;flag.txt&#34;</span>,<span style="color:#e6db74">&#34;r&#34;</span>,stdin);
	freopen(<span style="color:#e6db74">&#34;flag_encode.txt&#34;</span>,<span style="color:#e6db74">&#34;w&#34;</span>,stdout);
	<span style="color:#66d9ef">char</span> key[] <span style="color:#f92672">=</span> <span style="color:#75715e">/*SADLY SAYING! Key is eaten by Monster!*/</span>;
	<span style="color:#66d9ef">int</span> len <span style="color:#f92672">=</span> strlen(key);
	<span style="color:#66d9ef">char</span> ch;
	<span style="color:#66d9ef">int</span> index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
	<span style="color:#66d9ef">while</span>((ch <span style="color:#f92672">=</span> getchar()) <span style="color:#f92672">!=</span> EOF){
		<span style="color:#66d9ef">if</span>(ch<span style="color:#f92672">&gt;=</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">&amp;&amp;</span>ch<span style="color:#f92672">&lt;=</span><span style="color:#e6db74">&#39;z&#39;</span>){
			putchar((ch<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">+</span>key[index<span style="color:#f92672">%</span>len]<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;a&#39;</span>);
			<span style="color:#f92672">++</span>index;
		}<span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(ch<span style="color:#f92672">&gt;=</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">&amp;&amp;</span>ch<span style="color:#f92672">&lt;=</span><span style="color:#e6db74">&#39;Z&#39;</span>){
			putchar((ch<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">+</span>key[index<span style="color:#f92672">%</span>len]<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;A&#39;</span>);
			<span style="color:#f92672">++</span>index;
		}<span style="color:#66d9ef">else</span>{
			putchar(ch);
		}
	}
	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>flag_encode.txt</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Yzyj ia zqm Cbatky kf uavin rbgfno ig hnkozku fyyefyjzy sut gha pruyte gu famooybn bhr vqdcpipgu jaaju obecu njde pupfyytrj cpez cklb wnbzqmr ntf li wsfavm azupy nde cufmrf uh lba enxcp, tuk uwjwrnzn inq ksmuh sggcqoa zq obecu zqm Lncu gz Jagaam aaj qx Hwthxn&#39;a Gbj gfnetyk cpez, g fwwang xnapriv li phr uyqnvupk ib mnttqnq xgioerry cpag zjws ohbaul drinsla tuk liufku obecu ovxey zjwg po gnn aecgtsneoa.

Cn poyj vzyoe gxdbhf zq ty oeyl-ndiqkpl, ndag gut mrt cjy yrrgcmd rwwsf, phnz cpel gtw yjdbcnl bl zjwcn Cekjboe cklb yeezjqn htcdcannhum Rvmjlm, phnz juoam vzyoe nxn Tisk, Navarge jvd gng honshoc wf Ugrhcjefy. — Cpag zq kyyuek cpefk taadtf, Mxdeetowhps nxn qnfzklopeq gvwnt Sgf, xarvbrvg gngal fufz ywwrxu xlkm gnn koaygfn kf gnn ooiktfyz, — Tugc ehrtgnyn aae Owrz uh Yireetvmng hguiief jnateaelcre bl cpefk gfxo, ig ob bhr Xkybp os zqm Prurdy po nrcmr bx vg uxoyobp ig, gpv nk iaycqthzg fys Gbbnznzkpl, fwyvtp qtf lqmhzagoxv oa ywub lrvtlqpyku shz oemjvimopy cps cufmrf op koyh suau, af zq lbam fnjtl fkge gksg rrseye vg ybfric bhrot Kubege jvd Ugrhcjefy. Yzuqkpuy, enqknl, wvrn vcytnzn bhnz Igparasnvtf rqfa asggktifngv mdohrm vog hg ubwntkm noe rkybp aaj czaaykwhp cnabms; ntf swyoejrvgye cdf axckaqeaig zuph fnnen gncl gwnxowl aek ogla dvyywsrj vg mqfska, ehvrg wpelf gam shlhwlwbyk cpaa zq jcchg zqmmfknnyo bl gkwlvyjahc tuk owrzy vg qdipn cpel gtw uychycwmrj. Dmn shrt j toam vjuen bl jjufku shz ufaaxagoqfm, lueydqnt opnuninhug tuk usga Oopnkt rbkfwas n jnaitt vg ladhin bhrs wfxar nhbwlhzg Vyopbzram, vz kk ndevx aqguz, kl co tukrz dhza, li pheuf wfs ywub Coikavmrtv, shz tb vawvvjg fys Ghgals sut lbaie ldbuek uwwqrvzh. — Aupn jsm xert cpe cgvayjt faoneegpuy kf gnnae Pungheef; gwl shij am joj zqm nrigkmetl cqqcu iqfmprnowa tuko li wlgka bhrot xinmrx Bgsgkok ib Gbbnznzkpl. Nde uobboee qx nde cxnaeaz Mahc os Mamag Htanwia ob i hvyvglu os xnxenzgv cjjhxrms ntf mmqrcgcqoay, cdf daiowo ia jkjyyt bhsmcg zjw yotnhuqsusgfn kf nt jjsbrwly Pyegwvy bbgj ndefk Bbagku. Li lrbbn bhvy, nwn Bapzb je fadecptrj cw a pgpvcz wbxul.

Hr nck lafhynl hvy Ckmang zx Tajy, vzy iofz fpoykugga aaj wmcryuslu fbx cpe caddcy gbum.

Pe ugu xinbvjmmn uou Yireetxzs gu rsmo Lncb wf vsowxeagk jvd cxgkment ovxoezcfwa, uarnas fauhyjdrj rv tukkj ileegcqoa zkdf dif Gbaeaz uziqlq hn wbggkfyz; aaj fpea yq kooprtmmd, uk jsm qtgkaty akidyytrj cw agzgfx po gnnu.

Hr nck lafhynl tb vckm ktuka Tajy hgl phr glkozsqvupibt xn lnxiw xesgxrktf uh hykpyk, dvlryu lbksr vnwpyk ygohd ekuqndakkb phr xrohg uh Jylrrynvtnzkgh en gnn Tetoudupuek, j zitnv ahasgovibyk vg ndez gwl fbxoaxwbyk cw tlxcfno oarh.

Pe ugu uuhlrj cwgrzjwl hetobtagoxw vkdvkb it crcuyo uaabcay, apuiifbxcibyk, cfx zifzjvt sxqe nde qkywsvzqjs kf gnnqr Caddcy Rrixzdf, lqj nde fuum phxrgma os ljbitakfa phrs rvtb iqejhintlm wvzj zco mrgbcrry.

Jw bws qobaoybgv Lapekbmnggvapa Hbabms ekrwupeqrh, noe urhioiam fqtu scffu fvxvvefy jam enigbqoay qf nde eopptf uh lba pruyte.

Uk jsm nesabmd sut s fknt zrue, nlvwl oupn mqsfunmneoay, cw cnauw iphrxb bo ok gdyytrj, fpeekdq nde Ykpqsygvapa Pbcnzs, vtesjwbyk xn Aatkzchagoxv, hnbg jypuetnl tb zjw Jaocrn it ygtyy boe zqmie kzwlyifk; cpe Fzcly nezgrviam kf nde zkjv tvsg wrlofkm bo nrn lba dntpmrf uh ahrafoxv feuo ocphbac, inq iqfpqlfoxvs jovzcj.

Hr nja eajgspkuekm bo cxgnyjt gnn xocansneoa uo bhryg Knwtry; owr gncl jqrcubm ooyvjoytvtp bhr Rcom boe Tjbuegnatwtvuw wf Sutwccnrxb; zesauahc tb vjas bzjwlo tb kwkohxcyy phroa uitxclcknf nrbhrx, cfx navyrvg gng uijdvzrwnf uh fys Acvawpeoclcknf uo Taaju.

Zy daf ukateaelyz tuk Jlmvtkknnagoxv os Pwknecr hh zesauahc hvy Jasrtv li Hajy owr ryvsvhifnrvg Wafaweaee Ywwrxu.

Zy daf sjle Wafyyo drvnvdrtv gh dif Crtl nrqfy boe zqm trtwjy kf gnnqr blhawas, ntm bhr gogojt ntm xalsgfn kf gnnqr fgnsleef.

luig vy cxwpf{Jnxwobuqg_O_Cogiqi!}

Hr nck ynepznl a zanlcpuqk xn Nrc Qxzecry, jvd fkpl betuka awnxok ib Oslrkeey vg bwrnyb wue vggjhe ntm mag uwl ndevx bcbfzcfwa.

Hr nja krvv sgknt ab, qn goowm kf ckjke, Fzcfxent Gauiry yandohz cpe Pupkyjt bl xcr ykiamhagaams.

Uk jsm wfsklbeq zq jyjdrx cpe Zonanwrl owleckpvyjt bl jvd farwleoe zx bhr Iknch Pbcnz.

Hr nck wkmoowmd jovz iphrxb bo fadbyyt hy cw a watamzipzrwn sutwccn gu xcr pupknethzrwn, ntf mhwcxtxelrjiwx xy baa tajy; iapent nra Afygfn po gnnqr Nivk ib pekcmnqkf Dycifrjbibt:

Hgl munxcmrvti dungr hxliry qx unmrj czobvu sgknt ab:

Noe vtgnacgowo tuko, ts w mbit Brvgn xlkm cawqsusgfn boe gwg Mhxfwlo wuolp tuka kbkuyj lwmzov gh phr Owpaoovshps bl cpefk Ulupef:

Lxz chzvahc osl xcr Gxcvy sign jtl cgtlm kf gnn eoerf:

Xin izvxaiam Vsras bt da wvzjgop ohx Lwnfkpl:

Zkr qkyziiopy oo ia sjvy pguwm, kf gnn jeakhan kf Gxril oe Lmlu:

Fbx czaayrglpiam da breqfx Oeny cw br ztayz fbx yzegkpvyz oslnvcry:

Hgl wbbrrahvti lba fekn Ayfzge ib Eamuqsu Rcom en n tnqguhqmlent Vawvvtew, yotnhuqsuopy ndeekrv aa Gttcprnxh ooiktfgang, gwl earcjaent oca Bbapvuniry bw af zq jyjdrx rb ag upuy wn rdjupyk cfx big owateaowhp fbx rvteufmwent zqm snsg svooyacm rhrg ahpo gnnae Pungheef

Lxz tnqkfa wwne xcr Pncjnarf, gkwlvyjahc ohx vwsg bcdowbyk Uiwf gpv uhtrxrvg sapvuieazjtll zjw Zkrzy xn ohx Igparasnvtf:

Lqj mqsckwliam qml kwa Rnoifrclonef, gwl drinslent zqmmfknnyo iabnatrj yand pbcnz tb rgycolnzn noe au ah wly ijaef cjsnoorbnz.

Hr nck uxdvijbeq Mqnynnzkwb hrxg, ts zeprjziam wk iqt bl qqs Cxqlyytvuw inq ccycjg Jga ignopkn qs.

Uk qis crwfxarrj xcr fkck, lwvnmnl ohx eguotf, hdzng uwj nkway, jvd qkullkyrj cpe yoxwm kf baa xebvnw.

Ba if gc bhvy vaga tegwapbxvahc lnxpm Aeskwm kf suamitt Owlyeagaqef zq uiipykjb tuk yglgs bl mmagn, fwmklnzrwn, ntf lsnaath, ilekcvs xetaw eign ealyuzycinpku gz Yrhkuby &amp; Cktxczy fijzcrra hunayrnteq op lba mbyc jaehcjiqs nmna, aaj vgnwlye dvwbxvzs phr Nnid bl c ucriyoimd agvaij.

Hr nja cbtullwiakm wue lgdfkw Pocqzrtu lugea Ijxtvbg gh phr nroh Fkck nk brga Irzy cyuenfz cpevx Egojtee, cw briqey phr kgmchzkgharf uo bhrot xleeajb inq Htwndrrt, xz tb lcdf phrsbmliku ts phroa Paaju.

Zy daf kgkigkf viiefzrk iaywjlacgoxvs nsqfaot hy, jvd ugu whzenbxcrrj vg vniam xv tuk kfbwbvzjvtf uh gon feuwbirxu, lba mrxlqlryu Ahzint Bivnmgk qdofk tvojt tmfa os cjzfnxg, am wn htmqsgopyoesukm lefztmwpibt xn ayr cyyo, srdna aaj eghzigoxvs.

Vt gnyny fzjoe bl vzyoe Bvyzefykgho Wr njde Ckvaneoakm noe Xgvlasf ow bhr sqkn duzhum trxok: Iqr ekymagkf Hypigoxvs ugxw vaea gwawrxgv ijll hh zeckclyz iapdzy. N Vtahye, jnxae pncjuytrx ra tuau eunkrj kg eiktq uyt jnrkh zga vybiak j Byegpl, co ualrb tb hg lba rhrnz os g hjya pruyte.

Aut zure Jk kmea ccfnent ow itgkplcknf zx wue Htanesu hamtuxgf. Qa hnbn eaetgv ndez lawm goow nk tvsn wf nzvwgltf hh bhrot dycifrjbuek vg yttrtm in htyslnaazjjlr pwjcodvicqoa uxwl qs. Jk qivr xgecjdrj cpez uh lba cvxlcmfzcfwas bl xcr rskylwtvuw inq yglnhezkwb hrxg. Oy daik jxprgnwx po gnnqr agvapa jhycqcr gpv gwgagwqmvza, shz wr njde pupboneq zqmm oe vzy piry xn ohx eggioa qrvdekf li zifgeww gngky qshxyitvupk, qdipn fwuyj kfyriggkty vtvwlnucz xcr pupfyytvuwa aaj eglnefvxvdrtew. Ndel zxw hnbg tyan qkjn tb zjw pkipk xn jhyvawa aaj xn cbtushcuvtrby. Jk ommp, tukamfbxg, swmuvkbke vt vzy jepkbaige, yzcyh qkwwuaigk iqr Fkyirnzkgh, wnq nxtd gnge, uo wr nxtd gng jyot bl vinxopv, Yjezona ia Ccj, cj Prglm Feogfxo.

Wr, zqmrrlqjy, phr Xnxrrygfnwtvbna os zjw ojigkm Atnzgk ib Azkaqcn, op Yyjeegu Koamtwmo, Afynubykf, sjlenrrvg gu vzy Oucxnue Wafyy kf gnn eoerf xin tuk amcgovmxa os udz iazgfneoay, mw, ia zjw Hwmr, gwl bl Gwlbkrvzh wf gng yikd Ckxxlr uh lbasr Ixtoaogk, mklrswty caddcoh ntm leprcjy, Phnz cpefk wfcpeq Ixtoaogk une, ntm wf Eoizn kutnc bo ok Hjya aaj Rvdrvgfxang Ycitry, vzup tukh irr Gdkihvrj ozoz gnd Uhlrmrinpk vg nde Oxrbifn Ejisn, ntm bhnz cdf loyocqcnr eghjepzrwn okvoyan gnnu aaj vzy Otnzn wf Txgsn Xrvzjqn, vy cfx kutnc bo ok vgnwlye mqsfunnyz; aaj cpag gu Xlae ntm Qnqkrwhzeaz Bbagku, lbay ugem fhrn Hisee zx teie Ysl, yoaiucdr Vgswa, cbtczapz Cdfeaaina, efzctfesu Ixumrxew, ujd gu mw ayr qlbar Nica aaj Vzcjgf cqqcu Opvyleajnvt Fzclyo mne xn rvmjl xk. — Aaj owr gng kolpbxc wf gnkk Xacygaitvup, ocph n lrzm eknaujcr uw bhr vtgnacgoxv os Jkncje Cxxdiqkpuy, se zaccayra hfadtk cw enij gndee udz Lvbgk, iqr Suabuaku, shz ohx bicekf Zijoe.
</code></pre></div><p>直接去维吉尼亚密码破解网站进行破解就好，进行破解得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">When in the Course of human events it becomes necessary for one people to dissolve the political bands which have connected them with another and to assume among the powers of the earth, the separate and equal station to which the Laws of Nature and of Nature&#39;s God entitle them, a decent respect to the opinions of mankind requires that they should declare the causes which impel them to the separation.

We hold these truths to be self-evident, that all men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness. — That to secure these rights, Governments are instituted among Men, deriving their just powers from the consent of the governed, — That whenever any Form of Government becomes destructive of these ends, it is the Right of the People to alter or to abolish it, and to institute new Government, laying its foundation on such principles and organizing its powers in such form, as to them shall seem most likely to effect their Safety and Happiness. Prudence, indeed, will dictate that Governments long established should not be changed for light and transient causes; and accordingly all experience hath shewn that mankind are more disposed to suffer, while evils are sufferable than to right themselves by abolishing the forms to which they are accustomed. But when a long train of abuses and usurpations, pursuing invariably the same Object evinces a design to reduce them under absolute Despotism, it is their right, it is their duty, to throw off such Government, and to provide new Guards for their future security. — Such has been the patient sufferance of these Colonies; and such is now the necessity which constrains them to alter their former Systems of Government. The history of the present King of Great Britain is a history of repeated injuries and usurpations, all having in direct object the establishment of an absolute Tyranny over these States. To prove this, let Facts be submitted to a candid world.

He has refused his Assent to Laws, the most wholesome and necessary for the public good.

He has forbidden his Governors to pass Laws of immediate and pressing importance, unless suspended in their operation till his Assent should be obtained; and when so suspended, he has utterly neglected to attend to them.

He has refused to pass other Laws for the accommodation of large districts of people, unless those people would relinquish the right of Representation in the Legislature, a right inestimable to them and formidable to tyrants only.

He has called together legislative bodies at places unusual, uncomfortable, and distant from the depository of their Public Records, for the sole purpose of fatiguing them into compliance with his measures.

He has dissolved Representative Houses repeatedly, for opposing with manly firmness his invasions on the rights of the people.

He has refused for a long time, after such dissolutions, to cause others to be elected, whereby the Legislative Powers, incapable of Annihilation, have returned to the People at large for their exercise; the State remaining in the mean time exposed to all the dangers of invasion from without, and convulsions within.

He has endeavoured to prevent the population of these States; for that purpose obstructing the Laws for Naturalization of Foreigners; refusing to pass others to encourage their migrations hither, and raising the conditions of new Appropriations of Lands.

He has obstructed the Administration of Justice by refusing his Assent to Laws for establishing Judiciary Powers.

He has made Judges dependent on his Will alone for the tenure of their offices, and the amount and payment of their salaries.

flag is afctf{Whooooooo_U_Gotcha!}

He has erected a multitude of New Offices, and sent hither swarms of Officers to harass our people and eat out their substance.

He has kept among us, in times of peace, Standing Armies without the Consent of our legislatures.

He has affected to render the Military independent of and superior to the Civil Power.

He has combined with others to subject us to a jurisdiction foreign to our constitution, and unacknowledged by our laws; giving his Assent to their Acts of pretended Legislation:

For quartering large bodies of armed troops among us:

For protecting them, by a mock Trial from punishment for any Murders which they should commit on the Inhabitants of these States:

For cutting off our Trade with all parts of the world:

For imposing Taxes on us without our Consent:

For depriving us in many cases, of the benefit of Trial by Jury:

For transporting us beyond Seas to be tried for pretended offences:

For abolishing the free System of English Laws in a neighbouring Province, establishing therein an Arbitrary government, and enlarging its Boundaries so as to render it at once an example and fit instrument for introducing the same absolute rule into these Colonies

For taking away our Charters, abolishing our most valuable Laws and altering fundamentally the Forms of our Governments:

For suspending our own Legislatures, and declaring themselves invested with power to legislate for us in all cases whatsoever.

He has abdicated Government here, by declaring us out of his Protection and waging War against us.

He has plundered our seas, ravaged our coasts, burnt our towns, and destroyed the lives of our people.

He is at this time transporting large Armies of foreign Mercenaries to compleat the works of death, desolation, and tyranny, already begun with circumstances of Cruelty &amp; Perfidy scarcely paralleled in the most barbarous ages, and totally unworthy the Head of a civilized nation.

He has constrained our fellow Citizens taken Captive on the high Seas to bear Arms against their Country, to become the executioners of their friends and Brethren, or to fall themselves by their Hands.

He has excited domestic insurrections amongst us, and has endeavoured to bring on the inhabitants of our frontiers, the merciless Indian Savages whose known rule of warfare, is an undistinguished destruction of all ages, sexes and conditions.

In every stage of these Oppressions We have Petitioned for Redress in the most humble terms: Our repeated Petitions have been answered only by repeated injury. A Prince, whose character is thus marked by every act which may define a Tyrant, is unfit to be the ruler of a free people.

Nor have We been wanting in attentions to our British brethren. We have warned them from time to time of attempts by their legislature to extend an unwarrantable jurisdiction over us. We have reminded them of the circumstances of our emigration and settlement here. We have appealed to their native justice and magnanimity, and we have conjured them by the ties of our common kindred to disavow these usurpations, which would inevitably interrupt our connections and correspondence. They too have been deaf to the voice of justice and of consanguinity. We must, therefore, acquiesce in the necessity, which denounces our Separation, and hold them, as we hold the rest of mankind, Enemies in War, in Peace Friends.

We, therefore, the Representatives of the united States of America, in General Congress, Assembled, appealing to the Supreme Judge of the world for the rectitude of our intentions, do, in the Name, and by Authority of the good People of these Colonies, solemnly publish and declare, That these united Colonies are, and of Right ought to be Free and Independent States, that they are Absolved from all Allegiance to the British Crown, and that all political connection between them and the State of Great Britain, is and ought to be totally dissolved; and that as Free and Independent States, they have full Power to levy War, conclude Peace, contract Alliances, establish Commerce, and to do all other Acts and Things which Independent States may of right do. — And for the support of this Declaration, with a firm reliance on the protection of Divine Providence, we mutually pledge to each other our Lives, our Fortunes, and our sacred Honor.
</code></pre></div><p>在破解得到文字中找到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">afctf{Whooooooo_U_Gotcha!}
</code></pre></div><h2 id="0x2-npuctf2020这是什么">0x2 [NPUCTF2020]这是什么🐎</h2>
<p>看题目应该是个脑洞题，古典密码学题目，瞧瞧附件吧：</p>
<p>附件是一个<code>attachment</code>文件，没有文件扩展名……那就先探测一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">file attachment
</code></pre></div><p>得到探测输出：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">attachment: Zip archive data, at least v2.0 to extract
</code></pre></div><p>应该是一个压缩文件，修改文件名为<code>attachment.zip</code>，然后进行解压，得到了一个图片：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B64-80%5D_writeup/flag.jpg" alt="flag"></p>
<p>（这是杂项题目，越做越不像密码学）</p>
<p>这个图片应该就是密码，认真观察一下图片，发现图片底部有密文。</p>
<p>对密文进行分析：</p>
<ol>
<li>日历的周是按英文来进行显示的</li>
<li>密文数组中的首字母好像对应着英文的周</li>
</ol>
<p>因此可以根据以下思路进行解题：</p>
<ol>
<li>根据密码需要对应数字</li>
<li>将数字映射到字母表</li>
<li>讲字母拼接</li>
</ol>
<p>根据思路，写个脚本求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> string
c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;F1 W1 S22 S21 T12 S11 W1 S13&#34;</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode_cal</span>(data):
    encode_dict <span style="color:#f92672">=</span> {
            <span style="color:#e6db74">&#39;M&#39;</span>:[],
            <span style="color:#e6db74">&#39;T1&#39;</span>:[],
            <span style="color:#e6db74">&#39;W&#39;</span>:[],
            <span style="color:#e6db74">&#39;T2&#39;</span>:[],
            <span style="color:#e6db74">&#39;F&#39;</span>:[],
            <span style="color:#e6db74">&#39;S1&#39;</span>:[],
            <span style="color:#e6db74">&#39;S2&#39;</span>:[]
            }
    dict_index<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;M&#39;</span>,<span style="color:#e6db74">&#39;T1&#39;</span>,<span style="color:#e6db74">&#39;W&#39;</span>,<span style="color:#e6db74">&#39;T2&#39;</span>,<span style="color:#e6db74">&#39;F&#39;</span>,<span style="color:#e6db74">&#39;S1&#39;</span>,<span style="color:#e6db74">&#39;S2&#39;</span>]
    index <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">30</span>):
        encode_dict[dict_index[(index<span style="color:#f92672">+</span>i)<span style="color:#f92672">%</span><span style="color:#ae81ff">7</span>]]<span style="color:#f92672">.</span>append(i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)

    result<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>

    <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> data:
        <span style="color:#66d9ef">if</span> len(m)<span style="color:#f92672">==</span><span style="color:#ae81ff">2</span>:
            result <span style="color:#f92672">+=</span> string<span style="color:#f92672">.</span>ascii_lowercase[encode_dict[m[<span style="color:#ae81ff">0</span>]][int(m[<span style="color:#ae81ff">1</span>])<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#66d9ef">elif</span> len(m)<span style="color:#f92672">==</span><span style="color:#ae81ff">3</span>:
            result <span style="color:#f92672">+=</span> string<span style="color:#f92672">.</span>ascii_lowercase[encode_dict[m[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">2</span>]][int(m[<span style="color:#ae81ff">2</span>])<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
    <span style="color:#66d9ef">return</span> result

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
    flag <span style="color:#f92672">=</span> encode_cal(c_list)
    print(flag)
</code></pre></div><p>运行脚本，游戏结束！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">calendar
</code></pre></div><h2 id="0x3-easyrsa">0x3 easyrsa</h2>
<p>rsa题目，来，让我们暴打出题人！</p>
<p>附件是个python源码程序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> getPrime,bytes_to_long
<span style="color:#f92672">from</span> sympy <span style="color:#f92672">import</span> Derivative
<span style="color:#f92672">from</span> fractions <span style="color:#f92672">import</span> Fraction
<span style="color:#f92672">from</span> secret <span style="color:#f92672">import</span> flag

p<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">1024</span>)
q<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">1024</span>)
e<span style="color:#f92672">=</span><span style="color:#ae81ff">65537</span>
n<span style="color:#f92672">=</span>p<span style="color:#f92672">*</span>q
z<span style="color:#f92672">=</span>Fraction(<span style="color:#ae81ff">1</span>,Derivative(arctan(p),p))<span style="color:#f92672">-</span>Fraction(<span style="color:#ae81ff">1</span>,Derivative(arth(q),q))
m<span style="color:#f92672">=</span>bytes_to_long(flag)
c<span style="color:#f92672">=</span>pow(m,e,n)
print(c,z,n)
<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">output:
</span><span style="color:#e6db74">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035
</span><span style="color:#e6db74">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482
</span><span style="color:#e6db74">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</code></pre></div><p>简单审计一下，发现就是道数学题，微分方程的题目。这python程序的关键代码也只有一行：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">z<span style="color:#f92672">=</span>Fraction(<span style="color:#ae81ff">1</span>,Derivative(arctan(p),p))<span style="color:#f92672">-</span>Fraction(<span style="color:#ae81ff">1</span>,Derivative(arth(q),q))
</code></pre></div><p>应该就是求解方程的事情，因为涉及数学运算，所以写个sage脚本求解吧</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> long_to_bytes

c <span style="color:#f92672">=</span> <span style="color:#ae81ff">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span>
z <span style="color:#f92672">=</span> <span style="color:#ae81ff">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>

var(<span style="color:#e6db74">&#39;p, q&#39;</span>)

f1 <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span><span style="color:#f92672">/</span>diff(arctan(p),p))<span style="color:#f92672">-</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">/</span>diff(arctanh(q),q))
f2 <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q

result <span style="color:#f92672">=</span> sorted(solve([f1<span style="color:#f92672">==</span>z,f2<span style="color:#f92672">==</span>n],(p,q)))
p <span style="color:#f92672">=</span> result[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>]
q <span style="color:#f92672">=</span> result[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>]
p <span style="color:#f92672">=</span>int(str(p)[<span style="color:#ae81ff">5</span>:])
q <span style="color:#f92672">=</span>int(str(q)[<span style="color:#ae81ff">5</span>:])

phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)

d <span style="color:#f92672">=</span> inverse_mod(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> long_to_bytes(m)
print(flag)  
</code></pre></div><blockquote>
<p>由于sagemath是基于python3的开源数学软件，进行sage运行sage脚本是会转换成python格式进行运行，代码非常像python3</p>
</blockquote>
<p>运行脚本，暴打出题人！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">b&#39;BJD{Advanced_mathematics_is_too_hard!!!}&#39;
</code></pre></div><h2 id="0x4-babyrsa">0x4 babyRSA</h2>
<p>又一个RSA题目，希望这个不单单只是数学运算了，看看题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">from</span> flag <span style="color:#f92672">import</span> flag

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">nextPrime</span>(n):
    n <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">if</span> n <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">else</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">while</span> <span style="color:#f92672">not</span> isPrime(n):
        n <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span>
    <span style="color:#66d9ef">return</span> n

p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
q <span style="color:#f92672">=</span> nextPrime(p)
n <span style="color:#f92672">=</span> p <span style="color:#f92672">*</span> q
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
d <span style="color:#f92672">=</span> inverse(e, (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> (q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
c <span style="color:#f92672">=</span> pow(bytes_to_long(flag<span style="color:#f92672">.</span>encode()), e, n)

<span style="color:#75715e"># d = 19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913</span>
<span style="color:#75715e"># c = 5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804</span>
</code></pre></div><p>这道题目的输出是d、c，在算法程序里面暴露出了e。但是n不知道，这就有点麻烦了。简单推导一下公式：
$$
\phi = (p-1)\times(q-1)
$$</p>
<p>$$
d \equiv e^{-1} \text{mod}\phi
$$</p>
<p>$$
d \cdot e \equiv 1\text{mod} \phi
$$</p>
<p>$$
d\cdot e -1 = k \cdot(p-1)\cdot(q-1)
$$
根据推导，可以肯定的是这道题目需要进行爆破。为了提高爆破效率，需要进行缩小范围来进行更快求解。缩小范围需要先进行判断：p和q都是1024位，n就是2048位。进行简单的测试发现ed-1是2064位，那么可以判断出k一定是小于16位的，根据目前的推断来写脚本进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
<span style="color:#f92672">import</span> sympy
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
d <span style="color:#f92672">=</span> <span style="color:#ae81ff">19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804</span>

ed_1 <span style="color:#f92672">=</span> e<span style="color:#f92672">*</span>d<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(pow(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">15</span>),pow(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">16</span>)):
    <span style="color:#66d9ef">if</span> ed_1 <span style="color:#f92672">%</span> k <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        phi <span style="color:#f92672">=</span> ed_1<span style="color:#f92672">//</span>k
        base <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>nroot(phi,<span style="color:#ae81ff">2</span>)
        p <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(base)
        q <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>prevprime(base)
        <span style="color:#66d9ef">if</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>k <span style="color:#f92672">==</span> ed_1:
            n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
            <span style="color:#66d9ef">break</span>

m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
print flag
</code></pre></div><p>求解方式比较暴力，执行脚本就拿到flag了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">NCTF{70u2_nn47h_14_v3ry_gOO0000000d}
</code></pre></div><h2 id="0x5-afctf2018你能看出这是什么加密么">0x5 [AFCTF2018]你能看出这是什么加密么</h2>
<p>脑洞题，看看题目推测一下这是什么加密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">p=0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4f

q=0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061

e=0x10001

c=0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6
</code></pre></div><p>好常规的RSA题目，这是签到题目吧</p>
<p>写个脚本解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum

p<span style="color:#f92672">=</span><span style="color:#ae81ff">0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4f</span>

q<span style="color:#f92672">=</span><span style="color:#ae81ff">0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061</span>

e<span style="color:#f92672">=</span><span style="color:#ae81ff">0x10001</span>

c<span style="color:#f92672">=</span><span style="color:#ae81ff">0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6</span>

phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)

n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q

d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)

m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)

print flag
</code></pre></div><p>运行脚本，拿到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">afctf{R54_|5_$0_$imp13}
</code></pre></div><h2 id="0x6-actf新生赛2020crypto-rsa3">0x6 [ACTF新生赛2020]crypto-rsa3</h2>
<p>RSA算法的题目，有点意思哦！(*^_^*)</p>
<p>瞅一瞅题目附件：</p>
<p>有两个附件，比较常规的形式，一个是<code>output.txt</code>的输出文件，一个<code>rsa3.py</code>的算法文件</p>
<p>rsa3.py：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> flag <span style="color:#f92672">import</span> FLAG
<span style="color:#f92672">from</span> Cryptodome.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">import</span> random

e<span style="color:#f92672">=</span><span style="color:#ae81ff">65537</span>
p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">512</span>)
q <span style="color:#f92672">=</span> int(gmpy2<span style="color:#f92672">.</span>next_prime(p))
n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
m <span style="color:#f92672">=</span> bytes_to_long(FLAG)
c <span style="color:#f92672">=</span> pow(m,e,n)
print(n)
print(c)
</code></pre></div><p>output.txt：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">177606504836499246970959030226871608885969321778211051080524634084516973331441644993898029573612290095853069264036530459253652875586267946877831055147546910227100566496658148381834683037366134553848011903251252726474047661274223137727688689535823533046778793131902143444408735610821167838717488859902242863683
1457390378511382354771000540945361168984775052693073641682375071407490851289703070905749525830483035988737117653971428424612332020925926617395558868160380601912498299922825914229510166957910451841730028919883807634489834128830801407228447221775264711349928156290102782374379406719292116047581560530382210049
</code></pre></div><p>非常常规的RSA题目，给出了n，c，e。加密算法也比较常规，其中p和q的数值比较接近，可以直接对n开方来得到p和q的数值。根据这一思路，写个脚本求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
<span style="color:#f92672">import</span> sympy
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">177606504836499246970959030226871608885969321778211051080524634084516973331441644993898029573612290095853069264036530459253652875586267946877831055147546910227100566496658148381834683037366134553848011903251252726474047661274223137727688689535823533046778793131902143444408735610821167838717488859902242863683</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">1457390378511382354771000540945361168984775052693073641682375071407490851289703070905749525830483035988737117653971428424612332020925926617395558868160380601912498299922825914229510166957910451841730028919883807634489834128830801407228447221775264711349928156290102782374379406719292116047581560530382210049</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>

base <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>nroot(n,<span style="color:#ae81ff">2</span>)
p <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>prevprime(base)
q <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(base)

<span style="color:#66d9ef">assert</span>(p<span style="color:#f92672">*</span>q <span style="color:#f92672">==</span> n)
phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">actf{p_and_q_should_not_be_so_close_in_value}
</code></pre></div><h2 id="0x7-鸡藕椒盐味">0x7 鸡藕椒盐味</h2>
<p>题目比较奇怪，那看看题目究竟什么样的题目吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">公司食堂最新出了一种小吃，叫鸡藕椒盐味汉堡，售价八块钱，为了促销，上面有一个验证码，输入后可以再换取一个汉堡。但是问题是每个验证码几乎都有错误,而且打印的时候倒了一下。小明买到了一个汉堡，准备还原验证码，因为一个吃不饱啊验证码如下：1100 1010 0000 ,而且打印的时候倒了一下。把答案哈希一下就可以提交了。(答案为正确值(不包括数字之间的空格)的32位md5值的小写形式) 注意：得到的 flag 请包上 flag{} 提交
</code></pre></div><p>可以从题目中提炼出一些关键信息：</p>
<ol>
<li>验证码：1100 1010 0000</li>
<li>打印的时候倒了一下</li>
<li>哈希提交。(答案为正确值(不包括数字之间的空格)的32位md5值的小写形式)</li>
<li>而且打印的时候倒了一下</li>
</ol>
<p>这些信息咋看不出来什么东西呀，嘤嘤嘤~</p>
<p>仔细看看题目，鸡藕椒盐味是不是很像是奇偶校验位，应该是这个。可以沿着奇偶校验位的这个方向沿着方向走一下，看看能否找到突破的入口。沿着奇偶校验位进行探索，发现有个海明校验码的东西，而且还有一个海明纠错码。这道题目，应该是使用海明纠错码来进行纠错的，那么什么是海明码呢？可以看看这篇<a href="https://zhuanlan.zhihu.com/p/278326197#:~:text=%E6%B5%B7%E6%98%8E%E7%A0%81%E5%88%A9%E7%94%A8%E7%9B%91%E7%9D%A3%E5%85%AC%E5%BC%8F%E5%AF%B9%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E4%BA%A4%E5%8F%89%E6%A0%A1%E9%AA%8C%EF%BC%8C%E5%88%A9%E7%94%A8%E7%9B%91%E7%9D%A3%E5%85%AC%E5%BC%8F%E7%9A%84%E7%89%B9%E6%80%A7%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%AE%9A%E4%BD%8D%E5%87%BA%E9%94%99%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BD%8D%E7%BD%AE%E3%80%82.%20%E5%9B%A0%E4%B8%BA%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%96%E5%80%BC%E5%8F%AA%E6%9C%89%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%810%E5%92%8C1%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%8F%AA%E8%A6%81%E7%9F%A5%E9%81%93%E5%87%BA%E9%94%99%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E4%BF%AE%E6%94%B9%E5%B0%B1%E5%8F%98%E5%BE%97%E9%9D%9E%E5%B8%B8%E7%9A%84%E5%AE%B9%E6%98%93%EF%BC%8C%E5%8F%AA%E8%A6%81%E5%AF%B9%E5%87%BA%E9%94%99%E4%BD%8D%E7%BD%AE%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8F%96%E5%8F%8D%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%BE%BE%E5%88%B0%E7%BA%A0%E6%AD%A3%E7%9A%84%E7%9B%AE%E7%9A%84%E3%80%82.%20%E4%BE%8B%E5%A6%82%E6%8E%A5%E6%94%B6%E7%AB%AF%E6%94%B6%E4%BA%86%E4%B8%80%E4%B8%B2%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE101011%EF%BC%8C%E7%BB%8F%E8%BF%87%E6%B5%B7%E6%98%8E%E7%A0%81%E8%AE%A1%E7%AE%97%E5%90%8E%E5%BE%97%E5%88%B0%E7%9A%84%E6%95%B0%E5%AD%97%E6%98%AF3%EF%BC%8C%E8%AF%B4%E6%98%8E%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84%E7%AC%AC3%E4%BD%8D%E7%9A%84%E6%95%B0%E6%8D%AE%E5%87%BA%E7%8E%B0%E4%BA%86%E9%94%99%E8%AF%AF%EF%BC%8C%E7%BA%A0%E6%AD%A3%E6%97%B6%E5%8F%AA%E9%9C%80%E8%A6%81%E6%8A%8A%E7%AC%AC%E4%B8%89%E4%BD%8D%E7%9A%841%E5%8F%96%E5%8F%8D%E5%8F%98%E6%88%900%E5%8D%B3%E5%8F%AF%EF%BC%8C%E7%BA%A0%E6%AD%A3%E5%90%8E%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%B2%E6%98%AF100011%E3%80%82.,%E5%85%AC%E5%BC%8F%20%281%29%E4%B8%AD%E6%B5%B7%E6%98%8E%E7%A0%81%E8%99%BD%E7%84%B6%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BA%A0%E9%94%99%EF%BC%8C%E4%BD%86%E6%98%AF%E5%8F%AA%E8%83%BD%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%AF%94%E7%89%B9%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BA%A0%E9%94%99%E3%80%82.%20%E5%A6%82%E6%9E%9C%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%9C%89%E5%A4%9A%E4%B8%AA%E6%AF%94%E7%89%B9%E5%90%8C%E6%97%B6%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%EF%BC%8C%E5%B0%B1%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8%E6%9B%B4%E5%8A%A0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%B5%B7%E6%98%8E%E5%85%AC%E5%BC%8F%E3%80%82.">知乎文章</a>大致原理都有了，根据这篇文章阐述的原理进行脚本编写，应该就可以找出答案了。写下脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> hashlib

c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;110010100000&#34;</span>
c_r <span style="color:#f92672">=</span> c[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
c_list <span style="color:#f92672">=</span>[]

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_r:
    c_list<span style="color:#f92672">.</span>append(int(i))

h1 <span style="color:#f92672">=</span> c_list[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">4</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">8</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">^</span> c_list[<span style="color:#ae81ff">0</span>]
h2 <span style="color:#f92672">=</span> c_list[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">5</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">9</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">^</span> c_list[<span style="color:#ae81ff">1</span>]
h3 <span style="color:#f92672">=</span> c_list[<span style="color:#ae81ff">4</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">5</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">^</span> c_list[<span style="color:#ae81ff">3</span>]
h4 <span style="color:#f92672">=</span> c_list[<span style="color:#ae81ff">8</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">9</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">10</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">^</span> c_list[<span style="color:#ae81ff">7</span>]

mistake_bit <span style="color:#f92672">=</span> int(str(h4)<span style="color:#f92672">+</span>str(h3)<span style="color:#f92672">+</span>str(h2)<span style="color:#f92672">+</span>str(h1),<span style="color:#ae81ff">2</span>)
<span style="color:#66d9ef">if</span> c_list[mistake_bit<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">==</span><span style="color:#ae81ff">1</span>:
    c_list[mistake_bit<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">else</span>:
    c_list[mistake_bit<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>

m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
    m <span style="color:#f92672">+=</span> str(i)
m <span style="color:#f92672">=</span> m[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
flag <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5(m)<span style="color:#f92672">.</span>hexdigest()
print flag
</code></pre></div><p>运行一下脚本，flag就有了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">d14084c7ceca6359eaac6df3c234dd3b
</code></pre></div><h2 id="0x8-actf新生赛2020crypto-classic0">0x8 [ACTF新生赛2020]crypto-classic0</h2>
<p>看题目就知道，这个是古典密码学的题目，看看究竟是在考察些什么古典密码吧：</p>
<p>附件文件里面有三个文件，一个<code>cipher</code>文本文件，一个<code>hint.txt</code>提示文件和一个<code>howtoencrypt.zip</code>加密压缩文件。</p>
<p>hint.txt:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">哼，压缩包的密码？这是小Z童鞋的生日吧==
</code></pre></div><p>应该是压缩包文件的提示内容</p>
<p>另一个cipher文件需要进行探测一下，使用<code>file</code>命令简单探测一下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">cipher: International EBCDIC text, with no line terminators
</code></pre></div><p>是一个纯文本文件，这样可以使用记事本直接打开：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Ygvdmq[lYate[elghqvakl}
</code></pre></div><p>这个提示应该告诉压缩文件的密码长度，这里可以使用压缩爆破工具进行爆破，经过爆破可以得到密码是<code>19990306</code>。使用密码进行解压得到一个c语言源程序，应该是加密算法。</p>
<p>classic0.c：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">char</span> flag[<span style="color:#ae81ff">25</span>] <span style="color:#f92672">=</span> <span style="color:#f92672">***</span>

<span style="color:#66d9ef">int</span> main()
{
	<span style="color:#66d9ef">int</span> i;
	<span style="color:#66d9ef">for</span>(i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">25</span>;i<span style="color:#f92672">++</span>)
	{
		flag[i] <span style="color:#f92672">-=</span> <span style="color:#ae81ff">3</span>;
		flag[i] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">0x7</span>;
		printf(<span style="color:#e6db74">&#34;%c&#34;</span>,flag[i]);
	}
	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>; 
}
</code></pre></div><p>根据这个c程序算法设计一个逆算法应该就可以进行求解，这里写个c语言逆算法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
    <span style="color:#66d9ef">char</span> flag[<span style="color:#ae81ff">25</span>];
    FILE <span style="color:#f92672">*</span>fp <span style="color:#f92672">=</span> NULL;
    fp <span style="color:#f92672">=</span> fopen(<span style="color:#e6db74">&#34;cipher.txt&#34;</span>,<span style="color:#e6db74">&#34;r&#34;</span>);
    fgets(flag,<span style="color:#ae81ff">25</span>,fp);

    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">25</span>;i<span style="color:#f92672">++</span>)
    {
        flag[i] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">0x7</span>;
        flag[i] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">3</span>;
        printf(<span style="color:#e6db74">&#34;%c&#34;</span>, flag[i]);
    }
    fclose(fp);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>编译并执行得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">actf{my_naive_encrytion}
</code></pre></div><h2 id="0x9-roarctf2019babyrsa">0x9 [RoarCTF2019]babyRSA</h2>
<p>RSA题目，看看这次又有什么样的惊喜！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> sympy
<span style="color:#f92672">import</span> random

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">myGetPrime</span>():
    A<span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">513</span>)
    print(A)
    B<span style="color:#f92672">=</span>A<span style="color:#f92672">-</span>random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1e3</span>,<span style="color:#ae81ff">1e5</span>)
    print(B)
    <span style="color:#66d9ef">return</span> sympy<span style="color:#f92672">.</span>nextPrime((B<span style="color:#960050;background-color:#1e0010">!</span>)<span style="color:#f92672">%</span>A)
p<span style="color:#f92672">=</span>myGetPrime()
<span style="color:#75715e">#A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407</span>
<span style="color:#75715e">#B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596</span>

q<span style="color:#f92672">=</span>myGetPrime()
<span style="color:#75715e">#A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927</span>
<span style="color:#75715e">#B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026</span>

r<span style="color:#f92672">=</span>myGetPrime()

n<span style="color:#f92672">=</span>p<span style="color:#f92672">*</span>q<span style="color:#f92672">*</span>r
<span style="color:#75715e">#n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733</span>
c<span style="color:#f92672">=</span>pow(flag,e,n)
<span style="color:#75715e">#e=0x1001</span>
<span style="color:#75715e">#c=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428</span>
<span style="color:#75715e">#so,what is the flag?</span>
</code></pre></div><p>代码挺长的，考察的内容是阶乘？是不是要考虑一下递归的方式进行求解？那估计慢的不得了，肯定有更好的算法进行求解，垃圾的我去翻翻了王小云院士写的数学书，发现有个叫威尔逊定理的东西可以用于算法的求解，这道题目就是考察威尔逊定理的内容。</p>
<p>威尔逊定理的内容很简单：
$$
(p-1)! \equiv -1 (\text{mod} p)
$$
其中p为素数</p>
<p>根据威尔逊定理就可以对这道题目进行简单的推导求解：</p>
<p>首先，了解一下算法的加密过程：
$$
p \equiv B_1! \text{mod}A_1
$$</p>
<p>$$
q\equiv B_2! \text{mod}A_2
$$</p>
<p>$$
r \equiv B_3! \text{mod}A_3
$$</p>
<p>$$
n = p \cdot q \cdot r
$$</p>
<p>$$
c \equiv m ^e \text{mod} n
$$</p>
<p>加密过程也是非常清晰，问题是如何更快地计算出p和q的数值，这里就需要用到威尔逊定理来进行相应的计算：</p>
<p>根据代码中的算法，可以看出有一句代码表明：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">B<span style="color:#f92672">=</span>A<span style="color:#f92672">-</span>random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1e3</span>,<span style="color:#ae81ff">1e5</span>)
</code></pre></div><p>因此，这里可以根据这一信息使用威尔逊定理进行推导：
$$
(A-1)! \equiv -1\text{mod}A
$$</p>
<p>$$
(A-1)\cdot(A-2)\cdot(A-3)\dots(B+1)\cdot(B)\dots2\cdot1\equiv-1\text{mod} A
$$</p>
<p>$$
(A-1)\cdot(A-2)\cdot(A-3)\dots(B+1)\cdot(B!)\equiv-1\text{mod} A
$$</p>
<p>$$
(A-1)\cdot(A-2)\cdot(A-3)\dots(B+1)\cdot(B!)\equiv(A-1)\text{mod} A
$$</p>
<p>$$
(A-2)\cdot(A-3)\dots(B+1)\cdot(B!)\equiv1\text{mod} A
$$</p>
<p>因此要求<code>(B!)%A</code>可以通过求$(A-2)\cdot(A-1)\dots(B+1)$的逆元来进行优化求解，提高运算的效率，这样分析完，这道题目的大致思路也就有了。根据这个思路，写个脚本求解就好：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
<span style="color:#f92672">import</span> sympy

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wilson</span>(A,B):
    tmp <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(B<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>,A<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
        tmp <span style="color:#f92672">*=</span> i
        tmp <span style="color:#f92672">%=</span> A
    tmp_inv <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(tmp,A)
    result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(tmp_inv)
    <span style="color:#66d9ef">return</span> result

A1<span style="color:#f92672">=</span><span style="color:#ae81ff">21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407</span>
B1<span style="color:#f92672">=</span><span style="color:#ae81ff">21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596</span>
A2<span style="color:#f92672">=</span><span style="color:#ae81ff">16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927</span>
B2<span style="color:#f92672">=</span><span style="color:#ae81ff">16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026</span>
n<span style="color:#f92672">=</span><span style="color:#ae81ff">85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733</span>
e<span style="color:#f92672">=</span><span style="color:#ae81ff">0x1001</span>
c<span style="color:#f92672">=</span><span style="color:#ae81ff">75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428</span>
p <span style="color:#f92672">=</span> wilson(A1, B1)
q <span style="color:#f92672">=</span> wilson(A2, B2)
r <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span>(p<span style="color:#f92672">*</span>q)
phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(r<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)

d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
print flag
</code></pre></div><p>运行脚本，拿到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">RoarCTF{wm-CongrAtu1ation4-1t4-ju4t-A-bAby-R4A}
</code></pre></div><p>这道题目还是挺有意思的，考的内容比较综合，是一道不错的RSA题目。</p>
<h2 id="0xa-afctf2018可怜的rsa">0xA [AFCTF2018]可怜的RSA</h2>
<p>这次又有什么花样呢？可怜的RSA</p>
<p>瞧瞧题目：</p>
<p>附件里面有两个文件，一个<code>flag.enc</code>的密文文件和一个<code>public.enc</code>的公钥文件</p>
<p>这道题目的思路应该是读取公钥文件，然后对公钥文件中的modulus进行大数分解，最后使用实际应用的会用到的填充方法进行解密。</p>
<p>思路很简单，根据思路写个脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.PublicKey <span style="color:#f92672">import</span> RSA
<span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> PKCS1_OAEP
<span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b64decode
<span style="color:#f92672">from</span> sympy.ntheory.factor_ <span style="color:#f92672">import</span> smoothness
<span style="color:#f92672">import</span> sympy
<span style="color:#f92672">import</span> libnum

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;public.key&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
    rsakey <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>importKey(f<span style="color:#f92672">.</span>read())
    n <span style="color:#f92672">=</span> rsakey<span style="color:#f92672">.</span>n
    e <span style="color:#f92672">=</span> rsakey<span style="color:#f92672">.</span>e

result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>factorint(n)
p <span style="color:#f92672">=</span> long(result<span style="color:#f92672">.</span>keys()[<span style="color:#ae81ff">0</span>])
q <span style="color:#f92672">=</span> long(result<span style="color:#f92672">.</span>keys()[<span style="color:#ae81ff">1</span>])

phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)

key_info <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>construct((n,e,d,p,q))
key <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>importKey(key_info<span style="color:#f92672">.</span>exportKey())
key <span style="color:#f92672">=</span> PKCS1_OAEP<span style="color:#f92672">.</span>new(key)

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;flag.enc&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
    c <span style="color:#f92672">=</span> b64decode(f<span style="color:#f92672">.</span>read())
    flag <span style="color:#f92672">=</span> key<span style="color:#f92672">.</span>decrypt(c)

print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">afctf{R54_|5_$0_B0rin9}
</code></pre></div><p>这道题目比较偏向于应用方面，涉及到了RSA的加密算法填充方法，不再是裸露再外面的RSA算法。可以进一步了解一下。</p>
<h2 id="0xb-救主捷径">0xB 救主捷径</h2>
<p>救主捷径，应该是一个脑洞题目，看看题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">一个名叫CPU的神秘大陆有26个国家，有些国家之间会有一条无向路，每条路径都有不同的长度和一段神秘代码，救世主尼奥要从国家1出发，赶往国家26拯救大陆，请你帮助救世主选择最短路径，而走过的路的神秘代码连接起来便是flag。 以下是数行数据，每行第一个，第二个数字代表这条路的两个端点国家，第三个数字代表路途长度，最后一个字符串便是神秘代码。路在附件中~ 帮助救世主尼奥吧，他快被吓尿了。。。 注意：得到的 flag 请包上 flag{} 提交
</code></pre></div><p>看样子应该是广度优先算法的应用，题目中只说到了距离，没有涉及权重，应该就是广度优先算法，看看附件是什么吧！</p>
<pre tabindex="0"><code>1 2 100 FLAG{
2 3 87 AFQWE
2 4 57 ETKLS
2 5 50 WEIVK
2 6 51 AWEIW
3 7 94 QIECJF
3 8 78 QSXKE
3 9 85 QWEIH
4 13 54 WQOJF
4 14 47 KDNVE
4 15 98 QISNV
5 10 43 AEWJV
5 11 32 QWKXF
5 12 44 ASJVL
6 16 59 ASJXJ
6 17 92 QJXNV
6 18 39 SCJJF
6 23 99 SJVHF
7 19 99 WJCNF
8 20 96 SKCNG
9 20 86 SJXHF
10 21 60 SJJCH
11 21 57 SJHGG
12 22 47 SJCHF
14 10 55 EJFHG
16 17 59 ASJVH
18 12 53 SJFHG
18 24 93 SHFVG
21 22 33 SJFHB
19 25 88 ASHHF
20 25 96 SJVHG
22 25 23 SJVHJ
25 26 75 SDEV}
</code></pre><p>根据附件文件绘制个图，也方便进行广度优先算法的使用和计算：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B64-80%5D_writeup/image-20210630202812243.png" alt="image-20210630202812243"></p>
<p>根据图示来使用广度优先算法的设计，这里可以使用比较经典的Dijkstra算法来求解最优问题，使用python进行算法实现：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> networkx <span style="color:#66d9ef">as</span> nx

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">Dijkstra</span>(G, start, end):
    RG <span style="color:#f92672">=</span> G<span style="color:#f92672">.</span>reverse();
    dist <span style="color:#f92672">=</span> {};
    previous <span style="color:#f92672">=</span> {}
    <span style="color:#66d9ef">for</span> v <span style="color:#f92672">in</span> RG<span style="color:#f92672">.</span>nodes():
        dist[v] <span style="color:#f92672">=</span> float(<span style="color:#e6db74">&#39;inf&#39;</span>)
        previous[v] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;none&#39;</span>
    dist[end] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    u <span style="color:#f92672">=</span> end
    <span style="color:#66d9ef">while</span> u <span style="color:#f92672">!=</span> start:
        u <span style="color:#f92672">=</span> min(dist, key<span style="color:#f92672">=</span>dist<span style="color:#f92672">.</span>get)
        distu <span style="color:#f92672">=</span> dist[u]
        <span style="color:#66d9ef">del</span> dist[u]
        <span style="color:#66d9ef">for</span> u, v <span style="color:#f92672">in</span> RG<span style="color:#f92672">.</span>edges(u):
            <span style="color:#66d9ef">if</span> v <span style="color:#f92672">in</span> dist:
                alt <span style="color:#f92672">=</span> distu <span style="color:#f92672">+</span> RG[u][v][<span style="color:#e6db74">&#39;weight&#39;</span>]
                <span style="color:#66d9ef">if</span> alt <span style="color:#f92672">&lt;</span> dist[v]:
                    dist[v] <span style="color:#f92672">=</span> alt
                    previous[v] <span style="color:#f92672">=</span> u
    path <span style="color:#f92672">=</span> (start,)
    last <span style="color:#f92672">=</span> start
    <span style="color:#66d9ef">while</span> last <span style="color:#f92672">!=</span> end:
        nxt <span style="color:#f92672">=</span> previous[last]
        path <span style="color:#f92672">+=</span> (nxt,)
        last <span style="color:#f92672">=</span> nxt
    <span style="color:#66d9ef">return</span> path

G <span style="color:#f92672">=</span> nx<span style="color:#f92672">.</span>DiGraph()
datalist <span style="color:#f92672">=</span> []
datadict <span style="color:#f92672">=</span> {}
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;data.txt&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
        line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#34;</span>)
        datalist<span style="color:#f92672">.</span>append(line)

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> datalist:
    data <span style="color:#f92672">=</span> i<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
    datadict[data[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;-&#34;</span><span style="color:#f92672">+</span>data[<span style="color:#ae81ff">1</span>]] <span style="color:#f92672">=</span> data[<span style="color:#ae81ff">3</span>]
    G<span style="color:#f92672">.</span>add_edge(int(data[<span style="color:#ae81ff">0</span>]),int(data[<span style="color:#ae81ff">1</span>]),weight<span style="color:#f92672">=</span>int(data[<span style="color:#ae81ff">2</span>]))
rs <span style="color:#f92672">=</span> Dijkstra(G, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">26</span>)
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(rs)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
    flag <span style="color:#f92672">+=</span> datadict[str(rs[i])<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;-&#34;</span><span style="color:#f92672">+</span>str(rs[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>])]

print flag
print flag<span style="color:#f92672">.</span>lower()
</code></pre></div><p>运行脚本，即可获得flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">FLAG{WEIVKASJVLSJCHFSJVHJSDEV}
flag{weivkasjvlsjchfsjvhjsdev}
</code></pre></div><h2 id="0xc-网鼎杯-2020-青龙组boom">0xC [网鼎杯 2020 青龙组]boom</h2>
<p>这道题目，boom的意思爆炸，这道题目应该会有点意思。</p>
<p>来看看题目呀：</p>
<p>看到附件内容是一个exe文件，可执行文件，有点像是逆向题目。首先执行一下exe程序，看看程序会给我们展示什么样的效果？</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B64-80%5D_writeup/image-20210630213025137.png" alt="image-20210630213025137"></p>
<p>按一下任意键：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B64-80%5D_writeup/image-20210630213049828.png" alt="image-20210630213049828"></p>
<p>应该是一个进行答题的exe程序，这里有两条路可以走，第一条路就是通过答题来拿到flag，而第二条路就是通过逆向工具进行逆向。下面绘制一个拓扑图来看看这道题目的思路：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B64-80%5D_writeup/image-20210630214244533.png" alt="image-20210630214244533"></p>
<p>无论怎么走，都需要解决题目的问题，这道题目的本意应该是考察数学技能，这道题目就使用IDA逆向工具进行分析，打开IDA看到伪代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
{
  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Str[<span style="color:#ae81ff">50</span>]; <span style="color:#75715e">// [esp+24h] [ebp-128h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v6[<span style="color:#ae81ff">50</span>]; <span style="color:#75715e">// [esp+56h] [ebp-F6h] BYREF
</span><span style="color:#75715e"></span>  _DWORD v7[<span style="color:#ae81ff">16</span>]; <span style="color:#75715e">// [esp+88h] [ebp-C4h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v8[<span style="color:#ae81ff">22</span>]; <span style="color:#75715e">// [esp+C8h] [ebp-84h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v9; <span style="color:#75715e">// [esp+120h] [ebp-2Ch] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v10; <span style="color:#75715e">// [esp+12Ch] [ebp-20h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v11; <span style="color:#75715e">// [esp+130h] [ebp-1Ch] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v12; <span style="color:#75715e">// [esp+134h] [ebp-18h] BYREF
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v13; <span style="color:#75715e">// [esp+138h] [ebp-14h]
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+13Ch] [ebp-10h]
</span><span style="color:#75715e"></span>
  __main();
  menu();
  system(<span style="color:#e6db74">&#34;pause&#34;</span>);
  system(<span style="color:#e6db74">&#34;cls&#34;</span>);
  v7[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">70</span>;
  v7[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">229</span>;
  v7[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">239</span>;
  v7[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">230</span>;
  v7[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">22</span>;
  v7[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
  v7[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
  v7[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">251</span>;
  v7[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">54</span>;
  v7[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>;
  v7[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">23</span>;
  v7[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">68</span>;
  v7[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">106</span>;
  v7[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">45</span>;
  v7[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">189</span>;
  v7[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
  puts(<span style="color:#e6db74">&#34;first:this string md5:46e5efe6165a5afb361217446a2dbd01&#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%s&#34;</span>, Str);
  MD5Init(v8);
  v3 <span style="color:#f92672">=</span> strlen(Str);
  MD5Update((<span style="color:#66d9ef">int</span>)v8, Str, v3);
  MD5Final(v8, v6);
  v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">15</span>; <span style="color:#f92672">++</span>i )
  {
    <span style="color:#66d9ef">if</span> ( v6[i] <span style="color:#f92672">!=</span> v7[i] )
    {
      v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">break</span>;
    }
  }
  <span style="color:#66d9ef">if</span> ( v13 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> )
  {
    printf(<span style="color:#e6db74">&#34;Game over&#34;</span>);
    system(<span style="color:#e6db74">&#34;pause&#34;</span>);
    exit(<span style="color:#ae81ff">0</span>);
  }
  puts(<span style="color:#e6db74">&#34;Great next level&#34;</span>);
  system(<span style="color:#e6db74">&#34;pause&#34;</span>);
  system(<span style="color:#e6db74">&#34;cls&#34;</span>);
  puts(<span style="color:#e6db74">&#34;This time:Here are have some formulas&#34;</span>);
  puts(<span style="color:#e6db74">&#34;3x-y+z=185&#34;</span>);
  puts(<span style="color:#e6db74">&#34;2x+3y-z=321&#34;</span>);
  puts(<span style="color:#e6db74">&#34;x+y+z=173&#34;</span>);
  printf(<span style="color:#e6db74">&#34;input: x = &#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v12);
  printf(<span style="color:#e6db74">&#34;input: y = &#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v11);
  printf(<span style="color:#e6db74">&#34;input : z = &#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v10);
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> v12 <span style="color:#f92672">-</span> v11 <span style="color:#f92672">+</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">185</span> <span style="color:#f92672">||</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> v12 <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> v11 <span style="color:#f92672">-</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">321</span> <span style="color:#f92672">||</span> v11 <span style="color:#f92672">+</span> v12 <span style="color:#f92672">+</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">173</span> )
  {
    printf(<span style="color:#e6db74">&#34;Game over&#34;</span>);
    exit(<span style="color:#ae81ff">0</span>);
  }
  printf(<span style="color:#e6db74">&#34;Great last level coming...&#34;</span>);
  printf(<span style="color:#e6db74">&#34;pause&#34;</span>);
  system(<span style="color:#e6db74">&#34;cls&#34;</span>);
  puts(<span style="color:#e6db74">&#34;Last time: Kill it&#34;</span>);
  puts(<span style="color:#e6db74">&#34;x*x+x-7943722218936282=0&#34;</span>);
  printf(<span style="color:#e6db74">&#34;input x: &#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%lld&#34;</span>, <span style="color:#f92672">&amp;</span>v9);
  <span style="color:#66d9ef">if</span> ( v9 <span style="color:#f92672">*</span> (v9 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x1C38C5F50DD7DALL</span> )
  {
    printf(<span style="color:#e6db74">&#34;Game over&#34;</span>);
    exit(<span style="color:#ae81ff">0</span>);
  }
  puts(<span style="color:#e6db74">&#34;Great This is your FLAG&#34;</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>可以从逆向的伪代码中找到一些比较关键的代码：</p>
<p>原始内存数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">  system(<span style="color:#e6db74">&#34;pause&#34;</span>);
  system(<span style="color:#e6db74">&#34;cls&#34;</span>);
  v7[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">70</span>;
  v7[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">229</span>;
  v7[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">239</span>;
  v7[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">230</span>;
  v7[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">22</span>;
  v7[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
  v7[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
  v7[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">251</span>;
  v7[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">54</span>;
  v7[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>;
  v7[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">23</span>;
  v7[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">68</span>;
  v7[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">106</span>;
  v7[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">45</span>;
  v7[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">189</span>;
  v7[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</code></pre></div><p>level 1关键代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">puts(<span style="color:#e6db74">&#34;first:this string md5:46e5efe6165a5afb361217446a2dbd01&#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%s&#34;</span>, Str);
  MD5Init(v8);
  v3 <span style="color:#f92672">=</span> strlen(Str);
  MD5Update((<span style="color:#66d9ef">int</span>)v8, Str, v3);
  MD5Final(v8, v6);
  v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">15</span>; <span style="color:#f92672">++</span>i )
  {
    <span style="color:#66d9ef">if</span> ( v6[i] <span style="color:#f92672">!=</span> v7[i] )
    {
      v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
      <span style="color:#66d9ef">break</span>;
    }
  }
  <span style="color:#66d9ef">if</span> ( v13 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> )
  {
    printf(<span style="color:#e6db74">&#34;Game over&#34;</span>);
    system(<span style="color:#e6db74">&#34;pause&#34;</span>);
    exit(<span style="color:#ae81ff">0</span>);
  }
  puts(<span style="color:#e6db74">&#34;Great next level&#34;</span>);
  system(<span style="color:#e6db74">&#34;pause&#34;</span>);
  system(<span style="color:#e6db74">&#34;cls&#34;</span>);
</code></pre></div><p>level 2关键代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">  puts(<span style="color:#e6db74">&#34;This time:Here are have some formulas&#34;</span>);
  puts(<span style="color:#e6db74">&#34;3x-y+z=185&#34;</span>);
  puts(<span style="color:#e6db74">&#34;2x+3y-z=321&#34;</span>);
  puts(<span style="color:#e6db74">&#34;x+y+z=173&#34;</span>);
  printf(<span style="color:#e6db74">&#34;input: x = &#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v12);
  printf(<span style="color:#e6db74">&#34;input: y = &#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v11);
  printf(<span style="color:#e6db74">&#34;input : z = &#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v10);
  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> v12 <span style="color:#f92672">-</span> v11 <span style="color:#f92672">+</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">185</span> <span style="color:#f92672">||</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> v12 <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> v11 <span style="color:#f92672">-</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">321</span> <span style="color:#f92672">||</span> v11 <span style="color:#f92672">+</span> v12 <span style="color:#f92672">+</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">173</span> )
  {
    printf(<span style="color:#e6db74">&#34;Game over&#34;</span>);
    exit(<span style="color:#ae81ff">0</span>);
  }
  printf(<span style="color:#e6db74">&#34;Great last level coming...&#34;</span>);
  printf(<span style="color:#e6db74">&#34;pause&#34;</span>);
  system(<span style="color:#e6db74">&#34;cls&#34;</span>);
</code></pre></div><p>level 3关键代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">  puts(<span style="color:#e6db74">&#34;Last time: Kill it&#34;</span>);
  puts(<span style="color:#e6db74">&#34;x*x+x-7943722218936282=0&#34;</span>);
  printf(<span style="color:#e6db74">&#34;input x: &#34;</span>);
  scanf(<span style="color:#e6db74">&#34;%lld&#34;</span>, <span style="color:#f92672">&amp;</span>v9);
  <span style="color:#66d9ef">if</span> ( v9 <span style="color:#f92672">*</span> (v9 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x1C38C5F50DD7DALL</span> )
  {
    printf(<span style="color:#e6db74">&#34;Game over&#34;</span>);
    exit(<span style="color:#ae81ff">0</span>);
  }
  puts(<span style="color:#e6db74">&#34;Great This is your FLAG&#34;</span>);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>根据三个关键代码进行代码审计，代码审计还是老基本功了</p>
<p>level 1的关键代码是判断md5值的，使用[cmd5](<a href="https://cmd5.com/">md5在线解密破解,md5解密加密 (cmd5.com)</a>)就可以解出，即：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">Str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;en5oy&#34;</span>;
</code></pre></div><p>level 2的关键代码是解方程组，使用sage求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">var(<span style="color:#e6db74">&#34;x y z&#34;</span>) 
solve([<span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>x<span style="color:#f92672">-</span>y<span style="color:#f92672">+</span>z<span style="color:#f92672">==</span><span style="color:#ae81ff">185</span>,<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>x<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>y<span style="color:#f92672">-</span>z<span style="color:#f92672">==</span><span style="color:#ae81ff">321</span>,x<span style="color:#f92672">+</span>y<span style="color:#f92672">+</span>z<span style="color:#f92672">==</span><span style="color:#ae81ff">173</span>],x,y,z)
</code></pre></div><p>运行就可以求解得出x，y和z的值：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">[[x <span style="color:#f92672">==</span> <span style="color:#ae81ff">74</span>, y <span style="color:#f92672">==</span> <span style="color:#ae81ff">68</span>, z <span style="color:#f92672">==</span> <span style="color:#ae81ff">31</span>]]
</code></pre></div><p>因此，可以得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">v12 <span style="color:#f92672">==</span> <span style="color:#ae81ff">74</span>;
v11 <span style="color:#f92672">==</span> <span style="color:#ae81ff">68</span>;
v10 <span style="color:#f92672">==</span> <span style="color:#ae81ff">31</span>;
</code></pre></div><p>leve 3的关键代码就是解一元二次方程或者可以简化，就是解<code>v9 * (v9 + 1) == 7943722218936282</code>，可以使用sage直接进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> solve(x <span style="color:#f92672">*</span> (x <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">7943722218936282</span>,x)
</code></pre></div><p>运行可得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"> [x <span style="color:#f92672">==</span> <span style="color:#ae81ff">89127561</span>, x <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">89127562</span>]
</code></pre></div><p>由此，可以得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">v9 <span style="color:#f92672">==</span> <span style="color:#ae81ff">89127561</span>;
</code></pre></div><p>然后进行组合就可以得到flag：</p>
<pre tabindex="0"><code>flag{en5oy_746831_89127561}
</code></pre><h2 id="0xd-roarctf2019rsa">0xD [RoarCTF2019]RSA</h2>
<p>又来了一道RSA题目，看看有些什么东西吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">A=(((y%x)**5)%(x%y))**2019+y**316+(y+1)/x
p=next_prime(z*x*y)
q=next_prime(z)
A =  2683349182678714524247469512793476009861014781004924905484127480308161377768192868061561886577048646432382128960881487463427414176114486885830693959404989743229103516924432512724195654425703453612710310587164417035878308390676612592848750287387318129424195208623440294647817367740878211949147526287091298307480502897462279102572556822231669438279317474828479089719046386411971105448723910594710418093977044179949800373224354729179833393219827789389078869290217569511230868967647963089430594258815146362187250855166897553056073744582946148472068334167445499314471518357535261186318756327890016183228412253724
n =  117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127
c =  41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128
</code></pre></div><p>这道题目涉及到了模线性方程，需要考虑模线性方程该如何进行求解。目前，我尚未找到除了爆破外的解法，因此，这次就用爆破来求解，但是要用爆破求解就必然需要考虑爆破时间，如何来缩短爆破时间。</p>
<p>再来看看题目：</p>
<p>题目给定了$A$ 、$n$ 、$c$ ，且满足</p>
<p>$$
A = [ (y \text{ % } x ) ^ 5 \text{ % } ( x \text{ % } y ) ] ^ {2019} + y ^ {316} + \frac{y+1}{x}
$$</p>
<p>根据方程可以得知 $x | y+1$ 因此，可以推断出来 $ y \equiv -1 \text{mod}x$ 。而且由于 $ y+1$ 比 $x$ 大，因此，应该有$x%y=x$ 。于是：</p>
<p>$$
[(y\text{ % }x)^5\text{ % }(x\text{ % }y)]^{2019} = (x-1)^{2019}
$$</p>
<p>因此，可以得到：</p>
<p>$$
A = (x-1)^{2019} + y^{316} + \frac{y+1}{x}
$$</p>
<p>通过观察发现$A$的值是一个2015个bit的数。而且：</p>
<p>$$
A \geq (x-1)^{2019}
$$</p>
<p>显然只有：</p>
<p>$$
x \leq 2
$$</p>
<p>因此进行讨论$x=1 $和$x =2$这两种情况时，发现存在有唯一解，即：</p>
<p>$$
(x,y) = (2,83)
$$</p>
<p>现在$ x $和$ y $知道了，看一下算法的其他细节吧</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">p<span style="color:#f92672">=</span>next_prime(z<span style="color:#f92672">*</span>x<span style="color:#f92672">*</span>y)
q<span style="color:#f92672">=</span>next_prime(z)
</code></pre></div><p>由于已经知道了$x$和$y$ ，因此，可以知道：
$$
n = p \cdot q
$$</p>
<p>$$
n = z\cdot x \cdot y \cdot z
$$</p>
<p>因此可以推出：
$$
q \approx \sqrt{\frac{n}{x\cdot y}}
$$</p>
<p>$$
p \approx x\cdot y \cdot q
$$</p>
<p>于是可以通过爆破求出 $p$ 和 $q$  来进行求解，但是题目没有告知 $e$ ，可以先猜测 $e = 65537$ 。根据这个思路写个完整脚本：^1^</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum<span style="color:#f92672">,</span> gmpy2<span style="color:#f92672">,</span> itertools

A <span style="color:#f92672">=</span>  <span style="color:#ae81ff">2683349182678714524247469512793476009861014781004924905484127480308161377768192868061561886577048646432382128960881487463427414176114486885830693959404989743229103516924432512724195654425703453612710310587164417035878308390676612592848750287387318129424195208623440294647817367740878211949147526287091298307480502897462279102572556822231669438279317474828479089719046386411971105448723910594710418093977044179949800373224354729179833393219827789389078869290217569511230868967647963089430594258815146362187250855166897553056073744582946148472068334167445499314471518357535261186318756327890016183228412253724</span>
n <span style="color:#f92672">=</span>  <span style="color:#ae81ff">117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127</span>
c <span style="color:#f92672">=</span>  <span style="color:#ae81ff">41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128</span>

x , y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">83</span>
A_t <span style="color:#f92672">=</span> (((y<span style="color:#f92672">%</span>x)<span style="color:#f92672">**</span><span style="color:#ae81ff">5</span>)<span style="color:#f92672">%</span>(x<span style="color:#f92672">%</span>y))<span style="color:#f92672">**</span><span style="color:#ae81ff">2019</span><span style="color:#f92672">+</span>y<span style="color:#f92672">**</span><span style="color:#ae81ff">316</span><span style="color:#f92672">+</span>(y<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">/</span>x
<span style="color:#66d9ef">assert</span> A_t <span style="color:#f92672">==</span> A

<span style="color:#66d9ef">for</span> q <span style="color:#f92672">in</span> itertools<span style="color:#f92672">.</span>count(gmpy2<span style="color:#f92672">.</span>iroot(n<span style="color:#f92672">//</span><span style="color:#ae81ff">166</span>,<span style="color:#ae81ff">2</span>)[<span style="color:#ae81ff">0</span>]):
    <span style="color:#66d9ef">if</span> n<span style="color:#f92672">%</span>q <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        <span style="color:#66d9ef">break</span>
p <span style="color:#f92672">=</span> n<span style="color:#f92672">//</span>q

<span style="color:#66d9ef">assert</span> n <span style="color:#f92672">==</span> p<span style="color:#f92672">*</span>q
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e, phi)
m <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>powmod(c,d,n)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)

print flag
</code></pre></div><p>运行脚本，即可得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">RoarCTF{wm-l1l1ll1l1l1l111ll}
</code></pre></div><p>这道题目的求解方法是优雅与暴力相结合的，能展现出一种特别的美感，数学推导的优雅和蛮力攻击的暴力。野蛮与优雅，展现出密码学独有美，题目还是挺不错的。</p>
<h2 id="0xe-afctf2018single">0xE [AFCTF2018]Single</h2>
<p>单一的，看看题目给了我们什么包裹吧！</p>
<p>一个<code>Cipher.txt</code>密文文件和一个<code>Encode.cpp</code>加密文件。</p>
<p>Encode.cpp</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
{
	freopen(<span style="color:#e6db74">&#34;Plain.txt&#34;</span>,<span style="color:#e6db74">&#34;r&#34;</span>,stdin);
	freopen(<span style="color:#e6db74">&#34;Cipher.txt&#34;</span>,<span style="color:#e6db74">&#34;w&#34;</span>,stdout);
	map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>, <span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span> f;
	<span style="color:#66d9ef">int</span> arr[<span style="color:#ae81ff">26</span>];
	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">26</span>;<span style="color:#f92672">++</span>i){
		arr[i]<span style="color:#f92672">=</span>i;
	}
	random_shuffle(arr,arr<span style="color:#f92672">+</span><span style="color:#ae81ff">26</span>);
	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">26</span>;<span style="color:#f92672">++</span>i){
		f[<span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">+</span>i]<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">+</span>arr[i];
		f[<span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">+</span>i]<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">+</span>arr[i];
	}
	<span style="color:#66d9ef">char</span> ch;
	<span style="color:#66d9ef">while</span>((ch<span style="color:#f92672">=</span>getchar())<span style="color:#f92672">!=</span>EOF){
		<span style="color:#66d9ef">if</span>(f.count(ch)){
			putchar(f[ch]);
		}<span style="color:#66d9ef">else</span>{
			putchar(ch);
		}
	}
	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>Cipher.txt</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Jmqrida rva Lfmz (JRL) eu m uqajemf seny xl enlxdomrexn uajiderc jxoqarerexnu. Rvada mda rvdaa jxooxn rcqau xl JRLu: Paxqmdyc, Mrrmjs-Yalanja mny oekay.

Paxqmdyc-urcfa JRLu vmu m jxiqfa xl giaurexnu (rmusu) en dmnza xl jmrazxdeau. Lxd akmoqfa, Wab, Lxdanuej, Jdcqrx, Benmdc xd uxoarvenz afua. Ramo jmn zmen uxoa qxenru lxd atadc uxftay rmus. Oxda qxenru lxd oxda jxoqfejmray rmusu iuimffc. Rva nakr rmus en jvmen jmn ba xqanay xnfc mlrad uxoa ramo uxfta qdatexiu rmus. Rvan rva zmoa reoa eu xtad uio xl qxenru uvxwu cxi m JRL wenad. Lmoxiu akmoqfa xl uijv JRL eu Yaljxn JRL gimfu.

Waff, mrrmjs-yalanja eu mnxrvad enradaurenz seny xl jxoqarerexnu. Vada atadc ramo vmu xwn narwxds(xd xnfc xna vxur) werv tifnmdmbfa uadtejau. Cxid ramo vmu reoa lxd qmrjvenz cxid uadtejau mny yatafxqenz akqfxeru iuimffc. Ux, rvan xdzmnehadu jxnnajru qmdrejeqmnru xl jxoqarerexn mny rva wmdzmoa urmdru! Cxi uvxify qdxrajr xwn uadtejau lxd yalanja qxenru mny vmjs xqqxnanru lxd mrrmjs qxenru. Veurxdejmffc rveu eu m ledur rcqa xl JRLu, atadcbxyc snxwu mbxir YAL JXN JRL - uxoarvenz fesa m Wxdfy Jiq xl mff xrvad jxoqarerexnu.

Oekay jxoqarerexnu omc tmdc qxuuebfa lxdomru. Er omc ba uxoarvenz fesa wmdzmoa werv uqajemf reoa lxd rmus-bmuay afaoanru (a.z. IJUB eJRL).

JRL zmoau xlran rxijv xn omnc xrvad muqajru xl enlxdomrexn uajiderc: jdcqrxzdmqvc, urazx, benmdc mnmfcueu, datadua anzanaadenz, oxbefa uajiderc mny xrvadu. Zxxy ramou zanadmffc vmta urdxnz useffu mny akqadeanja en mff rvaua euuiau.

Iuimffc, lfmz eu uxoa urdenz xl dmnyxo ymrm xd rakr en uxoa lxdomr. Akmoqfa mljrl{Xv_I_lxiny_er_neja_rDc}
</code></pre></div><p>看样子，应该是一个替换加密的题目。可以直接扔进<a href="https://quipqiup.com/">词频分析网站</a>进行词频分析来求解，得到求解结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">	Capture the Flag (CTF) is a special kind of information security competitions. There are three common types of CTFs: Jeopardy, Attack-Defence and mixed. Jeopardy-style CTFs has a couple of questions (tasks) in range of categories. For example, Web, Forensic, Crypto, Binary or something else. Team can gain some points for every solved task. More points for more complicated tasks usually. The next task in chain can be opened only after some team solve previous task. Then the game time is over sum of points shows you a CTF winer. Famous example of such CTF is Defcon CTF quals. Well, attack-defence is another interesting kind of competitions. Here every team has own network(or only one host) with vulnarable services. Your team has time for patching your services and developing exploits usually. So, then organizers connects participants of competition and the wargame starts! You should protect own services for defence points and hack opponents for attack points. Historically this is a first type of CTFs, everybody knows about DEF CON CTF - something like a World Cup of all other competitions. Mixed competitions may vary possible formats. It may be something like wargame with special time for task-based elements (e.g. UCSB iCTF). CTF games often touch on many other aspects of information security: cryptography, stego, binary analysis, reverse engeneering, mobile security and others. Good teams generally have strong skills and experience in all these issues. Usually, flag is some string of random data or text in some format. Example afctf{Oh_U_found_it_nice_tRy}
</code></pre></div><p>快瞧，flag就在最后一行！这题就这么完了，有工具真是好(*^_^*)</p>
<h2 id="0xf-wustctf2020bse">0xF [WUSTCTF2020]B@se</h2>
<p>看题目，应该是一道BASE的题目。看看附件会给些什么吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">密文：MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD==
JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/

oh holy shit, something is missing...
</code></pre></div><p>这道题目的应该是变换了编码表的base64，修改并替换一下使用base64进行解密，但是变换后的编码表中有四个字母是顺序位置，因此可能会有24种可能的情况。需要进行爆破，首先要知道是那些字符缺失了，然后对缺失字符的数组进行爆破，然后在使用base64替换来进行base64的求解。根据这个思路来写个脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64
<span style="color:#f92672">import</span> string
<span style="color:#f92672">import</span> itertools

base64_stand <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>uppercase<span style="color:#f92672">+</span>string<span style="color:#f92672">.</span>lowercase<span style="color:#f92672">+</span>string<span style="color:#f92672">.</span>digits<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;+/&#34;</span>
new_base64 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/&#34;</span>
lose_letters <span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD==&#34;</span>
flags <span style="color:#f92672">=</span> []

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">base64_change</span>(c,s,n):
    result <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c:
        <span style="color:#66d9ef">if</span> n<span style="color:#f92672">.</span>find(i) <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
            result <span style="color:#f92672">+=</span> s[n<span style="color:#f92672">.</span>find(i)]
        <span style="color:#66d9ef">else</span>:
            result <span style="color:#f92672">+=</span> i
    result <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(result)
    <span style="color:#66d9ef">if</span> len(result)<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> len(repr(result)):
        <span style="color:#66d9ef">return</span> result
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">return</span>

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> base64_stand:
    test <span style="color:#f92672">=</span> new_base64<span style="color:#f92672">.</span>find(i)
    <span style="color:#66d9ef">if</span> test <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
        lose_letters <span style="color:#f92672">+=</span> i

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> list(itertools<span style="color:#f92672">.</span>permutations(lose_letters,<span style="color:#ae81ff">4</span>)):
    m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(i)
    base64_new <span style="color:#f92672">=</span> new_base64<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;****&#34;</span>, m)
    flag <span style="color:#f92672">=</span> base64_change(c, base64_stand, base64_new)
    <span style="color:#66d9ef">if</span> flag <span style="color:#f92672">and</span> <span style="color:#e6db74">&#34;2020&#34;</span> <span style="color:#f92672">in</span> flag:
        flags<span style="color:#f92672">.</span>append(flag)

<span style="color:#66d9ef">for</span> flag <span style="color:#f92672">in</span> set(flags):
    print flag
</code></pre></div><p>运行脚本，得到可能的flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">wctf2020{base64_1s_v3ry_e@sy_and_fuN}
wctf2020{bare64_!r_v2ry_e@ry_and_fuN}
</code></pre></div><p>经过测试，flag应该是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">wctf2220{base64_1s_v3ry_e@sy_and_fuN}
</code></pre></div><p>本题到此结束！</p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://www.ruanx.net/rsa-solutions/">CTF RSA题解集 (ruanx.net)</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>BUUCTF CRYPTO [49~64]_writeup</title>
            <link>https://zcodetea.github.io/posts/buuctf-crypto-49-64_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 17:20:25 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/buuctf-crypto-49-64_writeup/</guid>
            <description>沉浸在密码学的世界里面，缓缓浸入题目的海洋，16道crypto题目！

这次的题目，难度也开始逐渐上来咯！当然不仅仅只有难度，还有脑洞！

0x0 古典密码知多少 应该是考察古典密码的题目，点开题目下载附件，瞧一瞧

打开图片就察觉到这题可能会非常草……，果然古典的恶心，应该是三种古典密码的组合，可以清晰地看出有猪圈密码和变种圣堂武士密码，至于剩下那一种密码实在是找不到……，只能无奈地去瞧一瞧大佬的wp，发现是标准银河字母。根据得到的信息进行比对，蓝色的是猪圈密码，橙色的是圣堂武士密码，黑色的是标准银河字母。根据信息，进行解密得：
FGCPFLIRTUASYON 看样子应该还有一层加密，最常见的古典加密方法就是凯撒加密和栅栏密码，经过尝试发现是栅栏密码，使用栅栏密码进行解密得到flag：
FLAGISCRYPTOFUN  猪圈密码对照表：
圣堂武士密码对照表：
标准银河字母对照表：
0x1 [HDCTF2019]bbbbbbrsa 看来又是熟悉的RSA题目，嘤嘤嘤~
下载附件，打开发现有两个文件，一个enc文件，一个encode.py文件
enc文件：
p = 177077389675257695042507998165006460849 n = 37421829509887796274897162249367329400988647145613325367337968063341372726061 c = ==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM encode.py文件：
from base64 import b64encode as b32encode from gmpy2 import invert,gcd,iroot from Crypto.Util.number import * from binascii import a2b_hex,b2a_hex import random flag = &amp;#34;******************************&amp;#34; nbit = 128 p = getPrime(nbit) q = getPrime(nbit) n = p*q print p print n phi = (p-1)*(q-1) e = random.</description>
            <content type="html"><![CDATA[<p>沉浸在密码学的世界里面，缓缓浸入题目的海洋，16道crypto题目！</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B49-64%5D_writeup/image-17.png"><img src="/images/BUUCTF-CRYPTO-%5B49-64%5D_writeup/image-17-1024x673.png" alt="img"></a></p>
<p>这次的题目，难度也开始逐渐上来咯！当然不仅仅只有难度，还有脑洞！</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B49-64%5D_writeup/image-18.png"><img src="/images/BUUCTF-CRYPTO-%5B49-64%5D_writeup/image-18.png" alt="img"></a></p>
<h2 id="0x0-古典密码知多少">0x0 古典密码知多少</h2>
<p>应该是考察古典密码的题目，点开题目下载附件，瞧一瞧</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B49-64%5D_writeup/image-19.png"><img src="/images/BUUCTF-CRYPTO-%5B49-64%5D_writeup/image-19.png" alt="img"></a></p>
<p>打开图片就察觉到这题可能会非常草……，果然古典的恶心，应该是三种古典密码的组合，可以清晰地看出有猪圈密码和变种圣堂武士密码，至于剩下那一种密码实在是找不到……，只能无奈地去瞧一瞧<a href="https://blog.ysneko.com/archives/115/">大佬的wp</a>，发现是标准银河字母。根据得到的信息进行比对，蓝色的是猪圈密码，橙色的是圣堂武士密码，黑色的是标准银河字母。根据信息，进行解密得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">FGCPFLIRTUASYON
</code></pre></div><p>看样子应该还有一层加密，最常见的古典加密方法就是凯撒加密和栅栏密码，经过尝试发现是栅栏密码，使用栅栏密码进行解密得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">FLAGISCRYPTOFUN
</code></pre></div><hr>
<p>猪圈密码对照表：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B49-64%5D_writeup/20201019010012173.png" alt="img"></p>
<p>圣堂武士密码对照表：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B49-64%5D_writeup/20200325180259577.jpg" alt="此图像的alt属性为空；文件名为20200325180259577.jpg"></p>
<p>标准银河字母对照表：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B49-64%5D_writeup/t01cf49fe8b6c515f04.png" alt="查看源图像"></p>
<h2 id="0x1-hdctf2019bbbbbbrsa">0x1 [HDCTF2019]bbbbbbrsa</h2>
<p>看来又是熟悉的RSA题目，嘤嘤嘤~</p>
<p>下载附件，打开发现有两个文件，一个enc文件，一个encode.py文件</p>
<p>enc文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">p = 177077389675257695042507998165006460849
n = 37421829509887796274897162249367329400988647145613325367337968063341372726061
c = ==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM
</code></pre></div><p>encode.py文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b64encode <span style="color:#66d9ef">as</span> b32encode
<span style="color:#f92672">from</span> gmpy2 <span style="color:#f92672">import</span> invert,gcd,iroot
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">from</span> binascii <span style="color:#f92672">import</span> a2b_hex,b2a_hex
<span style="color:#f92672">import</span> random

flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;******************************&#34;</span>

nbit <span style="color:#f92672">=</span> <span style="color:#ae81ff">128</span>

p <span style="color:#f92672">=</span> getPrime(nbit)
q <span style="color:#f92672">=</span> getPrime(nbit)
n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q

print p
print n

phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)

e <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">50000</span>,<span style="color:#ae81ff">70000</span>)

<span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
	<span style="color:#66d9ef">if</span> gcd(e,phi) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
		<span style="color:#66d9ef">break</span>;
	<span style="color:#66d9ef">else</span>:
		e <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>;

c <span style="color:#f92672">=</span> pow(int(b2a_hex(flag),<span style="color:#ae81ff">16</span>),e,n)

print b32encode(str(c))[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

<span style="color:#75715e"># 2373740699529364991763589324200093466206785561836101840381622237225512234632</span>
</code></pre></div><p>题目给了n、p、c而没有给e，根据python源码 e需要爆破一下，写个小脚本解决这道题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
<span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b64decode <span style="color:#66d9ef">as</span> b32decode


p <span style="color:#f92672">=</span> <span style="color:#ae81ff">177077389675257695042507998165006460849</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">37421829509887796274897162249367329400988647145613325367337968063341372726061</span>
c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM&#39;</span>

q <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span> p
phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
c <span style="color:#f92672">=</span> int(b32decode(str(c)[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]))
<span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">50000</span>,<span style="color:#ae81ff">70000</span>):
    <span style="color:#66d9ef">if</span> gmpy2<span style="color:#f92672">.</span>gcd(e,phi) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
        d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)
        m <span style="color:#f92672">=</span> pow(c,d,n)
        flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
        <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;flag&#39;</span> <span style="color:#f92672">in</span> str(flag):
            print <span style="color:#e6db74">&#39;e=</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">%</span>e
            print flag
            <span style="color:#66d9ef">break</span>
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{rs4_1s_s1mpl3!#}
</code></pre></div><h2 id="0x2-bjdctf2020rsa">0x2 [BJDCTF2020]RSA</h2>
<p>RSA题目，妙呀！下载附件看看：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> getPrime,bytes_to_long

flag<span style="color:#f92672">=</span>open(<span style="color:#e6db74">&#34;flag&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>)<span style="color:#f92672">.</span>read()

p<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">1024</span>)
q<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">1024</span>)
<span style="color:#66d9ef">assert</span>(e<span style="color:#f92672">&amp;</span>lt;<span style="color:#ae81ff">100000</span>)
n<span style="color:#f92672">=</span>p<span style="color:#f92672">*</span>q
m<span style="color:#f92672">=</span>bytes_to_long(flag)
c<span style="color:#f92672">=</span>pow(m,e,n)
print c,n
print pow(<span style="color:#ae81ff">294</span>,e,n)

p<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">1024</span>)
n<span style="color:#f92672">=</span>p<span style="color:#f92672">*</span>q
m<span style="color:#f92672">=</span>bytes_to_long(<span style="color:#e6db74">&#34;BJD&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">32</span>)
c<span style="color:#f92672">=</span>pow(m,e,n)
print c,n

<span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">output:
</span><span style="color:#e6db74">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120  13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037
</span><span style="color:#e6db74">381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018
</span><span style="color:#e6db74">979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721  12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047
</span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</code></pre></div><p>一个python源程序，看样子还是有点意思的，发现这里有三个密文，两个n数值，两个n的数值是共用同一个q值，可以使用欧几里得算法求出q，e给出了范围，应该是使用爆破的方法求出e的数值，这里写个小脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
<span style="color:#f92672">import</span> gmpy2

c <span style="color:#f92672">=</span> <span style="color:#ae81ff">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span>
_294_c <span style="color:#f92672">=</span><span style="color:#ae81ff">381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018</span>
BJD_c <span style="color:#f92672">=</span> <span style="color:#ae81ff">979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721</span>
BJD_n <span style="color:#f92672">=</span> <span style="color:#ae81ff">12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047</span>
q <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>gcd(n,BJD_n)
p <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span> q
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">100000</span>):
    <span style="color:#66d9ef">if</span> _294_c <span style="color:#f92672">==</span> pow(<span style="color:#ae81ff">294</span>,i,n):
        e <span style="color:#f92672">=</span> i
        <span style="color:#66d9ef">break</span>

phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">BJD{p_is_common_divisor}
</code></pre></div><h2 id="0x3-wustctf2020佛说只能四天">0x3 [WUSTCTF2020]佛说：只能四天</h2>
<p>看题目还挺有意思的，应该是一道古典密码学题目，看下题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">圣经分为《旧约全书》和《新约全书》
</code></pre></div><p>再看下题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">尊即寂修我劫修如婆愍闍嚤婆莊愍耨羅嚴是喼婆斯吶眾喼修迦慧迦嚩喼斯願嚤摩隸所迦摩吽即塞願修咒莊波斯訶喃壽祗僧若即亦嘇蜜迦須色喼羅囉咒諦若陀喃慧愍夷羅波若劫蜜斯哆咒塞隸蜜波哆咤慧聞亦吽念彌諸嘚嚴諦咒陀叻咤叻諦缽隸祗婆諦嚩阿兜宣囉吽色缽吶諸劫婆咤咤喼愍尊寂色缽嘚闍兜阿婆若叻般壽聞彌即念若降宣空陀壽愍嚤亦喼寂僧迦色莊壽吽哆尊僧喼喃壽嘚兜我空所吶般所即諸吽薩咤諸莊囉隸般咤色空咤亦喃亦色兜哆嘇亦隸空闍修眾哆咒婆菩迦壽薩塞宣嚩缽寂夷摩所修囉菩阿伏嘚宣嚩薩塞菩波吶波菩哆若慧愍蜜訶壽色咒兜摩缽摩諦劫諸陀即壽所波咤聞如訶摩壽宣咤彌即嚩蜜叻劫嘇缽所摩闍壽波壽劫修訶如嚩嘇囉薩色嚤薩壽修闍夷闍是壽僧劫祗蜜嚴嚩我若空伏諦念降若心吽咤隸嘚耨缽伏吽色寂喃喼吽壽夷若心眾祗喃慧嚴即聞空僧須夷嚴叻心願哆波隸塞吶心須嘇摩咤壽嘚吶夷亦心亦喃若咒壽亦壽囑囑
</code></pre></div><p>唔，好像还有hint，去瞧一瞧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">1. 虽然有点不环保，但hint好像是一次性的，得到后就没有利用价值了。
2. 凯撒不是最后一步，by the way，凯撒为什么叫做凯撒？
</code></pre></div><p>新约全书和旧约全书，用<a href="https://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a>解不出来，“新约全书”可能是提示吧，最后用<a href="http://hi.pcmoe.net/Buddha.html">新约佛论禅</a>解得(注意前面要加上“佛曰：”)：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">平等文明自由友善公正自由诚信富强自由自由平等民主平等自由自由友善敬业平等公正平等富强平等自由平等民主和谐公正自由诚信平等和谐公正公正自由法治平等法治法治法治和谐和谐平等自由和谐自由自由和谐公正自由敬业自由文明和谐平等自由文明和谐平等和谐文明自由和谐自由和谐和谐平等和谐法治公正诚信平等公正诚信民主自由和谐公正民主平等平等平等平等自由和谐和谐和谐平等和谐自由诚信平等和谐自由自由友善敬业平等和谐自由友善敬业平等法治自由法治和谐和谐自由友善公正法治敬业公正友善爱国公正民主法治文明自由民主平等公正自由法治平等文明平等友善自由平等和谐自由友善自由平等文明自由民主自由平等平等敬业自由平等平等诚信富强平等友善敬业公正诚信平等公正友善敬业公正平等平等诚信平等公正自由公正诚信平等法治敬业公正诚信平等法治平等公正友善平等公正诚信自由公正友善敬业法治法治公正公正公正平等公正诚信自由公正和谐公正平等
</code></pre></div><p>又是套套，应该是社会主义核心价值观密码，使用<a href="http://ctf.ssleye.com/cvencode.html">在线工具</a>解密一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">RLJDQTOVPTQ6O6duws5CD6IB5B52CC57okCaUUC3SO4OSOWG3LynarAVGRZSJRAEYEZ_ooe_doyouknowfence
</code></pre></div><p>发现后面有一个提示，好像是栅栏密码，需要进行解密，使用<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">在线工具</a>解一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">R5UALCUVJDCGD63RQISZTBOSO54JVBORP5SAT2OEQCWY6CGEO53Z67L_doyouknowCaesar
</code></pre></div><p>后面又有提示，应该是凯撒密码，由于hint说凯撒密码不是最后一步，因此看密文格式像是base32加密的格式，因此这里需要进行测试检验，经过检验发现是3位的凯撒密码可以成功使用base32。故使用3位凯撒密码解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">O5RXIZRSGAZDA63ONFPWQYLPL54GSYLOM5PXQ2LBNZTV6ZDBL53W67I
</code></pre></div><p>然后使用base32解密，即可：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">wctf2020{ni_hao_xiang_xiang_da_wo}
</code></pre></div><h2 id="0x4-mrctf2020天干地支甲子">0x4 [MRCTF2020]天干地支+甲子</h2>
<p>看样子是蛮有意思的样子~，看看题目到底是个啥：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">得到得字符串用MRCTF{}包裹
一天Eki收到了一封来自Sndav的信，但是他有点迷希望您来解决一下
甲戌
甲寅
甲寅
癸卯
己酉 
甲寅
辛丑
</code></pre></div><p>看题目应该是考察的是六十甲子纳音表：（和BUUCTF上的传统文化+古典密码那道题目非常类似，估计思路也是相似的）</p>
<p><a href="http://zkinghar.top/wp-content/uploads/2021/04/image-139.png"><img src="http://zkinghar.top/wp-content/uploads/2021/04/image-139.png" alt="img"></a></p>
<p>根据六十甲子纳音表编写脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">c_sky <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;甲乙丙丁戊己庚辛壬癸&#34;</span>
c_earth <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;子丑寅卯辰巳午未申酉戌亥&#34;</span>
c_dict <span style="color:#f92672">=</span> {}
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">60</span>):
    c_dict[c_sky[i<span style="color:#f92672">%</span>len(c_sky)]<span style="color:#f92672">+</span>c_earth[i<span style="color:#f92672">%</span>len(c_earth)]] <span style="color:#f92672">=</span> i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>

c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;甲戌 甲寅 甲寅 癸卯 己酉 甲寅 辛丑&#34;</span>
c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
m_list <span style="color:#f92672">=</span> []

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
    m_list<span style="color:#f92672">.</span>append(chr(c_dict[i]<span style="color:#f92672">+</span><span style="color:#ae81ff">60</span>))

m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(m_list)
print(m)
</code></pre></div><p>运行脚本，得到flag：（注意要python3环境下运行哟！）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Goodjob
</code></pre></div><h2 id="0x5-mrctf2020vigenere">0x5 [MRCTF2020]vigenere</h2>
<p>看样子应该是维吉尼亚密码，也就是考察多表替换密码的题目，看看题目有些什么东西吧！</p>
<p>两个文件，一个cipher.txt密文文件，一个vigenere.py加密源码文件</p>
<p>vigenere.py文件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/bin/python3</span>
<span style="color:#f92672">from</span> ctf <span style="color:#f92672">import</span> source_text, key_string

getdiff <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> char: ord(char)<span style="color:#f92672">-</span>ord(<span style="color:#e6db74">&#39;a&#39;</span>)
getchar <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> num: chr(ord(<span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">+</span>num)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">vigenere</span>(src: chr, key: chr) <span style="color:#f92672">-&amp;</span>gt; chr:
    <span style="color:#66d9ef">assert</span>(src<span style="color:#f92672">.</span>isalpha() <span style="color:#f92672">and</span> key<span style="color:#f92672">.</span>isalpha())
    <span style="color:#66d9ef">return</span>(getchar((getdiff(src) <span style="color:#f92672">+</span> getdiff(key) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span>))

src <span style="color:#f92672">=</span> source_text<span style="color:#f92672">.</span>lower()
count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">assert</span>(len(key_string) <span style="color:#f92672">&amp;</span>gt; <span style="color:#ae81ff">5</span> <span style="color:#f92672">and</span> len(key_string) <span style="color:#f92672">&amp;</span>lt; <span style="color:#ae81ff">10</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> src:
    <span style="color:#66d9ef">if</span>(i<span style="color:#f92672">.</span>isalpha()):
        print(vigenere(i, key_string[count <span style="color:#f92672">%</span> len(key_string)]), end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
        count<span style="color:#f92672">+=</span><span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">else</span>:
        print(i, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</code></pre></div><p>cipher.txt</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">g vjganxsymda ux ylt vtvjttajwsgt bl udfteyhfgt
oe btlc ckjwc qnxdta 
vbbwwrbrtlx su gnw nrshylwmpy cgwps, lum bipee ynecgy gk jaryz frs fzwjp, x puej jgbs udfteyhfgt, gnw sil uuej su zofi. sc okzfpu bl lmi uhzmwi, x nyc dsj bl lmi enyl ys argnj yh nrgsi. nba swi cbz ojprbsw fqdam mx. cdh nsai cb ygaigroysxn jnwwi lr msylte.
cw mekr tg jptpzwi kdikjsqtaz, ftv pek oj pxxkdd xd ugnj scr, yg n esqxwxw nba onxw au ywipgkj fyiuujnxn gnss xwnz onxw jnahl avhwwxn vzkjpu nrofch fvwfoh. v jwhppek lmi vyutfp hbiafp hcguj at nxw gyxyjask ib hw seihxsqpn vtvjttajwsx ds zzj xnegfsmtf egz wtrq lt mbcukj sc hy. qty wnbw ss bbxsq vxtnl ys ghrw zw cbx vt cdh vgxwtfy ssc brzzthh bl wsjdeiwricg cw mekr zjzi grgktr ib lwfv.
vbbwwrbrtlx hteonj xwroj oyhg vgbigf ljtq iuk utrhrtl tj iuk ytztetwi. cdh nsai crolmig fudngxgkv ssg ekujmkrj gzvh. jk vnh cbz aszxgk qty. nba vt rdg qfta jf, tgw hd lum prdj umw aderv. hcqrxkuerr jgjw cbz dni lvzznr nbaj gsgqkjx. hd aul ylxaq lmei lum hec oaaqh xg, gk yldhmz nx lrxw f tjorah gdaylwyrgogs tgbpwhx. nba ufrcbz. ay mh nt shx ds tsyygr gfi mi txgbw xgywqj iuxgzkw baj hsaykuymkr guymday.
qty wnbw ssi rtyfktq of tyg txwfx paj yfxwrxask rbtnjvhnzatr, cbx vnh nba uwipgk lmi lrgdyl ds umw qpeqwytaniwx. cdh jg ssi xtgb sje imqxjek, gzv tgnahw, de zzj ycjxayxta igiih gnsy eaeksic eeunnht baj xsrvkld qdek gwhte zzfr rbadi ft bhlfmcrj td ecl ux dsje oeushvzatrh.
lum hppvs lmigr gjj tgbhdjqh nsgsk jf zzfx nba fjis gu ktpkr. egz yhr zznw rygar eh nt wcgjfk lt mcigvj sje vjjgxailx. qpae gk xwryw uvdorwrw sbt&#39;l jbxfz. omigr zzjvt nxw wipy igsjavilx, awrxw yltek swi leuflw, lr caqp xqkfymul zzjq paj sihgryk yltz hq tyg zkssw. lr gjj jdesask dhx gbr hbiafp rbtlwerg. zznw vbbwwrpaiw bmay gjnwt niutvsvty ys iuk utrsvzatrh bl gzv lbxdi, rdg egzvh. baj bsgyj ax hxslwwicg.
iqgigfvshi rbtknwif ux yvpayshxxbtk, wianzatrhuohx, ecq zztyvuz aywtyl, swvplkv qmzr g kyecqofl apik as xwr cwg su baj hsbzafngpgogsw. dhxk nw p jujqh iugl nw qbzz jzteeomigr gfi rdjnwwi, qhz ay mh aul bltek tthxry dnzt.
jk swi reksymct g otvaq zzfx pyr efc tazww axgngzx eeonnpttk gw tgrpmimrr guhsgqkv gc gniw, jgdaueng ebcww, qxyolfvn sujhi, de ylfxxbt gk fxezz.
bi pek uwipgofl e lbxdi awrxw frnbtw, frnjnwwi bne wctgryk mmh bx zjv qrrajjh, au efxirx zta hvtyzppe, cayldhz xjeg bl tjmct igjvrrj asxd fodjrrr uj hscsujrmil.
egzv armsq gdaiwuxh bl hwserxld, imcxwxwxbt, aiicgold, qdikejri, ntv hscgkpy hd aul fteye lt yh. gnwd egr gdq fpfkv tr bnzljv, paj lmigr ok ss bnzljv wrxw.
tyg vjwsxxgowx lpik ft fdqowx, wd, htdnot lum, bi rntftx dozsnr dejww fn cnqxmrnr utigpogs. at okdnikr zzfx ueue jxwvik, jravmzyicrj kjpu-vtljvtfz, ssh iuk utqbbtojea, baj lskrxffrrr caqp tzkjli. dhx aiicgolnih zgq gi svylwmqhzwi ereukx qpae gk cdhx bzvxfjahxxbtk. ylt btdd ppj zzfx pyr gzv rbtkymihkfy gjyzmwih jumqh vrtwweaye jjgdttaei xf zzj kdyjws vjyk. oj ldck oj axyr tj eqyk lt fjvrv tyg cgjymrhrsw wdyalnscf uf ylpg hsxmh. oal bi rntftx ppiwux iuk ktpjgogsw nba swi pgzwrtivty ys xzvgxi.
xa zzj ycvzwi winzwx, cdh nsai ibjsd ggrgljh p ygo, ylt gkdjgdzsmsmrnzatrh ekxtvb nil, blxpn jjtjqosyih lumw sla igswivzmymda gfi mcfadyw iuk vwipzy gk ntslwwwda, csxlxamltr, bvrd, resvygs, htguizikvrdj, ecq hjfrsrok. yltfk vwipzy ezwi auo gi qbxf frtj of zw.
nba swi irxjnjxrj gk cdhx gbr ruodivta, yasgt gnwd egr tsymkry as e lbxdi awrxw dsj jodq eajgqx ft vsenkgntlx. ftpgmxi nba xjeg gnwr, cdh kfyvjfz qtyg oajjejpxshmtf cayl iuk hfvtazsq vtfvgswxoodnxxry qty pek lts rbcswhal zg hscsxgsx nbajxiaikk. nr dhx otvaq, gdq xwr ywsxxzkfyw paj wctgryknscf ux mybntayc, ueue ylt qktfwxam lt xwr gfliavi, swi enxlx su n ywfqaryk bldyk, lmi vyutfp rbtnjvhnzatr ds hayw. lr issrdg ywuegnzw ylt noj ylpg iztotf ljtq iuk snv jcuf blxpn onrvf hwfx.
xa iznrp, tkjrecl, ljfrrr, xmxwxn, yaskpcujj, minrq frs gnw zrxgkv xxpgkk, dsj nxw yvnvty ys lnxv tju gnw amghy gk pxokjyc ql kjjgivty lypej htwif gl ylt sxgsxxrxk tj rlhwwweniw. yltfk efc zrkh tyi gnw hscggynsc suj f wbnrd ymbr, hmy xwre onpa aul bsgx of f aderv ylpg caqp hbuf gi qygfpiirj as fxg-hwfvxam ejhxn.
egzv xaijjehvtyqc doygqiir ofksgzglnsc vtvzwieowx adhrv uigcklzeir zzjqhrrnjw ql vjttdfofl ppjy, as ebrxahe paj wqwtjnwwi, iugl hppvs lt sla yhjiru olxias zzwsjtngzx iuk otvaq. zzjwt ygox adhrv iirygjj msrgk ys qr gftxwrx ashjfzjnea cxgiyrg, tg rsgr tggpt gnss txt ojtr. xa umw aderv, blpgknjv iuk zzqpa sash bne uwipgk ufr qr xwuvdqaujh paj vnwieotzxtq ofkmcvzwqc pg tg hshg. zzj kabhsq gdabwdecpk gk xwbaymx cb rgskte xwvyxekk dsje lshxdeowx xd niutqeyokm.
xwryw nrreksxmctrq mshgodj ecq igqscvgd ripfajjw eyguj yh vt lmi hnsw ushvzatr pf zztwt cxwamdhy dtztey gk jgrkvtq paj kjpu-qkljvbvtsymda czt lpq zg wiyril ylt nalmsgvzajw ds jaxxpaz, msmcsujris cuojvh. jk ezwi qkuqegr umw zxezmfp hrrnjw xzsmsi ib egzv hbbwwixttld, ikrt sx at pufymchk lt gdaywsx ib egzv ghrw tzte umw fdqowx. at jodq weeksi sjeywqztf guwshf zzj tantwy wd gnsy rd btw hec nxjjwi baj yldhmzyw.
lr caqp reksyi p ponnpxmglnsc bl lmi bvtv nr rlhwwweniw. ren vz tj qdek zzqpak ssh unoj ylpa zzj aderv dsje mgaigaswsxh ugnj qpqk tjjdek.
xqev vy ewgis balicrxw hvnczg hvppq efr, eyksxi pqj mshteyutvt ntv hygye twerry.
</code></pre></div><p>尝试使用<a href="https://www.guballa.de/vigenere-solver">在线工具</a>进行维吉尼亚密码的解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">a declaration of the independence of cyberspace
by john perry barlow 
governments of the industrial world, you weary giants of flesh and steel, i come from cyberspace, the new home of mind. on behalf of the future, i ask you of the past to leave us alone. you are not welcome among us. you have no sovereignty where we gather.
we have no elected government, nor are we likely to have one, so i address you with no greater authority than that with which liberty itself always speaks. i declare the global social space we are building to be naturally independent of the tyrannies you seek to impose on us. you have no moral right to rule us nor do you possess any methods of enforcement we have true reason to fear.
governments derive their just powers from the consent of the governed. you have neither solicited nor received ours. we did not invite you. you do not know us, nor do you know our world. cyberspace does not lie within your borders. do not think that you can build it, as though it were a public construction project. you cannot. it is an act of nature and it grows itself through our collective actions.
you have not engaged in our great and gathering conversation, nor did you create the wealth of our marketplaces. you do not know our culture, our ethics, or the unwritten codes that already provide our society more order than could be obtained by any of your impositions.
you claim there are problems among us that you need to solve. you use this claim as an excuse to invade our precincts. many of these problems don&#39;t exist. where there are real conflicts, where there are wrongs, we will identify them and address them by our means. we are forming our own social contract. this governance will arise according to the conditions of our world, not yours. our world is different.
cyberspace consists of transactions, relationships, and thought itself, arrayed like a standing wave in the web of our communications. ours is a world that is both everywhere and nowhere, but it is not where bodies live.
we are creating a world that all may enter without privilege or prejudice accorded by race, economic power, military force, or station of birth.
we are creating a world where anyone, anywhere may express his or her beliefs, no matter how singular, without fear of being coerced into silence or conformity.
your legal concepts of property, expression, identity, movement, and context do not apply to us. they are all based on matter, and there is no matter here.
our identities have no bodies, so, unlike you, we cannot obtain order by physical coercion. we believe that from ethics, enlightened self-interest, and the commonweal, our governance will emerge. our identities may be distributed across many of your jurisdictions. the only law that all our constituent cultures would generally recognize is the golden rule. we hope we will be able to build our particular solutions on that basis. but we cannot accept the solutions you are attempting to impose.
in the united states, you have today created a law, the telecommunications reform act, which repudiates your own constitution and insults the dreams of jefferson, washington, mill, madison, detoqueville, and brandeis. these dreams must now be born anew in us.
you are terrified of your own children, since they are natives in a world where you will always be immigrants. because you fear them, you entrust your bureaucracies with the parental responsibilities you are too cowardly to confront yourselves. in our world, all the sentiments and expressions of humanity, from the debasing to the angelic, are parts of a seamless whole, the global conversation of bits. we cannot separate the air that chokes from the air upon which wings beat.
in china, germany, france, russia, singapore, italy and the united states, you are trying to ward off the virus of liberty by erecting guard posts at the frontiers of cyberspace. these may keep out the contagion for a small time, but they will not work in a world that will soon be blanketed in bit-bearing media.
your increasingly obsolete information industries would perpetuate themselves by proposing laws, in america and elsewhere, that claim to own speech itself throughout the world. these laws would declare ideas to be another industrial product, no more noble than pig iron. in our world, whatever the human mind may create can be reproduced and distributed infinitely at no cost. the global conveyance of thought no longer requires your factories to accomplish.
these increasingly hostile and colonial measures place us in the same position as those previous lovers of freedom and self-determination who had to reject the authorities of distant, uninformed powers. we must declare our virtual selves immune to your sovereignty, even as we continue to consent to your rule over our bodies. we will spread ourselves across the planet so that no one can arrest our thoughts.
we will create a civilization of the mind in cyberspace. may it be more humane and fair than the world your governments have made before.
flag is mrctf vigenere crypto crack man, please add underscore and curly braces.
</code></pre></div><p>vigenere解密后，flag已经出现了！</p>
<h2 id="0x6-bjdctf2020rsa_output">0x6 [BJDCTF2020]rsa_output</h2>
<p>看题目应该是RSA题目，看看这次又是什么花样？</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">{<span style="color:#ae81ff">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span>,<span style="color:#ae81ff">2767</span>}

{<span style="color:#ae81ff">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span>,<span style="color:#ae81ff">3659</span>}

message1<span style="color:#f92672">=</span><span style="color:#ae81ff">20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span>

message2<span style="color:#f92672">=</span><span style="color:#ae81ff">11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span>
</code></pre></div><p>看题目的样子，应该是考察共模攻击的题目，直接丢个共模攻击的脚本吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
<span style="color:#f92672">import</span> gmpy2

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">common_modulus</span>(n,c1,c2,e1,e2):
    <span style="color:#66d9ef">assert</span>(libnum<span style="color:#f92672">.</span>gcd(e1,e2))
    _, s1 ,s2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>gcdext(e1,e2)
    <span style="color:#66d9ef">if</span> s1 <span style="color:#f92672">&amp;</span>lt; <span style="color:#ae81ff">0</span>:
        s1 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s1
        c1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c1,n)
    <span style="color:#66d9ef">elif</span> s2 <span style="color:#f92672">&amp;</span>lt; <span style="color:#ae81ff">0</span>:
        s2 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s2
        c2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c2,n)
    <span style="color:#66d9ef">return</span> pow(c1,s1,n) <span style="color:#f92672">*</span> pow(c2,s2,n) <span style="color:#f92672">%</span> n

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span>

e1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">2767</span>

e2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">3659</span>

c1<span style="color:#f92672">=</span><span style="color:#ae81ff">20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span>

c2<span style="color:#f92672">=</span><span style="color:#ae81ff">11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span>

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    m <span style="color:#f92672">=</span> common_modulus(n,c1,c2,e1,e2)
    flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
    print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">BJD{r3a_C0mmoN_moD@_4ttack}
</code></pre></div><h2 id="0x7-mrctf2020keyboard">0x7 [MRCTF2020]keyboard</h2>
<p>键盘密码吗？瞧瞧看吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">得到的flag用
MRCTF{xxxxxx}形式上叫
都为小写字母

6
666
22
444
555
33
7
44
666
66
3
</code></pre></div><p>似曾相识的熟悉内容，用丢个脚本解决吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">keyborad <span style="color:#f92672">=</span> [<span style="color:#66d9ef">None</span>,<span style="color:#66d9ef">None</span>,<span style="color:#e6db74">&#34;ABC&#34;</span>,<span style="color:#e6db74">&#34;DEF&#34;</span>,<span style="color:#e6db74">&#34;GHI&#34;</span>,<span style="color:#e6db74">&#34;JKL&#34;</span>,<span style="color:#e6db74">&#34;MNO&#34;</span>,<span style="color:#e6db74">&#34;PQRS&#34;</span>,<span style="color:#e6db74">&#34;TUV&#34;</span>,<span style="color:#e6db74">&#34;WXYZ&#34;</span>]
c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;6 666 22 444 555 33 7 44 666 66 3&#34;</span>
c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
    m <span style="color:#f92672">+=</span> keyborad[int(i[<span style="color:#ae81ff">0</span>])][len(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

print m
</code></pre></div><p>运行脚本，得到一个错误的flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">MOBILEPHOND
</code></pre></div><p>需要进行简单拼写检查进行修改，便得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">MOBILEPHONE
</code></pre></div><h2 id="0x8-bjdctf2020signin">0x8 [BJDCTF2020]signin</h2>
<p>签到题？萌新狂喜！看看是什么样的签到吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">welcome to crypto world！！
密文：424a447b57653163306d655f74345f424a444354467d
</code></pre></div><p>看样子应该是一个HEX编码的密文，解一下就得到flag了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">BJD{We1c0me_t4_BJDCTF}
</code></pre></div><h2 id="0x9-actf新生赛2020crypto-rsa0">0x9 [ACTF新生赛2020]crypto-rsa0</h2>
<p>RSA题目，题目内容应该是比较有意思的：</p>
<p>附件文件有两个文件，一个hint.txt应该是一个提示文件，还有一个压缩包，但是压缩包打不开，嘤嘤嘤~</p>
<p>看看hint.txt里面有什么：</p>
<pre tabindex="0"><code>怎么办呢，出题人也太坏了，竟然把压缩包给伪加密了！
</code></pre><p>感觉有点像是杂项题目……伪加密，那是什么东西？</p>
<p>菜狗查一查……</p>
<p>经过查询发现，好像是zip文件结构中的09标志着是伪加密文件结构，只需要将09修改为00就可以破解伪加密，可以使用一个010edit工具进行修改：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B49-64%5D_writeup/image-20.png"><img src="/images/BUUCTF-CRYPTO-%5B49-64%5D_writeup/image-20.png" alt="img"></a></p>
<p>然后将09修改成00并将文件进行保持即可进行解压操作</p>
<p>解压得到一个rsa0.py的python源码文件和一个output的文本文件</p>
<p>rsa0.py</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Cryptodome.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">import</span> random

FLAG<span style="color:#f92672">=</span><span style="color:#75715e">#hidden, please solve it</span>
flag<span style="color:#f92672">=</span>int<span style="color:#f92672">.</span>from_bytes(FLAG,byteorder <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;big&#39;</span>)


p<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">512</span>)
q<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">512</span>)

print(p)
print(q)
N<span style="color:#f92672">=</span>p<span style="color:#f92672">*</span>q
e<span style="color:#f92672">=</span><span style="color:#ae81ff">65537</span>
enc <span style="color:#f92672">=</span> pow(flag,e,N)
print (enc)
</code></pre></div><p>output</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">9018588066434206377240277162476739271386240173088676526295315163990968347022922841299128274551482926490908399237153883494964743436193853978459947060210411

7547005673877738257835729760037765213340036696350766324229143613179932145122130685778504062410137043635958208805698698169847293520149572605026492751740223

50996206925961019415256003394743594106061473865032792073035954925875056079762626648452348856255575840166640519334862690063949316515750256545937498213476286637455803452890781264446030732369871044870359838568618176586206041055000297981733272816089806014400846392307742065559331874972274844992047849472203390350
</code></pre></div><p>根据源代码，可以看出源码已经将p，q，c的数据输出，而且根据源码中的e的数值，写个简单脚本就可以解决了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum

p <span style="color:#f92672">=</span> <span style="color:#ae81ff">9018588066434206377240277162476739271386240173088676526295315163990968347022922841299128274551482926490908399237153883494964743436193853978459947060210411</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">7547005673877738257835729760037765213340036696350766324229143613179932145122130685778504062410137043635958208805698698169847293520149572605026492751740223</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">50996206925961019415256003394743594106061473865032792073035954925875056079762626648452348856255575840166640519334862690063949316515750256545937498213476286637455803452890781264446030732369871044870359838568618176586206041055000297981733272816089806014400846392307742065559331874972274844992047849472203390350</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">actf{n0w_y0u_see_RSA}
</code></pre></div><h2 id="0xa-一张谍报">0xA 一张谍报</h2>
<p>看样子，应该是一个古典密码学题目，或者脑洞题？</p>
<p>看一下题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">国家能源总部经过派出卧底长期刺探，终于找到一个潜伏已久的国外内鬼：三楼能源楼管老王。由于抓捕仓促，老王服毒自尽了。侦查部门搜出老王每日看的报纸原来是特制的情报。聪明的你能从附件的报纸中找出情报么？flag是老王说的暗号。（由于老王的线人曾今做的土匪，所以用的行话） 注意：得到的 flag 请包上 flag{} 提交
</code></pre></div><p>附件文件是一个docx文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">国家能源时报2015年3月5日
平时要针对性的吃些防辐射菜
对于和电脑“朝夕相处”的人们来说,辐射的确是个让人忧心的“副产物”。因此,平时针对性的吃些可以防辐射的菜是很有好处的。特别是现在接近年底，加班加点是家常便饭，对着电脑更是辐射吸收得满满的，唯有趁一日三餐进食的时候吃点防辐射的食物了。

朝歌区梆子公司三更放炮
老小区居民大爷联合抵制

今天上午，朝歌区梆子公司决定，在每天三更天不亮免费在各大小区门口设卡为全城提供二次震耳欲聋的敲更提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的符号是前进。为此，全区老人都蹲在该公司东边树丛合力抵制，不给公司人员放行，场面混乱。李罗鹰住进朝歌区五十年了，人称老鹰头，几年孙子李虎南刚从东北当猎户回来，每月还寄回来几块鼹鼠干。李罗鹰当年遇到的老婆是朝歌一枝花，所以李南虎是长得非常秀气的一个汉子。李罗鹰表示：无论梆子公司做的对错，反正不能打扰他孙子睡觉，子曰：‘睡觉乃人之常情’。梆子公司这是连菩萨睡觉都不放过啊。李南虎表示：梆子公司智商捉急，小心居民猴急跳墙！这三伏天都不给睡觉，这不扯淡么！
到了中午人群仍未离散，更有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李南虎仍旧表示爷爷年纪大了，睡不好对身体不好。
朝歌区梆子公司三更放炮
老小区居民大爷联合抵制
喵天上午，汪歌区哞叽公司决定，在每天八哇天不全免费在各大小区门脑设卡为全城提供双次震耳欲聋的敲哇提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的编号是前进。为此，全区眠人都足在该公司流边草丛合力抵制，不给公司人员放行，场面混乱。李罗鸟住进汪歌区五十年了，人称眠鸟顶，几年孙叽李熬值刚从流北当屁户回来，每月还寄回来几块报信干。李罗鸟当年遇到的眠婆是汪歌一枝花，所以李值熬是长得非常秀气的一个汉叽。李罗鸟表示：无论哞叽公司做的对错，反正不能打扰他孙叽睡觉，叽叶：‘睡觉乃人之常情’。哞叽公司这是连衣服睡觉都不放过啊。李值熬表示：哞叽公司智商捉急，小心居民猴急跳墙！这八伏天都不给睡觉，这不扯淡么！
到了中午人群仍未离散，哇有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李值熬仍旧表示爷爷年纪大了，睡不好对身体不好。

听书做作业

喵汪哞叽双哇顶，眠鸟足屁流脑，八哇报信断流脑全叽，眠鸟进北脑上草，八枝遇孙叽，孙叽对熬编叶：值天衣服放鸟捉猴顶。鸟对：北汪罗汉伏熬乱天门。合编放行，卡编扯呼。人离烧草，报信归洞，孙叽找爷爷。
</code></pre></div><p>这道题目其实更像是一道MISC题目，这道题目的总体思路是和达芬奇密码那道题目有着异曲同工之妙的，</p>
<p>写个处理脚本即可：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
flag_list <span style="color:#f92672">=</span> []
str1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;今天上午，朝歌区梆子公司决定，在每天三更天不亮免费在各大小区门口设卡为全城提供二次震耳欲聋的敲更提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的符号是前进。为此，全区老人都蹲在该公司东边树丛合力抵制，不给公司人员放行，场面混乱。李罗鹰住进朝歌区五十年了，人称老鹰头，几年孙子李虎南刚从东北当猎户回来，每月还寄回来几块鼹鼠干。李罗鹰当年遇到的老婆是朝歌一枝花，所以李南虎是长得非常秀气的一个汉子。李罗鹰表示：无论梆子公司做的对错，反正不能打扰他孙子睡觉，子曰：‘睡觉 乃人之常情’。梆子公司这是连菩萨睡觉都不放过啊。李南虎表示：梆子公司智商捉急，小心居民猴急跳墙！这三伏天都不给睡觉，这不 扯淡么！到了中午人群仍未离散，更有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李南虎仍旧表示爷爷年纪大了，睡不好对身体不好。&#34;</span>
str2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;喵天上午，汪歌区哞叽公司决定，在每天八哇天不全免费在各大小区门脑设卡为全城提供双次震耳欲聋的敲哇提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的编号是前进。为此，全区眠人都足在该公司流边草丛合力抵制，不给公司人员放行，场面混乱。李罗鸟住进汪歌区五十年了，人称眠鸟顶，几年孙叽李熬值刚从流北当屁户回来，每月还寄回来几块报信干。李罗鸟当年遇到的眠婆是汪歌一枝花，所以李值熬是长得非常秀气的一个汉叽。李罗鸟表示：无论哞叽公司做的对错，反正不能打扰他孙叽睡觉，叽叶：‘睡觉 乃人之常情’。哞叽公司这是连衣服睡觉都不放过啊。李值熬表示：哞叽公司智商捉急，小心居民猴急跳墙！这八伏天都不给睡觉，这不 扯淡么！到了中午人群仍未离散，哇有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李值熬仍旧表示爷爷年纪大了，睡不好对身体不好。&#34;</span>
str3 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;喵汪哞叽双哇顶，眠鸟足屁流脑，八哇报信断流脑全叽，眠鸟进北脑上草，八枝遇孙叽，孙叽对熬编叶：值天衣服放鸟捉猴顶。鸟对：北汪罗汉伏熬乱天门。合编放行，卡编扯呼。人离烧草，报信归洞，孙叽找爷爷。&#34;</span>

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(str3)):
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(str2)):
        <span style="color:#66d9ef">if</span> str3[i] <span style="color:#f92672">==</span> str2[j]:
            flag <span style="color:#f92672">+=</span> str1[j]
            <span style="color:#66d9ef">break</span>
print(flag)
</code></pre></div><p>运行脚本得到一段文字：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">今朝梆子二更头，老鹰蹲猎东口，三更鼹鼠断东口亮子，老鹰进北口上树，三枝遇孙子，孙子对虎符曰：南天菩萨放鹰捉猴头。鹰对：北朝罗汉伏虎乱天门。合符放行，卡符扯呼。人离烧树，鼹鼠归洞，孙子找爷爷。
</code></pre></div><p>而本题的flag就在这段文字中，即flag{南天菩萨放鹰捉猴头}</p>
<h2 id="0xb-samemod">0xB SameMod</h2>
<p>看到题目，不由就联想到了共模攻击，应该是一道RSA题目，瞧瞧看吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">{<span style="color:#ae81ff">6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249</span>,<span style="color:#ae81ff">773</span>}
{<span style="color:#ae81ff">6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249</span>,<span style="color:#ae81ff">839</span>}

message1<span style="color:#f92672">=</span><span style="color:#ae81ff">3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349</span>
message2<span style="color:#f92672">=</span><span style="color:#ae81ff">5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535</span>
</code></pre></div><p>这熟悉的感觉，共模攻击没错了！</p>
<p>直接丢个共模攻击的脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249</span>
e1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">773</span>
e2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">839</span>

c1<span style="color:#f92672">=</span><span style="color:#ae81ff">3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349</span>
c2<span style="color:#f92672">=</span><span style="color:#ae81ff">5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">Samemod</span>(n,c1,c2,e1,e2):
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">egcd</span>(a,b):
        <span style="color:#66d9ef">if</span> b <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            <span style="color:#66d9ef">return</span> a,<span style="color:#ae81ff">0</span>
        <span style="color:#66d9ef">else</span>:
            x,y <span style="color:#f92672">=</span> egcd(b, a <span style="color:#f92672">%</span> b)
            <span style="color:#66d9ef">return</span> y,x <span style="color:#f92672">-</span> ( a<span style="color:#f92672">//</span>b )<span style="color:#f92672">*</span>y
    s <span style="color:#f92672">=</span> egcd(e1,e2)
    s1 <span style="color:#f92672">=</span> s[<span style="color:#ae81ff">0</span>]
    s2 <span style="color:#f92672">=</span> s[<span style="color:#ae81ff">1</span>]
    <span style="color:#66d9ef">if</span> s1<span style="color:#f92672">&amp;</span>lt;<span style="color:#ae81ff">0</span>:
        s1 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s1
        c1 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(c1,n)
    <span style="color:#66d9ef">elif</span> s2<span style="color:#f92672">&amp;</span>lt;<span style="color:#ae81ff">0</span>:
        s2 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s2
        c2 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(c2,n)
    m <span style="color:#f92672">=</span> pow(c1,s1,n)<span style="color:#f92672">*</span>pow(c2,s2,n) <span style="color:#f92672">%</span>n
    <span style="color:#66d9ef">return</span> m

m <span style="color:#f92672">=</span> Samemod(n, c1, c2, e1, e2)
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
m <span style="color:#f92672">=</span> str(m)
i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">while</span> i<span style="color:#f92672">&amp;</span>lt;len(m):
    <span style="color:#66d9ef">if</span> m[i] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span>:
        c <span style="color:#f92672">=</span> chr(int(m[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>]))
        i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">3</span>
    <span style="color:#66d9ef">else</span>:
        c<span style="color:#f92672">=</span>chr(int(m[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>]))
        i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span>
    flag <span style="color:#f92672">+=</span>c
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{whenwethinkitispossible}
</code></pre></div><h2 id="0xc-gwctf-2019babyrsa">0xC [GWCTF 2019]BabyRSA</h2>
<p>开始了，开始了！RSA的盛宴！</p>
<p>两个文件，一个secret文件，一个encrypt.py文件</p>
<p>secret</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">N<span style="color:#f92672">=</span><span style="color:#ae81ff">636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163</span>
m1<span style="color:#f92672">=</span><span style="color:#ae81ff">90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239</span>
m2<span style="color:#f92672">=</span><span style="color:#ae81ff">487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546</span>
</code></pre></div><p>encrypt.py</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> hashlib
<span style="color:#f92672">import</span> sympy
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;GWHT{******}&#39;</span>
secret <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;******&#39;</span>

<span style="color:#66d9ef">assert</span>(len(flag) <span style="color:#f92672">==</span> <span style="color:#ae81ff">38</span>)

half <span style="color:#f92672">=</span> len(flag) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>

flag1 <span style="color:#f92672">=</span> flag[:half]
flag2 <span style="color:#f92672">=</span> flag[half:]

secret_num <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>) <span style="color:#f92672">*</span> bytes_to_long(secret)

p <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(secret_num)
q <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(p)

N <span style="color:#f92672">=</span> p <span style="color:#f92672">*</span> q

e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>

F1 <span style="color:#f92672">=</span> bytes_to_long(flag1)
F2 <span style="color:#f92672">=</span> bytes_to_long(flag2)

c1 <span style="color:#f92672">=</span> F1 <span style="color:#f92672">+</span> F2
c2 <span style="color:#f92672">=</span> pow(F1, <span style="color:#ae81ff">3</span>) <span style="color:#f92672">+</span> pow(F2, <span style="color:#ae81ff">3</span>)
<span style="color:#66d9ef">assert</span>(c2 <span style="color:#f92672">&amp;</span>lt; N)

m1 <span style="color:#f92672">=</span> pow(c1, e, N)
m2 <span style="color:#f92672">=</span> pow(c2, e, N)

output <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#39;secret&#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>)
output<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;N=&#39;</span> <span style="color:#f92672">+</span> str(N) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;n&#39;</span>)
output<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;m1=&#39;</span> <span style="color:#f92672">+</span> str(m1) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;n&#39;</span>)
output<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;m2=&#39;</span> <span style="color:#f92672">+</span> str(m2) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;n&#39;</span>)
output<span style="color:#f92672">.</span>close()
</code></pre></div><p>根据源码文件，可以对源码文件进行简单分析，发现p和q的数值是非常接近的，可以直接对n开平方然后求得下一个素数来得到p，然后再用n除以p来得到q。这道rsa题目使用了套娃，对密文加了一层方程组的套套：</p>
<p>[   c_1 = F_1+F_2  ]</p>
<p>[ c_2 = F_1^3 + F_2^3  ]</p>
<p>其实这道题目也没有太大的难度，扔给脚本直接求解就好：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
<span style="color:#f92672">import</span> sympy

N<span style="color:#f92672">=</span><span style="color:#ae81ff">636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163</span>
m1<span style="color:#f92672">=</span><span style="color:#ae81ff">90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239</span>
m2<span style="color:#f92672">=</span><span style="color:#ae81ff">487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>

p <span style="color:#f92672">=</span>sympy<span style="color:#f92672">.</span>nextprime(libnum<span style="color:#f92672">.</span>nroot(N,<span style="color:#ae81ff">2</span>))
q <span style="color:#f92672">=</span> N <span style="color:#f92672">//</span> p

<span style="color:#66d9ef">assert</span>(N <span style="color:#f92672">==</span> p<span style="color:#f92672">*</span>q)

phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
c1 <span style="color:#f92672">=</span> pow(m1,d,N)
c2 <span style="color:#f92672">=</span> pow(m2,d,N)

x <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;x&#39;</span>)
y <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;y&#39;</span>)
result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>solve([x <span style="color:#f92672">+</span> y <span style="color:#f92672">-</span> c1, x<span style="color:#f92672">**</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> y<span style="color:#f92672">**</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">-</span> c2 ],[x,y])
<span style="color:#75715e"># print result</span>
F1 <span style="color:#f92672">=</span> int(result[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>])
F2 <span style="color:#f92672">=</span> int(result[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>])

flag1 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(F1)
flag2 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(F2)
flag <span style="color:#f92672">=</span> flag2 <span style="color:#f92672">+</span> flag1
print flag
</code></pre></div><p>运行脚本，大约等个2min，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">GWHT{f709e0e2cfe7e530ca8972959a1033b2}
</code></pre></div><h2 id="0xd-wustctf2020babyrsa">0xD [WUSTCTF2020]babyrsa</h2>
<p>又是一道有点意思的RSA题目，看看题吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">c <span style="color:#f92672">=</span> <span style="color:#ae81ff">28767758880940662779934612526152562406674613203406706867456395986985664083182</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">73069886771625642807435783661014062604264768481735145873508846925735521695159</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</code></pre></div><p>拿到这个题目，好像除了爆破n，没有什么别的方法了，那就分解一下n就好了</p>
<p>使用sage分解一下（笑~漫长的等待）,得到分解结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">189239861511125143212536989589123569301*386123125371923651191219869811293586459
</code></pre></div><p>然后就是愉快地写脚本了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum

c <span style="color:#f92672">=</span> <span style="color:#ae81ff">28767758880940662779934612526152562406674613203406706867456395986985664083182</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">73069886771625642807435783661014062604264768481735145873508846925735521695159</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
p <span style="color:#f92672">=</span> <span style="color:#ae81ff">189239861511125143212536989589123569301</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">386123125371923651191219869811293586459</span>
phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)

d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)

flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)

print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">wctf2020{just_@_piece_0f_cak3}
</code></pre></div><h2 id="0xe-rsa4">0xE RSA4</h2>
<p>看看这RSA有什么东西吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">N <span style="color:#f92672">=</span> <span style="color:#ae81ff">331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004</span> 
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243</span>

N <span style="color:#f92672">=</span> <span style="color:#ae81ff">302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114</span> 
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344</span>

N <span style="color:#f92672">=</span> <span style="color:#ae81ff">332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323</span> 
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242</span>
</code></pre></div><p>看样子是低加密指数广播攻击了，观察数据发现数据中都是小于5的数字，五进制，这可太恶心了，看来还需要进行一下进制转换。但是题目没有给出e的数值，根据这种攻击可能的情况，e的取值是3，10，17，然后结合中国剩余定理求解，我丢！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
<span style="color:#f92672">import</span> string
N1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004</span>
c1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243</span>

N2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114</span>
c2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344</span>

N3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323</span>
c3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242</span>
N <span style="color:#f92672">=</span> [N1,N2,N3]
c <span style="color:#f92672">=</span> [c1,c2,c3]

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">3</span>):
    N[i] <span style="color:#f92672">=</span> int(str(N[i]),<span style="color:#ae81ff">5</span>)
    c[i] <span style="color:#f92672">=</span> int(str(c[i]),<span style="color:#ae81ff">5</span>)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">CRT</span>(data):
    sum_ <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    m <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> data:
        m <span style="color:#f92672">=</span> m<span style="color:#f92672">*</span>n[<span style="color:#ae81ff">0</span>]
    <span style="color:#66d9ef">for</span> n,c <span style="color:#f92672">in</span> data:
        m1 <span style="color:#f92672">=</span> m<span style="color:#f92672">/</span>n
        mr <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(m1,n)
        sum_ <span style="color:#f92672">=</span> sum_ <span style="color:#f92672">+</span> mr <span style="color:#f92672">*</span> m1 <span style="color:#f92672">*</span> c

    <span style="color:#66d9ef">return</span> sum_ <span style="color:#f92672">%</span> m

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">isprintstr</span>(data):
    index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> data:
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> string<span style="color:#f92672">.</span>printable:
            index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
            <span style="color:#66d9ef">break</span>
        <span style="color:#66d9ef">else</span>:
            index <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">if</span> index <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
        <span style="color:#66d9ef">return</span> libnum<span style="color:#f92672">.</span>n2s(m)
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>


data <span style="color:#f92672">=</span> zip(N,c)
m_e <span style="color:#f92672">=</span> CRT(data)

e <span style="color:#f92672">=</span> [<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">17</span>]
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> e:
    m <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>nroot(m_e,i)
    flag <span style="color:#f92672">=</span> isprintstr(libnum<span style="color:#f92672">.</span>n2s(m))
    <span style="color:#66d9ef">if</span> flag:
        print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">noxCTF{D4mn_y0u_h4s74d_wh47_4_b100dy_b4s74rd!}
</code></pre></div><h2 id="0xf-yxx">0xF yxx</h2>
<p>这是啥？看看题目吧！</p>
<p>附件里面是两个txt文件</p>
<p>明文.txt：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">lovelovelovelovelovelovelovelove
</code></pre></div><p>密文.txt：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">V

0
0
0

</code></pre></div><p>密文中有很多不可打印的字符，这道题目应该是考察异或操作的，写个脚本读一下转一下数字进行一下异或：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;c.txt&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
        c <span style="color:#f92672">+=</span> line

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;m.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
        m <span style="color:#f92672">+=</span> line

m_n <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>s2n(m)
c_n <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>s2n(c)
result <span style="color:#f92672">=</span> m_n<span style="color:#f92672">^</span>c_n
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(result)

print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag:nctf{xor_xor_xor_biubiubiu}
</code></pre></div><p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>BJDCTF 2nd CRYPTO_writeup</title>
            <link>https://zcodetea.github.io/posts/bjdctf-2nd-crypto_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 17:01:41 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/bjdctf-2nd-crypto_writeup/</guid>
            <description>BJDCTF 2nd的密码学题目有8道题目可以尝试做一做，都挺有意思的。
0x0 签到-y1ng 来康康题目：
welcome to BJDCTF 1079822948 QkpEe1czbGMwbWVfVDBfQkpEQ1RGfQ== 直接使用base64解码就好：
BJD{W3lc0me_T0_BJDCTF} 0x1 老文盲了 下载附件，康康附件有什么好玩的内容：
罼雧締眔擴灝淛匶襫黼瀬鎶軄鶛驕鳓哵眔鞹鰝 不认识的文字内容，不认识怎么办？找找拼音吧，查了一下发现有个汉字转拼音的工具：在线汉字转换拼音工具 (aies.cn)
用一下这个工具得到拼音：
bì jí dì dà kuò hào zhè jiù shì fǔ lài gē zhí jiē jiāo lè bā dà kuò hào 根据拼音得到flag：
BJD{淛匶襫黼瀬鎶軄鶛驕鳓哵} 0x2 cat_flag 下载附件，康康有什么有趣的内容：


附件内容
哇哦！一个gif图片，仔细康康图片，发现猫猫挺像二进制编码的，尝试写个小脚本解决一下：
import libnum cat_list=[ &amp;#34;01000010&amp;#34;, &amp;#34;01001010&amp;#34;, &amp;#34;01000100&amp;#34;, &amp;#34;01111011&amp;#34;, &amp;#34;01001101&amp;#34;, &amp;#34;00100001&amp;#34;, &amp;#34;01100001&amp;#34;, &amp;#34;00110000&amp;#34;, &amp;#34;01111110&amp;#34;, &amp;#34;01111101&amp;#34; ] cat_c = &amp;#34;&amp;#34;.join(cat_list) flag = libnum.n2s(int(cat_c,2)) print flag 运行脚本，得到flag：</description>
            <content type="html"><![CDATA[<p>BJDCTF 2nd的密码学题目有8道题目可以尝试做一做，都挺有意思的。</p>
<h2 id="0x0-签到-y1ng">0x0 签到-y1ng</h2>
<p>来康康题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">welcome to BJDCTF
1079822948
QkpEe1czbGMwbWVfVDBfQkpEQ1RGfQ==
</code></pre></div><p>直接使用base64解码就好：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">BJD{W3lc0me_T0_BJDCTF}
</code></pre></div><h2 id="0x1-老文盲了">0x1 老文盲了</h2>
<p>下载附件，康康附件有什么好玩的内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">罼雧締眔擴灝淛匶襫黼瀬鎶軄鶛驕鳓哵眔鞹鰝
</code></pre></div><p>不认识的文字内容，不认识怎么办？找找拼音吧，查了一下发现有个汉字转拼音的工具：<a href="http://www.aies.cn/pinyin.htm">在线汉字转换拼音工具 (aies.cn)</a></p>
<p>用一下这个工具得到拼音：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">bì jí dì dà kuò hào zhè jiù shì fǔ lài gē zhí jiē jiāo lè bā dà kuò hào 
</code></pre></div><p>根据拼音得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">BJD{淛匶襫黼瀬鎶軄鶛驕鳓哵}
</code></pre></div><h2 id="0x2-cat_flag">0x2 cat_flag</h2>
<p>下载附件，康康有什么有趣的内容：</p>
<p><a href="/images/BJDCTF-2nd-CRYPTO_writeup/image-13.png"><img src="/images/BJDCTF-2nd-CRYPTO_writeup/image-13.png" alt="img"></a></p>
<p><a href="/images/BJDCTF-2nd-CRYPTO_writeup/cat.gif"><img src="/images/BJDCTF-2nd-CRYPTO_writeup/cat.gif" alt="img"></a></p>
<p>附件内容</p>
<p>哇哦！一个gif图片，仔细康康图片，发现猫猫挺像二进制编码的，尝试写个小脚本解决一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
cat_list<span style="color:#f92672">=</span>[
        <span style="color:#e6db74">&#34;01000010&#34;</span>,
        <span style="color:#e6db74">&#34;01001010&#34;</span>,
        <span style="color:#e6db74">&#34;01000100&#34;</span>,
        <span style="color:#e6db74">&#34;01111011&#34;</span>,
        <span style="color:#e6db74">&#34;01001101&#34;</span>,
        <span style="color:#e6db74">&#34;00100001&#34;</span>,
        <span style="color:#e6db74">&#34;01100001&#34;</span>,
        <span style="color:#e6db74">&#34;00110000&#34;</span>,
        <span style="color:#e6db74">&#34;01111110&#34;</span>,
        <span style="color:#e6db74">&#34;01111101&#34;</span>
        ]
cat_c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(cat_list)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(int(cat_c,<span style="color:#ae81ff">2</span>))
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">BJD{M!a0~}
</code></pre></div><h2 id="0x3-灵能精通-y1ng">0x3 灵能精通-y1ng</h2>
<p>来康康题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">身经百战的Y1ng已经达到崇高的武术境界，以自律克己来取代狂热者的战斗狂怒与传统的战斗形式。Y1ng所受的训练也进一步将他们的灵能强化到足以瓦解周遭的物质世界。借由集中这股力量，Y1ng能释放灵能能量风暴来摧毁敌人的心智、肉体与器械。

得到的 flag 建议用 flag{} 包上提交。
</code></pre></div><p>感觉题目描述挺有意思，看来出题人也是玩星际的，下载附件瞧一瞧吧！</p>
<p><a href="/images/BJDCTF-2nd-CRYPTO_writeup/jpg.jpg"><img src="/images/BJDCTF-2nd-CRYPTO_writeup/jpg.jpg" alt="img"></a>附件内容</p>
<blockquote>
<p>如果附件打不开，附件的文件名是jpg，这是个hint，可以尝试把附件的文件名扩展名修改为.jpg打开</p>
</blockquote>
<p>附件内容是个图片，看样子好像猪圈密码，不过应该是猪圈密码的变形，圣堂武士密码。</p>
<p>圣堂武士密码是什么呢？</p>
<p>圣堂武士密码无非就是猪圈密码的变种，查表就可以进行求解：</p>
<p><img src="/images/BJDCTF-2nd-CRYPTO_writeup/20200325180259577.jpg" alt="img"></p>
<p>圣堂武士密码表</p>
<p>根据圣堂武士密码的密码表进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">IMKNIGHTSTEMPLAR
</code></pre></div><p>得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{IMKNIGHTSTEMPLAR}
</code></pre></div><h2 id="0x4-燕言燕语-y1ng">0x4 燕言燕语-y1ng</h2>
<p>瞧一瞧题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">小燕子，穿花衣，年年春天来这里，我问燕子你为啥来，燕子说:
79616E7A69205A4A517B78696C7A765F6971737375686F635F73757A6A677D20
</code></pre></div><p>看样子还是比较有趣的题目，燕子说的话像是hex编码，简单进行编码解码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">yanzi ZJQ{xilzv_iqssuhoc_suzjg} 
</code></pre></div><p>像是一个移位替换密码，而且还有密钥，自然而然就联想到多表替换的维吉尼亚密码，使用维吉尼亚密码进行解密，密钥是yanzi。解密得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">BJD{yanzi_jiushige_shabi} 
</code></pre></div><h2 id="0x5-y1nglish-y1ng">0x5 Y1nglish-y1ng</h2>
<p>看看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Y1ng根据English居然独自发明了一门语言，就叫Y1nglish

明文都是可读的英文单词，flag如果提交失败，自己读一下，把错误的单词修正，再提交(某个地方的u和i不需要调换顺序，错误点不在那里)

得到的 flag 建议用 flag{} 包上提交。
</code></pre></div><p>又是一道有意思的古典密码学题目，下载附件看一看吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Nkbaslk ds sef aslckdqdqst. Sef aslckdqdqst qo lzqtbw usf ufkoplkt zth oscpslsfko. Dpkfk zfk uqjk dwcko su dscqao qt dpqo aslckdqdqst, kzap su npqap qo jkfw mzoqa. Qu wse zfk qtdkfkodkh qt tkdnsfw okaefqdw, nkbaslk ds czfdqaqczdk. Bkd lk dkbb wse z odsfw.
Q nzo pzjqtv hqttkf zd z fkodzefztd npkt Pzffw Odkkbk azlk qt, pk qo z Izcztkok ufsl Izczt med tsn pk qo tsd bqjqtv qt Izczt, lzwmk Pzffw qot&#39;d z Izcztkok tzlk med pk qo fkzbbw z Izcztkok. Pzffw nsfwkh qt z bznwkf&#39;o suuqak wkzfo zvs, med pk qo tsn nsfwqtv zd z mztw. Pk vkdo z vssh ozbzfw, med pk zbnzwo msffsno lstkw ufsl pqo ufqktho zth tkjkf czwo qd mzaw. Pzffw ozn lk zth azlk zthozdzd dpk ozlk dzmbk. Pk pzo tkjkf msffsnkh lstkw ufsl lk. Npqbk pk nzo kzdqtv, Q zowkh pql ds bkth lk &amp;2. Ds lw oefcfqok, pk vzjk lk dpk lstkw qllkhqzdkbw. &#39;Q pzjk tkjkf msfffsnkh ztw lstkw ufsl wse,&#39; Pzffw ozqh,&#39;os tsn wse azt czw usf lw hqttkf!&#39; Tsn q nqbb vqjk wse npzd wse nztd.
MIH{cwdp0t_Mfed3_u0fa3_sF_geqcgeqc_ZQ_Af4aw}
</code></pre></div><p>扔到词频分析里面看一看有什么有意思的东西吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">	Welcome to our competition. Our competition is mainly for freshmen and sophomores. There are five types of topics in this competition, each of which is very basic. If you are interested in networy security, welcome to participate. Let me tell you a story. I was having dinner at a restaurant when Harry Steele came in, he is a Japanese from Japan but now he is not living in Japan, maybe Harry isn&#39;t a Japanese name but he is really a Japanese. Harry woryed in a lawyer&#39;s office years ago, but he is now worying at a bany. He gets a good salary, but he always borrows money from his friends and never pays it bacy. Harry saw me and came andsatat the same table. He has never borrowed money from me. While he was eating, I asyed him to lend me &amp;2. To my surprise, he gave me the money immediately. &#39;I have never borrrowed any money from you,&#39; Harry said,&#39;so now you can pay for my dinner!&#39; Now i will give you what you want. BJD{pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4cy}
</code></pre></div><p>看到flag了，这个会是flag吗？提交发现失败了，需要找找这flag中的错误单词呀！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">BJD{pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4cy}
</code></pre></div><p>仔细看看，可能是“Cr4cy”单词出错了，应该是“Cr4ck”，将y改成k，提交flag就成功了！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">BJD{pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4ck}
</code></pre></div><h2 id="0x6-rsa0">0x6 rsa0</h2>
<p>终于看到了满怀期待的RSA题目了，这个题目需要nc连接，打开kali使用nc连一下：</p>
<p><a href="/images/BJDCTF-2nd-CRYPTO_writeup/image-15.png"><img src="/images/BJDCTF-2nd-CRYPTO_writeup/image-15-1024x121.png" alt="img"></a>nc连接</p>
<p>nc获取了一些信息：</p>
<pre tabindex="0"><code>e=10477063

p+q=17797691537345386808732394196803681705577569713058967120949517816644062502139647331474144263789043199741290898466578874059252164582901136367451369351827816

p-q=1305460584852976150632619140303339956209228307006605810393373145443065968179582165859467446565684139103706614652868361938441145461112269668449569764472982

c=39163440507451196385175391692403807512116238503431942217244080791066873723780085527827581471431177375753278940397090368658088104095247010524149681791425756148064544080426058546466326660811194616137132601269623860143290910244742205045745875133012498997510445277485057284790297158770357940730856250397868755440

flag=??????
</code></pre><p>应该是一道简单的解方程题目，编写python脚本处理一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> sympy
<span style="color:#f92672">import</span> libnum
e<span style="color:#f92672">=</span><span style="color:#ae81ff">10477063</span>

pq_add<span style="color:#f92672">=</span><span style="color:#ae81ff">17797691537345386808732394196803681705577569713058967120949517816644062502139647331474144263789043199741290898466578874059252164582901136367451369351827816</span>

pq_reduce<span style="color:#f92672">=</span><span style="color:#ae81ff">1305460584852976150632619140303339956209228307006605810393373145443065968179582165859467446565684139103706614652868361938441145461112269668449569764472982</span>

c<span style="color:#f92672">=</span><span style="color:#ae81ff">39163440507451196385175391692403807512116238503431942217244080791066873723780085527827581471431177375753278940397090368658088104095247010524149681791425756148064544080426058546466326660811194616137132601269623860143290910244742205045745875133012498997510445277485057284790297158770357940730856250397868755440</span>

p <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;p&#39;</span>)
q <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;q&#39;</span>)
result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>solve([p<span style="color:#f92672">+</span>q<span style="color:#f92672">-</span>pq_add,p<span style="color:#f92672">-</span>q<span style="color:#f92672">-</span>pq_reduce],[p,q])
p <span style="color:#f92672">=</span> int(result[p])
q <span style="color:#f92672">=</span> int(result[q])
n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{562f22b9-400d-4ec9-aa76-cd616aac90f1}
</code></pre></div><h2 id="0x7-rsa1">0x7 rsa1</h2>
<p>RSA题目，这道题目同样也需要nc进行一下连接才能看到信息，用kali连一下吧！</p>
<p><a href="/images/BJDCTF-2nd-CRYPTO_writeup/image-16.png"><img src="/images/BJDCTF-2nd-CRYPTO_writeup/image-16-1024x136.png" alt="img"></a>nc连接</p>
<p>通过nc连接可以得到如下信息：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">e=13978249

p^2+q^2=151633530567840355748243871671727511189658909500927250886437120180748983135296331316827920586717252371861785059822420509109728958374451816184682503257816598163005301542586939209069221866722313318463885766603690164708951344417890956348605521584906780834058177779608801835165928975303416040686406630968929531010

p-q=-2118796405660557026785910948566097381644078577714422876494681451389305041193569373390033403177726098952539178824903786390753214478292445023621601397654014

c=21916668537159292929146888499738761128788996251113020794961311339328734967861189157533491528242915717785269949067916125251437612282270561594687073731637132301015100520285933737661576838469743738400472236913537499783613239148851084298950840310231212420378731161267913668383166553730465799427960831384019988540

flag=??????
</code></pre></div><p>还是比较类似的考察方法，依旧是解方程，编写一个小脚本求解吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> sympy
<span style="color:#f92672">import</span> libnum
e<span style="color:#f92672">=</span><span style="color:#ae81ff">13978249</span>

f1<span style="color:#f92672">=</span><span style="color:#ae81ff">151633530567840355748243871671727511189658909500927250886437120180748983135296331316827920586717252371861785059822420509109728958374451816184682503257816598163005301542586939209069221866722313318463885766603690164708951344417890956348605521584906780834058177779608801835165928975303416040686406630968929531010</span>

f2<span style="color:#f92672">=-</span><span style="color:#ae81ff">2118796405660557026785910948566097381644078577714422876494681451389305041193569373390033403177726098952539178824903786390753214478292445023621601397654014</span>

c<span style="color:#f92672">=</span><span style="color:#ae81ff">21916668537159292929146888499738761128788996251113020794961311339328734967861189157533491528242915717785269949067916125251437612282270561594687073731637132301015100520285933737661576838469743738400472236913537499783613239148851084298950840310231212420378731161267913668383166553730465799427960831384019988540</span>


p <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;p&#39;</span>)
q <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;q&#39;</span>)
result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>solve([p<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span>q<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-</span>f1,p<span style="color:#f92672">-</span>q<span style="color:#f92672">-</span>f2],[p,q])
<span style="color:#75715e"># print result</span>
p <span style="color:#f92672">=</span> int(result[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>])
q <span style="color:#f92672">=</span> int(result[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>])
<span style="color:#75715e"># print p,q</span>

n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{db0f7d6f-da5a-413b-8dfa-1a82a004c083}
</code></pre></div><p>BJD 2nd的Crypto题目全部求解，脑洞题目偏多，整体考察比较综合，难度相对较低。</p>
]]></content>
        </item>
        
        <item>
            <title>GKCTF2020 CRYPTO_writeup</title>
            <link>https://zcodetea.github.io/posts/gkctf2020-crypto_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 16:53:12 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/gkctf2020-crypto_writeup/</guid>
            <description>GKCTF2020的密码学题目相对而言比较简单，古典密码学题目偏多。而且密码学题目也只有四道题目
0x0 小学生的密码学 打开题目描述，查看题目描述内容：
e(x)=11x+6(mod26) 密文：welcylk （flag为base64形式） 看样子是仿射密码，直接逆就好了，写个python脚本解决吧：
import gmpy2 import string import base64 m = gmpy2.invert(11,26) table = string.ascii_lowercase # print table cipher = &amp;#34;welcylk&amp;#34; plainer = &amp;#34;&amp;#34; for i in cipher: x = table.index(i) j = (x-6)*m %26 # print j plainer += table[j] flag = &amp;#34;flag{&amp;#34;+base64.b64encode(plainer) +&amp;#34;}&amp;#34; print flag 运行脚本，得到flag：
flag{c29yY2VyeQ==} 0x1 汉字的秘密 题目描述：
你能看出汉字的奥秘吗？ 答案形式：flag{小写字母} 和汉字相关的密码，又是考察古典密码，估计是当铺密码
下载附件，发现附件是一个doc文件，查看附件内容：
王壮 夫工 王中 王夫 由由井 井人 夫中 夫夫 井王 土土 夫由 土夫 井中 士夫 王工 王人 土由 由口夫 看样子是当铺密码，没错了，写个脚本处理一下吧：</description>
            <content type="html"><![CDATA[<p>GKCTF2020的密码学题目相对而言比较简单，古典密码学题目偏多。而且密码学题目也只有四道题目</p>
<p><img src="/images/GKCTF2020-Crypto_writeup/WechatIMG1350.jpeg" alt="img"></p>
<h2 id="0x0-小学生的密码学">0x0 小学生的密码学</h2>
<p>打开题目描述，查看题目描述内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">e(x)=11x+6(mod26)

密文：welcylk

（flag为base64形式）
</code></pre></div><p>看样子是仿射密码，直接逆就好了，写个python脚本解决吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">import</span> string
<span style="color:#f92672">import</span> base64

m <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">26</span>)

table <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>ascii_lowercase
<span style="color:#75715e"># print table</span>
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;welcylk&#34;</span>
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
    x <span style="color:#f92672">=</span> table<span style="color:#f92672">.</span>index(i)
    j <span style="color:#f92672">=</span> (x<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>)<span style="color:#f92672">*</span>m <span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>
<span style="color:#75715e">#    print j</span>
    plainer <span style="color:#f92672">+=</span> table[j]

flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>base64<span style="color:#f92672">.</span>b64encode(plainer) <span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<pre tabindex="0"><code>flag{c29yY2VyeQ==}
</code></pre><h2 id="0x1-汉字的秘密">0x1 汉字的秘密</h2>
<p>题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">你能看出汉字的奥秘吗？ 答案形式：flag{小写字母}
</code></pre></div><p>和汉字相关的密码，又是考察古典密码，估计是当铺密码</p>
<p>下载附件，发现附件是一个doc文件，查看附件内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">王壮 夫工 王中 王夫 由由井 井人 夫中 夫夫 井王 土土 夫由
土夫 井中 士夫 王工 王人 土由 由口夫
</code></pre></div><p>看样子是当铺密码，没错了，写个脚本处理一下吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">dh <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;田口由中人工大土士王夫井羊壮&#39;</span>
ds <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;00123455567899&#39;</span>

c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;王壮 夫工 王中 王夫 由由井 井人 夫中 夫夫 井王 土土 夫由 土夫 井中 士夫 王工 王人 土由 由口夫&#39;</span>
s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c:
    <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dh:
        s <span style="color:#f92672">+=</span> ds[dh<span style="color:#f92672">.</span>index(i)]
    <span style="color:#66d9ef">else</span>:
        s <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39; &#39;</span>
<span style="color:#75715e">#print(s)</span>

c_list <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,len(c_list)):
    m <span style="color:#f92672">+=</span> chr(int(c_list[i])<span style="color:#f92672">+</span>i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)

flag <span style="color:#f92672">=</span> m<span style="color:#f92672">.</span>lower()
print(flag)
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{you_are_good}
</code></pre></div><hr>
<p>那什么是当铺密码呢？</p>
<p>当铺密码是一种很有意思的密码，专门用来加密数字的，不需要密钥，明文信息包含在加密后的密文中。</p>
<p>它通过一个汉字中隐藏的信息：笔画数，来将汉字和数字关联起来，将汉字定义为明文，将数字定义为密文，加密是将数字映射到对应笔画的汉字，解密是将汉字按照笔画映射回数字。</p>
<p>有很多汉字的笔画数是相同的，所以可能会有多个明文（汉字）对应同一个密文（数字），当然这个主要是看汉字笔画映射表的选择，如果映射表只准备了9个汉字，每种笔画有一个汉字对应则是一对一的，否则是一对多的。一对一的话有个缺点就是如果要加密的明文中有重复数字，比如33，转换为“飞马”比“三三”更难总结出规律，而这种没有秘钥的加密方式重要的就是隐藏自己的规律，所以一对多会更难被破译。[1]</p>
<p>当铺密码就是根据汉字的特点来设计的一种古典密码，还是挺有意思的，虽然不是很实用。</p>
<h2 id="0x2-babycrypto">0x2 babycrypto</h2>
<p>下载附件，查看附件内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt"># n:0xb119849bc4523e49c6c038a509a74cda628d4ca0e4d0f28e677d57f3c3c7d0d876ef07d7581fe05a060546fedd7d061d3bc70d679b6c5dd9bc66c5bdad8f2ef898b1e785496c4989daf716a1c89d5c174da494eee7061bcb6d52cafa337fc2a7bba42c918bbd3104dff62ecc9d3704a455a6ce282de0d8129e26c840734ffd302bec5f0a66e0e6d00b5c50fa57c546cff9d7e6a978db77997082b4cb927df9847dfffef55138cb946c62c9f09b968033745b5b6868338c64819a8e92a827265f9abd409359a9471d8c3a2631b80e5b462ba42336717700998ff38536c2436e24ac19228cd2d7a909ead1a8494ff6c3a7151e888e115b68cc6a7a8c6cf8a6c005L
# e:65537
# enc:1422566584480199878714663051468143513667934216213366733442059106529451931078271460363335887054199577950679102659270179475911101747625120544429262334214483688332111552004535828182425152965223599160129610990036911146029170033592055768983427904835395850414634659565092191460875900237711597421272312032796440948509724492027247376113218678183443222364531669985128032971256792532015051829041230203814090194611041172775368357197854451201260927117792277559690205342515437625417792867692280849139537687763919269337822899746924269847694138899165820004160319118749298031065800530869562704671435709578921901495688124042302500361
# p&gt;&gt;128&lt;&lt;128:0xe4e4b390c1d201dae2c00a4669c0865cc5767bc444f5d310f3cfc75872d96feb89e556972c99ae20753e3314240a52df5dccd076a47c6b5d11b531b92d901b2b512aeb0b263bbfd624fe3d52e5e238beeb581ebe012b2f176a4ffd1e0d2aa8c4d3a2656573b727d4d3136513a931428b00000000000000000000000000000000L
</code></pre></div><p>RSA题目，考察的应该是p的高位泄露，应该是针对p的高位泄露进行设计的攻击算法来进行求解的。经查询发现，coppersmith算法应该是就是解决p高位泄露问题的解密算法，但是这个算法需要使用的开源数学工具sagemath。这里采用sagemath程序解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xb119849bc4523e49c6c038a509a74cda628d4ca0e4d0f28e677d57f3c3c7d0d876ef07d7581fe05a060546fedd7d061d3bc70d679b6c5dd9bc66c5bdad8f2ef898b1e785496c4989daf716a1c89d5c174da494eee7061bcb6d52cafa337fc2a7bba42c918bbd3104dff62ecc9d3704a455a6ce282de0d8129e26c840734ffd302bec5f0a66e0e6d00b5c50fa57c546cff9d7e6a978db77997082b4cb927df9847dfffef55138cb946c62c9f09b968033745b5b6868338c64819a8e92a827265f9abd409359a9471d8c3a2631b80e5b462ba42336717700998ff38536c2436e24ac19228cd2d7a909ead1a8494ff6c3a7151e888e115b68cc6a7a8c6cf8a6c005</span>L
p_fake <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xe4e4b390c1d201dae2c00a4669c0865cc5767bc444f5d310f3cfc75872d96feb89e556972c99ae20753e3314240a52df5dccd076a47c6b5d11b531b92d901b2b512aeb0b263bbfd624fe3d52e5e238beeb581ebe012b2f176a4ffd1e0d2aa8c4d3a2656573b727d4d3136513a931428b00000000000000000000000000000000</span>L
pbits <span style="color:#f92672">=</span> <span style="color:#ae81ff">1024</span>
kbits <span style="color:#f92672">=</span> <span style="color:#ae81ff">128</span>
pbar <span style="color:#f92672">=</span> p_fake <span style="color:#f92672">&amp;</span> (<span style="color:#ae81ff">2</span><span style="color:#f92672">^</span>pbits<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span><span style="color:#f92672">^</span>kbits)
print(<span style="color:#e6db74">&#34;upper </span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> bits (of </span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> bits) is given&#34;</span> <span style="color:#f92672">%</span> (pbits<span style="color:#f92672">-</span>kbits, pbits))
PR<span style="color:#f92672">.&lt;</span>x<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> PolynomialRing(Zmod(n))
f <span style="color:#f92672">=</span> x <span style="color:#f92672">+</span> pbar
x0 <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>small_roots(X<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">^</span>kbits, beta<span style="color:#f92672">=</span><span style="color:#ae81ff">0.4</span>)[<span style="color:#ae81ff">0</span>]
print(hex(int(x0 <span style="color:#f92672">+</span> pbar)))
</code></pre></div><p>使用sagemath运行可以得到p的数值：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">0xe4e4b390c1d201dae2c00a4669c0865cc5767bc444f5d310f3cfc75872d96feb89e556972c99ae20753e3314240a52df5dccd076a47c6b5d11b531b92d901b2b512aeb0b263bbfd624fe3d52e5e238beeb581ebe012b2f176a4ffd1e0d2aa8c4d3a2656573b727d4d3136513a931428b92826225b6d0e735440b613a8336ffa3
</code></pre></div><p>然后再使用一常规的RSA脚本进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xb119849bc4523e49c6c038a509a74cda628d4ca0e4d0f28e677d57f3c3c7d0d876ef07d7581fe05a060546fedd7d061d3bc70d679b6c5dd9bc66c5bdad8f2ef898b1e785496c4989daf716a1c89d5c174da494eee7061bcb6d52cafa337fc2a7bba42c918bbd3104dff62ecc9d3704a455a6ce282de0d8129e26c840734ffd302bec5f0a66e0e6d00b5c50fa57c546cff9d7e6a978db77997082b4cb927df9847dfffef55138cb946c62c9f09b968033745b5b6868338c64819a8e92a827265f9abd409359a9471d8c3a2631b80e5b462ba42336717700998ff38536c2436e24ac19228cd2d7a909ead1a8494ff6c3a7151e888e115b68cc6a7a8c6cf8a6c005</span>L
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">1422566584480199878714663051468143513667934216213366733442059106529451931078271460363335887054199577950679102659270179475911101747625120544429262334214483688332111552004535828182425152965223599160129610990036911146029170033592055768983427904835395850414634659565092191460875900237711597421272312032796440948509724492027247376113218678183443222364531669985128032971256792532015051829041230203814090194611041172775368357197854451201260927117792277559690205342515437625417792867692280849139537687763919269337822899746924269847694138899165820004160319118749298031065800530869562704671435709578921901495688124042302500361</span>
p <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xe4e4b390c1d201dae2c00a4669c0865cc5767bc444f5d310f3cfc75872d96feb89e556972c99ae20753e3314240a52df5dccd076a47c6b5d11b531b92d901b2b512aeb0b263bbfd624fe3d52e5e238beeb581ebe012b2f176a4ffd1e0d2aa8c4d3a2656573b727d4d3136513a931428b92826225b6d0e735440b613a8336ffa3</span>
q <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span> p
phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{3d0914a1-1e97-4822-a745-c7e20c5179b9}
</code></pre></div><h2 id="0x3-backdoor">0x3 Backdoor</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">p=k*M+(65537**a %M)
</code></pre></div><p>根据题目描述可以联想到ROCA漏洞，可以从论文中清晰地看到：</p>
<p><a href="/images/GKCTF2020-Crypto_writeup/image-12.png"><img src="/images/GKCTF2020-Crypto_writeup/image-12.png" alt="img"></a></p>
<p>正好符合这个题目的hint，这个题目的考察要点应该就是<a href="https://crocs.fi.muni.cz/public/papers/rsa_ccs17">ROCA的CVE漏洞</a>。这个CVE的利用再GitHub上面有现成的轮子，进行稍微修改一下就可以使用，这里给出解题的sagemath exp：[2]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">param <span style="color:#f92672">=</span> 
{
  <span style="color:#ae81ff">512</span>: {
    <span style="color:#e6db74">&#34;n&#34;</span>: <span style="color:#ae81ff">39</span>,
    <span style="color:#e6db74">&#34;a_max&#34;</span>: <span style="color:#ae81ff">62</span>,
    <span style="color:#e6db74">&#34;k_max&#34;</span>: <span style="color:#ae81ff">37</span>,
    <span style="color:#e6db74">&#34;M&#34;</span>: <span style="color:#ae81ff">0x924cba6ae99dfa084537facc54948df0c23da044d8cabe0edd75bc6</span>,
    <span style="color:#e6db74">&#34;M_prime&#34;</span>: <span style="color:#ae81ff">0x1b3e6c9433a7735fa5fc479ffe4027e13bea</span>,
    <span style="color:#e6db74">&#34;m&#34;</span>: <span style="color:#ae81ff">5</span>,
    <span style="color:#e6db74">&#34;t&#34;</span>: <span style="color:#ae81ff">6</span>,
    <span style="color:#e6db74">&#34;c_a&#34;</span>: <span style="color:#ae81ff">0x80000</span>
  },
  <span style="color:#ae81ff">1024</span>: {
    <span style="color:#e6db74">&#34;n&#34;</span>: <span style="color:#ae81ff">71</span>,
    <span style="color:#e6db74">&#34;a_max&#34;</span>: <span style="color:#ae81ff">134</span>,
    <span style="color:#e6db74">&#34;k_max&#34;</span>: <span style="color:#ae81ff">37</span>,
    <span style="color:#e6db74">&#34;M&#34;</span>: <span style="color:#ae81ff">0x7923ba25d1263232812ac930e9683ac0b02180c32bae1d77aa950c4a18a4e660db8cc90384a394940593408f192de1a05e1b61673ac499416088382</span>,
    <span style="color:#e6db74">&#34;M_prime&#34;</span>: <span style="color:#ae81ff">0x24683144f41188c2b1d6a217f81f12888e4e6513c43f3f60e72af8bd9728807483425d1e</span>,
    <span style="color:#e6db74">&#34;m&#34;</span>: <span style="color:#ae81ff">4</span>,
    <span style="color:#e6db74">&#34;t&#34;</span>: <span style="color:#ae81ff">5</span>,
    <span style="color:#e6db74">&#34;c_a&#34;</span>: <span style="color:#ae81ff">0x40000000</span>
  },
  <span style="color:#ae81ff">2048</span>: {
    <span style="color:#e6db74">&#34;n&#34;</span>: <span style="color:#ae81ff">126</span>,
    <span style="color:#e6db74">&#34;a_max&#34;</span>: <span style="color:#ae81ff">434</span>,
    <span style="color:#e6db74">&#34;k_max&#34;</span>: <span style="color:#ae81ff">53</span>,
    <span style="color:#e6db74">&#34;M&#34;</span>: <span style="color:#ae81ff">0x7cda79f57f60a9b65478052f383ad7dadb714b4f4ac069997c7ff23d34d075fca08fdf20f95fbc5f0a981d65c3a3ee7ff74d769da52e948d6b0270dd736ef61fa99a54f80fb22091b055885dc22b9f17562778dfb2aeac87f51de339f71731d207c0af3244d35129feba028a48402247f4ba1d2b6d0755baff6</span>,
    <span style="color:#e6db74">&#34;M_prime&#34;</span>: <span style="color:#ae81ff">0x16928dc3e47b44daf289a60e80e1fc6bd7648d7ef60d1890f3e0a9455efe0abdb7a748131413cebd2e36a76a355c1b664be462e115ac330f9c13344f8f3d1034a02c23396e6</span>,
    <span style="color:#e6db74">&#34;m&#34;</span>: <span style="color:#ae81ff">7</span>,
    <span style="color:#e6db74">&#34;t&#34;</span>: <span style="color:#ae81ff">8</span>,
    <span style="color:#e6db74">&#34;c_a&#34;</span>: <span style="color:#ae81ff">0x400000000</span>
  }
}

<span style="color:#75715e"># https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/coppersmith.sage</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">coppersmith_howgrave_univariate</span>(pol, N, beta, mm, tt, XX):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Coppersmith revisited by Howgrave-Graham
</span><span style="color:#e6db74">    
</span><span style="color:#e6db74">    finds a solution if:
</span><span style="color:#e6db74">    * b|N, b &gt;= N^beta , 0 &lt; beta &lt;= 1
</span><span style="color:#e6db74">    * |x| &lt; XX
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    <span style="color:#75715e">#</span>
    <span style="color:#75715e"># init</span>
    <span style="color:#75715e">#</span>
    dd <span style="color:#f92672">=</span> pol<span style="color:#f92672">.</span>degree()
    nn <span style="color:#f92672">=</span> dd <span style="color:#f92672">*</span> mm <span style="color:#f92672">+</span> tt
    
    <span style="color:#75715e">#</span>
    <span style="color:#75715e"># checks</span>
    <span style="color:#75715e">#</span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&lt;</span> beta <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span> :
        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;beta should belongs in (0, 1]&#34;</span>)

    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> pol<span style="color:#f92672">.</span>is_monic():
        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ArithmeticError</span>(<span style="color:#e6db74">&#34;Polynomial must be monic.&#34;</span>)

    
    <span style="color:#75715e">#</span>
    <span style="color:#75715e"># Coppersmith revisited algo for univariate</span>
    <span style="color:#75715e">#</span>

    <span style="color:#75715e"># change ring of pol and x</span>
    polZ <span style="color:#f92672">=</span> pol<span style="color:#f92672">.</span>change_ring(ZZ)
    x <span style="color:#f92672">=</span> polZ<span style="color:#f92672">.</span>parent()<span style="color:#f92672">.</span>gen()

    <span style="color:#75715e"># compute polynomials</span>
    gg <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> ii <span style="color:#f92672">in</span> range(mm):
        <span style="color:#66d9ef">for</span> jj <span style="color:#f92672">in</span> range(dd):
            gg<span style="color:#f92672">.</span>append((x <span style="color:#f92672">*</span> XX)<span style="color:#f92672">**</span>jj <span style="color:#f92672">*</span> N<span style="color:#f92672">**</span>(mm <span style="color:#f92672">-</span> ii) <span style="color:#f92672">*</span> polZ(x <span style="color:#f92672">*</span> XX)<span style="color:#f92672">**</span>ii)
    <span style="color:#66d9ef">for</span> ii <span style="color:#f92672">in</span> range(tt):
        gg<span style="color:#f92672">.</span>append((x <span style="color:#f92672">*</span> XX)<span style="color:#f92672">**</span>ii <span style="color:#f92672">*</span> polZ(x <span style="color:#f92672">*</span> XX)<span style="color:#f92672">**</span>mm)
    
    <span style="color:#75715e"># construct lattice B</span>
    BB <span style="color:#f92672">=</span> Matrix(ZZ, nn)
    
    <span style="color:#66d9ef">for</span> ii <span style="color:#f92672">in</span> range(nn):
        <span style="color:#66d9ef">for</span> jj <span style="color:#f92672">in</span> range(ii<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
            BB[ii, jj] <span style="color:#f92672">=</span> gg[ii][jj]

    <span style="color:#75715e"># LLL</span>
    BB <span style="color:#f92672">=</span> BB<span style="color:#f92672">.</span>LLL(early_red<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, use_siegel<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)

    <span style="color:#75715e"># transform shortest vector in polynomial    </span>
    new_pol <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> ii <span style="color:#f92672">in</span> range(nn):
        new_pol <span style="color:#f92672">+=</span> x<span style="color:#f92672">**</span>ii <span style="color:#f92672">*</span> BB[<span style="color:#ae81ff">0</span>, ii] <span style="color:#f92672">/</span> XX<span style="color:#f92672">**</span>ii

    <span style="color:#75715e"># factor polynomial</span>
    potential_roots <span style="color:#f92672">=</span> new_pol<span style="color:#f92672">.</span>roots()

    <span style="color:#66d9ef">return</span> [i[<span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> potential_roots]

<span style="color:#75715e"># Top level of the attack, feeds the queue for the workers</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">roca</span>(N):
  
  <span style="color:#75715e"># Key is not always of perfect size, infer from size</span>
  keylength <span style="color:#f92672">=</span> int(log(N, <span style="color:#ae81ff">2</span>))
  <span style="color:#66d9ef">if</span> keylength <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">1000</span> :
    keylength <span style="color:#f92672">=</span> <span style="color:#ae81ff">512</span>
  <span style="color:#66d9ef">elif</span>  keylength <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2000</span> :
    keylength <span style="color:#f92672">=</span> <span style="color:#ae81ff">1024</span> 
  <span style="color:#66d9ef">elif</span> keylength <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">4000</span> :
    keylength <span style="color:#f92672">=</span> <span style="color:#ae81ff">2048</span> 
  <span style="color:#66d9ef">else</span>:
    keylength <span style="color:#f92672">=</span> <span style="color:#ae81ff">4096</span> 
  
  <span style="color:#75715e"># bruteforce</span>
  M_prime <span style="color:#f92672">=</span> param[keylength][<span style="color:#e6db74">&#39;M_prime&#39;</span>]
  c_prime <span style="color:#f92672">=</span> discrete_log(N, Mod(<span style="color:#ae81ff">65537</span>, M_prime))
  ord_prime <span style="color:#f92672">=</span> Zmod(M_prime)(<span style="color:#ae81ff">65537</span>)<span style="color:#f92672">.</span>multiplicative_order()
  top <span style="color:#f92672">=</span> (c_prime <span style="color:#f92672">+</span> ord_prime)<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>
  beta <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span> 
  mm <span style="color:#f92672">=</span> param[keylength][<span style="color:#e6db74">&#39;m&#39;</span>]
  tt <span style="color:#f92672">=</span> param[keylength][<span style="color:#e6db74">&#39;t&#39;</span>]

  XX <span style="color:#f92672">=</span> int((<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>pow(N, beta)) <span style="color:#f92672">/</span> M_prime) 

  <span style="color:#75715e"># Bruteforce until p, q are found</span>
  a_prime <span style="color:#f92672">=</span> floor(c_prime<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>)
  <span style="color:#66d9ef">while</span> a_prime <span style="color:#f92672">&lt;</span> top:
      
      <span style="color:#75715e"># Construct polynomial</span>
      m_inv <span style="color:#f92672">=</span> int(inverse_mod(M_prime, N))
      k_tmp <span style="color:#f92672">=</span> int(pow(<span style="color:#ae81ff">65537</span>, a_prime, M_prime))
      known_part_pol <span style="color:#f92672">=</span> int(k_tmp <span style="color:#f92672">*</span> m_inv)
      F <span style="color:#f92672">=</span> PolynomialRing(Zmod(N), implementation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;NTL&#39;</span>, names<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#39;x&#39;</span>,))
      (x,) <span style="color:#f92672">=</span> F<span style="color:#f92672">.</span>_first_ngens(<span style="color:#ae81ff">1</span>)
      pol <span style="color:#f92672">=</span> x <span style="color:#f92672">+</span> known_part_pol
      
      <span style="color:#75715e"># Get roots of polynomial using coppersmith</span>
      roots <span style="color:#f92672">=</span> coppersmith_howgrave_univariate(pol, N, beta, mm, tt, XX)
     
      <span style="color:#75715e"># Check if roots are p, q</span>
      <span style="color:#66d9ef">for</span> root <span style="color:#f92672">in</span> roots:
        factor1 <span style="color:#f92672">=</span> k_tmp <span style="color:#f92672">+</span> abs(root) <span style="color:#f92672">*</span> M_prime
        <span style="color:#66d9ef">if</span> mod(N, factor1) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
          factor2 <span style="color:#f92672">=</span> N <span style="color:#f92672">//</span> factor1
          <span style="color:#66d9ef">return</span> int(factor1), int(factor2)
      a_prime <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">from</span> Crypto.PublicKey <span style="color:#f92672">import</span> RSA
<span style="color:#f92672">import</span> base64

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;./pub.pem&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
    key <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>import_key(f<span style="color:#f92672">.</span>read())
    e <span style="color:#f92672">=</span> key<span style="color:#f92672">.</span>e
    n <span style="color:#f92672">=</span> key<span style="color:#f92672">.</span>n
print(n)
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;flag.enc&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
    c <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(f<span style="color:#f92672">.</span>read())

N <span style="color:#f92672">=</span> n
print (<span style="color:#e6db74">&#34;[+] Factoring </span><span style="color:#e6db74">%i</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> N)

factor1, factor2 <span style="color:#f92672">=</span> roca(N)
q <span style="color:#f92672">=</span> factor1
p <span style="color:#f92672">=</span> factor2

print (<span style="color:#e6db74">&#34;[+] Found factors of N:&#34;</span>)
print (<span style="color:#e6db74">&#34;[+] p =&#34;</span> , factor1)
print (<span style="color:#e6db74">&#34;[+] q =&#34;</span> , factor2)

<span style="color:#66d9ef">assert</span>(p <span style="color:#f92672">*</span> q <span style="color:#f92672">==</span> n)
d <span style="color:#f92672">=</span> inverse(e, (q <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> (p <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>))
c <span style="color:#f92672">=</span> bytes_to_long(bytes<span style="color:#f92672">.</span>fromhex(str(c)[<span style="color:#ae81ff">2</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]))
print(long_to_bytes(pow(c, d, n)))
</code></pre></div><p>使用sagemath运行得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{760958c9-cca9-458b-9cbe-ea07aa1668e4}
</code></pre></div><h2 id="参考">参考：</h2>
<ol>
<li><a href="https://www.cnblogs.com/cc11001100/p/9357263.html#:~:text=%E5%BD%93%E9%93%BA%E5%AF%86%E7%A0%81%E6%98%AF%E4%B8%80%E7%A7%8D%E5%BE%88,%E5%8A%A0%E5%AF%86%E5%90%8E%E7%9A%84%E5%AF%86%E6%96%87%E4%B8%AD%E3%80%82">当铺密码-博客园</a></li>
<li><a href="https://blog.chrisyy.top/2020/05/24/gkctf/">GKCTF2020 Crypto Writeup- Chrisyy&rsquo;s blog</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>BUUCTF CRYPTO [33 48]_writeup</title>
            <link>https://zcodetea.github.io/posts/buuctf-crypto-33-48_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 16:29:54 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/buuctf-crypto-33-48_writeup/</guid>
            <description>同样的味道，同样的感觉，再看密码的世界！
BUUCTF
来审视一下，本次的题目：
题目列表
 Morse Cipher Dangerous RSA basic rsa 达芬奇密码 Checkln BabyRSA rsa2 RSA5 密码学的心声 传感器 这是base？ rot Keyboard 这是什么 childRSA  也是同样满满的16道CTF题目，都是密码学题目哟！
0x0 Morse 打开附件，直接就是Morse密码密文：
-..../.----/-..../-..../-..../...--/--.../....-/-..../-..../--.../-.../...--/.----/--.../...--/..---/--.../--.../....-/...../..-./--.../...--/...--/-----/...../..-./...--/...--/...--/....-/...--/...../--.../----./--.../-.. 直接解密摩斯密码得到：
61666374667B317327745F73305F333435797D 得到的16进制密文，对密文进行解密：

成功得到flag：
afctf{1s&amp;#39;t_s0_345y} flag：afctf{1s&amp;rsquo;t_s0_345y}
0x1 Cipher 打开题目描述：
还能提示什么呢？公平的玩吧（密钥自己找） Dncnoqqfliqrpgeklwmppu 注意：得到的 flag 请包上 flag{} 提交, flag{小写字母} 看的非常懵，考察古典密码的题目，唯一的提示就是“公平的玩吧（密钥自己找）”，实在是找不到头绪，看了大佬的WP发现是playfair加密，在网上找到了一个在线工具可以求解playfair加密，这里就使用在线工具进行解密

得到解密结果：Itisnotaproblemhavefun
故得flag: flag{itisnotaproblemhavefun}
0x2 Dangerous RSA 应该是一道典型的RSA题目，直接下载附件
#n: 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793L #e: 0x3 #c:0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365 so,how to get the message? e的值非常小，这道RSA题目应该是考察低加密指数攻击的，直接上脚本：
import gmpy2 import libnum c = 0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365 n = 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793L e = 0x3 m = 0 i = 0 while 1: if(gmpy2.</description>
            <content type="html"><![CDATA[<p>同样的味道，同样的感觉，再看密码的世界！</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-136.png"><img src="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-136.png" alt="img"></a>BUUCTF</p>
<p>来审视一下，本次的题目：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-15.png"><img src="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-15.png" alt="img"></a>题目列表</p>
<ol>
<li>Morse</li>
<li>Cipher</li>
<li>Dangerous RSA</li>
<li>basic rsa</li>
<li>达芬奇密码</li>
<li>Checkln</li>
<li>BabyRSA</li>
<li>rsa2</li>
<li>RSA5</li>
<li>密码学的心声</li>
<li>传感器</li>
<li>这是base？</li>
<li>rot</li>
<li>Keyboard</li>
<li>这是什么</li>
<li>childRSA</li>
</ol>
<p>也是同样满满的16道CTF题目，都是密码学题目哟！</p>
<h2 id="0x0-morse">0x0 Morse</h2>
<p>打开附件，直接就是Morse密码密文：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">-..../.----/-..../-..../-..../...--/--.../....-/-..../-..../--.../-.../...--/.----/--.../...--/..---/--.../--.../....-/...../..-./--.../...--/...--/-----/...../..-./...--/...--/...--/....-/...--/...../--.../----./--.../-..
</code></pre></div><p>直接解密摩斯密码得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">61666374667B317327745F73305F333435797D
</code></pre></div><p>得到的16进制密文，对密文进行解密：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-6.png"><img src="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-6.png" alt="img"></a></p>
<p>成功得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">afctf{1s&#39;t_s0_345y}
</code></pre></div><p>flag：afctf{1s&rsquo;t_s0_345y}</p>
<h2 id="0x1-cipher">0x1 Cipher</h2>
<p>打开题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">还能提示什么呢？公平的玩吧（密钥自己找） Dncnoqqfliqrpgeklwmppu 注意：得到的 flag 请包上 flag{} 提交, flag{小写字母}
</code></pre></div><p>看的非常懵，考察古典密码的题目，唯一的提示就是“公平的玩吧（密钥自己找）”，实在是找不到头绪，看了大佬的WP发现是playfair加密，在网上找到了一个<a href="http://rumkin.com/tools/cipher/playfair.php">在线工具</a>可以求解playfair加密，这里就使用在线工具进行解密</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-7.png"><img src="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-7-1024x516.png" alt="img"></a></p>
<p>得到解密结果：Itisnotaproblemhavefun</p>
<p>故得flag: flag{itisnotaproblemhavefun}</p>
<h2 id="0x2-dangerous-rsa">0x2 Dangerous RSA</h2>
<p>应该是一道典型的RSA题目，直接下载附件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">#n:  0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793L
#e:  0x3
#c:0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365
so,how to get the message?
</code></pre></div><p>e的值非常小，这道RSA题目应该是考察低加密指数攻击的，直接上脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">import</span> libnum
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793</span>L
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x3</span>
m <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">while</span> <span style="color:#ae81ff">1</span>:
    <span style="color:#66d9ef">if</span>(gmpy2<span style="color:#f92672">.</span>iroot(c<span style="color:#f92672">+</span>i<span style="color:#f92672">*</span>n,<span style="color:#ae81ff">3</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">==</span><span style="color:#ae81ff">1</span>):
        m <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>iroot(c<span style="color:#f92672">+</span>i<span style="color:#f92672">*</span>n,<span style="color:#ae81ff">3</span>)[<span style="color:#ae81ff">0</span>]
        <span style="color:#66d9ef">break</span>
    i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
print flag
</code></pre></div><p>运行脚本，得到flag</p>
<p>flag：flag{25df8caf006ee5db94d48144c33b2c3b}</p>
<h2 id="0x3-basic-rsa">0x3 basic rsa</h2>
<p>应该是RSA加密算法的考察，直接看附件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">from</span> binascii <span style="color:#f92672">import</span> a2b_hex,b2a_hex

flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;*****************&#34;</span>

p <span style="color:#f92672">=</span> <span style="color:#ae81ff">262248800182277040650192055439906580479</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">262854994239322828547925595487519915551</span>

e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65533</span>
n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q


c <span style="color:#f92672">=</span> pow(int(b2a_hex(flag),<span style="color:#ae81ff">16</span>),e,n)

print c

<span style="color:#75715e"># 27565231154623519221597938803435789010285480123476977081867877272451638645710</span>
</code></pre></div><p>一个非常简单的加密脚本，简单审计一下就能得到结果。这里使用一个脚本解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">import</span> libnum

c <span style="color:#f92672">=</span> <span style="color:#ae81ff">27565231154623519221597938803435789010285480123476977081867877272451638645710</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65533</span>
p <span style="color:#f92672">=</span> <span style="color:#ae81ff">262248800182277040650192055439906580479</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">262854994239322828547925595487519915551</span>

n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)

d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
print flag
</code></pre></div><p>运行脚本，获得flag</p>
<p>flag：flag{B4by_Rs4}</p>
<h2 id="0x4-达芬奇密码">0x4 达芬奇密码</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">达芬奇一直是一个有争议的画家，科学家。。。小明为了研究他，从网上找到了名画蒙娜丽莎，一天深夜，小明突然从蒙娜丽莎背后的天空中看到了一串神秘的数字。顺带告诉小明达芬奇家窗台上有一串数字是关键。小明千里迢迢找到了这串数字，请将这个送分题做出来，亲，包邮哦（答案是一串32位十进制数字） 注意：得到的 flag 请包上 flag{} 提交
</code></pre></div><p>题目应该是和达芬奇有关系，下载附件，查看附件内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">达芬奇隐藏在蒙娜丽莎中的数字列:1 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711 
记录在达芬奇窗台口的神秘数字串:36968853882116725547342176952286
</code></pre></div><p>数字列非常像斐波那契数列，只不过是斐波那契数列进行了乱序而得到的结果。下面的密文应该是根据乱序的结果进行反向乱序得到明文，这里使用一个反乱序的脚本解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">True_c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309&#39;</span>
False_c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711&#39;</span>
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;36968853882116725547342176952286&#39;</span>
True_c <span style="color:#f92672">=</span> True_c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39; &#39;</span>)
False_c <span style="color:#f92672">=</span> False_c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39; &#39;</span>)
result <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">32</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(cipher)):
    <span style="color:#66d9ef">if</span>(i <span style="color:#f92672">==</span> <span style="color:#ae81ff">24</span>):
        index <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">else</span>:
        index <span style="color:#f92672">=</span> True_c<span style="color:#f92672">.</span>index(False_c[i])
    result[index] <span style="color:#f92672">=</span> cipher[i]
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> result:
    print(i,end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</code></pre></div><p>运行脚本，得到明文</p>
<p>37995588256861228614165223347687</p>
<p>故本题的flag：flag{37995588256861228614165223347687}</p>
<h2 id="0x5-checkln">0x5 Checkln</h2>
<p>直接下载附件，查看附件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">dikqTCpfRjA8fUBIMD5GNDkwMjNARkUwI0BFTg==
</code></pre></div><p>看样子，密文像是base64加密过的明文，首先尝试进行base64解密得到密文：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">v)L_F0&lt;}@H0&gt;F49023@FE0#@EN
</code></pre></div><p>如果对这对古典密码熟悉，看到这一段应该就可以识别出这是ROT47加密的密文，使用ROT47进行解密得到FLAG：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">GXY{Y0u_kNow_much_about_Rot}
</code></pre></div><p>成功得到flag：GXY{Y0u_kNow_much_about_Rot}</p>
<h2 id="0x6-babyrsa">0x6 BabyRSA</h2>
<p>RSA题目，直接下载附件，查看附件内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">p+q : 0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea
(p+1)(q+1) : 0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740
e : 0xe6b1bee47bd63f615c7d0a43c529d219
d : 0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5
enc_flag : 0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a
</code></pre></div><p>应该是解方程的题目，使用python的sympy库或者sagemath库进行方程求解，这里使用一个脚本就行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> sympy
<span style="color:#f92672">import</span> libnum
<span style="color:#f92672">import</span> gmpy2

sum_pq <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea</span>
phi_r <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xe6b1bee47bd63f615c7d0a43c529d219</span>
d <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5</span>
enc_flag <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a</span>
p <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;p&#39;</span>)
q <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;q&#39;</span>)
result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>solve([p<span style="color:#f92672">+</span>q<span style="color:#f92672">-</span>sum_pq,(p<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">-</span>phi_r])
q <span style="color:#f92672">=</span> int(result[<span style="color:#ae81ff">0</span>][q])
p <span style="color:#f92672">=</span> int(result[<span style="color:#ae81ff">0</span>][p])
n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
m <span style="color:#f92672">=</span> pow(enc_flag,d,n)
flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
print flag
</code></pre></div><p>运行脚本，得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{cc7490e-78ab-11e9-b422-8ba97e5da1fd}
</code></pre></div><p>flag:flag{cc7490e-78ab-11e9-b422-8ba97e5da1fd}</p>
<h2 id="0x7-rsa2">0x7 rsa2</h2>
<p>RSA题目，看看这次又有什么花样吧！直接下载附件，查看附件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">N <span style="color:#f92672">=</span> <span style="color:#ae81ff">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span>

<span style="color:#f92672">import</span> hashlib
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span> <span style="color:#f92672">+</span> hashlib<span style="color:#f92672">.</span>md5(hex(d))<span style="color:#f92672">.</span>hexdigest() <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;}&#34;</span>
</code></pre></div><p>附件是一个python程序，简单审计一下，发现e的数值有不太正常，有些过大。应该是RSA低解密指数，采用<a href="https://github.com/pablocelayes/rsa-wiener-attack">rsa-wiener-attack</a>算法可以攻击得到d，拉一些github上的rsa-wiener-attack仓库，使用一个脚本解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> RSAwienerHacker
<span style="color:#f92672">import</span> hashlib

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span>

test_d <span style="color:#f92672">=</span>  RSAwienerHacker<span style="color:#f92672">.</span>hack_RSA(e, n)
<span style="color:#66d9ef">if</span> test_d:
    d <span style="color:#f92672">=</span> test_d

flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span> <span style="color:#f92672">+</span> hashlib<span style="color:#f92672">.</span>md5(hex(d))<span style="color:#f92672">.</span>hexdigest()<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{47bf28da384590448e0b0d23909a25a4}
</code></pre></div><p>flag:flag{47bf28da384590448e0b0d23909a25a4}</p>
<h2 id="0x8-rsa5">0x8 RSA5</h2>
<p>RSA题目，看看这次又有什么有意思的变化，下载附件，查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">m <span style="color:#f92672">=</span> xxxxxxxx
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
<span style="color:#f92672">==========</span> n c <span style="color:#f92672">==========</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span>

n <span style="color:#f92672">=</span> <span style="color:#ae81ff">26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span>
</code></pre></div><p>观察附件中的数据信息，发现有很多组n，c数据，应该是广播攻击。低加密指数广播攻击，是采用欧几里得算法对多组数据进行求解。这里使用一个脚本求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">import</span> libnum

m <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>

n1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span>
c1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span>

n2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span>
c2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span>

n3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span>
c3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span>

n4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span>
c4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span>

n5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span>
c5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span>

n6 <span style="color:#f92672">=</span> <span style="color:#ae81ff">21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span>
c6 <span style="color:#f92672">=</span> <span style="color:#ae81ff">20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span>

n7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span>
c7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span>

n8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span>
c8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span>

n9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span>
c9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span>

n10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span>
c10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span>

n11 <span style="color:#f92672">=</span> <span style="color:#ae81ff">22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span>
c11 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span>

n12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span>
c12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span>

n13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span>
c13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span>

n14 <span style="color:#f92672">=</span> <span style="color:#ae81ff">27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span>
c14 <span style="color:#f92672">=</span> <span style="color:#ae81ff">3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span>

n15 <span style="color:#f92672">=</span> <span style="color:#ae81ff">27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span>
c15 <span style="color:#f92672">=</span> <span style="color:#ae81ff">14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span>

n16 <span style="color:#f92672">=</span> <span style="color:#ae81ff">25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span>
c16 <span style="color:#f92672">=</span> <span style="color:#ae81ff">17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span>

n17 <span style="color:#f92672">=</span> <span style="color:#ae81ff">23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span>
c17 <span style="color:#f92672">=</span> <span style="color:#ae81ff">10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span>

n18 <span style="color:#f92672">=</span> <span style="color:#ae81ff">19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span>
c18 <span style="color:#f92672">=</span> <span style="color:#ae81ff">3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span>

n19 <span style="color:#f92672">=</span> <span style="color:#ae81ff">19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span>
c19 <span style="color:#f92672">=</span> <span style="color:#ae81ff">6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span>

n20 <span style="color:#f92672">=</span> <span style="color:#ae81ff">26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span>
c20 <span style="color:#f92672">=</span> <span style="color:#ae81ff">386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span>

n <span style="color:#f92672">=</span> [n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17,
        n18, n19, n20]
c <span style="color:#f92672">=</span> [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17,
        c18, c19, c20]
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(n)):
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(n)):
        <span style="color:#66d9ef">if</span>(i<span style="color:#f92672">!=</span>j):
            <span style="color:#66d9ef">if</span>(gmpy2<span style="color:#f92672">.</span>gcd(n[i],n[j])<span style="color:#f92672">!=</span><span style="color:#ae81ff">1</span>):
                p <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>gcd(n[i],n[j])
                q <span style="color:#f92672">=</span> n[i] <span style="color:#f92672">//</span> p
                d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e , (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
                m <span style="color:#f92672">=</span> pow(c[i],d,n[i])

flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(int(m))
print flag
</code></pre></div><p>运行脚本，得到flag:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{abdcbe5fd94e23b3de429223ab9c2fdf}
</code></pre></div><p>flag:flag{abdcbe5fd94e23b3de429223ab9c2fdf}</p>
<h2 id="0x9-密码学的心声">0x9 密码学的心声</h2>
<p>看题目应该是挺有意思的题目，看看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">二战时期，某国军官与一个音乐家情妇相好，然而自从那时起，他屡战屡败，敌人似乎料事如神。他也有怀疑过他的情妇，但是他经过24小时观察他的情妇，发现她每天都只是作曲，然后弹奏给战地电台，为士兵们鼓气，并未有任何逾越。那么，间谍到底是谁？这张曲谱是否有猫腻？ (答案为一个明文字符串，提交获得的有意义语句通顺字符串即可) 注意：得到的 flag 请包上 flag{} 提交
</code></pre></div><p>下载附件，查看附件内容：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-8.png"><img src="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-8-723x1024.png" alt="img"></a>附件内容</p>
<p>发现，附件是一个图片，解密的提示和思维应该就藏在图片里面</p>
<p>大致分析一下，图片提供的照片，可以知道是ASCII编码，进制是八进制，八进制一般而言是三个一组，数字以八进制为一组。这样思路就非常明确了，编写Python脚本直接求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;111 114 157 166 145 123 145 143 165 162 151 164 171 126 145 162 171 115 165 143 150&#34;</span>
c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
    m <span style="color:#f92672">+=</span> chr(int(i,<span style="color:#ae81ff">8</span>))
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>m<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{ILoveSecurityVeryMuch}
</code></pre></div><p>flag:flag{ILoveSecurityVeryMuch}</p>
<h2 id="0xa-传感器">0xA 传感器</h2>
<p>直接下载附件，查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">5555555595555A65556AA696AA6666666955
这是某压力传感器无线数据包解调后但未解码的报文(hex)
  
已知其ID为0xFED31F，请继续将报文完整解码，提交hex。

提示1：曼联
</code></pre></div><p>提示是曼联，又是考察古典密码的题目，真是头疼。经过查询发现是曼彻斯特编码，在wiki百科上面找到曼彻斯特编码的相关信息：</p>
<p>在电信与数据存储中, 曼彻斯特编码（Manchester coding），又称自同步码、相位编码（phase encoding，PE），能够用信号的变化来保持发送设备和接收设备之间的同步。它用电压的变化来分辨0和1，从高电平到低电平的跳变代表1，而从低电平到高电平的跳变代表0(as per G.E.Tomas编码方式)。从高电平到低电平的跳变代表0，而从低电平到高电平的跳变代表1(as per IEEE 802.3编码方式)，下方有所展示。信号的保持不会超过一个比特位的时间间隔。即使是0或1的序列，信号也将在每个时间间隔的中间发生跳变。这种跳变将允许接收设备的时钟与发送设备的时钟保持一致。[1]</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image.png" alt="img"></p>
<p>根据曼彻斯特编码的原理进行归纳，得到一个异或数据表</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-9.png"><img src="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-9.png" alt="img"></a></p>
<p>这个异或数据表应该就是曼彻斯特编码的具体原理，根据这个原理编写python脚本进行解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;5555555595555A65556AA696AA6666666955&#39;</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypto</span>(cipher):
    tmp<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(cipher)):
        a<span style="color:#f92672">=</span>bin(eval(<span style="color:#e6db74">&#39;0x&#39;</span><span style="color:#f92672">+</span>cipher[i]))[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>zfill(<span style="color:#ae81ff">4</span>)
        tmp<span style="color:#f92672">=</span>tmp<span style="color:#f92672">+</span>a[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span>a[<span style="color:#ae81ff">3</span>]
<span style="color:#75715e">#        print(tmp)</span>
    plain <span style="color:#f92672">=</span> [ hex(int(tmp[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>][::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">2</span>))[<span style="color:#ae81ff">2</span>:] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,len(tmp),<span style="color:#ae81ff">8</span>)]
    m <span style="color:#f92672">=</span>  <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(plain)<span style="color:#f92672">.</span>upper()
    <span style="color:#66d9ef">return</span> m
<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>decrypto(cipher)<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
    print flag
</code></pre></div><p>运行脚本，得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{FFFFFED31F645055F9}
</code></pre></div><p>flag:flag{FFFFFED31F645055F9}</p>
<h2 id="0xb-这是base">0xB 这是base？</h2>
<p>应该是考察base的，直接下载附件查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">dict:{0: &#39;J&#39;, 1: &#39;K&#39;, 2: &#39;L&#39;, 3: &#39;M&#39;, 4: &#39;N&#39;, 5: &#39;O&#39;, 6: &#39;x&#39;, 7: &#39;y&#39;, 8: &#39;U&#39;, 9: &#39;V&#39;, 10: &#39;z&#39;, 11: &#39;A&#39;, 12: &#39;B&#39;, 13: &#39;C&#39;, 14: &#39;D&#39;, 15: &#39;E&#39;, 16: &#39;F&#39;, 17: &#39;G&#39;, 18: &#39;H&#39;, 19: &#39;7&#39;, 20: &#39;8&#39;, 21: &#39;9&#39;, 22: &#39;P&#39;, 23: &#39;Q&#39;, 24: &#39;I&#39;, 25: &#39;a&#39;, 26: &#39;b&#39;, 27: &#39;c&#39;, 28: &#39;d&#39;, 29: &#39;e&#39;, 30: &#39;f&#39;, 31: &#39;g&#39;, 32: &#39;h&#39;, 33: &#39;i&#39;, 34: &#39;j&#39;, 35: &#39;k&#39;, 36: &#39;l&#39;, 37: &#39;m&#39;, 38: &#39;W&#39;, 39: &#39;X&#39;, 40: &#39;Y&#39;, 41: &#39;Z&#39;, 42: &#39;0&#39;, 43: &#39;1&#39;, 44: &#39;2&#39;, 45: &#39;3&#39;, 46: &#39;4&#39;, 47: &#39;5&#39;, 48: &#39;6&#39;, 49: &#39;R&#39;, 50: &#39;S&#39;, 51: &#39;T&#39;, 52: &#39;n&#39;, 53: &#39;o&#39;, 54: &#39;p&#39;, 55: &#39;q&#39;, 56: &#39;r&#39;, 57: &#39;s&#39;, 58: &#39;t&#39;, 59: &#39;u&#39;, 60: &#39;v&#39;, 61: &#39;w&#39;, 62: &#39;+&#39;, 63: &#39;/&#39;, 64: &#39;=&#39;}

chipertext:
FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw
</code></pre></div><p>给出了base64的编码表，但不是标准的base64编码表，首先需要了解base标准的编码表：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-10.png"><img src="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-10.png" alt="img"></a>标准的base64表</p>
<p>给出的字典数据和标准的base64表有很大的出出入，需要python脚本简单处理一下转换为标准的base64编码格式，然后再使用base64进行解密。python脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64
file_dict <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>: <span style="color:#e6db74">&#39;J&#39;</span>, <span style="color:#ae81ff">1</span>: <span style="color:#e6db74">&#39;K&#39;</span>, <span style="color:#ae81ff">2</span>: <span style="color:#e6db74">&#39;L&#39;</span>, <span style="color:#ae81ff">3</span>: <span style="color:#e6db74">&#39;M&#39;</span>, <span style="color:#ae81ff">4</span>: <span style="color:#e6db74">&#39;N&#39;</span>, <span style="color:#ae81ff">5</span>: <span style="color:#e6db74">&#39;O&#39;</span>, <span style="color:#ae81ff">6</span>: <span style="color:#e6db74">&#39;x&#39;</span>, <span style="color:#ae81ff">7</span>: <span style="color:#e6db74">&#39;y&#39;</span>, <span style="color:#ae81ff">8</span>: <span style="color:#e6db74">&#39;U&#39;</span>, <span style="color:#ae81ff">9</span>: <span style="color:#e6db74">&#39;V&#39;</span>, <span style="color:#ae81ff">10</span>: <span style="color:#e6db74">&#39;z&#39;</span>, <span style="color:#ae81ff">11</span>: <span style="color:#e6db74">&#39;A&#39;</span>, <span style="color:#ae81ff">12</span>: <span style="color:#e6db74">&#39;B&#39;</span>, <span style="color:#ae81ff">13</span>: <span style="color:#e6db74">&#39;C&#39;</span>, <span style="color:#ae81ff">14</span>: <span style="color:#e6db74">&#39;D&#39;</span>, <span style="color:#ae81ff">15</span>: <span style="color:#e6db74">&#39;E&#39;</span>, <span style="color:#ae81ff">16</span>: <span style="color:#e6db74">&#39;F&#39;</span>, <span style="color:#ae81ff">17</span>: <span style="color:#e6db74">&#39;G&#39;</span>, <span style="color:#ae81ff">18</span>: <span style="color:#e6db74">&#39;H&#39;</span>, <span style="color:#ae81ff">19</span>: <span style="color:#e6db74">&#39;7&#39;</span>, <span style="color:#ae81ff">20</span>: <span style="color:#e6db74">&#39;8&#39;</span>, <span style="color:#ae81ff">21</span>: <span style="color:#e6db74">&#39;9&#39;</span>, <span style="color:#ae81ff">22</span>: <span style="color:#e6db74">&#39;P&#39;</span>, <span style="color:#ae81ff">23</span>: <span style="color:#e6db74">&#39;Q&#39;</span>, <span style="color:#ae81ff">24</span>: <span style="color:#e6db74">&#39;I&#39;</span>, <span style="color:#ae81ff">25</span>: <span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#ae81ff">26</span>: <span style="color:#e6db74">&#39;b&#39;</span>, <span style="color:#ae81ff">27</span>: <span style="color:#e6db74">&#39;c&#39;</span>, <span style="color:#ae81ff">28</span>: <span style="color:#e6db74">&#39;d&#39;</span>, <span style="color:#ae81ff">29</span>: <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#ae81ff">30</span>: <span style="color:#e6db74">&#39;f&#39;</span>, <span style="color:#ae81ff">31</span>: <span style="color:#e6db74">&#39;g&#39;</span>, <span style="color:#ae81ff">32</span>: <span style="color:#e6db74">&#39;h&#39;</span>, <span style="color:#ae81ff">33</span>: <span style="color:#e6db74">&#39;i&#39;</span>, <span style="color:#ae81ff">34</span>: <span style="color:#e6db74">&#39;j&#39;</span>, <span style="color:#ae81ff">35</span>: <span style="color:#e6db74">&#39;k&#39;</span>, <span style="color:#ae81ff">36</span>: <span style="color:#e6db74">&#39;l&#39;</span>, <span style="color:#ae81ff">37</span>: <span style="color:#e6db74">&#39;m&#39;</span>, <span style="color:#ae81ff">38</span>: <span style="color:#e6db74">&#39;W&#39;</span>, <span style="color:#ae81ff">39</span>: <span style="color:#e6db74">&#39;X&#39;</span>, <span style="color:#ae81ff">40</span>: <span style="color:#e6db74">&#39;Y&#39;</span>, <span style="color:#ae81ff">41</span>: <span style="color:#e6db74">&#39;Z&#39;</span>, <span style="color:#ae81ff">42</span>: <span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#ae81ff">43</span>: <span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#ae81ff">44</span>: <span style="color:#e6db74">&#39;2&#39;</span>, <span style="color:#ae81ff">45</span>: <span style="color:#e6db74">&#39;3&#39;</span>, <span style="color:#ae81ff">46</span>: <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#ae81ff">47</span>: <span style="color:#e6db74">&#39;5&#39;</span>, <span style="color:#ae81ff">48</span>: <span style="color:#e6db74">&#39;6&#39;</span>, <span style="color:#ae81ff">49</span>: <span style="color:#e6db74">&#39;R&#39;</span>, <span style="color:#ae81ff">50</span>: <span style="color:#e6db74">&#39;S&#39;</span>, <span style="color:#ae81ff">51</span>: <span style="color:#e6db74">&#39;T&#39;</span>, <span style="color:#ae81ff">52</span>: <span style="color:#e6db74">&#39;n&#39;</span>, <span style="color:#ae81ff">53</span>: <span style="color:#e6db74">&#39;o&#39;</span>, <span style="color:#ae81ff">54</span>: <span style="color:#e6db74">&#39;p&#39;</span>, <span style="color:#ae81ff">55</span>: <span style="color:#e6db74">&#39;q&#39;</span>, <span style="color:#ae81ff">56</span>: <span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#ae81ff">57</span>: <span style="color:#e6db74">&#39;s&#39;</span>, <span style="color:#ae81ff">58</span>: <span style="color:#e6db74">&#39;t&#39;</span>, <span style="color:#ae81ff">59</span>: <span style="color:#e6db74">&#39;u&#39;</span>, <span style="color:#ae81ff">60</span>: <span style="color:#e6db74">&#39;v&#39;</span>, <span style="color:#ae81ff">61</span>: <span style="color:#e6db74">&#39;w&#39;</span>, <span style="color:#ae81ff">62</span>: <span style="color:#e6db74">&#39;+&#39;</span>, <span style="color:#ae81ff">63</span>: <span style="color:#e6db74">&#39;/&#39;</span>, <span style="color:#ae81ff">64</span>: <span style="color:#e6db74">&#39;=&#39;</span>}
base64_dict <span style="color:#f92672">=</span>{}
index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> (range(<span style="color:#ae81ff">65</span>,<span style="color:#ae81ff">91</span>) <span style="color:#f92672">+</span> range(<span style="color:#ae81ff">97</span>,<span style="color:#ae81ff">123</span>)<span style="color:#f92672">+</span>range(<span style="color:#ae81ff">48</span>,<span style="color:#ae81ff">58</span>)<span style="color:#f92672">+</span>range(<span style="color:#ae81ff">43</span>,<span style="color:#ae81ff">44</span>)<span style="color:#f92672">+</span>range(<span style="color:#ae81ff">47</span>,<span style="color:#ae81ff">48</span>)):
    base64_dict[index] <span style="color:#f92672">=</span> chr(i)
    index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

chipertext <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw&#34;</span>
m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(chipertext)):
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">64</span>):
        <span style="color:#66d9ef">if</span>(file_dict[j] <span style="color:#f92672">==</span> chipertext[i]):
            m <span style="color:#f92672">+=</span> base64_dict[j]

flag <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(m)
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">BJD{D0_Y0u_kNoW_Th1s_b4se_map}
</code></pre></div><p>flag:flag{D0_Y0u_kNoW_Th1s_b4se_map}</p>
<h2 id="0xc-rot">0xC rot</h2>
<p>直接下载附件，查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">破解下面的密文：

83 89 78 84 45 86 96 45 115 121 110 116 136 132 132 132 108 128 117 118 134 110 123 111 110 127 108 112 124 122 108 118 128 108 131 114 127 134 108 116 124 124 113 108 76 76 76 76 138 23 90 81 66 71 64 69 114 65 112 64 66 63 69 61 70 114 62 66 61 62 69 67 70 63 61 110 110 112 64 68 62 70 61 112 111 112

flag格式flag{}
</code></pre></div><p>看密文应该是ASCII码，结合题目应该是rot加密，应该是比较常规的rot13加密需要对数据进行-13操作，因为观察一下就可以非常清楚地发现有些ASCII数字超过123，可显示字符，因此可以推断是rot13加密。这里先用一个脚本处理一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;83 89 78 84 45 86 96 45 115 121 110 116 136 132 132 132 108 128 117 118 134 110 123 111 110 127 108 112 124 122 108 118 128 108 131 114 127 134 108 116 124 124 113 108 76 76 76 76 138 23 90 81 66 71 64 69 114 65 112 64 66 63 69 61 70 114 62 66 61 62 69 67 70 63 61 110 110 112 64 68 62 70 61 112 111 112&#34;</span>
c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
c_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
    c_str <span style="color:#f92672">+=</span> chr(int(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>)

print c_str
</code></pre></div><p>运行脚本，得到一个残缺的flag和MD5信息：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">FLAG IS flag{www_shiyanbar_com_is_very_good_????}
MD5:38e4c352809e150186920aac37190cbc
</code></pre></div><p>MD5值应该是校验flag信息的，需要对MD5进行爆破来得到真实的flag，这里使用一个总的python脚本来求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> hashlib
c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;83 89 78 84 45 86 96 45 115 121 110 116 136 132 132 132 108 128 117 118 134 110 123 111 110 127 108 112 124 122 108 118 128 108 131 114 127 134 108 116 124 124 113 108 76 76 76 76 138 23 90 81 66 71 64 69 114 65 112 64 66 63 69 61 70 114 62 66 61 62 69 67 70 63 61 110 110 112 64 68 62 70 61 112 111 112&#34;</span>
c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
c_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
    c_str <span style="color:#f92672">+=</span> chr(int(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>)

<span style="color:#75715e"># print c_str</span>
<span style="color:#75715e"># print c_str.find(&#34;{&#34;)</span>
<span style="color:#75715e"># print c_str.find(&#34;}&#34;)</span>
<span style="color:#75715e"># print c_str.find(&#34;3&#34;)</span>
little_flag <span style="color:#f92672">=</span> c_str[<span style="color:#ae81ff">8</span>:<span style="color:#ae81ff">49</span>]
flag_md5 <span style="color:#f92672">=</span> c_str[<span style="color:#ae81ff">54</span>:]
flag_str <span style="color:#f92672">=</span> little_flag[:<span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>]
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#75715e"># print flag_str</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">49</span>,<span style="color:#ae81ff">123</span>):
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">49</span>,<span style="color:#ae81ff">123</span>):
        <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">49</span>,<span style="color:#ae81ff">123</span>):
            <span style="color:#66d9ef">for</span> l <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">49</span>,<span style="color:#ae81ff">123</span>):
                result <span style="color:#f92672">=</span> flag_str <span style="color:#f92672">+</span> chr(i) <span style="color:#f92672">+</span> chr(j) <span style="color:#f92672">+</span> chr(k) <span style="color:#f92672">+</span> chr(l) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;}&#34;</span>
                <span style="color:#66d9ef">if</span> hashlib<span style="color:#f92672">.</span>md5(result)<span style="color:#f92672">.</span>hexdigest() <span style="color:#f92672">==</span> flag_md5:
                    flag <span style="color:#f92672">=</span> result
                    <span style="color:#66d9ef">break</span>
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{www_shiyanbar_com_is_very_good_@8Mu}
</code></pre></div><p>flag:flag{www_shiyanbar_com_is_very_good_@8Mu}</p>
<h2 id="0xd-keyboard">0xD Keyboard</h2>
<p>会是键盘密码吗？下载附件，瞧一瞧吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee
</code></pre></div><p>果真是键盘密码，出现的字符都是26键键盘上面那一排对应的字符，而字符对应0-9的数字正好又对应着九键键盘的数字，而出现的次数代表九键键盘一个键的第几个字符，这样解密思路就非常流畅了。</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/l93LrR.png" alt="img"></p>
<p>根据图示内容编写一个python脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">str_26 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pqwertyuio&#34;</span>
str_9 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;abc def ghi jkl mno pqrs tuv wxyz&#34;</span>

list_9 <span style="color:#f92672">=</span> str_9<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
dict_26 <span style="color:#f92672">=</span> {}
dict_9 <span style="color:#f92672">=</span> {}

index_26 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
index_9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> str_26:
    dict_26[index_26] <span style="color:#f92672">=</span> i
    index_26 <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
    <span style="color:#66d9ef">if</span> i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span>:
        dict_9[i] <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>;
    <span style="color:#66d9ef">else</span>:
        dict_9[i] <span style="color:#f92672">=</span> list_9[index_9]
        index_9 <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

<span style="color:#75715e"># print dict_26</span>
<span style="color:#75715e"># print dict_9</span>

c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee&#34;</span>
c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
result <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
        <span style="color:#66d9ef">if</span> i[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> dict_26[j]:
            result <span style="color:#f92672">+=</span> dict_9[j][len(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span> result <span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
print flag
</code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">flag{youaresosmartthatthisisjustapieceofcake}
</code></pre></div><p>flag:flag{youaresosmartthatthisisjustapieceofcake}</p>
<h2 id="0xe-这是什么">0xE 这是什么</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">小明是一个软件专业的高材生，但是老师布置的这次的作业似乎不怎么靠谱，因为他们老师以前是学物理的！喜欢乱七八糟命名文件，还喜欢奇奇怪怪的编码。你快帮小明看一下这题，小明准备好了一箱子辣条。 注意：得到的 flag 请包上 flag{} 提交
</code></pre></div><p>题目描述可以看到明显的提示：喜欢乱七八糟命名文件，还喜欢奇奇怪怪的编码。</p>
<p>这道题目应该考察的是奇奇怪怪的编码，下载附件，发现附件是一个apk文件，使用file命令简单查看一下apk文件的类型：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">94f5b952-3710-4609-ab6f-bc11609fdc67.apk: Composite Document File V2 Document, Little Endian, Os: Windows, Version 6.1, Code page: 936, Author: Administrator, Template: Normal.dotm, Last Saved By: Administrator, Revision Number: 5, Name of Creating Application: Microsoft Office Word, Total Editing Time: 07:00, Create Time/Date: Tue Dec 30 03:15:00 2014, Last Saved Time/Date: Tue Dec 30 03:42:00 2014, Number of Pages: 3, Number of Words: 1921, Number of Characters: 10950, Security: 0
</code></pre></div><p>发现文件应该是一个document文件，可以修改成txt文件查看文件内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">邢唷??                &gt;  ?	               H          J      ?    G   欹? €	  餜?             U:   bjbj肴肴                   8@  墷  墷  G2      
                                                          ?     P      P  ?      ?      ?      ?      ?                 ?      ?      ?  8   ?     ?     ?      N  l  ?      ?      ?      ?      ?      1      1      1      ?     ?      ?      ?      ?      ?      ?  $   ?  ?    ^   ?                     ?      1                      1      1      1      1      ?              ?      ?      ?              ?  4       ?      ?      ?      1  X   ?      ?      ?      ?      ?              ?                                                      1      ?              ?              ?                                                                              ?      ?          癴櫄??        ?      ?      ?              ?       0   N      ?      ?      ?      ?      ?                                                                              ?              ?      ?  0   1      1      ?      1      1                                      1      1      1      ?      ?                                      ?                                      1      1      1      N      1      1      1      1                                                                                          ?      1      1      1      1      1      1                                                              1      1      1      P    _  :     	                                                                                                                                                                                                                                                                                                                                                                                                                                    [][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+!+[]]]+(![]+[])[+!+[]]+[+[]]+[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+[]]+([][[]]+[])[!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]]+[+[]]+(+(+!+[]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+[+[]])+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[+[]]+[!+[]+!+[]]+[+[]]+[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][[]]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(![]+[])[+!+[]]+[!+[]+!+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][[]]+[])[!+[]+!+[]])+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()










                                                                                                                                                                                                                                                                                                                                                                                                                                              F:  G:  H:  J:  K:  M:  N:  P:  Q:  T:  U:  赕赕赕赕?                                                                                                                                                                                                                                                                                                                                                                                                                 h韖?  j    h韖? Uho`? h??  ho`? ho`?    G:  I:  J:  L:  M:  O:  P:  R:  S:  T:  U:  ?            ?            ?            ?            ?            ?            ?            ?            ?            ?            ?                                                                                                                                                                                                                                                                                                                         gd	o    gdo`?  6 1?2P :p?? 皞. 捌A!?&#34;?#悹$悹%?  癝班惄j              ?   ?   ?   ?   ?   ?   ?   ?   ?   6  6  6  6  6  6  6  6  6  v  v  v  v  v  v  v  v  v  6  6  6  6  6  6  &gt;  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  ?   6  6     6  6  6  6  6  6  6  6  ?   6  6  6  6  6  6  6  6  6  6  6  6  h  H  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  ?  6  2     ?  ?  ?  ?          0  @  P  `  p  €  ?  ?  ?  ?  ?       2  (  ?  ?     0  @  P  `  p  €  ?  ?  ?  ?  ?          0  @  P  `  p  €  ?  ?  ?  ?  ?          0  @  P  `  p  €  ?  ?  ?  ?  ?          0  @  P  `  p  €  ?  ?  ?  ?  ?          0  @  P  `  p  €  ?  ?  ?  ?  ?          0  @  P  `  p  €  ?  8  X  ?      V  ~      OJ PJ QJ _HmH	nHsH	tH    J  `? J   ??    ck噀     $1$ a$   CJ KH _HaJ mH	nHsH	tH                  $ A ?? $ 
        貫祂=刉[SO    B i ?? B       0 nf恏?h   ?  4? 
l 4?   a?        k ??    
      0 鄀Rh?        N   ? N 
 	o 0 u?w  &#39;  $
? 9r &amp;d G$ P?    a$  CJ aJ 2 ?? 2  	o 0 u?w  C h a r    CJ KH aJ &lt;    &lt; 
 	o 0 u??    $ 
? 9r G$ a$  CJ aJ 2 ?? !2  	o 0 u?? C h a r    CJ KH aJ PK     ! 倞??        [Content_Types].xml瑧薺?E鲄卸豶?ヘ微Iw},?浔-j弰4	蛇w旄P?-t#b螜{U畯銧擉T閁^h卍}悒)蛔*1P?	揯鬃W孱0)櫐T闉9&lt;搇?ぼ$yi}佸;纞@囨?顚跄H滖男u?D谞z內/0娗盃瘥?$€?X3aZ⒁锣,癉0j~?叨蝏沩~i&gt;?赝3縗`???[?G殁??跼k.搒粣..椃碼婵?   PK     ! ブх?   6     _rels/.rels剰蟡?囷吔冄}Q颐%v/C/ ?h&#34;?脎O?
?劋秣?孂釘?毆免C?薶醰=?偵叅?[xp啠{鄣_糚眩&lt;???堎O糝瓸d焉襃E?b$q_?槥?L吁R?`畯ㄉ趁0虨O??錏n7擫i鋌〃/鉙綈╡械根铸   PK     ! ky??   ?      theme/theme/themeManager.xml蘉
?@醹愘7c?Eb菜? C?A菭覠圩邈?芜諞K
Y,?
奺?埛饇,?ㄚH?l崆骈x纱?逫萻Q}#諓叚递 值+??較?j=婫W栌?釫?&amp;
8?   PK     ! ?m?  Q     theme/theme/theme1.xml靁MoE??F{oc&#39;vGu?h覨盵糟x=逎zvg53N?j廐H垈z?饴昛	$石I)*E阓酀欇鮊?IA?裎&gt;秣羌3緓镹男&gt;掤搁U蟇&lt;Db?i4??I呫!f&lt;&amp;MoJi泯?鈛拡 爮?nz生覓鬭梭&lt;!1?qa?X
| |#洞┈.E樒妐l瘡F?栀峡鉴鎭窇q?+?|&amp;z?qHv8甹劀?h肠倖鼱O?1,糷z篑?..狨攬??寒t)羛糽d奰?璿k?[9`j组t跐j蜗 帮儱V?蟌w蕏@鲭&lt;飗┕???璙Hu盠
葉嶙*蚭o@_熋譠涰霆? 媉澝w/4Vk.迉BF泷Z篡M圭?g邾?€疷R?賽g?1獗Z攌就E 劝?R觿尠i芷袬P?鄒?o鞉/鐤?$}A蒸&gt;L0斈屵呖z?迃rx鳔脅?稔h9T?奣/魁煜???鍃Y?雒&#39;蟸?S琦棌~蜩鶅O_|w??馉镉圚t??乤?d NG?1-Rl苼?諶J鴚T锠疢1Kｃ柩&#34;?o
he浪撣幝絇L-憒%??绗臙?甴Y7?qP.L姼=岟薲穛炷?I爋fi??墸?帽?墘B?Rb?J款P_p蒅
茛▍i㎏鷗郿訉h汧梚櫷o?;7Q嫵2染媱珼?a?/銐翾?嶺厌W?藬霱卂膗H剄?)薶?胺?:Vi豾?r態裶汐橌&#34;r嫃?帓2l徠a麃C奲此U|嚮!8^顩???軤仯?A魶壭眲V韙鄨?讕厏ls囔?4犁_=,涩返o聻TV	跥陲&#34;苎鎎H唼灮???熯x薜躻-戏蹺鮸褾;氕衯踯`嘼3&#34;G&#39;?e昮H柊O话ㄩ恬愪&#39;?劘i_wp伬?	??靺8?魂i&amp;丩Y%铝?楎謝視=瞩伭?壵阱綔?r6f?提3储淭厥厰)橗:陋Z?K?誏玸ゅ&amp;C鏜兣軟0€ [浪玴@注醏?j扣?媺耏咹唜H?i荤cT5A蕆跑@顢腍驇馴AZC硙i&#39;	RQm伕,zo?僩Q襲{?Y,Nψ??溷ら嵿L_??跆嘫 7C?6韽-fS宄h62密&#34;5咍麥罭H凾[X?5太4X?Y龡豚殖2纅鷎h辈绅痠~tCKF#猥b?+趙?m鑵?4`眹!?U翞!昿5a:倊€{4韒笫m蝘?o?萎c杽8m泛D矹秔S枪姗?豓1铘?#S奿?3E?pS??疳W`る甸q](	┻08樲?w别?n撏A鲺[s枃)k8皓= Aa?R?d趻删c楿咏瞬d)#換ueb?恾满?捷C!ず?i0福&gt;?4魫S?鋥?z虮?F箎?4?sKvUKo瘸椒h垀1砵YU€奥V蠬塔5U8錠k;譁潘鮈9堚寂皹D	荀 ??*|FL?迪鳡?A3兇伂&gt;g?类dm2iV值殍そ杕謌&lt;殒r?[kv抶熞蠃p鎶sj?潩z伛礭[鑚堨?叆Qv??縤u鈨??高?%M2羙J描?u 舘%覎?    PK     ! 
褠煻     &#39;   theme/theme/_rels/themeManager.xml.rels剰M
?匃倃oo雍?輬协?勪5
6?$Q祉
?.嘺緳i粭澤c2?h?:闀q毩m胳嶡RN壻;d癭値o7?g慘(M&amp;$R(.1榬&#39;J摐袏T鶂?V?＆A然蠬鱱}狇?|?絙{? 朠?除8塯/]As賲(⑵锑#洩L蔥汉倪    PK-      ! 倞??                      [Content_Types].xmlPK-      ! ブх?   6               +  _rels/.relsPK-      ! ky??   ?                  theme/theme/themeManager.xmlPK-      ! ?m?  Q               ?  theme/theme/theme1.xmlPK-      ! 
褠煻     &#39;             ?  theme/theme/_rels/themeManager.xml.relsPK      ]  ?    &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; standalone=&#34;yes&#34;?&gt;
&lt;a:clrMap xmlns:a=&#34;http://schemas.openxmlformats.org/drawingml/2006/main&#34; bg1=&#34;lt1&#34; tx1=&#34;dk1&#34; bg2=&#34;lt2&#34; tx2=&#34;dk2&#34; accent1=&#34;accent1&#34; accent2=&#34;accent2&#34; accent3=&#34;accent3&#34; accent4=&#34;accent4&#34; accent5=&#34;accent5&#34; accent6=&#34;accent6&#34; hlink=&#34;hlink&#34; folHlink=&#34;folHlink&#34;/&gt;    U2    @                 	                                 U:        U:       餈     ?                          @ ?        €€€ ?    饞     ?         ?    ?    	?                    
?          養    
?        S ?   ?   ?       	   ?    ?       餒    ?          ?    ?    	?                    
?             ?   G2  G2  I2  I2  J2  J2  L2  M2  O2  P2  R2  S2  V2                         ?          両F 	o ?? o`? 漼? 韖?     G2  I2         @€ F2  F2   (?  F2      F2             U2  `   @      U n k n o w n                                   G?  * 郃x ?             T i m e s   N e w   R o m a n   5?                   €    S y m b o l   3.?  * 郈x ?             A r i a l   7.?   ?? @       ?      C a l i b r i   ;??      ?             媅SO  S i m S u n   A?   ?$ B        ?      C a m b r i a   M a t h      1?  ?  h    向,G牝,G        ?  ?       怺   ?  ?      [       q       ?  ! % ) , . : ; &gt; ? ] } ? ? ? ? ??    &amp; 0 2 3 : !6&#34;000	00
0000006??兀﨑?	=@]^?                                                                            $ ( [ { ? ? ?   0
0000000Y?;[??                                                ?? ? 個     d      .2  .2                                                                        2?                              HX    	?$P  ?  両F    2                     !                             x   x           ?                 
 A d m i n i s t r a t o r 
 A d m i n i s t r a t o r                                                                                                                                                                                                                                                                                                                                                           ?                      鄥燆鵒h珣 +&#39;迟0   h        ?      ?      ?      ?      ?      ?      ?   	   ?        
   $     0  
   &lt;     H     P     X     `     ?                            Administrator                   Normal.dotm       Administrator         5         Microsoft Office Word   @    闢?    @    Rに??@    ?戔#?         ?     ?                      胀諟.摋 +,0   ?   
      X      `      l      t      |      ?      ?      ?      ?      ?      ?               [            .2                                                     	   
         
                                                             ?&#34;   #   $   %   &amp;   &#39;   (   ?*   +   ,   -   .   /   0   1   2   3   4   5   6   ?8   9   :   ;   &lt;   =   &gt;   ?@   A   B   C   D   E   F   ??I   ???R o o t   E n t r y                                                 	     ?      F            P氣#?K   €       D a t a                                                         
                                     !          1 T a b l e                                                                                                )   ?      W o r d D o c u m e n t                                                                                        8@       S u m m a r y I n f o r m a t i o n                           (                                     7           D o c u m e n t S u m m a r y I n f o r m a t i o n           8                                        ?           C o m p O b j                                                                                           e                                                                                                                              ? ?
  	     ?      F#   Microsoft Office Word 97-2003 文档 
   MSWordDoc     ?瞦                                                                                                                                                                                                                                                                                                                                                                                                                                       
</code></pre></div><p>发现文件中间有一堆奇奇怪怪的编码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]][([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]((<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]()[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>(<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]))[(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]](<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]])<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]][([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]((<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>(<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]))[(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]](<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]])()([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]][([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]((<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>(<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]))[(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]](<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]])()(([]<span style="color:#f92672">+</span>[])[([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]]()[<span style="color:#f92672">+</span>[]])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]])<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]()[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]])()
</code></pre></div><p>应该可以非常容易地看出这种编码格式是JSFuck编码，可以去J<a href="http://www.jsfuck.com/">SFuck官方网站</a>进行解密：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-11.png"><img src="/images/BUUCTF-CRYPTO-%5B33-48%5D_writeup/image-11-1024x305.png" alt="img"></a></p>
<p>成功拿到flag，flag：flag{a0448fd730b62c13ca80200c4529daa2}</p>
<h2 id="0xf-childrsa">0xF childRSA</h2>
<p>RSA题目，有趣，直接下载附件，查看附件内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> random <span style="color:#f92672">import</span> choice
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> isPrime, sieve_base <span style="color:#66d9ef">as</span> primes
<span style="color:#f92672">from</span> flag <span style="color:#f92672">import</span> flag


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getPrime</span>(bits):
    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
        n <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
        <span style="color:#66d9ef">while</span> n<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">&lt;</span> bits:
            n <span style="color:#f92672">*=</span> choice(primes)
        <span style="color:#66d9ef">if</span> isPrime(n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
            <span style="color:#66d9ef">return</span> n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>

e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
m <span style="color:#f92672">=</span> int<span style="color:#f92672">.</span>from_bytes(flag<span style="color:#f92672">.</span>encode(), <span style="color:#e6db74">&#39;big&#39;</span>)
p, q <span style="color:#f92672">=</span> [getPrime(<span style="color:#ae81ff">2048</span>) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>)]
n <span style="color:#f92672">=</span> p <span style="color:#f92672">*</span> q
c <span style="color:#f92672">=</span> pow(m, e, n)

<span style="color:#75715e"># n = 32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513</span>
<span style="color:#75715e"># c = 26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108</span>
</code></pre></div><p>发现附件文件是一个python程序，可以看到rsa加密算法的具体细节，可以看到一个关键函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getPrime</span>(bits):
    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
        n <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
        <span style="color:#66d9ef">while</span> n<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">&lt;</span> bits:
            n <span style="color:#f92672">*=</span> choice(primes)
        <span style="color:#66d9ef">if</span> isPrime(n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
            <span style="color:#66d9ef">return</span> n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</code></pre></div><p>对函数进行审计发现大素数生成的细节并不是很清晰，需要对Crypto.Util.number库的sieve_base模块进行检索，来获取更多的信息。经过查询发现，sieve_base模块是一个前10000个素数的素数表，可以节约素数生成的时间。使用<a href="https://www.wolframalpha.com/">数学工具</a>查询第10000个素数是104729，但是知道这个好像也没什么用的样子。仅仅知道p和q是生成算法是由小于104729的数随机生成的。这里需要引入一个smooth number的概念：[3]</p>
<p>光滑数（smooth number），或译脆数，是一个可以约数分解为小素数乘积的正整数。光滑数一词是是伦纳德·阿德曼所提出。光滑数在以约数分解为基础的密码学中扮演重要角色。[2]</p>
<p>现在有了两个材料，没有工具，要想解决这道题目，还需要有个工具来处理，费马小定理。这道题目主要是在考察大数分解的方法——Pollard&rsquo;s p-1 method，这个大数分解方法非常巧妙，其数学证明也非常优美。回到题目来，现在我们有这些信息，该如何处理这道题目呢？这里先利用已有的信息进行简单的数学演绎：</p>
<p>首先来康康费马小定理：</p>
<p>$$
a^{p-1} \equiv 1 \quad (\text{mod} p)
$$</p>
<p>也就是说，指数那边每增加( p-1 ) ，其结果仍然不变。指数以( p-1 ) 为一个循环。</p>
<p>我们将其变形一下：</p>
<p>$$
a^{p-1} – 1 \equiv 0 \quad (\text{mod} p)
$$</p>
<p>模p同余0，也就是说( a^{p-1} – 1 ) 是 ( p ) 的倍数。将同余式改写为等式：</p>
<p>$$
a^{t \times (p-1)} – 1 = k\times p
$$</p>
<blockquote>
<p>其中 $t, k$ 是两个整数。</p>
</blockquote>
<p>如果指数( exp )是 ( p-1 ) 的倍数，那么( a^{exp} – 1 )就会是 ( p ) 的倍数。</p>
<blockquote>
<p>上面的( p )均指某一个质数，而非( N=pq )中的( p )</p>
</blockquote>
<p>这里很关键。</p>
<p>如果我们能够找到一个指数( L )，使得对于某一个底数( a )，( a^{L} – 1 ) 是( p )的倍数，但不是( q )的倍数。</p>
<p>这时，我们只要去计算
$$
gcd(a^{L}-1, N)
$$
得到的结果，必定是( p )。也就是说，我们成功地分解了( N )。</p>
<p>那么该怎么去寻找这个( L )呢，这个时候就需要用到光滑数的概念了，需要使用一下光滑数这个不错的材料来进行求解：</p>
<p>对于每一个$n = 2, 3, 4, …$，我们任意选择一个底数$a$（事实上，我们可以简单地选择为2），并计算
$$
gcd(a^{n!-1}, N)
$$</p>
<p>如果结果落在1和( N  ）中间，便可成功进行求解。</p>
<p>现在根据上述算法原理编写python脚本进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> sieve_base <span style="color:#66d9ef">as</span> primes
<span style="color:#f92672">import</span> gmpy2
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108</span>
t<span style="color:#f92672">=</span>pow(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">2048</span>)
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
k<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10000</span>):
	k<span style="color:#f92672">=</span>pow(k,primes[i],n)
	<span style="color:#66d9ef">if</span>(k<span style="color:#f92672">&gt;</span>t):
		<span style="color:#66d9ef">if</span>(i<span style="color:#f92672">%</span><span style="color:#ae81ff">15</span><span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>):
			<span style="color:#66d9ef">if</span>(gmpy2<span style="color:#f92672">.</span>gcd(k<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,n)<span style="color:#f92672">!=</span><span style="color:#ae81ff">1</span>):
				print(gmpy2<span style="color:#f92672">.</span>gcd(k<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,n))
				<span style="color:#66d9ef">break</span>
p<span style="color:#f92672">=</span>gmpy2<span style="color:#f92672">.</span>gcd(k<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,n)
q<span style="color:#f92672">=</span>n<span style="color:#f92672">//</span>p
phi<span style="color:#f92672">=</span>(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d<span style="color:#f92672">=</span>gmpy2<span style="color:#f92672">.</span>invert(e,phi)
m<span style="color:#f92672">=</span>pow(c,d,n)
flag<span style="color:#f92672">=</span>hex(m)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>)
print(flag)
</code></pre></div><p>运行脚本，可能需要等一段时间，大致7s就能跑出来flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">NCTF{Th3r3_ar3_1ns3cure_RSA_m0duli_7hat_at_f1rst_gl4nce_appe4r_t0_be_s3cur3}
</code></pre></div><p>flag:flag{Th3r3_ar3_1ns3cure_RSA_m0duli_7hat_at_f1rst_gl4nce_appe4r_t0_be_s3cur3}</p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://wiwiki.kfd.me/wiki/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81">曼彻斯特编码-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E5%85%89%E6%BB%91%E6%95%B8?__cf_chl_jschl_tk__=b5c515d187b62ea09af935ef21c9d5b700a69f48-1623022895-0-AfHh5ZYcD_wNPPZIKv6IUoOgpyBBN51u0oQlfiPznjcgH9GInr9dRIRblQTjVkOq0mjCxntNjxFcA3jJrZdPLzcAKEhjc88WIy3pEjIbEpB1_n720JdpuwY5FK-ApJ1HKWqeGFjkQ6d_Yo-dAXNFVdjYctWy6G_xqejts0Ou-UbtdP8cResDH3AZ06MUuLBpK8Rop4k-GJfveFgVcMGAfzrIUzt6bcABShLT8KlLg13VtGKiQ5MKSBEK8tv0mhABWnbYmD6tKZzauO3DLBedUBxpMlZo5VSBr3Wx5fwBdxPnDXCZR57KE5T97LzgXqWKw3G3dhq29wgUvSzetV-_cDsjhNhYKlQ6izmQXjQ0JOWdhUiPsrF-tQ1f5Ctb5KUO8Ddl95G-6AqXuzZ3EWBAD64mE3HtlB2s1jPsEW9PtfjoeRzVCYfZZ78X-W76hYw86bKV23lnBvV2Qzp0NMWUuXx2dsRSy_6lAjnGl8GYLHZ2X8pwoz4f02P-lmw8OGP4Og">光滑数-维基百科</a></li>
<li><a href="http://yulige.top/?p=752#childRSA213pt_38solvers">NCTF2019-官方writeup</a></li>
</ol>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>BUUCTF CRYPTO [17~32] writeup</title>
            <link>https://zcodetea.github.io/posts/buuctf-crypto-17-32_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 10:34:27 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/buuctf-crypto-17-32_writeup/</guid>
            <description>还是BUUCTF的题目，熟悉的感觉，再来一次！
BUUCTF首页
本次的题目大致如下：
CTF题目
题目是16道密码学题目：
 传统知识+古典密码 信息化时代的步伐 RSA1 凯撒？转换？呵呵！ old-fashion 萌萌哒的八戒 权限获得第一步 世上无难事 RSA3 RSA2 异性相吸 RSA 还原大师 Unencode robomunication RSAROLL  题目求解： 题目都还比较简单，正常来做就好。
0x0 传统知识+古典密码 下载附件，得到题目

题目信息
应该是考察古典密码的题目，是考察六十甲子顺序纳音表的题目
这里列出六十顺序纳音表：

六十甲子顺序表
根据六十甲子顺序表编写python脚本：
C_sky = &amp;#34;甲乙丙丁戊己庚辛壬癸&amp;#34; C_earth = &amp;#34;子丑寅卯辰巳午未申酉戌亥&amp;#34; C_dict={} for i in range(60): C_dict[C_sky[i%len(C_sky)]+C_earth[i%len(C_earth)]] = str(i+1) cipher = &amp;#34;辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳&amp;#34; cipher_list = cipher.split(&amp;#34;，&amp;#34;) plainer = &amp;#34;&amp;#34; for i in cipher_list: plainer += chr(int(C_dict[i])+60) def decrype(cipher,key): cipher_len = len(cipher) if cipher_len%key == 0: key = cipher_len // key else: key = cipher_len // key + 1 result = {x:&amp;#39;&amp;#39; for x in range(key)} for i in range(cipher_len): a = i%key; result.</description>
            <content type="html"><![CDATA[<p>还是BUUCTF的题目，熟悉的感觉，再来一次！</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-136.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-136.png" alt="img"></a>BUUCTF首页</p>
<p>本次的题目大致如下：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-137.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-137.png" alt="img"></a>CTF题目</p>
<p>题目是16道密码学题目：</p>
<ol>
<li>传统知识+古典密码</li>
<li>信息化时代的步伐</li>
<li>RSA1</li>
<li>凯撒？转换？呵呵！</li>
<li>old-fashion</li>
<li>萌萌哒的八戒</li>
<li>权限获得第一步</li>
<li>世上无难事</li>
<li>RSA3</li>
<li>RSA2</li>
<li>异性相吸</li>
<li>RSA</li>
<li>还原大师</li>
<li>Unencode</li>
<li>robomunication</li>
<li>RSAROLL</li>
</ol>
<h2 id="题目求解">题目求解：</h2>
<p>题目都还比较简单，正常来做就好。</p>
<h3 id="0x0-传统知识古典密码">0x0 传统知识+古典密码</h3>
<p>下载附件，得到题目</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-138.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-138.png" alt="img"></a></p>
<p>题目信息</p>
<p>应该是考察古典密码的题目，是考察六十甲子顺序纳音表的题目</p>
<p>这里列出六十顺序纳音表：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-139.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-139.png" alt="img"></a></p>
<p>六十甲子顺序表</p>
<p>根据六十甲子顺序表编写python脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">C_sky <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;甲乙丙丁戊己庚辛壬癸&#34;</span>
C_earth <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;子丑寅卯辰巳午未申酉戌亥&#34;</span>
C_dict<span style="color:#f92672">=</span>{}
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">60</span>):
    C_dict[C_sky[i<span style="color:#f92672">%</span>len(C_sky)]<span style="color:#f92672">+</span>C_earth[i<span style="color:#f92672">%</span>len(C_earth)]] <span style="color:#f92672">=</span> str(i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳&#34;</span>
cipher_list <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;，&#34;</span>)
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_list:
    plainer <span style="color:#f92672">+=</span> chr(int(C_dict[i])<span style="color:#f92672">+</span><span style="color:#ae81ff">60</span>)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrype</span>(cipher,key):
    cipher_len <span style="color:#f92672">=</span> len(cipher)
    <span style="color:#66d9ef">if</span> cipher_len<span style="color:#f92672">%</span>key <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">//</span> key
    <span style="color:#66d9ef">else</span>:
        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">//</span> key <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
    result <span style="color:#f92672">=</span> {x:<span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(key)}
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(cipher_len):
        a <span style="color:#f92672">=</span> i<span style="color:#f92672">%</span>key;
        result<span style="color:#f92672">.</span>update({a:result[a]<span style="color:#f92672">+</span>cipher[i]})
    plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(key):
        plainer <span style="color:#f92672">=</span> plainer <span style="color:#f92672">+</span> result[i]
    <span style="color:#66d9ef">return</span> plainer
plainer_list<span style="color:#f92672">=</span>[]
<span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">20</span>):
    plainer_list<span style="color:#f92672">.</span>append(decrype(plainer,n))

plainer_set <span style="color:#f92672">=</span> set(plainer_list)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">Caesar</span>(cipher):
    dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
        plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
            <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
                plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>j)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]

            <span style="color:#66d9ef">else</span>:
                plainer <span style="color:#f92672">+=</span> i
        print(plainer<span style="color:#f92672">.</span>upper())

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> plainer_set:
    Caesar(i<span style="color:#f92672">.</span>lower())
    print(<span style="color:#e6db74">&#34;&#34;</span>)
</code></pre></div><blockquote>
<p>说明：</p>
<ol>
<li>
<p>脚本使用了三种加密算法，分别是传统文化加密，栅栏密码，凯撒密码</p>
</li>
<li>
<p>最终的输出结果是凯撒密码爆破的结果，需要进行筛选</p>
</li>
</ol>
</blockquote>
<p>通过简单的筛选可以得到flag为：flag{SHUANGYU}</p>
<h3 id="0x1-信息化时代的步伐">0x1 信息化时代的步伐</h3>
<p>审题目</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image.png" alt="img"></a></p>
<p>应该是和中文相关的密码</p>
<p>看附件：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-1.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-1.png" alt="img"></a></p>
<p>附件是一串数字，应该需要数字和中文进行联系</p>
<p>搜索一下：中文电码</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-2.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-2.png" alt="img"></a></p>
<p>得到了不错的搜索结果</p>
<p>这里涉及了一个中文电码的知识，这是一个比较偏的知识，这里可以积累一下：</p>
<p>中文电码，又称：中文商用电码（Chinese commercial code, CCC）、中文电报码（Chinese telegraph code, CTC）或中文电报明码（Chinese ordinary telegraph code, COTC），原本是用于电报之中传送中文信息的方法。它是第一个将汉字化作电子信号的编码表。[1]</p>
<p>简单来说，就是针对中文设计的一种数字编码方式。</p>
<p>这里直接使用<a href="http://code.mcdvisa.com/">在线脚本</a>进行解码：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-3.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-3.png" alt="img"></a></p>
<p>解码得出结果，即flag是flag{计算机要从娃娃抓起}</p>
<h3 id="0x2-rsa1">0x2 RSA1</h3>
<p>题目考察RSA加密算法</p>
<p>下载附件，得到数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">p <span style="color:#f92672">=</span> <span style="color:#ae81ff">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span> 
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span> 
dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span> 
dq <span style="color:#f92672">=</span> <span style="color:#ae81ff">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span> 
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span>
</code></pre></div><p>有p和q，以及dp和dq，但是没有e，n等参数</p>
<p>这道题目是一道典型的dp，dq泄露的RSA题目</p>
<p>由于涉及dp，dq参数，需要推导一下公式：</p>
<p>首先，最基本的RSA求值公式：</p>
<p>$m \equiv c^d\ mod\ n$ 和 $c \equiv m^e\ mod\ n$</p>
<p>然后，这里有不同于常规RSA的新参数dp和dq：</p>
<p>$ d_p \equiv d\ mod\ (p-1) $和 $ d_q \equiv d\ mod\ (q-1) $</p>
<p>下面就需要根据已知的条件进行推导：</p>
<p>$$ m \equiv c^d \ mod\ n \Rightarrow m = c^d + k \cdot n \Rightarrow m = c^d + k \cdot p \cdot q $$</p>
<p>由上面的推导可以得出：</p>
<p>$$ m_p \equiv c^d\  mod \ p  \ m_q \equiv c^d\ mod\ q $$</p>
<p>进一步推导可以得出：</p>
<p>$$ m_p + k \cdot p = c^d$$</p>
<p>将上式带入到$ m_q \equiv c^d \  mod \  q $ 可得：</p>
<p>$$ m_q \equiv m_q + kp\ mod\  q $$</p>
<p>然后简单整理可得：</p>
<p>$$ k \equiv p^{-1} \cdot (m_q - m_p)\  mod\ q $$</p>
<p>故可得：</p>
<p>$$ m \equiv (p^{-1} \cdot (m_q-m_p)\ mod\ q ) \cdot p+ m_p \ mod \  (p \cdot q) $$</p>
<p>同理可得：</p>
<p>$$ m \equiv (p^{-1} \cdot (m_q-m_p)\ mod\ q ) \cdot q+ m_q \ mod \  (p \cdot q) $$</p>
<p>$$ m \equiv (q^{-1} \cdot (m_p-m_q)\ mod\ p ) \cdot p+ m_p \ mod \  (p \cdot q) $$</p>
<p>$$ m \equiv (q^{-1} \cdot (m_p-m_q)\ mod\ p ) \cdot q+ m_q \ mod \  (p \cdot q) $$</p>
<p>根据推导的公式，这里使用一个python脚本解决问题：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

p <span style="color:#f92672">=</span> <span style="color:#ae81ff">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span>
dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span>
dq <span style="color:#f92672">=</span> <span style="color:#ae81ff">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span>

mp <span style="color:#f92672">=</span> pow(c,dp,p)
mq <span style="color:#f92672">=</span> pow(c,dq,q)
Ip <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(p,q)
Iq <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(q,p)

m1 <span style="color:#f92672">=</span> ((((mq<span style="color:#f92672">-</span>mp)<span style="color:#f92672">*</span>Ip)<span style="color:#f92672">%</span>q)<span style="color:#f92672">*</span>p<span style="color:#f92672">+</span>mp)<span style="color:#f92672">%</span>(p<span style="color:#f92672">*</span>q)
m2 <span style="color:#f92672">=</span> ((((mq<span style="color:#f92672">-</span>mp)<span style="color:#f92672">*</span>Ip)<span style="color:#f92672">%</span>q)<span style="color:#f92672">*</span>q<span style="color:#f92672">+</span>mq)<span style="color:#f92672">%</span>(p<span style="color:#f92672">*</span>q)
m3 <span style="color:#f92672">=</span> ((((mp<span style="color:#f92672">-</span>mq)<span style="color:#f92672">*</span>Iq)<span style="color:#f92672">%</span>p)<span style="color:#f92672">*</span>p<span style="color:#f92672">+</span>mp)<span style="color:#f92672">%</span>(p<span style="color:#f92672">*</span>q)
m4 <span style="color:#f92672">=</span> ((((mp<span style="color:#f92672">-</span>mq)<span style="color:#f92672">*</span>Iq)<span style="color:#f92672">%</span>p)<span style="color:#f92672">*</span>q<span style="color:#f92672">+</span>mq)<span style="color:#f92672">%</span>(p<span style="color:#f92672">*</span>q)

flag1 <span style="color:#f92672">=</span> long_to_bytes(m1)
flag2 <span style="color:#f92672">=</span> long_to_bytes(m2)
flag3 <span style="color:#f92672">=</span> long_to_bytes(m3)
flag4 <span style="color:#f92672">=</span> long_to_bytes(m4)

print <span style="color:#e6db74">&#34;flag:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(flag1)
print <span style="color:#e6db74">&#34;flag:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(flag2)
print <span style="color:#e6db74">&#34;flag:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(flag3)
print <span style="color:#e6db74">&#34;flag:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(flag4)
</code></pre></div><p>脚本运行即得到flag，即noxCTF{W31c0m3_70_Ch1n470wn}</p>
<p>根据题目要求，故flag： flag{W31c0m3_70_Ch1n470wn}</p>
<h3 id="0x3-凯撒转换呵呵">0x3 凯撒？转换？呵呵！</h3>
<p>题目应该是考察变种凯撒加密的</p>
<pre tabindex="0"><code>MTHJ{CUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO}
注意：得到的 flag 请包上 flag{} 提交, flag{小写字母}
</code></pre><p>这里使用一个<a href="https://quipqiup.com/">在线工具</a>进行求解</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-4.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-4-1024x468.png" alt="img"></a></p>
<p>通过在线工具就得到flag，即flag{substitutioncipherdecryptionisalwayseasyjustlikeapieceofcake}</p>
<p>“忘了是否要进行大小写转换，题目的思路大致就是这样了”</p>
<h3 id="0x4-old-fashion">0x4 old-fashion</h3>
<p>题目描述没什么好说的，直接下载附件，查看附件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Os drnuzearyuwn, y jtkjzoztzoes douwlr oj y ilzwex eq lsdexosa kn pwodw tsozj eq ufyoszlbz yrl rlufydlx pozw douwlrzlbz, ydderxosa ze y rlatfyr jnjzli; mjy gfbmw vla xy wbfnsy symmyew (mjy vrwm qrvvrf), hlbew rd symmyew, mebhsymw rd symmyew, vbomgeyw rd mjy lxrzy, lfk wr dremj. Mjy eyqybzye kyqbhjyew mjy myom xa hyedrevbfn lf bfzyewy wgxwmbmgmbrf. Wr mjy dsln bw f1_2jyf-k3_jg1-vb-vl_l
</code></pre></div><p>一段文字，直接丢<a href="https://quipqiup.com/">在线工具</a>里面进行词频分析吧：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-5.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-5-1024x306.png" alt="img"></a></p>
<p>得到词频分析结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Xl fogkvryoeksg, e hjdhvxvjvxrl fxksao xh e zavsrb rc alfrbxly dg wsxfs jlxvh rc knexlvaiv eoa oaknefab wxvs fxksaovaiv, effrobxly vr e oayjneo hghvaz; the units may be single letters (the most common), pairs of letters, triplets of letters, mixtures of the above, and so forth. The receiver deciphers the text by performing an inverse substitution. So the flag is n1_2hen-d3_hu1-mi-ma_a
</code></pre></div><p>故得flag：flag{n1_2hen-d3_hu1-mi-ma_a}</p>
<h3 id="0x5-萌萌哒的八戒">0x5 萌萌哒的八戒</h3>
<p>萌萌哒的八戒，应该是猪圈密码</p>
<p>什么是猪圈密码？</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image.png" alt="img"></p>
<p>猪圈密码（英语：pigpen cipher)，亦称共济会密码（masonic cipher）或 共济会员密码（Freemason&rsquo;s cipher），是一种以格子为基础的简单替代式密码。即使使用符号，也不会影响密码分析，亦可用在其它替代式的方法。右边的例子，是把字母填进格子的模样。</p>
<p>早在1700年代，共济会常常使用这种密码保护一些私密纪录或用来通讯，所以又称共济会密码。[2]</p>
<pre tabindex="0"><code>萌萌哒的八戒原来曾经是猪村的村长，从远古时期，猪村就有一种神秘的代码。请从附件中找出代码，看看萌萌哒的猪八戒到底想说啥 注意：得到的 flag 请包上 flag{} 提交
</code></pre><p>题目描述正好和猜想对应，下载附件，查看附件</p>
<p>得到一张图片:</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-6.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-6.png" alt="img"></a></p>
<p>下面那一串应该就是猪圈密码，进行解密：</p>
<p>这里使用在线工具进行解密：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-7.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-7.png" alt="img"></a></p>
<p>得到flag，即flag{whenthepigwanttoeat}</p>
<h3 id="0x6-权限获得第一步">0x6 权限获得第一步</h3>
<p>这题应该是使用哈希密码破解的方法进行解密</p>
<p>下载附件，查看附件内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Administrator<span style="color:#960050;background-color:#1e0010">:</span>500<span style="color:#960050;background-color:#1e0010">:</span>806EDC27AA52E314AAD3B435B51404EE<span style="color:#960050;background-color:#1e0010">:</span>F4AD50F57683D4260DFD48AA351A17A8::<span style="color:#960050;background-color:#1e0010">:</span>
</code></pre></div><p>密文明显是windows系统的hash加密，第一段的哈希加密应该是Administrator的用户名，第二段的哈希加密应该是windows系统的密码</p>
<p>直接对第二段哈希值进行哈希破解：</p>
<p>这里使用<a href="https://cmd5.com/">在线工具</a>进行破解：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-8.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-8.png" alt="img"></a></p>
<p>故flag即为flag{3617656}</p>
<h3 id="0x7-世上无难事">0x7 世上无难事</h3>
<p>打开题目：</p>
<pre tabindex="0"><code>以下是某国现任总统外发的一段指令，经过一种奇异的加密方式，毫无规律，看来只能分析了。请将这段语句还原成通顺语句，并从中找到key作为答案提交，答案是32位，包含小写字母。 注意：得到的 flag 请包上 flag{} 提交
</code></pre><p>下载附件，查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">VIZZB IFIUOJBWO NVXAP OBC XZZ UKHVN IFIUOJBWO HB XVIXW XAW VXFI X QIXN VBD KQ IFIUOJBWO WBKAH NBWXO VBD XJBCN NKG QLKEIU DI XUI VIUI DKNV QNCWIANQ XN DXPIMKIZW VKHV QEVBBZ KA XUZKAHNBA FKUHKAKX XAW DI VXFI HBN QNCWIANQ NCAKAH KA MUBG XZZ XEUBQQ XGIUKEX MUBG PKAWIUHXUNIA NVUBCHV 12NV HUXWI XAW DI XUI SCQN QB HZXW NVXN XZZ EBCZW SBKA CQ NBWXO XAW DI DXAN NB NVXAP DXPIMKIZW MBU JIKAH QCEV XA BCNQNXAWKAH VBQN HKFI OBCUQIZFIQ X JKH UBCAW BM XLLZXCQI XAW NVI PIO KQ 640I11012805M211J0XJ24MM02X1IW09
</code></pre></div><p>得到一段文字，直接丢到在线工具得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">HELLO EVERYBODY THANK YOU ALL RIGHT EVERYBODY GO AHEAD AND HAVE A SEAT HOW IS EVERYBODY DOING TODAY HOW ABOUT TIM SPICER WE ARE HERE WITH STUDENTS AT WAKEFIELD HIGH SCHOOL IN ARLINGTON VIRGINIA AND WE HAVE GOT STUDENTS TUNING IN FROM ALL ACROSS AMERICA FROM KINDERGARTEN THROUGH 12TH GRADE AND WE ARE JUST SO GLAD THAT ALL COULD JOIN US TODAY AND WE WANT TO THANK WAKEFIELD FOR BEING SUCH AN OUTSTANDING HOST GIVE YOURSELVES A BIG ROUND OF APPLAUSE AND THE KEY IS 640E11012805F211B0AB24FF02A1ED09
</code></pre></div><p>得到flag，即flag为flag{640e11012805f211b0ab24ff02a1ed09}</p>
<h3 id="0x8-rsa3">0x8 RSA3</h3>
<p>RSA题目，直接下载附件，查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">c1<span style="color:#f92672">=</span><span style="color:#ae81ff">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span>
n<span style="color:#f92672">=</span><span style="color:#ae81ff">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span>
e1<span style="color:#f92672">=</span><span style="color:#ae81ff">11187289</span>
c2<span style="color:#f92672">=</span><span style="color:#ae81ff">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span>
e2<span style="color:#f92672">=</span><span style="color:#ae81ff">9647291</span>
</code></pre></div><p>看到c1，c2，e1，e2应该是RSA共模攻击</p>
<p>RSA共模攻击需要使用到扩展欧几里得定理：</p>
<p>扩展欧几里得算法是欧几里得算法（又叫辗转相除法）的扩展。除了计算a、b两个整数的最大公约数，此算法还能找到整数x、y（其中一个很可能是负数）。通常谈到最大公因子时, 我们都会提到一个非常基本的事实: 给予二整数 a 与 b, 必存在有整数 x 与 y 使得$ ax + by = gcd(a,b) $。有两个数a,b，对它们进行辗转相除法，可得它们的最大公约数——这是众所周知的。然后，收集辗转相除法中产生的式子，倒回去，可以得到$ ax+by=gcd(a,b) $的整数解。[3]</p>
<p>根据维基百科，可以找到扩展欧几里得定理的python算法 [4] :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">ext_euclid</span>(a, b):
    old_s,s<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>
    old_t,t<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>
    old_r,r<span style="color:#f92672">=</span>a,b
    <span style="color:#66d9ef">if</span> b <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, a
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">while</span>(r<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>):
            q<span style="color:#f92672">=</span>old_r<span style="color:#f92672">//</span>r
            old_r,r<span style="color:#f92672">=</span>r,old_r<span style="color:#f92672">-</span>q<span style="color:#f92672">*</span>r
            old_s,s<span style="color:#f92672">=</span>s,old_s<span style="color:#f92672">-</span>q<span style="color:#f92672">*</span>s
            old_t,t<span style="color:#f92672">=</span>t,old_t<span style="color:#f92672">-</span>q<span style="color:#f92672">*</span>t
    <span style="color:#66d9ef">return</span> old_s, old_t, old_r
</code></pre></div><p>这里根据题目要求，使用一个python脚本解决题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> gmpy2 <span style="color:#f92672">import</span> invert
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gongmo</span>(n, c1, c2, e1, e2):
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">egcd</span>(a, b):
        <span style="color:#66d9ef">if</span> b <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            <span style="color:#66d9ef">return</span> a, <span style="color:#ae81ff">0</span>
        <span style="color:#66d9ef">else</span>:
            x, y <span style="color:#f92672">=</span> egcd(b, a <span style="color:#f92672">%</span> b)
            <span style="color:#66d9ef">return</span> y, x <span style="color:#f92672">-</span> (a <span style="color:#f92672">//</span> b) <span style="color:#f92672">*</span> y
    s <span style="color:#f92672">=</span> egcd(e1, e2)
    s1 <span style="color:#f92672">=</span> s[<span style="color:#ae81ff">0</span>]
    s2 <span style="color:#f92672">=</span> s[<span style="color:#ae81ff">1</span>]

    <span style="color:#66d9ef">if</span> s1 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
        s1 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span> s1
        c1 <span style="color:#f92672">=</span> invert(c1, n)
    <span style="color:#66d9ef">elif</span> s2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
        s2 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span> s2
        c2 <span style="color:#f92672">=</span> invert(c2, n)
    m <span style="color:#f92672">=</span> pow(c1, s1, n) <span style="color:#f92672">*</span> pow(c2, s2, n) <span style="color:#f92672">%</span> n
    <span style="color:#66d9ef">return</span> m

c1<span style="color:#f92672">=</span><span style="color:#ae81ff">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span>
n<span style="color:#f92672">=</span><span style="color:#ae81ff">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span>
e1<span style="color:#f92672">=</span><span style="color:#ae81ff">11187289</span>
c2<span style="color:#f92672">=</span><span style="color:#ae81ff">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span>
e2<span style="color:#f92672">=</span><span style="color:#ae81ff">9647291</span>

result <span style="color:#f92672">=</span> gongmo(n, c1, c2, e1, e2)

print long_to_bytes(result)
</code></pre></div><p>根据脚本可以直接求出flag：flag{49d91077a1abcb14f1a9d546c80be9ef}</p>
<h3 id="0x9-rsa2">0x9 RSA2</h3>
<p>直接下载附件，打开附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span>
dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span>

c <span style="color:#f92672">=</span> <span style="color:#ae81ff">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span>
</code></pre></div><p>题目考察的应该就是典型的dp泄露问题，这里就进行简单的公式推导：
$$ n = p \cdot q $$</p>
<p>$$ \varphi(n) = (p-1) \cdot (q-1)  $$</p>
<p>$$  d_p \equiv d\ mod\ (p-1) $$</p>
<p>$$ d \equiv e^{-1}\ mod\  \varphi(n) $$</p>
<p>根据已知信息进行推导：</p>
<p>$$ d = e^{-1} + k(p-1)(q-1) \Rightarrow dp \equiv e^{-1} mod\ (p-1)\   $$</p>
<p>同理，也可以推导出：</p>
<p>$$ d = e^{-1} + k(p-1)(q-1) \Rightarrow dp \equiv e^{-1} mod\ (q-1)\  $$</p>
<p>易得：</p>
<p>$$ dp \cdot e -1 = k \cdot (q-1) $$</p>
<p>爆破出k即可求得的q值，进一步即可求得结果，这里使用一个python脚本求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">import</span> gmpy2

e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span>
dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span>

c <span style="color:#f92672">=</span> <span style="color:#ae81ff">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span>

temp <span style="color:#f92672">=</span> dp <span style="color:#f92672">*</span>e
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>,e):
    <span style="color:#66d9ef">if</span> (temp<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">%</span>i <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        x <span style="color:#f92672">=</span> (temp<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">//</span>i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
        y <span style="color:#f92672">=</span> n<span style="color:#f92672">%</span>x
        <span style="color:#66d9ef">if</span> y <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            p<span style="color:#f92672">=</span>x
            <span style="color:#66d9ef">break</span>
q <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span> p

<span style="color:#75715e"># print p</span>
<span style="color:#75715e"># print q</span>

phi <span style="color:#f92672">=</span> (q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> long_to_bytes(m)
print flag
</code></pre></div><p>运行脚本即可求出flag：flag{wow_leaking_dp_breaks_rsa?_98924743502}</p>
<h3 id="0xa-异性相吸">0xA 异性相吸</h3>
<p>看题目，应该是考察异或操作的题目</p>
<p>下载附件，查看附件</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-9.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-9.png" alt="img"></a>附件内容</p>
<p>两个文件，应该是使用异或处理最终得到结果，这里使用一个python脚本进行文件的二进制数据读取，然后进行异或操作求解出flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># env = python3</span>
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">import</span> struct

<span style="color:#75715e"># 读取key.txt文件</span>
key <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;key.txt&#34;</span>,mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rb&#34;</span>)
k <span style="color:#f92672">=</span> key<span style="color:#f92672">.</span>read()
key<span style="color:#f92672">.</span>close()

<span style="color:#75715e"># 读取密文.txt文件</span>
cipher <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;密文.txt&#34;</span>,mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rb&#34;</span>)
c <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>read()
cipher<span style="color:#f92672">.</span>close()

<span style="color:#75715e"># 文件二进制数据进行异或处理</span>
m<span style="color:#f92672">=</span>int<span style="color:#f92672">.</span>from_bytes(c,byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;big&#34;</span>,signed<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#f92672">^</span>int<span style="color:#f92672">.</span>from_bytes(k,byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;big&#34;</span>,signed<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)

<span style="color:#75715e"># 求解flag</span>
flag <span style="color:#f92672">=</span> long_to_bytes(m)<span style="color:#f92672">.</span>decode()

print(flag)
</code></pre></div><p>运行脚本得到flag：flag{ea1bc0988992276b7f95b54a7435e89e}</p>
<h3 id="0xb-rsa">0xB RSA</h3>
<p>RSA题目，直接下载附件，查看附件</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-10.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-10.png" alt="img"></a>附件内容</p>
<p>常规的RSA题目，使用openssl工具进行公钥文件的读取和私钥文件的解密</p>
<p>首先使用openssl对公钥文件进行解析：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&gt; openssl rsa -pubin -in pub.key -modulus -text
RSA Public-Key: <span style="color:#f92672">(</span><span style="color:#ae81ff">256</span> bit<span style="color:#f92672">)</span>
Modulus:
    00:c0:33:2c:5c:64:ae:47:18:2f:6c:1c:87:6d:42:
    33:69:10:54:5a:58:f7:ee:fe:fc:0b:ca:af:5a:f3:
    41:cc:dd
Exponent: <span style="color:#ae81ff">65537</span> <span style="color:#f92672">(</span>0x10001<span style="color:#f92672">)</span>
Modulus<span style="color:#f92672">=</span>C0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD
writing RSA key
-----BEGIN PUBLIC KEY-----
MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMAzLFxkrkcYL2wch21CM2kQVFpY9+7+
/AvKr1rzQczdAgMBAAE<span style="color:#f92672">=</span>
-----END PUBLIC KEY-----
</code></pre></div><p>获得到了n和e</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xC0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</code></pre></div><p>使用<a href="http://factordb.com/">factordb</a>进行大数分解</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-11.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-11-1024x124.png" alt="img"></a></p>
<p>得到p和q：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">p<span style="color:#f92672">=</span><span style="color:#ae81ff">285960468890451637935629440372639283459</span>
q<span style="color:#f92672">=</span><span style="color:#ae81ff">304008741604601924494328155975272418463</span>
</code></pre></div><p>根据已知的信息，编写python脚本，来获取flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># </span>
<span style="color:#f92672">import</span> rsa
<span style="color:#f92672">import</span> libnum

e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">86934482296048119190666062003494800588905656017203025617216654058378322103517</span>
p <span style="color:#f92672">=</span> <span style="color:#ae81ff">285960468890451637935629440372639283459</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">304008741604601924494328155975272418463</span>
d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))

key <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>PrivateKey(n,e,d,p,q)

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;flag.enc&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
    f <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
    flag <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>decrypt(f,key)<span style="color:#f92672">.</span>decode()
    print(flag)
</code></pre></div><p>执行脚本，获取到flag：flag{decrypt_256}</p>
<h3 id="0xc-还原大师">0xC 还原大师</h3>
<p>打开题目描述：</p>
<pre tabindex="0"><code>我们得到了一串神秘字符串：TASC?O3RJMV?WDJKX?ZM,问号部分是未知大写字母，为了确定这个神秘字符串，我们通过了其他途径获得了这个字串的32位MD5码。但是我们获得它的32位MD5码也是残缺不全，E903???4DAB????08?????51?80??8A?,请猜出神秘字符串的原本模样，并且提交这个字串的32位MD5码作为答案。 注意：得到的 flag 请包上 flag{} 提交
</code></pre><p>题目应该是考察md5加密的暴力破解来还原md5的数值：</p>
<p>根据题目要求编写python脚本进行还原：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> hashlib
cipher_dict<span style="color:#f92672">=</span>[]
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">65</span>,<span style="color:#ae81ff">91</span>):
    cipher_dict<span style="color:#f92672">.</span>append(chr(i))

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">md5_encrypt</span>(m):
    <span style="color:#66d9ef">return</span> hashlib<span style="color:#f92672">.</span>md5(m)<span style="color:#f92672">.</span>hexdigest()

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TASC?O3RJMV?WDJKX?ZM&#34;</span>
cipher_list<span style="color:#f92672">=</span>[]
<span style="color:#66d9ef">while</span> <span style="color:#e6db74">&#34;?&#34;</span> <span style="color:#f92672">in</span> cipher:
    index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    cipher_list<span style="color:#f92672">.</span>append(cipher[:cipher<span style="color:#f92672">.</span>index(<span style="color:#e6db74">&#34;?&#34;</span>)])
    cipher <span style="color:#f92672">=</span> cipher[cipher<span style="color:#f92672">.</span>index(<span style="color:#e6db74">&#34;?&#34;</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]

cipher_list<span style="color:#f92672">.</span>append(cipher)

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_dict:
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> cipher_dict:
        <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> cipher_dict:
            md5_str <span style="color:#f92672">=</span>md5_encrypt(cipher_list[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span>i<span style="color:#f92672">+</span>cipher_list[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span>j<span style="color:#f92672">+</span>cipher_list[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">+</span>k<span style="color:#f92672">+</span>cipher_list[<span style="color:#ae81ff">3</span>])<span style="color:#f92672">.</span>upper()
            <span style="color:#66d9ef">if</span> md5_str[:<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;E903&#34;</span>:
                print <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>md5_str<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
                print <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>md5_str<span style="color:#f92672">.</span>lower()<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
                <span style="color:#66d9ef">break</span>
</code></pre></div><p>运行脚本就可以获得flag，结果有大写和小写，忘记了具体是要求提交小写flag和大写flag。</p>
<p>运行结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">flag<span style="color:#f92672">{</span>E9032994DABAC08080091151380478A2<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>e9032994dabac08080091151380478a2<span style="color:#f92672">}</span>
</code></pre></div><h3 id="0xd-unencode">0xD Unencode</h3>
<p>看题目应该是考察UUencode编码的题目</p>
<p>下载附件，查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">89FQA9WMD&lt;V1A&lt;V1S83DY.#&lt;W3$Q,2TM]
</code></pre></div><p>丢<a href="http://ctf.ssleye.com/uu.html">在线工具</a>里面进行解码：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-12.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-12-1024x431.png" alt="img"></a></p>
<p>解码即可获得flag：flag{dsdasdsa99877LLLKK}</p>
<h3 id="0xe-robomunication">0xE robomunication</h3>
<p>直接下载附件，查看附件：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-13.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-13.png" alt="img"></a>附件内容</p>
<p>发现是一个音频文件，听出来是如下内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">bbbb b bpbb bpbb ppp bpp bbbb bp p bb bbb p bbbb b pbp b pbpp bb p bb bbb pbbb ppp ppp bppb pbbb b b bppb
</code></pre></div><p>发现是一个摩尔斯电码加密，破译得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">HELLOWHATISTHEKEYITISBOOPBEEP
</code></pre></div><p>对单词进行分割可得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">HELLO WHAT IS THE KEY IT IS BOOPBEEP
</code></pre></div><p>故flag是flag:flag{BOOPBEEP}</p>
<h3 id="0xf-rsaroll">0xF RSAROLL</h3>
<p>RSA题目，直接下载附件，查看附件</p>
<p>题目.txt</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">RSA roll！roll！roll！
Only number and a-z
（don&#39;t use editor
which MS provide）
</code></pre></div><p>data.txt</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">{920139713,19}

704796792
752211152
274704164
18414022
368270835
483295235
263072905
459788476
483295235
459788476
663551792
475206804
459788476
428313374
475206804
459788476
425392137
704796792
458265677
341524652
483295235
534149509
425392137
428313374
425392137
341524652
458265677
263072905
483295235
828509797
341524652
425392137
475206804
428313374
483295235
475206804
459788476
306220148
</code></pre></div><p>题目考查RSA低加密指数攻击，但是这道题目，可以试试分解一下n然后进行一下拼接</p>
<p>首先可以先去<a href="http://factordb.com/">在线网站</a>进行大数分解：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-14.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-14-1024x121.png" alt="img"></a></p>
<p>得到p和q的数值</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">p <span style="color:#f92672">=</span> <span style="color:#ae81ff">18443</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">49891</span>
</code></pre></div><p>然后使用一个python脚本解决问题：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

pub_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
cipher_list<span style="color:#f92672">=</span>[]
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;data.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
        line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
        <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;{&#34;</span> <span style="color:#f92672">in</span> line:
            pub_str <span style="color:#f92672">=</span> line[<span style="color:#ae81ff">1</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#66d9ef">elif</span> line <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span>:
            cipher_list<span style="color:#f92672">.</span>append(line)

pub_list<span style="color:#f92672">=</span> pub_str<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>)
n <span style="color:#f92672">=</span> int(pub_list[<span style="color:#ae81ff">0</span>])
e <span style="color:#f92672">=</span> int(pub_list[<span style="color:#ae81ff">1</span>])
p <span style="color:#f92672">=</span> <span style="color:#ae81ff">18443</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">49891</span>
phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)

flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_list:
    m <span style="color:#f92672">=</span> pow(int(i),d,n)
    plainer <span style="color:#f92672">=</span> long_to_bytes(m)
    flag <span style="color:#f92672">+=</span> plainer

print flag
</code></pre></div><p>运行脚本获得flag，即flag{13212je2ue28fy71w8u87y31r78eu1e2}</p>
<h2 id="参考">参考：</h2>
<ol>
<li>[标准中文电码(Chinese Commercial Code)简介、用途及查询](<a href="https://www.chasedream.com/show.aspx?id=4487&amp;cid=30#:~:text=">https://www.chasedream.com/show.aspx?id=4487&amp;cid=30#:~:text=</a>中文电码，又称：中文商用电码（Chinese commercial code%2C CCC）、中文电报码（Chinese telegraph,code%2C CTC）或中文电报明码（Chinese ordinary telegraph code%2C COTC），原本是用于电报之中传送中文信息的方法。)</li>
<li><a href="https://wiwiki.kfd.me/wiki/%E8%B1%AC%E5%9C%88%E5%AF%86%E7%A2%BC">猪圈密码-维基百科</a></li>
<li>[扩展欧几里得算法-百度百科](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a>扩展欧几里得算法/2029414?fromtitle=扩展欧几里德算法&amp;fromid=1053275#:~:text=扩展欧几里得算法 （英语：Extended Euclidean algorithm）是 欧几里得算法 （又叫辗转相除法）的扩展。 已知整数a、b，扩展欧几里得算法可以在求得a、b的 最大公约数,by %3D gcd (a%2Cb) 。 有两个数a%2Cb，对它们进行辗转相除法，可得它们的最大公约数——这是众所周知的。 然后，收集辗转相除法中产生的式子，倒回去，可以得到ax%2Bby%3Dgcd (a%2Cb)的整数解。)</li>
<li>[扩展欧几里得算法-维基百科](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a>扩展欧几里得算法/2029414?fromtitle=扩展欧几里德算法&amp;fromid=1053275#:~:text=扩展欧几里得算法 （英语：Extended Euclidean algorithm）是 欧几里得算法 （又叫辗转相除法）的扩展。 已知整数a、b，扩展欧几里得算法可以在求得a、b的 最大公约数,by %3D gcd (a%2Cb) 。 有两个数a%2Cb，对它们进行辗转相除法，可得它们的最大公约数——这是众所周知的。 然后，收集辗转相除法中产生的式子，倒回去，可以得到ax%2Bby%3Dgcd (a%2Cb)的整数解。)</li>
</ol>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>尽沾手襟 淋满眼眶</title>
            <link>https://zcodetea.github.io/posts/%E5%B0%BD%E6%B2%BE%E6%89%8B%E8%A5%9F-%E6%B7%8B%E6%BB%A1%E7%9C%BC%E7%9C%B6/</link>
            <pubDate>Sat, 26 Jun 2021 08:24:32 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/%E5%B0%BD%E6%B2%BE%E6%89%8B%E8%A5%9F-%E6%B7%8B%E6%BB%A1%E7%9C%BC%E7%9C%B6/</guid>
            <description>“再论RSA加密算法”  优美的数，自然的码
侦破数的逻辑
看透码的奥秘
 RSA加密算法的算法结构是非常严谨的，具有良好的保密性和完整性。正确使用RSA加密算法，可以确保信息传输的安全性。但是根据现代密码学的研究和发现，RSA加密算法已经被攻破了。中国的王小云通过密码分析学的方法，破解了RSA加密算法。
而RSA加密算法在CTF比赛中的地位仍然是不容小视的，在CTF比赛中的密码学部分是经常出没。CTF的密码学题目往往是在考察参赛者对于密码学算法的理解，往往采用的是密码分析学的知识进行密码学破解。密码学经常使用的三个角色是Alice、Bob和Eva，这三个人往往是Alice和Bob在不安全的信道上进行传输信息，而Eva是在窃听不安全信道上面信息的窃听者。而CTF比赛中，参赛者往往就需要扮演Eva的角色，根据题目给到的信息进行密码破译，来获取到Flag。
说来说去，RSA加密算法，RSA加密算法其实就挺简单的，至少算法逻辑是比较简单的。但是在计算机的实际应用中，往往会有编码和其他各种加密的使用，进行综合性的安全性应用。RSA加密算法虽然是比较简单的算法过程，但是随着现代密码学的不断发展和进步，越来越多针对RSA加密算法的攻击方式，因而CTF也根据密码学研究是文献进行革新，演变出来了各种各样针对RSA攻击方法的破译算法。
CTF中RSA题目类型 CTF中常见的RSA题目类型有如下几类：^1^
公钥加密文
这是CTF中最常见最基础的题型，出题人会给你一个公钥文件（通常是以.pem或.pub结尾的文件）和密文（通常叫做flag.enc之类的），你需要分析公钥，提取出（N，e），通过各种攻击手段恢复私钥，然后去解密密文得到flag。
文本文档
对于第一种题型，耿直点的出题人直接给你一个txt文本文档，里面直接写出了（N，e，c）所对应的十进制数值，然后你直接拿去用就行了。当然也不都是给出（N，e，c）的值，有时还会给出其他一些参数，这时就需要思考，这题具体考察的什么攻击方法
pcap文件
有时出题人会给你一个流量包，你需要用wireshark等工具分析，然后根据流量包的通信信息，分析题目考察的攻击方法，你可以提取出所有你解题需要用到的参数，然后进行解密
本地脚本分析
题目会给你一个脚本和一段密文，一般为python编写，你需要逆向文件流程，分析脚本的加密过程，写出对应的解密脚本进行解密
远程脚本利用
这种题型一般难度较大。题目会给你一个运行在远程服务器上的python脚本和服务器地址，你需要分析脚本存在的漏洞，确定攻击算法，然后编写脚本与服务器交互，得到flag
密码学的题目类型也大致就是这些类型了，这些题目类型也展现出了密码学并不是孤立的存在，密码学与网络安全的各个方面都有着较大的联系，并彼此互联。
数据处理 CTF比赛中的CRYPTO题目类型往往会给到一些需要进行数据处理的文件格式：
基本上来说，RSA的题目都是围绕着c，m，e，d，n，p，q这几个参数展开的，但是题目一般不会直接给这种样子的参数，而是通过别的方式给出，这里就需要我们使用一些工具或者自己手工将这些参数提取出来。^2^
pem文件**：**针对此类文件可以直接使用openssl提取，大概使用过的方式有：
openssl rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc openssl rsa -pubin -text -modulus -in warmup -in public.pem pcap文件：针对此类文件可以使用wireshark follow一下。这种问题一般都是写了一个交互的crypto系统，所以可能产生多轮交互。
PPC模式：这种模式是上述pcap文件的交互版，会给一个端口进行一些crypto的交互，参数会在交互中给出。
第二个需要处理的就是明密文，这个方法多多，不多赘述。
RSA加密算法的攻击类型 RSA加密算法题目的攻击类型是各种各样的，常见的攻击方法：
模数分解 解决RSA题目最简单，最暴力，最好使的方法就是分解模数n。如果能够将n分解成功，成功得到p，q的取值，那么可求n的欧拉函数的值。
模数分解往往可以使用多种方式进行分解，素数分解向来就是数学研究领域比较难以攻克的内容。而RSA算法的保密性也是由于素数分解的困难。但是有些简单的RSA题目可以使用素数分解的方法来解决，常用的工具有：foctordb，sagemath
低加密指数攻击 在RSA中e也称为加密指数。由于e是可以随意选取的，选取小一点的e可以缩短加密时间，但是选取不当的话，就会造成安全问题。
e=3时的小明文攻击 当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。
即： $$ c\equiv; m^e ;mod; n $$
如果e=3，且 $ m^e&amp;lt;{n} $，那么：
$$ c= m^e,;e=3 $$</description>
            <content type="html"><![CDATA[<h2 id="再论rsa加密算法">“再论RSA加密算法”</h2>
<blockquote>
<p>优美的数，自然的码</p>
<p>侦破数的逻辑</p>
<p>看透码的奥秘</p>
</blockquote>
<p>RSA加密算法的算法结构是非常严谨的，具有良好的保密性和完整性。正确使用RSA加密算法，可以确保信息传输的安全性。但是根据现代密码学的研究和发现，RSA加密算法已经被攻破了。中国的王小云通过密码分析学的方法，破解了RSA加密算法。</p>
<p>而RSA加密算法在CTF比赛中的地位仍然是不容小视的，在CTF比赛中的密码学部分是经常出没。CTF的密码学题目往往是在考察参赛者对于密码学算法的理解，往往采用的是密码分析学的知识进行密码学破解。密码学经常使用的三个角色是Alice、Bob和Eva，这三个人往往是Alice和Bob在不安全的信道上进行传输信息，而Eva是在窃听不安全信道上面信息的窃听者。而CTF比赛中，参赛者往往就需要扮演Eva的角色，根据题目给到的信息进行密码破译，来获取到Flag。</p>
<p>说来说去，RSA加密算法，RSA加密算法其实就挺简单的，至少算法逻辑是比较简单的。但是在计算机的实际应用中，往往会有编码和其他各种加密的使用，进行综合性的安全性应用。RSA加密算法虽然是比较简单的算法过程，但是随着现代密码学的不断发展和进步，越来越多针对RSA加密算法的攻击方式，因而CTF也根据密码学研究是文献进行革新，演变出来了各种各样针对RSA攻击方法的破译算法。</p>
<h3 id="ctf中rsa题目类型">CTF中RSA题目类型</h3>
<p>CTF中常见的RSA题目类型有如下几类：^1^</p>
<p><strong>公钥加密文</strong></p>
<p>这是CTF中最常见最基础的题型，出题人会给你一个公钥文件（通常是以.pem或.pub结尾的文件）和密文（通常叫做flag.enc之类的），你需要分析公钥，提取出（N，e），通过各种攻击手段恢复私钥，然后去解密密文得到flag。</p>
<p><strong>文本文档</strong></p>
<p>对于第一种题型，耿直点的出题人直接给你一个txt文本文档，里面直接写出了（N，e，c）所对应的十进制数值，然后你直接拿去用就行了。当然也不都是给出（N，e，c）的值，有时还会给出其他一些参数，这时就需要思考，这题具体考察的什么攻击方法</p>
<p><strong>pcap文件</strong></p>
<p>有时出题人会给你一个流量包，你需要用wireshark等工具分析，然后根据流量包的通信信息，分析题目考察的攻击方法，你可以提取出所有你解题需要用到的参数，然后进行解密</p>
<p><strong>本地脚本分析</strong></p>
<p>题目会给你一个脚本和一段密文，一般为python编写，你需要逆向文件流程，分析脚本的加密过程，写出对应的解密脚本进行解密</p>
<p><strong>远程脚本利用</strong></p>
<p>这种题型一般难度较大。题目会给你一个运行在远程服务器上的python脚本和服务器地址，你需要分析脚本存在的漏洞，确定攻击算法，然后编写脚本与服务器交互，得到flag</p>
<p>密码学的题目类型也大致就是这些类型了，这些题目类型也展现出了密码学并不是孤立的存在，密码学与网络安全的各个方面都有着较大的联系，并彼此互联。</p>
<h3 id="数据处理">数据处理</h3>
<p>CTF比赛中的CRYPTO题目类型往往会给到一些需要进行数据处理的文件格式：</p>
<p>基本上来说，RSA的题目都是围绕着c，m，e，d，n，p，q这几个参数展开的，但是题目一般不会直接给这种样子的参数，而是通过别的方式给出，这里就需要我们使用一些工具或者自己手工将这些参数提取出来。^2^</p>
<p>pem文件**：**针对此类文件可以直接使用openssl提取，大概使用过的方式有：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">openssl   rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc
openssl   rsa -pubin -text -modulus -in warmup -in public.pem
</code></pre></div><p>pcap文件：针对此类文件可以使用wireshark follow一下。这种问题一般都是写了一个交互的crypto系统，所以可能产生多轮交互。</p>
<p>PPC模式：这种模式是上述pcap文件的交互版，会给一个端口进行一些crypto的交互，参数会在交互中给出。</p>
<p>第二个需要处理的就是明密文，这个方法多多，不多赘述。</p>
<h3 id="rsa加密算法的攻击类型">RSA加密算法的攻击类型</h3>
<p>RSA加密算法题目的攻击类型是各种各样的，常见的攻击方法：</p>
<h4 id="模数分解">模数分解</h4>
<p>解决RSA题目最简单，最暴力，最好使的方法就是分解模数n。如果能够将n分解成功，成功得到p，q的取值，那么可求n的欧拉函数的值。</p>
<p>模数分解往往可以使用多种方式进行分解，素数分解向来就是数学研究领域比较难以攻克的内容。而RSA算法的保密性也是由于素数分解的困难。但是有些简单的RSA题目可以使用素数分解的方法来解决，常用的工具有：foctordb，sagemath</p>
<h3 id="低加密指数攻击">低加密指数攻击</h3>
<p>在RSA中e也称为加密指数。由于e是可以随意选取的，选取小一点的e可以缩短加密时间，但是选取不当的话，就会造成安全问题。</p>
<h4 id="e3时的小明文攻击">e=3时的小明文攻击</h4>
<p>当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。</p>
<p>即：
$$
c\equiv; m^e ;mod; n
$$</p>
<p>如果e=3，且 $ m^e&lt;{n} $，那么：</p>
<p>$$
c= m^e,;e=3
$$</p>
<p>$$
m=sqrt[3]{c}
$$</p>
<p>如果明文的三次方比n大，但是不是足够大，那么设k，有：</p>
<p>$$
c= m^e+kn
$$</p>
<p>爆破k，如果$ c-kn $能开三次根式，那么可以直接得到明文。</p>
<h4 id="低加密指数广播攻击">低加密指数广播攻击</h4>
<p>如果选取的加密指数较低，并且使用了相同的加密指数给一个接受者的群发送相同的信息，那么可以进行广播攻击得到明文。</p>
<p>即，选取了相同的加密指数e（这里取e=3），对相同的明文m进行了加密并进行了消息的传递，那么有：</p>
<p>$$
c_1\equiv m^e;mod ; n_1 $
$$
$$
c_2\equiv m^e;mod ; n_2 $
$$
$$
c_3\equiv m^e;mod;n_3
$$</p>
<p>对上述等式运用中国剩余定理，在e=3时，可以得到：</p>
<p>$$
c_x\equiv m^3;mod;n_1n_2n_3
$$</p>
<p>通过对 $ c_x $ 进行三次开方可以求得明文。</p>
<h3 id="低解密指数攻击">低解密指数攻击</h3>
<p>与低加密指数相同，低解密指数可以加快解密的过程，但是者也带来了安全问题。Wiener表示如果满足：</p>
<p>$$
d&lt;\frac{1}{3}g n^\frac{1}{4}
$$</p>
<p>那么一种基于连分数(一个数论当中的问题)的特殊攻击类型就可以危害RSA的安全。此时需要满足：</p>
<p>$$
q;&lt;;p;&lt;;2q
$$</p>
<p>如果满足上述条件，通过Wiener Attack可以在多项式时间中分解n。</p>
<p>rsa-wiener-attack的攻击源码开源在了github中，采取python编写，可以很容易使用。</p>
<h3 id="共模攻击">共模攻击</h3>
<p>如果在RSA的使用中使用了相同的模n对相同的明文m进行了加密，那么就可以在不分解n的情况下还原出明文m的值。</p>
<p>即：</p>
<p>$$
c_1\equiv m^{e_1};mod;n
$$
$$
c_2\equiv m^{e_2};mod;n
$$</p>
<p>此时不需要分解n，不需要求解私钥，如果两个加密指数互素，就可以通过共模攻击在两个密文和公钥被嗅探到的情况下还原出明文m的值。</p>
<p>过程如下，首先两个加密指数互质，则：</p>
<p>$$
(e_1,e_2)=1
$$</p>
<p>即存在$ s_2 $，$ s_2 $使得：</p>
<p>$$
s_1e_1+s_2e_2=1
$$</p>
<p>又因为：
$$
c_1 \equiv m^{e_1};mod;n
$$
$$
c_2\equiv m^{e_2};mod;n
$$</p>
<p>通过代入化简可以得出：
$$
c_1^{s_1}c_2^{s_2}\equiv;m;mod;n
$$</p>
<p>明文解出。</p>
<p>RSA的攻击方法肯定不止这五种，随着时代的发展和科技的进步，RSA加密算法被各种各样的破译算法进行攻破。而掌握这几种攻击算法，可以解决RSA题目中的大部分中等题目类型。比较难的题目，也就只能去多看看paper了。</p>
<h3 id="参考">参考</h3>
<ol>
<li><a href="https://www.freebuf.com/articles/others-articles/161475.html">CTF中RSA题型解题思路及技巧，附小白福利-FREEBUF</a></li>
<li><a href="https://www.anquanke.com/post/id/84632">【技术分享】CTF中RSA的常见攻击方法-安全客</a></li>
</ol>
<p>闲聊到此为止，来喝杯茶可好？</p>
]]></content>
        </item>
        
        <item>
            <title>清茶一盏 公杯斟茗</title>
            <link>https://zcodetea.github.io/posts/%E6%B8%85%E8%8C%B6%E4%B8%80%E7%9B%8F-%E5%85%AC%E6%9D%AF%E6%96%9F%E8%8C%97/</link>
            <pubDate>Sat, 26 Jun 2021 08:20:02 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/%E6%B8%85%E8%8C%B6%E4%B8%80%E7%9B%8F-%E5%85%AC%E6%9D%AF%E6%96%9F%E8%8C%97/</guid>
            <description>清茶一盏 公杯斟茗  上下运杯，左右轻斟
公杯，私茗，香满阑
清茶，浓茶，甘润田
然君闻几何？
 要谈谈RSA加密算法，不妨先聊聊密码学的发展历史和密码学的历程。
密码学早在公元前400多年就已经产生，人类使用密码的历史几乎与使用文字的时间一样长，密码学的发展大致可以分为 3 个阶段: 1949 年之前的古典密码学阶段; 1949 年至 1975 年密码学成为科学的分支; 1976 年以后对称密钥密码算法得到进一步发展，产生了密码学的新方向—公钥密码学。1976 年，W.Diffie 和 M.Hellman 在发表的文章“密码学的新方向”中首次公开提出了公钥密码( Public-key Cryptography) 的概念。公钥密码的提出实现了加密密钥和解密密钥之间的独立，解决了对称密码体制中通信双方必须共享密钥的问题，在密码学界具有划时代的意义。^1^
密码学的历史非常悠久，但是密码学的发展速度并不是非常迅速，直到信息时代的到来以及网络空间安全面临着巨大的威胁，密码学得到了前所未有的飞速发展，RSA公钥密码就是其中的代表。密码学中研究的对象有大致三类：
 对称密码 非对称密码 协议  而RSA密码属于非对称密码，公钥密码。RSA也是现代密码学的代表性的内容部分，那么非常经典的RSA密码就是一个什么样的密码呢？
首先，要搞清楚什么是RSA密码：
RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）在1977年一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。
1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中提出了一个与之等效的算法，但该算法被列入机密，直到1997年才得到公开。
对极大整数做因数分解的难度决定了 RSA 算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的 RSA 钥匙才可能被强力方式破解。到目前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的。^2^
RSA加密算法就是三个人提出的一个非对称加密的算法，是一种公钥算法。RSA加密算法进行加密的信息具有良好的安全性和可靠性，正确地使用RSA加密算法可以应对互联网上的大多数针对密码进行的攻击。
RSA加密算法的具体内容是什么呢？
（这里借鉴一下阮一峰的个人博客进行说明）^3^
 （1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。
（2）甲方获取乙方的公钥，然后用它对信息加密。
（3）乙方得到加密后的信息，用私钥解密。
 这是非对称加密的总体流程，简单来说就是公钥加密，私钥解密的算法模式。而RSA加密算法就是公钥算法中的代表性的算法，这经典算法的基本原理还是比较简单易懂的。
RSA加密算法需要一点点的数学基础，也可以说是数论基础。
数学基础 模运算：模运算也可以说是用取余的运算方式
$$ a \equiv b(mod; m)$$
这是最简单的模运算公式，也可以使用简单的Python语法实现：
b = a % m # python语言中%可以进行取余运算 整数环：模运算的延申，无论模运算中的数怎么加减乘除都在模的一个整数环中。</description>
            <content type="html"><![CDATA[<h1 id="清茶一盏-公杯斟茗">清茶一盏 公杯斟茗</h1>
<blockquote>
<p>上下运杯，左右轻斟</p>
<p>公杯，私茗，香满阑</p>
<p>清茶，浓茶，甘润田</p>
<p>然君闻几何？</p>
</blockquote>
<p>要谈谈RSA加密算法，不妨先聊聊密码学的发展历史和密码学的历程。</p>
<p>密码学早在公元前400多年就已经产生，人类使用密码的历史几乎与使用文字的时间一样长，密码学的发展大致可以分为 3 个阶段: 1949 年之前的古典密码学阶段; 1949 年至 1975 年密码学成为科学的分支; 1976 年以后对称密钥密码算法得到进一步发展，产生了密码学的新方向—公钥密码学。1976 年，W.Diffie 和 M.Hellman 在发表的文章“密码学的新方向”中首次公开提出了公钥密码( Public-key Cryptography) 的概念。公钥密码的提出实现了加密密钥和解密密钥之间的独立，解决了对称密码体制中通信双方必须共享密钥的问题，在密码学界具有划时代的意义。^1^</p>
<p>密码学的历史非常悠久，但是密码学的发展速度并不是非常迅速，直到信息时代的到来以及网络空间安全面临着巨大的威胁，密码学得到了前所未有的飞速发展，RSA公钥密码就是其中的代表。密码学中研究的对象有大致三类：</p>
<ol>
<li>对称密码</li>
<li>非对称密码</li>
<li>协议</li>
</ol>
<p>而RSA密码属于非对称密码，公钥密码。RSA也是现代密码学的代表性的内容部分，那么非常经典的RSA密码就是一个什么样的密码呢？</p>
<p>首先，要搞清楚什么是RSA密码：</p>
<p>RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）在1977年一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p>
<p>1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中提出了一个与之等效的算法，但该算法被列入机密，直到1997年才得到公开。</p>
<p>对极大整数做因数分解的难度决定了 RSA 算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的 RSA 钥匙才可能被强力方式破解。到目前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的。^2^</p>
<p>RSA加密算法就是三个人提出的一个非对称加密的算法，是一种公钥算法。RSA加密算法进行加密的信息具有良好的安全性和可靠性，正确地使用RSA加密算法可以应对互联网上的大多数针对密码进行的攻击。</p>
<p>RSA加密算法的具体内容是什么呢？</p>
<p>（这里借鉴一下阮一峰的个人博客进行说明）^3^</p>
<blockquote>
<p>（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。</p>
<p>（2）甲方获取乙方的公钥，然后用它对信息加密。</p>
<p>（3）乙方得到加密后的信息，用私钥解密。</p>
</blockquote>
<p>这是非对称加密的总体流程，简单来说就是公钥加密，私钥解密的算法模式。而RSA加密算法就是公钥算法中的代表性的算法，这经典算法的基本原理还是比较简单易懂的。</p>
<p>RSA加密算法需要一点点的数学基础，也可以说是数论基础。</p>
<h3 id="数学基础">数学基础</h3>
<p><strong>模运算：模运算也可以说是用取余的运算方式</strong></p>
<p>$$ a \equiv b(mod; m)$$</p>
<p>这是最简单的模运算公式，也可以使用简单的Python语法实现：</p>
<pre tabindex="0"><code>b = a % m # python语言中%可以进行取余运算
</code></pre><p><strong>整数环：模运算的延申，无论模运算中的数怎么加减乘除都在模的一个整数环中。</strong></p>
<p>在数论的概念中，模运算主要是针对自然数进行的研究，模运算也是如此。可以把整数环想象成一个钟表，钟表有12个数字，无论怎么加减乘除钟表的数字，指针始终都指在钟表的环中。</p>
<p>这里用简单的数学语言进行表示：</p>
<p>$$ a + c\equiv e(mod;12)$$</p>
<p>$$ a \cdot c\equiv f(mod;12)$$</p>
<p>当然也可以使用Python语法进行表示：</p>
<pre tabindex="0"><code>e = (a+c) % 12
f = (a*c) % 12
</code></pre><p><strong>欧拉函数：求小于该数的素数个数多少的问题的最佳解决方案。</strong></p>
<p>欧拉函数也是数论里面比较重要的概念，欧拉函数的特点使得RSA加密算法有良好的加密性和安全性。</p>
<p>在讲欧拉函数之前，先阐述一下素数的概念：</p>
<blockquote>
<p>素数也叫质数，素数就是只能被1和自身整除的数</p>
<p>互素也叫互质，如果两个数的最大公因数是1，那么则称这两个数是互素的</p>
</blockquote>
<p>什么是欧拉函数呢？</p>
<p>欧拉函数一般使用 φ(n) 表示，一般来说是分为两种情况的：</p>
<p>（1） n是一个素数：</p>
<p>$$ \varphi (n)= n-1$$</p>
<p>（2）n不是一个素数，但是n是两个素数的乘积：</p>
<p>$$ \varphi (n) = (p-1) \cdot (q-1) $$</p>
<p>这就是欧拉函数，和欧拉函数一起使用的还有一个欧拉定理：</p>
<p>在数论中，欧拉定理,（也称费马-欧拉定理）是一个关于同余的性质。欧拉定理表明，若n,a为正整数，且n,a互质，则:</p>
<p>$$ a ^{\varphi(n)} \equiv 1(mod; n) $$</p>
<p>这些大致就是欧拉函数和欧拉定理的大致内容，都是规律性的总结，在RSA算法中加以使用就可以了。</p>
<p><strong>模反元素：如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1。</strong>^3^</p>
<p>这里可以使用数学语言进行解释一下：</p>
<p>$$ a \cdot b \equiv 1(mod;m) $$</p>
<p>就是两个数进行模乘法运算得到的结果是1的两个数互为模反元素，也叫逆元。</p>
<p>在这个等式中，可以说a是b的逆元，也可以说是b是a的逆元。</p>
<p><strong>最后一个数学概念：单向函数，公钥加密算法的核心原理</strong></p>
<p>单向函数就是由x求y简单，而由y求x比较困难的函数叫做单向函数：</p>
<p>$$ y = f(x) $$</p>
<p>$$ x = f^{-1}(y) $$</p>
<p>由于单向函数概念的出现，使得公钥加密私钥解密成为现实。</p>
<p>可是单向函数只是使加密变得容易，而并没有使解密变得容易。于是一个陷门的概念提出使公钥加密私钥解密的加密算法模式真正的变成现实。</p>
<p>什么是陷门呢？</p>
<p>陷门的概念就好比网络安全的后门，单向函数解密不是非常困难嘛，而陷门就是一个特殊的数值可以使单向函数进行解密变得简单。于是陷门就可以作为私钥进行解密。</p>
<p>RSA公钥加密算法的数学知识大致就是这些了。</p>
<p>下面，来聊一聊RSA公钥加密算法的具体过程。</p>
<h3 id="rsa加密算法">RSA加密算法</h3>
<ol>
<li>首先随机选择两个不相等的素数p和q</li>
<li>计算p和q的乘积n</li>
<li>计算n的欧拉函数发φ(n)</li>
<li>随机选择一个整数e，e满足的条件是：1&lt;e&lt;φ(n)</li>
<li>计算e对于φ(n)的模反元素d</li>
<li>将n和e封装成公钥，将n和d封装成私钥</li>
</ol>
<p>具体流程用数学的语言描述：</p>
<p>$$ 1. \quad  p , q$$</p>
<p>$$ 2. \quad p\cdot q = n $$</p>
<p>$$ 3. \quad \varphi (n) $$</p>
<p>$$ 4. \quad  1&lt;e&lt;\varphi (n) $$</p>
<p>$$ 5. \quad e \cdot d \equiv 1 (mod; \varphi (n)) $$</p>
<p>$$ 6. \quad (n , e) , (n , d) $$</p>
<p>当然也可使用python语句进行设计：4</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">from</span> gmpy2 <span style="color:#f92672">import</span> mpz
<span style="color:#f92672">import</span> binascii

rs <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>random_state()

<span style="color:#75715e">#生成大素数（0-2^1024位）</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_prime</span>():
    p <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>mpz_urandomb(rs,<span style="color:#ae81ff">1024</span>)         <span style="color:#75715e">#随机生成一个0~2^1024位的数</span>
    <span style="color:#66d9ef">while</span> <span style="color:#f92672">not</span> gmpy2<span style="color:#f92672">.</span>is_prime(p):            <span style="color:#75715e">#判断生成的数是否是素数</span>
        p <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>mpz_urandomb(rs,<span style="color:#ae81ff">1024</span>)     
    <span style="color:#66d9ef">return</span> p

<span style="color:#75715e">#生成密钥e,d</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_e_d</span>(phi):
    e <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>mpz_random(rs,phi)            
    <span style="color:#66d9ef">while</span> gmpy2<span style="color:#f92672">.</span>gcd(e,phi) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>:
        e <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>mpz_random(rs,phi)        <span style="color:#75715e">#随机生成一个0~phi的,与phi互素的数</span>
    d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)                 <span style="color:#75715e">#生成d</span>
    <span style="color:#66d9ef">return</span> e,d

<span style="color:#75715e">#rsa加密</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encrypt</span>(plain_text,e,n):
    m <span style="color:#f92672">=</span> mpz(binascii<span style="color:#f92672">.</span>hexlify(plain_text<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;utf-8&#39;</span>)), <span style="color:#ae81ff">16</span>)
    cipher_text <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>powmod(m,e,n)
    <span style="color:#66d9ef">return</span> cipher_text

<span style="color:#75715e">#rsa解密</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt</span>(cipher_text,d,n):
    m <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>powmod(cipher_text,d,n)
    plain_text <span style="color:#f92672">=</span> binascii<span style="color:#f92672">.</span>unhexlify(format(m, <span style="color:#e6db74">&#39;x&#39;</span>))<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>)
    <span style="color:#66d9ef">return</span> plain_text

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    p <span style="color:#f92672">=</span> create_prime()
    q <span style="color:#f92672">=</span> create_prime()
    n <span style="color:#f92672">=</span> p <span style="color:#f92672">*</span> q
    phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
    e,d <span style="color:#f92672">=</span> get_e_d(phi)
    plain_text <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;请输入明文：&#34;</span>)
    cipher_text <span style="color:#f92672">=</span> encrypt(plain_text,e,n)
    print(<span style="color:#e6db74">&#34;RSA加密后的密文是：</span><span style="color:#e6db74">%x</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">%</span>cipher_text)
    plain_text1 <span style="color:#f92672">=</span> decrypt(cipher_text,d,n)
    print(<span style="color:#e6db74">&#34;RSA解密后的明文是：</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(plain_text1))
</code></pre></div><p>RSA的加密流程非常简单，只需要大致记忆就可以对RSA算法流程非常清晰，而且明了于心。同时，也会出现一些疑问，这么安全的加密算法会有什么样的漏洞会在CTF比赛中让CTF选手进行攻击呢？</p>
<p>无论再安全的算法，都有可以破解的漏洞存在，“没有绝对安全的系统”。时代在进步，密码学算法也在一步一步的提升，下一篇将揭示RSA公钥密码的常见攻击手段。</p>
<h3 id="参考">参考</h3>
<ol>
<li><a href="https://blog.csdn.net/jiang_xinxing/article/details/89360638">密码学发展简史-CSDN</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/RSA">RSA加密算法-维基百科</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">RSA算法原理-阮一峰</a></li>
<li><a href="https://blog.csdn.net/weixin_43790779/article/details/105999977">python实现RSA算法</a></li>
</ol>
<p>闲聊到此为止，来喝杯茶可好？</p>
]]></content>
        </item>
        
        <item>
            <title>BUUCTF CRYPTO [1~16] writeup</title>
            <link>https://zcodetea.github.io/posts/buuctf-crypto-1-16_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 08:12:56 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/buuctf-crypto-1-16_writeup/</guid>
            <description>日常刷题喝茶的平时生活，整理一下题目的思路，捋一捋密码学。
BUUCTF是国内另一个比较不错的CTF的刷题平台，是由北京联合大学创建并维护的CTF大型同性交流沟通的平台，页面制作还是蛮美观滴！
BUUCTF页面
BUUCTF的整体难度是由简单变难的一个过程，前面的题目通常都是比较简单的题目，来看看这次日常的题目：
题目
这次是16道题目：
 MD5 Url编码 一眼就解密 看我回旋踢 摩丝 password 变异凯撒 Quoted-printable Rabbit 篱笆墙的影子 RSA 丢失的MD5 Alice与Bob rsarsa 大帝的密码武器 Windows系统密码  MD5 看题目应该是考察MD5加密的暴力破解
什么是MD5加密？
MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。这套算法的程序在 RFC 1321 中被加以规范。
将数据（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。
1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的资料，专家一般建议改用其他算法，如SHA-2。2004年，证实MD5算法无法防止碰撞攻击（英语：Collision_attack），因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。[1]
看看题目描述：
题目描述
下载附件，查看附件内容：
附件内容
附件中给出一段加密数据：e00cf25ad42683b3df678c61f42c6bda
根据题目，应该是MD5加密，去解密网站
进行解密。
cmd5
题目描述中，要求以flag{}形式进行提交，故flag就是flag{admin1}
这道题目考察md5加密的相关知识，签到题。
Url编码 看题目应该是考察Url编码的解码
什么是Url编码？
百分号编码（英语：Percent-encoding），又称：URL编码（URL encoding）是特定上下文的统一资源定位符 （URL）的编码机制，实际上也适用于统一资源标志符（URI）的编码。也用于为 application/x-www-form-urlencoded MIME准备数据，因为它用于通过HTTP的请求操作（request）提交HTML表单数据。[2]
看看题目描述：
题目描述
下载附件，查看附件内容：
附件内容
一段编码的字段：%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d
使用url解码工具解码，也可以使用python进行解码。我个人习惯使用python脚本进行url编码解码：
import urllib.parse cipher = &amp;#39;%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d&amp;#39; print(urllib.parse.unquote(cipher)) 运行脚本就可以出结果：
解码后也就是flag数据：flag{and 1=1}</description>
            <content type="html"><![CDATA[<p>日常刷题喝茶的平时生活，整理一下题目的思路，捋一捋密码学。</p>
<p>BUUCTF是国内另一个比较不错的CTF的刷题平台，是由北京联合大学创建并维护的CTF大型同性交流沟通的平台，页面制作还是蛮美观滴！</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-58-1024x717.png" alt="img">BUUCTF页面</p>
<p>BUUCTF的整体难度是由简单变难的一个过程，前面的题目通常都是比较简单的题目，来看看这次日常的题目：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-59.png" alt="img">题目</p>
<p>这次是16道题目：</p>
<ul>
<li>MD5</li>
<li>Url编码</li>
<li>一眼就解密</li>
<li>看我回旋踢</li>
<li>摩丝</li>
<li>password</li>
<li>变异凯撒</li>
<li>Quoted-printable</li>
<li>Rabbit</li>
<li>篱笆墙的影子</li>
<li>RSA</li>
<li>丢失的MD5</li>
<li>Alice与Bob</li>
<li>rsarsa</li>
<li>大帝的密码武器</li>
<li>Windows系统密码</li>
</ul>
<h2 id="md5">MD5</h2>
<p>看题目应该是考察MD5加密的暴力破解</p>
<p>什么是MD5加密？</p>
<p>MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。这套算法的程序在 RFC 1321 中被加以规范。</p>
<p>将数据（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。</p>
<p>1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的资料，专家一般建议改用其他算法，如SHA-2。2004年，证实MD5算法无法防止碰撞攻击（英语：Collision_attack），因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。[1]</p>
<p>看看题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-60.png" alt="img"></p>
<p>题目描述</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-61.png" alt="img"></p>
<p>附件内容</p>
<p>附件中给出一段加密数据：e00cf25ad42683b3df678c61f42c6bda</p>
<p>根据题目，应该是MD5加密，去<a href="https://www.cmd5.com/">解密网站</a></p>
<p>进行解密。</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-62.png" alt="img">cmd5</p>
<p>题目描述中，要求以flag{}形式进行提交，故flag就是flag{admin1}</p>
<p>这道题目考察md5加密的相关知识，签到题。</p>
<h2 id="url编码">Url编码</h2>
<p>看题目应该是考察Url编码的解码</p>
<p>什么是Url编码？</p>
<p>百分号编码（英语：Percent-encoding），又称：URL编码（URL encoding）是特定上下文的统一资源定位符 （URL）的编码机制，实际上也适用于统一资源标志符（URI）的编码。也用于为 application/x-www-form-urlencoded MIME准备数据，因为它用于通过HTTP的请求操作（request）提交HTML表单数据。[2]</p>
<p>看看题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-63.png" alt="img"></p>
<p>题目描述</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-64.png" alt="img"></p>
<p>附件内容</p>
<p>一段编码的字段：%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d</p>
<p>使用url解码工具解码，也可以使用python进行解码。我个人习惯使用python脚本进行url编码解码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> urllib.parse

cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%66%</span><span style="color:#e6db74">6c</span><span style="color:#e6db74">%61%</span><span style="color:#e6db74">67%7b</span><span style="color:#e6db74">%61%</span><span style="color:#e6db74">6e</span><span style="color:#e6db74">%64%</span><span style="color:#e6db74">20</span><span style="color:#e6db74">%31%</span><span style="color:#e6db74">3d</span><span style="color:#e6db74">%31%</span><span style="color:#e6db74">7d&#39;</span>
print(urllib<span style="color:#f92672">.</span>parse<span style="color:#f92672">.</span>unquote(cipher))
</code></pre></div><p>运行脚本就可以出结果：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-65.png" alt="img"></p>
<p>解码后也就是flag数据：flag{and 1=1}</p>
<p>故本题的flag是flag{and 1=1}</p>
<p>题目主要考察URL编码，签到题。</p>
<h2 id="一眼就解密">一眼就解密</h2>
<p>题目给不了太多提示</p>
<p>直接点开题目描述看内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-66.png" alt="img"></p>
<p>题目描述</p>
<p>看题目描述中的字符串，字符串的样子像是base64编码：ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=</p>
<p>这里一个脚本进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64

cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=&#34;</span>
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

plainer <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(cipher)
print plainer
</code></pre></div><p>运行程序求解得到：flag{THE_FLAG_OF_THIS_STRING}</p>
<p>故本题的flag是flag{THE_FLAG_OF_THIS_STRING}</p>
<p>题目考察base64编码，签到题。</p>
<h2 id="看我回旋踢">看我回旋踢</h2>
<p>看题目，暂时想不出什么密码相关联的内容。</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-67.png" alt="img"></p>
<p>题目描述</p>
<p>只提示了题目提交的flag数据的格式信息</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-68.png" alt="img"></p>
<p>附件内容</p>
<p>看附件给出的字符形式像是替换密码加密的数据，最容易联想到的替换密码就是凯撒密码，尝试使用凯撒密码进行解密：（这里一个脚本求解凯撒密码）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">dict_list <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
    dict_list<span style="color:#f92672">.</span>append(chr(ord(<span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">+</span>i))

cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}&#34;</span>

<span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>n)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]
        <span style="color:#66d9ef">else</span>:
            plainer <span style="color:#f92672">+=</span> i

    print plainer
</code></pre></div><blockquote>
<p>凯撒密码的算法思路，在上一篇XCTF CRYPTO的WP中有提到，具体内容可以访问上一篇：</p>
<p><a href="http://zkinghar.top/?p=463">XCTF-CRYPTO-新手区 writeup</a></p>
</blockquote>
<p>运行脚本程序，得到一堆凯撒解密的结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">synt<span style="color:#f92672">{</span>5pq1004q-86n5-46q8-o720-oro5on0417r1<span style="color:#f92672">}</span>
rxms<span style="color:#f92672">{</span>5op1004p-86m5-46p8-n720-nqn5nm0417q1<span style="color:#f92672">}</span>
qwlr<span style="color:#f92672">{</span>5no1004o-86l5-46o8-m720-mpm5ml0417p1<span style="color:#f92672">}</span>
pvkq<span style="color:#f92672">{</span>5mn1004n-86k5-46n8-l720-lol5lk0417o1<span style="color:#f92672">}</span>
oujp<span style="color:#f92672">{</span>5lm1004m-86j5-46m8-k720-knk5kj0417n1<span style="color:#f92672">}</span>
ntio<span style="color:#f92672">{</span>5kl1004l-86i5-46l8-j720-jmj5ji0417m1<span style="color:#f92672">}</span>
mshn<span style="color:#f92672">{</span>5jk1004k-86h5-46k8-i720-ili5ih0417l1<span style="color:#f92672">}</span>
lrgm<span style="color:#f92672">{</span>5ij1004j-86g5-46j8-h720-hkh5hg0417k1<span style="color:#f92672">}</span>
kqfl<span style="color:#f92672">{</span>5hi1004i-86f5-46i8-g720-gjg5gf0417j1<span style="color:#f92672">}</span>
jpek<span style="color:#f92672">{</span>5gh1004h-86e5-46h8-f720-fif5fe0417i1<span style="color:#f92672">}</span>
iodj<span style="color:#f92672">{</span>5fg1004g-86d5-46g8-e720-ehe5ed0417h1<span style="color:#f92672">}</span>
hnci<span style="color:#f92672">{</span>5ef1004f-86c5-46f8-d720-dgd5dc0417g1<span style="color:#f92672">}</span>
gmbh<span style="color:#f92672">{</span>5de1004e-86b5-46e8-c720-cfc5cb0417f1<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>5cd1004d-86a5-46d8-b720-beb5ba0417e1<span style="color:#f92672">}</span>
ekzf<span style="color:#f92672">{</span>5bc1004c-86z5-46c8-a720-ada5az0417d1<span style="color:#f92672">}</span>
djye<span style="color:#f92672">{</span>5ab1004b-86y5-46b8-z720-zcz5zy0417c1<span style="color:#f92672">}</span>
cixd<span style="color:#f92672">{</span>5za1004a-86x5-46a8-y720-yby5yx0417b1<span style="color:#f92672">}</span>
bhwc<span style="color:#f92672">{</span>5yz1004z-86w5-46z8-x720-xax5xw0417a1<span style="color:#f92672">}</span>
agvb<span style="color:#f92672">{</span>5xy1004y-86v5-46y8-w720-wzw5wv0417z1<span style="color:#f92672">}</span>
zfua<span style="color:#f92672">{</span>5wx1004x-86u5-46x8-v720-vyv5vu0417y1<span style="color:#f92672">}</span>
yetz<span style="color:#f92672">{</span>5vw1004w-86t5-46w8-u720-uxu5ut0417x1<span style="color:#f92672">}</span>
xdsy<span style="color:#f92672">{</span>5uv1004v-86s5-46v8-t720-twt5ts0417w1<span style="color:#f92672">}</span>
wcrx<span style="color:#f92672">{</span>5tu1004u-86r5-46u8-s720-svs5sr0417v1<span style="color:#f92672">}</span>
vbqw<span style="color:#f92672">{</span>5st1004t-86q5-46t8-r720-rur5rq0417u1<span style="color:#f92672">}</span>
uapv<span style="color:#f92672">{</span>5rs1004s-86p5-46s8-q720-qtq5qp0417t1<span style="color:#f92672">}</span>
tzou<span style="color:#f92672">{</span>5qr1004r-86o5-46r8-p720-psp5po0417s1<span style="color:#f92672">}</span>
</code></pre></div><p>在解密的字符列表中，找到符合flag格式的字符段：</p>
<p>flag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}</p>
<p>故本题的flag是：flag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}</p>
<p>题目主要考察凯撒密码，签到题。</p>
<h2 id="摩丝">摩丝</h2>
<p>看题目，可以联想到Morse电码，这题目应该是摩尔斯密码的解密题目</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-69.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述只说了flag{}的格式，下载附件并查看：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-70.png" alt="img"></p>
<p>附件内容</p>
<p>果然是摩尔斯密码，这里一个脚本解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">dict_list <span style="color:#f92672">=</span> {
        <span style="color:#e6db74">&#39;.-&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
        <span style="color:#e6db74">&#39;-...&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
        <span style="color:#e6db74">&#39;-.-.&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
        <span style="color:#e6db74">&#39;-..&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
        <span style="color:#e6db74">&#39;.&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
        <span style="color:#e6db74">&#39;..-.&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
        <span style="color:#e6db74">&#39;--.&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
        <span style="color:#e6db74">&#39;....&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>,
        <span style="color:#e6db74">&#39;..&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
        <span style="color:#e6db74">&#39;.---&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
        <span style="color:#e6db74">&#39;-.-&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
        <span style="color:#e6db74">&#39;.-..&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
        <span style="color:#e6db74">&#39;--&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
        <span style="color:#e6db74">&#39;-.&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
        <span style="color:#e6db74">&#39;---&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>,
        <span style="color:#e6db74">&#39;.--.&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,
        <span style="color:#e6db74">&#39;--.-&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
        <span style="color:#e6db74">&#39;.-.&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
        <span style="color:#e6db74">&#39;...&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
        <span style="color:#e6db74">&#39;-&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
        <span style="color:#e6db74">&#39;..-&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
        <span style="color:#e6db74">&#39;...-&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
        <span style="color:#e6db74">&#39;.--&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
        <span style="color:#e6db74">&#39;-..-&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>,
        <span style="color:#e6db74">&#39;-.--&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
        <span style="color:#e6db74">&#39;--..&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>,
        <span style="color:#e6db74">&#39;-----&#39;</span>:<span style="color:#e6db74">&#39;0&#39;</span>,
        <span style="color:#e6db74">&#39;.----&#39;</span>:<span style="color:#e6db74">&#39;1&#39;</span>,
        <span style="color:#e6db74">&#39;..---&#39;</span>:<span style="color:#e6db74">&#39;2&#39;</span>,
        <span style="color:#e6db74">&#39;...--&#39;</span>:<span style="color:#e6db74">&#39;3&#39;</span>,
        <span style="color:#e6db74">&#39;....-&#39;</span>:<span style="color:#e6db74">&#39;4&#39;</span>,
        <span style="color:#e6db74">&#39;.....&#39;</span>:<span style="color:#e6db74">&#39;5&#39;</span>,
        <span style="color:#e6db74">&#39;-....&#39;</span>:<span style="color:#e6db74">&#39;6&#39;</span>,
        <span style="color:#e6db74">&#39;--...&#39;</span>:<span style="color:#e6db74">&#39;7&#39;</span>,
        <span style="color:#e6db74">&#39;---..&#39;</span>:<span style="color:#e6db74">&#39;8&#39;</span>,
        <span style="color:#e6db74">&#39;----.&#39;</span>:<span style="color:#e6db74">&#39;9&#39;</span>,
        <span style="color:#e6db74">&#39;..--.-&#39;</span>:<span style="color:#e6db74">&#39;_&#39;</span>
        }
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;.. .-.. --- ...- . -.-- --- ..-&#34;</span>
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
    plainer <span style="color:#f92672">+=</span> dict_list[i]

print plainer<span style="color:#f92672">.</span>upper()
print plainer<span style="color:#f92672">.</span>lower()
</code></pre></div><blockquote>
<p>摩尔斯电码的详细介绍，在上一篇XCTF CRYPTO的WP中有提到，具体内容可以访问上一篇：</p>
<p><a href="http://zkinghar.top/?p=463">XCTF-CRYPTO-新手区 writeup</a></p>
</blockquote>
<p>执行一下代码，得到两个数据：</p>
<pre tabindex="0"><code>ILOVEYOU
iloveyou
</code></pre><p>两个数据都可能是flag数据，我记得这道题目的flag数据好像是用大写的，即：flag{ILOVEYOU}，也有可能错。</p>
<p>题目主要考察摩尔斯电码相关知识，签到题。</p>
<h2 id="password">password</h2>
<p>看题目应该是与密码有关系的题目</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-71.png" alt="img"></p>
<p>题目描述</p>
<p>只有flag数据提交格式的相关信息，下载附件并打开：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-72.png" alt="img">附件内容</p>
<p>看到附件内容里面的信息，可以大致判断这道题目应该是社会工程学题目。</p>
<p>什么是社会工程学：</p>
<p>在计算机科学，社会工程学指的是通过与他人的合法交流，来使其心理受到影响，做出某些动作或者是透露一些机密信息的方式。这通常被认为是欺诈他人以收集信息、行骗和入侵计算机系统的行为。在英美普通法系，这一行为一般是被认作侵犯隐私权的。</p>
<p>历史上，社会工程学是隶属于社会学，不过其影响他人心理的效果引起了计算机安全专家的注意。3</p>
<p>简单来说，社会工程学就是利用人性的弱点来进行分析，得到关键性的信息的方式。社会工程学也就是互联网安全体系中存在的威胁性漏洞。</p>
<p>根据题目的信息，可以猜测flag数据可能是flag{zs19900315}或flag{19900315zs}</p>
<p>经过测试发现，flag数据是flag{zs19900315}</p>
<p>题目主要考察社会工程学的知识，签到题。</p>
<h2 id="变异凯撒">变异凯撒</h2>
<p>看题目应该是凯撒密码考察</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-73.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述一如既往的朴素，只告诉了提交的格式</p>
<p>下载附件，并查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-74.png" alt="img"></p>
<p>附件内容</p>
<p>密文中有很多编码的字符，字典集可能不是26字母表，可能是ascii编码表</p>
<p>分析一下附件的加密逻辑：（这里我写了一个小脚本）</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-75.png" alt="img">分析</p>
<p>分析发现移位是ascii码的移位方式，而且移位的数据是一个递增的数列，5作为初始数列，以1为差值的等差数列形式。明文的数值比密文的数值大一些。分析完毕。</p>
<p>这里还是一个脚本解决问题：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;afZ_r9VYfScOeO_UL^RWUc&#34;</span>
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

num <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
    plainer <span style="color:#f92672">+=</span>chr(ord(i)<span style="color:#f92672">+</span>num)
    num <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

print plainer
</code></pre></div><p>执行脚本，得到flag数据：flag{Caesar_variation}</p>
<p>故flag数据是flag{Caesar_variation}</p>
<p>题目主要考察凯撒密码的原理，简单题。</p>
<h2 id="quoted-printable">Quoted-printable</h2>
<p>题目暂时看不出什么样的信息，题目翻译下来就是字符集</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-76.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述还是一如既往的buu的风格，没有什么提示性的描述</p>
<p>直接下载附件，并查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-77.png" alt="img">附件内容</p>
<p>看到内容，感觉是熟悉的味道：E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6</p>
<p>这里写个小脚本试试16进制解码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6&#34;</span>
cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;=&#39;</span>)
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(cipher_arr)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>)
print plainer
</code></pre></div><p>执行编写的脚本，得到数据：那你也很棒哦</p>
<p>这个数据应该就是flag数据了，对数据进行一些修饰得到flag：flag{那你也很棒哦}</p>
<p>故flag是flag{那你也很棒哦}</p>
<p>本题主要考察hex编码，签到题。</p>
<h2 id="rabbit">Rabbit</h2>
<p>看到题目名字还是有些懵懵的，搜索一些发现题目应该是在说Rabbit流密码。</p>
<p>什么是流密码？什么是Rabbit密码？</p>
<p>在密码学中，流密码（英语：Stream cipher），又译为流加密、资料流加密，是一种对称加密算法，加密和解密双方使用相同伪随机加密数据流（pseudo-random stream）作为密钥，明文数据每次与密钥数据流顺次对应加密，得到密文数据流。实践中数据通常是一个位（bit）并用异或（xor）操作加密。</p>
<p>该算法解决了对称加密完善保密性（perfect secrecy）的实际操作困难。“完善保密性”由克劳德·香农于1949年提出。由于完善保密性要求密钥长度不短于明文长度，故而实际操作存在困难，改由较短数据流通过特定算法得到密钥流。[4]</p>
<p>流密码就是基于随机数的对称加密算法，Rabbit密码是流密码的一种：</p>
<p>Rabbit流密码（Rabbit Stream Cipher）简介</p>
<p>Rabbit流密码是由Cryptico公司（<a href="http://www.cryptico.com/">http://www.cryptico.com</a>）设计的，密钥长度128位，</p>
<p>最大加密消息长度为2 Bytes，即16 TB，若消息超过该长度，则需要更换密钥对剩下的消息进行处理。它是目前安全性较高，加/解密速度比较高效的流密码之一，在各种处理器平台上都有不凡的表现。[5]</p>
<p>Cryptico公司好像是已经搜索不到了，而且那个网站的域名也在进行拍卖，以目前的情况，我还找不到有关Rabbit密码的相关算法信息。但是，通过论文的查阅找到了，rabbit算法的内容：[6]</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-82.png" alt="img"></p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-83.png" alt="img"></p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-84.png" alt="img"></p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-85.png" alt="img"></p>
<p>Rabbit密码的加密算法还是比较复杂的，不过通过搜索引擎找到了破解Rabbit密码的现成脚本</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-86.png" alt="img"></p>
<p>题目描述</p>
<p>一如既往没有什么卵用的题目描述</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-87.png" alt="img"></p>
<p>附件内容</p>
<p>附件内容里面是一组密文：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI
</code></pre></div><p>这里使用在线解密工具进行解密：https://www.sojson.com/encrypt_rabbit.html</p>
<p>（本菜鸡不会写，嘤嘤嘤）</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-88-1024x242.png" alt="img">     解密页面</p>
<p>得到了一个明文：Cute_Rabbit</p>
<p>对得到的明文进行简单的修饰：flag{Cute_Rabbit}</p>
<p>故flag是flag{Cute_Rabbit}</p>
<p>本题主要考察Rabbit流密码加密，简单题</p>
<h2 id="篱笆墙的影子">篱笆墙的影子</h2>
<p>看到题目，这题应该是考察栅栏密码。（篱笆墙也只能联想到栅栏密码了）</p>
<blockquote>
<p>栅栏密码的详细介绍，在上一篇XCTF CRYPTO的WP中有提到，具体内容可以访问上一篇：</p>
<p><a href="http://zkinghar.top/?p=463">XCTF-CRYPTO-新手区 writeup</a></p>
</blockquote>
<p>点开题目描述</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-89.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述就是在说，还是熟悉的味道，唔~。然而也没什么卵用</p>
<p>下载附件，并查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-90.png" alt="img"></p>
<p>附件内容</p>
<p>附件里面的文件中是一段熟悉密文：felhaagv{ewtehtehfilnakgw}</p>
<p>由于不确定是W型还是传统型，直接使用之前写的两个脚本都跑一下：</p>
<p>传统型栅栏密码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">fhetlehhafaiglvn<span style="color:#f92672">{</span>aekwgtwe<span style="color:#f92672">}</span>
feiewlltnheaahkatggewvh<span style="color:#f92672">}{</span>f
fvtae<span style="color:#f92672">{</span>eklehghwfwati<span style="color:#f92672">}</span>aelghn
fgeiwevhl<span style="color:#f92672">}</span>l<span style="color:#f92672">{</span>tnheeaawhkatfg
fawen<span style="color:#f92672">}</span>egthalvefkh<span style="color:#f92672">{</span>higaetlw
fa<span style="color:#f92672">{</span>ehnweaehfa<span style="color:#f92672">}</span>lgwtikhvtelg
fa<span style="color:#f92672">{</span>ehnweaehfa<span style="color:#f92672">}</span>lgwtikhvtelg
fhgeeeiaweavwhhlk<span style="color:#f92672">}</span>la<span style="color:#f92672">{</span>ttfng
fhgeeeiaweavwhhlk<span style="color:#f92672">}</span>la<span style="color:#f92672">{</span>ttfng
fhgeeeiaweavwhhlk<span style="color:#f92672">}</span>la<span style="color:#f92672">{</span>ttfng
fhgeeeiaweavwhhlk<span style="color:#f92672">}</span>la<span style="color:#f92672">{</span>ttfng
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
</code></pre></div><p>W型栅栏密码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">fhetlehhafaiglvn<span style="color:#f92672">{</span>aekwgtwe<span style="color:#f92672">}</span>
fvn<span style="color:#f92672">{</span>eeawltkehhgtaewhaf<span style="color:#f92672">}</span>igl
fatkegevhgf<span style="color:#f92672">{</span>leiwlwhtn<span style="color:#f92672">}</span>aeah
fatfgieaeghlwntvl<span style="color:#f92672">{</span>ea<span style="color:#f92672">}</span>khehw
fh<span style="color:#f92672">{</span>higlteaeawenwahtglvefk<span style="color:#f92672">}</span>
fh<span style="color:#f92672">{</span>ehnwafheaeawtik<span style="color:#f92672">}</span>gletglv
fla<span style="color:#f92672">{</span>ehnwafhegheavwtik<span style="color:#f92672">}</span>glet
fla<span style="color:#f92672">{</span>ttfnwaieeegheavwhhlk<span style="color:#f92672">}</span>g
fla<span style="color:#f92672">{</span>ttfng<span style="color:#f92672">}</span>waieeegheavwhhlk
fla<span style="color:#f92672">{</span>ttflag<span style="color:#f92672">}</span>wknieeegheavwhh
fla<span style="color:#f92672">{</span>theflag<span style="color:#f92672">}</span>wknihteegheavw
flavetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>ghea
fehavetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>gal
felhavetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>ga
felhaavetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>g
felhaagvetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>
felhaagv<span style="color:#f92672">{</span>etheflag<span style="color:#f92672">}</span>wknihtew
felhaagv<span style="color:#f92672">{</span>ewtheflag<span style="color:#f92672">}</span>wknihte
</code></pre></div><p>在跑出来的数据中寻找有关flag的相关信息，经查找发现flag数据是：flag{wethinkwehavetheflag}</p>
<p>故本题的flag就是flag{wethinkwehavetheflag}</p>
<p>题目主要考察栅栏密码，签到题。</p>
<p>本题的解题脚本代码还是扔出来一下吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrype</span>(cipher,key):
    cipher_len <span style="color:#f92672">=</span> len(cipher)
    <span style="color:#66d9ef">if</span> cipher_len<span style="color:#f92672">%</span>key <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">/</span> key
    <span style="color:#66d9ef">else</span>:
        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">/</span> key <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
    result <span style="color:#f92672">=</span> {x:<span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(key)}
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(cipher_len):
        a <span style="color:#f92672">=</span> i<span style="color:#f92672">%</span>key;
        result<span style="color:#f92672">.</span>update({a:result[a]<span style="color:#f92672">+</span>cipher[i]})
    plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(key):
        plainer <span style="color:#f92672">=</span> plainer <span style="color:#f92672">+</span> result[i]
    print plainer

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;felhaagv</span><span style="color:#e6db74">{ewtehtehfilnakgw}</span><span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">20</span>):
    decrype(cipher,n)
</code></pre></div><h2 id="rsa">RSA</h2>
<p>看题目应该是主要考察RSA非对称加密算法的问题，密码学核心考察的问题。</p>
<blockquote>
<p>RSA加密算法的详细介绍，在上一篇XCTF CRYPTO的WP中有提到，具体内容可以访问上一篇：</p>
<p><a href="http://zkinghar.top/?p=463">XCTF-CRYPTO-新手区 writeup</a></p>
</blockquote>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-91.png" alt="img">题目描述</p>
<p>没有太多有用的信息，一如既往</p>
<p>下载附件，并查看附件：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-92.png" alt="img">题目描述</p>
<p>应该是比较简单的RSA题目，这里就是求解一下逆元。</p>
<p>这里写一个脚本进行求解：（使用到了gmpy2库）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2

p <span style="color:#f92672">=</span> <span style="color:#ae81ff">473398607161</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">4511491</span>
n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">17</span>

ni <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">if</span>(gmpy2<span style="color:#f92672">.</span>is_prime(n)):
    ni <span style="color:#f92672">=</span> n<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">else</span>:
    ni <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)

d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,ni)
print(d)
</code></pre></div><p>执行脚本，得到运算出的d：125631357777427553</p>
<p>故flag是flag{125631357777427553}</p>
<p>本题主要考察RSA加密算法的简单应用，简单题。</p>
<h2 id="丢失的md5">丢失的MD5</h2>
<p>这道题目，应该是和MD5相关</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-93.png" alt="img"></p>
<p>题目描述</p>
<p>一如既往，没有什么东西</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-94.png" alt="img">附件内容</p>
<p>发现是一个python文件，尝试执行一下这个python代码</p>
<p>获得一段数据：e9032994dabac08080091151380478a2</p>
<p>这段数据是不是flag呢？</p>
<p>康一康源代码吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> hashlib
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>,<span style="color:#ae81ff">127</span>):
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>,<span style="color:#ae81ff">127</span>):
        <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>,<span style="color:#ae81ff">127</span>):
            m<span style="color:#f92672">=</span>hashlib<span style="color:#f92672">.</span>md5()
            m<span style="color:#f92672">.</span>update(<span style="color:#e6db74">&#39;TASC&#39;</span><span style="color:#f92672">+</span>chr(i)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;O3RJMV&#39;</span><span style="color:#f92672">+</span>chr(j)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;WDJKX&#39;</span><span style="color:#f92672">+</span>chr(k)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;ZM&#39;</span>)
            des<span style="color:#f92672">=</span>m<span style="color:#f92672">.</span>hexdigest()
            <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;e9032&#39;</span> <span style="color:#f92672">in</span> des <span style="color:#f92672">and</span> <span style="color:#e6db74">&#39;da&#39;</span> <span style="color:#f92672">in</span> des <span style="color:#f92672">and</span> <span style="color:#e6db74">&#39;911513&#39;</span> <span style="color:#f92672">in</span> des:
                print des
</code></pre></div><p>源代码中找不到有关flag的相关信息，（这题好难呀），那flag很可能就是python的运行结果</p>
<p>尝试加工一下运行数据：flag{e9032994dabac08080091151380478a2}</p>
<p>尝试提交一下flag，发现成功了（这题真简单）</p>
<p>本题考察python2代码的相关知识，签到题。（谁能想到运行结果就是flag呢？）</p>
<h2 id="alice与bob">Alice与Bob</h2>
<p>Alice和Bob是密码学中经常使用来进行密码描述的人物名称，所以这道题目可能是加密相关。不过，也推断不出更多的信息。</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-95.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述终于是有用了，看样子，这道题目也是一道签到题目。</p>
<p>将题目描述进行提炼即可解密：</p>
<ol>
<li>98554799767,请分解为两个素数</li>
<li>分解后，小的放前面，大的放后面，合成一个新的数字</li>
<li>进行md5的32位小写哈希，提交答案</li>
<li>得到的 flag 请包上 flag{} 提交</li>
</ol>
<p>根据步骤一步一步的来就好</p>
<p>首先需要进行大数分解，这里使用sagemath进行大数分解：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-97.png" alt="img"></p>
<p>得到两个素数101999和966233</p>
<p>然后进行数字组合，小的放前面，大的放后面，即101999966233</p>
<p>然后进行md5加密，这里写一个简单的脚本进行MD5加密（对脚本的热爱）：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> hashlib
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;101999966233&#34;</span>
m <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5()
m<span style="color:#f92672">.</span>update(plainer)
cipher <span style="color:#f92672">=</span> m<span style="color:#f92672">.</span>hexdigest()

print cipher
</code></pre></div><p>执行脚本，得到md5加密的结果：d450209323a847c8d01c6be47c81811a</p>
<p>对MD5的加密结果进行修饰：flag{d450209323a847c8d01c6be47c81811a}</p>
<p>故flag就是flag{d450209323a847c8d01c6be47c81811a}</p>
<p>题目主要考察md5加密和大数分解，签到题</p>
<h2 id="rsarsa">rsarsa</h2>
<p>看题目应该也是考察RSA加密算法的题目</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-98.png" alt="img"></p>
<p>题目描述</p>
<p>没有什么有用的信息，也只是告诉了提交flag的数据格式</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-99.png" alt="img">附件内容</p>
<p>应该是RSA数学计算的题目类型</p>
<p>提炼出附件内容中给到的重要数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483
q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407
e = 65537
c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034
</code></pre></div><p>这里使用一个脚本来解决问题：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2

p <span style="color:#f92672">=</span> <span style="color:#ae81ff">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>

n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
<span style="color:#66d9ef">if</span>(gmpy2<span style="color:#f92672">.</span>is_prime(n)):
    ni <span style="color:#f92672">=</span> n <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">else</span>:
    ni <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)

d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,ni)
m <span style="color:#f92672">=</span> pow(c,d,n)

print(m)
</code></pre></div><p>运行一下脚本，得到数据：5577446633554466577768879988</p>
<p>对得到的数据进行修饰：flag{5577446633554466577768879988}</p>
<p>故flag就是flag{5577446633554466577768879988}</p>
<p>本题主要考察RSA加密算法相关知识，简单题</p>
<h2 id="大帝的密码武器">大帝的密码武器</h2>
<p>看到题目，感觉有点意思，但是暂时联想不到有用的信息</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-100.png" alt="img"></p>
<p>一如既往，题目描述不能给到太多的信息，仅仅只给到了提交flag的数据格式</p>
<p>下载附件：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-101.png" alt="img">附件</p>
<p>附件是个zip文件，无法打开，尝试修改文件扩展名为zip：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-102.png" alt="img"></p>
<p>打开zip文件：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-103.png" alt="img"></p>
<p>发现有两个文件，依次打开两个文件：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-104.png" alt="img">附件内容</p>
<p>一个题目tip信息，一个需要进行解密的密文</p>
<p>题目tip如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。
 以下密文被解开后可以获得一个有意义的单词：FRPHEVGL
 你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交。
</code></pre></div><p>根据描述，罗马三巨头应该自然而然就联想到了凯撒加密。</p>
<p>这里先使用一个脚本解决位移向量问题：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">dict_list <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
    dict_list<span style="color:#f92672">.</span>append(chr(ord(<span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">+</span>i))

cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;FRPHEVGL&#34;</span><span style="color:#f92672">.</span>lower()

<span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>n)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]
        <span style="color:#66d9ef">else</span>:
            plainer <span style="color:#f92672">+=</span> i

    print(plainer<span style="color:#f92672">+</span><span style="color:#e6db74">&#34; index:&#34;</span><span style="color:#f92672">+</span>str(n))
</code></pre></div><p>执行脚本，得到数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">frphevgl index:0
eqogdufk index:1
dpnfctej index:2
comebsdi index:3
bnldarch index:4
amkczqbg index:5
zljbypaf index:6
ykiaxoze index:7
xjhzwnyd index:8
wigyvmxc index:9
vhfxulwb index:10
ugewtkva index:11
tfdvsjuz index:12
security index:13
rdbtqhsx index:14
qcaspgrw index:15
pbzrofqv index:16
oayqnepu index:17
nzxpmdot index:18
mywolcns index:19
lxvnkbmr index:20
kwumjalq index:21
jvtlizkp index:22
iuskhyjo index:23
htrjgxin index:24
gsqifwhm index:25
</code></pre></div><p>发现位移13是一个有意义的单词：<code>security index:13</code></p>
<p>再写一个小脚本求解密文：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ComeChina&#34;</span><span style="color:#f92672">.</span>lower()
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">caesar</span>(n,cipher):
    dict_list <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
        dict_list<span style="color:#f92672">.</span>append(chr(ord(<span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">+</span>i))
    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>n)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]
        <span style="color:#66d9ef">else</span>:
            plainer <span style="color:#f92672">+=</span> i

    <span style="color:#66d9ef">return</span> plainer

print caesar(<span style="color:#ae81ff">13</span>,cipher)
</code></pre></div><p>执行脚本，获得数据：pbzrpuvan</p>
<p>对得到的数据进行修饰：flag{pbzrpuvan}</p>
<p>故flag就是flag{pbzrpuvan}</p>
<p>本题主要考察Caesar加密的相关知识，简单题</p>
<h2 id="windows系统密码">Windows系统密码</h2>
<p>Windows系统密码，根据本菜鸡的知识Windows密码也是使用hash的方式进行加密的，所以本题应该也是在考察hash密码的破解。</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-105.png" alt="img"></p>
<p>题目描述</p>
<p>一如既往，没有什么有用的信息</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-106.png" alt="img">附件内容</p>
<p>附件给出了4对哈希值：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
 ctf:1002:06af9108f2e1fecf144e2e8adef09efd:a7fcb22a88038f35a8f39d503e7f0062:::
 Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
 SUPPORT_388945a0:1001:aad3b435b51404eeaad3b435b51404ee:bef14eee40dffbc345eeb3f58e290d56:::
</code></pre></div><p>这里解密去<a href="https://cmd5.com/">cmd5</a>网站进行解密，经过反复尝试发现只有</p>
<p>a7fcb22a88038f35a8f39d503e7f0062可以解密出hash数值：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-107.png" alt="img"></p>
<p>hash解密结果就是：good-luck</p>
<p>对hash解密结果进行修饰：flag{good-luck}</p>
<p>故flag就是flag{good-luck}</p>
<p>本题主要考察Windows系统的数据加密方式，简单题</p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://wiwiki.kfd.me/wiki/MD5">MD5-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E7%99%BE%E5%88%86%E5%8F%B7%E7%BC%96%E7%A0%81#%E5%AF%B9%E6%9C%AA%E4%BF%9D%E7%95%99%E5%AD%97%E7%AC%A6%E7%9A%84%E7%99%BE%E5%88%86%E5%8F%B7%E7%BC%96%E7%A0%81">百分号编码-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6">社会工程学-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E4%B8%B2%E6%B5%81%E5%8A%A0%E5%AF%86%E6%B3%95">流密码-维基百科</a></li>
<li><a href="https://zhuanlan.kanxue.com/article-391.htm">Rabbit流密码</a></li>
<li>[张振广,胡予濮,王璐.流密码Rabbit的安全性分析<a href="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFD2011&amp;filename=JSJA201102025&amp;v=m%25mmd2BEiEfT6K6g4XiqkBrHZV8%25mmd2BQ3%25mmd2FWgalODChICHN0Kg3Z7tvJfyIonq%25mmd2BnnJbBSP3Jb">J].计算机科学,2011,38(02):100-102.</a></li>
</ol>
<p>BUUCTF前面的题目偏向简单题目和签到题目，大多数都在考察古典密码，对称密码的相关知识。</p>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>XCTF CRYPTO novice_writeup</title>
            <link>https://zcodetea.github.io/posts/xctf-crypto-novice_writeup/</link>
            <pubDate>Fri, 25 Jun 2021 22:01:32 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/xctf-crypto-novice_writeup/</guid>
            <description>这次又是XCTF平台，没错，我又来无聊谈谈解题了
首先先来一张XCTF的首页图片，来开启本次的writeup文章：
xctf首页
这次我们要搞哪些题目的思路呢？这次还是新手区，不过是不一样的新手局，这回盘一盘密码学。
crypto新手区题目
题目数量不变，依然是12道题目：
 base64 Caesar Morse 幂数加密 Railfence 不仅仅是Morse 混合编码 easy_RSA easychallenge 转轮机加密 Normal_RSA esay_ECC  在开始进行密码学的题目问题思路分析的开始之前，首先进行一部分知识的了解。
密码学的CTF题目通常都是以附件形式来进行考察的。不像网页需要进入到平台设定的docker靶机中
CTF中密码学题目目前的趋势是越来越难，而且分值越来越高。密码学的题目往往分为编码题目和密码学题目，而密码学题目又会分为古典密码学题目和现代密码学题目。
密码学早在公元前400多年就已经产生，人类使用密码的历史几乎与使用文字的时间一样长，密码学的发展大致可以分为 3 个阶段: 1949 年之前的古典密码学阶段; 1949 年至 1975 年密码学成为科学的分支; 1976 年以后对称密钥密码算法得到进一步发展，产生了密码学的新方向—公钥密码学。1976 年，W.Diffie 和 M.Hellman 在发表的文章“密码学的新方向”中首次公开提出了公钥密码( Public-key Cryptography) 的概念。公钥密码的提出实现了加密密钥和解密密钥之间的独立，解决了对称密码体制中通信双方必须共享密钥的问题，在密码学界具有划时代的意义。[1]
CTF中的编码题目往往会考察一些常用的编码类型，当然也会出现一些比较偏的编码方式进行编码。
常用的编码方式有：ASCii编码，Base64编码，Bin编码，Hex编码，URL编码以及HTML编码。
CTF中的古典密码学题目可以通过查找相关的密码学算法来了解与密码学相关内容的更多信息，通过网络方式进行解决，或者获取一些灵感。古典密码学经常会考察最基础的凯撒密码，栅栏密码，或者替换密码。这些古典密码学的处理思路和方式都比较相似，而且网络已经有很多处理这些密码的算法工具来进行加密和解密。
CTF中的现代密码学题目主要会考察RSA加密算法，ECC加密算法等经典的现代密码学算法。也会有一些新的加密算法题目，这种题目往往需要进行算法分析，通过加密算法的语法逻辑来设计解密算法通过逆元的思维求出明文。
关于密码学的更多内容，可以访问：http://eol.sicau.edu.cn:8080/ 来了解更多密码学相关的内容。
下面就开始本回的题目！
base64 看到这道题目，猜想这道题目可能是考察base64编码方式的密码学题目
进入道题目页面，看看是否可以得到一点tip：
base64题目
没有什么特别的tip，只是给题目一个情景化的描述，没有太多有用信息的描述。
直接下载附件内容，并打开附件文件进行查看：
附件文件
文件内容有一段字符型文字：Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9
根据题目的内容，尝试使用一下base64进行解码，可以使用在线的解码工具，也可以使用python脚本进行解码。这里编写简单的python脚本进行解码：
# python3 脚本 import base64 cipher=&amp;#39;Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9&amp;#39; plainer= base64.b64decode(cipher) print(str(plainer,&amp;#39;utf-8&amp;#39;)) # python2 脚本 import base64 cipher=&amp;#39;Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9&amp;#39; plainer= base64.</description>
            <content type="html"><![CDATA[<p>这次又是XCTF平台，没错，我又来无聊谈谈解题了</p>
<p>首先先来一张XCTF的首页图片，来开启本次的writeup文章：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-86.png" alt="image-86"></p>
<p>xctf首页</p>
<p>这次我们要搞哪些题目的思路呢？这次还是新手区，不过是不一样的新手局，这回盘一盘密码学。</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-87.png" alt="image-87"></p>
<p>crypto新手区题目</p>
<p>题目数量不变，依然是12道题目：</p>
<ul>
<li>base64</li>
<li>Caesar</li>
<li>Morse</li>
<li>幂数加密</li>
<li>Railfence</li>
<li>不仅仅是Morse</li>
<li>混合编码</li>
<li>easy_RSA</li>
<li>easychallenge</li>
<li>转轮机加密</li>
<li>Normal_RSA</li>
<li>esay_ECC</li>
</ul>
<p>在开始进行密码学的题目问题思路分析的开始之前，首先进行一部分知识的了解。</p>
<p>密码学的CTF题目通常都是以附件形式来进行考察的。不像网页需要进入到平台设定的docker靶机中</p>
<p>CTF中密码学题目目前的趋势是越来越难，而且分值越来越高。密码学的题目往往分为编码题目和密码学题目，而密码学题目又会分为古典密码学题目和现代密码学题目。</p>
<p>密码学早在公元前400多年就已经产生，人类使用密码的历史几乎与使用文字的时间一样长，密码学的发展大致可以分为 3 个阶段: 1949 年之前的古典密码学阶段; 1949 年至 1975 年密码学成为科学的分支; 1976 年以后对称密钥密码算法得到进一步发展，产生了密码学的新方向—公钥密码学。1976 年，W.Diffie 和 M.Hellman 在发表的文章“密码学的新方向”中首次公开提出了公钥密码( Public-key Cryptography) 的概念。公钥密码的提出实现了加密密钥和解密密钥之间的独立，解决了对称密码体制中通信双方必须共享密钥的问题，在密码学界具有划时代的意义。[1]</p>
<p>CTF中的编码题目往往会考察一些常用的编码类型，当然也会出现一些比较偏的编码方式进行编码。</p>
<p>常用的编码方式有：ASCii编码，Base64编码，Bin编码，Hex编码，URL编码以及HTML编码。</p>
<p>CTF中的古典密码学题目可以通过查找相关的密码学算法来了解与密码学相关内容的更多信息，通过网络方式进行解决，或者获取一些灵感。古典密码学经常会考察最基础的凯撒密码，栅栏密码，或者替换密码。这些古典密码学的处理思路和方式都比较相似，而且网络已经有很多处理这些密码的算法工具来进行加密和解密。</p>
<p>CTF中的现代密码学题目主要会考察RSA加密算法，ECC加密算法等经典的现代密码学算法。也会有一些新的加密算法题目，这种题目往往需要进行算法分析，通过加密算法的语法逻辑来设计解密算法通过逆元的思维求出明文。</p>
<p>关于密码学的更多内容，可以访问：http://eol.sicau.edu.cn:8080/ 来了解更多密码学相关的内容。</p>
<p>下面就开始本回的题目！</p>
<h2 id="base64">base64</h2>
<p>看到这道题目，猜想这道题目可能是考察base64编码方式的密码学题目</p>
<p>进入道题目页面，看看是否可以得到一点tip：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image.png" alt="img">base64题目</p>
<p>没有什么特别的tip，只是给题目一个情景化的描述，没有太多有用信息的描述。</p>
<p>直接下载附件内容，并打开附件文件进行查看：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-1-1024x120.png" alt="img">附件文件</p>
<p>文件内容有一段字符型文字：Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9</p>
<p>根据题目的内容，尝试使用一下base64进行解码，可以使用在线的解码工具，也可以使用python脚本进行解码。这里编写简单的python脚本进行解码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python3 脚本</span>
<span style="color:#f92672">import</span> base64

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9&#39;</span>
plainer<span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(cipher)
print(str(plainer,<span style="color:#e6db74">&#39;utf-8&#39;</span>))
<span style="color:#75715e"># python2 脚本</span>
<span style="color:#f92672">import</span> base64

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9&#39;</span>
plainer<span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(cipher)
print(plainer)
</code></pre></div><p>然后运行python脚本进行解码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">python base64_decode.py <span style="color:#75715e"># 这里创建的python2脚本文件名是base64_decode.py</span>

python3 base64_decode3.py <span style="color:#75715e"># 这里创建的python3脚本文件名是base64_decode3.py</span>
</code></pre></div><p>执行命令后查看执行结果</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-2.png" alt="img"></p>
<p>成功拿到flag数据，这道题目是道签到题。</p>
<p>这道题目主要考察base64编码知识，没有什么难度，就是一道签到题目。</p>
<h2 id="caesar">Caesar</h2>
<p>看到题目，自然就联系到Caesar cipher，翻译成中文就是凯撒密码。</p>
<p>所有解决这道题目的关键就是凯撒密码的密码逻辑了</p>
<p>凯撒密码（英语：Caesar cipher），或称凯撒加密、凯撒变换、变换加密，是一种最简单且最广为人知的加密技术。凯撒密码是一种替换加密技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。这个加密方法是以罗马共和时期凯撒的名字命名的，据称当年凯撒曾用此方法与其将军们进行联系。[2]</p>
<p>点开题目的页面，看看是否有些有用的信息</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-3-1024x301.png" alt="img">Caesar题目</p>
<p>从题目描述中依旧获取不到更多的信息，没有太多有用的信息可以帮助解题</p>
<p>直接下载附件并进行查看：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-4-1024x134.png" alt="img">附件内容</p>
<p>附件内容中，只有一段加密文字：oknqdbqmoq{kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz}</p>
<p>根据题目这应该是凯撒加密算法，可以使用在线的工具进行解密，也可以使用python脚本进行解决，这里使用python脚本进行解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2脚本</span>
dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;oknqdbqmoq</span><span style="color:#e6db74">{kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz}</span><span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>j)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]

        <span style="color:#66d9ef">else</span>:
            plainer <span style="color:#f92672">+=</span> i
    print plainer
<span style="color:#75715e"># pyhton3脚本</span>
dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;oknqdbqmoq</span><span style="color:#e6db74">{kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz}</span><span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>j)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]

        <span style="color:#66d9ef">else</span>:
            plainer <span style="color:#f92672">+=</span> i
    print(plainer)
</code></pre></div><p>这道题目的python2和python3脚本差别不大，虽然密码学的大多数题目还是推荐使用python2进行编写，但是对于使用sagemath的密码学题目，python3还是比较适合。下面运行python脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2 </span>
python Caesar_decode<span style="color:#f92672">.</span>py
<span style="color:#75715e"># python3</span>
python3 Caesar_decode3<span style="color:#f92672">.</span>py
</code></pre></div><p>查看终端显示的运行结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-5.png" alt="img">运行结果</p>
<p>从运行结果发现：cyberpeace{you_have_learned_caesar_encryption} 应该是有明显含义的解密的文段，很可能是这道题目的flag。尝试进行提交，发现这段数据就是flag数据。</p>
<p>这道题目解决，题目没有什么难度，算是签到题。</p>
<p>题目主要考察凯撒密码的相关知识，非常直接的解密方法，没有什么难度。</p>
<h2 id="morse">Morse</h2>
<p>看到题目Morse，自然而然便联想到了摩尔斯电码。这道题目有可能是在考察摩尔斯电码。</p>
<p>点开题目页面，看看题目描述中会有什么有用的信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-6-1024x280.png" alt="img">Morse题目</p>
<p>题目描述依然是大片无用的信息，但是最后提示了提交flag的格式和内容要求。</p>
<p>直接打开附件并进行查看需要进行解密的内容：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-7-1024x101.png" alt="img">附件内容</p>
<p>文件内容非常像bin方式的加密，但是考虑到题目Morse，应该是Morse电码方式的加密</p>
<p>首先，需要了解什么摩尔斯电码：</p>
<p>摩尔斯电码（英语：Morse code）是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。是由美国人艾尔菲德·维尔与萨缪尔·摩尔斯在1836年发明。[3]</p>
<p>摩尔斯电码是一种早期的数字化通信形式，但是它不同于现代只使用0和1两种状态的二进制代码，它的代码包括五种：</p>
<ol>
<li>点（·）：1</li>
<li>划（-）：111</li>
<li>字符内部的停顿（在点和划之间）：0</li>
<li>字符之间的停顿：000</li>
<li>单词之间的停顿：0000000</li>
</ol>
<p>根据摩尔斯电码的知识点，这道题目可以使用在线工具进行解密，也可以使用python脚本进行解密。这里使用python脚本进行解密：</p>
<blockquote>
<p>这里的密文文段和摩尔斯代码的文段不太一致，需要进行一下代换。这里使用 1 代表 - ，0 代表 ·</p>
<p>来进行摩尔斯电码的解密算法的设计和编写。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2脚本</span>
dict_list <span style="color:#f92672">=</span> {
             <span style="color:#e6db74">&#39;01&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
             <span style="color:#e6db74">&#39;1000&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
             <span style="color:#e6db74">&#39;1010&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
             <span style="color:#e6db74">&#39;100&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
             <span style="color:#e6db74">&#39;0&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
             <span style="color:#e6db74">&#39;0010&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
             <span style="color:#e6db74">&#39;110&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
             <span style="color:#e6db74">&#39;0000&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>,
             <span style="color:#e6db74">&#39;00&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
             <span style="color:#e6db74">&#39;0111&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
             <span style="color:#e6db74">&#39;101&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
             <span style="color:#e6db74">&#39;0100&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
             <span style="color:#e6db74">&#39;11&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
             <span style="color:#e6db74">&#39;10&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
             <span style="color:#e6db74">&#39;111&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>,
             <span style="color:#e6db74">&#39;0110&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,
             <span style="color:#e6db74">&#39;1101&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
             <span style="color:#e6db74">&#39;010&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
             <span style="color:#e6db74">&#39;000&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
             <span style="color:#e6db74">&#39;1&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
             <span style="color:#e6db74">&#39;001&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
             <span style="color:#e6db74">&#39;0001&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
             <span style="color:#e6db74">&#39;011&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
             <span style="color:#e6db74">&#39;1001&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>,
             <span style="color:#e6db74">&#39;1011&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
             <span style="color:#e6db74">&#39;1100&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>
             }

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110&#34;</span>
plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>

cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
    plainer <span style="color:#f92672">+=</span> dict_list[i]

print plainer
<span style="color:#75715e"># python3脚本</span>
dict_list <span style="color:#f92672">=</span> {
             <span style="color:#e6db74">&#39;01&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
             <span style="color:#e6db74">&#39;1000&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
             <span style="color:#e6db74">&#39;1010&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
             <span style="color:#e6db74">&#39;100&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
             <span style="color:#e6db74">&#39;0&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
             <span style="color:#e6db74">&#39;0010&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
             <span style="color:#e6db74">&#39;110&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
             <span style="color:#e6db74">&#39;0000&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>,
             <span style="color:#e6db74">&#39;00&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
             <span style="color:#e6db74">&#39;0111&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
             <span style="color:#e6db74">&#39;101&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
             <span style="color:#e6db74">&#39;0100&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
             <span style="color:#e6db74">&#39;11&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
             <span style="color:#e6db74">&#39;10&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
             <span style="color:#e6db74">&#39;111&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>,
             <span style="color:#e6db74">&#39;0110&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,
             <span style="color:#e6db74">&#39;1101&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
             <span style="color:#e6db74">&#39;010&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
             <span style="color:#e6db74">&#39;000&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
             <span style="color:#e6db74">&#39;1&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
             <span style="color:#e6db74">&#39;001&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
             <span style="color:#e6db74">&#39;0001&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
             <span style="color:#e6db74">&#39;011&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
             <span style="color:#e6db74">&#39;1001&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>,
             <span style="color:#e6db74">&#39;1011&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
             <span style="color:#e6db74">&#39;1100&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>
             }

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110&#34;</span>
plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>

cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
    plainer <span style="color:#f92672">+=</span> dict_list[i]

print(plainer)
</code></pre></div><p>这道题目的python2和python3的求解脚本差别也不是非常大，执行脚本后直接查看执行结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-8.png" alt="img">执行结果</p>
<p>发现执行结果是一句有意义的句子，应该就是flag数据了。然后再利用题目描述所说的信息对执行出来的flag数据进行个加帽处理：cyberpeace{morsecodeissointeresting}</p>
<p>题目解决，题目也是签到题，没有什么难度。</p>
<p>题目主要考察了摩尔斯电码的解密方法，以及摩尔斯电码相关知识，签到题。</p>
<h2 id="幂数加密">幂数加密</h2>
<p>看到题目的时候有些懵逼，本菜鸡不太了解什么的是幂数加密，于是只能求助一下搜索引擎。</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-9.png" alt="img">二进制幂数加密-百度百科</p>
<p>好像是一个加密方法，这种加密方法大致逻辑是：</p>
<ol>
<li>将明文对应字母序列</li>
<li>对字母序列进行处理加密</li>
<li>使用间隔符进行间隔</li>
<li>获得密文</li>
</ol>
<p>现在知道这种加密方法，点开题目的描述看看是否可以获取到更多的信息</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-10-1024x284.png" alt="img">幂数加密题目</p>
<p>题目描述中仅仅告诉了需要提交的flag格式，和flag数据类型。题目描述的其他信息都是无用的信息。</p>
<p>将附件下载下来并查看附件中的密文信息内容：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-11-1024x69.png" alt="img">附件资料</p>
<p>发现密文数据不太对劲呀，二进制幂数加密的数据都是01234的形式，这个密文的形式是01248的形式</p>
<p>于是作为菜鸡的我只能去再次求助于搜索引擎了，查到了云影密码：</p>
<h3 id="01248云影密码">01248云影密码</h3>
<p>原理：有1，2，4，8这四个数字，可以通过加法来用这四个数字表示0-9中的任何一个数字，列如0=28， 也就是0=2+8，同理7=124， 9=18。这样之后再用1-26来表示26个英文字母，就有了密文与明文之间的对应关系。引入0来作为间隔，以免出现混乱。所以云影密码又叫“01248密码”。[4]</p>
<p>看来密文是云影密码没错了，由于云影密码是比较少见的密码，而是加密逻辑比较简单，网络上几乎没有什么可用的在线工具。这道题目可以使用手工解密，也可以使用python脚本进行解密。这里使用python脚本进行解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;8842101220480224404014224202480122&#34;</span>
cipher_array <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;0&#34;</span>)
cipher_arr <span style="color:#f92672">=</span> []
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_array:
    k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(i)):
        k <span style="color:#f92672">+=</span> int(i[j])
    cipher_arr<span style="color:#f92672">.</span>append(k)
<span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> cipher_arr:
    flag <span style="color:#f92672">+=</span> dict_list[m<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

print flag
<span style="color:#75715e"># python3</span>
dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;8842101220480224404014224202480122&#34;</span>
cipher_array <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;0&#34;</span>)
cipher_arr <span style="color:#f92672">=</span> []
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_array:
    k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(i)):
        k <span style="color:#f92672">+=</span> int(i[j])
    cipher_arr<span style="color:#f92672">.</span>append(k)
<span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> cipher_arr:
    flag <span style="color:#f92672">+=</span> dict_list[m<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

print(flag)
</code></pre></div><p>执行python脚本并查看终端输出的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-12.png" alt="img"></p>
<p>获取到明文，然后对明文加个flag数据形式的帽子并进行字母大写：cyberpeace{WELLDONE}</p>
<p>这道题目解决，题目属于签到题，没有什么难度</p>
<p>这道题目主要考察幂数加密的知识，（云影密码的设计逻辑其实和幂数加密相似，只是在设计过程进行了修改。）题目难度比较低·，签到题。</p>
<h2 id="railfence">Railfence</h2>
<p>看到题目大致知道考察的是什么密码的加密算法了，题目是栅栏，应该就是栅栏密码的密码知识考察</p>
<p>什么是栅栏密码呢？</p>
<p>所谓栅栏密码，就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。（一般不超过30个，也就是一、两句话）。加密原理：</p>
<ol>
<li>把将要传递的信息中的字母交替排成上下两行。</li>
<li>再将下面一行字母排在上面一行的后边，从而形成一段密码。[5]</li>
</ol>
<p>栅栏密码大致就是一种分组密码的一种密码算法，便于更好理解栅栏密码，这里有一个例子：</p>
<p>明文：THE LONGEST DAY MUST HAVE AN END5</p>
<p>加密：</p>
<ol>
<li>把将要传递的信息中的字母交替排成上下两行。
T E O G S D Y U T A E N N
H L N E T A M S H V A E D</li>
<li>密文：将下面一行字母排在上面一行的后边。
TEOGSDYUTAENN HLNETAMSHVAED</li>
</ol>
<p>解密：</p>
<p>先将密文分为两行</p>
<p>T E O G S D Y U T A E N N</p>
<p>H L N E T A M S H V A E D</p>
<p>再按上下上下的顺序组合成一句话明文：</p>
<p>THE LONGEST DAY MUST HAVE AN EN</p>
<p>现在知识也大致了解了，点开题目揭开这道题目的真实面目吧！</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-13-1024x266.png" alt="img">Railfence题目</p>
<p>题目描述中也暗示了是栅栏密码的信息</p>
<p>于是直接下载附件，看看附件中的描述内容密文究竟是啥样：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-14-1024x120.png" alt="img">附件内容</p>
<p>密文形式看样子像是解密出来直接就是flag数据。</p>
<p>这道题目可以使用在线工具进行解密，也可以使用python脚本进行解密。这里还是一如既往，使用python脚本进行解密：（这道题目比较狗，是W型的栅栏密码解密）</p>
<blockquote>
<p>栅栏密码有两种类型：一种是传统型栅栏密码，一种是W型栅栏密码，W型栅栏密码比较复杂。</p>
</blockquote>
<p>传统型栅栏密码脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrype</span>(cipher,key):
    cipher_len <span style="color:#f92672">=</span> len(cipher)
    <span style="color:#66d9ef">if</span> cipher_len<span style="color:#f92672">%</span>key <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">/</span> key
    <span style="color:#66d9ef">else</span>:
        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">/</span> key <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
    result <span style="color:#f92672">=</span> {x:<span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(key)}
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(cipher_len):
        a <span style="color:#f92672">=</span> i<span style="color:#f92672">%</span>key;
        result<span style="color:#f92672">.</span>update({a:result[a]<span style="color:#f92672">+</span>cipher[i]})
    plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(key):
        plainer <span style="color:#f92672">=</span> plainer <span style="color:#f92672">+</span> result[i]
    print plainer

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TEOGSDYUTAENNHLNETAMSHVAED&#34;</span>
<span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">10</span>):
    decrype(cipher,n)
</code></pre></div><p>W型栅栏密码脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fence</span>(lst, numrails):
    fence <span style="color:#f92672">=</span> [[<span style="color:#66d9ef">None</span>] <span style="color:#f92672">*</span> len(lst) <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(numrails)]
    rails <span style="color:#f92672">=</span>list(range(numrails <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>))<span style="color:#f92672">+</span> list(range(numrails <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
    <span style="color:#66d9ef">for</span> n, x <span style="color:#f92672">in</span> enumerate(lst):
        fence[rails[n <span style="color:#f92672">%</span> len(rails)]][n] <span style="color:#f92672">=</span> x
    <span style="color:#66d9ef">return</span> [c <span style="color:#66d9ef">for</span> rail <span style="color:#f92672">in</span> fence <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> rail <span style="color:#66d9ef">if</span> c <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>]

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode</span>(text, n):
    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(fence(text, n))

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode</span>(text, n):
    rng <span style="color:#f92672">=</span> range(len(text))
    pos <span style="color:#f92672">=</span> fence(rng, n)
    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(text[pos<span style="color:#f92672">.</span>index(n)] <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> rng)

z <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ccehgyaefnpeoobe</span><span style="color:#e6db74">{lcirg}</span><span style="color:#e6db74">epriec_ora_g&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">10</span>):
    y <span style="color:#f92672">=</span> decode(z,i)
    print(y) 
</code></pre></div><p>这道题目是W型的栅栏密码，这里使用W型栅栏密码的脚本进行破解：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-15.png" alt="img"></p>
<p>成功跑出flag数据：cyberpeace{railfence_cipher_gogogo}</p>
<p>题目解决，这道题目属于简单题目</p>
<p>题目主要考察对栅栏密码的知识全面性考察，如果知识不全面可能会有一点绕，不容易解出。难度算是简单题目。</p>
<h2 id="不仅仅是morse">不仅仅是Morse</h2>
<p>看题目应该知道这道题目不是非常简单的样子，应该是一个复合加密的题目，就是涉及多种加密算法的加密。</p>
<p>点开题目页面，希望可以获取到更多关于题目的tip：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-16-1024x205.png" alt="img">题目页面</p>
<p>题目描述中有两个重要的tip信息：flag的数据格式和flag是一种食物的单词。对于解题有主要作用的是flag数据是一种食物的单词。</p>
<p>下面打开附件，进行解密：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-17.png" alt="img">附件内容</p>
<p>看来是一个摩尔斯电码的加密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">--/.-/-.--/..--.-/-..././..--.-/..../.-/...-/./..--.-/.-/-./---/-/...././.-./..--.-/-.././-.-./---/-.././..../..../..../..../.-/.-/.-/.-/.-/-.../.-/.-/-.../-.../-.../.-/.-/-.../-.../.-/.-/.-/.-/.-/.-/.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/.-/.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../-.../.-/.-/.-/-.../-.../.-/.-/-.../.-/.-/.-/.-/-.../.-/-.../.-/.-/-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/-.../-.../.-/.-/-.../-.../-.../.-/-.../.-/.-/.-/-.../.-/-.../.-/-.../-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../-.../.-/.-/-.../-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/-.../-.../.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/-.../-.../.-
</code></pre></div><p>首先先编写一个摩尔斯电码的解密脚本：（当然也可以使用在线的摩尔斯电码解密工具进行解密）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
dict_list <span style="color:#f92672">=</span> {
	<span style="color:#e6db74">&#39;.-&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
    <span style="color:#e6db74">&#39;-...&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
    <span style="color:#e6db74">&#39;-.-.&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
    <span style="color:#e6db74">&#39;-..&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
    <span style="color:#e6db74">&#39;.&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
    <span style="color:#e6db74">&#39;..-.&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
    <span style="color:#e6db74">&#39;--.&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
    <span style="color:#e6db74">&#39;....&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>,
    <span style="color:#e6db74">&#39;..&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
    <span style="color:#e6db74">&#39;.---&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
    <span style="color:#e6db74">&#39;-.-&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
    <span style="color:#e6db74">&#39;.-..&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
    <span style="color:#e6db74">&#39;--&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
    <span style="color:#e6db74">&#39;-.&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
    <span style="color:#e6db74">&#39;---&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>,
    <span style="color:#e6db74">&#39;.--.&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,
    <span style="color:#e6db74">&#39;--.-&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
    <span style="color:#e6db74">&#39;.-.&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
    <span style="color:#e6db74">&#39;...&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
    <span style="color:#e6db74">&#39;-&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
    <span style="color:#e6db74">&#39;..-&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
    <span style="color:#e6db74">&#39;...-&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
    <span style="color:#e6db74">&#39;.--&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
    <span style="color:#e6db74">&#39;-..-&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>,
    <span style="color:#e6db74">&#39;-.--&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
    <span style="color:#e6db74">&#39;--..&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>,
    <span style="color:#e6db74">&#39;..--.-&#39;</span>:<span style="color:#e6db74">&#39;_&#39;</span>
    }
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;--/.-/-.--/..--.-/-..././..--.-/..../.-/...-/./..--.-/.-/-./---/-/...././.-./..--.-/-.././-.-./---/-.././..../..../..../..../.-/.-/.-/.-/.-/-.../.-/.-/-.../-.../-.../.-/.-/-.../-.../.-/.-/.-/.-/.-/.-/.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/.-/.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../-.../.-/.-/.-/-.../-.../.-/.-/-.../.-/.-/.-/.-/-.../.-/-.../.-/.-/-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/-.../-.../.-/.-/-.../-.../-.../.-/-.../.-/.-/.-/-.../.-/-.../.-/-.../-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../-.../.-/.-/-.../-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/-.../-.../.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/-.../-.../.-&#34;</span>
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;/&#39;</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
	plainer <span style="color:#f92672">+=</span> dict_list[i]

print plainer
</code></pre></div><p>执行编写好的python脚本，并查看终端的返回结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-18.png" alt="img"></p>
<p>获得一段解密后的文段：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">may_be_have_another_decodehhhhaaaaabaabbbaabbaaaaaaaabaababaaaaaaabbabaaabbaaabbaabaaaababaabaaabbabaaabaaabaababbaabbbabaaabababbaaabbabaaabaabaabaaaabbabbaabbaabaabaaabaabaabaababaabbabaaaabbabaabba
</code></pre></div><p>仔细看看文段，好像出题人想要我们去解密后面那段ab组成的密文</p>
<p>那段密文形式没有见过，于是本菜鸡又去求助搜索引擎了。搜索发现是培根密码，正好于tip相对应了。那什么是培根密码呢？</p>
<p>培根密码，又名倍康尼密码（英语：Bacon&rsquo;s cipher）是由法兰西斯·培根发明的一种隐写术。</p>
<p>加密时，明文中的每个字母都会转换成一组五个英文字母。其转换依靠下表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">a AAAAA   g AABBA    n ABBAA   t BAABA
b AAAAB   h AABBB    o ABBAB   u-v BAABB 
c AAABA   i-j ABAAA  p ABBBA   w BABAA
d AAABB   k ABAAB    q ABBBB   x BABAB
e AABAA   l ABABA    r BAAAA   y BABBA
f AABAB   m ABABB    s BAAAB   z BABBB
</code></pre></div><p>这只是一款最常用的加密表，有另外一款将每种字母配以不同的字母组予以转换，即I与J、U与V皆有不同编号。</p>
<p>加密者需使用两种不同字体，分别代表A和B。准备好一篇包含相同AB字数的假信息后，按照密文格式化假信息，即依密文中每个字母是A还是B分别套用两种字体。</p>
<p>解密时，将上述方法倒转。所有字体一转回A，字体二转回B，以后再按上表拼回字母。</p>
<p>法兰西斯·培根另外准备了一种方法，其将大小写分别看作A与B，可用于无法使用不同字体的场合（例如只能处理纯文本时）。但这样比起字体不同更容易被看出来，而且和语言对大小写的要求也不太兼容。</p>
<p>培根密码本质上是将二进制信息通过样式的区别，加在了正常书写之上。培根密码所包含的信息可以和用于承载其的文章完全无关。[6]</p>
<p>将摩尔斯电码解密出来的文段的后半部分取出作为密文，即：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">aaaaabaabbbaabbaaaaaaaabaababaaaaaaabbabaaabbaaabbaabaaaababaabaaabbabaaabaaabaababbaabbbabaaabababbaaabbabaaabaabaabaaaabbabbaabbaabaabaaabaabaabaababaabbabaaaabbabaabba
</code></pre></div><p>可以使用网上的培根密码工具进行解密也可以使用python脚本进行解密，这里使用python脚本进行解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
dict_list<span style="color:#f92672">=</span>{            
	<span style="color:#e6db74">&#39;aaaaa&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
    <span style="color:#e6db74">&#39;aaaab&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
    <span style="color:#e6db74">&#39;aaaba&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
    <span style="color:#e6db74">&#39;aaabb&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
    <span style="color:#e6db74">&#39;aabaa&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
    <span style="color:#e6db74">&#39;aabab&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
    <span style="color:#e6db74">&#39;aabba&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
    <span style="color:#e6db74">&#39;aabbb&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>, 
    <span style="color:#e6db74">&#39;abaaa&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
    <span style="color:#e6db74">&#39;abaab&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
    <span style="color:#e6db74">&#39;ababa&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
    <span style="color:#e6db74">&#39;ababb&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
    <span style="color:#e6db74">&#39;abbaa&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
    <span style="color:#e6db74">&#39;abbab&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
    <span style="color:#e6db74">&#39;abbba&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>, 
    <span style="color:#e6db74">&#39;abbbb&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,  
    <span style="color:#e6db74">&#39;baaaa&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
    <span style="color:#e6db74">&#39;baaab&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
    <span style="color:#e6db74">&#39;baaba&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
    <span style="color:#e6db74">&#39;baabb&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
    <span style="color:#e6db74">&#39;babaa&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
    <span style="color:#e6db74">&#39;babab&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
    <span style="color:#e6db74">&#39;babba&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
    <span style="color:#e6db74">&#39;babbb&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>, 
    <span style="color:#e6db74">&#39;bbaaa&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
    <span style="color:#e6db74">&#39;bbaab&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>
    }
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;aaaaabaabbbaabbaaaaaaaabaababaaaaaaabbabaaabbaaabbaabaaaababaabaaabbabaaabaaabaababbaabbbabaaabababbaaabbabaaabaabaabaaaabbabbaabbaabaabaaabaabaabaababaabbabaaaabbabaabba&#34;</span>
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
cipher_arr <span style="color:#f92672">=</span> []
[cipher_arr<span style="color:#f92672">.</span>append(cipher[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>]) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,len(cipher),<span style="color:#ae81ff">5</span>)]
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
	plainer <span style="color:#f92672">=</span>plainer<span style="color:#f92672">+</span>dict_list[i]
print plainer
</code></pre></div><p>执行python脚本，并查看终端返回的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-19.png" alt="img"></p>
<p>看来输出的结果应该就是未成熟的flag数据：attackanddefenceworldisinteresting</p>
<p>对这个数据进行加帽处理：cyberpeace{attackanddefenceworldisinteresting}</p>
<p>flag数据成功拿到</p>
<p>这道题目主要考察古典密码学的替换加密算法知识，难度上应该算是简单题，思路也是比较流畅的。</p>
<h2 id="混合编码">混合编码</h2>
<p>看到题目，这道题应该是考察编码相关的知识的内容</p>
<p>点开题目页面，看看能得到什么关键信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-20-1024x293.png" alt="img">混合编码题目</p>
<p>题目描述中就有一个关键信息，就是题目的要求提交的flag数据格式信息，没有其他关键性的信息了</p>
<p>下载附件并打开查看密文：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-21-1024x150.png" alt="img">附件内容</p>
<p>附件中的密文内容看样子像是base64编码格式的：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">JiM3NjsmIzEyMjsmIzY5OyYjMTIwOyYjNzk7JiM4MzsmIzU2OyYjMTIwOyYjNzc7JiM2ODsmIzY5OyYjMTE4OyYjNzc7JiM4NDsmIzY1OyYjNTI7JiM3NjsmIzEyMjsmIzEwNzsmIzUzOyYjNzY7JiMxMjI7JiM2OTsmIzEyMDsmIzc3OyYjODM7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiMxMDc7JiMxMTg7JiM3NzsmIzg0OyYjNjU7JiMxMjA7JiM3NjsmIzEyMjsmIzY5OyYjMTIwOyYjNzg7JiMxMDU7JiM1NjsmIzEyMDsmIzc3OyYjODQ7JiM2OTsmIzExODsmIzc5OyYjODQ7JiM5OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzUwOyYjNzY7JiMxMjI7JiM2OTsmIzEyMDsmIzc4OyYjMTA1OyYjNTY7JiM1MzsmIzc4OyYjMTIxOyYjNTY7JiM1MzsmIzc5OyYjODM7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiM5OTsmIzExODsmIzc5OyYjODQ7JiM5OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzExOTsmIzc2OyYjMTIyOyYjNjk7JiMxMTk7JiM3NzsmIzY3OyYjNTY7JiMxMjA7JiM3NzsmIzY4OyYjNjU7JiMxMTg7JiM3NzsmIzg0OyYjNjU7JiMxMjA7JiM3NjsmIzEyMjsmIzY5OyYjMTE5OyYjNzc7JiMxMDU7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiM2OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzExOTsmIzc2OyYjMTIyOyYjMTA3OyYjNTM7JiM3NjsmIzEyMjsmIzY5OyYjMTE5OyYjNzc7JiM4MzsmIzU2OyYjMTIwOyYjNzc7JiM4NDsmIzEwNzsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzEyMDsmIzc2OyYjMTIyOyYjNjk7JiMxMjA7JiM3ODsmIzY3OyYjNTY7JiMxMjA7JiM3NzsmIzY4OyYjMTAzOyYjMTE4OyYjNzc7JiM4NDsmIzY1OyYjMTE5Ow==
</code></pre></div><p>使用在base64关卡中的python脚本进行base64解密（当然也可以使用在线工具进行base64解密）</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-22-1024x63.png" alt="img"></p>
<p>接出来的数据好像又是一种编码格式：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#52;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#69;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#50;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#53;&amp;#78;&amp;#121;&amp;#56;&amp;#53;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#99;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#65;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#103;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#119;
</code></pre></div><p>看样子应该是ascii编码格式，可以使用在线的ascii编码工具进行解密，也可使用python脚本进行解密，一如既往，这里使用python脚本进行解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#52;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#69;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#50;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#53;&amp;#78;&amp;#121;&amp;#56;&amp;#53;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#99;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#65;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#103;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#119;&#34;</span>
plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
cipher_arr <span style="color:#f92672">=</span> cipher[<span style="color:#ae81ff">2</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;;&amp;#&#39;</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span>  cipher_arr:    
	plainer <span style="color:#f92672">+=</span> chr(int(i))
print plainer
</code></pre></div><p>执行编写好的python代码并查看终端输出情况：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-24-1024x51.png" alt="img"></p>
<p>输出的解密信息像是base64格式的编码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">LzExOS8xMDEvMTA4Lzk5LzExMS8xMDkvMTAxLzExNi8xMTEvOTcvMTE2LzExNi85Ny85OS8xMDcvOTcvMTEwLzEwMC8xMDAvMTAxLzEwMi8xMDEvMTEwLzk5LzEwMS8xMTkvMTExLzExNC8xMDgvMTAw
</code></pre></div><p>可以再使用一次base64解码的python脚本进行base64解码（也可以使用在线base64工具进行解码）：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-25.png" alt="img"></p>
<p>解码后又是一段ascii的编码格式，这里还是编写一个ascii解码的python脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/119/101/108/99/111/109/101/116/111/97/116/116/97/99/107/97/110/100/100/101/102/101/110/99/101/119/111/114/108/100&#34;</span>
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
cipher_arr <span style="color:#f92672">=</span> cipher[<span style="color:#ae81ff">1</span>:]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;/&#39;</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:    
	plainer <span style="color:#f92672">+=</span> chr(int(i))
print plainer
</code></pre></div><p>执行编写好的python代码并查看终端输出的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-26.png" alt="img"></p>
<p>解码出来的数据应该就是flag数据：welcometoattackanddefenceworld</p>
<p>根据题目要求，需要对这个flag数据进行加帽处理：cyberpeace{welcometoattackanddefenceworld}</p>
<p>题目解决，题目属于简单题目，思路就是反复套娃操作：base64-&gt;ASCII-&gt;base64-&gt;ASCII</p>
<p>题目主要考察对编码数据的识别和基本编码方式的解决，简单题。</p>
<h2 id="easy_rsa">easy_RSA</h2>
<p>看题目，这应该是考察到ctf中密码学的核心模块，也就是现代密码学的部分，RSA加密算法。</p>
<p>什么是RSA加密算法？</p>
<p>RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）在1977年一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p>
<p>对极大整数做因数分解的难度决定了 RSA 算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的 RSA 钥匙才可能被强力方式破解。到目前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的。[7]</p>
<p>RSA是现在密码学的一个典型代表，加密过程不像古典密码学中的密码那么简单，加密过程是非常复杂的。RSA加密算法的安全性也是相当高的。</p>
<h3 id="rsa算法">RSA算法</h3>
<p>密钥生成的步骤 [8]</p>
<p>我们通过一个例子，来理解RSA算法。假设爱丽丝要与鲍勃进行加密通信，她该怎么生成公钥和私钥呢？</p>
<p><strong>第一步，随机选择两个不相等的质数p和q。</strong></p>
<p>爱丽丝选择了61和53。（实际应用中，这两个质数越大，就越难破解。）</p>
<p><strong>第二步，计算p和q的乘积n。</strong></p>
<p>爱丽丝就把61和53相乘。</p>
<blockquote>
<p>$$
n = 61×53 = 3233
$$</p>
</blockquote>
<p>n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位。</p>
<p><strong>第三步，计算n的欧拉函数φ(n)。</strong></p>
<blockquote>
<p>n是质数，则 φ(n)=n-1
$$
n = p_1 × p_2
$$</p>
<p>$$
φ(n) = φ(p_1 \cdot p_2) = φ(p_1)\cdot φ(p_1)
$$</p>
<p>$$
=&gt; φ(n) = (p-1)(q-1)
$$</p>
</blockquote>
<p>爱丽丝算出φ(3233)等于60×52，即3120。</p>
<p><strong>第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。</strong></p>
<p>爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</p>
<p><strong>第五步，计算e对于φ(n)的模反元素d。</strong></p>
<p>所谓”模反元素”就是指有一个整数d，可以使得ed被φ(n)除的余数为1。</p>
<blockquote>
<p>$$
ed ≡ 1 (mod φ(n))
$$</p>
</blockquote>
<p>这个式子等价于</p>
<blockquote>
<p>$$
ed - 1 = kφ(n)
$$</p>
</blockquote>
<p>于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。(-k = y)</p>
<blockquote>
<p>$$
ex + φ(n)y = 1
$$</p>
</blockquote>
<p>已知 e=17, φ(n)=3120，</p>
<blockquote>
<p>$$
17x + 3120y = 1
$$</p>
</blockquote>
<p>这个方程可以用“扩展欧几里得算法”(又叫辗转相除法)求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。</p>
<p>至此所有计算完成。</p>
<p><strong>第六步，将n和e封装成公钥，n和d封装成私钥。</strong></p>
<p>在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。</p>
<p>实际应用中，公钥和私钥的数据都采用ASN.1格式表达。</p>
<p>这些RSA加密算法的流程和重要的几个参数是解决RSA算法密码学题目的核心，只有清晰地了解RSA加密算法的每个细节，面对RSA题目才能胸有成竹、游刃有余。</p>
<p>点开题目，看看题目描述能给出哪些提示吧：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-27-1024x280.png" alt="img">easy_RSA</p>
<p>题目中只有提交格式的提示，除此之外，都是描述性的信息，但是对解题没有太多作用。</p>
<p>下载附件，直接查看附件中的信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-28.png" alt="img">附件内容</p>
<p>这道题目应该是简单的计算，即根据RSA设计的算法过程进行逆向计算。这道题目可以使用rsatool工具进行直接求解，本菜鸡还是编写一个python脚本进行求解吧：（此脚本只能针对简单问题）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
p<span style="color:#f92672">=</span><span style="color:#ae81ff">473398607161</span>
q<span style="color:#f92672">=</span><span style="color:#ae81ff">4511491</span>e<span style="color:#f92672">=</span><span style="color:#ae81ff">17</span>
pn<span style="color:#f92672">=</span>(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
flag<span style="color:#f92672">=</span>(pn<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">/</span>e
print flag
</code></pre></div><p>执行编写的脚本，查看终端输出的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-29.png" alt="img"></p>
<p>这段输出的数据应该就是flag数据：125631357777427553</p>
<p>给这段flag数据加个帽子：cyberpeace{125631357777427553}</p>
<p>这道题目是RSA题目中的签到题，难度非常低，思路也非常简单</p>
<p>题目主要考察RSA加密算法的过程，签到题。</p>
<h2 id="easychallenge">easychallenge</h2>
<p>这道题的题目似乎看不出什么门路来，于是只能点开题目描述的页面：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-30-1024x292.png" alt="img">easychallenge题目</p>
<p>这道题目应该是在说程序方面的问题，题目描述也得到不了太多有用的信息，于是下载附件来获取到这道题目的真实面目：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-31.png" alt="img"></p>
<p>发现附件是一个python的一个可以执行的文件，查看文件的属性：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-32.png" alt="img"></p>
<p>发现是一个pyc文件，本菜鸡不知道什么是pyc文件，于是通过互联网的搜索引擎求助一波：</p>
<p>pyc是一种二进制文件，是由Python文件经过编译后所生成的文件，它是一种byte code，Python文件变成pyc文件后，加载的速度有所提高，而且pyc还是一种跨平台的字节码，由python的虚拟机来执行的，就类似于JAVA或者.NET的虚拟机的概念。pyc的内容与python的版本是相关的，不同版本编译后的pyc文件是不同的，例如2.5版本编译的是pyc文件，而2.4版本编译的python是无法执行的。[9]</p>
<p>pyc文件是py文件经过编译的文件格式，文件内容是一种可执行字节码，尝试执行一下这个文件：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-33.png" alt="img"></p>
<p>发现需要执行一下这个文件，需要输入flag数据，看来flag数据很可能就在这个文件内部。这里就需要进行反编译，即把pyc文件打回原形。通过互联网的搜索引擎查询到python内置了一个uncompyle模块可以进行pyc反编译。</p>
<p>于是可以使用<code>pip install uncompyle </code>命令安装一下uncompyle。</p>
<p>在命令行中执行：<code>uncompyle6 -o test.py '.\42aa1a89e3ae48c38e8b713051557020 (1).pyc'</code></p>
<p>文件应该成功输出成了一个test.py文件。</p>
<p>通过代码编辑器，查看到这个文件的源代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># uncompyle6 version 3.7.4</span>
<span style="color:#75715e"># Python bytecode 2.7 (62211)</span>
<span style="color:#75715e"># Decompiled from: Python 3.8.6 (tags/v3.8.6:db45529, Sep 23 2020, 15:52:53) [MSC v.1927 64 bit (AMD64)]</span>
<span style="color:#75715e"># Embedded file name: ans.py</span>
<span style="color:#75715e"># Compiled at: 2018-08-09 11:29:44</span>
<span style="color:#f92672">import</span> base64
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode1</span>(ans):    
	s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ans:
    	x <span style="color:#f92672">=</span> ord(i) <span style="color:#f92672">^</span> <span style="color:#ae81ff">36</span>
        x <span style="color:#f92672">=</span> x <span style="color:#f92672">+</span> <span style="color:#ae81ff">25</span>
        s <span style="color:#f92672">+=</span> chr(x)
    <span style="color:#66d9ef">return</span> s
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode2</span>(ans):
	s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>    
	<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ans:
    	x <span style="color:#f92672">=</span> ord(i) <span style="color:#f92672">+</span> <span style="color:#ae81ff">36</span>
        x <span style="color:#f92672">=</span> x <span style="color:#f92672">^</span> <span style="color:#ae81ff">36</span>
        s <span style="color:#f92672">+=</span> chr(x)
    <span style="color:#66d9ef">return</span> s
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode3</span>(ans):
    <span style="color:#66d9ef">return</span> base64<span style="color:#f92672">.</span>b32encode(ans)
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39; &#39;</span>
print <span style="color:#e6db74">&#39;Please Input your flag:&#39;</span>
flag <span style="color:#f92672">=</span> raw_input()
final <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E===&#39;</span>
<span style="color:#66d9ef">if</span> encode3(encode2(encode1(flag))) <span style="color:#f92672">==</span> final:
	print <span style="color:#e6db74">&#39;correct&#39;</span>
<span style="color:#66d9ef">else</span>:
	print <span style="color:#e6db74">&#39;wrong&#39;</span>
</code></pre></div><p>看到文件源代码，发现flag数据是进行三次加密的：</p>
<ol>
<li>异或处理-&gt;加数值chuli-&gt;ASCII编码</li>
<li>加数值处理-&gt;异或处理-&gt;ASCII编码</li>
<li>base32编码处理</li>
</ol>
<p>我们可以根据这个代码逻辑逆向设计一个加密算法脚本来解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
<span style="color:#f92672">import</span> base64
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode1</span>(ans):
	<span style="color:#66d9ef">return</span> base64<span style="color:#f92672">.</span>b32decode(ans)
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode2</span>(ans):
	s<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ans:
    	x <span style="color:#f92672">=</span> ord(i) <span style="color:#f92672">^</span> <span style="color:#ae81ff">36</span>
        x <span style="color:#f92672">=</span> x <span style="color:#f92672">-</span><span style="color:#ae81ff">36</span>
    	s <span style="color:#f92672">+=</span> chr(x)
    <span style="color:#66d9ef">return</span> s
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode3</span>(ans):
	s<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>    
	<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ans:
    	x <span style="color:#f92672">=</span> ord(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">25</span>
        x <span style="color:#f92672">=</span> x <span style="color:#f92672">^</span> <span style="color:#ae81ff">36</span>
        s <span style="color:#f92672">+=</span> chr(x)
    <span style="color:#66d9ef">return</span> s
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E===&#34;</span>
plainer <span style="color:#f92672">=</span> decode3(decode2(decode1(cipher)))
print plainer
</code></pre></div><p>执行一下编写好的代码，查看终端输出的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-35.png" alt="img"></p>
<p>看输出结果，应该是flag数据没错了。</p>
<p>再次执行以下pyc程序验证一下：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-36.png" alt="img"></p>
<p>看来是没错了，成功获取这道题目的flag数据：cyberpeace{interestinghhhhh}</p>
<p>这道题目的难度上也是简单题，思路也是比较流畅的。</p>
<p>题目主要考察pyc文件的反编译，以及编码和密码学的一些简单理论。简单题。</p>
<h2 id="转轮机加密">转轮机加密</h2>
<p>看到题目有些懵懵的，本菜鸡不知道啥是转轮机加密，于是只能求助一下搜索引擎来获取与转轮机加密相关的更多信息：</p>
<p>转轮机是古典加密方法的集大成者，二战时轴心国普遍应用了该技术，可惜惨遭盟军攻破，德日还蒙在鼓里，一定程度上改变了最终的战局。</p>
<p>转轮机的原理概括起来就是循环置换的多表代换技术，尤其是多筒转轮机，可重复使用数以万计的字母替换表。</p>
<p>以三筒转轮机为例：</p>
<p><img src="../../../../Note/Blog/post_5.assets/929265-20160422083905866-1151128365.jpg" alt="img"></p>
<p>有三个可以独立旋转的圆筒，每个圆筒内部有26个输入引脚和26个输出引脚，内部连线使得输入与输出唯一连接。</p>
<p>每按一下输入键（旋转键），快速转子旋转一个引脚，当快速转子转满一轮（循环归位）时，带动中速转子旋转一个引脚，以此类推，类似钟表的秒分时。</p>
<p>今天，转轮机的意义在于它曾经给目前最广泛使用的密码&ndash;数据加密标准DES指明了方向。[10]</p>
<p>转轮机加密是一种古典密码学的一种加密方法，应该是古典密码学的分组密码</p>
<p>加密过程大致是：</p>
<p>明文-&gt;分组处理（类似于栅栏密码处理方式）-&gt;文段内容位移+密文-&gt;多文段顺序重排+密钥-&gt;密文组</p>
<p>下面点开题目描述，看看可以得到什么信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-37-1024x272.png" alt="img">转轮机加密题目</p>
<p>根据题目描述的信息，可以获得以下几点提示：</p>
<ol>
<li>二战</li>
<li>托马斯·杰斐逊</li>
<li>flag格式</li>
</ol>
<p>下面下载附件，并进行查看：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-38.png" alt="img">附件内容</p>
<p>要想获取到flag数据，应该就需要对附件内容的数据进行机密，这里编写一个python脚本来解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
dict_list <span style="color:#f92672">=</span> {            
<span style="color:#e6db74">&#39;1&#39;</span>:<span style="color:#e6db74">&#39;ZWAXJGDLUBVIQHKYPNTCRMOSFE&#39;</span>,            <span style="color:#e6db74">&#39;2&#39;</span>:<span style="color:#e6db74">&#39;KPBELNACZDTRXMJQOYHGVSFUWI&#39;</span>,            <span style="color:#e6db74">&#39;3&#39;</span>:<span style="color:#e6db74">&#39;BDMAIZVRNSJUWFHTEQGYXPLOCK&#39;</span>,            <span style="color:#e6db74">&#39;4&#39;</span>:<span style="color:#e6db74">&#39;RPLNDVHGFCUKTEBSXQYIZMJWAO&#39;</span>,            <span style="color:#e6db74">&#39;5&#39;</span>:<span style="color:#e6db74">&#39;IHFRLABEUOTSGJVDKCPMNZQWXY&#39;</span>,            <span style="color:#e6db74">&#39;6&#39;</span>:<span style="color:#e6db74">&#39;AMKGHIWPNYCJBFZDRUSLOQXVET&#39;</span>,            <span style="color:#e6db74">&#39;7&#39;</span>:<span style="color:#e6db74">&#39;GWTHSPYBXIZULVKMRAFDCEONJQ&#39;</span>,            <span style="color:#e6db74">&#39;8&#39;</span>:<span style="color:#e6db74">&#39;NOZUTWDCVRJLXKISEFAPMYGHBQ&#39;</span>,            <span style="color:#e6db74">&#39;9&#39;</span>:<span style="color:#e6db74">&#39;XPLTDSRFHENYVUBMCQWAOIKZGJ&#39;</span>,            <span style="color:#e6db74">&#39;10&#39;</span>:<span style="color:#e6db74">&#39;UDNAJFBOWTGVRSCZQKELMXYIHP&#39;</span>,            <span style="color:#e6db74">&#39;11&#39;</span>:<span style="color:#e6db74">&#39;MNBVCXZQWERTPOIUYALSKDJFHG&#39;</span>,            <span style="color:#e6db74">&#39;12&#39;</span>:<span style="color:#e6db74">&#39;LVNCMXZPQOWEIURYTASBKJDFHG&#39;</span>,             <span style="color:#e6db74">&#39;13&#39;</span>:<span style="color:#e6db74">&#39;JZQAWSXCDERFVBGTYHNUMKILOP&#39;</span>
}
key<span style="color:#f92672">=</span>[<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">13</span>,<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">6</span>]
cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;NFQKSEVOQOFNP&#34;</span>
cipher_arr<span style="color:#f92672">=</span>[]
plainer_arr<span style="color:#f92672">=</span>[]
plainer_list<span style="color:#f92672">=</span>[]
index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> key:
	cipher_arr<span style="color:#f92672">.</span>append(dict_list[str(i)])
	<span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> cipher_arr:
    	location <span style="color:#f92672">=</span> j<span style="color:#f92672">.</span>index(cipher[index])
        str_get <span style="color:#f92672">=</span> j[location:] <span style="color:#f92672">+</span> j[:location]    	
        plainer_arr<span style="color:#f92672">.</span>append(str_get)
        index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(plainer_arr[<span style="color:#ae81ff">0</span>])):
	str_get<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>    
	<span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> plainer_arr:
    	str_get <span style="color:#f92672">+=</span> j[i]
print str_get<span style="color:#f92672">.</span>lower()
</code></pre></div><p>执行刚刚编写好的python脚本，并在终端命令行中查看执行结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-39.png" alt="img"></p>
<p>得到了一个明文的列表：</p>
<pre tabindex="0"><code>nfqksevoqofnpahgcxiusnwcbnctwpcubfotuvyzetmdrmezgkccdqhneyczuvtxjtgszrtqwtrezbrypqfawawsbqfxxywvsaxdcswzmpbxbbojczxedjlxygkigvqqrrqoiitjkdrkytuoczhydzljeipsykufhfgullzolhblrnhjbxmmiogdvlugxvkxjuqvmkamlpiiywyxsambkvlqsiaavfireintheholeuzaulcdkfprstwvfoomsyaupkairdtpxrppdldmkncsjzfnmnnjkpsegzphtyadfgbjojqqecgjvhheunvaonrhfhgilwjdwwymbbgmw
</code></pre><p>列表中存在明文，这时候需要看看题目描述的3个tip：</p>
<ol>
<li>二战</li>
<li>托马斯·杰斐逊</li>
<li>flag格式</li>
</ol>
<p>由于转轮机加密是托马斯·杰斐逊发明的，因而tip2已经使用，tip3是要在提交的时候使用，这时候还有一个tip1，二战。找一下明文列表中是否有与二战相关的文段。</p>
<p>发现文段：fireinthehole 与二战相关，这个明文段应该就是flag数据了。</p>
<p>根据题目描述的flag数据要求，fireinthehole就是正确的flag数据了。</p>
<p>题目解决，题目的思路也是比较流畅简单的，难度上算是简单题。</p>
<p>题目主要考察的是古典密码学中的转轮机加密，简单题。</p>
<h2 id="normal_rsa">Normal_RSA</h2>
<p>看到题目，感觉这道题目应该不简单，明显的一道RSA加密算法题目，估计也是考察RSA加密算法相关知识的题目。</p>
<p>直接点开题目描述，看看可以获取到什么有用的tip</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-40-1024x273.png" alt="img">Normal_RSA题目</p>
<p>根据题目描述，这道题目应该是需要使用到工具的。RSA加密算法题目通常会使用到openssl，rsatool，factordb，sagemath工具进行rsa的公钥私钥的运算。</p>
<p>下载附件，查看附件有什么东西吧：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-41.png" alt="img">附件</p>
<p>附件个压缩文件，我们对压缩文件进行解压获得一个文件夹：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-42.png" alt="img"></p>
<p>打开这个文件夹：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-43.png" alt="img">文件夹内容</p>
<p>发现有两个文件，一个是公钥，一个是密文。pem格式的文件应该是openssl的一种文件格式</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-44.png" alt="img"></p>
<p>这里使用openssl来获取到公钥文件的e和n，使用openssl的rsa功能之前可以先看看rsa功能的帮助：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-45.png" alt="img">openssl rsa帮助</p>
<p>了解了大致参数，执行命令<code>rsa -pubin -text -modulus -in pubkey.pem</code> 来获取e和n的数据：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-46.png" alt="img"></p>
<p>exponent就是e，modulus就是n。</p>
<p>这里的e是十进制的，n是十六进制的：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Exponent: 65537 (0x10001)

Modulus=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD
</code></pre></div><p>需要进行转换，使用ipython交互求出十进制数值：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-48.png" alt="img"></p>
<p>现在得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">n=87924348264132406875276140514499937145050893665602592992418171647042491658461

e=65537
</code></pre></div><p>下面需要求出p和q，这里需要进行大数分解，这里使用<a href="http://factordb.com/">focterdb</a>进行大数分解：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-49-1024x111.png" alt="img"></p>
<p>现在得到的数据有：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">p=275127860351348928173285174381581152299

q=319576316814478949870590164193048041239

n=87924348264132406875276140514499937145050893665602592992418171647042491658461

e=65537
</code></pre></div><p>现在这些数据可以求出参数d了，这里使用rsatool求解参数d、生成私钥文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">python ~/rsatool/rsatool.py  -f PEM -o private.pem  -p <span style="color:#ae81ff">275127860351348928173285174381581152299</span> -q <span style="color:#ae81ff">319576316814478949870590164193048041239</span> -e <span style="color:#ae81ff">65537</span> 
</code></pre></div><p><img src="/images/XCTF-CRYPTO-novice_writeup/image-53-1024x313.png" alt="img"></p>
<p>现在得到了私钥文件和公钥文件了，可以使用openssl进行解密了</p>
<p>opensssl解密RSA加密算法的模块是rsautl，解密之前，先看看rsautl的帮助：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-51.png" alt="img"></p>
<p>了解大致参数后，执行命令开始进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> rsautl -in flag.enc -inkey private.pem -out flag.txt -decrypt
</code></pre></div><p>然后查看生成的txt文件内容：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-54.png" alt="img"></p>
<p>成功获取到flag数据：PCTF{256b_i5_m3dium}</p>
<p>题目解决，题目是比较常规的RSA题目，题目主要考察RSA知识的掌握以及RSA工具的使用。</p>
<p>题目难度上，题目算是简单题目。</p>
<h2 id="esay_ecc">esay_ECC</h2>
<p>看到题目，这道题目应该是一个比较难的题目，题目考察到的是ecc加密算法，是密码学中比较难也是比较核心的考察点。ecc加密算法也是ctf密码学的难点。什么是ecc加密算法？</p>
<p>椭圆曲线密码学（英语：Elliptic Curve Cryptography，缩写：ECC）是一种基于椭圆曲线数学的公开密钥加密算法。椭圆曲线在密码学中的使用是在1985年由Neal Koblitz（英语：Neal Koblitz）和Victor Miller（英语：Victor Miller）分别独立提出的。</p>
<p>ECC的主要优势是它相比RSA加密算法使用较小的密钥长度并提供相当等级的安全性。ECC的另一个优势是可以定义群之间的双线性映射，基于Weil对或是Tate对；双线性映射已经在密码学中发现了大量的应用，例如基于身份的加密。[11]</p>
<p>点开题目，看看题目能给我们什么有用的信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-55-1024x301.png" alt="img">easy_ECC题目</p>
<p>题目的描述提示了ecc基本原理和提交的flag格式。这道题目解决的关键应该就是ecc基本原理。</p>
<p>点开附件进行下载，查看附件内容：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-56.png" alt="img">附件内容</p>
<p>本菜鸡现在实在是看不懂ecc加密算法的基本原理，这道题目直接搬大佬的脚本求解：[12]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">Gx <span style="color:#f92672">=</span> <span style="color:#ae81ff">6478678675</span>
Gy <span style="color:#f92672">=</span> <span style="color:#ae81ff">5636379357093</span>
a <span style="color:#f92672">=</span> <span style="color:#ae81ff">16546484</span> 
b <span style="color:#f92672">=</span> <span style="color:#ae81ff">4548674875</span>
p <span style="color:#f92672">=</span> <span style="color:#ae81ff">15424654874903</span>
k <span style="color:#f92672">=</span> <span style="color:#ae81ff">546768</span>
x <span style="color:#f92672">=</span> Gx
y <span style="color:#f92672">=</span> Gy
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(k<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
    <span style="color:#66d9ef">if</span> (x<span style="color:#f92672">==</span>Gx <span style="color:#f92672">and</span> y<span style="color:#f92672">==</span>Gy):
        inv <span style="color:#f92672">=</span> pow(<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>Gy, p<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>,p)
        temp <span style="color:#f92672">=</span> (<span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>Gx<span style="color:#f92672">*</span>Gx<span style="color:#f92672">+</span>a)<span style="color:#f92672">*</span>inv<span style="color:#f92672">%</span>p
    <span style="color:#66d9ef">else</span>:
        inv <span style="color:#f92672">=</span> pow((x<span style="color:#f92672">-</span>Gx), p<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>,p)
        temp <span style="color:#f92672">=</span> (y<span style="color:#f92672">-</span>Gy)<span style="color:#f92672">*</span>inv<span style="color:#f92672">%</span>p

    xr <span style="color:#f92672">=</span> (temp<span style="color:#f92672">*</span>temp<span style="color:#f92672">-</span>Gx<span style="color:#f92672">-</span>x)<span style="color:#f92672">%</span>p
    yr <span style="color:#f92672">=</span> (temp<span style="color:#f92672">*</span>(x<span style="color:#f92672">-</span>xr)<span style="color:#f92672">-</span>y)<span style="color:#f92672">%</span>p
 <span style="color:#75715e">#print(i,xr,yr)</span>
    x <span style="color:#f92672">=</span> xr
    y <span style="color:#f92672">=</span> yr
print(x<span style="color:#f92672">+</span>y)
</code></pre></div><p>执行脚本进行求解：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-57.png" alt="img"></p>
<p>解出来的数值：19477226185390。对解出来的数值加个帽子：cyberpeace{19477226185390}</p>
<p>flag数据就是：cyberpeace{19477226185390}</p>
<p>题目解决，难度适中，主要考察ecc基本原理（本菜鸡现在看不懂，嘤嘤嘤）</p>
<h2 id="参考">参考：</h2>
<ol>
<li><a href="https://blog.csdn.net/jiang_xinxing/article/details/89360638">密码学发展简史</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81">凯撒密码-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81">摩尔斯电码-维基百科</a></li>
<li><a href="https://www.jianshu.com/p/b5aa5cf60f83">01248云影密码-简书</a></li>
<li><a href="https://baike.baidu.com/item/%E6%A0%85%E6%A0%8F%E5%AF%86%E7%A0%81/228209">栅栏密码-百度百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E5%9F%B9%E6%A0%B9%E5%AF%86%E7%A2%BC">培根密码-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">RSA加密算法-维基百科</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html">RSA加密算法-阮一峰</a></li>
<li><a href="https://www.php.cn/python-tutorials-416352.html">什么是.pyc文件-Python教程-PHP中文网</a></li>
<li><a href="https://www.cnblogs.com/block2016/p/5419894.html">古典加密方法（三）转轮机 - block2016 - 博客园</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6?__cf_chl_jschl_tk__=a9978b71ec35dea51611bffa9ddfde17af6370e0-1617507761-0-AS1qzJ-oZAEq_LTzowb0J7phGWNrxR30GyxWwo6CyT69z-ihrCQkPQyVQt09Ilbvz62nswUGfiKGW0V7wr81F8k7VR2CTAXsMzT-d0exQRmElW9n_yv_SYJl2ZMXNsx1IF8xd9OYYwHGTSD_-s2IngOPyneCJ2vgpXqo9Ni7n7kPjZpACS3_rMdRHNdn9nCJNQX7QmB-220VQx5FnGlcQZzU9u4WOLCZDnB04Ui439-MF7E9NDg4g3poRLyDAA2mB3SznYOkHvz-9GPxSImOa87p75BN9SNM69QUdhG0fuDleenL6XoNzcYBuM-Q1lgNA-S_BnZsPAuTtUo3aDdZNP8woYFz6qr5K2WzLVQ-fYEofJN4TCVQPCn1f1PbnffLiUhOHT342PmSBmuo0xDZy6RHHJMOjFSeWT5TixJIYYmYiz2EbnrifJikVyt0-CZycYnh_-QPhzzbqleCFm90uSXCfvMuTtZ9kAzWZHqBLVpLcS1VS6spCfFZYw78f9bC7pUZUqcNYyB7pY_vhuQX6Mg">椭圆曲线密码学-维基百科</a></li>
<li><a href="https://blog.csdn.net/weixin_46227016/article/details/111565136">XCTF easy_ECC WP</a></li>
</ol>
<p>XCTF的新手区密码学题目可能难度不是很高，但是XCTF新手区的密码学题目涉及的范围还是比较广的。从编码到密码，从古典到现代，从rsa到ecc都有涉及，密码学考察的基本知识都涉及到了。</p>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>XCTF WEB novice Writeup</title>
            <link>https://zcodetea.github.io/posts/xctf-web-novice_writeup/</link>
            <pubDate>Fri, 25 Jun 2021 21:08:13 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/xctf-web-novice_writeup/</guid>
            <description>来点时效性的文章，不能总闲聊吧？
XCTF是一个国内比较常用的CTF的刷题网站，网站页面如下：
XCTF攻防世界页面
初次写writeup，解题思路可能不是很明确。
本次要解决的题目如下：
XCTF WEB新手区题目
 view source robots backup cookie disabled button weak auth simple php get post xff referer webshell command execution simple js  view_source 进入到题目页面中，获取与解题相关的信息
view_source题目
根据题目要求可知，鼠标右键不可用了。
我们进入环境来一探究竟
靶机环境
靶机展示的页面非常简单，说flag不在这儿，我不大相信，尝试使用右键查看源代码
发现右键不能使用。看来靶机的代码把浏览器的右键给禁用了，解决方法有两个：
 使用F12进行检查源代码 开启浏览器禁用js模式  这里使用F12进行查看源代码（开启禁用js模式比较麻烦）
页面源代码
F12成功打开页面源代码调试，可以看到flag就在源代码的注释中，简单题
本题主要考察对浏览器调试器的使用技巧，没有什么难度。
robots 进入到题目页面环境中，查看题目信息和相关描述。
robots题目
题目描述中提到了robots协议，本菜鸡不知道什么是robots协议，但是可以肯定robots协议就是本题的突破点，我去搜索查找一下有关robots协议的相关信息。
robots协议相关信息
根据百度百科的说明，其实robots协议就是网站目录下的robots.txt文件
预备的知识信息获取到了，下面进入到靶机环境，去拿flag
靶机页面
靶机页面是个空白页面，在靶机地址后面输入/robots.txt尝试找到flag
进入到robots.txt页面寻找有关flag的相关信息
robots.txt页面信息
根据robots.txt展示的页面信息，可知flag就在flag_1s_h3re.php文件中
那就进入到这个文件中
flag_1s_h3re.php文件页面
成功拿到flag数据信息，题目也是简单题
这道题目主要考察robots协议的相关知识以及网站目录的部分知识，也是简单题，思路非常明确
backup 进入到题目页面中，寻找有用的题目突破信息
backup题目
根据题目描述，这道题目是在考察备份文件，备份文件是解题的关键
根据备份文件的相关信息可知，备份文件通常都是后缀名.bak的文件
已有知识准备好了，现在进入到靶机环境中拿flag
靶机页面
靶机直接就把提示摆到页面上面了，直接访问index.php.bak文件就可以了
一般来说index.php的备份文件就是index.php.bak文件</description>
            <content type="html"><![CDATA[<p>来点时效性的文章，不能总闲聊吧？</p>
<p><a href="https://adworld.xctf.org.cn/">XCTF</a>是一个国内比较常用的CTF的刷题网站，网站页面如下：</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-1.png" alt="image-1">XCTF攻防世界页面</p>
<p>初次写writeup，解题思路可能不是很明确。</p>
<p>本次要解决的题目如下：</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-2.png" alt="image-2">XCTF WEB新手区题目</p>
<ul>
<li>view source</li>
<li>robots</li>
<li>backup</li>
<li>cookie</li>
<li>disabled button</li>
<li>weak auth</li>
<li>simple php</li>
<li>get post</li>
<li>xff referer</li>
<li>webshell</li>
<li>command execution</li>
<li>simple js</li>
</ul>
<h2 id="view_source">view_source</h2>
<p>进入到题目页面中，获取与解题相关的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-3.png" alt="image-3">view_source题目</p>
<p>根据题目要求可知，鼠标右键不可用了。</p>
<p>我们进入环境来一探究竟</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-4.png" alt="image-4">靶机环境</p>
<p>靶机展示的页面非常简单，说flag不在这儿，我不大相信，尝试使用右键查看源代码</p>
<p>发现右键不能使用。看来靶机的代码把浏览器的右键给禁用了，解决方法有两个：</p>
<ol>
<li>使用F12进行检查源代码</li>
<li>开启浏览器禁用js模式</li>
</ol>
<p>这里使用F12进行查看源代码（开启禁用js模式比较麻烦）</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-5.png" alt="image-5"></p>
<p>页面源代码</p>
<p>F12成功打开页面源代码调试，可以看到flag就在源代码的注释中，简单题</p>
<p>本题主要考察对浏览器调试器的使用技巧，没有什么难度。</p>
<h2 id="robots">robots</h2>
<p>进入到题目页面环境中，查看题目信息和相关描述。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-6.png" alt="image-6">robots题目</p>
<p>题目描述中提到了robots协议，本菜鸡不知道什么是robots协议，但是可以肯定robots协议就是本题的突破点，我去搜索查找一下有关robots协议的相关信息。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-7.png" alt="image-7">robots协议相关信息</p>
<p>根据百度百科的说明，其实robots协议就是网站目录下的robots.txt文件</p>
<p>预备的知识信息获取到了，下面进入到靶机环境，去拿flag</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-8.png" alt="image-8">靶机页面</p>
<p>靶机页面是个空白页面，在靶机地址后面输入/robots.txt尝试找到flag</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-9.png" alt="image-9"></p>
<p>进入到robots.txt页面寻找有关flag的相关信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-10.png" alt="image-10"></p>
<p>robots.txt页面信息</p>
<p>根据robots.txt展示的页面信息，可知flag就在flag_1s_h3re.php文件中</p>
<p>那就进入到这个文件中</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-11.png" alt="image-11">flag_1s_h3re.php文件页面</p>
<p>成功拿到flag数据信息，题目也是简单题</p>
<p>这道题目主要考察robots协议的相关知识以及网站目录的部分知识，也是简单题，思路非常明确</p>
<h2 id="backup">backup</h2>
<p>进入到题目页面中，寻找有用的题目突破信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-12-1024x292.png" alt="image-12-1024x292">backup题目</p>
<p>根据题目描述，这道题目是在考察备份文件，备份文件是解题的关键</p>
<p>根据备份文件的相关信息可知，备份文件通常都是后缀名.bak的文件</p>
<p>已有知识准备好了，现在进入到靶机环境中拿flag</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-13.png" alt="image-13">靶机页面</p>
<p>靶机直接就把提示摆到页面上面了，直接访问index.php.bak文件就可以了</p>
<p>一般来说index.php的备份文件就是index.php.bak文件</p>
<p>访问url/index.php.bak，备份文件成功被下载下来</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-14.png" alt="image-14"></p>
<p>备份文件</p>
<p>打开备份文件寻找信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-15.png" alt="image-15">备份文件信息</p>
<p>发现flag数据就在备份文件中，题目解决，也是一道简单题目</p>
<p>题目主要考察的就是备份文件的相关知识，简单题，思路非常明确</p>
<h2 id="cookie">cookie</h2>
<p>进入到题目页面，寻找与解题相关的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-16-1024x282.png" alt="image-16-1024x282">cookie题目</p>
<p>题目描述和题目明显提示是cookie相关的知识，cookie的知识一般做web安全都是必须知道且需要了解的一个重要的知识点。这里搬出MDN上面对于<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">cookie</a>的说明，cookie知识不清楚的可以去MDN页面中了解</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-17.png" alt="image-17">MDN cookie</p>
<p>简单来说，cookie就是存储在用户服务器上的一段信息内容</p>
<p>可以使用浏览器的调试器查看该页面的cookie数据，准备知识现在已经完备。</p>
<p>进入到靶机环境，拿flag！</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-18.png" alt="image-18"></p>
<p>靶机页面</p>
<p>靶机页面信息展示的很明确，就是cookie</p>
<p>打开F12调试器查看cookie信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-19-1024x234.png" alt="image-19-1024x234">cookie数据</p>
<p>发现有很多条cookie数据，不知道该选择哪一条cookie数据，我发现这些cookie的domain信息不太一样。有四条的domain信息是baidu.com，只有一条的domain信息是靶机的ip地址，看来需要的cookie信息就是domain信息是靶机ip地址的那条cookie</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-20.png" alt="image-20">靶机cookie数据</p>
<p>cookie的键值对是look-here:cookie.php，cookie.php显然不是flag数据，估计是想让我们访问这个文件，我们来访问一下这个文件</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-21.png" alt="image-21"></p>
<p>cookie.php页面信息</p>
<p>这个页面展示的内容也是非常简单的，让我们去看看response信息。</p>
<p>可能有人会问response是什么？response就是http头部信息的响应信息，在调试器的网络那一栏可以查看到页面的http头部信息。关于http头部信息的更多内容，可以访问<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">MDN的HTTP头部列表</a></p>
<p>打开浏览器的调试器</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-22-1024x140.png" alt="image-22-1024x140">网络响应数据</p>
<p>如果响应数据中没有任何信息，可以刷新一下页面来找到响应数据</p>
<p>然后我们选择响应数据中的cookie.php的数据信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-23.png" alt="image-23">cookie.php的响应信息</p>
<p>发现响应标头的信息中有flag数据，本题也就成功解出，也是简单题目，跟着引导走，很快就能拿到flag</p>
<p>题目主要考察cookie相关知识和htpp头的相关知识内容，这里也可以使用burp suite来抓包获取http信息，简单题，思路也相对比较流畅。</p>
<h2 id="disabled-button">disabled button</h2>
<p>看到这个题目就大致知道这道题目的考察目标了，应该是一道非常简单的题目</p>
<p>来看看题目内容有什么具体的描述信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-24-1024x287.png" alt="img">disabled_button题目</p>
<p>根据题目描述可以知道，这道题目是考察前端知识的。根据题目disabled_button，这道题目很可能是在考察html标签属性的，下面我们进入到题目中一探究竟</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-25.png" alt="img"></p>
<p>靶机页面</p>
<p>页面展示的信息非常清晰不能按的按钮，而且flag信息就藏在这个按钮后面</p>
<p>直接点开F12查看源代码</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-26.png" alt="img">源代码检查</p>
<p>发现input标签有关disabled属性，我们将disabled属性删除，按钮就可以按了</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-27.png" alt="img"></p>
<p>源代码修改</p>
<p>然后返回到页面上去，发现按钮可以被按下</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-28.png" alt="img"></p>
<p>按钮页面</p>
<p>按下按钮，查看可以获取到的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-29.png" alt="img"></p>
<p>flag信息</p>
<p>成功获取到flag信息，题目解决，这道题目非常简单，应该是道签到题</p>
<p>题目主要考察前端的html知识，签到题</p>
<h2 id="weak-auth">weak auth</h2>
<p>进入到题目页面，查看可以利用的信息及提示</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-30-1024x277.png" alt="img">weak_auth</p>
<p>根据题目和题目描述信息可以知道，这道题目是一个登录页面，而且采用的是弱口令进行认证的页面。</p>
<p>考察的信息应该是暴力破解的知识以及暴力破解的工具使用。</p>
<p>这里说一下暴力破解的内容知识：</p>
<p>暴力破解也叫蛮力攻击，是一种非常无脑的攻击手段，经常会和社会工程学一起采用来达到成功破解用户密码的效果。</p>
<p>蛮力攻击（英语：Brute-force attack），又称为穷举攻击（英语：Exhaustive attack）或暴力破解，是一种密码分析的方法，即将密码进行逐个推算直到找出真正的密码为止。例如：一个已知是四位数并且全部由阿拉伯数字组成的密码，其可能共有10000种组合，因此最多尝试9999次就能找到正确的密码。理论上除了具有完善保密性的密码以外，利用这种方法可以破解任何一种密码，问题只在于如何缩短试误时间。有些人运用计算机来增加效率，有些人透过字典攻击（英语：Dictionary attack）来缩小密码组合的范围。[1]</p>
<p>如果要解决这道题目，就必不可少一些暴力破解会使用的工具来进行暴力破解。暴力破解工具有很多，一般来说，web安全会有一些比较常用的暴力破解工具，这道题目可能需要使用到kali操作系统来辅助解题。常用的暴力破解工具一般有：Hydra，Medusa，Burp suite。</p>
<p>这里可能使用到Hydra进行暴力破解，这里说明一些Hydra的暴力破解的方法和相关参数</p>
<p><strong>hydra</strong> 是一个支持众多协议的爆破工具，已经集成到KaliLinux中，直接在终端打开即可。[2]</p>
<p>常用的hydra的暴力破解命令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">1、破解ssh： 
hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip ssh 
hydra -l 用户名 -p 密码字典 -t 线程 -o save.log -vV ip ssh 


2、破解ftp： 
hydra ip ftp -l 用户名 -P 密码字典 -t 线程<span style="color:#f92672">(</span>默认16<span style="color:#f92672">)</span> -vV 
hydra ip ftp -l 用户名 -P 密码字典 -e ns -vV 


3、get方式提交，破解web登录： 
hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip http-get /admin/ 
hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f ip http-get /admin/index.php


4、post方式提交，破解web登录： 
hydra -l 用户名 -P 密码字典 -s <span style="color:#ae81ff">80</span> ip http-post-form <span style="color:#e6db74">&#34;/admin/login.php:username=^USER^&amp;password=^PASS^&amp;submit=login:sorry password&#34;</span> 
hydra -t <span style="color:#ae81ff">3</span> -l admin -P pass.txt -o out.txt -f 10.36.16.18 http-post-form <span style="color:#e6db74">&#34;login.php:id=^USER^&amp;passwd=^PASS^:&lt;title&gt;wrong username or password&lt;/title&gt;&#34;</span> 
（参数说明：-t同时线程数3，-l用户名是admin，字典pass.txt，保存为out.txt，-f 当破解了一个密码就停止， 10.36.16.18目标ip，http-post-form表示破解是采用http的post方式提交的表单密码破解,&lt;title&gt;中 的内容是表示错误猜解的返回信息提示。） 


5、破解https： 
hydra -m /index.php -l muts -P pass.txt 10.36.16.18 https 

6、破解teamspeak： 
hydra -l 用户名 -P 密码字典 -s 端口号 -vV ip teamspeak 

7、破解cisco： 
hydra -P pass.txt 10.36.16.18 cisco 
hydra -m cloud -P pass.txt 10.36.16.18 cisco-enable 

8、破解smb： 
hydra -l administrator -P pass.txt 10.36.16.18 smb 

9、破解pop3： 
hydra -l muts -P pass.txt my.pop3.mail pop3 

10、破解rdp： 
hydra ip rdp -l administrator -P pass.txt -V 

11、破解http-proxy： 
hydra -l admin -P pass.txt http-proxy://10.36.16.18 

12、破解imap： 
hydra -L user.txt -p secret 10.36.16.18 imap PLAIN 
hydra -C defaults.txt -6 imap://<span style="color:#f92672">[</span>fe80::2c:31ff:fe12:ac11<span style="color:#f92672">]</span>:143/PLAIN
</code></pre></div><p>这些常用的命令解决这道题目应该是足够的。</p>
<p>现在工具和知识都已经准备完毕了，进入靶机来一探究竟</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-31.png" alt="img"></p>
<p>weak_auth页面</p>
<p>非常简单的一个登录认证页面，先进行简单的密码猜测</p>
<p>使用root:root进行登录尝试</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-32.png" alt="img"></p>
<p>弹出提示，please login as admin，说明登录的用户名必须要素admin</p>
<p>下面试试admin:admin进行登录尝试</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-33.png" alt="img"></p>
<p>弹出提示，password error，登录错误的提示，然后点击确定查看一下页面的源代码</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-34.png" alt="img">靶机error页面源代码</p>
<p>发现登录错误关键字error，然后查看页面的响应标头确定传输方式</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-35.png" alt="img"></p>
<p>发现页面数据的传输方式是post方式进行传输的。而且页面存在着跳转，hydra的易用性相对较差，这里需要选用burpsuite进行暴力破解</p>
<p>进入到kali系统中，抓取页面信息进行暴力破解攻击</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-36.png" alt="img">bp抓到的数据包</p>
<p>右键将页面发送到intruder页面中</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-37.png" alt="img"></p>
<p>然后点击intruder页面进行暴力破解的设置</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-38-1024x287.png" alt="img"></p>
<p>调整好参数，然后进入到option的配置页面中进行攻击，（最好找一个弱口令字典）</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-41-1024x490.png" alt="img"></p>
<p>简单设置进行暴力破解的字典，然后设置匹配项。由于我们知道页面登录失败的时候会出现password error的选项，因此进入到option页面中设置匹配。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-42.png" alt="img"></p>
<p>点击clear将所有的匹配规则清除</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-43.png" alt="img"></p>
<p>点击add将error的匹配规则添加进去</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-44.png" alt="img"></p>
<p>然后点击start attack开始攻击</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-45.png" alt="img"></p>
<p>稍微等一下，等攻击结果出现</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-46.png" alt="img"></p>
<p>发现123456这个密码没有匹配到error的规则，然后进入到页面中将123456密码输入进去</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-47.png" alt="img"></p>
<p>进入到跳转页面中，成功找到flag数据。</p>
<p>本题也成功解决，题目的思路也是比较简单的。考察的要点就是暴力破解，通过暴力破解解决问题。</p>
<p>题目属于简单题。</p>
<h2 id="simple-php">simple php</h2>
<p>这道题的题目是simple_php，应该是一道考察php代码的简单题目</p>
<p>进入到题目页面，来获取到更多信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-48-1024x287.png" alt="img">simple_php题目</p>
<p>页面中的题目描述信息也是在说php代码的问题，这道题目应该是在考察php代码的简单使用情况</p>
<p>进入到靶机环境来一探究竟</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-49.png" alt="img"></p>
<p>直接展示出源代码，这应该是一道简单的php代码审计题目，本菜鸡的php基础还可以，这道题目主要是考察php代码的特性和缺陷。</p>
<p>这道题目中有三个特性进行了考察：</p>
<ol>
<li>php中的字符串在进行比较的时候都会被当作0来处理</li>
<li>php中的变量如果被赋值了数字加字符，在进行数值判断的时候，字符会被忽略</li>
<li>php中的<code>is_numeric()</code>函数会判断变量是否是纯数字，如果是纯数字就返回true，如果不是纯数字就返回false</li>
</ol>
<p>有时候php代码审计的题目遇到不认识的代码或者函数，可以进行搜索引擎的使用和查找</p>
<p>代码可控的地方是get传输的数据，a和b参数作为数据接收并进行传递的</p>
<p>由于这道题目比较简单，直接在url上面进行构造</p>
<p>构造payload：<code>url?a=Flag&amp;b=1235s</code></p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-50.png" alt="img"></p>
<p>成功获取到flag数据，题目解决。</p>
<p>题目主要考察get传输方式和php代码的特性，思路也比较简单，分析代码的逻辑进行简单的注入就可以解决问题。属于简单题目。</p>
<h2 id="get-post">get post</h2>
<p>看题目，这道题目应该是考察http的传输数据的方式，get传输方式和post传输数据的方式</p>
<p>点开题目，希望可以从题目页面中获取到更多的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-51-1024x307.png" alt="img">get_post题目</p>
<p>题目描述也是说用get和post方式，看来这道题目的关键点就是get和post传输数据的方式。</p>
<p>由于这里涉及的post方式的传输，这里需要使用一个Hackbar的插件攻击来辅助进行注入进攻来获取到flag数据。这里给出hackbar的GitHub地址：https://github.com/Hack-Free/HackBar，如果没有这个工具可以进行下载使用。</p>
<p>现在工具齐全了，可以进行尝试去拿flag了，打开靶机进入到环境中</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-52.png" alt="img"></p>
<p>页面中展示的信息非常明确，而且比较明了。为了方便操作，进入到kali系统中的已装好hackbar的firefox浏览器中进行操作。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-53-1024x222.png" alt="img"></p>
<p>首先使用get方法进行提交，点击execut进行传输</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-54.png" alt="img"></p>
<p>页面内容发生了变化，这次使用post数据进行传输</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-55-1024x333.png" alt="img"></p>
<p>点击execute进行传输数据</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-56.png" alt="img"></p>
<p>数据传输过去后，页面发生变化，然后flag数据就展示在眼前，题目解决。</p>
<p>这道题目的思路非常清晰，就是引导性的题目，没有什么难度，应该是道签到题目。</p>
<p>题目考察的知识点是http传输数据的方式，属于签到题。</p>
<h2 id="xff-referer">xff referer</h2>
<p>刚开始看到这个题目标题的时候还是有点懵逼的，因为本菜鸡并不知道什么是xff和referer</p>
<p>于是使用搜索引擎解决一下问题</p>
<p><strong><code>X-Forwarded-For</code></strong> (XFF) 在客户端访问服务器的过程中如果需要经过HTTP代理或者负载均衡服务器，可以被用来获取最初发起请求的客户端的IP地址，这个消息首部成为事实上的标准。在消息流从客户端流向服务器的过程中被拦截的情况下，服务器端的访问日志只能记录代理服务器或者负载均衡服务器的IP地址。如果想要获得最初发起请求的客户端的IP地址的话，那么 X-Forwarded-For 就派上了用场。[3]</p>
<p><code>**Referer**</code> 请求头包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。服务端一般使用 <code>Referer</code> 请求头识别访问来源，可能会以此进行统计分析、日志记录以及缓存优化等。[4]</p>
<p>发现Xff和Referer就是一个可以进行IP代理的东西和一个可以进行来源记录的东西</p>
<p>再去查一下Xff和Referer的语法格式，确保对于Xff和Referer的知识掌握的比较完善。</p>
<p>于是再去MDN上查看一波：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-http" data-lang="http"><span style="color:#960050;background-color:#1e0010">X-Forwarded-For: &lt;client&gt;, &lt;proxy1&gt;, &lt;proxy2&gt;
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"># 示例
</span><span style="color:#960050;background-color:#1e0010">X-Forwarded-For: 2001:db8:85a3:8d3:1319:8a2e:370:7348
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">X-Forwarded-For: 203.0.113.195
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">X-Forwarded-For: 203.0.113.195, 70.41.3.18, 150.172.238.178
</span><span style="color:#960050;background-color:#1e0010">Referer: &lt;url&gt;
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"># 示例
</span><span style="color:#960050;background-color:#1e0010">Referer: https://developer.mozilla.org/en-US/docs/Web/JavaScript
</span></code></pre></div><p>点开题目查看，题目中又有些什么信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-57-1024x287.png" alt="img">xff_referer题目</p>
<p>根据题目描述，xff和referer是可以伪造的，可以知道这道题目应该是伪造xff和referer的题目，由于xff和referer都是http头部的信息，所以需要使用burp suite进行抓包来伪造xff和referer信息，需要先启动一下kali操作系统。</p>
<p>目前，知识基础和工具基础都准备好了，进入到靶机环境</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-58.png" alt="img">靶机环境</p>
<p>要求ip必须为123.123.123.123，用burp suite抓到数据包，修改xff数据来进行伪造</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-59.png" alt="img"></p>
<p>然后进行放行来查看页面情况</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-60.png" alt="img"></p>
<p>页面返回了一个必须来自https://www.google.com</p>
<p>再次抓包，设置一下referer和xff的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-61.png" alt="img"></p>
<p>将数据包放行，然后查看页面信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-62.png" alt="img"></p>
<p>最后，页面成功出现flag信息，题目成功解决，题目比较简单，具有引导性</p>
<p>题目属于简单的题目，应该算是签到题，题目主要考察对于xff和referer的http头部信息的了解和掌握，思路比较流程，具有引导性。</p>
<h2 id="webshell">webshell</h2>
<p>看到这个·题目，首先第一反应是上传php一句话木马拿webshell。可能有人不解，什么是webshell？什么是一句话木马？这里搬出百度百科的解释，对webshell简单说明：</p>
<p>webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种代码执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服务器WEB目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。[5]</p>
<p>webshell简单来说就是命令执行的环境，而一句话木马就是在创建一个可以连接到网站的命令执行环境的一个后门程序，这个后门程序通常都是比较简单，比较小的文件。可以通过网站的文件上传漏洞进行文件上传，创建后门木马。</p>
<p>进入到题目页面，看看可以获取到什么额外的信息：</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-63-1024x274.png" alt="img">webshell题目</p>
<p>根据题目描述，这道题目应是考察一句话木马的题目，而且是php一句话木马的题目。</p>
<p>根据目前的推出和知识分析，进入环境来看看怎么拿flag</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-64.png" alt="img">靶机环境</p>
<p>靶机环境中的页面直接把页面中写入的php一句话木马展示出来了，是通过post方式进行参数传递的。</p>
<p>这道题目可以使用hackbar插件进行post数据的传输，首先进行hello world输出来测试webshell的稳定性，根据页面回显情况来进行下一步操作。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-66-1024x352.png" alt="img"></p>
<p>查看一下，页面的回显情况</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-71.png" alt="img"></p>
<p>页面将hello world成功输出到页面上面，说明页面会直接将代码执行结果回显到页面上面，回显效果良好。</p>
<p>接下来，讲一个的php的小技巧：</p>
<blockquote>
<p>php代码中的反引号```可以直接执行终端shell命令.并返回输出</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> 
    <span style="color:#66d9ef">echo</span> <span style="color:#e6db74">`ls`</span>; <span style="color:#75715e">#会将ls命令的输出结果输出到php页面上面
</span><span style="color:#75715e"></span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>下面我们就可以根据这个小技巧来构造payload：<code>shell=echo </code>ls<code>;</code></p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-67-1024x340.png" alt="img"></p>
<p>查看页面返回的结果</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-68.png" alt="img"></p>
<p>发现网站的站点目录下有两个文件，一个是index.php文件，一个是flag.txt文件</p>
<p>显然flag文件肯定就是目标文件，需要查看到flag.txt文件中究竟写了些什么样的内容，flag.txt文件很可能藏着flag文件</p>
<p>构造payload：<code>shell=echo </code>cat flag.txt<code>;</code></p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-69-1024x363.png" alt="img"></p>
<p>查看页面显示的结果</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-70.png" alt="img"></p>
<p>发现flag.txt文件中写的就是flag数据，题目解决</p>
<p>题目主要考察php一句话木马，php特性和linux命令的简单使用，整体思路还是比较流畅的，题目难度比较简单，顺着思路就可以解决了。当然此题有多种解法。</p>
<h2 id="command-execution">command execution</h2>
<p>看到题目，可能是考察命令执行漏洞的题目，从题目也获取不到太多信息</p>
<p>直接点开题目页面，来看看有没有更多的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-72-1024x290.png" alt="img">command_execution题目</p>
<p>题目描述说是ping功能，题目可能于ping功能有些出入，进入靶场环境看看情况</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-73.png" alt="img"></p>
<p>靶机环境</p>
<p>页面非常简单，好像就是一个ping功能的页面，首先试试使用127.0.0.1地址进行测试</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-74.png" alt="img"></p>
<p>发现这是一个命令执行环境，可控的地方就是输入框</p>
<p>来分析一下输入框的输入模式：</p>
<blockquote>
<p>输入框可以输入ip地址和url地址</p>
<p>输入的内容前方会被增加<code>ping -c 3 </code>的代码</p>
<p>输入内容的后面不会增加任何额外代码</p>
<p>页面输出内容会把终端输出内容返回</p>
</blockquote>
<p>因此，这里可以使用一点shell的语法技巧来构造payload</p>
<p><code>&amp;&amp;</code>在shell语法中是前面的命令执行成功后继续执行后面的代码</p>
<pre tabindex="0"><code>ping -c 3 127.0.0.1 &amp;&amp; ls # 会先执行ping命令，ping命令执行成功会再执行ls命令
</code></pre><p>于是构造payload：<code>127.0.0.1 &amp;&amp; ls</code> ，并输入到输入框中来执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-75.png" alt="img"></p>
<p>发现网站页面下没有藏有flag文件，下一个可能的目录是home目录或是root目录</p>
<p>访问root目录需要权限，于是先查看一下ping功能的用户权限</p>
<p>构造payload：<code>127.0.0.1 &amp;&amp; id</code> ，并输入到输入框中来执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-76.png" alt="img"></p>
<p>发现ping的权限仅仅知识apache的权限，使用的服务器很可能是Ubuntu服务</p>
<p>构造payload：<code>127.0.0.1 &amp;&amp; uname -a</code> ，并输入到输入框中执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-77.png" alt="img"></p>
<p>发现服务器确实是Ubuntu服务器</p>
<p>根据目前收集到的信息，可能只能访问到home目录下，那就先尝试查看到home目录，如果home目录下没有再尝试提权进入到root目录下</p>
<p>构造查看home目录的payload：<code>127.0.0.1 &amp;&amp; ls /home </code>，输入到输入框中执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-78.png" alt="img"></p>
<p>发现home目录下存在有flag文件，让本菜鸡来瞧瞧这个flag.txt里面写的啥</p>
<p>构造payload：<code>127.0.0.1 &amp;&amp; cat /home/flag.txt </code>，输入到输入框中执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-79.png" alt="img"></p>
<p>发现flag.txt里面写的就是flag数据，题目解决</p>
<p>题目主要考察linux命令行的使用以及对于命令执行漏洞的觉察，题目的解题思路还是比较流畅的，题目应该也属于简单题。难度并不是很高。</p>
<h2 id="simple-js">simple js</h2>
<p>看到题目，应该是一个简单JavaScript代码审计的题目</p>
<p>进入到题目页面中，希望可以获取到更多相关的数据</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-80-1024x304.png" alt="img">simple_js题目</p>
<p>看到题目的难度系数，可知这道题目应该不简单，网页一直输入不对密码，这应该是一个提示</p>
<p>下面就直接进入到靶机环境来看看情况</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-81.png" alt="img"></p>
<p>页面直接就是一个提示框，先随便输入点内容</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-82.png" alt="img"></p>
<p>就报出了另一个提示框，然后页面内容是空白的</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-83.png" alt="img"></p>
<p>这种情况下，只能尝试从F12检查源代码中找到一些有用的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-84.png" alt="img"></p>
<p>在源代码检查的过程中找到了js的代码，这道题目应该是对js源代码的审计</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">dechiffre</span>(<span style="color:#a6e22e">pass_enc</span>) {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&#34;</span>;
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass_enc</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">l</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
        <span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">o</span>, <span style="color:#a6e22e">p</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
    <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>.<span style="color:#a6e22e">length</span>;
    <span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> (<span style="color:#a6e22e">l</span>) <span style="color:#f92672">+</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>);
    <span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>.<span style="color:#a6e22e">length</span>;
    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
        <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;
    }
    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
            <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
    }
    <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>(<span style="color:#a6e22e">tab2</span>[<span style="color:#ae81ff">17</span>]);
    <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p</span>;
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pass</span>;
}
String[<span style="color:#e6db74">&#34;fromCharCode&#34;</span>](<span style="color:#a6e22e">dechiffre</span>(<span style="color:#e6db74">&#34;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&#34;</span>));

<span style="color:#a6e22e">h</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">prompt</span>(<span style="color:#e6db74">&#39;Enter password&#39;</span>);
<span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">dechiffre</span>(<span style="color:#a6e22e">h</span>));
</code></pre></div><p>然后对这段js代码进行简单分析：</p>
<blockquote>
<ol>
<li>
<p>从js代码整体来看，代码先定义了一个dechiffre的函数，然后定义了一个字符串数组，然后使用了两个功能性函数进行弹窗。</p>
</li>
<li>
<p>整段js代码的核心应该是应该是定义的dechiffre的函数，对于dechiffre函数的分析应该就是解决这道题目的关键性问题</p>
</li>
</ol>
</blockquote>
<p>下面对JS源代码中的dechiffre函数进行分析：</p>
<p>首先将dechiffre函数内部进行划分</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">dechiffre</span>(<span style="color:#a6e22e">pass_enc</span>) {

    <span style="color:#75715e">// 变量定义区
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&#34;</span>;
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass_enc</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">l</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
        <span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">o</span>, <span style="color:#a6e22e">p</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;

    <span style="color:#75715e">// 变量处理区
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>.<span style="color:#a6e22e">length</span>;
    <span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> (<span style="color:#a6e22e">l</span>) <span style="color:#f92672">+</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>);
    <span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>.<span style="color:#a6e22e">length</span>;

    <span style="color:#75715e">// 逻辑处理区
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
        <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;
    }
    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
            <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
    }

    <span style="color:#75715e">// 最终输出区
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>(<span style="color:#a6e22e">tab2</span>[<span style="color:#ae81ff">17</span>]);
    <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p</span>;
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pass</span>;
}
</code></pre></div><p>js函数被划分成四个区域：</p>
<ol>
<li>变量定义区</li>
<li>变量处理区</li>
<li>逻辑处理区</li>
<li>最终输出区</li>
</ol>
<p>下面对这四个分区进行逐一分析</p>
<p>变量定义区：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&#34;</span>;
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass_enc</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">l</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
        <span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">o</span>, <span style="color:#a6e22e">p</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
</code></pre></div><blockquote>
<ol>
<li>
<p>定义了一个pass变量并赋值&quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;</p>
</li>
<li>
<p>定义了一个tab变量并赋值pass_enc参数进行分隔成数组</p>
</li>
<li>
<p>定义了一个tab2变量并赋值pass变量进行分隔成数组[70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65]</p>
</li>
<li>
<p>定义了变量i，j，k，l并赋值为0，定义了变量m，n，o，p并赋值为“”</p>
</li>
</ol>
</blockquote>
<p>变量处理区</p>
<pre tabindex="0"><code>    i = 0;
    j = tab.length;
    k = j + (l) + (n = 0);
    n = tab2.length;
</code></pre><blockquote>
<ol>
<li>
<p>将变量i再次赋值为0</p>
</li>
<li>
<p>将变量j赋值为tab的长度</p>
</li>
<li>
<p>将变量k赋值为j的值加上l和n=0的数值</p>
</li>
<li>
<p>将变量n赋值为tab2的长度，即n=18</p>
</li>
</ol>
</blockquote>
<p>逻辑处理区</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
        <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;
    }
    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
            <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
    }
</code></pre></div><blockquote>
<ol>
<li>
<p>对于第一个循环，初始值i被赋值为0，限制条件是i&lt;18，循环条件是i++</p>
<p>循环内部是对于o变量的处理，第一个赋值语句是无用的赋值语句，由于下面的语句会对o进行   重新赋值处理。下面<code>p += String.fromCharCode((o = tab2[i]));</code>语句涉及了string对象和fromCharCode（）函数。经过搜索和查询，发现fromcharcode函数是将unicode值转换为字符的函数，属于String对象的api。这条语句的作用是对p变量进行累计赋值处理。如果i==5循环就结束。</p>
</li>
<li>
<p>对于第二个循环，初始值i被赋值为0，限制条件是i&lt;18，循环条件是i++</p>
<p>循环内部依旧是对于o变量的处理，还是和第一个循环非常类似的处理，都是最终对于p变量进行累计赋值。</p>
</li>
<li>
<p>两个循环都是对于p变量进行累加赋值。</p>
</li>
</ol>
</blockquote>
<p>最终输出区</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>(<span style="color:#a6e22e">tab2</span>[<span style="color:#ae81ff">17</span>]);
    <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p</span>;
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pass</span>;
</code></pre></div><blockquote>
<ol>
<li>
<p>仍然是对p变量进行赋值处理</p>
</li>
<li>
<p>将p的值赋值给pass</p>
</li>
<li>
<p>将pass变量返回</p>
</li>
</ol>
</blockquote>
<p>总体对这个函数进行分析，这个函数根本没有涉及任何传入参数的处理情况，简单来说就是没有tab数组任何事情。无论传入什么变量都只返回tab2数组的数据。</p>
<p>再看看代码最后的调用情况</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">String[<span style="color:#e6db74">&#34;fromCharCode&#34;</span>](<span style="color:#a6e22e">dechiffre</span>(<span style="color:#e6db74">&#34;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&#34;</span>));

<span style="color:#a6e22e">h</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">prompt</span>(<span style="color:#e6db74">&#39;Enter password&#39;</span>);
<span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">dechiffre</span>(<span style="color:#a6e22e">h</span>));
</code></pre></div><blockquote>
<ol>
<li>
<p>这个函数被调用两次。</p>
</li>
<li>
<p>第一次是调用了dechiffre并传入参数</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">“\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30”
</code></pre></div><p>作为函数的实参进行传入数据</p>
<ol start="3">
<li>第二次是调用了用户输入的数据（无论传入什么数据结果都一样）</li>
</ol>
</blockquote>
<p>所以这个JavaScript的代码中肯定藏有flag，flag可能藏在第一次传入的参数中</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30
</code></pre></div><p>编写js文件对第一次传入的参数进行处理</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
&lt;<span style="color:#f92672">html</span>&gt;
&lt;<span style="color:#f92672">head</span>&gt;
	&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>&gt;
	&lt;<span style="color:#f92672">title</span>&gt;test&lt;/<span style="color:#f92672">title</span>&gt;
	&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span>&gt;
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">input</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&#34;</span>;
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span>;
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">o</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab</span><span style="color:#f92672">=</span><span style="color:#a6e22e">input</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
		document.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">tab</span>);
		<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">tab</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
			<span style="color:#a6e22e">result</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span><span style="color:#f92672">=</span><span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span>]))
		}
    	document.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">result</span>);
	&lt;/<span style="color:#f92672">script</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;
&lt;<span style="color:#f92672">body</span>&gt;

&lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>在浏览器上运行一下这段代码</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-85.png" alt="img"></p>
<p>undefined后面那段字符就是flag数据：786OsErtk12</p>
<p>这道题目也解决了，分析过程比较复杂，需要一定的JavaScript基础。难度其实也应该是一道简单题目，但是思路比较绕，如果比较灵敏可以直接找到关键数据，对关键数据进行unicode解码在进行ascii解码就能得出flag数据。</p>
<p>这里提供几个网址，便于js基础不是非常牢固的人补习一下：</p>
<p><a href="https://javascript.ruanyifeng.com/">https://javascript.ruanyifeng.com/</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">https://www.liaoxuefeng.com/wiki/1022910821149312</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/learn/JavaScript">https://developer.mozilla.org/zh-CN/docs/learn/JavaScript</a></p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://wiwiki.kfd.me/wiki/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3">WIKI百科-蛮力攻击</a></li>
<li><a href="https://www.jianshu.com/p/4da49f179cee">爆破工具 Hydra 简单使用</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Forwarded-For">X-Forwarded-For MDN</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referer">Referer MDN</a></li>
<li><a href="https://baike.baidu.com/item/WEBSHELL">webshell 百度百科</a></li>
</ol>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
    </channel>
</rss>
