<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hello Friend NG</title>
        <link>/posts/</link>
        <description>Recent content in Posts on Hello Friend NG</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 04 Oct 2022 23:18:37 +0800</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>OtterCTF 2018 内存取证复现</title>
            <link>/posts/otterctf_2018_memory_forensic_writeup/</link>
            <pubDate>Tue, 04 Oct 2022 23:18:37 +0800</pubDate>
            
            <guid>/posts/otterctf_2018_memory_forensic_writeup/</guid>
            <description>OtterCTF 2018 Memory Forensic Reappearance 想学习并练习下电子取证技术，经过网络上的一番搜索发现OtterCTF的取证题目非常有意思，这次尝试练习下内存取证的题目顺便学习下内存取证的相关内容和技能点。内存取证主要使用的工具是Volatility，githu上面有相关项目。Volatility有两个版本分别是用python2和python3进行构建的，目前主要的组件还是以python2为主。 Volatility项目地址：https://github.com/volatilityfoundation/volatility Volatility3项目地址：https://github.com/volatilityfoundation/volatility3
环境配置：Kali Linux 2022 工具配置：volatility + mimikatz
Info 题目附件就一个镜像，先查看下镜像的指纹数据：
5b3d8a9f9c96581a821c19b71dd6aa80dd299fc674b818f443f3a6fb5495a872 OtterCTF.vmem 使用vol简单查看下镜像信息数据，查看数据的指令：
vol.py -f OtterCTF.vmem imageinfo 说明
vol.py volatility程序 -f OtterCTF.vmem 加载OtterCTF.vmem内存镜像文件 imageinfo 查看内存镜像的基本信息 得到如下信息：
可以看到大致的镜像系统是Win7系统
What the password? 查看题目描述：
you got a sample of rick&amp;#39;s PC&amp;#39;s memory. can you get his user password? 要得到用户名的密码，先获取到hash数据，使用获取hash的指令：
vol.py -f OtterCTF.vmem --profile=Win7SP1x64 hashdump --profile=Win7SP1x64 设置配置为Win7SP1x64配置 hashdump 从内存中dump出密码的hash信息 得到hash信息：
对于这种hash信息可以使用mimikatz插件，或者使用hashcat也可以，这里使用mimikatz进行获取
使用如下指令使用mimikatz插件进行获取：
vol.py -f OtterCTF.vmem --profile=Win7SP1x64 mimikatz 得到如下信息：</description>
            <content type="html"><![CDATA[<h1 id="otterctf-2018-memory-forensic-reappearance">OtterCTF 2018 Memory Forensic Reappearance</h1>
<p>想学习并练习下电子取证技术，经过网络上的一番搜索发现OtterCTF的取证题目非常有意思，这次尝试练习下内存取证的题目顺便学习下内存取证的相关内容和技能点。内存取证主要使用的工具是Volatility，githu上面有相关项目。Volatility有两个版本分别是用python2和python3进行构建的，目前主要的组件还是以python2为主。
Volatility项目地址：<a href="https://github.com/volatilityfoundation/volatility">https://github.com/volatilityfoundation/volatility</a>
Volatility3项目地址：<a href="https://github.com/volatilityfoundation/volatility3">https://github.com/volatilityfoundation/volatility3</a></p>
<p>环境配置：Kali Linux 2022
工具配置：volatility + mimikatz</p>
<h2 id="info">Info</h2>
<p>题目附件就一个镜像，先查看下镜像的指纹数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>5b3d8a9f9c96581a821c19b71dd6aa80dd299fc674b818f443f3a6fb5495a872  OtterCTF.vmem
</span></span></code></pre></div><p>使用vol简单查看下镜像信息数据，查看数据的指令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vol.py -f OtterCTF.vmem imageinfo
</span></span></code></pre></div><blockquote>
<p><strong>说明</strong></p>
<ul>
<li><code>vol.py</code> volatility程序</li>
<li><code>-f OtterCTF.vmem</code>  加载<code>OtterCTF.vmem</code>内存镜像文件</li>
<li><code>imageinfo</code> 查看内存镜像的基本信息</li>
</ul>
</blockquote>
<p>得到如下信息：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221002204848160.png" alt="image-20221002204848160"></p>
<p>可以看到大致的镜像系统是Win7系统</p>
<h2 id="what-the-password">What the password?</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>you got a sample of rick&#39;s PC&#39;s memory. can you get his user password?
</span></span></code></pre></div><p>要得到用户名的密码，先获取到hash数据，使用获取hash的指令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vol.py -f OtterCTF.vmem --profile<span style="color:#f92672">=</span>Win7SP1x64 hashdump  
</span></span></code></pre></div><blockquote>
<ul>
<li><code>--profile=Win7SP1x64</code> 设置配置为<code>Win7SP1x64</code>配置</li>
<li><code>hashdump</code> 从内存中dump出密码的hash信息</li>
</ul>
</blockquote>
<p>得到hash信息：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221002212051508.png" alt="image-20221002212051508"></p>
<p>对于这种hash信息可以使用mimikatz插件，或者使用hashcat也可以，这里使用mimikatz进行获取</p>
<p>使用如下指令使用mimikatz插件进行获取：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vol.py -f OtterCTF.vmem --profile<span style="color:#f92672">=</span>Win7SP1x64 mimikatz
</span></span></code></pre></div><p>得到如下信息：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221002214545148.png" alt="image-20221002214545148"></p>
<p>已经获取到了密码信息，提交flag，攻破此题：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>CTF{MortyIsReallyAnOtter}
</span></span></code></pre></div><h2 id="general-info">General Info</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Let&#39;s start easy - whats the PC&#39;s name and IP address?
</span></span></code></pre></div><p>需要获取PC’s name和IP， PC的名字已经很明确了，应该就是刚刚获取密码信息得到的<code>WIN-LO6FAF3DTFE</code></p>
<p>下面需要获取的应该就是IP地址，使用网络扫描指令应该可以获取到相应的信息：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221003001348636.png" alt="image-20221003001348636"></p>
<p>可以看出IP地址应该是：<code>192.168.202.131</code></p>
<p>根据题目要求，flag应该是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>CTF{WIN-LO6FAF3DTFE}
</span></span><span style="display:flex;"><span>CTF{192.168.202.131}
</span></span></code></pre></div><h2 id="play-time">Play Time</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Rick just loves to play some good old videogames.
</span></span><span style="display:flex;"><span>can you tell which game is he playing?
</span></span><span style="display:flex;"><span>whats the IP address of the server?
</span></span></code></pre></div><p>玩游戏肯定会有进程的存储在内存中，扫描下进程情况，使用如下指令进行查看：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vol.py -f OtterCTF.vmem --profile<span style="color:#f92672">=</span>Win7SP1x64 psscan
</span></span></code></pre></div><p>得到如下信息：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221003002817020.png" alt="image-20221003002817020"></p>
<p>可以发现到了一个不熟悉的进程，猜测这个进程是游戏进程，也就是游戏名称是<code>LunarMS.exe</code></p>
<p>再使用<code>netscan</code>查看下网络通信信息：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221003003940157.png" alt="image-20221003003940157"></p>
<p>可以发现一个ip地址，应该是游戏下载的ip地址，可以得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>CTF{LunarMS.exe}
</span></span><span style="display:flex;"><span>CTF{77.102.199.102}
</span></span></code></pre></div><h2 id="name-game">Name Game</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>We know that the account was logged in to a channel called Lunar-3. what is the account name?
</span></span></code></pre></div><p>应该需要找到游戏的用户名，应该存储在游戏的内存中，尝试将游戏进程进行dump来获取到游戏进程的内存信息</p>
<p>vol程序进行内存dump的指令如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vol.py -f OtterCTF.vmem --profile<span style="color:#f92672">=</span>Win7SP1x64 memdump -p <span style="color:#ae81ff">708</span> -D ./
</span></span></code></pre></div><blockquote>
<p><strong>说明</strong></p>
<ul>
<li><code>memdump</code> 内存dump的命令</li>
<li><code>-p 708</code> 指定PID号708的进程</li>
<li><code>-D ./</code> 指定内存dump进程文件存储位置</li>
</ul>
</blockquote>
<p>运行指令得到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221003014902581.png" alt="image-20221003014902581"></p>
<p>尝试检索dump出来的文件的字符串，使用如下命令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>strings 708.dmp | grep Lunar-3
</span></span></code></pre></div><blockquote>
<p><strong>说明</strong></p>
<ul>
<li><code>strings 708.dmp</code> 打印出<code>708.dmp</code>二进制文件中的可打印字符</li>
<li><code>|</code>  管道符，可以将左边命令输出的数据传递右边的命令处理</li>
<li><code>grep Lunar-3</code> 检索有<code>Lunar</code>字符串所在的行并打印</li>
</ul>
</blockquote>
<p>运行命令得到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221003015212113.png" alt="image-20221003015212113"></p>
<p>发现是存在相关字符串内容，增加点参数来获得字符串的上下文内容，执行如下命令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>strings 708.dmp | grep Lunar-3 -A <span style="color:#ae81ff">3</span> -B <span style="color:#ae81ff">3</span>
</span></span></code></pre></div><blockquote>
<p><strong>说明</strong></p>
<ul>
<li><code>-A 3</code> 检索字符串所在行的前3行</li>
<li><code>-B 3</code> 检索字符串所在行的后3行</li>
</ul>
</blockquote>
<p>执行命令得到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221003020425640.png" alt="image-20221003020425640"></p>
<p>发现存在可疑字符串：<code>0tt3r8r33z3</code></p>
<p>感觉这个字符串应该就是用户名，尝试提交成功</p>
<p>故flag是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>CTF{0tt3r8r33z3}
</span></span></code></pre></div><h2 id="name-game-2">Name Game 2</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>From a little research we found that the username of the logged on character is always after this signature: 0x64 0x??{6-8} 0x40 0x06 0x??{18} 0x5a 0x0c 0x00{2}
</span></span><span style="display:flex;"><span>What&#39;s rick&#39;s character&#39;s name?
</span></span></code></pre></div><p>这道题目应该寻找相关的字符，需要进行模糊搜索</p>
<p>这道题目有两种解题方法：</p>
<ol>
<li>使用Linux的<code>hexdump</code>和<code>grep</code>命令来进行联合检索</li>
<li>使用Hexedit类工具进行逐一寻找来确定相应位置</li>
</ol>
<h3 id="method-1">Method 1</h3>
<p>使用如下Linux命令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hexdump -C 708.dmp | grep <span style="color:#e6db74">&#34;64&#34;</span> -A <span style="color:#ae81ff">5</span> -B <span style="color:#ae81ff">5</span> | grep <span style="color:#e6db74">&#34;40 06&#34;</span> -A <span style="color:#ae81ff">5</span> -B <span style="color:#ae81ff">5</span> | grep <span style="color:#e6db74">&#34;5a 0c 00 00&#34;</span> -A <span style="color:#ae81ff">5</span> -B <span style="color:#ae81ff">5</span>
</span></span></code></pre></div><p>执行命令获得：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221003113309491.png" alt="image-20221003113309491"></p>
<p>由于dump文件比较大，因此，这个命令可能需要执行4-5min才能执行出来结果，运行命令比较简单，但是运行时间相对比较长。</p>
<p>运行得到的字符串就是<code>M0rtyL0L</code></p>
<p>故此题的flag就是<code>CTF{M0rtyL0L}</code></p>
<h3 id="method-2">Method 2</h3>
<p>使用WinHex之类的工具进行查看搜索<code>5a0c0000</code></p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221003115058149.png" alt="image-20221003115058149"></p>
<p>进行Hex value的搜索，依次对搜索列表进行比对和寻找：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221003115148926.png" alt="image-20221003115148926"></p>
<p>最后找到目标位置：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221003115217012.png" alt="image-20221003115217012"></p>
<p>这种方式要进行查找比对，查找速度快的话是比Linux命令要快些，但是就是需要不断的人工比对和查看</p>
<p>得到字符串<code>M0rtyL0L</code></p>
<p>故此题的flag就是<code>CTF{M0rtyL0L}</code></p>
<p>这两种解题方法各有利弊，可以根据个人的喜好选择求解，个人更倾向于Linux那种解法，输入完命令就可以喝杯茶慢慢等，一会儿结果就出来了</p>
<h2 id="silly-rick">Silly Rick</h2>
<p>查看题目描述</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Silly rick always forgets his email&#39;s password, so he uses a Stored Password Services online to store his password. He always copy and paste the password so he will not get it wrong. whats rick&#39;s email password?
</span></span></code></pre></div><p>根据题目描述，可以确定的关键语句<code>copy and paste</code>，说明邮箱地址应该是存储在粘贴板上面，可以查看下内存的粘贴板。</p>
<p>使用vol的如下指令查看粘贴板信息：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221003131135095.png" alt="image-20221003131135095"></p>
<p>可以发现的粘贴板信息：<code>M@il_Pr0vid0rs</code></p>
<p>故此题的flag就是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>CTF{M@il_Pr0vid0rs}
</span></span></code></pre></div><h2 id="hide-and-seek">Hide And Seek</h2>
<p>查看题目描述</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>The reason that we took rick&#39;s PC memory dump is because there was a malware infection. Please find the malware process name (including the extension)
</span></span></code></pre></div><p>根据题目描述，应该是需要寻找下恶意软件进程名称，vol这个软件功能非常强大，可以直接使用<code>malfind</code>的参数进行扫描，使用如下指令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vol.py -f OtterCTF.vmem --profile<span style="color:#f92672">=</span>Win7SP1x64 malfind | grep Process
</span></span></code></pre></div><p>得到恶意进程信息：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221003180849409.png" alt="image-20221003180849409"></p>
<p>可以简单的归纳下恶意进程的信息：</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Pid</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>WmiPrvSE.exe</code></td>
<td>2136</td>
</tr>
<tr>
<td><code>explorer.exe</code></td>
<td>2728</td>
</tr>
<tr>
<td><code>BitTorrent.exe</code></td>
<td>2836</td>
</tr>
<tr>
<td><code>PresentationFo</code></td>
<td>724</td>
</tr>
<tr>
<td><code>mscorsvw.exe</code></td>
<td>412</td>
</tr>
<tr>
<td><code>mscorsvw.exe</code></td>
<td>3124</td>
</tr>
<tr>
<td><code>svchost.exe</code></td>
<td>3196</td>
</tr>
<tr>
<td><code>chrome.exe</code></td>
<td>4076</td>
</tr>
<tr>
<td><code>vmware-tray.ex</code></td>
<td>3720</td>
</tr>
<tr>
<td><code>WebCompanionIn</code></td>
<td>3880</td>
</tr>
<tr>
<td><code>Lavasoft.WCAss</code></td>
<td>3496</td>
</tr>
<tr>
<td><code>WebCompanion.e</code></td>
<td>3856</td>
</tr>
</tbody>
</table>
<p>这些是可能的恶意进程，需要找到题目要求的恶意进程，看看进程的cmd指令，使用如下指令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vol.py -f OtterCTF.vmem --profile<span style="color:#f92672">=</span>Win7SP1x64 cmdline
</span></span></code></pre></div><p>得到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004150006413.png" alt="image-20221004150006413"></p>
<p>可以看到有一个进程是在Temp目录下进行执行，这个进程应该就是恶意进程了，一般恶意进程会在Temp目录中运行。</p>
<p>故恶意进程就是<code>vmware-tray.exe</code></p>
<p>故此题的flag就是<code>CTF{vmware-tray.exe}</code></p>
<h2 id="path-to-glory">Path To Glory</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>How did the malware got to rick&#39;s PC? It must be one of rick old illegal habits...
</span></span></code></pre></div><p>应该是要寻找的Rick的不良习惯，进行文件扫描来尝试确定可疑的文件</p>
<p>文件扫描使用<code>filescan</code>指令，由于是要寻找Rick的文件需要进行简单过滤下，使用如下命令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vol.py -f OtterCTF.vmem --profile<span style="color:#f92672">=</span>Win7SP1x64 filescan | grep -i <span style="color:#e6db74">&#34;Rick&#34;</span>
</span></span></code></pre></div><blockquote>
<p><strong>说明</strong></p>
<ul>
<li><code>grep -i &quot;Rick&quot;</code> 忽略大小写检索<code>Rick</code></li>
</ul>
</blockquote>
<p>得到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004163351355.png" alt="image-20221004163351355"></p>
<p>发现一个torrent文件，可以猜测Rick应该平时会进行torrent种子文件的下载，而且这个种子文件的位置一般是在<code>Rick And Morty</code>文件夹下面。因此，进一步过滤查看相关信息，使用如下指令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vol.py -f OtterCTF.vmem --profile<span style="color:#f92672">=</span>Win7SP1x64 filescan | grep -i <span style="color:#e6db74">&#34;Rick And Morty&#34;</span>
</span></span></code></pre></div><p>得到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004164710378.png" alt="image-20221004164710378"></p>
<p>发现有一个文件的权限比较可疑，尝试将这个文件进行dump，来查看文件具体信息</p>
<p>使用如下命令进行dump：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vol.py -f OtterCTF.vmem --profile<span style="color:#f92672">=</span>Win7SP1x64 dumpfiles -Q 0x000000007dae9350 -D ./
</span></span></code></pre></div><blockquote>
<p><strong>说明</strong></p>
<ul>
<li><code>dumpfiles</code> dump文件指令</li>
<li><code>-Q 0x000000007dae9350 </code> 以物理偏移为<code>0x000000007dae9350</code>的文件作为对象</li>
<li><code>-D ./</code> dump文件目录在<code>./</code>目录下</li>
</ul>
</blockquote>
<p>得到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004170421613.png" alt="image-20221004170421613"></p>
<p>查看下dump文件中的可打印字符串数据</p>
<p>执行如下命令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>strings file.None.0xfffffa801b42c9e0.dat
</span></span></code></pre></div><p>得到可打印字符串信息：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004170725684.png" alt="image-20221004170725684"></p>
<p>故此题的flag应该是藏在<code>e7:website19:M3an_T0rren7_4_R!cke</code>这段字符串中，对这段字符串仔细观察，可以发现这段字符串是有一些明显特征的</p>
<p>可以发现<code>e</code>是作为开头结尾的引用，中间的数据就是<code>7:website19:M3an_T0rren7_4_R!ck</code>，应该是三个对象显然最后一个对象应该是就是flag</p>
<p>故此题的flag就是<code>CTF{M3an_T0rren7_4_R!ck}</code></p>
<h2 id="path-to-glory-2">Path To Glory 2</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Continue the search after the way that malware got in.
</span></span></code></pre></div><p>需要继续寻找关于恶意软件的信息，要往深入探索应该需要探索浏览器的相关信息，由于Rick被恶意攻击是由于Rick在浏览器上下载种子文件</p>
<p>把浏览器的进程内存dump出来查看关键的信息</p>
<p>使用如下指令来dump相关信息：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vol.py -f OtterCTF.vmem --profile<span style="color:#f92672">=</span>Win7SP1x64 memdump -n chrome -D ./f/
</span></span></code></pre></div><blockquote>
<p><strong>说明</strong></p>
<ul>
<li><code>memdump</code> dump内存命令</li>
<li><code>-n chrome</code> 以进程名称作为内存对象</li>
<li><code>-D ./f/</code> dump内存文件<code>./f/</code>目录</li>
</ul>
</blockquote>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004201432915.png" alt="image-20221004201432915"></p>
<p>使用<code>strings</code>命令来获取内存文件的可打印字符串，并添加<code>download.exe.torrent</code>作为过滤，由于恶意文件名是<code>download.exe.torrent</code>，因此采用这种方式进行过滤</p>
<p>使用如下指令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>strings ./f/* | grep <span style="color:#e6db74">&#34;download\.exe\.torrent&#34;</span> -A <span style="color:#ae81ff">10</span> -B <span style="color:#ae81ff">10</span>
</span></span></code></pre></div><p>得到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004204205771.png" alt="image-20221004204205771"></p>
<p>这串字符看样子是挺奇怪的，应该就是flag信息</p>
<p>尝试发现真正的flag数据是<code>Hum@n_I5_Th3_Weak3s7_Link_In_Th3_Ch@in</code></p>
<p>故此题的flag是<code>CTF{Hum@n_I5_Th3_Weak3s7_Link_In_Th3_Ch@in}</code></p>
<h2 id="bit-4-bit">Bit 4 Bit</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>We&#39;ve found out that the malware is a ransomware. Find the attacker&#39;s bitcoin address.
</span></span></code></pre></div><p>恶意软件是一个勒索软件，需要将那个恶意软件进行分析</p>
<p>首先需要dump出恶意软件的进程，使用<code>procdump</code>将进程dump作为一个可执行程序</p>
<p>使用如下命令进行dump：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>vol.py -f OtterCTF.vmem --profile=Win7SP1x64 procdump -p 3720 -D ./
</span></span></code></pre></div><blockquote>
<p><strong>说明</strong></p>
<ul>
<li><code>procdump</code> dump进程作为一个可执行文件</li>
<li><code>-p 3720</code>  以PID作为进程对象</li>
<li><code>-D ./</code>  将可执行文件存储在<code>./</code>目录</li>
</ul>
</blockquote>
<p>得到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004210324575.png" alt="image-20221004210324575"></p>
<p>需要对文件进行分析，首先查看软件的相关信息：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004210448989.png" alt="image-20221004210448989"></p>
<p>发现恶意软件是一个.NET的文件，可以使用dnSpy进行查看，拖进dnSpy进行寻找发现：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004210559036.png" alt="image-20221004210559036"></p>
<p>一个GUI绘制流，根据GUI的代码信息，使用PS绘制出GUI：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004211105657.png" alt="image-20221004211105657"></p>
<p>比特币地址显而易见就是：<code>1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M</code></p>
<p>故此题的flag就是<code>CTF{1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M}</code></p>
<h2 id="graphics-for-the-weak">Graphic’s For The Weak</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>There&#39;s something fishy in the malware&#39;s graphics.
</span></span></code></pre></div><p>使用dnSpy加载恶意软件，可以在资源目录中找到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004212217979.png" alt="image-20221004212217979"></p>
<p>故本题的flag就是<code>CTF{S0_Just_M0v3_Socy}</code></p>
<h2 id="recovery">Recovery</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Rick got to have his files recovered! What is the random password used to encrypt the files?
</span></span></code></pre></div><p>对恶意软件进行审计，找到关键的密码发送函数：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004214117780.png" alt="image-20221004214117780"></p>
<p>发现密码是根据计算机名称和用户名以及密码一起发送的，要dump恶意软件的内存信息，使用如下指令进行dump：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>vol.py -f OtterCTF.vmem --profile<span style="color:#f92672">=</span>Win7SP1x64 memdump -p <span style="color:#ae81ff">3720</span> -D ./
</span></span></code></pre></div><p>执行命令得到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004214626524.png" alt="image-20221004214626524"></p>
<p>使用<code>strings</code>命令进行检索，由于程序的数据是16字节小端序数据，.NET程序的用2字节表示一个字符串，所以是16字节小端序数据，因此使用如下命令进行过滤检索：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>strings -el 3720.dmp | grep WIN-LO6FAF3DTFE-Rick
</span></span></code></pre></div><p>运行得到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004215044513.png" alt="image-20221004215044513"></p>
<p>故此，密码就是<code>aDOBofVYUNVnmp7</code></p>
<p>故此题的flag就是<code>CTF{aDOBofVYUNVnmp7}</code></p>
<h2 id="closure">Closure</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Now that you extracted the password from the memory, could you decrypt rick&#39;s files?
</span></span></code></pre></div><p>要找文件并且解密文件。猜测存在一个flag文件，使用如下指令进行文件扫描：</p>
<pre tabindex="0"><code>vol.py -f OtterCTF.vmem --profile=Win7SP1x64 filescan | grep -i &#34;flag&#34;
</code></pre><p>运行命令得到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004215615853.png" alt="image-20221004215615853"></p>
<p>应该是桌面上的<code>Flag.txt</code>文件</p>
<p>将文件进行dump，使用如下命令进行文件dump：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ol.py -f OtterCTF.vmem --profile<span style="color:#f92672">=</span>Win7SP1x64 dumpfiles -Q 0x000000007e410890 -D ./
</span></span></code></pre></div><p>运行得到：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004220208957.png" alt="image-20221004220208957"></p>
<p>下面就需要对文件进行解密了</p>
<p>首先对dnSpy反编译的代码进行审计可以看到是：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004225734265.png" alt="image-20221004225734265"></p>
<p>hidden tear的程序算法</p>
<p>继续进行分析，可以发现一个AES的加密算法：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004230040181.png" alt="image-20221004230040181"></p>
<p>进行跟进分析可以发现一个加密文件的函数：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004230149524.png" alt="image-20221004230149524"></p>
<p>对这两个关键函数进行代码审计发现，核心的加密算法还是AES的算法</p>
<p>根据目前的分析情况，如果要解密这个文件主要有两种思路</p>
<ul>
<li>根据加密算法写解密脚本进行解密</li>
<li>使用HiddenTearDecrypt工具进行解密</li>
</ul>
<h3 id="hiddenteardecrypt工具解密">HiddenTearDecrypt工具解密</h3>
<p>由于在文件中发现了HiddenTear的关键信息，可以直接去检索HiddenTearDecrypt:</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004230418792.png" alt="image-20221004230418792"></p>
<p>HiddenTearDecrypt工具在网络上都是可以进行下载的</p>
<p>尝试使用工具进行解密发现不能成功求解。由于加密代码是采用CBC模式进行加密，会对文件进行填充，只要删除掉文件的填充应该就可以正常解密，使用winhex打开文件：</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004230652451.png" alt="image-20221004230652451"></p>
<p>可以发现有很多<code>00</code>字节的填充，只要删除<code>00</code>字节的填充就可以进行正常的解密，使用工具进行解密</p>
<p><img src="/images/OtterCTF_2018_Memory_Forensic_writeup/image-20221004230849821.png" alt="image-20221004230849821"></p>
<p>解密成功，打开文件得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>CTF{Im_Th@_B3S7_RicK_0f_Th3m_4ll}
</span></span></code></pre></div><h3 id="解密脚本解密">解密脚本解密</h3>
<p>由于加密代码已经进行分析，对于加密的情况已经基本清晰</p>
<p>Python编写解密脚本的难点应该是在于生成器的替代，CS中的<code>Rfc2898DeriveBytes</code>可以使用Python中的<code>PBKDF2</code>进行替代</p>
<p>解密脚本主要难度其实已经克服，根据加密写解密脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Protocol.KDF <span style="color:#f92672">import</span> PBKDF2
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> hashlib <span style="color:#f92672">import</span> sha256
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">AES_Decrypt</span>(c,password):
</span></span><span style="display:flex;"><span>    salt <span style="color:#f92672">=</span> bytes([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">8</span>])
</span></span><span style="display:flex;"><span>    kdf <span style="color:#f92672">=</span> PBKDF2(password, salt, <span style="color:#ae81ff">48</span>, count <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000</span>)
</span></span><span style="display:flex;"><span>    key <span style="color:#f92672">=</span> kdf[:<span style="color:#ae81ff">32</span>]
</span></span><span style="display:flex;"><span>    iv <span style="color:#f92672">=</span> kdf[<span style="color:#ae81ff">32</span>:]
</span></span><span style="display:flex;"><span>    aes <span style="color:#f92672">=</span> AES<span style="color:#f92672">.</span>new(key<span style="color:#f92672">=</span>key,iv<span style="color:#f92672">=</span>iv,mode<span style="color:#f92672">=</span>AES<span style="color:#f92672">.</span>MODE_CBC)
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> aes<span style="color:#f92672">.</span>decrypt(c)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> m
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>password <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;aDOBofVYUNVnmp7&#34;</span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> sha256(password)<span style="color:#f92672">.</span>digest()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;./file.dat&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>    raw <span style="color:#f92672">=</span> AES_Decrypt(data,p)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;./file.txt&#34;</span>,<span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> new:
</span></span><span style="display:flex;"><span>        new<span style="color:#f92672">.</span>write(raw)
</span></span></code></pre></div><p>运行后得到解密文件，打开文件得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>CTF{Im_Th@_B3S7_RicK_0f_Th3m_4ll}
</span></span></code></pre></div><p>两种解法都可以正常进行求解，求解得到flag。</p>
<p>用工具求解可能比较快，但是存在一定的局限性，需要对加密文件进行一定的处理</p>
<p>用脚本求解可能相对较慢，但是比较灵活可以灵活地处理文件，对解密脚本编写熟练的，可以尝试写脚本求解，速度也不慢</p>
]]></content>
        </item>
        
        <item>
            <title>攻防世界 RE 日常练习 002</title>
            <link>/posts/xctf-reverse_daliy_002/</link>
            <pubDate>Sun, 04 Sep 2022 11:30:27 +0800</pubDate>
            
            <guid>/posts/xctf-reverse_daliy_002/</guid>
            <description>攻防世界 RE 日常练习 002 由于攻防世界界面改版，题目划分与之前的题目划分出现了差异，变成了难度划分形式，和之前的不太一样。为了之前形式一致，故更改为日常练习
新版攻防世界界面：
本次把攻防世界难度为1的题目补了下，找下CTF题目的手感。不过攻防世界难度1的题目，难度真的很不一致。
xxxorrr 这道题目应该是攻防世界的一道新题目，难度应该是比较低的。
首先使用die查看下程序信息：
amd64架构的程序，无壳，使用ida pro直接看：
进入到主程序可以发现：
程序非常简单，仅仅只是进行了异或操作。觉得这个程序就是简单的异或操作。寻找关键的数据：
以为这样就结束了，使用脚本跑，结果跑不出来flag，于是只能继续分析程序代码，主程序前面有一个程序函数执行，可能有进行操作：
跟进这个函数发现返回了一个可能是系统函数的一个函数
使用搜索引擎查找这个函数得到这个函数的功能描述：
说明这个函数会注册一个函数在主函数结束的时候进行调用，跟进注册的函数：
发现一个比较有意思的函数，应该就是进行判断的关键函数，中间进行了比较。
由于对s1变量的操作存在有一定的怀疑，于是查找s1变量的交叉引用来查看信息找到一个交叉引用，这个交叉引用对s1进行操作
继续跟进交叉引用，发现这个函数在init函数内部进行调用
因此，s1变量进行了两次操作，根据原理编写exp：
s1 =[ 0x71, 0x61, 0x73, 0x78, 0x63, 0x79, 0x74, 0x67, 0x73, 0x61, 0x73, 0x78, 0x63, 0x76, 0x72, 0x65, 0x66, 0x67, 0x68, 0x6E, 0x72, 0x66, 0x67, 0x68, 0x6E, 0x6A, 0x65, 0x64, 0x66, 0x67, 0x62, 0x68, 0x6E, 0x00 ] s2 = [ 0x56, 0x4E, 0x57, 0x58, 0x51, 0x51, 0x09, 0x46, 0x17, 0x46, 0x54, 0x5A, 0x59, 0x59, 0x1F, 0x48, 0x32, 0x5B, 0x6B, 0x7C, 0x75, 0x6E, 0x7E, 0x6E, 0x2F, 0x77, 0x4F, 0x7A, 0x71, 0x43, 0x2B, 0x26, 0x89, 0xFE, 0x00 ] print(len(s1)) print(len(s2)) flag = [] for i in range(34): flag.</description>
            <content type="html"><![CDATA[<h1 id="攻防世界-re-日常练习-002">攻防世界 RE 日常练习 002</h1>
<blockquote>
<p>由于攻防世界界面改版，题目划分与之前的题目划分出现了差异，变成了难度划分形式，和之前的不太一样。为了之前形式一致，故更改为日常练习</p>
</blockquote>
<p>新版攻防世界界面：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903161040700.png" alt="image-20220903161040700"></p>
<p>本次把攻防世界难度为1的题目补了下，找下CTF题目的手感。不过攻防世界难度1的题目，难度真的很不一致。</p>
<h2 id="xxxorrr">xxxorrr</h2>
<p>这道题目应该是攻防世界的一道新题目，难度应该是比较低的。</p>
<p>首先使用die查看下程序信息：<img src="/images/XCTF-REVERSE_Daliy_002/image-20220903163539118.png" alt="image-20220903163539118"></p>
<p>amd64架构的程序，无壳，使用ida pro直接看：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903163849241.png" alt="image-20220903163849241"></p>
<p>进入到主程序可以发现：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903163921702.png" alt="image-20220903163921702"></p>
<p>程序非常简单，仅仅只是进行了异或操作。觉得这个程序就是简单的异或操作。寻找关键的数据：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903164142513.png" alt="image-20220903164142513"></p>
<p>以为这样就结束了，使用脚本跑，结果跑不出来flag，于是只能继续分析程序代码，主程序前面有一个程序函数执行，可能有进行操作：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903164827415.png" alt="image-20220903164827415"></p>
<p>跟进这个函数发现返回了一个可能是系统函数的一个函数</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903165048716.png" alt="image-20220903165048716"></p>
<p>使用搜索引擎查找这个函数得到这个函数的功能描述：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903165237194.png" alt="image-20220903165237194"></p>
<p>说明这个函数会注册一个函数在主函数结束的时候进行调用，跟进注册的函数：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903165937553.png" alt="image-20220903165937553"></p>
<p>发现一个比较有意思的函数，应该就是进行判断的关键函数，中间进行了比较。</p>
<p>由于对s1变量的操作存在有一定的怀疑，于是查找s1变量的交叉引用来查看信息找到一个交叉引用，这个交叉引用对s1进行操作</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903170211040.png" alt="image-20220903170211040"></p>
<p>继续跟进交叉引用，发现这个函数在init函数内部进行调用</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903170302861.png" alt="image-20220903170302861"></p>
<p>因此，s1变量进行了两次操作，根据原理编写exp：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>s1 <span style="color:#f92672">=</span>[
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x71</span>, <span style="color:#ae81ff">0x61</span>, <span style="color:#ae81ff">0x73</span>, <span style="color:#ae81ff">0x78</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0x79</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0x67</span>, <span style="color:#ae81ff">0x73</span>, <span style="color:#ae81ff">0x61</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x73</span>, <span style="color:#ae81ff">0x78</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0x76</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0x67</span>, <span style="color:#ae81ff">0x68</span>, <span style="color:#ae81ff">0x6E</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0x67</span>, <span style="color:#ae81ff">0x68</span>, <span style="color:#ae81ff">0x6E</span>, <span style="color:#ae81ff">0x6A</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x64</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0x67</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x62</span>, <span style="color:#ae81ff">0x68</span>, <span style="color:#ae81ff">0x6E</span>, <span style="color:#ae81ff">0x00</span>
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>s2 <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x4E</span>, <span style="color:#ae81ff">0x57</span>, <span style="color:#ae81ff">0x58</span>, <span style="color:#ae81ff">0x51</span>, <span style="color:#ae81ff">0x51</span>, <span style="color:#ae81ff">0x09</span>, <span style="color:#ae81ff">0x46</span>, <span style="color:#ae81ff">0x17</span>, <span style="color:#ae81ff">0x46</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x54</span>, <span style="color:#ae81ff">0x5A</span>, <span style="color:#ae81ff">0x59</span>, <span style="color:#ae81ff">0x59</span>, <span style="color:#ae81ff">0x1F</span>, <span style="color:#ae81ff">0x48</span>, <span style="color:#ae81ff">0x32</span>, <span style="color:#ae81ff">0x5B</span>, <span style="color:#ae81ff">0x6B</span>, <span style="color:#ae81ff">0x7C</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x75</span>, <span style="color:#ae81ff">0x6E</span>, <span style="color:#ae81ff">0x7E</span>, <span style="color:#ae81ff">0x6E</span>, <span style="color:#ae81ff">0x2F</span>, <span style="color:#ae81ff">0x77</span>, <span style="color:#ae81ff">0x4F</span>, <span style="color:#ae81ff">0x7A</span>, <span style="color:#ae81ff">0x71</span>, <span style="color:#ae81ff">0x43</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x2B</span>, <span style="color:#ae81ff">0x26</span>, <span style="color:#ae81ff">0x89</span>, <span style="color:#ae81ff">0xFE</span>, <span style="color:#ae81ff">0x00</span>
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>print(len(s1))
</span></span><span style="display:flex;"><span>print(len(s2))
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">34</span>):
</span></span><span style="display:flex;"><span>    flag<span style="color:#f92672">.</span>append(s1[i]<span style="color:#f92672">^</span>(<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">65</span>)<span style="color:#f92672">^</span>s2[i])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(bytes(flag))
</span></span></code></pre></div><p>运行得到flag：<code>flag{c0n5truct0r5_functi0n_in_41f}</code></p>
<h2 id="happyctf">happyctf</h2>
<p>题目给到了一个exe文件和一个pdb符号文件。使用die查看文件架构和文件信息：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903171041190.png" alt="image-20220903171041190"></p>
<p>发现是一个PE32的命令行程序，无壳，使用ida直接看：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903171221296.png" alt="image-20220903171221296"></p>
<p>加载程序的时候，也要加载pdb查看：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903171509446.png" alt="image-20220903171509446"></p>
<p>看样子应该是一个C++的程序，很多程序名都已经被粉碎了，所在位置应该就是主函数的所在位置，直接F5来查看程序的伪代码：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903171807207.png" alt="image-20220903171807207"></p>
<p>寻找到关键信息来进行突围，进行简单的代码审计发现：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903172024279.png" alt="image-20220903172024279"></p>
<p>一串可疑的字符串，字符串应该是需要进行比较的字符串，但是这个字符串不像是flag的样子，应该需要进行一定的操作，发现字符串前面有一个lamda操作：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220903172340204.png" alt="image-20220903172340204"></p>
<p>跟进这个lamda操作的所在函数：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904074208212.png" alt="image-20220904074208212"></p>
<p>发现有异或操作，这道题目的考点应该就是lamda函数的异或操作</p>
<p>根据异或操作编写exp：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;brxusoCqxw{yqK`{KZqag{r`i&#39;</span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c:
</span></span><span style="display:flex;"><span>    flag<span style="color:#f92672">.</span>append(i<span style="color:#f92672">^</span><span style="color:#ae81ff">0x14</span>)
</span></span><span style="display:flex;"><span>print(bytes(flag))
</span></span></code></pre></div><p>运行脚本得到flag，<code>vflag{Welcome_to_Neusoft}</code></p>
<p>纯纯的签到题目</p>
<h2 id="crypt">crypt</h2>
<p>题目名是密码，应该会涉及到加密的问题</p>
<p>使用die进行查看程序信息：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904082301049.png" alt="image-20220904082301049"></p>
<p>PE64程序，无壳，直接丢进ida里面进行静态审计：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904082656813.png" alt="image-20220904082656813"></p>
<p>整个程序写到挺简单的，没有复杂的逻辑</p>
<p>看样子是进行了异或操作。</p>
<p>前面有两个函数进行了加密操作，关键的应该就是这两个函数：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904082948509.png" alt="image-20220904082948509"></p>
<p>两个函数，应该就是关键的加密函数，跟进函数进行审计：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904083856381.png" alt="image-20220904083856381"></p>
<p>第一个函数的加密，在逻辑上还是稍微有些复杂的，至少我现在还审计不出来具体是什么样的加密算法。</p>
<p>看第二个函数的加密：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904084312735.png" alt="image-20220904084312735"></p>
<p>第二个函数的加密对于输入的数据进行异或操作。最开始，尝试使用正向的方式进下加密后求解，发现出错的可能性相对来说比较高，因此，尝试思考另一种思路：</p>
<p>使用x64dbg动态调试，得到进行异或的数据，然后使用输入数据进行异或来获取需要进行异或的数据，再进行主程序的异或0x22来进行获取的flag。</p>
<p>根据这个思路进行调试：</p>
<p>在ida找到相应的地址位置</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904091610507.png" alt="image-20220904091610507"></p>
<p>然后再x64dbg定位的相应地址下断</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904092209344.png" alt="image-20220904092209344"></p>
<p>找到相应位置的数据，在内存中寻找：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904092255232.png" alt="image-20220904092255232"></p>
<p>大致就是在这个位置的数据，将这个位置的数据复制出来，根据思路编写exp：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;EB 98 42 2B CF 7C DC 23 2F 57 6D 5C BD 0D A7 78 CC 45 EE 72 EB 45 00 00&#39;</span><span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39; &#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>target <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">158</span>, <span style="color:#ae81ff">231</span>,  <span style="color:#ae81ff">48</span>,  <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">167</span>,   <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">166</span>,  <span style="color:#ae81ff">83</span>,  <span style="color:#ae81ff">89</span>,  <span style="color:#ae81ff">27</span>, 
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">10</span>,  <span style="color:#ae81ff">32</span>, <span style="color:#ae81ff">241</span>, <span style="color:#ae81ff">115</span>, <span style="color:#ae81ff">209</span>,  <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">171</span>,   <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">132</span>,  <span style="color:#ae81ff">14</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">141</span>,  <span style="color:#ae81ff">43</span>
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">22</span>):
</span></span><span style="display:flex;"><span>    flag<span style="color:#f92672">.</span>append(target[i]<span style="color:#f92672">^</span><span style="color:#ae81ff">0x22</span><span style="color:#f92672">^</span>(int(c[i], <span style="color:#ae81ff">16</span>)<span style="color:#f92672">^</span><span style="color:#ae81ff">0x31</span>))
</span></span><span style="display:flex;"><span>print(bytes(flag))
</span></span></code></pre></div><p>运行脚本得到flag，<code>b'flag{nice_to_meet_you}'</code></p>
<h2 id="1000click">1000Click</h2>
<p>题目应该是要点击1000次才会给出flag，首先使用die查看程序信息：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904093023881.png" alt="image-20220904093023881"></p>
<p>PE32程序，无壳。使用64dbg进行调试找下位置进行下断修改数据，这是最开始的思路。这个思路相对来说是要进行定位。但是谁能想到flag就写在内存里面了呢？</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904093301219.png" alt="image-20220904093301219"></p>
<p>这样就get到了flag，<code>flag{TIBntXVbdZ4Z9VRtoOQ2wRlvDNIjQ8Ra}</code></p>
<h2 id="reverse_re3">reverse_re3</h2>
<p>看下题目描述：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904093625659.png" alt="image-20220904093625659"></p>
<p>看题目描述，应该是一道迷宫题目，使用die进行查看：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904095725987.png" alt="image-20220904095725987"></p>
<p>ELF程序，无壳，拖进ida pro直接看</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904102213621.png" alt="image-20220904102213621"></p>
<p>主程序非常简单关键的应该是函数sub_940</p>
<p>跟进这个函数：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904102511806.png" alt="image-20220904102511806"></p>
<p>应该是一个走迷宫的程序，ascii为97是<code>a</code> ，ascii为100是<code>d</code>，ascii为115是<code>s</code>，ascii为119是<code>w</code> 。这些操作就是很多小游戏都会采用到的移动操作，可以判断应该是一道迷宫题。既然是迷宫题，地图会在哪里，函数最开始有一个sub_86c的函数，不会根据我们的输入而进行修改，这个函数应该是一个初始化函数，跟进函数查看下信息：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904105505287.png" alt="image-20220904105505287"></p>
<p>这个应该是迷宫数组，跟进查看发现果真就是迷宫数组的信息：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904105641637.png" alt="image-20220904105641637"></p>
<p>看样子应该就是迷宫数组，下面应该是跟进迷宫逻辑：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904110437184.png" alt="image-20220904110437184"></p>
<p>在初始化的过程中进行了入口点寻找来找到入口点，也就迷宫的起点位置。</p>
<p>进行看操作逻辑：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904110720487.png" alt="image-20220904110720487"></p>
<p>如果是1就更新一下所在位置，重新设置下起点，如果是4返回1，都不是就返回0。</p>
<p>返回的1和0是什么意思？需要看一下主函数逻辑：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904110931642.png" alt="image-20220904110931642"></p>
<p>根据主函数的逻辑，如果返回1就说明走到终点了，进入到下一层。相当于就是三层迷宫，走三遍路径，根据走出迷宫的操作数来获取相应的flag数据。所以这题还是要将迷宫的地图输出出来，看看究竟是什么样子：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
</span></span><span style="display:flex;"><span>[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 0, 3, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]
</span></span><span style="display:flex;"><span>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]
</span></span><span style="display:flex;"><span>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0]
</span></span><span style="display:flex;"><span>[1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
</span></span><span style="display:flex;"><span>[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
</span></span><span style="display:flex;"><span>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
</span></span><span style="display:flex;"><span>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[0, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]
</span></span><span style="display:flex;"><span>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]
</span></span><span style="display:flex;"><span>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]
</span></span><span style="display:flex;"><span>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]
</span></span></code></pre></div><p>这个迷宫，如果写代码跑需要寻路算法来跑出来，手动走的话会比写程序快很多。因此，本菜鸡采用手动走迷宫的方式进行寻路，来找到路径，最终走出来的路径是：<code>ddsssddddsssdssdddddsssddddsssaassssdddsddssddwddssssssdddssssdddss</code></p>
<p>然后将这个数据加密成md5得到flag：<code>flag{aeea66fcac7fa80ed8f79f38ad5bb953}</code></p>
<h2 id="lucknum">lucknum</h2>
<p>题目纯纯签到题，使用die进行查看：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904112557450.png" alt="image-20220904112557450"></p>
<p>ELF程序，AMD64架构的，无壳程序。</p>
<p>这道题目，可以直接丢进hex editor进行查找flag来得到flag。也可以使用ida pro直接看，本质上没有多大区别。</p>
<p>这里直接使用ida看：</p>
<p><img src="/images/XCTF-REVERSE_Daliy_002/image-20220904112855205.png" alt="image-20220904112855205"></p>
<p>flag直接就有了，flag是<code>flag{c0ngr@tul@ti0n_f0r_luck_numb3r}</code></p>
]]></content>
        </item>
        
        <item>
            <title>2022 网鼎杯 青龙组 Writeup</title>
            <link>/posts/2022_wdb_ql-writeup/</link>
            <pubDate>Wed, 31 Aug 2022 17:28:44 +0800</pubDate>
            
            <guid>/posts/2022_wdb_ql-writeup/</guid>
            <description>2022 网鼎杯 青龙组 Writeup 今年网鼎杯的逆向题目是相对来说比较简单的，在比赛的时候做出了两道逆向题目。
第二道逆向apk的题目找到文章了，但是去看Crypto的题目了，也就没有认真去钻逆向的那道题目。
Crypto题目由于自身的数学敏感度不够没能解出，还需要继续提高
解出 fakeshell 题目给到了一个exe文件，使用die查看该文件：
发现是一个upx压缩壳加密的程序，尝试使用upx脱壳：
发现壳可能被修改过，需要手动脱壳。先尝试运行下程序，寻找下可能存在的锚点字符串信息：
找到两个锚点字符串，一个是&amp;lt;&amp;lt;Input your flag:，另一个是Wrong.
使用x64dbg进行手动脱壳，进行入口点的测试找到一个关键跳转地址0x1400276CB
这是一个长跳转指令，运行到这个指令的时候程序已经完成解密。可以对程序的内存引用进行查看：
发现程序的内存引用中已经出现了锚点字符串，说明此时的程序已经完成了解密。然后跟进到锚点字符串所在的函数位置：
这个位置应该是主函数空间，在这个主函数空间中对函数开头位置下断点，然后让程序运行到断点位置
然后使用x64dbg的Scylla插件进行dump内存：
从当前位置进行dump即可，得到一个dump的程序。
现在完成手动脱壳，进入到下一步，进行ida pro的静态分析：
使用F5插件来查看程序反编译的代码进行分析
输入的数据存储到v4变量中，对v4变量处理的函数有两个，对这两个函数依次进行审计。
首先分析第一个函数，这个函数要一直跟进跟进到和参数有关的位置
第一个函数中，存在一个判断和一个异或运算。
判断是对输入的数据进行了处理，猜测应该是进行长度判断，判断长度是否是20位。
异或操作是单纯对于输入数据的运行对于程序运行流程没有太多影响
分析第二个函数，和第一个函数的跟进方法类似
第二个函数同样也有一个异或操作和一个特殊的函数，跟进这个函数查看：
发现判断的位置有密文，跟进密文查看：
使用shift+ E将数据提取出来，可以得到：
unsigned char ida_chars[] = { 0x4B, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; 显然是以4字节，小端序存储的</description>
            <content type="html"><![CDATA[<h1 id="2022-网鼎杯-青龙组-writeup">2022 网鼎杯 青龙组 Writeup</h1>
<p>今年网鼎杯的逆向题目是相对来说比较简单的，在比赛的时候做出了两道逆向题目。</p>
<p>第二道逆向apk的题目找到文章了，但是去看Crypto的题目了，也就没有认真去钻逆向的那道题目。</p>
<p>Crypto题目由于自身的数学敏感度不够没能解出，还需要继续提高</p>
<h2 id="解出">解出</h2>
<h3 id="fakeshell">fakeshell</h3>
<p>题目给到了一个exe文件，使用die查看该文件：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828123956402.png" alt="image-20220828123956402"></p>
<p>发现是一个upx压缩壳加密的程序，尝试使用upx脱壳：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828133038392.png" alt="image-20220828133038392"></p>
<p>发现壳可能被修改过，需要手动脱壳。先尝试运行下程序，寻找下可能存在的锚点字符串信息：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828140533175.png" alt="image-20220828140533175"></p>
<p>找到两个锚点字符串，一个是<code>&lt;&lt;Input your flag:</code>，另一个是<code>Wrong.</code></p>
<p>使用x64dbg进行手动脱壳，进行入口点的测试找到一个关键跳转地址0x1400276CB</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828140317972.png" alt="image-20220828140317972"></p>
<p>这是一个长跳转指令，运行到这个指令的时候程序已经完成解密。可以对程序的内存引用进行查看：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828140739058.png" alt="image-20220828140739058"></p>
<p>发现程序的内存引用中已经出现了锚点字符串，说明此时的程序已经完成了解密。然后跟进到锚点字符串所在的函数位置：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828140905779.png" alt="image-20220828140905779"></p>
<p>这个位置应该是主函数空间，在这个主函数空间中对函数开头位置下断点，然后让程序运行到断点位置</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828141834266.png" alt="image-20220828141834266"></p>
<p>然后使用x64dbg的Scylla插件进行dump内存：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828142149592.png" alt="image-20220828142149592"></p>
<p>从当前位置进行dump即可，得到一个dump的程序。</p>
<p>现在完成手动脱壳，进入到下一步，进行ida pro的静态分析：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828142350437.png" alt="image-20220828142350437"></p>
<p>使用F5插件来查看程序反编译的代码进行分析</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828142457029.png" alt="image-20220828142457029"></p>
<p>输入的数据存储到v4变量中，对v4变量处理的函数有两个，对这两个函数依次进行审计。</p>
<p>首先分析第一个函数，这个函数要一直跟进跟进到和参数有关的位置</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828142835318.png" alt="image-20220828142835318"></p>
<p>第一个函数中，存在一个判断和一个异或运算。</p>
<p>判断是对输入的数据进行了处理，猜测应该是进行长度判断，判断长度是否是20位。</p>
<p>异或操作是单纯对于输入数据的运行对于程序运行流程没有太多影响</p>
<p>分析第二个函数，和第一个函数的跟进方法类似</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828144648807.png" alt="image-20220828144648807"></p>
<p>第二个函数同样也有一个异或操作和一个特殊的函数，跟进这个函数查看：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828145157336.png" alt="image-20220828145157336"></p>
<p>发现判断的位置有密文，跟进密文查看：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828145310441.png" alt="image-20220828145310441"></p>
<p>使用<code>shift</code>+ <code>E</code>将数据提取出来，可以得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> ida_chars[] <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x4B</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x48</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x79</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x45</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x30</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x5C</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x49</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x5A</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x79</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x70</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x6D</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x78</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x6F</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x48</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x5D</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x64</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x64</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>显然是以4字节，小端序存储的</p>
<p>现在获取的密文和两次运算，编写脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>c <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x4B</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x48</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x79</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x45</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x30</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x5C</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x49</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x5A</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x79</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x70</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x6D</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x78</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x6F</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x48</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x5D</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x64</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x64</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span> ]
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> c[::<span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">0x14</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0x14</span>):
</span></span><span style="display:flex;"><span>    flag[i] <span style="color:#f92672">=</span> chr(((c[i]<span style="color:#f92672">^</span><span style="color:#ae81ff">0x50</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">10</span>)<span style="color:#f92672">^</span><span style="color:#ae81ff">0x66</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(flag))
</span></span></code></pre></div><p>运行得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>why_m0dify_pUx_SheLL
</span></span></code></pre></div><h3 id="handmake">Handmake</h3>
<p>这道题目是手工，应该是需要手工寻找一些内容</p>
<p>题目给到了一个go程序的源码：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828150430370.png" alt="image-20220828150430370"></p>
<p>总共有大约15w行的代码，尝试编译运行：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828150855335.png" alt="image-20220828150855335"></p>
<p>应该是英文的阅读理解找函数的题目，理解这两句话的意思就可以求解。</p>
<p><code>Input the first function, which has 6 parameters and the third named gLIhR: </code></p>
<p>这句话就是找到一个有六个参数的函数而且第三个参数是<code>gLIhR</code></p>
<p><code>Input the second function, which has 3 callers and invokes the function named cHZv5op8rOmlAkb6:</code></p>
<p>这句话就是找到一个函数，这个函数被调用了3次并且调用了一个名为<code>cHZv5op8rOmlAkb6</code>函数。</p>
<p>根据要求去寻找函数名：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828151548954.png" alt="image-20220828151548954"></p>
<p>然后进行程序的测试就可以得到flag：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828151706620.png" alt="image-20220828151706620"></p>
<h2 id="复现">复现</h2>
<h3 id="crypto091">Crypto091</h3>
<p>这道题目被队友解答，我就没有进行看了，赛后进行复现下</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828152017556.png" alt="image-20220828152017556"></p>
<p>这道题目要寻找到关键信息，本道题目的关键信息有：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>170号段首批放号的联通号码
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Hash：
</span></span><span style="display:flex;"><span>c22a563acc2a587afbfaaaa6d67bc6e628872b00bd7e998873881f7c6fdc62fc
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag格式：flag{13位电话号码（纯数字，含国家代码）}
</span></span></code></pre></div><p>使用搜索引擎进行查找：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828153105747.png" alt="image-20220828153105747"></p>
<p>1709是首批号码段，下面是对hash的类型进行猜测，首先看看哈希的长度：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828153953231.png" alt="image-20220828153953231"></p>
<p>hash数据的长度是64位可能是sha256加密，可以使用hacker工具Hashcat进行爆破求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>hashcat -m <span style="color:#ae81ff">1400</span> -a <span style="color:#ae81ff">3</span> c22a563acc2a587afbfaaaa6d67bc6e628872b00bd7e998873881f7c6fdc62fc 861709?d?d?d?d?d?d?d
</span></span></code></pre></div><p>运行得到：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220828155215870.png" alt="image-20220828155215870"></p>
<p>由此可以得到tel是8617091733716，故flag是<code>flag{8617091733716}</code></p>
<h3 id="grasshopper">grasshopper</h3>
<blockquote>
<p>这道题目当时代码没有审计清楚，采用Z3-solver进行求解，未能求解成功</p>
</blockquote>
<p>题目给到一个python源码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> random <span style="color:#f92672">import</span> randrange
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> grassfield <span style="color:#f92672">import</span> flag
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>k <span style="color:#f92672">=</span> [randrange(<span style="color:#ae81ff">1</span>,p) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(flag)):
</span></span><span style="display:flex;"><span>    grasshopper <span style="color:#f92672">=</span> flag[i]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
</span></span><span style="display:flex;"><span>        k[j] <span style="color:#f92672">=</span> grasshopper <span style="color:#f92672">=</span> grasshopper <span style="color:#f92672">*</span> k[j] <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;Grasshopper#&#39;</span><span style="color:#f92672">+</span>str(i)<span style="color:#f92672">.</span>zfill(<span style="color:#ae81ff">2</span>)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;:&#39;</span><span style="color:#f92672">+</span>hex(grasshopper)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>zfill(<span style="color:#ae81ff">4</span>))
</span></span></code></pre></div><p>进行审计可以发现：</p>
<p>$$
k_{10} = g_0 =  C_0 \cdot k_{00}\ \text{mod}\ p \\
k_{11} = g_0 =  C_0 \cdot k_{00} \cdot k_{01}\ \text{mod}\ p \\
k_{12} = g_0 =  C_0 \cdot k_{00} \cdot k_{01}\cdot k_{02}\ \text{mod}\ p \\
k_{13} = g_0 =  C_0 \cdot k_{00} \cdot k_{01}\cdot k_{02}\cdot k_{03}\ \text{mod}\ p \\
k_{14} = g_0 =  C_0 \cdot k_{00} \cdot k_{01}\cdot k_{02}\cdot k_{03} \cdot k_{04}\ \text{mod}\ p \\
$$</p>
<p>$$
k_{20} = g_0 =  C_1 \cdot k_{10}\ \text{mod}\ p \\
k_{21} = g_0 =  C_1 \cdot k_{10} \cdot k_{11}\ \text{mod}\ p \\
k_{22} = g_0 =  C_1 \cdot k_{10} \cdot k_{11}\cdot k_{12}\ \text{mod}\ p \\
k_{23} = g_0 =  C_1 \cdot k_{10} \cdot k_{11}\cdot k_{12}\cdot k_{13}\ \text{mod}\ p \\
k_{24} = g_0 =  C_1 \cdot k_{10} \cdot k_{11}\cdot k_{12}\cdot k_{13} \cdot k_{14}\ \text{mod}\ p \\
$$
可以发现有规律存在，已知$k_{14}\ k_{24}\ k_{34}\ k_{44}\ k_{54}$ 可以推出$k_{23}\ k_{33}\ k_{43}\ k_{53}$</p>
<p>同理可以推出$k_{32}\ k_{42}\ k_{52}$，依此可以推出$k_{41}\ k_{51}$ 和$k_{50}$</p>
<p>推导公式：
$$
k_{ij} = k_{i(j+1)} \cdot k_{(i-1)j}^{-1}\ \text{mod}\ p
$$
根据推导公式可以进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> gmpy2 <span style="color:#f92672">import</span> invert,gcd
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sympy <span style="color:#f92672">import</span> isprime
</span></span><span style="display:flex;"><span>know <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;flag{&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>g <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;./output.txt&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> f<span style="color:#f92672">.</span>readlines():
</span></span><span style="display:flex;"><span>        line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>        g<span style="color:#f92672">.</span>append(int(line[<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>:],<span style="color:#ae81ff">16</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>maxg <span style="color:#f92672">=</span> max(g)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> range(maxg<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span><span style="color:#f92672">**</span><span style="color:#ae81ff">16</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> isprime(p):
</span></span><span style="display:flex;"><span>        g04 <span style="color:#f92672">=</span> g[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>        g14 <span style="color:#f92672">=</span> g[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>        g13 <span style="color:#f92672">=</span> g14 <span style="color:#f92672">*</span> invert(g04, p) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>        g24 <span style="color:#f92672">=</span> g[<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>        g23 <span style="color:#f92672">=</span> g24 <span style="color:#f92672">*</span> invert(g14, p) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>        g22 <span style="color:#f92672">=</span> g23 <span style="color:#f92672">*</span> invert(g13, p) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>        g34 <span style="color:#f92672">=</span> g[<span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>        g33 <span style="color:#f92672">=</span> g34 <span style="color:#f92672">*</span> invert(g24, p) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>        g32 <span style="color:#f92672">=</span> g33 <span style="color:#f92672">*</span> invert(g23, p) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>        g31 <span style="color:#f92672">=</span> g32 <span style="color:#f92672">*</span> invert(g22, p) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>        g44 <span style="color:#f92672">=</span> g[<span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>        g43 <span style="color:#f92672">=</span> g44 <span style="color:#f92672">*</span> invert(g34, p) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>        g42 <span style="color:#f92672">=</span> g43 <span style="color:#f92672">*</span> invert(g33, p) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>        g41 <span style="color:#f92672">=</span> g42 <span style="color:#f92672">*</span> invert(g32, p) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>        g40 <span style="color:#f92672">=</span> g41 <span style="color:#f92672">*</span> invert(g31, p) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        k <span style="color:#f92672">=</span> [g40, g41, g42, g43, g44]
</span></span><span style="display:flex;"><span>        flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">42</span>):
</span></span><span style="display:flex;"><span>            _k <span style="color:#f92672">=</span> k[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span>k[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">*</span>k[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">*</span>k[<span style="color:#ae81ff">3</span>]<span style="color:#f92672">*</span>k[<span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>            alp <span style="color:#f92672">=</span> g[i] <span style="color:#f92672">*</span> invert(_k, p) <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>            flag <span style="color:#f92672">+=</span> chr(alp)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
</span></span><span style="display:flex;"><span>                k[j] <span style="color:#f92672">=</span> alp <span style="color:#f92672">=</span> alp <span style="color:#f92672">*</span> k[j] <span style="color:#f92672">%</span> p
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> flag<span style="color:#f92672">.</span>endswith(<span style="color:#e6db74">&#39;}&#39;</span>):
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;p = </span><span style="color:#e6db74">{</span>p<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;flag{&#39;</span><span style="color:#f92672">+</span>flag<span style="color:#f92672">.</span>encode())
</span></span></code></pre></div><p>运行代码得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>p = 59441
</span></span><span style="display:flex;"><span>b&#39;flag{749d39d4-78db-4c55-b4ff-bca873d0f18e}&#39;
</span></span></code></pre></div><p>这种思路是由局部推断整体的想法，可能将题目的过程复杂化，而显得不是非常优雅。</p>
<hr>
<p>此题的求解脚本还可以使用sagemath进行相应的脚本求解，思路也是大致一样的思路。</p>
<p>构造一个p的整数环，来进行运算求解，这种求解方法反而会更加简单，sagemath求解的脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>g <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;./output.txt&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> f<span style="color:#f92672">.</span>readlines():
</span></span><span style="display:flex;"><span>        line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>        g<span style="color:#f92672">.</span>append(int(line[<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>:],<span style="color:#ae81ff">16</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>maxg <span style="color:#f92672">=</span> max(g)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> range(maxg, <span style="color:#ae81ff">2</span><span style="color:#f92672">^</span><span style="color:#ae81ff">16</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> is_prime(p):
</span></span><span style="display:flex;"><span>        flag <span style="color:#f92672">=</span> g
</span></span><span style="display:flex;"><span>        F <span style="color:#f92672">=</span> GF(p)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">5</span>):
</span></span><span style="display:flex;"><span>            data <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(flag)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>                data<span style="color:#f92672">.</span>append(F(flag[j<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>])<span style="color:#f92672">/</span>F(flag[j]))
</span></span><span style="display:flex;"><span>            flag <span style="color:#f92672">=</span> data
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;flag{&#39;</span><span style="color:#f92672">+</span>bytes(data))
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">pass</span>
</span></span></code></pre></div><p>运行脚本就可以得到flag，<code>b'flag{749d39d4-78db-4c55-b4ff-bca873d0f18e}'</code></p>
<p>这种脚本的思路就是直接进行整体运算来求解。</p>
<h3 id="david_homework">david_homework</h3>
<blockquote>
<p>这道题目是当时考虑是将递归转循环来进行求解，但是时间复杂度还是很高，不能正常进行求解。想到线性代数的提示，时间已经所剩无几，故未能完成求解</p>
</blockquote>
<p>题目说到是一个线性代数的作业，应该是一个线性代码相关的问题求解。</p>
<p>赛题给到的代码是一个含有递归的函数：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829095725043.png" alt="image-20220829095725043"></p>
<p>通过搜索引擎搜索关键信息</p>
<ol>
<li>搜索 <code>递归函数转线代</code> : <a href="https://blog.csdn.net/wdq347/article/details/8919645">(191条消息) 线性代数求解递推形式数列的通项公式_wdq347的博客-CSDN博客</a></li>
<li>搜索 <code>递推 线代</code> : <a href="https://www.bilibili.com/video/BV18p411o7vc/">线性代数-递推法解“数字型”行列式_哔哩哔哩_bilibili</a></li>
<li>搜索 <code>线性代数-递推法解“数字型”行列式</code> : <a href="https://zhuanlan.zhihu.com/p/37683681">递推公式法在行列式计算中的证明与应用 - 知乎 (zhihu.com)</a></li>
<li>搜索 <code>递推公式法 行列式 </code></li>
</ol>
<p>找到文章：<a href="https://www.zhihu.com/question/426892843">怎么用递归法计算行列式? - 知乎 (zhihu.com)</a></p>
<p>根据文章：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829101251970.png" alt="image-20220829101251970"></p>
<p>显然这道题目是要求求解出逆过程，首先需要抽象出递推函数的递归公式：</p>
<p>$$
f(x,cof) = \left\{
\begin{array}{l}
x+1 &amp; &amp; {x &lt; 3} \\
cof_2\cdot f(x-3) + cof_1\cdot f(x-2) + cof_0\cdot f(x-1) &amp; &amp; {x \geq 3}
\end{array}
\right.
$$</p>
<p>根据查找到的一系列文章中的<a href="https://blog.csdn.net/u011815404/article/details/99621516">(191条消息) 线性代数 —— 线性递推关系_Alex_McAvoy的博客-CSDN博客_线性递推关系</a>，可以看到：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829102307637.png" alt="image-20220829102307637"></p>
<p>根据关系可以得到</p>
<p>$$
f(n) = A * f(n-1)
$$</p>
<p>$$
A = \left[\begin{array}{ccc}
1 &amp; 0 &amp; 0 \\
0 &amp; 1 &amp; 0 \\
0 &amp; 0 &amp; 1 \\
cof_2 &amp; cof_1 &amp; cof_0
\end{array} \right]
$$</p>
<p>$$
f(n-1) = \left[
\begin{array}{l}
f(n-3) \\
f(n-2) \\
f(n-1) \\
\end{array}
\right]
$$</p>
<p>紧接着根据这个：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829104119031.png" alt="image-20220829104119031"></p>
<p>可以得到：
$$
F(n) = A^{n-2}\cdot f(2)
$$</p>
<p>$$
f(2) = \left[
\begin{array}{l}
f(0)\\
f(1) \\
f(2) \\
\end{array}
\right]
= \left[
\begin{array}{l}
1\\
2 \\
3 \\
\end{array}
\right]
$$</p>
<p>尝试使用sagemath求解，出现报错</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829113116331.png" alt="image-20220829113116331"></p>
<p>进行次方运算必须是一个方块矩阵，也就是矩阵的维度必须是2x2, 3x3 … n x n 的矩阵，进行运算推导下：
$$
f(n) = A * f(n-1) = \left[
\begin{array}{c}
f(n-3) \\
f(n-2) \\
f(n-1) \\
cof_2\cdot f(n-3) + cof_1\cdot f(n-2) + cof_0\cdot f(n-1)
\end{array}
\right]
$$</p>
<p>继续进行推导：
$$
f(n-1) = A * f(n-2) = \left[
\begin{array}{c}
f(n-4) \\
f(n-3) \\
f(n-2) \\
cof_2\cdot f(n-4) + cof_1\cdot f(n-3) + cof_0\cdot f(n-2)
\end{array}
\right]
$$</p>
<p>$$
A * f(n-1) \\
= \left[\begin{array}{l}
1 &amp; 0 &amp; 0 \\
0 &amp; 1 &amp; 0 \\
0 &amp; 0 &amp; 1 \\
cof_2 &amp; cof_1 &amp; cof_0
\end{array} \right] \cdot \left[
\begin{array}{c}
f(n-4) \\
f(n-3) \\
f(n-2) \\
cof_2\cdot f(n-4) + cof_1\cdot f(n-3) + cof_0\cdot f(n-2)
\end{array}
\right]
$$</p>
<p>此时无法进行运算，进行推导发现将A修改成如下形式运算结果不变：</p>
<p>$$
A = \left[
\begin{array}{ccc}
0 &amp; 1 &amp; 0 \\
0 &amp; 0 &amp; 1 \\
cof_2 &amp; cof_1 &amp; cof_0
\end{array}
\right]
$$</p>
<p>再次尝试编写sage代码进行运算：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># sagemath</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> hashlib <span style="color:#f92672">import</span> md5, sha256
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> binascii <span style="color:#f92672">import</span> unhexlify
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cof_t <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">353</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1162</span>, <span style="color:#ae81ff">32767</span>], [<span style="color:#ae81ff">206</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">8021</span>, <span style="color:#ae81ff">42110</span>], [<span style="color:#ae81ff">262</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7088</span>, <span style="color:#ae81ff">31882</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">388</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6394</span>, <span style="color:#ae81ff">21225</span>], [<span style="color:#ae81ff">295</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9469</span>, <span style="color:#ae81ff">44468</span>], [<span style="color:#ae81ff">749</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">3501</span>, <span style="color:#ae81ff">40559</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">528</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">2690</span>, <span style="color:#ae81ff">10210</span>], [<span style="color:#ae81ff">354</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5383</span>, <span style="color:#ae81ff">18437</span>], [<span style="color:#ae81ff">491</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">8467</span>, <span style="color:#ae81ff">26892</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">932</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6984</span>, <span style="color:#ae81ff">20447</span>], [<span style="color:#ae81ff">731</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6281</span>, <span style="color:#ae81ff">11340</span>], [<span style="color:#ae81ff">420</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5392</span>, <span style="color:#ae81ff">44071</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">685</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6555</span>, <span style="color:#ae81ff">40938</span>], [<span style="color:#ae81ff">408</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">8070</span>, <span style="color:#ae81ff">47959</span>], [<span style="color:#ae81ff">182</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9857</span>, <span style="color:#ae81ff">49477</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">593</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">3584</span>, <span style="color:#ae81ff">49243</span>], [<span style="color:#ae81ff">929</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7410</span>, <span style="color:#ae81ff">31929</span>], [<span style="color:#ae81ff">970</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4549</span>, <span style="color:#ae81ff">17160</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">141</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">2435</span>, <span style="color:#ae81ff">36408</span>], [<span style="color:#ae81ff">344</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">3814</span>, <span style="color:#ae81ff">18949</span>], [<span style="color:#ae81ff">291</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7457</span>, <span style="color:#ae81ff">40587</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">765</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7011</span>, <span style="color:#ae81ff">32097</span>], [<span style="color:#ae81ff">700</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">8534</span>, <span style="color:#ae81ff">18013</span>], [<span style="color:#ae81ff">267</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">2541</span>, <span style="color:#ae81ff">33488</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">249</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">8934</span>, <span style="color:#ae81ff">12321</span>], [<span style="color:#ae81ff">589</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9617</span>, <span style="color:#ae81ff">41998</span>], [<span style="color:#ae81ff">840</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1166</span>, <span style="color:#ae81ff">22814</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">947</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5660</span>, <span style="color:#ae81ff">41003</span>], [<span style="color:#ae81ff">206</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7195</span>, <span style="color:#ae81ff">46261</span>], [<span style="color:#ae81ff">784</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9270</span>, <span style="color:#ae81ff">28410</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">338</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">3690</span>, <span style="color:#ae81ff">19608</span>], [<span style="color:#ae81ff">559</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">2078</span>, <span style="color:#ae81ff">44397</span>], [<span style="color:#ae81ff">534</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">3438</span>, <span style="color:#ae81ff">47830</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">515</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">2139</span>, <span style="color:#ae81ff">39546</span>], [<span style="color:#ae81ff">603</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6460</span>, <span style="color:#ae81ff">49953</span>], [<span style="color:#ae81ff">234</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6824</span>, <span style="color:#ae81ff">12579</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">805</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">8793</span>, <span style="color:#ae81ff">36465</span>], [<span style="color:#ae81ff">245</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5886</span>, <span style="color:#ae81ff">21077</span>], [<span style="color:#ae81ff">190</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7658</span>, <span style="color:#ae81ff">20396</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">392</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7053</span>, <span style="color:#ae81ff">19739</span>], [<span style="color:#ae81ff">609</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5399</span>, <span style="color:#ae81ff">39959</span>], [<span style="color:#ae81ff">479</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">8172</span>, <span style="color:#ae81ff">45734</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">321</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7102</span>, <span style="color:#ae81ff">41224</span>], [<span style="color:#ae81ff">720</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4487</span>, <span style="color:#ae81ff">11055</span>], [<span style="color:#ae81ff">208</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1897</span>, <span style="color:#ae81ff">15237</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">890</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4427</span>, <span style="color:#ae81ff">35168</span>], [<span style="color:#ae81ff">513</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5106</span>, <span style="color:#ae81ff">45849</span>], [<span style="color:#ae81ff">666</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1137</span>, <span style="color:#ae81ff">23725</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">755</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6732</span>, <span style="color:#ae81ff">39995</span>], [<span style="color:#ae81ff">589</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6421</span>, <span style="color:#ae81ff">43716</span>], [<span style="color:#ae81ff">866</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">3265</span>, <span style="color:#ae81ff">30017</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">416</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6540</span>, <span style="color:#ae81ff">34979</span>], [<span style="color:#ae81ff">840</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1305</span>, <span style="color:#ae81ff">18242</span>], [<span style="color:#ae81ff">731</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6844</span>, <span style="color:#ae81ff">13781</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">561</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">2728</span>, <span style="color:#ae81ff">10298</span>], [<span style="color:#ae81ff">863</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5953</span>, <span style="color:#ae81ff">23132</span>], [<span style="color:#ae81ff">204</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4208</span>, <span style="color:#ae81ff">27492</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">158</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">8701</span>, <span style="color:#ae81ff">12720</span>], [<span style="color:#ae81ff">802</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4740</span>, <span style="color:#ae81ff">16628</span>], [<span style="color:#ae81ff">491</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6874</span>, <span style="color:#ae81ff">29057</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">531</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4829</span>, <span style="color:#ae81ff">29205</span>], [<span style="color:#ae81ff">363</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4775</span>, <span style="color:#ae81ff">41711</span>], [<span style="color:#ae81ff">319</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9206</span>, <span style="color:#ae81ff">46164</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">317</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9270</span>, <span style="color:#ae81ff">18290</span>], [<span style="color:#ae81ff">680</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5136</span>, <span style="color:#ae81ff">12009</span>], [<span style="color:#ae81ff">880</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">2940</span>, <span style="color:#ae81ff">34900</span>],
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">162</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">2587</span>, <span style="color:#ae81ff">49881</span>], [<span style="color:#ae81ff">997</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5265</span>, <span style="color:#ae81ff">20890</span>], [<span style="color:#ae81ff">485</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9395</span>, <span style="color:#ae81ff">23048</span>], 
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">867</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1652</span>, <span style="color:#ae81ff">18926</span>], [<span style="color:#ae81ff">691</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7844</span>, <span style="color:#ae81ff">11180</span>], [<span style="color:#ae81ff">355</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5990</span>, <span style="color:#ae81ff">13172</span>], 
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">923</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">2018</span>, <span style="color:#ae81ff">23110</span>], [<span style="color:#ae81ff">214</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4719</span>, <span style="color:#ae81ff">23005</span>], [<span style="color:#ae81ff">921</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9528</span>, <span style="color:#ae81ff">29351</span>], 
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">349</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7957</span>, <span style="color:#ae81ff">20161</span>], [<span style="color:#ae81ff">470</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1889</span>, <span style="color:#ae81ff">46170</span>], [<span style="color:#ae81ff">244</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6106</span>, <span style="color:#ae81ff">23879</span>], 
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">419</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5440</span>, <span style="color:#ae81ff">43576</span>], [<span style="color:#ae81ff">930</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1123</span>, <span style="color:#ae81ff">29859</span>], [<span style="color:#ae81ff">151</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5759</span>, <span style="color:#ae81ff">23405</span>], 
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">843</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6770</span>, <span style="color:#ae81ff">36558</span>], [<span style="color:#ae81ff">574</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6171</span>, <span style="color:#ae81ff">33778</span>], [<span style="color:#ae81ff">772</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1073</span>, <span style="color:#ae81ff">44718</span>], 
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">932</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4037</span>, <span style="color:#ae81ff">40088</span>], [<span style="color:#ae81ff">848</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5813</span>, <span style="color:#ae81ff">27304</span>], [<span style="color:#ae81ff">194</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6016</span>, <span style="color:#ae81ff">39770</span>], 
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">966</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6789</span>, <span style="color:#ae81ff">14217</span>], [<span style="color:#ae81ff">219</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6849</span>, <span style="color:#ae81ff">40922</span>], [<span style="color:#ae81ff">352</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6046</span>, <span style="color:#ae81ff">18558</span>], 
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">794</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">8254</span>, <span style="color:#ae81ff">29748</span>], [<span style="color:#ae81ff">618</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5887</span>, <span style="color:#ae81ff">15535</span>], [<span style="color:#ae81ff">202</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9288</span>, <span style="color:#ae81ff">26590</span>], 
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">611</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4341</span>, <span style="color:#ae81ff">46682</span>], [<span style="color:#ae81ff">155</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7909</span>, <span style="color:#ae81ff">16654</span>], [<span style="color:#ae81ff">935</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5739</span>, <span style="color:#ae81ff">39342</span>], 
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">998</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">6538</span>, <span style="color:#ae81ff">24363</span>], [<span style="color:#ae81ff">125</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5679</span>, <span style="color:#ae81ff">36725</span>], [<span style="color:#ae81ff">507</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7074</span>, <span style="color:#ae81ff">15475</span>], 
</span></span><span style="display:flex;"><span>    [<span style="color:#ae81ff">699</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">5836</span>, <span style="color:#ae81ff">47549</span>]
</span></span><span style="display:flex;"><span>    ]
</span></span><span style="display:flex;"><span>B <span style="color:#f92672">=</span> [[<span style="color:#ae81ff">1</span>], [<span style="color:#ae81ff">2</span>], [<span style="color:#ae81ff">3</span>]]
</span></span><span style="display:flex;"><span>B <span style="color:#f92672">=</span> matrix(B)
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">100</span>):
</span></span><span style="display:flex;"><span>    A <span style="color:#f92672">=</span> [[<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>],[<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>], cof_t[i][::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]]
</span></span><span style="display:flex;"><span>    A <span style="color:#f92672">=</span> matrix(A)
</span></span><span style="display:flex;"><span>    C <span style="color:#f92672">=</span> A <span style="color:#f92672">^</span> (<span style="color:#ae81ff">200000</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>) <span style="color:#f92672">*</span> B
</span></span><span style="display:flex;"><span>    s <span style="color:#f92672">+=</span> C[<span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> str(s)[<span style="color:#f92672">-</span><span style="color:#ae81ff">2000</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1000</span>]
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> unhexlify(md5(s<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest())
</span></span><span style="display:flex;"><span>check <span style="color:#f92672">=</span> sha256(key)<span style="color:#f92672">.</span>hexdigest()
</span></span><span style="display:flex;"><span>verify <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;2cf44ec396e3bb9ed0f2f3bdbe4fab6325ae9d9ec3107881308156069452a6d5&#39;</span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;s= </span><span style="color:#e6db74">{</span>s<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;key = </span><span style="color:#e6db74">{</span>key<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;hash(key) = </span><span style="color:#e6db74">{</span>check<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;check = </span><span style="color:#e6db74">{</span>check<span style="color:#f92672">==</span>verify<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>)
</span></span></code></pre></div><p>运行sagemath脚本得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>s= 8365222366127410597598169954399481033882921410074214649102398062373189165630613993923060190128768377015697889610969869189338768501949778819512483009804114510646333513147157016729806311717181191848898389803672575716843797638777123435881498143998689577186959772296072473194533856870919617472555638920296793205581043222881816090693269730028856738454951305575065708823347157677411074157254186955326531403441609073128679935513392779152628590893913048822608749327034655805831509883357484164977115164240733564895591006693108254829407400850621646091808483228634435805213269066211974452289769022399418497986464430356041737753404266468993201044272042844144895601296459104534111416147795404108912440106970848660340526207025880755825643455720871621993251258247195860214917957713359490024807893442884343732717743882154397539800059579470352302688717025991780505564794824908605015195865226780305658376169579983423732703921876787723921599023795922881747318116849413935343800909756656082327558085457335537828343666748
</span></span><span style="display:flex;"><span>key = b&#39;S29O\x9a\xf3Z\x87\xe5\xbc{?D`xB&#39;
</span></span><span style="display:flex;"><span>hash(key) = 2cf44ec396e3bb9ed0f2f3bdbe4fab6325ae9d9ec3107881308156069452a6d5
</span></span><span style="display:flex;"><span>check = True
</span></span></code></pre></div><p>现在已经获取到了密钥key，使用python进行aes解密即可。</p>
<blockquote>
<p><strong>注意：！！！</strong></p>
<p>如果使用的是Python3.10版本，可能会出现报错：</p>
<p><code>SystemError: PY_SSIZE_T_CLEAN macro must be defined for '#' formats</code></p>
<p>这种情况是由于pycrypto库导致的问题，进行求解可以尝试安装miniconda创建python虚拟环境，切换到python3.8安装pycrypto库进行求解就可以正常求解</p>
</blockquote>
<p>求解python脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> hashlib <span style="color:#f92672">import</span> md5, sha256
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> binascii <span style="color:#f92672">import</span> unhexlify
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> AES
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;836522236612741059759816995439948103388292141007421464910239806237318916563061399392306019012876837701569788</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">96109698691893387685019497788195124830098041145106463335131471570167298063117171811918488983898036725757168437976</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">38777123435881498143998689577186959772296072473194533856870919617472555638920296793205581043222881816090693269730</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">02885673845495130557506570882334715767741107415725418695532653140344160907312867993551339277915262859089391304882</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">26087493270346558058315098833574841649771151642407335648955910066931082548294074008506216460918084832286344358052</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">13269066211974452289769022399418497986464430356041737753404266468993201044272042844144895601296459104534111416147</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">79540410891244010697084866034052620702588075582564345572087162199325125824719586021491795771335949002480789344288</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">43437327177438821543975398000595794703523026887170259917805055647948249086050151958652267803056583761695799834237</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">32703921876787723921599023795922881747318116849413935343800909756656082327558085457335537828343666748&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> unhexlify(md5(s<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest())
</span></span><span style="display:flex;"><span>aes <span style="color:#f92672">=</span> AES<span style="color:#f92672">.</span>new(key,AES<span style="color:#f92672">.</span>MODE_ECB)
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;4f12b3a3eadc4146386f4732266f02bd03114a404ba4cb2dabae213ecec451c9d52c70dc3d25154b5af8a304afafed87&#39;</span>
</span></span><span style="display:flex;"><span>print(aes<span style="color:#f92672">.</span>decrypt(unhexlify(c))<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span>))
</span></span></code></pre></div><p>运行脚本即可得到相应的flag: <code>b'flag{519427b3-d104-4c34-a29d-5a7c128031ff}'</code></p>
<h3 id="whereiscode">whereiscode</h3>
<blockquote>
<p>这道题目当时是找到文章了但是当时去看密码学题目了，没有细看这道题目</p>
</blockquote>
<p>题目给到了一个apk程序文件，但是主程序里面没有程序的源代码：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829185549101.png" alt="image-20220829185549101"></p>
<p>感觉没有什么思路去处理，对程序的具体结构仔细分析：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829185730520.png" alt="image-20220829185730520"></p>
<p>发现有一个类似于壳的代码程序，尝试进行搜索找到了壳的相关博客和程序源码。</p>
<p>dpt壳程序文章：<a href="https://www.cnblogs.com/luoyesiqiu/p/dpt.html">Android函数抽取壳的实现 - luoyesiqiu - 博客园 (cnblogs.com)</a></p>
<p>dpt壳源码：<a href="https://github.com/luoyesiqiu/dpt-shell">luoyesiqiu/dpt-shell: Android函数抽取壳实现 (github.com)</a></p>
<p>下载壳工具的release版本，进行反编译查看dpt.jar java包文件，可以使用jadx进行反编译查看内容，找到dpt函数进行代码逻辑的审计</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829190248720.png" alt="image-20220829190248720"></p>
<p>根据文章，这个壳是一个函数抽取壳会进行函数的抽取壳：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829190759843.png" alt="image-20220829190759843"></p>
<p>文章也把壳运行的整个流程逻辑写出来了：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829190732698.png" alt="image-20220829190732698"></p>
<p>根据文章的信息，这道题目首先的一个子任务就是脱壳，而脱壳目前来说的目标就是对整个壳程序的逻辑进行分析。对整个流程大致分析下，发现主要是对于Dex进行操作，首先可以在dpt函数中搜索Dex关键字来定位到函数位置：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829191309699.png" alt="image-20220829191309699"></p>
<p>找到一个关键的函数，跟进这个函数，可以找到些许信息</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829191405666.png" alt="image-20220829191405666"></p>
<p>这个函数打开了一个<code>OoooooOooo</code>的文件，这是一个关键的文件信息，可能依据文章中的逻辑找到原来字节码的存储位置。这个函数不长，简单来说就是对原有的Dex进行提取，然后将提取的Dex写入到这个文件中，主要是写入操作的具体实现</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829192021242.png" alt="image-20220829192021242"></p>
<p>跟进<code>writeMultiDexCode</code>查看内部实现情况：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220829192849282.png" alt="image-20220829192849282"></p>
<p>感觉是比较类似于pe结构的实现方式，也就是找到相应的位置进行求解</p>
<p>应该就是类似的一种结构，知道相应的函数偏移位置和相应的数据大小来对dex文件的函数进行抽取，根据这个原理可以进行PE文件结构类似的操作方式进行处理。编写一个小的程序将抽取出来的数据重新填充到相应的位置中。</p>
<p>可以编写一个python脚本进行脱壳处理：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> struct <span style="color:#f92672">import</span> unpack
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;./classes2.dex&#39;</span>,<span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;./OoooooOooo&#39;</span>, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    raw <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;version = </span><span style="color:#e6db74">{</span>unpack(<span style="color:#e6db74">&#39;&lt;H&#39;</span>,raw[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">2</span>])[<span style="color:#ae81ff">0</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;dexcount = </span><span style="color:#e6db74">{</span>unpack(<span style="color:#e6db74">&#39;&lt;H&#39;</span>,raw[<span style="color:#ae81ff">2</span>:<span style="color:#ae81ff">4</span>])[<span style="color:#ae81ff">0</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;dexCodesIndex1 = </span><span style="color:#e6db74">{</span>unpack(<span style="color:#e6db74">&#39;&lt;I&#39;</span>,raw[<span style="color:#ae81ff">4</span>:<span style="color:#ae81ff">8</span>])[<span style="color:#ae81ff">0</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;dexCodesIndex2 = </span><span style="color:#e6db74">{</span>unpack(<span style="color:#e6db74">&#39;&lt;I&#39;</span>,raw[<span style="color:#ae81ff">8</span>:<span style="color:#ae81ff">12</span>])[<span style="color:#ae81ff">0</span>]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>pos <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span>(<span style="color:#66d9ef">True</span>):
</span></span><span style="display:flex;"><span>    method_index <span style="color:#f92672">=</span> unpack(<span style="color:#e6db74">&#39;&lt;I&#39;</span>,raw[pos:pos<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>])[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    pos <span style="color:#f92672">+=</span> <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>    offset_dex <span style="color:#f92672">=</span> unpack(<span style="color:#e6db74">&#39;&lt;I&#39;</span>,raw[pos:pos<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>])[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    pos <span style="color:#f92672">+=</span> <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>    instruction_data_size <span style="color:#f92672">=</span> unpack(<span style="color:#e6db74">&#39;&lt;I&#39;</span>,raw[pos:pos<span style="color:#f92672">+</span><span style="color:#ae81ff">4</span>])[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    pos <span style="color:#f92672">+=</span> <span style="color:#ae81ff">4</span>
</span></span><span style="display:flex;"><span>    instruction_data <span style="color:#f92672">=</span> raw[pos:pos<span style="color:#f92672">+</span>instruction_data_size]
</span></span><span style="display:flex;"><span>    pos <span style="color:#f92672">+=</span> instruction_data_size
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> data[:offset_dex]<span style="color:#f92672">+</span>instruction_data <span style="color:#f92672">+</span> data[offset_dex<span style="color:#f92672">+</span>instruction_data_size:]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> pos <span style="color:#f92672">==</span> len(raw):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;./classes2_dump.dex&#39;</span>, <span style="color:#e6db74">&#39;wb&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>write(data)
</span></span></code></pre></div><p>脱壳后的程序，可以使用dex2jar程序进行解包，可以得到一个jar包程序：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220830160534943.png" alt="image-20220830160534943"></p>
<p>可以直接解压得到一个文件夹，文件夹里面含有程序的class文件：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220830160400390.png" alt="image-20220830160400390"></p>
<p>这个文件结构是Android程序包的文件结构，我们关注的点应该就是com文件夹，进入到com\example\nothingcode文件夹中：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220830161024487.png" alt="image-20220830161024487"></p>
<p>这两个核心文件应该就是程序的主要文件，使用jd-gui工具进行java字节码文件的反编译来获取到java源码文件来看到程序的真实代码：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220830161253724.png" alt="image-20220830161253724"></p>
<p>直接将程序保存成一个java源代码文件</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220830161338787.png" alt="image-20220830161338787"></p>
<p>点击Save来保存反编译的源码</p>
<p>使用java ide进行源码的审计，打开生成的源代码文件，一看多少会有些惊讶：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220830161646007.png" alt="image-20220830161646007"></p>
<p>有很多混淆和switch，应该是控制流平坦化的方式进行代码混淆的。这种混淆方式主要是由于一个发生器来形成switch结构，来混淆整个程序的主要流程结构。这种混淆的解决方式主要是脚本去混淆和静态代码审计来获取到主要的程序流程。</p>
<p>尝试寻找些未进行混淆的字符串，来确定大致的逻辑特征：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220830162651236.png" alt="image-20220830162651236"></p>
<p>可以看出flag的数据应该是位于password的输入位置，往下继续寻找发现：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220830224828585.png" alt="image-20220830224828585"></p>
<p>发现，check函数对str2和str3进行了处理，而str2和str3就对应的是两个输入框的内容，根据一般输入行的原理，应该是第一个输入行是用户名，而第二个输入行是密码。进入到check函数中一探究竟：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220830225238183.png" alt="image-20220830225238183"></p>
<p>字符串str2有一个等于判断，判断str2是不是等于<code>“helloctf”</code> 这显然像是一个用户名，而不是密码。由于密码是flag这个设定，所以这个str2的形式显然不像是flag的形式。下面寻找字符串str3的操作：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220830230118538.png" alt="image-20220830230118538"></p>
<p>找到str3的相关操作，并且找到一组数据，暂时不清楚这组数据有什么用。这个操作显然是把str3转成一个Int数组的操作，跟进函数查看具体操作情况：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220830230758071.png" alt="image-20220830230758071"></p>
<p>函数内部有两个操作，一个是判断长度的操作，另一个是除法操作。应该是进行Int数组的初始化处理，继续探究后续操作：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220830231328844.png" alt="image-20220830231328844"></p>
<p>进行大端序处理的操作，以及后面有迭代的操作，根据目前分析的情况。可以判断这个函数就是将字符串以大端序的方式转成Int数组。</p>
<p>这个函数分析完毕继续探究以下的内容：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220830231925973.png" alt="image-20220830231925973"></p>
<p>发现非常有趣的特征，一个特征是<code>&lt;32</code>说明可能有32轮次，后面两个运算方程。这些特征和TEA加密算法的特征类似。尝试进行TEA算法的比对，TEA加密算法有32轮次加密并且每轮加密的算法也是相应的一致。由此可以判断这个加密算法应该就是TEA加密算法。</p>
<p>现在找到了加密算法，一个加密算法应该有相应的密钥和相应的密文以及明文。由于我们输入的内容就是要加密的明文，因此找到密文和密钥就可能求解出此题。进行寻找相关信息：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220831113843486.png" alt="image-20220831113843486"></p>
<p>可以大致看出这个数据像是密文的，之前找到的四个成员的数组数据比较符号TEA加密算法的密钥形式，据此推断那个数据应该就是密钥。而且数据只对Int数组进行了加密前面两个成员。没有加密其他成员。</p>
<p>可以大致总结下，加密的大致逻辑：</p>
<p><img src="/images/2022_WDB_QL-writeup/image-20220831115650012.png" alt="image-20220831115650012"></p>
<p>根据整合的逻辑可以编写脚本进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> ctypes <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt</span>(v, k):
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> c_int32(v[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>    y <span style="color:#f92672">=</span> c_int32(v[<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>    delta <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1640531527</span>
</span></span><span style="display:flex;"><span>    total <span style="color:#f92672">=</span> c_uint32(delta <span style="color:#f92672">*</span> <span style="color:#ae81ff">32</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>):
</span></span><span style="display:flex;"><span>        y<span style="color:#f92672">.</span>value <span style="color:#f92672">-=</span> ((x<span style="color:#f92672">.</span>value <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">+</span> k[<span style="color:#ae81ff">2</span>]) <span style="color:#f92672">^</span> (x<span style="color:#f92672">.</span>value <span style="color:#f92672">+</span> total<span style="color:#f92672">.</span>value) <span style="color:#f92672">^</span> ((x<span style="color:#f92672">.</span>value <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">5</span>) <span style="color:#f92672">+</span> k[<span style="color:#ae81ff">3</span>])
</span></span><span style="display:flex;"><span>        x<span style="color:#f92672">.</span>value <span style="color:#f92672">-=</span> ((y<span style="color:#f92672">.</span>value <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">+</span> k[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">^</span> (y<span style="color:#f92672">.</span>value <span style="color:#f92672">+</span> total<span style="color:#f92672">.</span>value) <span style="color:#f92672">^</span> ((y<span style="color:#f92672">.</span>value <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">5</span>) <span style="color:#f92672">+</span> k[<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>        total<span style="color:#f92672">.</span>value <span style="color:#f92672">-=</span> delta
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> x<span style="color:#f92672">.</span>value, y<span style="color:#f92672">.</span>value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c_bytes <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">-</span><span style="color:#ae81ff">63</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">69</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">86</span>, <span style="color:#ae81ff">43</span>, <span style="color:#ae81ff">126</span>, <span style="color:#ae81ff">114</span>, <span style="color:#ae81ff">32</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">75</span>, <span style="color:#ae81ff">102</span>, <span style="color:#ae81ff">49</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">65</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">121</span>, <span style="color:#ae81ff">107</span>, <span style="color:#ae81ff">111</span>, <span style="color:#ae81ff">99</span>
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,len(c_bytes),<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>    num <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> v <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>        num <span style="color:#f92672">+=</span> hex((c_bytes[i<span style="color:#f92672">+</span>v] <span style="color:#f92672">+</span> <span style="color:#ae81ff">256</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">256</span>)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>zfill(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    num <span style="color:#f92672">=</span> int(num,<span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> num <span style="color:#f92672">&lt;</span> pow(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">31</span>):
</span></span><span style="display:flex;"><span>        c<span style="color:#f92672">.</span>append(num)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        c<span style="color:#f92672">.</span>append(num<span style="color:#f92672">-</span>pow(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">32</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> [<span style="color:#ae81ff">2023708229</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">158607964</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">2120859654</span>, <span style="color:#ae81ff">1167043672</span>]
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> list(decrypt(c,key)) <span style="color:#f92672">+</span> c[<span style="color:#ae81ff">2</span>:<span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> m:
</span></span><span style="display:flex;"><span>    f <span style="color:#f92672">=</span> [int(hex(i)[<span style="color:#ae81ff">2</span>:][v:v<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>],<span style="color:#ae81ff">16</span>) <span style="color:#66d9ef">for</span> v <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">2</span>)]
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">+=</span> bytes(f)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#39;flag</span><span style="color:#ae81ff">{{</span><span style="color:#e6db74">{</span>flag<span style="color:#f92672">.</span>decode()<span style="color:#e6db74">}</span><span style="color:#ae81ff">}}</span><span style="color:#e6db74">&#39;</span>)
</span></span></code></pre></div><p>运行得到flag：<code>flag{Givey0urf1Agykoc}</code></p>
<p>这道题目的脱壳方法也很多种，可以使用frida进行hook，然后让程序运行到解密的位置进行内存dump来进行脱壳。当然还有另一个方法也可以进行脱壳，在网上搜索到的一篇博客中有详细说明：<a href="https://blog.csdn.net/m0_64604636/article/details/121885541">(191条消息) Android脱壳之整体脱壳原理与实践，今天带你详细了解各组件原理_m0_64604636的博客-CSDN博客_android 脱壳</a></p>
]]></content>
        </item>
        
        <item>
            <title>攻防世界进阶区日常训练001</title>
            <link>/posts/xctf-reverse-advanced_daliy_001/</link>
            <pubDate>Sat, 23 Apr 2022 15:14:39 +0800</pubDate>
            
            <guid>/posts/xctf-reverse-advanced_daliy_001/</guid>
            <description>攻防世界 RE 进阶区 日常练习 001 ISCC比赛临近，CTF比赛题目也要开始继续训练起来 前段时间，由于准备升学相关的事宜，没有进行比赛的训练 手感相对而言，有些生疏 简单从攻防世界平台找几道逆向的题目进行简单的练习下
这几道题目主要都是使用IDA pro的远程调试功能，使用虚拟机搭配IDA进行远程调试
re2-cpp-is-awesome 先查看一些文件的简单信息 ELF文件，GCC编译，无壳
IDA看下： C++编译的程序文件，看的心烦意乱基本上找不到关键的函数，和关键的位置。
尝试使用下IDA pro的动调寻找一下f关键位置(IDA pro的动态消失配置可以自己网络检索，有很多相关的内容)
先断在第一个跳转位置，即jz short loc_400BD7 位置上
进行几次调试，发现都直接退出，没有进行跳转 也就是 cmp [rbp+var_64], 2 的比较值没有改变ZF标志位 对上面汇编代码进行审计：
main proc near var_70= qword ptr -70h var_64= dword ptr -64h var_60= qword ptr -60h var_50= byte ptr -50h var_21= byte ptr -21h var_20= qword ptr -20h var_14= dword ptr -14h push rbp mov rbp, rsp push rbx sub rsp, 68h mov [rbp+var_64], edi mov [rbp+var_70], rsi cmp [rbp+var_64], 2 指令cmp [rbp+var_64], 2是一个条件判断，根据这个语句寻找下变量</description>
            <content type="html"><![CDATA[<h1 id="攻防世界-re-进阶区-日常练习-001">攻防世界 RE 进阶区 日常练习 001</h1>
<blockquote>
<p>ISCC比赛临近，CTF比赛题目也要开始继续训练起来
前段时间，由于准备升学相关的事宜，没有进行比赛的训练
手感相对而言，有些生疏
简单从攻防世界平台找几道逆向的题目进行简单的练习下</p>
</blockquote>
<p>这几道题目主要都是使用IDA pro的远程调试功能，使用虚拟机搭配IDA进行远程调试</p>
<h2 id="re2-cpp-is-awesome">re2-cpp-is-awesome</h2>
<p>先查看一些文件的简单信息
<img src="/images/XCTF-REVERSE-DAILY/Pasted_image_20220420210740.png" alt=""></p>
<p>ELF文件，GCC编译，无壳</p>
<p>IDA看下：
C++编译的程序文件，看的心烦意乱基本上找不到关键的函数，和关键的位置。</p>
<p>尝试使用下IDA pro的动调寻找一下f关键位置(IDA pro的动态消失配置可以自己网络检索，有很多相关的内容)</p>
<p>先断在第一个跳转位置，即<code>jz short loc_400BD7</code> 位置上</p>
<p><img src="/images/XCTF-REVERSE-DAILY/Pasted_image_20220420213518.png" alt=""></p>
<p>进行几次调试，发现都直接退出，没有进行跳转
也就是 <code>cmp [rbp+var_64], 2</code> 的比较值没有改变ZF标志位
对上面汇编代码进行审计：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">main proc near                       
var_70= qword ptr -70h
var_64= dword ptr -64h
var_60= qword ptr -60h
var_50= byte ptr -50h
var_21= byte ptr -21h
var_20= qword ptr -20h
var_14= dword ptr -14h

push    rbp
mov     rbp, rsp
push    rbx
sub     rsp, 68h
mov     [rbp+var_64], edi
mov     [rbp+var_70], rsi
cmp     [rbp+var_64], 2
</code></pre><p>指令<code>cmp [rbp+var_64], 2</code>是一个条件判断，根据这个语句寻找下变量</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">rbp+64 = edi
</code></pre><p>根据Linux x64 fastcall的调用约定，可以知道<code>edi</code>寄存器存储着函数的第一个参数，<code>main</code>函数的第一参数是运行程序附加的参数。所以根据条件，应该是程序运行的时候要携带一个参数进行运行。</p>
<p>因此，尝试使用传参调用来进行寻找关键的函数（当然也可以使用修改ZF标志位）。现在进入下一步的探索：</p>
<p><img src="/images/XCTF-REVERSE-DAILY/Pasted_image_20220421000556.png" alt=""></p>
<p>一路F8寻找退出位置，找到退出位置是在<code>call sub_400B56</code>位置
点开函数看下</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">sub_400B56      proc near       ; CODE XREF: main+F5↓p
push    rbp
mov     rbp, rsp
mov     esi, offset aBetterLuckNext ; &#34;Better luck next time\n&#34;
mov     edi, offset _ZSt4cout ; std::cout
call    __ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc ; std::operator&lt;&lt;&lt;std::char_traits&lt;char&gt;&gt;(std::ostream &amp;,char const*)
mov     edi, 0          ; status
call    _exit
</code></pre><p>简单审计下，发现函数，就是一个错误输出的函数，应该不是关键判断的位置。因此，需要往上继续寻找。</p>
<p>退出函数上面有<code>jz short loc_400C83</code>跳转，说明应该是存在条件判断，进行向上寻找条件判断的语句。</p>
<p>找到<code>cmp dl al</code>指令这个应该是核心的条件判断指令
指令比较的是dl寄存器和al寄存器存储的值
dl寄存器是dx寄存器的低位，al寄存器是ax寄存器的低位。相应地，寻找下对eax或rax、edx或rdx的操作</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">lea     rax, [rbp+var_50]
mov     rdi, rax
call    __ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv ; std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::end(void)
mov     [rbp+var_20], rax
lea     rdx, [rbp+var_20]
lea     rax, [rbp+var_60]
mov     rsi, rdx
mov     rdi, rax
call    sub_400D3D
test    al, al
jz      short loc_400C95
lea     rax, [rbp+var_60]
mov     rdi, rax
call    sub_400D9A
movzx   edx, byte ptr [rax]
mov     rcx, cs:off_6020A0 ; &#34;L3t_ME_T3ll_Y0u_S0m3th1ng_1mp0rtant_A_{&#34;...
mov     eax, [rbp+var_14]
cdqe
mov     eax, dword_6020C0[rax*4]
cdqe
add     rax, rcx
movzx   eax, byte ptr [rax]
</code></pre><p>可以寻找到相应的关系，由于C++面向对象STL反汇编实在是比较难搞懂，经过反复调试，发现关键的函数是在这几行：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">
movzx   edx, byte ptr [rax]
mov     rcx, cs:off_6020A0 ; &#34;L3t_ME_T3ll_Y0u_S0m3th1ng_1mp0rtant_A_{&#34;...
mov     eax, [rbp+var_14]
cdqe
mov     eax, dword_6020C0[rax*4]
cdqe
add     rax, rcx
movzx   eax, byte ptr [rax]
</code></pre><p>对于这个指令，应该就是对数组进行取值组合，可以看下<code>dword_6020C0</code>存储的数据
<img src="/images/XCTF-REVERSE-DAILY/Pasted_image_20220421235604.png" alt="">
中间的<code>align 8</code> 指令会根据不同编译器和cpu而呈现不同的行为，<code>align</code>指令简单来说也就是数据宽度对齐，根据数据的规律，可以大致知道是每隔三个0一个有效数据。</p>
<p>上面存储了一个字符串：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">.rodata:0000000000400E58 aL3tMeT3llY0uS0 db &#39;L3t_ME_T3ll_Y0u_S0m3th1ng_1mp0rtant_A_{FL4G}_W0nt_b3_3X4ctly_th4t&#39;
.rodata:0000000000400E58                 db &#39;_345y_t0_c4ptur3_H0wev3r_1T_w1ll_b3_C00l_1F_Y0u_g0t_1t&#39;,0
</code></pre><p>提取出来的字符串是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>L3t_ME_T3ll_Y0u_S0m3th1ng_1mp0rtant_A_{FL4G}_W0nt_b3_3X4ctly_th4t_345y_t0_c4ptur3_H0wev3r_1T_w1ll_b3_C00l_1F_Y0u_g0t_1t
</span></span></code></pre></div><p>然后提取一下上面数组存储的数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> ida_chars[] <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x05</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x07</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x27</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x26</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x2D</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x0D</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x2D</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x16</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x15</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x29</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x2B</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>现在知道一些已有的数据，下面需要对算法逻辑进行推导：
根据上面找到的关键指令进行C语言代码转化：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> rax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> str[] <span style="color:#f92672">=</span>  <span style="color:#e6db74">&#34;L3t_ME_T3ll_Y0u_S0m3th1ng_1mp0rtant_A_{FL4G}_W0nt_b3_3X4ctly_th4t_345y_t0_c4ptur3_H0wev3r_1T_w1ll_b3_C00l_1F_Y0u_g0t_1t&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> ida_chars[] <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x05</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x07</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x27</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x26</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x2D</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x0D</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x2D</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x16</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x15</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x29</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x2B</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(argv <span style="color:#f92672">+</span> rax) <span style="color:#f92672">!=</span>  str[ida_chars[rax<span style="color:#f92672">*</span><span style="color:#ae81ff">4</span>]]) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Error_exit</span>();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>在继续跟逻辑，跟进上面的指令，整体看下汇编，进行C语言整合：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> str[] <span style="color:#f92672">=</span>  <span style="color:#e6db74">&#34;L3t_ME_T3ll_Y0u_S0m3th1ng_1mp0rtant_A_{FL4G}_W0nt_b3_3X4ctly_th4t_345y_t0_c4ptur3_H0wev3r_1T_w1ll_b3_C00l_1F_Y0u_g0t_1t&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> ida_chars[] <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x05</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x07</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x27</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x26</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x2D</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x0D</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x2D</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x16</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x15</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x29</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">0x2B</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x00</span>
</span></span><span style="display:flex;"><span>	};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">31</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(argv <span style="color:#f92672">+</span> i) <span style="color:#f92672">!=</span>  str[ida_chars[i<span style="color:#f92672">*</span><span style="color:#ae81ff">4</span>]]) {
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">Error_exit</span>();
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>现在主要逻辑基本已经整合成C语言代码，下面根据主要的逻辑，编写一个C语言代码进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> string[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;L3t_ME_T3ll_Y0u_S0m3th1ng_1mp0rtant_A_{FL4G}_W0nt_b3_3X4ctly_th4t_345y_t0_c4ptur3_H0wev3r_1T_w1ll_b3_C00l_1F_Y0u_g0t_1&#34;</span>; 
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> ida_chars[] <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x05</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x07</span>,  <span style="color:#ae81ff">0x27</span>, <span style="color:#ae81ff">0x26</span>, <span style="color:#ae81ff">0x2D</span>, 
</span></span><span style="display:flex;"><span>          <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x0D</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x03</span>,
</span></span><span style="display:flex;"><span>          <span style="color:#ae81ff">0x2D</span>, <span style="color:#ae81ff">0x16</span>, <span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x15</span>, <span style="color:#ae81ff">0x03</span>, <span style="color:#ae81ff">0x65</span>, <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x29</span>, <span style="color:#ae81ff">0x44</span>, 
</span></span><span style="display:flex;"><span>          <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x2B</span>
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> flag[<span style="color:#ae81ff">31</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">31</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>                flag[i] <span style="color:#f92672">=</span> string[ida_chars[i]];
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, flag);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行程序，得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>ALEXCTF{W3_L0v3_C_W1th_CL45535}
</span></span></code></pre></div><p>补充知识：</p>
<blockquote>
<p>Linux x64 fastcall 调用约定</p>
<ul>
<li>Linux 下的调用约定叫做 “System V AMD64 ABI”，此约定主要在 Solaris，GNU/Linux，FreeBSD 和其他非微软OS上使用；</li>
<li>Linux 的 x64 下也只有一种函数调用约定，即 __fastcall ，其他调用约定的关键字会被忽略，也就是说 ABI 只有__fastcall ；</li>
<li>一个函数在调用时，如果参数个数小于等于 6 个时，前 6 个参数是从左至右依次存放于 RDI，RSI，RDX，RCX，R8，R9 寄存器里面，剩下的参数通过栈传递，从右至左顺序入栈；</li>
<li>如果参数个数大于 6 个时，前 5 个参数是从左至右依次存放于 RDI，RSI，RDX，RCX，RAX 寄存器里面，剩下的参数通过栈传递，从右至左顺序入栈；</li>
<li>对于系统调用，使用 R10 代替 RCX；</li>
</ul>
</blockquote>
<h2 id="easyre1">easyRE1</h2>
<p>附件中是一个rar文件，解压后的文件夹含有两个文件
一个easy-32文件
一个easy-64文件</p>
<p>查看下文件的大致信息：
<img src="/images/XCTF-REVERSE-DAILY/Pasted_image_20220422045950.png" alt=""></p>
<p>ELF x64位程序，通过gcc进行编译的，没有壳
使用IDA pro 查看下程序</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">push    rbp
mov     rbp, rsp
sub     rsp, 120h
mov     [rbp+var_114], edi
mov     [rbp+var_120], rsi
mov     rax, fs:28h
mov     [rbp+var_8], rax
xor     eax, eax
mov     edi, offset s   ; &#34;What is the password?&#34;
call    _puts
lea     rax, [rbp+s1]
mov     rdi, rax
mov     eax, 0
call    _gets
lea     rax, [rbp+s1]
mov     esi, offset s2  ; &#34;the password&#34;
mov     rdi, rax        ; s1
call    _strcmp
test    eax, eax
jnz     short loc_40068F
mov     edi, offset aFlagDb2f62a36a ; &#34;FLAG:db2f62a36a018bce28e46d976e3f9864&#34;
call    _puts
jmp     short loc_400699
loc_40068F:                             ; CODE XREF: main+5B↑j
mov     edi, offset aWrong ; &#34;Wrong!!&#34;
call    _puts
</code></pre><p>发现程序就挺简单的，关键信息就直接呈现出来了</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">mov     edi, offset aFlagDb2f62a36a ; &#34;FLAG:db2f62a36a018bce28e46d976e3f9864&#34;
</code></pre><p>这道题目的Flag应该就是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{db2f62a36a018bce28e46d976e3f9864}
</span></span></code></pre></div><h2 id="reversing-x64elf-100">Reversing-x64Elf-100</h2>
<p>查看下文件信息，应该是Elf的文件，使用DIE查看下程序信息
<img src="/images/XCTF-REVERSE-DAILY/Pasted_image_20220422051546.png" alt=""></p>
<p>Elf x64程序，没有壳，gcc编译。
使用IDA看下，发现整个程序还是比较简单的，逻辑流程比较清晰</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">main            proc near               ; DATA XREF: start+1D↑o

s               = byte ptr -110h
var_8           = qword ptr -8

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 110h
mov     rax, fs:28h
mov     [rbp+var_8], rax
xor     eax, eax
mov     edi, offset format ; &#34;Enter the password: &#34;
mov     eax, 0
call    _printf
mov     rdx, cs:stdin   ; stream
lea     rax, [rbp+s]
mov     esi, 0FFh       ; n
mov     rdi, rax        ; s
call    _fgets
test    rax, rax
jz      short loc_400866
lea     rax, [rbp+s]
mov     rdi, rax
call    sub_4006FD
test    eax, eax
jnz     short loc_400855
mov     edi, offset s   ; &#34;Nice!&#34;
call    _puts
mov     eax, 0
jmp     short loc_40086B

loc_400855:                             ; CODE XREF: main+5A↑j
	mov     edi, offset aIncorrectPassw ; &#34;Incorrect password!&#34;
	call    _puts
	mov     eax, 1
</code></pre><p>其实也就是一个判断，来判断flag的数据是否正确，主要应该就是对<code>sub_4006FD</code>函数的分析，
下面就需要进入<code>sub_4006FD</code>函数里面，观察这个函数的行为</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">sub_4006FD      proc near               ; CODE XREF: main+53↓p

var_38          = qword ptr -38h
var_24          = dword ptr -24h
var_20          = qword ptr -20h
var_18          = qword ptr -18h
var_10          = qword ptr -10h

push    rbp
mov     rbp, rsp
mov     [rbp+var_38], rdi
mov     [rbp+var_24], 0
mov     [rbp+var_20], offset aDufhbmf ; &#34;Dufhbmf&#34;
mov     [rbp+var_18], offset aPgImos ; &#34;pG`imos&#34;
mov     [rbp+var_10], offset aEwuglpt ; &#34;ewUglpt&#34;
mov     [rbp+var_24], 0
jmp     short loc_40079B

loc_40072D:                        ; CODE XREF: sub_4006FD+A2↓j
	mov     ecx, [rbp+var_24]
	mov     edx, 55555556h
	mov     eax, ecx
	imul    edx
	mov     eax, ecx
	sar     eax, 1Fh
	sub     edx, eax
	mov     eax, edx
	add     eax, eax
	add     eax, edx
	sub     ecx, eax
	mov     edx, ecx
	movsxd  rax, edx
	mov     rsi, [rbp+rax*8+var_20]
	mov     ecx, [rbp+var_24]
	mov     edx, 55555556h
	mov     eax, ecx
	imul    edx
	mov     eax, ecx
	sar     eax, 1Fh
	sub     edx, eax
	mov     eax, edx
	add     eax, eax
	cdqe
	add     rax, rsi
	movzx   eax, byte ptr [rax]
	movsx   edx, al
	mov     eax, [rbp+var_24]
	movsxd  rcx, eax
	mov     rax, [rbp+var_38]
	add     rax, rcx
	movzx   eax, byte ptr [rax]
	movsx   eax, al
	sub     edx, eax
	mov     eax, edx
	cmp     eax, 1
	jz      short loc_400797
	mov     eax, 1
	jmp     short loc_4007A6

loc_400797:                             ; CODE XREF: sub_4006FD+91↑j
	add     [rbp+var_24], 1

loc_40079B:                             ; CODE XREF: sub_4006FD+2E↑j
	cmp     [rbp+var_24], 0Bh
	jle     short loc_40072D
	mov     eax, 0
loc_4007A6:                             ; CODE XREF: sub_4006FD+98↑j
pop     rbp
retn

sub_4006FD      endp
</code></pre><h3 id="算法分析">算法分析</h3>
<p>关键应该是根据汇编代码来进行算法解读
找到关键的汇编代码：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">jmp     short loc_40079B

loc_40072D:                        ; CODE XREF: sub_4006FD+A2↓j
	mov     ecx, [rbp+var_24]
	mov     edx, 55555556h
	mov     eax, ecx
	imul    edx
	mov     eax, ecx
	sar     eax, 1Fh
	sub     edx, eax
	mov     eax, edx
	add     eax, eax
	add     eax, edx
	sub     ecx, eax
	mov     edx, ecx
	movsxd  rax, edx
	mov     rsi, [rbp+rax*8+var_20]
	mov     ecx, [rbp+var_24]
	mov     edx, 55555556h
	mov     eax, ecx
	imul    edx
	mov     eax, ecx
	sar     eax, 1Fh
	sub     edx, eax
	mov     eax, edx
	add     eax, eax
	cdqe
	add     rax, rsi
	movzx   eax, byte ptr [rax]
	movsx   edx, al
	mov     eax, [rbp+var_24]
	movsxd  rcx, eax
	mov     rax, [rbp+var_38]
	add     rax, rcx
	movzx   eax, byte ptr [rax]
	movsx   eax, al
	sub     edx, eax
	mov     eax, edx
	cmp     eax, 1
	jz      short loc_400797
	mov     eax, 1
	jmp     short loc_4007A6

loc_400797:                             ; CODE XREF: sub_4006FD+91↑j
	add     [rbp+var_24], 1

loc_40079B:                             ; CODE XREF: sub_4006FD+2E↑j
	cmp     [rbp+var_24], 0Bh
	jle     short loc_40072D
	mov     eax, 0
</code></pre><p>这一大段代码应该就是关键的汇编代码，开始像剥洋葱一样，一层一层剥下这个程序的逻辑</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">	mov     ecx, [rbp+var_24]
	mov     edx, 55555556h
	mov     eax, ecx
	imul    edx
	mov     eax, ecx
	sar     eax, 1Fh
	sub     edx, eax
	mov     eax, edx
</code></pre><p>这段代码是 <code>[rpb+var_24] / 3</code> ，可能看不明白，在《C++反汇编揭秘》一书中给出了除法的汇编运算模型，也算是编译器的一个模型。
$$
\frac{\text{ecx} \cdot M}{2^{n+1}}
$$
这里的M是指<code>mov edx, 55555556h</code>中的数值<code>55555556h</code>，
这里的n是指<code>sar eax, 1Fh</code>中的数值<code>1Fh</code>
根据公式，可以推导出除数的计算公式</p>
<p>$$
除数 = \frac{2^{n+1}}{M}
$$
根据根据推导的除法公式进行计算，得到除数是3。（关于除法的汇编分析可以阅读看雪一个师傅写的博客：<a href="https://bbs.pediy.com/thread-261946.htm">[原创]#30天写作挑战#反汇编代码还原之除数为非2的幂-编程技术-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a>）</p>
<p>现在可以清晰地明白了这段代码就是 ：n / 3</p>
<p>接下来，看下面一段代码：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">	add     eax, eax
	add     eax, edx
	sub     ecx, eax
	mov     edx, ecx
</code></pre><p>这一段代码，是比较容易理解的，结合着上面的代码：</p>
<ul>
<li>eax = <code>n / 3</code></li>
<li>edx = <code>n / 3</code></li>
<li>ecx = <code>n</code>
根据信息，这段代码应该就是<code>n - 3 * (n / 3)</code>，可能有些人感觉很晕乎，着其实是取余运算，简言之，就是 <code>n % 3</code>，仔细分析下，就会发现和 <code>n % 3</code>的结果一致。</li>
</ul>
<p>现在这大段代码就是 <code>n % 3</code></p>
<p>继续往下走起！</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">	movsxd  rax, edx
	mov     rsi, [rbp+rax*8+var_20]
</code></pre><p>这个非常简单，就是数组喽，即<code>rbp[n % 3]</code></p>
<p>接下来往下看</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">	mov     ecx, [rbp+var_24]
	mov     edx, 55555556h
	mov     eax, ecx
	imul    edx
	mov     eax, ecx
	sar     eax, 1Fh
	sub     edx, eax
	mov     eax, edx
	add     eax, eax
</code></pre><p>非常明显的除法，这段代码就是<code>2 * (n / 3)</code>
后面紧跟着一段代码：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">	cdqe
	add     rax, rsi
	movzx   eax, byte ptr [rax]
	movsx   edx, al
</code></pre><p>其实就是对上面数据的一个整合，也就是</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>*(rbp[n % 3] + 2 * (n / 3))
</span></span></code></pre></div><p>现在最难读懂的部分已经过去了，剩下的部分就比较简单，一口气读完</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">	mov     eax, [rbp+var_24]
	movsxd  rcx, eax
	mov     rax, [rbp+var_38]
	add     rax, rcx
	movzx   eax, byte ptr [rax]
	movsx   eax, al
</code></pre><p>直接读就行了，结合程序的信息：</p>
<ul>
<li>rax : <code>arg</code></li>
<li>rcx : <code>n</code></li>
</ul>
<p>所以这段代码就是</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>*(arg + n)
</span></span></code></pre></div><p>核心部分已经处理完毕了，再整体审计下代码得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">11</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>(rbp[ i <span style="color:#f92672">%</span> <span style="color:#ae81ff">3</span> ] <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> (i <span style="color:#f92672">/</span> <span style="color:#ae81ff">3</span>)) <span style="color:#f92672">-</span> <span style="color:#f92672">*</span>(arg <span style="color:#f92672">+</span> i) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>根据这样的代码，可以继续优化下，得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">size_t</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">11</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> ( rbp[i <span style="color:#f92672">%</span> <span style="color:#ae81ff">3</span>][<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> (i <span style="color:#f92672">/</span> <span style="color:#ae81ff">3</span>)] <span style="color:#f92672">-</span> str[i] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="求解">求解</h3>
<p>根据核心代码的分析，可以编写程序进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v3[<span style="color:#ae81ff">4</span>];
</span></span><span style="display:flex;"><span>        v3[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Dufhbmf&#34;</span>;
</span></span><span style="display:flex;"><span>        v3[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pG`imos&#34;</span>;
</span></span><span style="display:flex;"><span>        v3[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ewUglpt&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> flag[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">11</span>; i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>                flag[i] <span style="color:#f92672">=</span> v3[i<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span>][<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>(i<span style="color:#f92672">/</span><span style="color:#ae81ff">3</span>)] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, flag);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行程序，得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Code_Talkers
</span></span></code></pre></div><p>这道题目，主要考察运算的汇编理解。对于汇编的识别还是有一定要求的。至于我为什么不使用IDA pro的F5的Hex-rays插件的功能，我是想要进一步提高自身对于汇编语言的理解，而Hex-rays在很多时候都是无法使用，在真正的逆向工程中，更多的还是人工进行还原，而不是使用IDA的插件进行还原。而且，我是在进行练习，自然是希望挖掘到更多的知识点和技巧点。如果是比赛的话，肯定是更多采用F5的功能。</p>
<h2 id="babyre">BABYRE</h2>
<p>这道题目，有些技巧，不过总体还是挺有意思的。
看下程序信息先：
<img src="/images/XCTF-REVERSE-DAILY/Pasted_image_20220422233020.png" alt=""></p>
<p>ELF x64程序 GCC编译的程序
使用IDA pro看看</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">main            proc near               ; DATA XREF: _start+1D↑o
s               = byte ptr -20h
var_8           = dword ptr -8
var_4           = dword ptr -4

; __unwind {
                push    rbp
                mov     rbp, rsp
                sub     rsp, 20h
                mov     [rbp+var_4], 0
                jmp     short loc_400637

loc_400617:                             ; CODE XREF: main+38↓j
                mov     eax, [rbp+var_4]
                cdqe
                movzx   eax, judge[rax]
                xor     eax, 0Ch
                mov     edx, eax
                mov     eax, [rbp+var_4]
                cdqe
                mov     judge[rax], dl
                add     [rbp+var_4], 1

loc_400637:                             ; CODE XREF: main+F↑j
                cmp     [rbp+var_4], 0B5h
                jle     short loc_400617
                mov     edi, offset format ; &#34;Please input flag:&#34;
                mov     eax, 0
                call    _printf
                lea     rax, [rbp+s]
                mov     rsi, rax
                mov     edi, offset a20s ; &#34;%20s&#34;
                mov     eax, 0
                call    ___isoc99_scanf
                lea     rax, [rbp+s]
                mov     rdi, rax        ; s
                call    _strlen
                mov     [rbp+var_8], eax
                cmp     [rbp+var_8], 0Eh
                jnz     short loc_400698
                mov     edx, offset judge
                lea     rax, [rbp+s]
                mov     rdi, rax
                call    rdx ; judge
                test    eax, eax
                jz      short loc_400698
                mov     edi, offset s   ; &#34;Right!&#34;
                call    _puts
                jmp     short loc_4006A2

loc_400698:                             ; CODE XREF: main+72↑j
                                        ; main+84↑j
                mov     edi, offset aWrong ; &#34;Wrong!&#34;
                call    _puts

loc_4006A2:                             ; CODE XREF: main+90↑j
                mov     eax, 0
                leave
                retn
; } // starts at 400606
main            endp
</code></pre><h3 id="问题分析">问题分析</h3>
<p>主程序的汇编并不很难的样子，但是这里是有坑的</p>
<p>如果直接看主逻辑的话，没有什么难度。
主逻辑就是一个函数判断的问题，如果函数判断成功，就返回正确，错误就返回错误。
但是仔细看下，调用了一个Judge数据，相当于调用了数据。根据这个数据转换成函数会发现这个数据被混淆了。一直集中这个区域，就不知道怎么混淆。怎么跳出这个坑？这个的解决方法就挺简单的，放大一些自己的观测区域，能看到一些关键点</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">loc_400617:                             ; CODE XREF: main+38↓j
                mov     eax, [rbp+var_4]
                cdqe
                movzx   eax, judge[rax]
                xor     eax, 0Ch
                mov     edx, eax
                mov     eax, [rbp+var_4]
                cdqe
                mov     judge[rax], dl
                add     [rbp+var_4], 1
                
loc_400637:                             ; CODE XREF: main+F↑j
                cmp     [rbp+var_4], 0B5h
                jle     short loc_400617
</code></pre><p>这段代码对<code>judge</code>数据进行异或处理，静态观察就不能看到准确的judge数据。如果想要正确看到这个函数的数据，就需要看到运行过程中的运行数据。解决方法有两个，一种是静态解决方案，另一种是动态解决方案。</p>
<h3 id="静态解决方案">静态解决方案</h3>
<p>采用静态反汇编的方案，也就比较简单，直接在IDA里面嵌入执行脚本，使用执行脚本对数据进行异或修改。IDA pro支持嵌入Python脚本进行异或操作来修改数据。进行异或来得到正确的数据。</p>
<p><img src="/images/XCTF-REVERSE-DAILY/Pasted_image_20220423113951.png" alt=""></p>
<p>运行一次，然后将judge数据段进行代码转换，就能得到相应的函数：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">judge           proc near               ; CODE XREF: main+80↑p
                                        ; DATA XREF: main+16↑r ...

var_28          = qword ptr -28h
var_20          = byte ptr -20h
var_1F          = byte ptr -1Fh
var_1E          = byte ptr -1Eh
var_1D          = byte ptr -1Dh
var_1C          = byte ptr -1Ch
var_1B          = byte ptr -1Bh
var_1A          = byte ptr -1Ah
var_19          = byte ptr -19h
var_18          = byte ptr -18h
var_17          = byte ptr -17h
var_16          = byte ptr -16h
var_15          = byte ptr -15h
var_14          = byte ptr -14h
var_13          = byte ptr -13h
var_4           = dword ptr -4

                push    rbp
                mov     rbp, rsp
                mov     [rbp+var_28], rdi
                mov     [rbp+var_20], 66h ; &#39;f&#39;
                mov     [rbp+var_1F], 6Dh ; &#39;m&#39;
                mov     [rbp+var_1E], 63h ; &#39;c&#39;
                mov     [rbp+var_1D], 64h ; &#39;d&#39;
                mov     [rbp+var_1C], 7Fh
                mov     [rbp+var_1B], 6Bh ; &#39;k&#39;
                mov     [rbp+var_1A], 37h ; &#39;7&#39;
                mov     [rbp+var_19], 64h ; &#39;d&#39;
                mov     [rbp+var_18], 3Bh ; &#39;;&#39;
                mov     [rbp+var_17], 56h ; &#39;V&#39;
                mov     [rbp+var_16], 60h ; &#39;`&#39;
                mov     [rbp+var_15], 3Bh ; &#39;;&#39;
                mov     [rbp+var_14], 6Eh ; &#39;n&#39;
                mov     [rbp+var_13], 70h ; &#39;p&#39;
                mov     [rbp+var_4], 0
                jmp     short loc_600B71

loc_600B49:                             ; CODE XREF: judge+75↓j
                mov     eax, [rbp+var_4]
                movsxd  rdx, eax
                mov     rax, [rbp+var_28]
                add     rax, rdx
                mov     edx, [rbp+var_4]
                movsxd  rcx, edx
                mov     rdx, [rbp+var_28]
                add     rdx, rcx
                movzx   edx, byte ptr [rdx]
                mov     ecx, [rbp+var_4]
                xor     edx, ecx
                mov     [rax], dl
                add     [rbp+var_4], 1

loc_600B71:                             ; CODE XREF: judge+47↑j
                cmp     [rbp+var_4], 0Dh
                jle     short loc_600B49
                mov     [rbp+var_4], 0
                jmp     short loc_600BA9

loc_600B80:                             ; CODE XREF: judge+AD↓j
                mov     eax, [rbp+var_4]
                movsxd  rdx, eax
                mov     rax, [rbp+var_28]
                add     rax, rdx
                movzx   edx, byte ptr [rax]
                mov     eax, [rbp+var_4]
                cdqe
                movzx   eax, [rbp+rax+var_20]
                cmp     dl, al
                jz      short loc_600BA5
                mov     eax, 0
                jmp     short loc_600BB4

loc_600BA5:                             ; CODE XREF: judge+9C↑j
                add     [rbp+var_4], 1

loc_600BA9:                             ; CODE XREF: judge+7E↑j
                cmp     [rbp+var_4], 0Dh
                jle     short loc_600B80
                mov     eax, 1

loc_600BB4:                             ; CODE XREF: judge+A3↑j
                pop     rbp
                retn
judge           endp
</code></pre><h3 id="动态解决方案">动态解决方案</h3>
<p>动态解决相对来说会更简单些，就是进行动态调试，使代码运行到指定位置，然后查看数据即可，这样配置可能会有些难度，需要更高的运行性能，但是总体操作相对更简单些。</p>
<p>断点断在<code>mov     edi, offset format ; &quot;Please input flag:&quot;</code> 这个指令就好，然后运行下动态调试。断在这个位置，查看下Judge数据就可以得到这个函数：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">judge proc near                         ; CODE XREF: main+80↑p
                                        ; DATA XREF: main+16↑r ...

var_28= qword ptr -28h
var_20= byte ptr -20h
var_1F= byte ptr -1Fh
var_1E= byte ptr -1Eh
var_1D= byte ptr -1Dh
var_1C= byte ptr -1Ch
var_1B= byte ptr -1Bh
var_1A= byte ptr -1Ah
var_19= byte ptr -19h
var_18= byte ptr -18h
var_17= byte ptr -17h
var_16= byte ptr -16h
var_15= byte ptr -15h
var_14= byte ptr -14h
var_13= byte ptr -13h
var_4= dword ptr -4

push    rbp
mov     rbp, rsp
mov     [rbp+var_28], rdi
mov     [rbp+var_20], 66h ; &#39;f&#39;
mov     [rbp+var_1F], 6Dh ; &#39;m&#39;
mov     [rbp+var_1E], 63h ; &#39;c&#39;
mov     [rbp+var_1D], 64h ; &#39;d&#39;
mov     [rbp+var_1C], 7Fh
mov     [rbp+var_1B], 6Bh ; &#39;k&#39;
mov     [rbp+var_1A], 37h ; &#39;7&#39;
mov     [rbp+var_19], 64h ; &#39;d&#39;
mov     [rbp+var_18], 3Bh ; &#39;;&#39;
mov     [rbp+var_17], 56h ; &#39;V&#39;
mov     [rbp+var_16], 60h ; &#39;`&#39;
mov     [rbp+var_15], 3Bh ; &#39;;&#39;
mov     [rbp+var_14], 6Eh ; &#39;n&#39;
mov     [rbp+var_13], 70h ; &#39;p&#39;
mov     [rbp+var_4], 0
jmp     short loc_600B71

loc_600B49:                             ; CODE XREF: judge+75↓j
mov     eax, [rbp+var_4]
movsxd  rdx, eax
mov     rax, [rbp+var_28]
add     rax, rdx
mov     edx, [rbp+var_4]
movsxd  rcx, edx
mov     rdx, [rbp+var_28]
add     rdx, rcx
movzx   edx, byte ptr [rdx]
mov     ecx, [rbp+var_4]
xor     edx, ecx
mov     [rax], dl
add     [rbp+var_4], 1

loc_600B71:                             ; CODE XREF: judge+47↑j
cmp     [rbp+var_4], 0Dh
jle     short loc_600B49
mov     [rbp+var_4], 0
jmp     short loc_600BA9

loc_600B80:                             ; CODE XREF: judge+AD↓j
mov     eax, [rbp+var_4]
movsxd  rdx, eax
mov     rax, [rbp+var_28]
add     rax, rdx
movzx   edx, byte ptr [rax]
mov     eax, [rbp+var_4]
cdqe
movzx   eax, [rbp+rax+var_20]
cmp     dl, al
jz      short loc_600BA5
mov     eax, 0
jmp     short loc_600BB4

loc_600BA5:                             ; CODE XREF: judge+9C↑j
add     [rbp+var_4], 1

loc_600BA9:                             ; CODE XREF: judge+7E↑j
cmp     [rbp+var_4], 0Dh
jle     short loc_600B80
mov     eax, 1

loc_600BB4:                             ; CODE XREF: judge+A3↑j
pop     rbp
retn
judge endp
</code></pre><h3 id="judge函数分析">judge函数分析</h3>
<p>现在找到了函数，就需要对函数进行分析来发现关键的判断逻辑，来进行关键步骤的推理分析与判断</p>
<p>对函数大致看一下，应该就是两个for循环了，第一个for循环是对参数进行异或操作，而第二个for循环是对局部变量进行操作。</p>
<p>一段一段地分析吧</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">                mov     [rbp+var_4], 0
                jmp     short loc_600B71

loc_600B49:                             ; CODE XREF: judge+75↓j
                mov     eax, [rbp+var_4]
                movsxd  rdx, eax
                mov     rax, [rbp+var_28]
                add     rax, rdx
                mov     edx, [rbp+var_4]
                movsxd  rcx, edx
                mov     rdx, [rbp+var_28]
                add     rdx, rcx
                movzx   edx, byte ptr [rdx]
                mov     ecx, [rbp+var_4]
                xor     edx, ecx
                mov     [rax], dl
                add     [rbp+var_4], 1

loc_600B71:                             ; CODE XREF: judge+47↑j
                cmp     [rbp+var_4], 0Dh
                jle     short loc_600B49
</code></pre><p>首先对于这段代码，要知道的一些信息：</p>
<ul>
<li><code>[rbp+var_4]</code> : i</li>
<li><code>[rbp+var_28]</code> : rdi &ndash;&gt; arg</li>
</ul>
<p>所以根据这些信息，可以对这段汇编代码进行还原</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0xD</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">*</span>(arg<span style="color:#f92672">+</span>i) <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(arg<span style="color:#f92672">+</span>i)<span style="color:#f92672">^</span>i;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>接着看下面一个循环语句：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">                mov     [rbp+var_4], 0
                jmp     short loc_600BA9

loc_600B80:                             ; CODE XREF: judge+AD↓j
                mov     eax, [rbp+var_4]
                movsxd  rdx, eax
                mov     rax, [rbp+var_28]
                add     rax, rdx
                movzx   edx, byte ptr [rax]
                mov     eax, [rbp+var_4]
                cdqe
                movzx   eax, [rbp+rax+var_20]
                cmp     dl, al
                jz      short loc_600BA5
                mov     eax, 0
                jmp     short loc_600BB4

loc_600BA5:                             ; CODE XREF: judge+9C↑j
                add     [rbp+var_4], 1

loc_600BA9:                             ; CODE XREF: judge+7E↑j
                cmp     [rbp+var_4], 0Dh
                jle     short loc_600B80
</code></pre><p>这段代码应该就是核心判断的逻辑咯，需要知道点信息来进行审计：</p>
<ul>
<li><code>[rbp+var_4]</code> : i</li>
<li><code>[rbp+var_28]</code> : rdi &ndash;&gt; arg</li>
<li><code>[rbp+var_20]</code> : <code>str[0xD]</code></li>
</ul>
<p>根据这些信息进行代码还原，非常简单</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0xD</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(<span style="color:#f92672">*</span>(arg<span style="color:#f92672">+</span>i) <span style="color:#f92672">!=</span> str[i]) {
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>这个函数的核心逻辑代码已经有了，现在对这个函数的代码进行整合就能得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">judge</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>arg) {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> str[<span style="color:#ae81ff">0xD</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;f&#39;</span>;
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;m&#39;</span>;
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;c&#39;</span>;
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;d&#39;</span>;
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7F</span>;
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;k&#39;</span>;
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;7&#39;</span>;
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;d&#39;</span>;
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;;&#39;</span>;
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;V&#39;</span>;
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;`&#39;</span>;
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;;&#39;</span>;
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;n&#39;</span>;
</span></span><span style="display:flex;"><span>	str[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;p&#39;</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0xD</span>; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>		arg[i] <span style="color:#f92672">=</span> arg[i]<span style="color:#f92672">^</span>i;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(arg[i] <span style="color:#f92672">!=</span> str[i]) {
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="求解-1">求解</h3>
<p>现在Judge函数算是分析完成了，可以根据函数进行求解了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">char</span> data[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">char</span> temp[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">char</span> flag[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">memcpy</span>(data, <span style="color:#e6db74">&#34;fmcd&#34;</span>, <span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>      data[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">127</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">memcpy</span>(temp, <span style="color:#e6db74">&#34;k7d;V`;np&#34;</span>, <span style="color:#ae81ff">9</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">strcat</span>(data,temp);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">14</span>; i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>          flag[i] <span style="color:#f92672">=</span> data[i] <span style="color:#f92672">^</span> i;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, flag);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>编译代码，并执行得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{n1c3_j0b}k7d;V`;npfmcdk7d;V`;npf
</span></span></code></pre></div><p>flag就是前半部分，即<code>flag{n1c3_j0b}</code></p>
<p>这道题目也是可以使用IDA pro的Hex-Rays插件进行F5反编译的，和自己分析的结果基本上是一致的。本菜狗也只是想要提高一下自己的汇编水准，进行了相应的练习。因此并没有使用Hex-Rays插件进行反编译分析，而是直接查看汇编来进行阅读分析。</p>
]]></content>
        </item>
        
        <item>
            <title>看穿你的逻辑 理解你表达的真谛</title>
            <link>/posts/logic_re/</link>
            <pubDate>Sat, 26 Feb 2022 11:36:23 +0800</pubDate>
            
            <guid>/posts/logic_re/</guid>
            <description>逻辑语句逆向分析 总结 if分支 if Debug
0x00411a30 cmp dword [var_ch], 0x41 0x00411a34 jne 0x411a47 0x00411a36 mov eax, dword [var_ch] 0x00411a39 push eax 0x00411a3a push str.This_is_current_alpha:_c 0x00411a3f call fcn.004110d7 0x00411a44 add esp, 8 0x00411a47 mov esi, esp Release
0x004010a1 cmp dword [var_8h], 0x41 0x004010a5 jne 0x4010b6 0x004010a7 push 0x41 0x004010a9 push str.This_is_current_alpha:_c 0x004010ae call fcn.00401020 0x004010b3 add esp, 8 0x004010b6 push str.pause if_else Debug
0x00411a30 cmp dword [var_ch], 0x41 0x00411a34 jne 0x411a49 0x00411a36 mov eax, dword [var_ch] 0x00411a39 push eax 0x00411a3a push str.</description>
            <content type="html"><![CDATA[<h2 id="逻辑语句逆向分析-总结">逻辑语句逆向分析 总结</h2>
<h3 id="if分支">if分支</h3>
<h4 id="if">if</h4>
<p>Debug</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x00411a30      cmp     dword [var_ch], 0x41
0x00411a34      jne     0x411a47
0x00411a36      mov  eax, dword [var_ch]
0x00411a39      push  eax 
0x00411a3a      push  str.This_is_current_alpha:_c
0x00411a3f      call    fcn.004110d7
0x00411a44      add  esp, 8
0x00411a47      mov  esi, esp
</code></pre><p>Release</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x004010a1      cmp     dword [var_8h], 0x41
0x004010a5      jne     0x4010b6
0x004010a7      push    0x41
0x004010a9      push    str.This_is_current_alpha:_c
0x004010ae      call    fcn.00401020
0x004010b3      add     esp, 8
0x004010b6      push    str.pause 
</code></pre><h4 id="if_else">if_else</h4>
<p>Debug</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x00411a30      cmp     dword [var_ch], 0x41
0x00411a34      jne     0x411a49
0x00411a36      mov     eax, dword [var_ch]
0x00411a39      push    eax 
0x00411a3a      push    str.This_is_current_alpha:_c
0x00411a3f      call    fcn.004110d7
0x00411a44      add     esp, 8
0x00411a47      jmp     0x411a56
0x00411a49      push    str.error 
0x00411a4e      call    fcn.004110d7
0x00411a53      add     esp, 4
0x00411a56      mov     esi, esp
</code></pre><p>Release</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x004010a1      cmp     dword [var_8h], 0x41
0x004010a5      jne     0x4010b8
0x004010a7      push    0x41
0x004010a9      push    str.This_is_current_alpha:_c
0x004010ae      call    fcn.00401020
0x004010b3      add     esp, 8
0x004010b6      jmp     0x4010c5
0x004010b8      push    str.error
0x004010bd      call    fcn.00401020
0x004010c2      add     esp, 4
0x004010c5      push    str.pause
</code></pre><h4 id="if_else-if_else-3语句">if_else if_else 3语句</h4>
<p>Debug</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x00411a30      cmp     dword [var_ch], 0x41
0x00411a34      jne     0x411a49
0x00411a36      mov     eax, dword [var_ch]
0x00411a39      push    eax
0x00411a3a      push    str.This_is_current_alpha:_c
0x00411a3f      call    fcn.004110d7
0x00411a44      add     esp, 8
0x00411a47      jmp     0x411a6f
0x00411a49      cmp     dword [var_ch], 0x42
0x00411a4d      jne     0x411a62
0x00411a4f      mov     eax, dword [var_ch]
0x00411a52      push    eax 
0x00411a53      push    str.This_is_error_alpha:_c
0x00411a58      call    fcn.004110d7
0x00411a5d      add     esp, 8
0x00411a60      jmp     0x411a6f
0x00411a62      push    str.error
0x00411a67      call    fcn.004110d7
0x00411a6c      add     esp, 4
0x00411a6f      mov     esi, esp
</code></pre><p>Release</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x004010a4      cmp     eax, 0x41
0x004010a7      jne     0x4010b9
0x004010a9      push    eax
0x004010aa      push    str.This_is_current_alpha:_c
0x004010af      call    fcn.00401020
0x004010b4      add     esp, 8
0x004010b7      jmp     0x4010db
0x004010b9      cmp     eax, 0x42
0x004010bc      jne     0x4010ce
0x004010be      push    eax
0x004010bf      push    str.This_is_error_alpha:_c
0x004010c4      call    fcn.00401020
0x004010c9      add     esp, 8
0x004010cc      jmp     0x4010db
0x004010ce      push    str.error
0x004010d3      call    fcn.00401020
0x004010d8      add     esp, 4
0x004010db      push    str.pause
</code></pre><h4 id="if_else-if_else-6语句">if_else if_else 6语句</h4>
<p>Debug</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x00411a30      cmp     dword [var_ch], 0x41
0x00411a34      jne     0x411a49
0x00411a36      mov     eax, dword [var_ch]
0x00411a39      push    eax
0x00411a3a      push    str.This_is_current_alpha:_c
0x00411a3f      call    fcn.004110d7
0x00411a44      add     esp, 8
0x00411a47      jmp     0x411aba
0x00411a49      cmp     dword [var_ch], 0x42
0x00411a4d      jne     0x411a62
0x00411a4f      mov     eax, dword [var_ch]
0x00411a52      push    eax
0x00411a53      push    str.This_is_error_alpha:_c
0x00411a58      call    fcn.004110d7
0x00411a5d      add     esp, 8
0x00411a60      jmp     0x411aba
0x00411a62      cmp     dword [var_ch], 0x43
0x00411a66      jne     0x411a7b
0x00411a68      mov     eax, dword [var_ch]
0x00411a6b      push    eax 
0x00411a6c      push    str.This_is_other_alpha:_c
0x00411a71      call    fcn.004110d7
0x00411a76      add     esp, 8
0x00411a79      jmp     0x411aba
0x00411a7b      cmp     dword [var_ch], 0x44
0x00411a7f      jne     0x411a94
0x00411a81      mov     eax, dword [var_ch]
0x00411a84      push    eax
0x00411a85      push    str.This_is_specify_alpha:_c 
0x00411a8a      call    fcn.004110d7
0x00411a8f      add     esp, 8
0x00411a92      jmp     0x411aba
0x00411a94      cmp     dword [var_ch], 0x45
0x00411a98      jne     0x411aad
0x00411a9a      mov     eax, dword [var_ch]
0x00411a9d      push    eax   
0x00411a9e      push    str.This_is_different_alpha:_c
0x00411aa3      call    fcn.004110d7
0x00411aa8      add     esp, 8
0x00411aab      jmp     0x411aba
0x00411aad      push    str.error
0x00411ab2      call    fcn.004110d7
0x00411ab7      add     esp, 4
0x00411aba      mov     esi, esp
</code></pre><p>Release</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x004010a4      cmp     eax, 0x41 
0x004010a7      jne     0x4010b9
0x004010a9      push    eax 
0x004010aa      push    str.This_is_current_alpha:_c
0x004010af      call    fcn.00401020
0x004010b4      add     esp, 8
0x004010b7      jmp     0x40111a
0x004010b9      cmp     eax, 0x42
0x004010bc      jne     0x4010ce
0x004010be      push    eax 
0x004010bf      push    str.This_is_error_alpha:_c
0x004010c4      call    fcn.00401020
0x004010c9      add     esp, 8
0x004010cc      jmp     0x40111a
0x004010ce      cmp     eax, 0x43
0x004010d1      jne     0x4010e3
0x004010d3      push    eax
0x004010d4      push    str.This_is_other_alpha:_c
0x004010d9      call    fcn.00401020
0x004010de      add     esp, 8
0x004010e1      jmp     0x40111a
0x004010e3      cmp     eax, 0x44 
0x004010e6      jne     0x4010f8
0x004010e8      push    eax 
0x004010e9      push    str.This_is_specify_alpha:_c
0x004010ee      call    fcn.00401020
0x004010f3      add     esp, 8
0x004010f6      jmp     0x40111a
0x004010f8      cmp     eax, 0x45
0x004010fb      jne     0x40110d
0x004010fd      push    eax 
0x004010fe      push    str.This_is_different_alpha:_c
0x00401103      call    fcn.00401020
0x00401108      add     esp, 8
0x0040110b      jmp     0x40111a
0x0040110d      push    str.error
0x00401112      call    fcn.00401020
0x00401117      add     esp, 4
0x0040111a      push    str.pause
</code></pre><h3 id="switch分支">switch分支</h3>
<p>规律：</p>
<ol>
<li>小于6条分支语句（不包括default），汇编语句不使用跳转表进行优化</li>
<li>大于等于6条分支语句（不包括default），汇编语句使用跳转表进行优化</li>
<li>最小case和最大case差值在255以内使用跳转表优化</li>
<li>最小case和最大case差值在255以外使用判定树优化</li>
</ol>
<h4 id="switch三语句">switch三语句</h4>
<p>Debug</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x00411a39      cmp     dword [var_d4h], 0
0x00411a40      je      0x411a56
0x00411a42      cmp     dword [var_d4h], 1
0x00411a49      je      0x411a65
0x00411a4b      cmp     dword [var_d4h], 2
0x00411a52      je      0x411a74
0x00411a54      jmp     0x411a81
0x00411a56      push  str.input_number_is_0 ; 0x417b34 ; int32_t arg_ch
0x00411a5b      call    fcn.004110d7
0x00411a60      add  esp, 4
0x00411a63      jmp     0x411a81
0x00411a65      push  str.input_number_is_1 ; 0x417b4c ; int32_t arg_ch
0x00411a6a      call    fcn.004110d7
0x00411a6f      add  esp, 4
0x00411a72      jmp     0x411a81
0x00411a74      push  str.input_number_is_2 ; 0x417b64 ; int32_t arg_ch
0x00411a79      call    fcn.004110d7
0x00411a7e      add  esp, 4
0x00411a81      mov  esi, esp
</code></pre><p>Release</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x004010a4      sub     eax, 0
0x004010a7      je      0x4010c1
0x004010a9      sub     eax, 1
0x004010ac      je      0x4010ba
0x004010ae      sub     eax, 1
0x004010b1      jne     0x4010ce
0x004010b3      push    str.input_number_is_2
0x004010b8      jmp     0x4010c6
0x004010ba      push    str.input_number_is_1
0x004010bf      jmp     0x4010c6
0x004010c1      push    str.input_number_is_0
0x004010c6      call    fcn.00401020
0x004010cb      add     esp, 4
0x004010ce      push    str.pause
</code></pre><h4 id="switch六语句">switch六语句</h4>
<h5 id="debug">Debug</h5>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x00411a39      cmp     dword [var_d4h], 5
0x00411a40      ja      case.default.0x411a48
0x00411a42      mov     ecx, dword [var_d4h]
0x00411a48      jmp     dword [ecx*4 + 0x411b0c] ; switch table (6 cases) at 0x411b0c
0x00411a4f      push    str.input_number_is_0
0x00411a54      call    fcn.004110d7
0x00411a59      add     esp, 4
0x00411a5c      jmp     case.default.0x411a48
0x00411a5e      push    str.input_number_is_1
0x00411a63      call    fcn.004110d7
0x00411a68      add     esp, 4
0x00411a6b      jmp     case.default.0x411a48
0x00411a6d      push    str.input_number_is_2
0x00411a72      call    fcn.004110d7
0x00411a77      add     esp, 4
0x00411a7a      jmp     case.default.0x411a48
0x00411a7c      push    str.input_number_is_3
0x00411a81      call    fcn.004110d7
0x00411a86      add     esp, 4
0x00411a89      jmp     case.default.0x411a48
0x00411a8b      push    str.input_number_is_4
0x00411a90      call    fcn.004110d7
0x00411a95      add     esp, 4
0x00411a98      jmp     case.default.0x411a48
0x00411a9a      push    str.input_number_is_5
0x00411a9f      call    fcn.004110d7
0x00411aa4      add     esp, 4
;-- default:                       ; from 0x411a48
0x00411aa7      mov     esi, esp


;switch 跳转表
0x00411b0e      .dword 0x1a5e0041
0x00411b10      .int32 4266590 ; case.0x411a48.1
0x00411b14      .int32 4266605 ; case.0x411a48.2
0x00411b18      .int32 4266620 ; case.0x411a48.3
0x00411b1c      .int32 4266635 ; case.0x411a48.4
0x00411b20      .int32 4266650 ; case.0x411a48.5
</code></pre><p>整十连续</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140011a26      mov     eax, dword [var_d4h]
0x140011a2c      sub     eax, 0x21c ; 540
0x140011a31      mov     dword [var_d4h], eax
0x140011a37      cmp     dword [var_d4h], 0x3c
0x140011a3e      ja      case.0x140011a64.1
0x140011a44      movsxd  rax, dword [var_d4h]
0x140011a4b      lea     rcx, [0x140000000]
0x140011a52      movzx   eax, byte [rcx + rax + 0x11b24]
0x140011a5a      mov     eax, dword [rcx + rax*4 + 0x11b04]
0x140011a61      add     rax, rcx
0x140011a64      jmp     rax 
0x140011a66      lea     rcx, str.input_number_is_540
0x140011a6d      call    fcn.14001119f
0x140011a72      jmp     case.0x140011a64.1
0x140011a74      lea     rcx, str.input_number_is_550
0x140011a7b      call    fcn.14001119f
0x140011a80      jmp     case.0x140011a64.1
0x140011a82      lea     rcx, str.input_number_is_560
0x140011a89      call    fcn.14001119f
0x140011a8e      jmp     case.0x140011a64.1
0x140011a90      lea     rcx, str.input_number_is_570
0x140011a97      call    fcn.14001119f
0x140011a9c      jmp     case.0x140011a64.1
0x140011a9e      lea     rcx, str.input_number_is_580
0x140011aa5      call    fcn.14001119f
0x140011aaa      jmp     case.0x140011a64.1
0x140011aac      lea     rcx, str.input_number_is_590
0x140011ab3      call    fcn.14001119f
0x140011ab8      jmp     case.0x140011a64.1
0x140011aba      lea     rcx, str.input_number_is_600
0x140011ac1      call    fcn.14001119f
0x140011ac6      lea     rcx, str.pause
0x140011acd      call    qword [system]


;分支跳转表
0x140011b04      .int32 72294
0x140011b08      .int32 72308
0x140011b0c      .int32 72322
0x140011b10      .int32 72336
0x140011b14      .int32 72350
0x140011b18      .int32 72364
0x140011b1c      .int32 72378
0x140011b20      .int32 72390


;数据处理表
0x140011b24      .char 0
0x140011b25      .char 7
0x140011b26      .char 7
0x140011b27      .char 7
0x140011b28      .char 7
0x140011b29      .char 7
0x140011b2a      .char 7
0x140011b2b      .char 7
0x140011b2c      .char 7
0x140011b2d      .char 7
0x140011b2e      .char 1
0x140011b2f      .char 7
0x140011b30      .char 7
0x140011b31      .char 7
0x140011b32      .char 7
0x140011b33      .char 7
0x140011b34      .char 7
0x140011b35      .char 7
0x140011b36      .char 7
0x140011b37      .char 7
0x140011b38      .char 2
0x140011b39      .char 7
0x140011b3a      .char 7
0x140011b3b      .char 7
0x140011b3c      .char 7
0x140011b3d      .char 7
0x140011b3e      .char 7
0x140011b3f      .char 7
0x140011b40      .char 7
0x140011b41      .char 7
0x140011b42      .char 3
0x140011b43      .char 7
0x140011b44      .char 7
0x140011b45      .char 7
0x140011b46      .char 7
0x140011b47      .char 7
0x140011b48      .char 7
0x140011b49      .char 7
0x140011b4a      .char 7
0x140011b4b      .char 7
0x140011b4c      .char 4
0x140011b4d      .char 7
0x140011b4e      .char 7
0x140011b4f      .char 7
0x140011b50      .char 7
0x140011b51      .char 7
0x140011b52      .char 7
0x140011b53      .char 7
0x140011b54      .char 7
0x140011b55      .char 7
0x140011b56      .char 5
0x140011b57      .char 7
0x140011b58      .char 7
0x140011b59      .char 7
0x140011b5a      .char 7
0x140011b5b      .char 7
0x140011b5c      .char 7
0x140011b5d      .char 7
0x140011b5e      .char 7
0x140011b5f      .char 7
0x140011b60      .char 6
</code></pre><h5 id="release">Release</h5>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x004010a4      cmp     eax, 5     ; 5
0x004010a7      ja      case.default.0x4010a9
0x004010a9      jmp     dword [eax*4 + 0x401100] ; switch table (6 cases) at 0x401100
0x004010b0      push    str.input_number_is_0 ; 0x40210c
0x004010b5      jmp     0x4010d8
0x004010b7      push    str.input_number_is_1 ; 0x402120
0x004010bc      jmp     0x4010d8
0x004010be      push    str.input_number_is_2 ; 0x402134
0x004010c3      jmp     0x4010d8
0x004010c5      push    str.input_number_is_3 ; 0x402148
0x004010ca      jmp     0x4010d8
0x004010cc      push    str.input_number_is_4 ; 0x40215c
0x004010d1      jmp     0x4010d8
0x004010d3      push    str.input_number_is_5 ; 0x402170
0x004010d8      call    fcn.00401020
0x004010dd      add     esp, 4
;-- default:                       ; from 0x4010a9
0x004010e0      push  str.pause

;switch 跳转表
0x00401100      .int32 4198576 ; case.0x4010a9.0
0x00401104      .int32 4198583 ; case.0x4010a9.1
0x00401108      .int32 4198590 ; case.0x4010a9.2
0x0040110c      .int32 4198597 ; case.0x4010a9.3
0x00401110      .int32 4198604 ; case.0x4010a9.4
0x00401114      .int32 4198611 ; case.0x4010a9.5
</code></pre><p>整十连续</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x1400010f4      mov     eax, dword [var_20h]
0x1400010f8      add     eax, 0xfffffde4
0x1400010fd      cmp     eax, 0x3c
0x140001100      ja      case.0x14000111d.541
0x140001102      lea     rdx, [0x140000000]
0x140001109      cdqe
0x14000110b      movzx   eax, byte [rdx + rax + 0x11a4]
0x140001113      mov     ecx, dword [rdx + rax*4 + 0x1184]
0x14000111a      add     rcx, rdx
0x14000111d      jmp     rcx       ; switch table (61 cases) at 0x140001184
0x14000111f      lea     rcx, str.input_number_is_540 
0x140001126      jmp     0x14000115c
0x140001128      lea     rcx, str.input_number_is_550 
0x14000112f      jmp     0x14000115c
0x140001131      lea     rcx, str.input_number_is_560 
0x140001138      jmp     0x14000115c
0x14000113a      lea     rcx, str.input_number_is_570 
0x140001141      jmp     0x14000115c
0x140001143      lea     rcx, str.input_number_is_580
0x14000114a      jmp     0x14000115c
0x14000114c      lea     rcx, str.input_number_is_590
0x140001153      jmp     0x14000115c
0x140001155      lea     rcx, str.input_number_is_600
0x14000115c      call    fcn.140001020
0x140001161      lea     rcx, str.pause
0x140001168      call    fcn.140013094


;分支跳转表
0x140001184      .int32 4383
0x140001188      .int32 4392
0x14000118c      .int32 4401
0x140001190      .int32 4410
0x140001194      .int32 4419
0x140001198      .int32 4428
0x14000119c      .int32 4437
0x1400011a0      .int32 4449


;数据处理表
0x1400011a4      .char 0
0x1400011a5      .char 7
0x1400011a6      .char 7
0x1400011a7      .char 7
0x1400011a8      .char 7
0x1400011a9      .char 7
0x1400011aa      .char 7
0x1400011ab      .char 7
0x1400011ac      .char 7
0x1400011ad      .char 7
0x1400011ae      .char 1
0x1400011af      .char 7
0x1400011b0      .char 7
0x1400011b1      .char 7
0x1400011b2      .char 7
0x1400011b3      .char 7
0x1400011b4      .char 7
0x1400011b5      .char 7
0x1400011b6      .char 7
0x1400011b7      .char 7
0x1400011b8      .char 2
0x1400011b9      .char 7
0x1400011ba      .char 7
0x1400011bb      .char 7
0x1400011bc      .char 7
0x1400011bd      .char 7
0x1400011be      .char 7
0x1400011bf      .char 7
0x1400011c0      .char 7
0x1400011c1      .char 7
0x1400011c2      .char 3
0x1400011c3      .char 7
0x1400011c4      .char 7
0x1400011c5      .char 7
0x1400011c6      .char 7
0x1400011c7      .char 7
0x1400011c8      .char 7
0x1400011c9      .char 7
0x1400011ca      .char 7
0x1400011cb      .char 7
0x1400011cc      .char 4
0x1400011cd      .char 7
0x1400011ce      .char 7
0x1400011cf      .char 7
0x1400011d0      .char 7
0x1400011d1      .char 7
0x1400011d2      .char 7
0x1400011d3      .char 7
0x1400011d4      .char 7
0x1400011d5      .char 7
0x1400011d6      .char 5
0x1400011d7      .char 7
0x1400011d8      .char 7
0x1400011d9      .char 7
0x1400011da      .char 7
0x1400011db      .char 7
0x1400011dc      .char 7
0x1400011dd      .char 7
0x1400011de      .char 7
0x1400011df      .char 7
0x1400011e0      .char 6
</code></pre><h4 id="switch单不连续">switch单不连续</h4>
<h5 id="debug-1">Debug</h5>
<p>少分支语句</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140011a26      cmp     dword [var_d4h], 1
0x140011a2d      je      0x140011a58
0x140011a2f      cmp     dword [var_d4h], 2
0x140011a36      je      0x140011a66
0x140011a38      cmp     dword [var_d4h], 3
0x140011a3f      je      0x140011a74
0x140011a41      cmp     dword [var_d4h], 4
0x140011a48      je      0x140011a82
0x140011a4a      cmp     dword [var_d4h], 0xc8
0x140011a54      je      0x140011a90
0x140011a56      jmp     0x140011a9c
0x140011a58      lea     rcx, str.input_number_is_1
0x140011a5f      call    fcn.14001119f
0x140011a64      jmp     0x140011a9c
0x140011a66      lea     rcx, str.input_number_is_2
0x140011a6d      call    fcn.14001119f
0x140011a72      jmp     0x140011a9c
0x140011a74      lea     rcx, str.input_number_is_3
0x140011a7b      call    fcn.14001119f
0x140011a80      jmp     0x140011a9c
0x140011a82      lea     rcx, str.input_number_is_4
0x140011a89      call    fcn.14001119f
0x140011a8e      jmp     0x140011a9c
0x140011a90      lea     rcx, str.input_number_is_5
0x140011a97      call    fcn.14001119f
0x140011a9c      lea     rcx, str.pause
</code></pre><p>多分支语句</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">
0x140011a26      cmp     dword [var_d4h], 0xc8
0x140011a30      ja      case.0x140011a56.6
0x140011a36      movsxd  rax, dword [var_d4h]
0x140011a3d      lea     rcx, [0x140000000]
0x140011a44      movzx   eax, byte [rcx + rax + 0x11b14]
0x140011a4c      mov     eax, dword [rcx + rax*4 + 0x11af4]
0x140011a53      add     rax, rcx
0x140011a56      jmp     rax       ; switch table (201 cases) at 0x140011af4
0x140011a58      lea     rcx, str.input_number_is_0
0x140011a5f      call    fcn.14001119f
0x140011a64      jmp     case.0x140011a56.6
0x140011a66      lea     rcx, str.input_number_is_1
0x140011a6d      call    fcn.14001119f
0x140011a72      jmp     case.0x140011a56.6
0x140011a74      lea     rcx, str.input_number_is_2
0x140011a7b      call    fcn.14001119f
0x140011a80      jmp     case.0x140011a56.6
0x140011a82      lea     rcx, str.input_number_is_3
0x140011a89      call    fcn.14001119f
0x140011a8e      jmp     case.0x140011a56.6
0x140011a90      lea     rcx, str.input_number_is_4
0x140011a97      call    fcn.14001119f
0x140011a9c      jmp     case.0x140011a56.6
0x140011a9e      lea     rcx, str.input_number_is_5
0x140011aa5      call    fcn.14001119f
0x140011aaa      jmp     case.0x140011a56.6
0x140011aac      lea     rcx, str.input_number_is_200
0x140011ab3      call    fcn.14001119f
0x140011ab8      lea     rcx, str.pause
0x140011abf      call    qword [system]

; 分支跳转表
0x140011af4      .int32 72280
0x140011af8      .int32 72294
0x140011afc      .int32 72308
0x140011b00      .int32 72322
0x140011b04      .int32 72336
0x140011b08      .int32 72350
0x140011b0c      .int32 72364
0x140011b10      .int32 72376
</code></pre><pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140011a1d      mov     eax, dword [var_4h]
0x140011a20      mov     dword [var_d4h], eax
0x140011a26      mov     eax, dword [var_d4h]
0x140011a2c      sub     eax, 0xa
0x140011a2f      mov     dword [var_d4h], eax
0x140011a35      cmp     dword [var_d4h], 0xbe
0x140011a3f      ja      case.0x140011a65.6
0x140011a45      movsxd  rax, dword [var_d4h]
0x140011a4c      lea     rcx, [0x140000000]
0x140011a53      movzx   eax, byte [rcx + rax + 0x11b24]
0x140011a5b      mov     eax, dword [rcx + rax*4 + 0x11b04]
0x140011a62      add     rax, rcx
0x140011a65      jmp     rax       ; switch table (191 cases) at 0x140011b04
0x140011a67      lea     rcx, str.input_number_is_0 ; 0x14001ad28
0x140011a6e      call    fcn.14001119f
0x140011a73      jmp     case.0x140011a65.6
0x140011a75      lea     rcx, str.input_number_is_1 ; 0x14001ad40
0x140011a7c      call    fcn.14001119f
0x140011a81      jmp     case.0x140011a65.6
0x140011a83      lea     rcx, str.input_number_is_2 ; 0x14001ad58
0x140011a8a      call    fcn.14001119f
0x140011a8f      jmp     case.0x140011a65.6
0x140011a91      lea     rcx, str.input_number_is_3 ; 0x14001ad70
0x140011a98      call    fcn.14001119f
0x140011a9d      jmp     case.0x140011a65.6
0x140011a9f      lea     rcx, str.input_number_is_4 ; 0x14001ad88
0x140011aa6      call    fcn.14001119f
0x140011aab      jmp     case.0x140011a65.6
0x140011aad      lea     rcx, str.input_number_is_5 ; 0x14001ada0
0x140011ab4      call    fcn.14001119f
0x140011ab9      jmp     case.0x140011a65.6
0x140011abb      lea     rcx, str.input_number_is_200 ; 0x14001adb8
0x140011ac2      call    fcn.14001119f
0x140011ac7      lea     rcx, str.pause ; 0x14001add4 ; const char *string
0x140011ace      call    qword [system] ; 0x140021310 ; int system(const char *string)


;跳转分支表
0x140011b04      .int32 72295
0x140011b08      .int32 72309
0x140011b0c      .int32 72323
0x140011b10      .int32 72337
0x140011b14      .int32 72351
0x140011b18      .int32 72365
0x140011b1c      .int32 72379
0x140011b20      .int32 72391
</code></pre><h5 id="release-1">Release</h5>
<p>少分支语句</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140001108      sub     ecx, 1
0x14000110b      je      0x140001148
0x14000110d      sub     ecx, 1
0x140001110      je      0x14000113f
0x140001112      sub     ecx, 1
0x140001115      je      0x140001136
0x140001117      sub     ecx, 1
0x14000111a      je      0x14000112d
0x14000111c      cmp     ecx, 0xc4 ; 196
0x140001122      jne     0x140001154
0x140001124      lea     rcx, str.input_number_is_5
0x14000112b      jmp     0x14000114f
0x14000112d      lea     rcx, str.input_number_is_4
0x140001134      jmp     0x14000114f
0x140001136      lea     rcx, str.input_number_is_3
0x14000113d      jmp     0x14000114f
0x14000113f      lea     rcx, str.input_number_is_2
0x140001146      jmp     0x14000114f
0x140001148      lea     rcx, str.input_number_is_1
0x14000114f      call    fcn.140001020
0x140001154      lea     rcx, str.pause
0x14000115b      call    qword [system]
</code></pre><p>多分支语句</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140001109      cmp     eax, 0xc8 ; 200
0x14000110e      ja      case.0x140001129.6
0x140001110      lea     rdx, [0x140000000]
0x140001117      movzx   eax, byte [rdx + rax + 0x11b0]
0x14000111f      mov     ecx, dword [rdx + rax*4 + 0x1190]
0x140001126      add     rcx, rdx
0x140001129      jmp     rcx       ; switch table (201 cases) at 0x140001190
0x14000112b      lea     rcx, str.input_number_is_0
0x140001132      jmp     0x140001168
0x140001134      lea     rcx, str.input_number_is_1
0x14000113b      jmp     0x140001168
0x14000113d      lea     rcx, str.input_number_is_2
0x140001144      jmp     0x140001168
0x140001146      lea     rcx, str.input_number_is_3
0x14000114d      jmp     0x140001168
0x14000114f      lea     rcx, str.input_number_is_4
0x140001156      jmp     0x140001168
0x140001158      lea     rcx, str.input_number_is_5
0x14000115f      jmp     0x140001168
0x140001161      lea     rcx, str.input_number_is_200
0x140001168      call    fcn.140001020
0x14000116d      lea     rcx, str.pause ; 0x140002300
0x140001174      call    qword [system] ; 0x140002168

; 分支跳转表
0x140001190      .int32 4395
0x140001194      .int32 4404
0x140001198      .int32 4413
0x14000119c      .int32 4422
0x1400011a0      .int32 4431
0x1400011a4      .int32 4440
0x1400011a8      .int32 4449
0x1400011ac      .int32 4461
</code></pre><pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140001104      mov     eax, dword [var_20h]
0x140001108      add     eax, 0xfffffff6
0x14000110b      cmp     eax, 0xbe ; 190
0x140001110      ja      case.0x14000112d.16
0x140001112      lea     rdx, [0x140000000]
0x140001119      cdqe
0x14000111b      movzx   eax, byte [rdx + rax + 0x11b4]
0x140001123      mov     ecx, dword [rdx + rax*4 + 0x1194]
0x14000112a      add     rcx, rdx
0x14000112d      jmp     rcx       ; switch table (191 cases) at 0x140001194
0x14000112f      lea     rcx, str.input_number_is_0 ; 0x140002258
0x140001136      jmp     0x14000116c
0x140001138      lea     rcx, str.input_number_is_1 ; 0x140002270
0x14000113f      jmp     0x14000116c
0x140001141      lea     rcx, str.input_number_is_2 ; 0x140002288
0x140001148      jmp     0x14000116c
0x14000114a      lea     rcx, str.input_number_is_3 ; 0x1400022a0
0x140001151      jmp     0x14000116c
0x140001153      lea     rcx, str.input_number_is_4 ; 0x1400022b8
0x14000115a      jmp     0x14000116c
0x14000115c      lea     rcx, str.input_number_is_5 ; 0x1400022d0
0x140001163      jmp     0x14000116c
0x140001165      lea     rcx, str.input_number_is_200 ; 0x1400022e8
0x14000116c      call    fcn.140001020
;-- default:                       ; from 0x14000112d
0x140001171      lea     rcx, str.pause ; 0x140002300 ; const char *string
0x140001178      call    qword [system] ; 0x140002168 ; int system(const char *string)


;跳转分支表
0x140001194      .int32 4399
0x140001198      .int32 4408
0x14000119c      .int32 4417
0x1400011a0      .int32 4426
0x1400011a4      .int32 4435
0x1400011a8      .int32 4444
0x1400011ac      .int32 4453
0x1400011b0      .int32 4465
</code></pre><h4 id="switch多不连续">switch多不连续</h4>
<h5 id="debug-2">Debug</h5>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140011a1d      mov     eax, dword [var_4h]
0x140011a20      mov     dword [var_d4h], eax
0x140011a26      cmp     dword [var_d4h], 0x71
0x140011a2d      jg      0x140011a5c
0x140011a2f      cmp     dword [var_d4h], 0x71
0x140011a36      je      0x140011aac
0x140011a38      cmp     dword [var_d4h], 0x11
0x140011a3f      je      0x140011ac8
0x140011a45      cmp     dword [var_d4h], 0x22
0x140011a4c      je      0x140011aba
0x140011a4e      cmp     dword [var_d4h], 0x3d
0x140011a55      je      0x140011a90
0x140011a57      jmp     0x140011ae2
0x140011a5c      cmp     dword [var_d4h], 0xc8
0x140011a66      je      0x140011ad6
0x140011a68      cmp     dword [var_d4h], 0x21c
0x140011a72      je      0x140011a82
0x140011a74      cmp     dword [var_d4h], 0x41c
0x140011a7e      je      0x140011a9e
0x140011a80      jmp     0x140011ae2
0x140011a82      lea     rcx, str.input_number_is_540 ; 0x14001ad28
0x140011a89      call    fcn.14001119f
0x140011a8e      jmp     0x140011ae2
0x140011a90      lea     rcx, str.input_number_is_61 ; 0x14001ad48
0x140011a97      call    fcn.14001119f
0x140011a9c      jmp     0x140011ae2
0x140011a9e      lea     rcx, str.input_number_is_1052 ; 0x14001ad60
0x140011aa5      call    fcn.14001119f
0x140011aaa      jmp     0x140011ae2
0x140011aac      lea     rcx, str.input_number_is_113 ; 0x14001ad80
0x140011ab3      call    fcn.14001119f
0x140011ab8      jmp     0x140011ae2
0x140011aba      lea     rcx, str.input_number_is_34 ; 0x14001ada0
0x140011ac1      call    fcn.14001119f
0x140011ac6      jmp     0x140011ae2
0x140011ac8      lea     rcx, str.input_number_is_17 ; 0x14001adb8
0x140011acf      call    fcn.14001119f
0x140011ad4      jmp     0x140011ae2
0x140011ad6      lea     rcx, str.input_number_is_200 ; 0x14001add0
0x140011add      call    fcn.14001119f
0x140011ae2      lea     rcx, str.pause ; 0x14001adec ; const char *string
0x140011ae9      call    qword [system] ; 0x140021310 ; int system(const char *string)
</code></pre><h5 id="release-2">Release</h5>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140001104      mov     eax, dword [var_20h]
0x140001108      cmp     eax, 0x71 ; 113
0x14000110b      jg      0x140001142
0x14000110d      je      0x140001139
0x14000110f      cmp     eax, 0x11 ; 17
0x140001112      je      0x140001130
0x140001114      cmp     eax, 0x22 ; 34
0x140001117      je      0x140001127
0x140001119      cmp     eax, 0x3d ; 61
0x14000111c      jne     0x140001175
0x14000111e      lea     rcx, str.input_number_is_61
0x140001125      jmp     0x140001170
0x140001127      lea     rcx, str.input_number_is_34
0x14000112e      jmp     0x140001170
0x140001130      lea     rcx, str.input_number_is_17
0x140001137      jmp     0x140001170
0x140001139      lea     rcx, str.input_number_is_113
0x140001140      jmp     0x140001170
0x140001142      cmp     eax, 0xc8 ; 200
0x140001147      je      0x140001169
0x140001149      cmp     eax, 0x21c ; 540
0x14000114e      je      0x140001160
0x140001150      cmp     eax, 0x41c ; 1052
0x140001155      jne     0x140001175
0x140001157      lea     rcx, str.input_number_is_1052
0x14000115e      jmp     0x140001170
0x140001160      lea     rcx, str.input_number_is_540
0x140001167      jmp     0x140001170
0x140001169      lea     rcx, str.input_number_is_200
0x140001170      call    fcn.140001020
0x140001175      lea     rcx, str.pause
0x14000117c      call    qword [system]
</code></pre><h4 id="switch无break">switch无break</h4>
<h5 id="debug-3">Debug</h5>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140011a26      mov     eax, dword [var_d4h]
0x140011a2c      dec     eax
0x140011a2e      mov     dword [var_d4h], eax
0x140011a34      cmp     dword [var_d4h], 5
0x140011a3b      ja      case.default.0x140011a55
0x140011a3d      movsxd  rax, dword [var_d4h]
0x140011a44      lea     rcx, [0x140000000]
0x140011a4b      mov     eax, dword [rcx + rax*4 + 0x11adc]
0x140011a52      add     rax, rcx
0x140011a55      jmp     rax       ; switch table (6 cases) at 0x140011adc
0x140011a57      lea     rcx, str.input_number_is_1
0x140011a5e      call    fcn.14001119f
0x140011a63      lea     rcx, str.input_number_is_2
0x140011a6a      call    fcn.14001119f
0x140011a6f      lea     rcx, str.input_number_is_3
0x140011a76      call    fcn.14001119f
0x140011a7b      lea     rcx, str.input_number_is_4
0x140011a82      call    fcn.14001119f
0x140011a87      lea     rcx, str.input_number_is_5
0x140011a8e      call    fcn.14001119f
0x140011a93      lea     rcx, str.input_number_is_6
0x140011a9a      call    fcn.14001119f
0x140011a9f      lea     rcx, str.pause
0x140011aa6      call    qword [system]


;分支跳转表
0x140011adc      .int32 72279
0x140011ae0      .int32 72291
0x140011ae4      .int32 72303
0x140011ae8      .int32 72315
0x140011aec      .int32 72327
0x140011af0      .int32 72339
</code></pre><h5 id="release-3">Release</h5>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x1400010f4      mov     eax, dword [var_20h]
0x1400010f8      dec     eax
0x1400010fa      cmp     eax, 5    ; 5
0x1400010fd      ja      case.default.0x140001112
0x1400010ff      lea     rdx, [0x140000000]
0x140001106      cdqe
0x140001108      mov     ecx, dword [rdx + rax*4 + 0x117c]
0x14000110f      add     rcx, rdx
;-- switch
0x140001112      jmp     rcx       ; switch table (6 cases) at 0x14000117c
;-- case 1:                        ; from 0x140001112
0x140001114      lea     rcx, str.input_number_is_1 ; 0x14005e548 ; int64_t arg1
0x14000111b      call    fcn.140001020
;-- case 2:                        ; from 0x140001112
0x140001120      lea     rcx, str.input_number_is_2 ; 0x14005e560 ; int64_t arg1
0x140001127      call    fcn.140001020
;-- case 3:                        ; from 0x140001112
0x14000112c      lea     rcx, str.input_number_is_3 ; 0x14005e578 ; int64_t arg1
0x140001133      call    fcn.140001020
;-- case 4:                        ; from 0x140001112
0x140001138      lea     rcx, str.input_number_is_4 ; 0x14005e590 ; int64_t arg1
0x14000113f      call    fcn.140001020
;-- case 5:                        ; from 0x140001112
0x140001144      lea     rcx, str.input_number_is_5 ; 0x14005e5a8 ; int64_t arg1
0x14000114b      call    fcn.140001020
;-- case 6:                        ; from 0x140001112
0x140001150      lea     rcx, str.input_number_is_6 ; 0x14005e5c0 ; int64_t arg1
0x140001157      call    fcn.140001020
;-- default:                       ; from 0x140001112
0x14000115c      lea     rcx, str.pause ; 0x14005e5d4 ; int64_t arg1
0x140001163      call    fcn.140013044


;分支跳转表
0x14000117c      .int32 4372
0x140001180      .int32 4384
0x140001184      .int32 4396
0x140001188      .int32 4408
0x14000118c      .int32 4420
0x140001190      .int32 4432
</code></pre><h4 id="switch无default">switch无default</h4>
<h5 id="debug-4">Debug</h5>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140011a26      mov     eax, dword [var_d4h]
0x140011a2c      dec     eax
0x140011a2e      mov     dword [var_d4h], eax
0x140011a34      cmp     dword [var_d4h], 5
0x140011a3b      ja      case.default.0x140011a55
0x140011a3d      movsxd  rax, dword [var_d4h]
0x140011a44      lea     rcx, [0x140000000]
0x140011a4b      mov     eax, dword [rcx + rax*4 + 0x11ae8]
0x140011a52      add     rax, rcx
0x140011a55      jmp     rax       ; switch table (6 cases) at 0x140011ae8
0x140011a57      lea     rcx, str.input_number_is_1
0x140011a5e      call    fcn.14001119f
0x140011a63      jmp     case.default.0x140011a55
0x140011a65      lea     rcx, str.input_number_is_2
0x140011a6c      call    fcn.14001119f
0x140011a71      jmp     case.default.0x140011a55
0x140011a73      lea     rcx, str.input_number_is_3
0x140011a7a      call    fcn.14001119f
0x140011a7f      jmp     case.default.0x140011a55
0x140011a81      lea     rcx, str.input_number_is_4
0x140011a88      call    fcn.14001119f
0x140011a8d      jmp     case.default.0x140011a55
0x140011a8f      lea     rcx, str.input_number_is_5
0x140011a96      call    fcn.14001119f
0x140011a9b      jmp     case.default.0x140011a55
0x140011a9d      lea     rcx, str.input_number_is_6
0x140011aa4      call    fcn.14001119f
0x140011aa9      lea     rcx, str.pause
0x140011ab0      call    qword [system]


;switch 跳转表
0x140011ae8      .int32 72279
0x140011aec      .int32 72293
0x140011af0      .int32 72307
0x140011af4      .int32 72321
0x140011af8      .int32 72335
0x140011afc      .int32 72349
</code></pre><h5 id="release-4">Release</h5>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140001104      mov     eax, dword [var_20h]
0x140001108      dec     eax
0x14000110a      cmp     eax, 5    ; 5
0x14000110d      ja      case.default.0x140001122
0x14000110f      lea     rdx, [0x140000000]
0x140001116      cdqe
0x140001118      mov     ecx, dword [rdx + rax*4 + 0x1180]
0x14000111f      add     rcx, rdx
0x140001122      jmp     rcx       ; switch table (6 cases) at 0x140001180
0x140001124      lea     rcx, str.input_number_is_1
0x14000112b      jmp     0x140001158
0x14000112d      lea     rcx, str.input_number_is_2
0x140001134      jmp     0x140001158
0x140001136      lea     rcx, str.input_number_is_3
0x14000113d      jmp     0x140001158
0x14000113f      lea     rcx, str.input_number_is_4
0x140001146      jmp     0x140001158
0x140001148      lea     rcx, str.input_number_is_5
0x14000114f      jmp     0x140001158
0x140001151      lea     rcx, str.input_number_is_6
0x140001158      call    fcn.140001020
0x14000115d      lea     rcx, str.pause
0x140001164      call    qword [system]


;switch 跳转表
0x140001180      .int32 4388
0x140001184      .int32 4397
0x140001188      .int32 4406
0x14000118c      .int32 4415
0x140001190      .int32 4424
0x140001194      .int32 4433
</code></pre><h3 id="while循环">while循环</h3>
<p>Debug</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x14001187b      mov     qword [var_8h], 0
0x140011883      mov     dword [var_24h], 0
0x14001188a      cmp     qword [var_8h], 0x64
0x14001188f      jae     0x1400118a9
0x140011891      movsxd  rax, dword [var_24h]
0x140011895      add     rax, qword [var_8h]
0x140011899      mov     dword [var_24h], eax
0x14001189c      mov     rax, qword [var_8h]
0x1400118a0      inc     rax
0x1400118a3      mov     qword [var_8h], rax
0x1400118a7      jmp     0x14001188a
0x1400118a9      mov     edx, dword [var_24h]
0x1400118ac      lea     rcx, str.result_____d ; 0x140019c28
0x1400118b3      call    fcn.140011190
</code></pre><p>Release</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140001074      xor     eax, eax
0x140001076      mov     edx, eax
0x140001078      nop     dword [rax + rax]
0x140001080      add     edx, eax
0x140001082      inc     rax
0x140001085      cmp     rax, 0x64 ; 100
0x140001089      jb      0x140001080
0x14000108b      lea     rcx, str.result_____d
0x140001092      call    fcn.140001010
</code></pre><h3 id="for循环">for循环</h3>
<p>Debug</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140011883      mov     dword [var_24h], 0
0x14001188a      mov     qword [var_8h], 0
0x140011892      jmp     0x14001189f
0x140011894      mov     rax, qword [var_8h]
0x140011898      inc     rax
0x14001189b      mov     qword [var_8h], rax
0x14001189f      cmp     qword [var_8h], 0x64
0x1400118a4      jae     0x1400118b3
0x1400118a6      movsxd  rax, dword [var_24h]
0x1400118aa      add     rax, qword [var_8h]
0x1400118ae      mov     dword [var_24h], eax
0x1400118b1      jmp     0x140011894
0x1400118b3      mov     edx, dword [var_24h]
0x1400118b6      lea     rcx, str.result_____d ; 0x140019c28
0x1400118bd      call    fcn.140011190
</code></pre><p>Release</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140001074      xor     ecx, ecx
0x140001076      mov     eax, ecx
0x140001078      nop     dword [rax + rax]
0x140001080      add     ecx, eax
0x140001082      inc     rax
0x140001085      cmp     rax, 0x64 ; 100
0x140001089      jb      0x140001080
0x14000108b      mov     edx, ecx  ; int64_t arg2
0x14000108d      lea     rcx, str.result_____d
0x140001094      call    fcn.140001010
</code></pre><h3 id="do-while循环">do while循环</h3>
<p>Debug</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x14001187b      mov     qword [var_8h], 0
0x140011883      mov     dword [var_24h], 0
0x14001188a      movsxd  rax, dword [var_24h]
0x14001188e      add     rax, qword [var_8h]
0x140011892      mov     dword [var_24h], eax
0x140011895      mov     rax, qword [var_8h]
0x140011899      inc     rax
0x14001189c      mov     qword [var_8h], rax
0x1400118a0      cmp     qword [var_8h], 0x64
0x1400118a5      jb      0x14001188a
0x1400118a7      mov     edx, dword [var_24h]
0x1400118aa      lea     rcx, str.result_____d
0x1400118b1      call    fcn.140011190
</code></pre><p>Release</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140001074      xor     eax, eax
0x140001076      mov     edx, eax
0x140001078      nop     dword [rax + rax]
0x140001080      add     edx, eax
0x140001082      inc     rax
0x140001085      cmp     rax, 0x64 ; 100
0x140001089      jb      0x140001080
0x14000108b      lea     rcx, str.result_____d
0x140001092      call    fcn.140001010
</code></pre><h3 id="分支嵌套">分支嵌套</h3>
<p>Debug</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">x14001197d      cmp     dword [var_4h], 0x41
0x140011981      jl      0x1400119aa
0x140011983      cmp     dword [var_4h], 0x5a
0x140011987      jg      0x1400119aa
0x140011989      cmp     dword [var_4h], 0x58
0x14001198d      jne     0x14001199e
0x14001198f      mov     edx, dword [var_4h]
0x140011992      lea     rcx, str.input_alpha_is:__c
0x140011999      call    fcn.140011195
0x14001199e      lea     rcx, str.You_are_right
0x1400119a5      call    fcn.140011195
0x1400119aa      lea     rcx, str.pause
0x1400119b1      call    qword [system]
</code></pre><p>Release</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140001104      mov ecx, dword [var_20h]
0x140001108      lea eax, [rcx - 0x41]
0x14000110b      cmp eax, 0x19     ; 25
0x14000110e      ja 0x14000112f
0x140001110      cmp ecx, 0x58     ; 88
0x140001113      jne 0x140001123
0x140001115      mov edx, ecx      ; int64_t arg2
0x140001117      lea rcx, str.input_alpha_is:__c
0x14000111e      call fcn.140001020
0x140001123      lea rcx, str.You_are_right
0x14000112a      call fcn.140001020
0x14000112f      lea rcx, str.pause
0x140001136      call qword [system]
</code></pre><h3 id="循环嵌套">循环嵌套</h3>
<p>Debug</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x14001187b      mov     qword [var_8h], 0
0x140011883      mov     qword [var_28h], 0
0x14001188b      mov     dword [var_44h], 0
0x140011892      cmp     qword [var_8h], 0x64
0x140011897      jae     0x1400118c8
0x140011899      mov     rax, qword [var_8h]
0x14001189d      cmp     qword [var_28h], rax
0x1400118a1      jae     0x1400118bb
0x1400118a3      movsxd  rax, dword [var_44h]
0x1400118a7      add     rax, qword [var_28h]
0x1400118ab      mov     dword [var_44h], eax
0x1400118ae      mov     rax, qword [var_28h]
0x1400118b2      inc     rax
0x1400118b5      mov     qword [var_28h], rax
0x1400118b9      jmp     0x140011899
0x1400118bb      mov     rax, qword [var_8h]
0x1400118bf      inc     rax
0x1400118c2      mov     qword [var_8h], rax
0x1400118c6      jmp     0x140011892
0x1400118c8      mov     edx, dword [var_44h]
0x1400118cb      lea     rcx, str.result_____d ; 0x140019c28
0x1400118d2      call    fcn.140011190
</code></pre><p>Release</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x140001074      xor     eax, eax
0x140001076      mov     edx, eax
0x140001078      mov     ecx, eax
0x14000107a      nop     word [rax + rax]
0x140001080      cmp     rax, rcx
0x140001083      jae     0x14000108f
0x140001085      add     edx, eax
0x140001087      inc     rax
0x14000108a      cmp     rax, rcx
0x14000108d      jb      0x140001085
0x14000108f      inc     rcx
0x140001092      cmp     rcx, 0x64 ; 100
0x140001096      jb      0x140001080
0x140001098      lea     rcx, str.result_____d ; 0x140002240 ; int64_t arg1
0x14000109f      call    fcn.140001010
</code></pre>]]></content>
        </item>
        
        <item>
            <title>寻找入口点 回归最开始的美好</title>
            <link>/posts/entry_point/</link>
            <pubDate>Sat, 26 Feb 2022 11:12:10 +0800</pubDate>
            
            <guid>/posts/entry_point/</guid>
            <description>寻找主函数 入口点（主函数）并不确定 &amp;ndash;&amp;gt; 编译器版本
寻找编译器特征 来确定 主函数
VS 2013-2017 特征 2015 Debug x86 jmp mainCRTStartup里面的call 第二个call movzx test jz mov mov push call add push call add call(main) 最后一个call jmp main 2015 Release x86 jmp call__p___argv mov call__p___argc mov call_get_initial_narrow_environment push push push call(main) main 2015 Debug x64 jmp call 第二个call movzx test jz mov mov call xor call call(main) 最后一个call jmp main 2015 Release x64 jmp call__p___argv movrdi, rax call__p___argc movrbx, rax call mov mov mov call(main) main 2017 Debug x86 jmp call 第二个call movzx ecx, al testecx, ecx jz short loc_411E82 mov mov push call add call (main) 最后一个call jmp main 2017 Release x86 jmp call mov call mov call push push push call(main) main 2017 Debug x64 jmp call 第二个call movzx test jz mov mov call call(main) 最后一个call jmp main 2017 Release x64 jmp call__p___argv mov call__p___argc mov call mov mov mov call(main) main 2019 Debug x86 jmp call 第二个call movzx test jz mov mov push call add call(main) 最后一个call jmp main 2019 Release x86 jmp call__p___argv mov call__p___argc push push push call(main) main 2019 Debug x64 jmp call 第二个call movzx test jz mov mov call call(main) 最后一个call jmp main 2019 Release x64 jmp call__p___argv mov call__p___argc push push push call(main) main 2022 Debug x86 jmp call 第二个call movzx test je mov mov push call add call(main) 最后一个call jmp main 2022 Release x86 call 第二个call movzx test je mov mov push call add call(main) 最后一个call main 2022 Debug x64 jmp call 第二个call movzx test je mov mov call call(main) 最后一个call jmp main 2022 Release x64 call__p___argv mov call__p___argc mov mov mov call(main) main MinGW GCC x86 Debug jmp call mov mov mov mov mov mov mov mov mov call(main) main x86 Release jmp</description>
            <content type="html"><![CDATA[<h1 id="寻找主函数">寻找主函数</h1>
<p>入口点（主函数）并不确定 &ndash;&gt; 编译器版本</p>
<p>寻找编译器特征 来确定 主函数</p>
<h2 id="vs-2013-2017-特征">VS 2013-2017 特征</h2>
<h3 id="2015-debug-x86">2015 Debug x86</h3>
<ol>
<li>jmp</li>
<li>mainCRTStartup里面的call</li>
<li>第二个call</li>
<li>movzx
test
jz
mov
mov
push
call
add
push
call
add
call(main)</li>
<li>最后一个call</li>
<li>jmp</li>
<li>main</li>
</ol>
<h3 id="2015-release-x86">2015 Release x86</h3>
<ol>
<li>jmp</li>
<li>call<code>__p___argv</code>
mov
call<code>__p___argc</code>
mov
call<code>_get_initial_narrow_environment</code>
push
push
push
call(main)</li>
<li>main</li>
</ol>
<h3 id="2015-debug-x64">2015 Debug x64</h3>
<ol>
<li>jmp</li>
<li>call</li>
<li>第二个call</li>
<li>movzx
test
jz
mov
mov
call
xor
call
call(main)</li>
<li>最后一个call</li>
<li>jmp</li>
<li>main</li>
</ol>
<h3 id="2015-release-x64">2015 Release x64</h3>
<ol>
<li>jmp</li>
<li>call<code>__p___argv</code>
movrdi, rax
call<code>__p___argc</code>
movrbx, rax
call
mov
mov
mov
call(main)</li>
<li>main</li>
</ol>
<h3 id="2017-debug-x86">2017 Debug x86</h3>
<ol>
<li>jmp</li>
<li>call</li>
<li>第二个call</li>
<li>movzx   ecx, al
testecx, ecx
jz short loc_411E82
mov
mov
push
call
add
call (main)</li>
<li>最后一个call</li>
<li>jmp</li>
<li>main</li>
</ol>
<h3 id="2017-release-x86">2017 Release x86</h3>
<ol>
<li>jmp</li>
<li>call
mov
call
mov
call
push
push
push
call(main)</li>
<li>main</li>
</ol>
<h3 id="2017-debug-x64">2017 Debug x64</h3>
<ol>
<li>jmp</li>
<li>call</li>
<li>第二个call</li>
<li>movzx
test
jz
mov
mov
call
call(main)</li>
<li>最后一个call</li>
<li>jmp</li>
<li>main</li>
</ol>
<h3 id="2017-release-x64">2017 Release x64</h3>
<ol>
<li>jmp</li>
<li>call<code>__p___argv</code>
mov
call<code>__p___argc</code>
mov
call
mov
mov
mov
call(main)</li>
<li>main</li>
</ol>
<h3 id="2019-debug-x86">2019 Debug x86</h3>
<ol>
<li>jmp</li>
<li>call</li>
<li>第二个call</li>
<li>movzx
test
jz
mov
mov
push
call
add
call(main)</li>
<li>最后一个call</li>
<li>jmp</li>
<li>main</li>
</ol>
<h3 id="2019-release-x86">2019 Release x86</h3>
<ol>
<li>jmp</li>
<li>call<code>__p___argv</code>
mov
call<code>__p___argc</code>
push
push
push
call(main)</li>
<li>main</li>
</ol>
<h3 id="2019-debug-x64">2019 Debug x64</h3>
<ol>
<li>jmp</li>
<li>call</li>
<li>第二个call</li>
<li>movzx
test
jz
mov
mov
call
call(main)</li>
<li>最后一个call</li>
<li>jmp</li>
<li>main</li>
</ol>
<h3 id="2019-release-x64">2019 Release x64</h3>
<ol>
<li>jmp</li>
<li>call<code>__p___argv</code>
mov
call<code>__p___argc</code>
push
push
push
call(main)</li>
<li>main</li>
</ol>
<h3 id="2022-debug-x86">2022 Debug x86</h3>
<ol>
<li>jmp</li>
<li>call</li>
<li>第二个call</li>
<li>movzx
test
je
mov
mov
push
call
add
call(main)</li>
<li>最后一个call</li>
<li>jmp</li>
<li>main</li>
</ol>
<h3 id="2022-release-x86">2022 Release x86</h3>
<ol>
<li>call</li>
<li>第二个call</li>
<li>movzx
test
je
mov
mov
push
call
add
call(main)</li>
<li>最后一个call</li>
<li>main</li>
</ol>
<h3 id="2022-debug-x64">2022 Debug x64</h3>
<ol>
<li>jmp</li>
<li>call</li>
<li>第二个call</li>
<li>movzx
test
je
mov
mov
call
call(main)</li>
<li>最后一个call</li>
<li>jmp</li>
<li>main</li>
</ol>
<h3 id="2022-release-x64">2022 Release x64</h3>
<ol>
<li>call<code>__p___argv</code>
mov
call<code>__p___argc</code>
mov
mov
mov
call(main)</li>
<li>main</li>
</ol>
<h2 id="mingw-gcc">MinGW GCC</h2>
<h3 id="x86-debug">x86 Debug</h3>
<ol>
<li>jmp</li>
<li>call
mov
mov
mov
mov
mov
mov
mov
mov
mov
call(main)</li>
<li>main</li>
</ol>
<h3 id="x86-release">x86 Release</h3>
<ol>
<li>
<p>jmp</p>
</li>
<li>
<p>call
mov
mov
mov
mov
mov
mov
mov
mov
mov
call(main)</p>
</li>
<li>
<p>main</p>
</li>
</ol>
<h3 id="x64-debug">x64 Debug</h3>
<ol>
<li>第二个call</li>
<li>call
mov
mov
mov
mov
mov
mov
mov
call(main)</li>
<li>main</li>
</ol>
<h3 id="x64-release">x64 Release</h3>
<ol>
<li>第二个call</li>
<li>call
mov
mov
mov
mov
mov
mov
mov
call(main)</li>
<li>main</li>
</ol>
<h2 id="clang">Clang</h2>
<h3 id="x86-debug-1">x86 Debug</h3>
<ol>
<li>jmp</li>
<li>call
mov
call
mov
call
push
push
push
call</li>
<li>main</li>
</ol>
<h3 id="x86-release-1">x86 Release</h3>
<ol>
<li>jmp</li>
<li>call
mov
call
mov
call
push
push
push
call</li>
<li>main</li>
</ol>
<h3 id="x64-debug-1">x64 Debug</h3>
<ol>
<li>jmp</li>
<li>call
mov
call
mov
call
mov
mov
mov
call</li>
<li>main</li>
</ol>
<h3 id="x64-release-1">x64 Release</h3>
<ol>
<li>jmp</li>
<li>call
mov
call
mov
call
mov
mov
mov
call</li>
<li>main</li>
</ol>
<h2 id="go-build">Go Build</h2>
<ol>
<li>
<p>jmp</p>
</li>
<li>
<p>jmp</p>
</li>
<li>
<p>call
mov
mov
mov
mov
call
call
call
learax, mainflag</p>
</li>
<li>
<p>dq offset runtime_main</p>
</li>
<li>
<p>lea
call
mov
mov
call
mov
call
cmp
jnz
cmp
jnz
mov
lea
callmain</p>
</li>
<li>
<p>main</p>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>进制笔记</title>
            <link>/posts/base_note/</link>
            <pubDate>Tue, 22 Feb 2022 20:05:38 +0800</pubDate>
            
            <guid>/posts/base_note/</guid>
            <description>进制 进制的概念 进制是什么？
对于任何一种进制—X进制，就表示每一位置上的数运算时都是逢X进一位。
二进制：0、1 八进制：0、1、2、3、4、5、6、7 十进制：0、1、2、3、4、5、6、7、8、9 十六进制：0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F N进制：0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F、N-1 进制的运算 进制转换
十六进制与二进制转换
0000 0001 0010 0011 0100 0101 0110 0111 1000 1001 1010 1011 1100 1101 1110 1111 0 1 2 3 4 5 6 7 8 9 A B C D E F 二进制到十六进制转换
1 1 1 1 8 4 2 1 8+4+2+1 = 15(F)
原码反码补码 原码： 最高位是符号位，1是负数，0是正数，其他位是原值的绝对值。
反码： 反码通常是用来由原码求补码或者由补码求原码的过渡码。反码跟原码是正数时，一样；负数时，反码就是原码符号位除外，其他位按位取反。
补码： 正数时，补码和原码一样。负数时，补码是反码+1.
移码： 移码是符号位取反的补码
只存在于符号数中，不存在无符号数中
原值 1 0 0 0 0 0 0 1 原码 1 0 0 0 0 0 0 1 反码 1 1 1 1 1 1 1 0 补码 1 1 1 1 1 1 1 1 移码 0 1 1 1 1 1 1 1 逻辑运算 或运算 或：两个数二进制按位进行比对，两个数该位其中有一个或两个为1结果就为1，全部为0结果就是0</description>
            <content type="html"><![CDATA[<h1 id="进制">进制</h1>
<h2 id="进制的概念">进制的概念</h2>
<p>进制是什么？</p>
<p>对于任何一种进制—X进制，就表示每一位置上的数运算时都是逢X进一位。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>二进制：0、1
</span></span><span style="display:flex;"><span>八进制：0、1、2、3、4、5、6、7
</span></span><span style="display:flex;"><span>十进制：0、1、2、3、4、5、6、7、8、9
</span></span><span style="display:flex;"><span>十六进制：0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F
</span></span><span style="display:flex;"><span>N进制：0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F、N-1
</span></span></code></pre></div><h3 id="进制的运算">进制的运算</h3>
<p>进制转换</p>
<p>十六进制与二进制转换</p>
<table>
<thead>
<tr>
<th>0000</th>
<th>0001</th>
<th>0010</th>
<th>0011</th>
<th>0100</th>
<th>0101</th>
<th>0110</th>
<th>0111</th>
<th>1000</th>
<th>1001</th>
<th>1010</th>
<th>1011</th>
<th>1100</th>
<th>1101</th>
<th>1110</th>
<th>1111</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
<td>8</td>
<td>9</td>
<td>A</td>
<td>B</td>
<td>C</td>
<td>D</td>
<td>E</td>
<td>F</td>
</tr>
</tbody>
</table>
<p>二进制到十六进制转换</p>
<table>
<thead>
<tr>
<th>1</th>
<th>1</th>
<th>1</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>8</td>
<td>4</td>
<td>2</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>8+4+2+1 = 15(F)</p>
<h2 id="原码反码补码">原码反码补码</h2>
<h3 id="原码">原码：</h3>
<p>最高位是符号位，1是负数，0是正数，其他位是原值的绝对值。</p>
<h3 id="反码">反码：</h3>
<p>反码通常是用来由原码求补码或者由补码求原码的过渡码。反码跟原码是正数时，一样；负数时，反码就是原码符号位除外，其他位按位取反。</p>
<h3 id="补码">补码：</h3>
<p>正数时，补码和原码一样。负数时，补码是反码+1.</p>
<h3 id="移码">移码：</h3>
<p>移码是符号位取反的补码</p>
<p><em>只存在于符号数中，不存在无符号数中</em></p>
<table>
<thead>
<tr>
<th>原值</th>
<th>1</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>原码</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>反码</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>补码</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>移码</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<h2 id="逻辑运算">逻辑运算</h2>
<h3 id="或运算">或运算</h3>
<p>或：两个数二进制按位进行比对，两个数该位其中有一个或两个为1结果就为1，全部为0结果就是0</p>
<p>汇编语言：OR</p>
<p>C语言：|</p>
<table>
<thead>
<tr>
<th>值1</th>
<th>1</th>
<th>0</th>
<th>1</th>
<th>0</th>
<th>1</th>
<th>0</th>
<th>1</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr>
<td>值2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>结果</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<h3 id="与运算">与运算</h3>
<p>与：两个数二进制按位进行比对，两个数该位都是1结果就是1，否则就是0</p>
<p>汇编语言：AND</p>
<p>C语言：&amp;</p>
<table>
<thead>
<tr>
<th>值1</th>
<th>1</th>
<th>0</th>
<th>1</th>
<th>0</th>
<th>1</th>
<th>0</th>
<th>1</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr>
<td>值2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>结果</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<h3 id="异或运算">异或运算</h3>
<p>异或：两个数二进制按位进行比对，两个数该位相同就为0，不同就为1</p>
<p>汇编语言：XOR</p>
<p>C语言：^</p>
<table>
<thead>
<tr>
<th>值1</th>
<th>1</th>
<th>0</th>
<th>1</th>
<th>0</th>
<th>1</th>
<th>0</th>
<th>1</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr>
<td>值2</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>结果</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
<h3 id="非运算">非运算</h3>
<p>非：两个数二进制按位进行比对，按位取反，！1=0；！0=1；</p>
<p>汇编语言：NOT</p>
<p>C语言：！</p>
<table>
<thead>
<tr>
<th>值1</th>
<th>1</th>
<th>0</th>
<th>1</th>
<th>0</th>
<th>1</th>
<th>0</th>
<th>1</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr>
<td>结果</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
<h3 id="左移运算">左移运算</h3>
<p>左移：右侧填零，二进制数据向左移动N位，使用符号&laquo;代表，例如：</p>
<p>00010000 &laquo; 1 = 00100000</p>
<table>
<thead>
<tr>
<th>原值</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>1</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr>
<td>结果</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
<h3 id="右移运算">右移运算</h3>
<p>右移：左侧填零，二进制数据向右移动N位，使用符号&raquo;代表，例如：</p>
<p>00100000 &raquo; 1 = 00010000</p>
<table>
<thead>
<tr>
<th>原值</th>
<th>0</th>
<th>0</th>
<th>1</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr>
<td>结果</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>
]]></content>
        </item>
        
        <item>
            <title>MFC基础 笔记</title>
            <link>/posts/mfc_basic/</link>
            <pubDate>Tue, 22 Feb 2022 18:30:22 +0800</pubDate>
            
            <guid>/posts/mfc_basic/</guid>
            <description>MFC 默认UNICODE编码
CTIME类 获取时间的类对象，可以通过类方法获取时间
使用方法
CTime m_Time = CTime::GetCurrentTime(); int nYear = m_Time.GetYear(); int nMonth = m_Time.GetMonth(); int nDay = m_Time.GetDay(); int nHour = m_Time.GetHour(); int nMinute = m_Time.GetMinute(); int nSecond = m_Time.GetSecond(); MFC三种开发模式 SDK &amp;ndash;&amp;gt; Win32 MFC &amp;ndash;&amp;gt; MFC 托管 &amp;ndash;&amp;gt; CLR 字符串 ASCII char CHAR UNICODE wchar_t WCHAR T TCHAR
CString类 定义与初始化
CString str(L&amp;#34;大大大&amp;#34;); CString str1; str1 = L&amp;#34;小小小&amp;#34;; CString str2 = str1; CString str3 = L&amp;#39;A&amp;#39;; CString str4(L&amp;#34;A&amp;#34;,66); 格式化字符串</description>
            <content type="html"><![CDATA[<h1 id="mfc">MFC</h1>
<p>默认UNICODE编码</p>
<h2 id="ctime类">CTIME类</h2>
<p>获取时间的类对象，可以通过类方法获取时间</p>
<p>使用方法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>CTime m_Time <span style="color:#f92672">=</span> CTime<span style="color:#f92672">::</span>GetCurrentTime();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> nYear <span style="color:#f92672">=</span> m_Time.GetYear();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> nMonth <span style="color:#f92672">=</span> m_Time.GetMonth();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> nDay <span style="color:#f92672">=</span> m_Time.GetDay();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> nHour <span style="color:#f92672">=</span> m_Time.GetHour();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> nMinute <span style="color:#f92672">=</span> m_Time.GetMinute();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> nSecond <span style="color:#f92672">=</span> m_Time.GetSecond();
</span></span></code></pre></div><h2 id="mfc三种开发模式">MFC三种开发模式</h2>
<ol>
<li>SDK &ndash;&gt; Win32</li>
<li>MFC &ndash;&gt; MFC</li>
<li>托管 &ndash;&gt; CLR</li>
</ol>
<h2 id="字符串">字符串</h2>
<p>ASCII <code>char CHAR</code>
UNICODE <code>wchar_t WCHAR</code>
T <code>TCHAR</code></p>
<h3 id="cstring类">CString类</h3>
<p>定义与初始化</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>CString <span style="color:#a6e22e">str</span>(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;大大大&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>CString str1;
</span></span><span style="display:flex;"><span>str1 <span style="color:#f92672">=</span> <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;小小小&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>CString str2 <span style="color:#f92672">=</span> str1;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>CString str3 <span style="color:#f92672">=</span> <span style="color:#e6db74">L</span><span style="color:#e6db74">&#39;A&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>CString <span style="color:#a6e22e">str4</span>(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;A&#34;</span>,<span style="color:#ae81ff">66</span>);
</span></span></code></pre></div><p>格式化字符串</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>CString str;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> nFlag <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> strz[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello World!&#34;</span>;
</span></span><span style="display:flex;"><span>str.Format(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;char = %S int = %d&#34;</span>, strz, nFlag);
</span></span></code></pre></div><p>字符串长度获取</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> str.GetLength();
</span></span></code></pre></div><p>判断字符串为空</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> flag <span style="color:#f92672">=</span> str.IsEmpty();
</span></span></code></pre></div><p>字符串拼接</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>CString <span style="color:#a6e22e">A</span>(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;A&#34;</span>);
</span></span><span style="display:flex;"><span>CString <span style="color:#a6e22e">B</span>(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;B&#34;</span>);
</span></span><span style="display:flex;"><span>A <span style="color:#f92672">=</span> A <span style="color:#f92672">+</span> B;
</span></span></code></pre></div><p>切片操作</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>CString <span style="color:#a6e22e">A</span>(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;ABCDEFGH&#34;</span>);
</span></span><span style="display:flex;"><span>CString B <span style="color:#f92672">=</span> A.Left(<span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>CString C <span style="color:#f92672">=</span> A.Mid(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>CString D <span style="color:#f92672">=</span> A.Right(<span style="color:#ae81ff">2</span>);
</span></span></code></pre></div><p>删除操作</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>CString <span style="color:#a6e22e">A</span>(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;ABCDEFGH&#34;</span>);
</span></span><span style="display:flex;"><span>A.Remove(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;A&#34;</span>);
</span></span></code></pre></div><p>获取字符串</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>CString <span style="color:#a6e22e">A</span>(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;ABCDEFGH&#34;</span>);
</span></span><span style="display:flex;"><span>LPTSTR TSTR <span style="color:#f92672">=</span> A.GetBuffer();
</span></span></code></pre></div><h2 id="windows消息基础">Windows消息基础</h2>
<p>消息的来源</p>
<ul>
<li>由操作系统产生</li>
<li>用户触发事件转换</li>
<li>由另一个消息产生</li>
</ul>
<p>消息的定义</p>
<table>
<thead>
<tr>
<th>前缀</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>WM</td>
<td>普通窗口</td>
</tr>
<tr>
<td>BM</td>
<td>按钮</td>
</tr>
<tr>
<td>CB</td>
<td>组合框</td>
</tr>
<tr>
<td>CDM</td>
<td>通用对话框</td>
</tr>
<tr>
<td>DBT</td>
<td>设备信息</td>
</tr>
<tr>
<td>DL</td>
<td>下拉列表</td>
</tr>
<tr>
<td>EM</td>
<td>编辑框</td>
</tr>
<tr>
<td>HKM</td>
<td>热键</td>
</tr>
<tr>
<td>IPM</td>
<td>IP控件</td>
</tr>
<tr>
<td>LB</td>
<td>列表框</td>
</tr>
<tr>
<td>LVM</td>
<td>列表视图</td>
</tr>
<tr>
<td>MCM</td>
<td>日历控件</td>
</tr>
<tr>
<td>PBM</td>
<td>进度条</td>
</tr>
<tr>
<td>PSM</td>
<td>属性</td>
</tr>
<tr>
<td>RB</td>
<td>伸缩条</td>
</tr>
<tr>
<td>SB</td>
<td>状态栏</td>
</tr>
<tr>
<td>STM</td>
<td>静态栏</td>
</tr>
<tr>
<td>TB</td>
<td>工具条</td>
</tr>
<tr>
<td>TBM</td>
<td>跟踪条</td>
</tr>
<tr>
<td>TCM</td>
<td>标签控件</td>
</tr>
<tr>
<td>TVM</td>
<td>树视图</td>
</tr>
<tr>
<td>UDM</td>
<td>微调按钮控件</td>
</tr>
</tbody>
</table>
<p>MSG结构体</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> tagMSG{
</span></span><span style="display:flex;"><span>    HWND hwnd;
</span></span><span style="display:flex;"><span>    UINT message;
</span></span><span style="display:flex;"><span>    WPARAM wParam;
</span></span><span style="display:flex;"><span>    LPARAM lParam;
</span></span><span style="display:flex;"><span>    DWORD time;
</span></span><span style="display:flex;"><span>    POINT pt;
</span></span><span style="display:flex;"><span><span style="color:#75715e">#ifdef _MAC
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	DWORD lPrivate;
</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>} 	MSG, <span style="color:#f92672">*</span>PMSG, NEAR <span style="color:#f92672">*</span>NPMSG, FAR <span style="color:#f92672">*</span>LPMSG;
</span></span></code></pre></div><h3 id="预定义消息">预定义消息</h3>
<h4 id="窗口消息">窗口消息</h4>
<p><code>WM_CREATE</code> 创建窗口
<code>WM_PAINT</code> 绘制窗口
<code>WM_DESTROY</code> 销毁窗口
<code>WM_KILLFOCUS</code> 失去焦点
<code>WM_SETFOCUS</code> 获得焦点
<code>WM_MEASUREITEM</code>
<code>WM_DRAWTEM</code></p>
<p>命令消息
<code>WM_COMMAND</code></p>
<h4 id="控件通知消息">控件通知消息</h4>
<p><code>WM_xxxx</code></p>
<ul>
<li><code>WM_PARENTNOTIFY</code></li>
<li><code>WM_CTLCOLOR</code> &hellip;</li>
<li><code>WM_VSCROLL/WM_HSCROLL</code></li>
</ul>
<p>按钮控件
组合框控件
编辑框控件
列表框控件</p>
<p><code>WM_NOTIFY</code>
控件绘制结构体</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> tagDRAWITEMSTRUCT {
</span></span><span style="display:flex;"><span>    UINT        CtlType;
</span></span><span style="display:flex;"><span>    UINT        CtlID;
</span></span><span style="display:flex;"><span>    UINT        itemID;
</span></span><span style="display:flex;"><span>    UINT        itemAction;
</span></span><span style="display:flex;"><span>    UINT        itemState;
</span></span><span style="display:flex;"><span>    HWND        hwndItem;
</span></span><span style="display:flex;"><span>    HDC         hDC;
</span></span><span style="display:flex;"><span>    RECT        rcItem;
</span></span><span style="display:flex;"><span>    ULONG_PTR   itemData;
</span></span><span style="display:flex;"><span>} DRAWITEMSTRUCT, NEAR <span style="color:#f92672">*</span>PDRAWITEMSTRUCT, FAR <span style="color:#f92672">*</span>LPDRAWITEMSTRUCT;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> tagNMHDR
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    HWND      hwndFrom;
</span></span><span style="display:flex;"><span>    UINT_PTR  idFrom;
</span></span><span style="display:flex;"><span>    UINT      code;         <span style="color:#75715e">// NM_ code
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}   NMHDR;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> tagLVKEYDOWN
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    NMHDR hdr;
</span></span><span style="display:flex;"><span>    WORD wVKey;
</span></span><span style="display:flex;"><span>    UINT flags;
</span></span><span style="display:flex;"><span>} NMLVKEYDOWN, <span style="color:#f92672">*</span>LPNMLVKEYDOWN;
</span></span></code></pre></div><h3 id="自定义消息">自定义消息</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define MY_MSG WM_USER+1
</span></span></span></code></pre></div><p>使用方法
<code>SendMessage</code> 同步方式
<code>PostMessage</code> 异步方式</p>
<h2 id="win32sdk">Win32(SDK)</h2>
<ol>
<li>WinMain</li>
<li>MSG结构体</li>
<li>注册窗口</li>
<li>创建窗口</li>
<li>显示窗口</li>
<li>刷新窗口</li>
<li>消息循环</li>
<li>WindowProc</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">// WindowsSDK.cpp : 定义应用程序的入口点。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;framework.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;WindowsSDK.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define MAX_LOADSTRING 100
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 全局变量:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>HINSTANCE hInst;                                <span style="color:#75715e">// 当前实例
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>WCHAR szTitle[MAX_LOADSTRING];                  <span style="color:#75715e">// 标题栏文本
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>WCHAR szWindowClass[MAX_LOADSTRING];            <span style="color:#75715e">// 主窗口类名
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 此代码模块中包含的函数的前向声明:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>ATOM                <span style="color:#a6e22e">MyRegisterClass</span>(HINSTANCE hInstance);
</span></span><span style="display:flex;"><span>BOOL                <span style="color:#a6e22e">InitInstance</span>(HINSTANCE, <span style="color:#66d9ef">int</span>);
</span></span><span style="display:flex;"><span>LRESULT CALLBACK    <span style="color:#a6e22e">WndProc</span>(HWND, UINT, WPARAM, LPARAM);
</span></span><span style="display:flex;"><span>INT_PTR CALLBACK    <span style="color:#a6e22e">About</span>(HWND, UINT, WPARAM, LPARAM);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> APIENTRY <span style="color:#a6e22e">wWinMain</span>(_In_ HINSTANCE hInstance,
</span></span><span style="display:flex;"><span>                     _In_opt_ HINSTANCE hPrevInstance,
</span></span><span style="display:flex;"><span>                     _In_ LPWSTR    lpCmdLine,
</span></span><span style="display:flex;"><span>                     _In_ <span style="color:#66d9ef">int</span>       nCmdShow)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    UNREFERENCED_PARAMETER(hPrevInstance);
</span></span><span style="display:flex;"><span>    UNREFERENCED_PARAMETER(lpCmdLine);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// TODO: 在此处放置代码。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 初始化全局字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
</span></span><span style="display:flex;"><span>    LoadStringW(hInstance, IDC_WINDOWSSDK, szWindowClass, MAX_LOADSTRING);
</span></span><span style="display:flex;"><span>    MyRegisterClass(hInstance);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 执行应用程序初始化:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>InitInstance (hInstance, nCmdShow))
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> FALSE;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    HACCEL hAccelTable <span style="color:#f92672">=</span> LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_WINDOWSSDK));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    MSG msg;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 主消息循环:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">while</span> (GetMessage(<span style="color:#f92672">&amp;</span>msg, <span style="color:#66d9ef">nullptr</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>TranslateAccelerator(msg.hwnd, hAccelTable, <span style="color:#f92672">&amp;</span>msg))
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            TranslateMessage(<span style="color:#f92672">&amp;</span>msg);
</span></span><span style="display:flex;"><span>            DispatchMessage(<span style="color:#f92672">&amp;</span>msg);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (<span style="color:#66d9ef">int</span>) msg.wParam;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//  函数: MyRegisterClass()
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//  目标: 注册窗口类。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>ATOM <span style="color:#a6e22e">MyRegisterClass</span>(HINSTANCE hInstance)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    WNDCLASSEXW wcex;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    wcex.cbSize <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(WNDCLASSEX);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    wcex.style          <span style="color:#f92672">=</span> CS_HREDRAW <span style="color:#f92672">|</span> CS_VREDRAW;
</span></span><span style="display:flex;"><span>    wcex.lpfnWndProc    <span style="color:#f92672">=</span> WndProc;
</span></span><span style="display:flex;"><span>    wcex.cbClsExtra     <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    wcex.cbWndExtra     <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    wcex.hInstance      <span style="color:#f92672">=</span> hInstance;
</span></span><span style="display:flex;"><span>    wcex.hIcon          <span style="color:#f92672">=</span> LoadIcon(hInstance, MAKEINTRESOURCE(IDI_WINDOWSSDK));
</span></span><span style="display:flex;"><span>    wcex.hCursor        <span style="color:#f92672">=</span> LoadCursor(<span style="color:#66d9ef">nullptr</span>, IDC_ARROW);
</span></span><span style="display:flex;"><span>    wcex.hbrBackground  <span style="color:#f92672">=</span> (HBRUSH)(COLOR_WINDOW<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    wcex.lpszMenuName   <span style="color:#f92672">=</span> MAKEINTRESOURCEW(IDC_WINDOWSSDK);
</span></span><span style="display:flex;"><span>    wcex.lpszClassName  <span style="color:#f92672">=</span> szWindowClass;
</span></span><span style="display:flex;"><span>    wcex.hIconSm        <span style="color:#f92672">=</span> LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> RegisterClassExW(<span style="color:#f92672">&amp;</span>wcex);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//   函数: InitInstance(HINSTANCE, int)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//   目标: 保存实例句柄并创建主窗口
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//   注释:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        在此函数中，我们在全局变量中保存实例句柄并
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//        创建和显示主程序窗口。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>BOOL <span style="color:#a6e22e">InitInstance</span>(HINSTANCE hInstance, <span style="color:#66d9ef">int</span> nCmdShow)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>   hInst <span style="color:#f92672">=</span> hInstance; <span style="color:#75715e">// 将实例句柄存储在全局变量中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>   HWND hWnd <span style="color:#f92672">=</span> CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
</span></span><span style="display:flex;"><span>      CW_USEDEFAULT, <span style="color:#ae81ff">0</span>, CW_USEDEFAULT, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">nullptr</span>, <span style="color:#66d9ef">nullptr</span>, hInstance, <span style="color:#66d9ef">nullptr</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>hWnd)
</span></span><span style="display:flex;"><span>   {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> FALSE;
</span></span><span style="display:flex;"><span>   }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   ShowWindow(hWnd, nCmdShow);
</span></span><span style="display:flex;"><span>   UpdateWindow(hWnd);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">return</span> TRUE;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//  目标: 处理主窗口的消息。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//  WM_COMMAND  - 处理应用程序菜单
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//  WM_PAINT    - 绘制主窗口
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//  WM_DESTROY  - 发送退出消息并返回
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>LRESULT CALLBACK <span style="color:#a6e22e">WndProc</span>(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> (message)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> WM_COMMAND:
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> wmId <span style="color:#f92672">=</span> LOWORD(wParam);
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 分析菜单选择:
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">switch</span> (wmId)
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> IDM_ABOUT:
</span></span><span style="display:flex;"><span>                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> IDM_EXIT:
</span></span><span style="display:flex;"><span>                DestroyWindow(hWnd);
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> DefWindowProc(hWnd, message, wParam, lParam);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> WM_PAINT:
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            PAINTSTRUCT ps;
</span></span><span style="display:flex;"><span>            HDC hdc <span style="color:#f92672">=</span> BeginPaint(hWnd, <span style="color:#f92672">&amp;</span>ps);
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// TODO: 在此处添加使用 hdc 的任何绘图代码...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            EndPaint(hWnd, <span style="color:#f92672">&amp;</span>ps);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> WM_DESTROY:
</span></span><span style="display:flex;"><span>        PostQuitMessage(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> DefWindowProc(hWnd, message, wParam, lParam);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// “关于”框的消息处理程序。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>INT_PTR CALLBACK <span style="color:#a6e22e">About</span>(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    UNREFERENCED_PARAMETER(lParam);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> (message)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> WM_INITDIALOG:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> (INT_PTR)TRUE;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> WM_COMMAND:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (LOWORD(wParam) <span style="color:#f92672">==</span> IDOK <span style="color:#f92672">||</span> LOWORD(wParam) <span style="color:#f92672">==</span> IDCANCEL)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            EndDialog(hDlg, LOWORD(wParam));
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> (INT_PTR)TRUE;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (INT_PTR)FALSE;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="键盘消息">键盘消息</h2>
<p>与key有关的</p>
<p>相关代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>BOOL CMFCKeyDlg<span style="color:#f92672">::</span>PreTranslateMessage(MSG<span style="color:#f92672">*</span> pMsg)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// TODO: 在此添加专用代码和/或调用基类
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	SHORT nShift <span style="color:#f92672">=</span> GetKeyState(VK_SHIFT);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">switch</span> (pMsg<span style="color:#f92672">-&gt;</span>message)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> WM_KEYDOWN:
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">switch</span> (pMsg<span style="color:#f92672">-&gt;</span>wParam)
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> VK_F2:
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> (nShift <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>			{
</span></span><span style="display:flex;"><span>				AfxMessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;F2 + shift Message!&#34;</span>);
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>			}
</span></span><span style="display:flex;"><span>			AfxMessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;F2 Message!&#34;</span>);
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> <span style="color:#ae81ff">0x41</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>		{
</span></span><span style="display:flex;"><span>			AfxMessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;A Message!&#34;</span>);
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> VK_ESCAPE:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">case</span> VK_RETURN:
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>			
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> CDialogEx<span style="color:#f92672">::</span>PreTranslateMessage(pMsg);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>虚拟键码</p>
<ul>
<li><code>VK_xxx</code></li>
<li>ASCII码</li>
</ul>
<p>虚拟键码表</p>
<table>
<thead>
<tr>
<th>虚拟键码</th>
<th>对应值</th>
<th>对应键</th>
</tr>
</thead>
<tbody>
<tr>
<td>VK_LBUTTON</td>
<td>1</td>
<td>鼠标左键</td>
</tr>
<tr>
<td>VK_RBUTTON</td>
<td>2</td>
<td>鼠标右键</td>
</tr>
<tr>
<td>VK_CANCEL</td>
<td>3</td>
<td>Cancel</td>
</tr>
<tr>
<td>VK_MBUTTON</td>
<td>4</td>
<td>鼠标中键</td>
</tr>
<tr>
<td>VK_XBUTTON1</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>VK_XBUTTON2</td>
<td>6</td>
<td></td>
</tr>
<tr>
<td>VK_BACK</td>
<td>8</td>
<td>Backspace</td>
</tr>
<tr>
<td>VK_TAB</td>
<td>9</td>
<td>Tab</td>
</tr>
<tr>
<td>VK_CLEAR</td>
<td>12</td>
<td>Clear</td>
</tr>
<tr>
<td>VK_RETURN</td>
<td>13</td>
<td>Enter</td>
</tr>
<tr>
<td>VK_SHIFT</td>
<td>16</td>
<td>Shift</td>
</tr>
<tr>
<td>VK_CONTROL</td>
<td>17</td>
<td>Ctrl</td>
</tr>
<tr>
<td>VK_MENU</td>
<td>18</td>
<td>Alt</td>
</tr>
<tr>
<td>VK_PAUSE</td>
<td>19</td>
<td>Pause</td>
</tr>
<tr>
<td>VK_CAPITAL</td>
<td>20</td>
<td>Caps Lock</td>
</tr>
<tr>
<td>VK_KANA</td>
<td>21</td>
<td></td>
</tr>
<tr>
<td>VK_HANGUL</td>
<td>21</td>
<td></td>
</tr>
<tr>
<td>VK_JUNJA</td>
<td>23</td>
<td></td>
</tr>
<tr>
<td>VK_FINAL</td>
<td>24</td>
<td></td>
</tr>
<tr>
<td>VK_HANJA</td>
<td>25</td>
<td></td>
</tr>
<tr>
<td>VK_KANJI</td>
<td>25*</td>
<td></td>
</tr>
<tr>
<td>VK_ESCAPE</td>
<td>27</td>
<td>Esc</td>
</tr>
<tr>
<td>VK_CONVERT</td>
<td>28</td>
<td></td>
</tr>
<tr>
<td>VK_NONCONVERT</td>
<td>29</td>
<td></td>
</tr>
<tr>
<td>VK_ACCEPT</td>
<td>30</td>
<td></td>
</tr>
<tr>
<td>VK_MODECHANGE</td>
<td>31</td>
<td></td>
</tr>
<tr>
<td>VK_SPACE</td>
<td>32</td>
<td>Space</td>
</tr>
<tr>
<td>VK_PRIOR</td>
<td>33</td>
<td>Page Up</td>
</tr>
<tr>
<td>VK_NEXT</td>
<td>34</td>
<td>Page Down</td>
</tr>
<tr>
<td>VK_END</td>
<td>35</td>
<td>End</td>
</tr>
<tr>
<td>VK_HOME</td>
<td>36</td>
<td>Home</td>
</tr>
<tr>
<td>VK_LEFT</td>
<td>37</td>
<td>Left Arrow</td>
</tr>
<tr>
<td>VK_UP</td>
<td>38</td>
<td>Up Arrow</td>
</tr>
<tr>
<td>VK_RIGHT</td>
<td>39</td>
<td>Right Arrow</td>
</tr>
<tr>
<td>VK_DOWN</td>
<td>40</td>
<td>Down Arrow</td>
</tr>
<tr>
<td>VK_SELECT</td>
<td>41</td>
<td>Select</td>
</tr>
<tr>
<td>VK_PRINT</td>
<td>42</td>
<td>Print</td>
</tr>
<tr>
<td>VK_EXECUTE</td>
<td>43</td>
<td>Execute</td>
</tr>
<tr>
<td>VK_SNAPSHOT</td>
<td>44</td>
<td>Snapshot</td>
</tr>
<tr>
<td>VK_INSERT</td>
<td>45</td>
<td>Insert</td>
</tr>
<tr>
<td>VK_DELETE</td>
<td>46</td>
<td>Delete</td>
</tr>
<tr>
<td>VK_HELP</td>
<td>47</td>
<td>Help</td>
</tr>
<tr>
<td></td>
<td>48</td>
<td>0</td>
</tr>
<tr>
<td></td>
<td>49</td>
<td>1</td>
</tr>
<tr>
<td></td>
<td>50</td>
<td>2</td>
</tr>
<tr>
<td></td>
<td>51</td>
<td>3</td>
</tr>
<tr>
<td></td>
<td>52</td>
<td>4</td>
</tr>
<tr>
<td></td>
<td>53</td>
<td>5</td>
</tr>
<tr>
<td></td>
<td>54</td>
<td>6</td>
</tr>
<tr>
<td></td>
<td>55</td>
<td>7</td>
</tr>
<tr>
<td></td>
<td>56</td>
<td>8</td>
</tr>
<tr>
<td></td>
<td>57</td>
<td>9</td>
</tr>
<tr>
<td></td>
<td>65</td>
<td>A</td>
</tr>
<tr>
<td></td>
<td>66</td>
<td>B</td>
</tr>
<tr>
<td></td>
<td>67</td>
<td>C</td>
</tr>
<tr>
<td></td>
<td>68</td>
<td>D</td>
</tr>
<tr>
<td></td>
<td>69</td>
<td>E</td>
</tr>
<tr>
<td></td>
<td>70</td>
<td>F</td>
</tr>
<tr>
<td></td>
<td>71</td>
<td>G</td>
</tr>
<tr>
<td></td>
<td>72</td>
<td>H</td>
</tr>
<tr>
<td></td>
<td>73</td>
<td>I</td>
</tr>
<tr>
<td></td>
<td>74</td>
<td>J</td>
</tr>
<tr>
<td></td>
<td>75</td>
<td>K</td>
</tr>
<tr>
<td></td>
<td>76</td>
<td>L</td>
</tr>
<tr>
<td></td>
<td>77</td>
<td>M</td>
</tr>
<tr>
<td></td>
<td>78</td>
<td>N</td>
</tr>
<tr>
<td></td>
<td>79</td>
<td>O</td>
</tr>
<tr>
<td></td>
<td>80</td>
<td>P</td>
</tr>
<tr>
<td></td>
<td>81</td>
<td>Q</td>
</tr>
<tr>
<td></td>
<td>82</td>
<td>R</td>
</tr>
<tr>
<td></td>
<td>83</td>
<td>S</td>
</tr>
<tr>
<td></td>
<td>84</td>
<td>T</td>
</tr>
<tr>
<td></td>
<td>85</td>
<td>U</td>
</tr>
<tr>
<td></td>
<td>86</td>
<td>V</td>
</tr>
<tr>
<td></td>
<td>87</td>
<td>W</td>
</tr>
<tr>
<td></td>
<td>88</td>
<td>X</td>
</tr>
<tr>
<td></td>
<td>89</td>
<td>Y</td>
</tr>
<tr>
<td></td>
<td>90</td>
<td>Z</td>
</tr>
<tr>
<td>VK_LWIN</td>
<td>91</td>
<td></td>
</tr>
<tr>
<td>VK_RWIN</td>
<td>92</td>
<td></td>
</tr>
<tr>
<td>VK_APPS</td>
<td>93</td>
<td></td>
</tr>
<tr>
<td>VK_SLEEP</td>
<td>95</td>
<td></td>
</tr>
<tr>
<td>VK_NUMPAD0</td>
<td>96</td>
<td>小键盘 0</td>
</tr>
<tr>
<td>VK_NUMPAD1</td>
<td>97</td>
<td>小键盘 1</td>
</tr>
<tr>
<td>VK_NUMPAD2</td>
<td>98</td>
<td>小键盘 2</td>
</tr>
<tr>
<td>VK_NUMPAD3</td>
<td>99</td>
<td>小键盘 3</td>
</tr>
<tr>
<td>VK_NUMPAD4</td>
<td>100</td>
<td>小键盘 4</td>
</tr>
<tr>
<td>VK_NUMPAD5</td>
<td>101</td>
<td>小键盘 5</td>
</tr>
<tr>
<td>VK_NUMPAD6</td>
<td>102</td>
<td>小键盘 6</td>
</tr>
<tr>
<td>VK_NUMPAD7</td>
<td>103</td>
<td>小键盘 7</td>
</tr>
<tr>
<td>VK_NUMPAD8</td>
<td>104</td>
<td>小键盘 8</td>
</tr>
<tr>
<td>VK_NUMPAD9</td>
<td>105</td>
<td>小键盘 9</td>
</tr>
<tr>
<td>VK_MULTIPLY</td>
<td>106</td>
<td>小键盘 *</td>
</tr>
<tr>
<td>VK_ADD</td>
<td>107</td>
<td>小键盘 +</td>
</tr>
<tr>
<td>VK_SEPARATOR</td>
<td>108</td>
<td>小键盘 Enter</td>
</tr>
<tr>
<td>VK_SUBTRACT</td>
<td>109</td>
<td>小键盘 -</td>
</tr>
<tr>
<td>VK_DECIMAL</td>
<td>110</td>
<td>小键盘 .</td>
</tr>
<tr>
<td>VK_DIVIDE</td>
<td>111</td>
<td>小键盘 /</td>
</tr>
<tr>
<td>VK_F1</td>
<td>112</td>
<td>F1</td>
</tr>
<tr>
<td>VK_F2</td>
<td>113</td>
<td>F2</td>
</tr>
<tr>
<td>VK_F3</td>
<td>114</td>
<td>F3</td>
</tr>
<tr>
<td>VK_F4</td>
<td>115</td>
<td>F4</td>
</tr>
<tr>
<td>VK_F5</td>
<td>116</td>
<td>F5</td>
</tr>
<tr>
<td>VK_F6</td>
<td>117</td>
<td>F6</td>
</tr>
<tr>
<td>VK_F7</td>
<td>118</td>
<td>F7</td>
</tr>
<tr>
<td>VK_F8</td>
<td>119</td>
<td>F8</td>
</tr>
<tr>
<td>VK_F9</td>
<td>120</td>
<td>F9</td>
</tr>
<tr>
<td>VK_F10</td>
<td>121</td>
<td>F10</td>
</tr>
<tr>
<td>VK_F11</td>
<td>122</td>
<td>F11</td>
</tr>
<tr>
<td>VK_F12</td>
<td>123</td>
<td>F12</td>
</tr>
<tr>
<td>VK_F13</td>
<td>124</td>
<td></td>
</tr>
<tr>
<td>VK_F14</td>
<td>125</td>
<td></td>
</tr>
<tr>
<td>VK_F15</td>
<td>126</td>
<td></td>
</tr>
<tr>
<td>VK_F16</td>
<td>127</td>
<td></td>
</tr>
<tr>
<td>VK_F17</td>
<td>128</td>
<td></td>
</tr>
<tr>
<td>VK_F18</td>
<td>129</td>
<td></td>
</tr>
<tr>
<td>VK_F19</td>
<td>130</td>
<td></td>
</tr>
<tr>
<td>VK_F20</td>
<td>131</td>
<td></td>
</tr>
<tr>
<td>VK_F21</td>
<td>132</td>
<td></td>
</tr>
<tr>
<td>VK_F22</td>
<td>133</td>
<td></td>
</tr>
<tr>
<td>VK_F23</td>
<td>134</td>
<td></td>
</tr>
<tr>
<td>VK_F24</td>
<td>135</td>
<td></td>
</tr>
<tr>
<td>VK_NUMLOCK</td>
<td>144</td>
<td>Num Lock</td>
</tr>
<tr>
<td>VK_SCROLL</td>
<td>145</td>
<td>Scroll</td>
</tr>
<tr>
<td>VK_LSHIFT</td>
<td>160</td>
<td></td>
</tr>
<tr>
<td>VK_RSHIFT</td>
<td>161</td>
<td></td>
</tr>
<tr>
<td>VK_LCONTROL</td>
<td>162</td>
<td></td>
</tr>
<tr>
<td>VK_RCONTROL</td>
<td>163</td>
<td></td>
</tr>
<tr>
<td>VK_LMENU</td>
<td>164</td>
<td></td>
</tr>
<tr>
<td>VK_RMENU</td>
<td>165</td>
<td></td>
</tr>
<tr>
<td>VK_BROWSER_BACK</td>
<td>166</td>
<td></td>
</tr>
<tr>
<td>VK_BROWSER_FORWARD</td>
<td>167</td>
<td></td>
</tr>
<tr>
<td>VK_BROWSER_REFRESH</td>
<td>168</td>
<td></td>
</tr>
<tr>
<td>VK_BROWSER_STOP</td>
<td>169</td>
<td></td>
</tr>
<tr>
<td>VK_BROWSER_SEARCH</td>
<td>170</td>
<td></td>
</tr>
<tr>
<td>VK_BROWSER_FAVORITES</td>
<td>171</td>
<td></td>
</tr>
<tr>
<td>VK_BROWSER_HOME</td>
<td>172</td>
<td></td>
</tr>
<tr>
<td>VK_VOLUME_MUTE</td>
<td>173</td>
<td>VolumeMute</td>
</tr>
<tr>
<td>VK_VOLUME_DOWN</td>
<td>174</td>
<td>VolumeDown</td>
</tr>
<tr>
<td>VK_VOLUME_UP</td>
<td>175</td>
<td>VolumeUp</td>
</tr>
<tr>
<td>VK_MEDIA_NEXT_TRACK</td>
<td>176</td>
<td></td>
</tr>
<tr>
<td>VK_MEDIA_PREV_TRACK</td>
<td>177</td>
<td></td>
</tr>
<tr>
<td>VK_MEDIA_STOP</td>
<td>178</td>
<td></td>
</tr>
<tr>
<td>VK_MEDIA_PLAY_PAUSE</td>
<td>179</td>
<td></td>
</tr>
<tr>
<td>VK_LAUNCH_MAIL</td>
<td>180</td>
<td></td>
</tr>
<tr>
<td>VK_LAUNCH_MEDIA_SELECT</td>
<td>181</td>
<td></td>
</tr>
<tr>
<td>VK_LAUNCH_APP1</td>
<td>182</td>
<td></td>
</tr>
<tr>
<td>VK_LAUNCH_APP2</td>
<td>183</td>
<td></td>
</tr>
<tr>
<td>VK_OEM_1</td>
<td>186</td>
<td>; :</td>
</tr>
<tr>
<td>VK_OEM_PLUS</td>
<td>187</td>
<td>= +</td>
</tr>
<tr>
<td>VK_OEM_COMMA</td>
<td>188</td>
<td></td>
</tr>
<tr>
<td>VK_OEM_MINUS</td>
<td>189</td>
<td>- _</td>
</tr>
<tr>
<td>VK_OEM_PERIOD</td>
<td>190</td>
<td></td>
</tr>
<tr>
<td>VK_OEM_2</td>
<td>191</td>
<td>/ ?</td>
</tr>
<tr>
<td>VK_OEM_3</td>
<td>192</td>
<td>` ~</td>
</tr>
<tr>
<td>VK_OEM_4</td>
<td>219</td>
<td>[ {</td>
</tr>
<tr>
<td>VK_OEM_5</td>
<td>220</td>
<td>\ |</td>
</tr>
<tr>
<td>VK_OEM_6</td>
<td>221</td>
<td>] }</td>
</tr>
<tr>
<td>VK_OEM_7</td>
<td>222</td>
<td>&rsquo; &quot;</td>
</tr>
<tr>
<td>VK_OEM_8</td>
<td>223</td>
<td></td>
</tr>
<tr>
<td>VK_OEM_102</td>
<td>226</td>
<td></td>
</tr>
<tr>
<td>VK_PACKET</td>
<td>231</td>
<td></td>
</tr>
<tr>
<td>VK_PROCESSKEY</td>
<td>229</td>
<td></td>
</tr>
<tr>
<td>VK_ATTN</td>
<td>246</td>
<td></td>
</tr>
<tr>
<td>VK_CRSEL</td>
<td>247</td>
<td></td>
</tr>
<tr>
<td>VK_EXSEL</td>
<td>248</td>
<td></td>
</tr>
<tr>
<td>VK_EREOF</td>
<td>249</td>
<td></td>
</tr>
<tr>
<td>VK_PLAY</td>
<td>250</td>
<td></td>
</tr>
<tr>
<td>VK_ZOOM</td>
<td>251</td>
<td></td>
</tr>
<tr>
<td>VK_NONAME</td>
<td>252</td>
<td></td>
</tr>
<tr>
<td>VK_PA1</td>
<td>253</td>
<td></td>
</tr>
<tr>
<td>VK_OEM_CLEAR</td>
<td>254</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="鼠标消息">鼠标消息</h2>
<p>与BUTTON有关
L左键
M中键
R右键</p>
<p>相关代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">switch</span> (pMsg<span style="color:#f92672">-&gt;</span>message)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> WM_LBUTTONDOWN:
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		AfxMessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;客户区鼠标左键点击&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> WM_NCLBUTTONDOWN:
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		AfxMessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;非客户区鼠标左键点击&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> WM_LBUTTONDBLCLK:
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		AfxMessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;客户区鼠标左键双击&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> WM_NCLBUTTONDBLCLK:
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		AfxMessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;非客户区鼠标左键双击&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> WM_LBUTTONUP:
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		AfxMessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;鼠标左键被释放&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	}
</span></span></code></pre></div><h2 id="windows控制台">Windows控制台</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;Windows.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	DWORD dwCount;
</span></span><span style="display:flex;"><span>	HANDLE hStd <span style="color:#f92672">=</span> GetStdHandle(STD_OUTPUT_HANDLE);
</span></span><span style="display:flex;"><span>	SetConsoleTextAttribute(hStd, FOREGROUND_RED <span style="color:#f92672">|</span> FOREGROUND_BLUE <span style="color:#f92672">|</span> BACKGROUND_BLUE);
</span></span><span style="display:flex;"><span>	WriteConsole(hStd, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Hello World!&#34;</span>, wcslen(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Hello World!&#34;</span>), <span style="color:#f92672">&amp;</span>dwCount, NULL);
</span></span><span style="display:flex;"><span>	SetConsoleTitle(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Title&#34;</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="内存申请与释放">内存申请与释放</h2>
<p><code>HeapAlloc</code> 内存申请
<code>HeapFree</code> 内存释放</p>
<p>相关代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>HANDLE hHeap <span style="color:#f92672">=</span> GetProcessHeap();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> str <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)HeapAlloc(hHeap, HEAP_ZERO_MEMORY, <span style="color:#ae81ff">0x100</span>);
</span></span><span style="display:flex;"><span>HeapFree(hHeap, <span style="color:#ae81ff">0</span>, str);
</span></span></code></pre></div><h2 id="文件操作">文件操作</h2>
<h3 id="win32">Win32</h3>
<p>查看官方文档学习</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;Windows.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	HANDLE hFile <span style="color:#f92672">=</span> CreateFile(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;C:</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">15890</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Desktop</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Test.txt&#34;</span>,GENERIC_ALL,NULL,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (INVALID_HANDLE_VALUE <span style="color:#f92672">==</span> hFile)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		MessageBox(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;CreateFile Failed!&#34;</span>, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Error&#34;</span>, MB_OK);
</span></span><span style="display:flex;"><span>		ExitProcess(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>		system(<span style="color:#e6db74">&#34;pause&#34;</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	DWORD dwFileLen <span style="color:#f92672">=</span> GetFileSize(hFile, NULL);
</span></span><span style="display:flex;"><span>	PTCHAR szBuffer;
</span></span><span style="display:flex;"><span>	HANDLE hHeap <span style="color:#f92672">=</span> GetProcessHeap();
</span></span><span style="display:flex;"><span>	szBuffer <span style="color:#f92672">=</span> (PTCHAR)HeapAlloc(hHeap, HEAP_ZERO_MEMORY, dwFileLen);
</span></span><span style="display:flex;"><span>	DWORD dwReadSize;
</span></span><span style="display:flex;"><span>	ReadFile(hFile, szBuffer, dwFileLen,<span style="color:#f92672">&amp;</span>dwReadSize, NULL);
</span></span><span style="display:flex;"><span>	CHAR szWriteBuffer[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello Windows API&#34;</span>;
</span></span><span style="display:flex;"><span>	DWORD dwWriteSize;
</span></span><span style="display:flex;"><span>	WriteFile(hFile, szWriteBuffer,strlen(szWriteBuffer), <span style="color:#f92672">&amp;</span>dwWriteSize, NULL);
</span></span><span style="display:flex;"><span>	HeapFree(hHeap, <span style="color:#ae81ff">0</span>, szBuffer);
</span></span><span style="display:flex;"><span>	CloseHandle(hFile);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="cfile类">CFile类</h3>
<p>官方文档非常详细</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>CFile cFile;
</span></span><span style="display:flex;"><span>cFile.Open(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;C:</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">15890</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Desktop</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Test.txt&#34;</span>, CFile<span style="color:#f92672">::</span>modeReadWrite);
</span></span><span style="display:flex;"><span>DWORD dwFileLen <span style="color:#f92672">=</span> cFile.GetLength();
</span></span><span style="display:flex;"><span>PTCHAR szBuffer;
</span></span><span style="display:flex;"><span>HANDLE hHeap <span style="color:#f92672">=</span> GetProcessHeap();
</span></span><span style="display:flex;"><span>szBuffer <span style="color:#f92672">=</span> (PTCHAR)HeapAlloc(hHeap, HEAP_ZERO_MEMORY, dwFileLen);
</span></span><span style="display:flex;"><span>cFile.Read(szBuffer, dwFileLen);
</span></span><span style="display:flex;"><span>CHAR pbufWrite[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello CFile&#34;</span>;
</span></span><span style="display:flex;"><span>cFile.Write(pbufWrite, strlen(pbufWrite));
</span></span><span style="display:flex;"><span>cFile.Flush();
</span></span></code></pre></div><h2 id="消息框">消息框</h2>
<p><code>MessageBox</code> Win32</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>DWORD ret <span style="color:#f92672">=</span> MessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Hello World!&#34;</span>, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Title&#34;</span>, MB_YESNO);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (ret <span style="color:#f92672">==</span> IDYES)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	MessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Yes&#34;</span>, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Tip&#34;</span>, MB_OK);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span> <span style="color:#a6e22e">if</span>(ret <span style="color:#f92672">==</span> IDNO)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	MessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;No&#34;</span>, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Tip&#34;</span>, MB_OK);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>AfxMessageBox</code> MFC</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>DWORD ret <span style="color:#f92672">=</span> AfxMessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Hello World!&#34;</span>, MB_YESNO);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (ret <span style="color:#f92672">==</span> IDYES)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	AfxMessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Yes&#34;</span>, MB_OK);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span> <span style="color:#a6e22e">if</span> (ret <span style="color:#f92672">==</span> IDNO)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	AfxMessageBox(<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;No&#34;</span>, MB_OK);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="对话框">对话框</h2>
<h3 id="模态对话框">模态对话框</h3>
<p>会占用主对话框</p>
<p>相关代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> CMFCAppModDlg<span style="color:#f92672">::</span>OnBnClickedButton1()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// TODO: 在此添加控件通知处理程序代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	CDialogMod dlg;
</span></span><span style="display:flex;"><span>	dlg.DoModal();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="非模态对话框">非模态对话框</h3>
<p>不会占用主对话框</p>
<p>相关代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> CMFCAppModDlg<span style="color:#f92672">::</span>OnBnClickedButton2()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// TODO: 在此添加控件通知处理程序代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	CDialogModLess<span style="color:#f92672">*</span> m_Dlg <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>m_Dlg)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		m_Dlg <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> CDialogModLess;
</span></span><span style="display:flex;"><span>		m_Dlg<span style="color:#f92672">-&gt;</span>Create(IDD_DIALOG2,<span style="color:#66d9ef">this</span>);
</span></span><span style="display:flex;"><span>		m_Dlg<span style="color:#f92672">-&gt;</span>ShowWindow(SW_SHOW);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="通用对话框-文件选择">通用对话框-文件选择</h3>
<p>相关代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>CFileDialog <span style="color:#a6e22e">m_dlg</span>(TRUE, NULL, NULL, NULL, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;文本文件|*.txt|可执行文件|*.exe|所有文件|*.*||&#34;</span>, <span style="color:#66d9ef">this</span>);
</span></span><span style="display:flex;"><span>m_dlg.DoModal();
</span></span><span style="display:flex;"><span>CString szPath <span style="color:#f92672">=</span> m_dlg.GetPathName();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span>szPath.IsEmpty())
</span></span><span style="display:flex;"><span>	AfxMessageBox(szPath);
</span></span></code></pre></div><h2 id="状态栏">状态栏</h2>
<p>相关代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>m_StatusBar.Create(<span style="color:#66d9ef">this</span>);
</span></span><span style="display:flex;"><span>UINT arr[] <span style="color:#f92672">=</span> { <span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span> };
</span></span><span style="display:flex;"><span>m_StatusBar.SetIndicators(arr, <span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>m_StatusBar.SetPaneInfo(<span style="color:#ae81ff">0</span>, arr[<span style="color:#ae81ff">0</span>], SBPS_NORMAL, <span style="color:#ae81ff">100</span>);
</span></span><span style="display:flex;"><span>m_StatusBar.SetPaneInfo(<span style="color:#ae81ff">1</span>, arr[<span style="color:#ae81ff">1</span>], SBPS_NORMAL, <span style="color:#ae81ff">100</span>);
</span></span><span style="display:flex;"><span>m_StatusBar.SetPaneInfo(<span style="color:#ae81ff">2</span>, arr[<span style="color:#ae81ff">2</span>], SBPS_NORMAL, <span style="color:#ae81ff">100</span>);
</span></span><span style="display:flex;"><span>m_StatusBar.SetPaneText(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Text1&#34;</span>);
</span></span><span style="display:flex;"><span>m_StatusBar.SetPaneText(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Text2&#34;</span>);
</span></span><span style="display:flex;"><span>m_StatusBar.SetPaneText(<span style="color:#ae81ff">2</span>, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Text3&#34;</span>);
</span></span><span style="display:flex;"><span>RepositionBars(AFX_IDW_CONTROLBAR_FIRST, AFX_IDW_CONTROLBAR_LAST, <span style="color:#ae81ff">0</span>);
</span></span></code></pre></div><h2 id="控件">控件</h2>
<p>常用控件</p>
<ul>
<li>单选控件</li>
<li>复选控件</li>
<li>按钮控件</li>
<li>静态文本控件</li>
<li>编辑控件</li>
<li>列表控件</li>
<li>下拉框控件</li>
<li>进度条控件</li>
<li>滑块控件</li>
<li>IP控件</li>
<li>树状控件</li>
<li><strong>tab控件</strong></li>
</ul>
<p>(可参考微软官方文档进行学习)</p>
<h3 id="tab控件">tab控件</h3>
<p>初始化</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>m_Tab.InsertItem(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Text&#34;</span>);
</span></span><span style="display:flex;"><span>m_Tab.InsertItem(<span style="color:#ae81ff">1</span>, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;List&#34;</span>);
</span></span><span style="display:flex;"><span>m_Tab.InsertItem(<span style="color:#ae81ff">2</span>, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Tree&#34;</span>);
</span></span><span style="display:flex;"><span>m_Tab.InsertItem(<span style="color:#ae81ff">3</span>, <span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;Other&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m_dlgText.Create(IDD_DIALOG1, <span style="color:#f92672">&amp;</span>m_Tab);
</span></span><span style="display:flex;"><span>m_dlgList.Create(IDD_DIALOG2, <span style="color:#f92672">&amp;</span>m_Tab);
</span></span><span style="display:flex;"><span>m_dlgTree.Create(IDD_DIALOG3, <span style="color:#f92672">&amp;</span>m_Tab);
</span></span><span style="display:flex;"><span>m_dlgOther.Create(IDD_DIALOG4, <span style="color:#f92672">&amp;</span>m_Tab);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>CRect rs;
</span></span><span style="display:flex;"><span>m_Tab.GetClientRect(rs);
</span></span><span style="display:flex;"><span>rs.top <span style="color:#f92672">+=</span> <span style="color:#ae81ff">20</span>;
</span></span><span style="display:flex;"><span>m_dlgText.MoveWindow(rs);
</span></span><span style="display:flex;"><span>m_dlgList.MoveWindow(rs);
</span></span><span style="display:flex;"><span>m_dlgTree.MoveWindow(rs);
</span></span><span style="display:flex;"><span>m_dlgOther.MoveWindow(rs);
</span></span><span style="display:flex;"><span>m_dlgText.ShowWindow(SW_SHOW);
</span></span></code></pre></div><p>使用</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> nCurSel;
</span></span><span style="display:flex;"><span>nCurSel <span style="color:#f92672">=</span> m_Tab.GetCurSel();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">switch</span> (nCurSel)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	m_dlgText.ShowWindow(SW_SHOW);
</span></span><span style="display:flex;"><span>	m_dlgList.ShowWindow(SW_HIDE);
</span></span><span style="display:flex;"><span>	m_dlgTree.ShowWindow(SW_HIDE);
</span></span><span style="display:flex;"><span>	m_dlgOther.ShowWindow(SW_HIDE);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	m_dlgText.ShowWindow(SW_HIDE);
</span></span><span style="display:flex;"><span>	m_dlgList.ShowWindow(SW_SHOW);
</span></span><span style="display:flex;"><span>	m_dlgTree.ShowWindow(SW_HIDE);
</span></span><span style="display:flex;"><span>	m_dlgOther.ShowWindow(SW_HIDE);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	m_dlgText.ShowWindow(SW_HIDE);
</span></span><span style="display:flex;"><span>	m_dlgList.ShowWindow(SW_HIDE);
</span></span><span style="display:flex;"><span>	m_dlgTree.ShowWindow(SW_SHOW);
</span></span><span style="display:flex;"><span>	m_dlgOther.ShowWindow(SW_HIDE);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	m_dlgText.ShowWindow(SW_HIDE);
</span></span><span style="display:flex;"><span>	m_dlgList.ShowWindow(SW_HIDE);
</span></span><span style="display:flex;"><span>	m_dlgTree.ShowWindow(SW_HIDE);
</span></span><span style="display:flex;"><span>	m_dlgOther.ShowWindow(SW_SHOW);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="热键">热键</h3>
<p>相关代码</p>
<p>注册</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>RegisterHotKey(m_hWnd, HOT_KEY_MESSAGEBOX, MOD_WIN, VK_F2);
</span></span></code></pre></div><p>使用</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> CMFCAppUseDlg<span style="color:#f92672">::</span>OnHotKey(UINT nHotKeyId, UINT nKey1, UINT nKey2)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// TODO: 在此添加消息处理程序代码和/或调用默认值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">switch</span> (nHotKeyId)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">case</span> HOT_KEY_MESSAGEBOX:
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		AfxMessageBox(
</span></span><span style="display:flex;"><span>			<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\u2764\u2721\u262a\u2600\u2602\u2622\u2648\u2649\u264a\u264b\u264c\u264d</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>			<span style="color:#e6db74">L</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\u264e\u264f\u2650\u2651\u2652\u2653\u2690\u2691\u26c4\u2620\u27bc\u2200</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>		);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	CDialogEx<span style="color:#f92672">::</span>OnHotKey(nHotKeyId, nKey1, nKey2);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>CSS3样式 笔记</title>
            <link>/posts/css3-style/</link>
            <pubDate>Mon, 07 Feb 2022 16:17:59 +0800</pubDate>
            
            <guid>/posts/css3-style/</guid>
            <description>CSS3样式 盒子 与盒子模型相关的一些样式属性
圆角 复合属性
div{ width:100px; height:100px; border-radius:2px; /* 四个圆角值均为2px */ border-radius:2px 4px; /* 左上角与右下角为2px，右上角和左下角为4px */ border-radius:2px 4px 3px; /* 左上角为2px，右上角和左下角为4px，右下角为3px */ border-radius:2px 4px 3px 1px; /* 左上角为2px，右上角为4px，右下角为3px，左下角为1px */ } 复合属性分开书写
div{ width:100px; height:100px; border-top-left-radius:2px; border-top-right-radius:4px; border-bottom-right-radius:3px; border-bottom-left-radius:1px; } 盒阴影 .box1{ width:100px; height:100px; box-shadow:10px 5px blue; /* 设置竖直偏移10px 水平偏移5px的蓝色盒阴影 */ } .box2{ width:100px; height:100px; box-shadow:10px 5px 3px blue; /* 设置竖直偏移10px 水平偏移5px 模糊半径3px的蓝色盒阴影 */ } .box3{ width:100px; height:100px; box-shadow:10px 5px 3px 6px blue; /* 设置竖直偏移10px 水平偏移5px 模糊半径3px 扩散半径6px的蓝色盒阴影 */ } .</description>
            <content type="html"><![CDATA[<h1 id="css3样式">CSS3样式</h1>
<h2 id="盒子">盒子</h2>
<blockquote>
<p>与盒子模型相关的一些样式属性</p>
</blockquote>
<h3 id="圆角">圆角</h3>
<p>复合属性</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">div</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span>; <span style="color:#75715e">/* 四个圆角值均为2px */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">4</span><span style="color:#66d9ef">px</span>; <span style="color:#75715e">/* 左上角与右下角为2px，右上角和左下角为4px */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">4</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">3</span><span style="color:#66d9ef">px</span>; <span style="color:#75715e">/* 左上角为2px，右上角和左下角为4px，右下角为3px */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-radius</span>:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">4</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">3</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span>; <span style="color:#75715e">/* 左上角为2px，右上角为4px，右下角为3px，左下角为1px */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>复合属性分开书写</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">div</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-top-left-radius</span>:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-top-right-radius</span>:<span style="color:#ae81ff">4</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-bottom-right-radius</span>:<span style="color:#ae81ff">3</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-bottom-left-radius</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="盒阴影">盒阴影</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">box1</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">box-shadow</span>:<span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">blue</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* 设置竖直偏移10px 水平偏移5px的蓝色盒阴影 */</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">box2</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">box-shadow</span>:<span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">3</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">blue</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* 设置竖直偏移10px 水平偏移5px 模糊半径3px的蓝色盒阴影 */</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">box3</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">box-shadow</span>:<span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">3</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">6</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">blue</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* 设置竖直偏移10px 水平偏移5px 模糊半径3px 扩散半径6px的蓝色盒阴影 */</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">box4</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">box-shadow</span>:<span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">blue</span> <span style="color:#66d9ef">inset</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* 设置竖直偏移10px 水平偏移5px 模糊半径3px 扩散半径6px的蓝色盒内阴影 */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="边界图片">边界图片</h3>
<p>构建美丽的可扩展按钮</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">div</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-image</span>:url(<span style="color:#e6db74">../img/img.png</span>) <span style="color:#ae81ff">10</span> <span style="color:#ae81ff">10</span> <span style="color:#66d9ef">stretch</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">hi</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-image</span>:linear-gradient(<span style="color:#66d9ef">red</span>, <span style="color:#66d9ef">yellow</span>) <span style="color:#ae81ff">10</span> <span style="color:#ae81ff">10</span> <span style="color:#66d9ef">round</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">p</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-image</span>:url(<span style="color:#e6db74">../img/img.svg</span>) <span style="color:#ae81ff">10</span> <span style="color:#ae81ff">10</span> <span style="color:#66d9ef">repeat</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="背景">背景</h3>
<p>[[CSS-selector#背景|查看CSS背景属性]]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">div</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-clip</span>:<span style="color:#66d9ef">content-box</span>; <span style="color:#75715e">/* 指定背景绘制区域，有border-box、padding-box和content-box属性值 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-origin</span>:<span style="color:#66d9ef">content-box</span>; <span style="color:#75715e">/* 设置元素背景图片的原始起始位置，指定background-position属性应该是相对属性 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-size</span>:<span style="color:#66d9ef">cover</span>; <span style="color:#75715e">/* 指定背景图片大小 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-image</span>:url(<span style="color:#e6db74">../img/1.jpg</span>),url(<span style="color:#e6db74">../img/2.jpg</span>); <span style="color:#75715e">/* 设置多重背景（前遮后显） */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>背景属性整合</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">div</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">background</span>:<span style="color:#66d9ef">red</span> <span style="color:#66d9ef">center</span> <span style="color:#66d9ef">cover</span> <span style="color:#66d9ef">no-repeat</span> <span style="color:#66d9ef">content-box</span> <span style="color:#66d9ef">content-box</span> <span style="color:#66d9ef">fixed</span> url(<span style="color:#e6db74">../img/img.png</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="渐变">渐变</h2>
<p>可以在两个或多个指定的颜色之间显示平稳的过渡</p>
<h3 id="线性渐变">线性渐变</h3>
<blockquote>
<p>沿着一根轴线改变颜色，从起点到终点颜色进行顺序渐变（从一边拉向另一边）</p>
</blockquote>
<p><code>linear-gradient</code>属性</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">box1</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background</span>:linear-gradient(<span style="color:#66d9ef">red</span>,<span style="color:#66d9ef">yellow</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">box2</span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background</span>:linear-gradient(<span style="color:#66d9ef">to</span> <span style="color:#66d9ef">right</span>,<span style="color:#66d9ef">red</span>,<span style="color:#66d9ef">yellow</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">box3</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background</span>:linear-gradient(<span style="color:#66d9ef">to</span> <span style="color:#66d9ef">right</span> <span style="color:#66d9ef">top</span>,<span style="color:#66d9ef">red</span>,<span style="color:#66d9ef">yellow</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* 使用角度 */</span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">box4</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background</span>:linear-gradient(<span style="color:#ae81ff">45</span><span style="color:#66d9ef">deg</span>,<span style="color:#66d9ef">red</span>,<span style="color:#66d9ef">yellow</span>); <span style="color:#75715e">/* 默认情况 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background</span>:<span style="color:#66d9ef">-webkit-</span>linear-gradient(<span style="color:#ae81ff">45</span><span style="color:#66d9ef">deg</span>,<span style="color:#66d9ef">red</span>,<span style="color:#66d9ef">yellow</span>) <span style="color:#75715e">/* -webkit-情况 */</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* 使用百分比调节 */</span>
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">box5</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background</span>:linear-gradient(<span style="color:#66d9ef">red</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">%</span>, <span style="color:#66d9ef">orange</span> <span style="color:#ae81ff">25</span><span style="color:#66d9ef">%</span>, <span style="color:#66d9ef">yellow</span> <span style="color:#ae81ff">50</span><span style="color:#66d9ef">%</span>, <span style="color:#66d9ef">green</span> <span style="color:#ae81ff">75</span><span style="color:#66d9ef">%</span>, <span style="color:#66d9ef">blue</span> <span style="color:#ae81ff">100</span><span style="color:#66d9ef">%</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>默认情况</p>
<p><img src="/images/CSS-style/image-20210116231404634.png" alt="image-20210116231404634"></p>
<p><code>-webkit-</code>情况</p>
<p><img src="/images/CSS-style/image-20210116231605432.png" alt="image-20210116231605432"></p>
<p><strong>拓展：重复渐变</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">box</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background</span>:repeating-linear-gradient(<span style="color:#66d9ef">red</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">%</span>,<span style="color:#66d9ef">yellow</span> <span style="color:#ae81ff">10</span><span style="color:#66d9ef">%</span>,<span style="color:#66d9ef">red</span> <span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="径向渐变">径向渐变</h3>
<p>从起点到终点颜色从内到外进行圆形渐变（从中间向外拉）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">box1</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background</span>:radial-gradient(<span style="color:#ae81ff">#e66465</span>, <span style="color:#ae81ff">#9198e5</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">box2</span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">background</span>:radial-gradient(<span style="color:#66d9ef">circle</span>, <span style="color:#ae81ff">#e66465</span>, <span style="color:#ae81ff">#9198e5</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">box3</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background</span>:radial-gradient(<span style="color:#66d9ef">circle</span> closest<span style="color:#f92672">-</span>side, <span style="color:#ae81ff">#e66465</span>, <span style="color:#ae81ff">#9198e5</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">box4</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background</span>:radial-gradient(<span style="color:#66d9ef">circle</span> at <span style="color:#ae81ff">50</span><span style="color:#66d9ef">%</span>, <span style="color:#ae81ff">#e66465</span>, <span style="color:#ae81ff">#9198e5</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>尺寸关键字</p>
<ul>
<li><code>closest-side</code>最近边</li>
<li><code>farthest-side</code>最远边</li>
<li><code>closest-corner</code>最近角</li>
<li><code>farthest-corner</code>最远角</li>
</ul>
<p><strong>拓展：重复渐变</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">box</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background</span>:repeating-radial-gradient(<span style="color:#66d9ef">red</span> <span style="color:#ae81ff">0</span><span style="color:#66d9ef">%</span>, <span style="color:#66d9ef">yellow</span> <span style="color:#ae81ff">10</span><span style="color:#66d9ef">%</span>, <span style="color:#66d9ef">red</span> <span style="color:#ae81ff">20</span><span style="color:#66d9ef">%</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="ie渐变">IE渐变</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">box</span>{ 		<span style="color:#66d9ef">filter</span>:progid<span style="color:#f92672">:</span>DXImageTransform<span style="color:#f92672">.</span>Microsoft<span style="color:#f92672">.</span><span style="color:#a6e22e">gradient</span>(startColorstr<span style="color:#960050;background-color:#1e0010">=</span><span style="color:#e6db74">&#39;red&#39;</span>,endColorstr<span style="color:#960050;background-color:#1e0010">=</span><span style="color:#e6db74">&#39;yellow&#39;</span>,GradientType<span style="color:#960050;background-color:#1e0010">=</span><span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="文本">文本</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">p</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-shadow</span>:<span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">5</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">3</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">yellow</span>; <span style="color:#75715e">/* 设置水平偏移5px竖直偏移5px模糊半径3px颜色是黄色的文本阴影 */</span>
</span></span><span style="display:flex;"><span>    text-outline:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">red</span>; <span style="color:#75715e">/* 设置文本轮廓粗细为2px模糊半径为1px颜色为红色的文本轮廓 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">word-break</span>:keep-all; <span style="color:#75715e">/* 规定自动换行的处理方法 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">word-wrap</span>:<span style="color:#66d9ef">break-word</span>; <span style="color:#75715e">/* 允许长单词或URL地址换行到下一行 */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>新文本属性</strong></p>
<p><strong><code>text-align-last</code>属性</strong></p>
<blockquote>
<p>规定如何对齐文本的最后一行</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">text1</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-align-last</span>:<span style="color:#66d9ef">auto</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">text2</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-align-last</span>:<span style="color:#66d9ef">center</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">text3</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-align-last</span>:<span style="color:#66d9ef">justify</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>兼容性：<code>text-align-last</code>属性只有IE支持，在Firefox中需要加上其前缀 “<code>-moz</code>” ，Chrome50.0.2661.102以上</p>
<p>注意：<code>text-align-last</code>属性只有在<code>text-align</code>属性设置为 ”<code>justify</code>”时才起作用</p>
<p><strong><code>text-overflow</code>属性</strong></p>
<blockquote>
<p>规定当文本溢出包含元素时发生的事情</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">text1</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-overflow</span>:<span style="color:#66d9ef">clip</span>; <span style="color:#75715e">/* 截断 */</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">text2</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-overflow</span>:<span style="color:#66d9ef">ellipsis</span>; <span style="color:#75715e">/* 省略号 */</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">text3</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-overflow</span>:string; <span style="color:#75715e">/* 火狐独有 */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="字体">字体</h2>
<p><code>@font-face</code>字体</p>
<p>CSS3字体模块，把字体文件放在服务器上，读取字体</p>
<p><strong>字体格式</strong></p>
<ul>
<li>
<p><code>TrueType(.ttf)</code>格式</p>
<blockquote>
<p><code>.ttf</code>字体是Windows和Mac的最常用字体，是一种RAW格式，因此他不为网站优化</p>
</blockquote>
</li>
<li>
<p><code>OpenType(.otf)</code>格式</p>
<blockquote>
<p><code>.otf</code>字体被认为是一种原始的字体格式，其内置在<code>TureType</code>的基础上，所以也提供了更多的功能</p>
</blockquote>
</li>
<li>
<p><code>Web Open Font Format(.woff)</code>格式</p>
<blockquote>
<p><code>.woff</code>字体是Web字体中最佳格式，他是一个开发的<code>TrueType</code>/<code>OpenType</code>的压缩版本，同时也支持元数据包的分离</p>
</blockquote>
</li>
<li>
<p><code>Embedded Open Type(.eot)</code>格式</p>
<blockquote>
<p><code>.eot</code>字体是IE专用字体，可以从<code>TrueType</code>创建此格式字体</p>
</blockquote>
</li>
<li>
<p><code>SVG(.svg)</code>格式</p>
<blockquote>
<p><code>.svg</code>字体是基于<code>SVG</code>字体渲染的一种格式</p>
</blockquote>
</li>
</ul>
<p>通用书写模板</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>@<span style="color:#66d9ef">font-face</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">font-family</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#39;YourWebFontName&#39;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">src</span>:<span style="color:#a6e22e">url</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;YourWebFontName.eot&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">src</span>:<span style="color:#a6e22e">url</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;YourWebFontName.eot?#iefix&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#39;embedded-opentype&#39;</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;YourWebFontName.ttf&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#39;turetype&#39;</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;YourWebFontName.woff&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#39;woff&#39;</span><span style="color:#f92672">),</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">url</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;YourWebFontName.svg#YourWebFontName&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">format</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;svg&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><blockquote>
<p>取值说明</p>
<p><code>YourWebFontName</code> ：自定义的字体名称，他将被引用到Web元素中的<code>font-family</code></p>
<p><code>source</code> ：自定义的字体的存放路径，可以是相对路径也可以是绝对路径</p>
<p><code>format</code> ：自定义字体的格式，主要用来帮助浏览器识别</p>
</blockquote>
<p><a href="https://www.fontsquirrel.com/tools/webfont-generator">获取特殊字体</a></p>
]]></content>
        </item>
        
        <item>
            <title>CSS3基础 笔记</title>
            <link>/posts/css3-basic/</link>
            <pubDate>Mon, 07 Feb 2022 16:17:53 +0800</pubDate>
            
            <guid>/posts/css3-basic/</guid>
            <description>CSS3基础 选择器 基础选择器 section &amp;gt; div{ /* 子元素选择器 */ color:#ffffff; } .brother + div{ /* 相邻兄弟元素选择器 */ color:#ff0000; } .brother ~ div{ /* 通用兄弟元素选择器 */ color:#00ff00; } div, p, section, .brother, #id{ /* 群组选择器 */ color:#0000ff; } 属性选择器 a[href]{ color:#000000; } a[href=&amp;#34;http://www.baidu.com&amp;#34;]{ /* 元素属性值 */ color:#666666; } input[value~=&amp;#34;password&amp;#34;]{ /* 元素包含指定属性值 */ color:#333333; } input[value^=&amp;#34;pass&amp;#34;]{ /* 元素开头属性值 */ color:#223333; } input[value$=&amp;#34;rd&amp;#34;]{ /* 元素结尾属性值 */ color:#222233; } input[value*=&amp;#34;word&amp;#34;]{ /* 元素属性值包含 */ color:#222222; } input[name|=&amp;#34;use&amp;#34;]{ /* 元素属性值-开头 */ color:#454545; } 伪类选择器 动态伪类 不存在于HTML中，只有当用户和网站交互的时候才能体现出来</description>
            <content type="html"><![CDATA[<h1 id="css3基础">CSS3基础</h1>
<h2 id="选择器">选择器</h2>
<h3 id="基础选择器">基础选择器</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">section</span> <span style="color:#f92672">&gt;</span> <span style="color:#f92672">div</span>{ <span style="color:#75715e">/* 子元素选择器 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#ffffff</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">brother</span> <span style="color:#f92672">+</span> <span style="color:#f92672">div</span>{ <span style="color:#75715e">/* 相邻兄弟元素选择器 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#ff0000</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">brother</span> <span style="color:#f92672">~</span> <span style="color:#f92672">div</span>{ <span style="color:#75715e">/* 通用兄弟元素选择器 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#00ff00</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span><span style="color:#f92672">,</span> <span style="color:#f92672">p</span><span style="color:#f92672">,</span> <span style="color:#f92672">section</span><span style="color:#f92672">,</span> .<span style="color:#a6e22e">brother</span><span style="color:#f92672">,</span> #id{ <span style="color:#75715e">/* 群组选择器 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#0000ff</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="属性选择器">属性选择器</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">a</span><span style="color:#f92672">[</span><span style="color:#f92672">href</span><span style="color:#f92672">]</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#000000</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">a</span><span style="color:#f92672">[</span><span style="color:#f92672">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;http://www.baidu.com&#34;</span><span style="color:#f92672">]</span>{ <span style="color:#75715e">/* 元素属性值 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#666666</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">input</span><span style="color:#f92672">[</span><span style="color:#f92672">value</span><span style="color:#f92672">~=</span><span style="color:#e6db74">&#34;password&#34;</span><span style="color:#f92672">]</span>{ <span style="color:#75715e">/* 元素包含指定属性值 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#333333</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">input</span><span style="color:#f92672">[</span><span style="color:#f92672">value</span><span style="color:#f92672">^=</span><span style="color:#e6db74">&#34;pass&#34;</span><span style="color:#f92672">]</span>{ <span style="color:#75715e">/* 元素开头属性值 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#223333</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">input</span><span style="color:#f92672">[</span><span style="color:#f92672">value</span><span style="color:#f92672">$=</span><span style="color:#e6db74">&#34;rd&#34;</span><span style="color:#f92672">]</span>{ <span style="color:#75715e">/* 元素结尾属性值 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#222233</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">input</span><span style="color:#f92672">[</span><span style="color:#f92672">value</span><span style="color:#f92672">*=</span><span style="color:#e6db74">&#34;word&#34;</span><span style="color:#f92672">]</span>{ <span style="color:#75715e">/* 元素属性值包含 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#222222</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">input</span><span style="color:#f92672">[</span><span style="color:#f92672">name</span><span style="color:#f92672">|=</span><span style="color:#e6db74">&#34;use&#34;</span><span style="color:#f92672">]</span>{ <span style="color:#75715e">/* 元素属性值-开头 */</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#454545</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="伪类选择器">伪类选择器</h3>
<h4 id="动态伪类">动态伪类</h4>
<blockquote>
<p>不存在于HTML中，只有当用户和网站交互的时候才能体现出来</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">a</span>:<span style="color:#a6e22e">link</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#66d9ef">red</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">a</span>:<span style="color:#a6e22e">visited</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#66d9ef">green</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">a</span>:<span style="color:#a6e22e">hover</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#66d9ef">blue</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">a</span>:<span style="color:#a6e22e">action</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#66d9ef">white</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">input</span>:<span style="color:#a6e22e">focus</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border</span>:<span style="color:#66d9ef">green</span> <span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">solid</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="ui元素状态伪类">UI元素状态伪类</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">input</span>:<span style="color:#a6e22e">enabled</span>{ <span style="color:#75715e">/* 设置可编辑状态样式 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#ffff00</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">input</span>:<span style="color:#a6e22e">disabled</span>{ <span style="color:#75715e">/* 设置不可编辑状态样式 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#dddddd</span>; 
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">input</span>:<span style="color:#a6e22e">checked</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#ff0000</span>; <span style="color:#75715e">/* 设置多选框选中颜色，只兼容Opera浏览器 */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="结构类选择器nth选择器">结构类选择器<code>:nth</code>选择器</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">div</span>:<span style="color:#a6e22e">first-child</span>{ <span style="color:#75715e">/* 相对父元素首个子元素 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#000000</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>:<span style="color:#a6e22e">last-child</span>{ <span style="color:#75715e">/* 相对父元素最后一个子元素 */</span>
</span></span><span style="display:flex;"><span>    backgroud-color:<span style="color:#ae81ff">#880000</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* 相对于父元素的第n个子元素 */</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>:<span style="color:#a6e22e">nth-child</span><span style="color:#f92672">(</span><span style="color:#f92672">2n-1</span><span style="color:#f92672">)</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#008800</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>:<span style="color:#a6e22e">nth-child</span><span style="color:#f92672">(</span><span style="color:#f92672">1</span><span style="color:#f92672">)</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#000088</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>:<span style="color:#a6e22e">nth-child</span><span style="color:#f92672">(</span><span style="color:#f92672">odd</span><span style="color:#f92672">)</span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#800000</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* 相对于父元素倒数第n个子元素 */</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>:<span style="color:#a6e22e">nth-last-child</span><span style="color:#f92672">(</span><span style="color:#f92672">2n-1</span><span style="color:#f92672">)</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#080000</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* 相对于父元素特定类型的第n个子元素 */</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>:<span style="color:#a6e22e">nth-of-type</span><span style="color:#f92672">(</span><span style="color:#f92672">2n-1</span><span style="color:#f92672">)</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#008000</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* 相对于父元素特定类型的倒数第n个子元素 */</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>:<span style="color:#a6e22e">nth-last-of-type</span><span style="color:#f92672">(</span><span style="color:#f92672">2n-1</span><span style="color:#f92672">)</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#000800</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* 相对于父元素特定类型的第一个子元素 */</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>:<span style="color:#a6e22e">first-of-type</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#000080</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* 相对于父元素特定类型的最后一个子元素 */</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>:<span style="color:#a6e22e">last-of-type</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#000008</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* 相对于父元素唯一子元素 */</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>:<span style="color:#a6e22e">only-child</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#808000</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* 相对于父元素唯一特定类型的子元素 */</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>:<span style="color:#a6e22e">only-of-type</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#800800</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* 匹配没有子元素（包括文本节点）的每一个元素 */</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>:<span style="color:#a6e22e">empty</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#800080</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="否定选择器not">否定选择器（：not）</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span> <span style="color:#75715e">/* 匹配非指定元素/选择器的每个元素 */</span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">section</span>:<span style="color:#a6e22e">not</span><span style="color:#f92672">(</span><span style="color:#f92672">div</span><span style="color:#f92672">)</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#008888</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">section</span>:<span style="color:#a6e22e">not</span><span style="color:#f92672">(</span>.<span style="color:#a6e22e">child</span><span style="color:#f92672">)</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#888800</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="伪类和伪元素">伪类和伪元素</h2>
<blockquote>
<p>伪元素：只是一个选择器，不存在的一种元素</p>
<p>伪类：实际存在的一种元素</p>
</blockquote>
<h3 id="伪元素">伪元素</h3>
<p>CSS伪元素用于向某些选择器设置特殊效果</p>
<p>语法格式：<code>元素::伪元素</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#75715e">/* 类型 */</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>::<span style="color:#a6e22e">first-line</span>{ <span style="color:#75715e">/* 对元素的第一行文本进行格式化， 只用于块级元素 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">24</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>::<span style="color:#a6e22e">first-letter</span>{ <span style="color:#75715e">/* 对元素的第一个字符进行格式化， 只用于块级元素 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">32</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>::<span style="color:#a6e22e">before</span>{ <span style="color:#75715e">/* 在元素的内容前面插入新内容，常用&#34;content&#34;配合使用 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">content</span>:<span style="color:#e6db74">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">display</span>:<span style="color:#66d9ef">block</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#ff0000</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">div</span>::<span style="color:#a6e22e">after</span>{ <span style="color:#75715e">/* 在元素的内容后面插入新内容，常用&#34;content&#34;配合使用。多用于清除浮动 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">content</span>:<span style="color:#e6db74">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">clear</span>:<span style="color:#66d9ef">both</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">100</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#00ff00</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>::<span style="color:#a6e22e">selection</span>{ <span style="color:#75715e">/* 用于设置在浏览器中选中文本后的背景色与前景色 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#ff0000</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#00ff00</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>::after</code>和<code>::before</code>特点总结</p>
<ol>
<li>行级元素</li>
<li>最后/第一个子元素</li>
<li>内容通过<code>content</code>写入</li>
<li>支持一切css属性</li>
<li>标签里找不到对应标签</li>
</ol>
<h2 id="css权重">CSS权重</h2>
<blockquote>
<p>当很多的规则被应用到某一个元素上时，权重是一个决定哪种规则生效，或者是优先级的过程</p>
</blockquote>
<p><strong>权重等级与[[CSS-basic#权值|权值]]</strong></p>
<p>行内样式(1000)&gt;ID选择器(100)&gt;类、属性选择器和伪类选择器(10)&gt;元素和伪元素(1)&gt;<code>*</code>(0)</p>
<p><strong>权重计算口诀</strong></p>
<p>从0开始，一个行内样式+1000，一个id+100，一个属性选择器、class或者伪类+10，一个元素名或者伪元素+1</p>
<h3 id="css权重规则">CSS权重规则</h3>
<p>包含更高权重选择器的一条规则拥有更高的权重</p>
<p>ID选择器(<code>#idValue</code>)的权重比属性选择器(<code>[id=&quot;idValue&quot;]</code>)高</p>
<p>带有上下文关系的选择器比单纯的元素选择器权重要高</p>
<p>与元素 “挨得近” 的规则生效</p>
<blockquote>
<p>最后定义的这条规则覆盖上面与之冲突的规则</p>
<p>无论多少给元素组成的选择器，都没有一个class选择器权重高</p>
<p>通配符选择器权重是0，被继承的css属性也带有权重，权重也是0</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>CSS选择器 笔记</title>
            <link>/posts/css-selector/</link>
            <pubDate>Mon, 07 Feb 2022 15:55:54 +0800</pubDate>
            
            <guid>/posts/css-selector/</guid>
            <description>选择器 标签选择器
a{ text-decoration:none; } class选择器
.class{ font-size:24px; color:#666; } ID选择器
#id{ line-height:30px; background-color:#666; } 全局选择器
*{ margin:0; padding:0; border:none; } 群组选择器
a,.class,#id{ font-size:20px; } 后代选择器
div a{ color:#000; } 拓展应用：组合使用多种选择器
伪类选择器 特点
定义特殊状态下的样式 无法使用标签、id、class及其他属性实现 [[CSS3-basic#伪类选择器|伪类]]
链接
a:active{/*链接激活*/ color:#fff; } a:visited{/*链接已访问*/ color:#00ff00; } a:link{/*链接未访问*/ color:#ff0000; } a:hover{/*鼠标悬停*/ color:#0000ff; } 顺序：link&amp;gt;visited&amp;gt;hover&amp;gt;active
说明：伪类对大小写不敏感、link和visited顺序无所谓
active和hover可以适用其他元素
注意：兼容性问题
样式 ==单位== 绝对单位
不能根据浏览器或父元素大小的改变而改变
in、cm、mm、pt、pc 属性xx-small、x-small、small、medium、large、x-large、xx-large 相对单位
px(受分辨率影响)、em/%(相对于父元素 继承计算值) 属性值：large、smaller(相对父元素) 字体 p{ font-family:&amp;#34;微软雅黑&amp;#34;;/* 字体 */ font-size:16px;/* 字体大小 */ color:#000; /* 前景颜色 */ font-weight:normal; /* 字体粗细 */ font-style:normal; /* 字体样式 */ font-variant:small-caps; /* 字体变形 */ } h1{ font:italic normal bolder 24px/32px Serif; /* 注意书写顺序：font-style font-variant font-weight(顺序任意) font-size/line-height font-family 不设置自己单独下载的字体 */ } 文字 p{ text-indent:2em; text-align:center;/* 水平对齐 对于块级元素进行设置，可以继承*/ line-height:24px;/* 可以继承、继承是继承计算值*/ } span{ vertical-align:middle;/* 对于行内元素和单元格元素进行设置 文字基线 */ } p{ word-spacing:1px;/* 单词间距 */ letter-spacing:0.</description>
            <content type="html"><![CDATA[<h1 id="选择器">选择器</h1>
<ul>
<li>
<p>标签选择器</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">a</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-decoration</span>:<span style="color:#66d9ef">none</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
<li>
<p>class选择器</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">class</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">24</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#666</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
<li>
<p>ID选择器</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>#id{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">line-height</span>:<span style="color:#ae81ff">30</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#666</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
<li>
<p>全局选择器</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">*</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border</span>:<span style="color:#66d9ef">none</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
<li>
<p>群组选择器</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">a</span><span style="color:#f92672">,</span>.<span style="color:#a6e22e">class</span><span style="color:#f92672">,</span>#id{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
<li>
<p>后代选择器</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">div</span> <span style="color:#f92672">a</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#000</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
</ul>
<p><em>拓展应用：组合使用多种选择器</em></p>
<h2 id="伪类选择器">伪类选择器</h2>
<ul>
<li>
<p>特点</p>
<ol>
<li>定义特殊状态下的样式</li>
<li>无法使用标签、id、class及其他属性实现</li>
</ol>
</li>
<li>
<p>[[CSS3-basic#伪类选择器|伪类]]</p>
<ul>
<li>
<p>链接</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">a</span>:<span style="color:#a6e22e">active</span>{<span style="color:#75715e">/*链接激活*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#fff</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">a</span>:<span style="color:#a6e22e">visited</span>{<span style="color:#75715e">/*链接已访问*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#00ff00</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">a</span>:<span style="color:#a6e22e">link</span>{<span style="color:#75715e">/*链接未访问*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#ff0000</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">a</span>:<span style="color:#a6e22e">hover</span>{<span style="color:#75715e">/*鼠标悬停*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#0000ff</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>顺序：<code>link</code>&gt;<code>visited</code>&gt;<code>hover</code>&gt;<code>active</code></p>
<p><em>说明：伪类对大小写不敏感、<code>link</code>和<code>visited</code>顺序无所谓</em></p>
</li>
<li>
<p><code>active</code>和<code>hover</code>可以适用其他元素</p>
</li>
</ul>
</li>
</ul>
<p>注意：兼容性问题</p>
<h1 id="样式">样式</h1>
<h2 id="单位">==单位==</h2>
<p><strong>绝对单位</strong></p>
<blockquote>
<p>不能根据浏览器或父元素大小的改变而改变</p>
</blockquote>
<ul>
<li>in、cm、mm、pt、pc</li>
<li>属性xx-small、x-small、small、medium、large、x-large、xx-large</li>
</ul>
<p><strong>相对单位</strong></p>
<ul>
<li>px(受分辨率影响)、em/%(相对于父元素 <em>继承计算值</em>)</li>
<li>属性值：large、smaller(相对父元素)</li>
</ul>
<h2 id="字体">字体</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">p</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-family</span>:<span style="color:#e6db74">&#34;微软雅黑&#34;</span>;<span style="color:#75715e">/* 字体 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-size</span>:<span style="color:#ae81ff">16</span><span style="color:#66d9ef">px</span>;<span style="color:#75715e">/* 字体大小 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">color</span>:<span style="color:#ae81ff">#000</span>; <span style="color:#75715e">/* 前景颜色 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-weight</span>:<span style="color:#66d9ef">normal</span>; <span style="color:#75715e">/* 字体粗细 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-style</span>:<span style="color:#66d9ef">normal</span>; <span style="color:#75715e">/* 字体样式 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font-variant</span>:<span style="color:#66d9ef">small-caps</span>; <span style="color:#75715e">/* 字体变形 */</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">h1</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">font</span>:<span style="color:#66d9ef">italic</span> <span style="color:#66d9ef">normal</span> <span style="color:#66d9ef">bolder</span> <span style="color:#ae81ff">24</span><span style="color:#66d9ef">px</span><span style="color:#f92672">/</span><span style="color:#ae81ff">32</span><span style="color:#66d9ef">px</span> Serif;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    注意书写顺序：font-style font-variant font-weight(顺序任意) font-size/line-height font-family
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    不设置自己单独下载的字体
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="文字">文字</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">p</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-indent</span>:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">em</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-align</span>:<span style="color:#66d9ef">center</span>;<span style="color:#75715e">/* 水平对齐 对于块级元素进行设置，可以继承*/</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">line-height</span>:<span style="color:#ae81ff">24</span><span style="color:#66d9ef">px</span>;<span style="color:#75715e">/* 可以继承、继承是继承计算值*/</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">span</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">vertical-align</span>:<span style="color:#66d9ef">middle</span>;<span style="color:#75715e">/* 对于行内元素和单元格元素进行设置 文字基线 */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><img src="/images/CSS-selector/image-20201126184903158.png" alt="image-20201126184903158"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">p</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">word-spacing</span>:<span style="color:#ae81ff">1</span><span style="color:#66d9ef">px</span>;<span style="color:#75715e">/* 单词间距 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">letter-spacing</span>:<span style="color:#ae81ff">0.5</span><span style="color:#66d9ef">px</span>;<span style="color:#75715e">/* 字母间距 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-transform</span>:<span style="color:#66d9ef">capitalize</span>;<span style="color:#75715e">/* 设置大小写 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">text-decoration</span>:<span style="color:#66d9ef">none</span>;<span style="color:#75715e">/* 设置装饰，应用于所用元素，不能继承*/</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="背景">背景</h2>
<p>[[CSS3-style#背景|了解CSS3的新增背景属性]]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">div</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-color</span>:<span style="color:#ae81ff">#fff</span>; <span style="color:#75715e">/* 设置背景颜色，可用颜色名、rgb、rgba、十六进制 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-image</span>:url(<span style="color:#e6db74">../img/img.png</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-position</span>:<span style="color:#66d9ef">center</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* 背景图片的起始位置，可以使用百分比和位置关键词 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-attachment</span>:<span style="color:#66d9ef">fixed</span>; <span style="color:#75715e">/* 显示方式 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background-repeat</span>:<span style="color:#66d9ef">no-repeat</span>; <span style="color:#75715e">/* 背景图片重复 */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>background-position属性说明</strong></p>
<p><img src="/images/CSS-selector/image-20210109101628522.png" alt="image-20210109101628522"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">section</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">background</span>:<span style="color:#ae81ff">#fff</span> url(<span style="color:#e6db74">../img/img.png</span>) <span style="color:#66d9ef">no-repeat</span> <span style="color:#66d9ef">fixed</span> <span style="color:#66d9ef">center</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* 顺序不固定 */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="列表">列表</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">ul</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">list-style-type</span>:<span style="color:#66d9ef">none</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">list-style-image</span>:url(<span style="color:#e6db74">../icon/icon.svg</span>);
</span></span><span style="display:flex;"><span>    list-style-positon:<span style="color:#66d9ef">outside</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    列表标记文字，有两个属性值：inside和outside.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    inside: 列表项目标标记放置在文本内，且环绕文本根据标记对齐
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    outside： 默认值，列表项目标记放置在文本意外，且环绕文本不根据标记对齐
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>列表项标记说明</strong></p>
<p><img src="/images/CSS-selector/image-20210109102922259.png" alt="image-20210109102922259"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">ol</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">list-style</span>: <span style="color:#66d9ef">none</span> url(<span style="color:#e6db74">../icon/icon.svg</span>) <span style="color:#66d9ef">outside</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* 顺序不固定，list-style-image属性会覆盖list-style-type的设置 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">opacity</span>:<span style="color:#ae81ff">0</span>;<span style="color:#75715e">/* 透明度设置 */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>CSS进阶 笔记</title>
            <link>/posts/css-up/</link>
            <pubDate>Mon, 07 Feb 2022 15:55:47 +0800</pubDate>
            
            <guid>/posts/css-up/</guid>
            <description>CSS进阶 盒子模型 盒子模型用来“放”网页中的各种元素
网页设计中内容，如文字、图片等元素， 都可是盒子（div嵌套）
生活中的盒子：
padding内填充 border边框 margin外边距 物体content内容：
width宽 height高 属性 div{ width:80%; max-width:1000px; min-width:300px; height:auto; max-height:1000px; min-height:300px; border-width:medium; border-color:red; border-style:solid; /* 内边距的属性值不能为负值 */ padding:20px; /* 4个方向都是20px */ padding:20px 40px; /* 上下=20px 左右=40px */ padding:20px 40px 10px; /* 上=20px 左右=40px 下=10px */ padding:20px 30px 10px 40px; /* 上=20px 右=30px 下=10px 左=40px */ margin:20px; margin:20px 40px; margin:20px 40px 10px; margin:20px 30px 10px 40px; /* 垂直方向，两个相邻元素都设置外边距，外边距会发生合并 合并后外边距高度=两个发生合并外边距的高度中最大值 */ } 宽高属性总结</description>
            <content type="html"><![CDATA[<h1 id="css进阶">CSS进阶</h1>
<h2 id="盒子模型">盒子模型</h2>
<blockquote>
<p>盒子模型用来“放”网页中的各种元素</p>
<p>网页设计中内容，如文字、图片等元素， 都可是盒子（div嵌套）</p>
</blockquote>
<p>生活中的盒子：</p>
<ul>
<li>padding内填充</li>
<li>border边框</li>
<li>margin外边距</li>
</ul>
<p>物体content内容：</p>
<ul>
<li>width宽</li>
<li>height高</li>
</ul>
<h3 id="属性">属性</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">div</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#ae81ff">80</span><span style="color:#66d9ef">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-width</span>:<span style="color:#ae81ff">1000</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">min-width</span>:<span style="color:#ae81ff">300</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#66d9ef">auto</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">max-height</span>:<span style="color:#ae81ff">1000</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">min-height</span>:<span style="color:#ae81ff">300</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-width</span>:<span style="color:#66d9ef">medium</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-color</span>:<span style="color:#66d9ef">red</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border-style</span>:<span style="color:#66d9ef">solid</span>;
</span></span><span style="display:flex;"><span>   	<span style="color:#75715e">/* 内边距的属性值不能为负值 */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span>; <span style="color:#75715e">/* 4个方向都是20px */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">40</span><span style="color:#66d9ef">px</span>; <span style="color:#75715e">/* 上下=20px 左右=40px */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">40</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span>; <span style="color:#75715e">/* 上=20px 左右=40px 下=10px */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">30</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">40</span><span style="color:#66d9ef">px</span>; <span style="color:#75715e">/* 上=20px 右=30px 下=10px 左=40px */</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span>; 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">40</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">40</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">30</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">40</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">/* 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    垂直方向，两个相邻元素都设置外边距，外边距会发生合并
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    合并后外边距高度=两个发生合并外边距的高度中最大值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">    */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>宽高属性总结</strong></p>
<ol>
<li>width和height属性设置是内容的高和宽</li>
<li>width和height属性设置对块级元素和替换元素有效</li>
<li>max-height(width)/min-height(width)有兼容问题，IE不支持</li>
</ol>
<p><em>盒子模型的属性值均有四个方向： <code>top</code> <code>bottom</code> <code>left</code> <code>right</code></em></p>
<p><strong>盒子模型属性值简写</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">div</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">30</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">40</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">20</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">30</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">10</span><span style="color:#66d9ef">px</span> <span style="color:#ae81ff">40</span><span style="color:#66d9ef">px</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">border</span>:<span style="color:#ae81ff">2</span><span style="color:#66d9ef">px</span> <span style="color:#66d9ef">red</span> <span style="color:#66d9ef">solid</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#66d9ef">auto</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">width</span>:<span style="color:#66d9ef">auto</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="计算">计算</h3>
<p>标准盒子模型：</p>
<ul>
<li>宽度=左边距+左边框+左填充+内容宽度+右填充+右边框+右边距</li>
<li>高度=上边距+上边框+上填充+内容高度+下填充+下边框+下边距</li>
</ul>
<p><code>doctype</code>声明 –&gt; 标准盒子模型</p>
<h3 id="display属性">display属性</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#f92672">div</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">display</span>:<span style="color:#66d9ef">inline</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">span</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">display</span>:<span style="color:#66d9ef">block</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">img</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">display</span>:<span style="color:#66d9ef">inline-block</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#f92672">ul</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">display</span>:<span style="color:#66d9ef">none</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>样式继承关系</strong></p>
<p><img src="/images/CSS-up/image-20210109144624068.png" alt="image-20210109144624068"></p>
<h2 id="定位">定位</h2>
<blockquote>
<p>定位机制</p>
<ul>
<li>普通流（标准流）：默认状态，元素自动从左往右，从上往下的排列</li>
<li>浮动</li>
<li>绝对定位</li>
</ul>
</blockquote>
<h3 id="浮动">浮动</h3>
<p>基础知识</p>
<ul>
<li>会使元素向左或向右移动，只能左右，不能上下</li>
<li>浮动元素碰到包含框或另一浮动框，浮动停止</li>
<li>浮动元素之后的元素将围绕它，之前的不受影响</li>
<li>浮动元素会脱离标准流</li>
</ul>
<p><strong>语法</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">box_1</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">float</span>:<span style="color:#66d9ef">left</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">box_2</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">float</span>:<span style="color:#66d9ef">right</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">box_3</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">float</span>:<span style="color:#66d9ef">none</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><em>不会脱离文本流，会脱离文档流（普通流）</em></p>
<p><strong>问题：</strong> 浮动塌陷，浮动溢出</p>
<h4 id="清除浮动">清除浮动</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">box</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">clear</span>:<span style="color:#66d9ef">both</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><em>设置了float的元素会影响其他相邻元素，需要使用clear清除浮动，clear只会影响自身，不会对其他相邻元素造成影响</em></p>
<p><strong>常用方法</strong></p>
<ol>
<li>
<p>在浮动元素后使用一个空元素加clear</p>
</li>
<li>
<p>给浮动元素的容器添加<code>overflow:hidden</code></p>
</li>
<li>
<p>使用CSS3的<code>:after</code>[[CSS3-basic#伪元素|伪元素]]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.<span style="color:#a6e22e">clearfix</span>:<span style="color:#a6e22e">after</span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">content</span>:<span style="color:#e6db74">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">display</span>:<span style="color:#66d9ef">block</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">height</span>:<span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">visibility</span>:<span style="color:#66d9ef">hidden</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">clear</span>:<span style="color:#66d9ef">both</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.<span style="color:#a6e22e">clearfix</span>{
</span></span><span style="display:flex;"><span>    zoom:<span style="color:#ae81ff">1</span>;<span style="color:#75715e">/* 触发hasLayout兼容IE6、7 */</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>其他方法</strong></p>
<ol>
<li>父级元素定义<code>height</code>。只适合高度固定的布局。</li>
<li>父级元素也一起浮动。不推荐，会产生新的浮动问题。</li>
</ol>
</li>
</ol>
<h4 id="浮动总结">浮动总结</h4>
<ul>
<li>会使元素左右移动</li>
<li>浮动元素会脱离普通流</li>
<li>元素浮动后具备<code>inline-block</code>属性</li>
</ul>
<p>清除方法推荐</p>
<ol>
<li>使用CSS3<code>:after</code>伪元素清除浮动</li>
<li>使用<code>overflow:hidden</code>清除浮动</li>
</ol>
<h3 id="绝对定位">绝对定位</h3>
<p>position模块</p>
<p>Positioned Layout Module</p>
<p>提供与<strong>元素定位</strong>和<strong>层叠相关</strong>功能，它是核心模块</p>
<blockquote>
<ol>
<li>盒子模型的类型和尺寸</li>
<li>布局模型</li>
<li>元素之间的关系</li>
<li>视口大小、图像大小等其他相关方面</li>
</ol>
</blockquote>
<p><em>小知识点</em></p>
<blockquote>
<p>Document tree 文档树</p>
<p>normal-flow 自然顺序</p>
<p>containing-block 容器</p>
</blockquote>
<h4 id="定位模型">定位模型</h4>
<ul>
<li>
<p>自然模型<code>static</code></p>
<blockquote>
<p>静态定位/常规定位/自然定位 —— 定位中的一股清流-回归本真</p>
</blockquote>
<p><img src="/images/CSS-up/image-20210110154409258.png" alt="image-20210110154409258"></p>
</li>
<li>
<p>相对定位模型<code>relative</code></p>
<p><img src="/images/CSS-up/image-20210110154535105.png" alt="image-20210110154535105"></p>
</li>
<li>
<p>绝对定位模型<code>absoluate</code></p>
<p><img src="/images/CSS-up/image-20210110154643565.png" alt="image-20210110154643565"></p>
</li>
<li>
<p>固定定位模型<code>fixed</code></p>
<p><img src="/images/CSS-up/image-20210110154937232.png" alt="image-20210110154937232"></p>
</li>
<li>
<p>磁贴定位模型<code>sticky</code></p>
<blockquote>
<p>磁贴定位/粘性定位/吸附定位 ——赛季新秀 实力布局糖</p>
</blockquote>
<p><img src="/images/CSS-up/image-20210110155151738.png" alt="image-20210110155151738"></p>
</li>
</ul>
<h4 id="定位总结">定位总结</h4>
<p><img src="/images/CSS-up/image-20210110155244861.png" alt="image-20210110155244861"></p>
<h2 id="布局">布局</h2>
<p>认识布局</p>
<ul>
<li>以最合适浏览的方式将图片和文字排放在页面的不同位置</li>
<li>布局模式有多种，不同的制作者有不同的布局设计</li>
</ul>
<p>==前端工程师 = 技术 + 艺术==</p>
<p><strong>经典行布局</strong></p>
<ul>
<li>基础的行布局</li>
<li>行布局自适应限制最大宽</li>
<li>行布局垂直水平居中</li>
</ul>
<p><strong>经典的列布局</strong></p>
<ul>
<li>两列布局固定</li>
<li>两列布局自适应</li>
<li>三列布局固定</li>
<li>三列布局自适应</li>
</ul>
<p><strong>混合布局</strong></p>
<ul>
<li>混合布局固定</li>
<li>混合布局自适应</li>
</ul>
<h3 id="圣杯布局">圣杯布局</h3>
<blockquote>
<p>由来</p>
<p>圣杯布局是由国外的Kevin Cornell 提出的一个布局模型概念</p>
<p>在国内由淘宝UED的工程师传播开来</p>
</blockquote>
<p>布局要求</p>
<ul>
<li>三列布局，中间宽度自适应，两边定宽</li>
<li>中间栏要在浏览器中优先展示渲染</li>
<li>允许任意列高度最高</li>
<li>用最简单的CSS、最少的HACK语句</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34; container&#34;</span> &gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>        中间
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>        左侧
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>        右侧
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div><h3 id="双飞翼布局">双飞翼布局</h3>
<ul>
<li>经淘宝UED的工程师针对圣杯布局改良后得出双飞翼布局</li>
<li>去掉相对布局，只需要浮动和负边距</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;main&#34;</span> &gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>        中间
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    左侧
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">div</span>&gt;
</span></span><span style="display:flex;"><span>    右侧
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">div</span>&gt;
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>CSS基础 笔记</title>
            <link>/posts/css-basic/</link>
            <pubDate>Mon, 07 Feb 2022 15:55:42 +0800</pubDate>
            
            <guid>/posts/css-basic/</guid>
            <description>CSS基础 Cascading Style Sheets 层叠样式表
发展历史 1996W3C：CSS1
1998W3C：CSS2
现在W3C：CSS3
特点 CSS简化[[HTML]]相关标签，网页体积小，下载快 解决内容与表现相分离的问题 更好地维护网页，提高工作效率 样式规则 选择器，声明（声明有属性和值构成）不区分大小写
书写规范：
书写采用小写书写
每一个属性占一行
注释：
/*注释*/ 使用方法
行内样式表（内联样式表） [同时加载]
&amp;lt;h1 style=&amp;#34;attribute:value&amp;#34;&amp;gt; title &amp;lt;/h1&amp;gt; 内部样式表 [同时加载]
&amp;lt;head&amp;gt; &amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt; *{ margin:0; border:none; padding:0; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt; title &amp;lt;/h1&amp;gt; &amp;lt;/body&amp;gt; 外部样式表（外联样式表）：
创建CSS文件（扩展名是.css)、引用CSS样式 [html加载时，同时加载CSS]
&amp;lt;head&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;style.css&amp;#34; /&amp;gt; &amp;lt;/head&amp;gt; 外部样式表的优势：
css与html分离 多个文件可以同时使用一个样式文件 多文件引用同一个css文件，css只需下载一次 导入式 (不推荐使用) [先html后css]
&amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt; @import &amp;#34;style.css&amp;#34;; @import url(style.css); @import url(&amp;#34;style.css&amp;#34;); &amp;lt;/style&amp;gt; 优先级：</description>
            <content type="html"><![CDATA[<h1 id="css基础">CSS基础</h1>
<blockquote>
<p>Cascading Style Sheets 层叠样式表</p>
</blockquote>
<h2 id="发展历史">发展历史</h2>
<p>1996W3C：CSS1</p>
<p>1998W3C：CSS2</p>
<p>现在W3C：CSS3</p>
<h2 id="特点">特点</h2>
<ul>
<li>CSS简化[[HTML]]相关标签，网页体积小，下载快</li>
<li>解决内容与表现相分离的问题</li>
<li>更好地维护网页，提高工作效率</li>
</ul>
<h2 id="样式规则">样式规则</h2>
<p>选择器，声明（声明有属性和值构成）<em>不区分大小写</em></p>
<blockquote>
<p>书写规范：</p>
<p>书写采用小写书写</p>
<p>每一个属性占一行</p>
</blockquote>
<p>注释：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span><span style="color:#75715e">/*注释*/</span>
</span></span></code></pre></div><p><strong>使用方法</strong></p>
<ul>
<li>
<p>行内样式表（内联样式表） [同时加载]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">h1</span> <span style="color:#a6e22e">style</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;attribute:value&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    title
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">h1</span>&gt;
</span></span></code></pre></div></li>
<li>
<p>内部样式表    [同时加载]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">style</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/css&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>{
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">margin</span>:<span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">border</span>:<span style="color:#66d9ef">none</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">padding</span>:<span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>	&lt;/<span style="color:#f92672">style</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">h1</span>&gt;
</span></span><span style="display:flex;"><span>        title
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">h1</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">body</span>&gt;
</span></span></code></pre></div></li>
<li>
<p><strong>外部样式表（外联样式表）：</strong></p>
<p>创建CSS文件（扩展名是<code>.css</code>)、引用CSS样式    [html加载时，同时加载CSS]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/css&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;style.css&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">head</span>&gt;
</span></span></code></pre></div><blockquote>
<p>外部样式表的优势：</p>
<ol>
<li>css与html分离</li>
<li>多个文件可以同时使用一个样式文件</li>
<li>多文件引用同一个css文件，css只需下载一次</li>
</ol>
</blockquote>
</li>
<li>
<p>导入式 (不推荐使用) [先html后css]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">style</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/css&#34;</span>&gt;
</span></span><span style="display:flex;"><span>	@<span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#34;style.css&#34;</span>;
</span></span><span style="display:flex;"><span>    @<span style="color:#66d9ef">import</span> <span style="color:#f92672">url</span><span style="color:#f92672">(</span><span style="color:#f92672">style</span>.<span style="color:#a6e22e">css</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>    @<span style="color:#66d9ef">import</span> <span style="color:#f92672">url</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;style.css&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">style</span>&gt;
</span></span></code></pre></div></li>
</ul>
<p><strong>优先级：</strong></p>
<p>行内样式&gt;内部样式&gt;导入式样式？外部样式</p>
<p><em>注意：内部样式和外部样式根据就近原则</em></p>
<h2 id="拓展">拓展</h2>
<p>HTML文档结构是一个文档树</p>
<h3 id="css继承从父元素继承属性">css继承：从父元素继承属性</h3>
<p>好处：</p>
<ol>
<li>父元素设置样式，子元素可以继承__部分属性__</li>
<li>减少css代码</li>
</ol>
<p>特点：继承优先级较低，冲突时采用默认</p>
<h3 id="css层叠样式叠加效果">css层叠：样式叠加效果</h3>
<ul>
<li>可以定义多个样式</li>
<li>不冲突时，多个样式可层叠为一个</li>
<li>冲突时，按不同样式规则优先级来应用样式</li>
</ul>
<h3 id="优先级">优先级</h3>
<p>选择器优先级</p>
<ul>
<li>id选择器&gt;class选择器&gt;标签选择器</li>
<li>后面定义的优先级&gt;前面定义的优先级</li>
</ul>
<p><strong>css优先级规则</strong></p>
<p>同一样式表中：</p>
<ol>
<li>权值相同：就近原则</li>
<li>权值不同
<ol>
<li>根据权值来判断CSS样式</li>
<li>哪种CSS样式权值高，就使用哪种样式</li>
</ol>
</li>
</ol>
<h4 id="权值">权值</h4>
<p>选择器权值</p>
<ul>
<li>标签：1</li>
<li>class：10</li>
<li>ID：100</li>
<li>通配符<code>*</code>：0</li>
<li>行内：1000</li>
</ul>
<p>权值规则</p>
<ul>
<li>统计不同选择器的个数</li>
<li>每类选择器的个数乘以相应权值</li>
<li>把所有的值相加得出选择器的权值</li>
</ul>
<h3 id="命名">命名</h3>
<p>命名规则：</p>
<ul>
<li>采用英文字母、数字以及‘-’和‘_’命名</li>
<li>以小写字母开头，不能以数字和‘-’、‘_’开头</li>
<li>命名形式：单字、连字符、下划线和驼峰</li>
<li>使用意义命名</li>
</ul>
<p>常用的CSS样式命名</p>
<ol>
<li>页面结构
<ul>
<li>页头：header</li>
<li>页面主体：main</li>
<li>页尾：footer</li>
<li>内容：content/container</li>
<li>导航：nav</li>
<li>侧栏：sidebar</li>
<li>栏目：column</li>
<li>页面外围控制：wrapper</li>
<li>左右中：left right center</li>
</ul>
</li>
<li>导航
<ul>
<li>导航：nav</li>
<li>主导航：mainnav</li>
<li>子导航：subnav</li>
<li>顶导航：topnav</li>
<li>边导航：sidebar</li>
<li>右导航：rightsidebar</li>
<li>左导航：leftsidebar</li>
<li>菜单：menu</li>
<li>子菜单：submenu</li>
<li>标题：title</li>
<li>摘要：summary</li>
</ul>
</li>
<li>功能
<ul>
<li>标志：logo</li>
<li>广告：banner</li>
<li>登录：login</li>
<li>登录条：loginbar</li>
<li>注册：register</li>
<li>搜索：search</li>
<li>功能区：shop</li>
<li>标题：title</li>
</ul>
</li>
</ol>
<h2 id="使用idclass">使用id&amp;class</h2>
<ul>
<li>id不要滥用，谨慎使用</li>
<li>class适当使用</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>HTML5 笔记</title>
            <link>/posts/html5/</link>
            <pubDate>Thu, 03 Feb 2022 16:39:07 +0800</pubDate>
            
            <guid>/posts/html5/</guid>
            <description>HTML5 介绍 HTML5发展历程
标签变化
DTD、新增的标签、删除的标签、重定义标签
网页布局
新的页面布局、区别和意义
属性变化
input、表单属性、链接属性、其他属性
标签 HTML标签
定义和用法
&amp;lt;!DOCTYPE&amp;gt;声明必须是HTML文档的第一行，位于&amp;lt;html&amp;gt;标签之前
不是HTML标签
指示web浏览器关于页面使用哪个HTML版本进行编写的指令
常用的DOCYPE声明
DTD文档类型定义
新增元素 结构标签（块状元素）——有意义的div
&amp;lt;article&amp;gt;article&amp;lt;/article&amp;gt; &amp;lt;header&amp;gt;header of page&amp;lt;/header&amp;gt; &amp;lt;nav&amp;gt;nav of page&amp;lt;/nav&amp;gt; &amp;lt;section&amp;gt;the area&amp;lt;/section&amp;gt; &amp;lt;hgroup&amp;gt;information about&amp;lt;/hgroup&amp;gt; &amp;lt;figure&amp;gt;multimedia&amp;lt;/figure&amp;gt; &amp;lt;footer&amp;gt;footer of page&amp;lt;/footer&amp;gt; &amp;lt;dialog&amp;gt; &amp;lt;dt&amp;gt; chat title &amp;lt;/dt&amp;gt; &amp;lt;dd&amp;gt; chat content &amp;lt;/dd&amp;gt; &amp;lt;/dialog&amp;gt; &amp;lt;!-- 补充 1. header/section/aside/article/footer 不要使用嵌套 2. header/section/footer级别最高&amp;gt;aside/article/figure/hgroup/nav &amp;gt;div&amp;gt;figcaption --&amp;gt; 多媒体标签（意义：富媒体的发展，提升用户体验）
&amp;lt;video src=&amp;#34;video path&amp;#34; autoplay=&amp;#34;&amp;#34; controls=&amp;#34;&amp;#34; width=&amp;#34;400px&amp;#34; height=&amp;#34;300px&amp;#34;&amp;gt;video&amp;lt;/video&amp;gt; &amp;lt;audio src=&amp;#34;audio path&amp;#34; autoplay=&amp;#34;&amp;#34; loop=&amp;#34;-1&amp;#34; control=&amp;#34;&amp;#34;&amp;gt;not read the text&amp;lt;/audio&amp;gt; &amp;lt;source src=&amp;#34;path&amp;#34; type=&amp;#34;recode type&amp;#34;/&amp;gt; &amp;lt;canvas&amp;gt;draw&amp;lt;/canvas&amp;gt; &amp;lt;embed src=&amp;#34;extra path&amp;#34; width=&amp;#34;100px&amp;#34; height=&amp;#34;20px&amp;#34;&amp;gt; </description>
            <content type="html"><![CDATA[<h1 id="html5">HTML5</h1>
<h2 id="介绍">介绍</h2>
<p><strong>HTML5发展历程</strong></p>
<p><img src="/images/HTML5/image-20200927150853419.png" alt="image-20200927150853419"></p>
<ul>
<li>
<p>标签变化</p>
<p>DTD、新增的标签、删除的标签、重定义标签</p>
</li>
<li>
<p>网页布局</p>
<p>新的页面布局、区别和意义</p>
</li>
<li>
<p>属性变化</p>
<p>input、表单属性、链接属性、其他属性</p>
</li>
</ul>
<h2 id="标签">标签</h2>
<p><strong>HTML<!-- raw HTML omitted -->标签</strong></p>
<blockquote>
<p><strong>定义和用法</strong></p>
<p><code>&lt;!DOCTYPE&gt;</code>声明必须是HTML文档的第一行，位于<code>&lt;html&gt;</code>标签之前</p>
<p><strong>不是HTML标签</strong></p>
<p>指示web浏览器关于页面使用哪个HTML版本进行编写的指令</p>
</blockquote>
<p><strong>常用的DOCYPE声明</strong></p>
<p><img src="/images/HTML5/image-20200927151817436.png" alt="image-20200927151817436"></p>
<p><strong>DTD文档类型定义</strong></p>
<p><img src="/images/HTML5/image-20200927151948200.png" alt="image-20200927151948200"></p>
<p><img src="/images/HTML5/image-20200927152012495.png" alt="image-20200927152012495"></p>
<h3 id="新增元素">新增元素</h3>
<p><strong>结构标签（块状元素）——有意义的div</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">article</span>&gt;article&lt;/<span style="color:#f92672">article</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">header</span>&gt;header of page&lt;/<span style="color:#f92672">header</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">nav</span>&gt;nav of page&lt;/<span style="color:#f92672">nav</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">section</span>&gt;the area&lt;/<span style="color:#f92672">section</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">hgroup</span>&gt;information about&lt;/<span style="color:#f92672">hgroup</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">figure</span>&gt;multimedia&lt;/<span style="color:#f92672">figure</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">footer</span>&gt;footer of page&lt;/<span style="color:#f92672">footer</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">dialog</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#f92672">dt</span>&gt;
</span></span><span style="display:flex;"><span>        chat title
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">dt</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">dd</span>&gt;
</span></span><span style="display:flex;"><span>    	chat content
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">dd</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">dialog</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!--
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">补充
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">1. header/section/aside/article/footer 不要使用嵌套
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">2. header/section/footer级别最高&gt;aside/article/figure/hgroup/nav &gt;div&gt;figcaption 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">--&gt;</span>
</span></span></code></pre></div><p><strong>多媒体标签（意义：富媒体的发展，提升用户体验）</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">video</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;video path&#34;</span> <span style="color:#a6e22e">autoplay</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span> <span style="color:#a6e22e">controls</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span> <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;400px&#34;</span> <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;300px&#34;</span>&gt;video&lt;/<span style="color:#f92672">video</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">audio</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;audio path&#34;</span> <span style="color:#a6e22e">autoplay</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span> <span style="color:#a6e22e">loop</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;-1&#34;</span> <span style="color:#a6e22e">control</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>&gt;not read the text&lt;/<span style="color:#f92672">audio</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">source</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;path&#34;</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;recode type&#34;</span>/&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">canvas</span>&gt;draw&lt;/<span style="color:#f92672">canvas</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">embed</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;extra path&#34;</span> <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;100px&#34;</span> <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;20px&#34;</span>&gt;
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>HTML进阶 笔记</title>
            <link>/posts/html-up/</link>
            <pubDate>Thu, 03 Feb 2022 16:39:01 +0800</pubDate>
            
            <guid>/posts/html-up/</guid>
            <description>HTML 进阶 标签 标签分类
块级标签：占据一行，需要换行
div、p、h1～h6、ul、ol、li、dl、dt、dd
特点：
独占一行 可以设置宽、高 如果不设置宽度，宽度默认为容器的100% 行内标签：在一行，不换行
span、a、b、i、u、em
特点：
与其他元素同行显示 不可以设置宽、高 宽高就是文字或图片的宽高 标签嵌套规则
块级元素可包含行内元素和某些块级元素
行内元素不能包含块元素，只能包含行内元素
块级元素不能放在p标签内
特殊块级元素只能包含行内元素，不能再包含块级元素
如：h1-h6、p、dt
块级元素与块级元素并列，行内元素与行内元素并列
结构分析 调试工具F12
网页区块分析：网页整体结构
网页制作流程 用户：提出需求 产品经理：规划和实现原型图 设计师：网页设计图 前端工程师：切图–html结构–css样式–js基础 项目 基本网页排版布局
头部内容
LOGO标签
导航栏
banner图
主题内容
文章内容
链接区
页脚内容</description>
            <content type="html"><![CDATA[<h1 id="html-进阶">HTML 进阶</h1>
<h2 id="标签">标签</h2>
<p><strong>标签分类</strong></p>
<ul>
<li>
<p>块级标签：占据一行，需要换行</p>
<blockquote>
<p>div、p、h1～h6、ul、ol、li、dl、dt、dd</p>
<p>特点：</p>
<ol>
<li>独占一行</li>
<li>可以设置宽、高</li>
<li>如果不设置宽度，宽度默认为容器的100%</li>
</ol>
</blockquote>
</li>
<li>
<p>行内标签：在一行，不换行</p>
<blockquote>
<p>span、a、b、i、u、em</p>
<p>特点：</p>
<ol>
<li>与其他元素同行显示</li>
<li>不可以设置宽、高</li>
<li>宽高就是文字或图片的宽高</li>
</ol>
</blockquote>
</li>
</ul>
<p><strong>标签嵌套规则</strong></p>
<ol>
<li>
<p>块级元素可包含行内元素和某些块级元素</p>
</li>
<li>
<p>行内元素不能包含块元素，只能包含行内元素</p>
</li>
<li>
<p>块级元素不能放在p标签内</p>
</li>
<li>
<p>特殊块级元素只能包含行内元素，不能再包含块级元素</p>
<p>如：h1-h6、p、dt</p>
</li>
<li>
<p>块级元素与块级元素并列，行内元素与行内元素并列</p>
</li>
</ol>
<h2 id="结构分析">结构分析</h2>
<p>调试工具F12</p>
<p>网页区块分析：网页整体结构</p>
<h2 id="网页制作流程">网页制作流程</h2>
<ol>
<li>用户：提出需求</li>
<li>产品经理：规划和实现原型图</li>
<li>设计师：网页设计图</li>
<li>前端工程师：切图–html结构–css样式–js基础</li>
</ol>
<h2 id="项目">项目</h2>
<p><strong>基本网页排版布局</strong></p>
<ul>
<li>
<p>头部内容</p>
<blockquote>
<p>LOGO标签</p>
<p>导航栏</p>
<p>banner图</p>
</blockquote>
</li>
<li>
<p>主题内容</p>
<blockquote>
<p>文章内容</p>
<p>链接区</p>
</blockquote>
</li>
<li>
<p>页脚内容</p>
</li>
</ul>
<hr>
]]></content>
        </item>
        
        <item>
            <title>HTML基础语法 笔记</title>
            <link>/posts/html-basic/</link>
            <pubDate>Thu, 03 Feb 2022 16:38:40 +0800</pubDate>
            
            <guid>/posts/html-basic/</guid>
            <description>HTML基础 Hypertext Markup Language 超文本标记语言
概述 发展史 1993-2014 W3C
概念 头部信息：网页不展示 网页内容：网页展示 标签：储存文本 成对出现 元素：标签+内容+标签 声明：&amp;lt;!DOCTYPE html 编码：&amp;lt;meta/&amp;gt;
特点
不需要编译 文本文件 html或htm为文件名后缀 大小写不敏感 语法
&amp;lt;tagName attributeName1=&amp;#34;attributeValue&amp;#34; attributeName2=&amp;#34;attributeValue&amp;#34; ...&amp;gt;...&amp;lt;/tagName&amp;gt; 特殊符号采用实体符表示，即&amp;amp;&amp;hellip;
标签使用：网页内容和整体分析得出**(语义化)**
网页调试：F12
路径
相对路径：相对于html文件 绝对路径：盘符写
标签 基本 标题：h1~h6 段落：p 辅助格式：br hr pre 修饰：i em b stronge sup sub
常用
图片 &amp;lt;img src=&amp;#34;img&amp;#34; alt=&amp;#34;image&amp;#34; width=&amp;#34;400px&amp;#34; height=&amp;#34;50%&amp;#34;/&amp;gt; 列表 &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;2&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;2&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;dl&amp;gt; &amp;lt;dt&amp;gt;item&amp;lt;/dt&amp;gt; &amp;lt;dd&amp;gt;describe&amp;lt;/dd&amp;gt; &amp;lt;/dl&amp;gt; 超链接 &amp;lt;a href=&amp;#34;link&amp;#34; target=&amp;#34;windowMethod&amp;#34; title=&amp;#34;tips&amp;#34; name=&amp;#34;name&amp;#34;&amp;gt; Link&amp;lt;/a&amp;gt; &amp;lt;!</description>
            <content type="html"><![CDATA[<h1 id="html基础">HTML基础</h1>
<blockquote>
<p>Hypertext Markup Language
超文本标记语言</p>
</blockquote>
<h2 id="概述">概述</h2>
<p><strong>发展史</strong>
1993-2014 W3C</p>
<p><strong>概念</strong>
头部信息：网页不展示
网页内容：网页展示
标签：储存文本 成对出现
元素：标签+内容+标签
声明：<code>&lt;!DOCTYPE html</code>
编码：<code>&lt;meta/&gt;</code></p>
<p><strong>特点</strong></p>
<ol>
<li>不需要编译</li>
<li>文本文件</li>
<li>html或htm为文件名后缀</li>
<li>大小写不敏感</li>
</ol>
<p><strong>语法</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">tagName</span> <span style="color:#a6e22e">attributeName1</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;attributeValue&#34;</span> <span style="color:#a6e22e">attributeName2</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;attributeValue&#34;</span> <span style="color:#960050;background-color:#1e0010">...</span>&gt;...&lt;/<span style="color:#f92672">tagName</span>&gt;
</span></span></code></pre></div><p>特殊符号采用实体符表示，即&amp;&hellip;</p>
<p>标签使用：网页内容和整体分析得出**(语义化)**</p>
<p>网页调试：F12</p>
<p><em>路径</em></p>
<blockquote>
<p>相对路径：相对于html文件
绝对路径：盘符写</p>
</blockquote>
<h2 id="标签">标签</h2>
<p><strong>基本</strong>
标题：h1~h6
段落：p
辅助格式：br hr pre
修饰：i em   b  stronge  sup  sub</p>
<p><strong>常用</strong></p>
<ul>
<li>图片
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;img&#34;</span> <span style="color:#a6e22e">alt</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;image&#34;</span> <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;400px&#34;</span> <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;50%&#34;</span>/&gt;
</span></span></code></pre></div></li>
<li>列表
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#f92672">li</span>&gt;1&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#f92672">li</span>&gt;2&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#f92672">li</span>&gt;3&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">ol</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#f92672">li</span>&gt;1&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#f92672">li</span>&gt;2&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#f92672">li</span>&gt;3&lt;/<span style="color:#f92672">li</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">ol</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">dl</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#f92672">dt</span>&gt;item&lt;/<span style="color:#f92672">dt</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#f92672">dd</span>&gt;describe&lt;/<span style="color:#f92672">dd</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">dl</span>&gt;
</span></span></code></pre></div></li>
<li>超链接
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;link&#34;</span> <span style="color:#a6e22e">target</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;windowMethod&#34;</span> <span style="color:#a6e22e">title</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;tips&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;name&#34;</span>&gt; Link&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!--link: file externalLink blank(refresh) --&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">mailto</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mailtoName&#34;</span>&gt;mail&lt;/<span style="color:#f92672">a</span>&gt;<span style="color:#75715e">&lt;!--mail link--&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!--file download--&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#bttom&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#top&#34;</span>&gt;top&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#top&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;#bottom&#34;</span>&gt;bottom&lt;/<span style="color:#f92672">a</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#75715e">&lt;!-- anchor link--&gt;</span>
</span></span></code></pre></div></li>
</ul>
<h2 id="表格">表格</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">table</span> <span style="color:#a6e22e">width</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;400px&#34;</span> <span style="color:#a6e22e">bgcolor</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;blue&#34;</span> <span style="color:#a6e22e">border</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1px&#34;</span> <span style="color:#a6e22e">cellpadding</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2px&#34;</span> <span style="color:#a6e22e">cellspacing</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;3px&#34;</span> <span style="color:#a6e22e">frame</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span> <span style="color:#a6e22e">rules</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">caption</span>&gt;Title&lt;/<span style="color:#f92672">caption</span>&gt;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">&lt;!--
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">		1.同时使用同时操作
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">		2.不影响表格布局
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">		3.结构化加载
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">	--&gt;</span>
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">thead</span>&gt; 
</span></span><span style="display:flex;"><span>    	&lt;<span style="color:#f92672">tr</span> <span style="color:#a6e22e">align</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;center&#34;</span> <span style="color:#a6e22e">valign</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;center&#34;</span> <span style="color:#a6e22e">bgcolor</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;red&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        	&lt;<span style="color:#f92672">th</span> <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;20px&#34;</span> <span style="color:#a6e22e">bgcolor</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;red&#34;</span>&gt;head1&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">th</span>&gt;head2&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">th</span>&gt;head3&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">th</span>&gt;Itable&lt;/<span style="color:#f92672">th</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">thead</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">tbody</span>&gt;
</span></span><span style="display:flex;"><span>    	&lt;<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>        	&lt;<span style="color:#f92672">td</span> <span style="color:#a6e22e">bgcolor</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;green&#34;</span> <span style="color:#a6e22e">height</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;20px&#34;</span>&gt;body1&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">td</span>&gt;body2&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">td</span>&gt;body3&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>        	&lt;<span style="color:#f92672">td</span> <span style="color:#a6e22e">rowspan</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2&#34;</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;<span style="color:#f92672">table</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>                    	&lt;<span style="color:#f92672">td</span>&gt;1&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                        &lt;<span style="color:#f92672">td</span>&gt;2&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;/<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>                    	&lt;<span style="color:#f92672">td</span>&gt;3&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                        &lt;<span style="color:#f92672">td</span>&gt;4&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>                    &lt;/<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>                &lt;/<span style="color:#f92672">table</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">td</span>&gt;body4&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">td</span>&gt;body5&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">td</span>&gt;body6&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">tbody</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">tfoot</span>&gt;
</span></span><span style="display:flex;"><span>    	&lt;<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>        	&lt;<span style="color:#f92672">td</span>&gt;footer1&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">td</span>&gt;footer2&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">td</span> <span style="color:#a6e22e">colspan</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;2&#34;</span>&gt;footer3&lt;/<span style="color:#f92672">td</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">tr</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">tfoot</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">table</span>&gt;
</span></span></code></pre></div><h2 id="表单">表单</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">form</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">placeholder</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;tipsText&#34;</span> <span style="color:#a6e22e">maxlength</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;20px&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">size</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;10px&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;initValue&#34;</span>/&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;button&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;button&#34;</span>/&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span>/&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;reset&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;reset&#34;</span>/&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;image&#34;</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;srcImage&#34;</span> <span style="color:#a6e22e">alt</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;submit&#34;</span>/&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;hidden&#34;</span>/&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;file&#34;</span>/&gt;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">&lt;!--选择域--&gt;</span>
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;radio&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sex&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;female&#34;</span>/&gt;female
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;radio&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;sex&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;male&#34;</span> <span style="color:#a6e22e">checked</span>/&gt;male
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;checkbox&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;love&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Math&#34;</span>/&gt;Math&lt;<span style="color:#f92672">br</span>/&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;checkbox&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;love&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;English&#34;</span>/&gt;English&lt;<span style="color:#f92672">br</span>/&gt;    	&lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;checkbox&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;love&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Biology&#34;</span>/&gt;Biology&lt;<span style="color:#f92672">br</span>/&gt;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">select</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;color&#34;</span> <span style="color:#a6e22e">size</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span> <span style="color:#a6e22e">multiple</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">optgroup</span> <span style="color:#a6e22e">label</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;light&#34;</span>&gt;
</span></span><span style="display:flex;"><span>			&lt;<span style="color:#f92672">option</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;red&#34;</span> <span style="color:#a6e22e">select</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;selected&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            	Red
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">option</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">option</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;yellow&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            	Yellow
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">option</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">option</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;orange&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            	Orange
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">option</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">optgroup</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;<span style="color:#f92672">optgroup</span> <span style="color:#a6e22e">label</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;dark&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        	&lt;<span style="color:#f92672">option</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;blue&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        		Blue
</span></span><span style="display:flex;"><span>        	&lt;/<span style="color:#f92672">option</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">option</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;green&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            	Green
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">option</span>&gt;
</span></span><span style="display:flex;"><span>            &lt;<span style="color:#f92672">option</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;purple&#34;</span>&gt;
</span></span><span style="display:flex;"><span>            	Purple
</span></span><span style="display:flex;"><span>            &lt;/<span style="color:#f92672">option</span>&gt;
</span></span><span style="display:flex;"><span>        &lt;/<span style="color:#f92672">optgroup</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">select</span>&gt;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">textarea</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;textarea&#34;</span> <span style="color:#a6e22e">placeholder</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;more text input&#34;</span> <span style="color:#a6e22e">cols</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;view width&#34;</span> <span style="color:#a6e22e">rows</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;view hight&#34;</span>&gt;&lt;/<span style="color:#f92672">textarea</span>&gt;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">&lt;!--value值是传给服务器的值--&gt;</span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">form</span>&gt;
</span></span></code></pre></div><hr>
]]></content>
        </item>
        
        <item>
            <title>汇编语言 笔记</title>
            <link>/posts/asm/</link>
            <pubDate>Thu, 03 Feb 2022 09:56:53 +0800</pubDate>
            
            <guid>/posts/asm/</guid>
            <description>汇编语言 概述 编程形式
开关&amp;ndash;&amp;gt;打孔&amp;ndash;&amp;gt;输入设备
汇编语言的出现
mov eax, 5 mov ebx, 6 add eax, ebx 汇编程序的执行
汇编代码 -&amp;gt; 汇编程序 -&amp;gt; 处理器可识别 01010101 -&amp;gt; 处理器执行
学习汇编的意义 开发时调试 逆向时候的代码阅读 某些特殊技术的使用（如shellcode、壳） shellcode：可以运行在任意位置的代码（汇编语言）
壳：加壳或脱壳都需要用的汇编语言
环境配置
Ollydbg
Visual Studio 2015
x16 汇编 通用寄存器 16位寄存器 高8位 低8位 AX AH AL BX BH BL CX CH CL DX DH DL SI \ \ DI \ \ SP \ \ BP \ \ 内存字节序 :chestnut: 0x12345678
每个地址只有存储1字节
大端序 小端序 12 78 34 56 56 34 78 12 CC CC CC CC CC CC 段的概念 CS段只有16位，8086有20根地址线，那么地址如何存储？</description>
            <content type="html"><![CDATA[<h1 id="汇编语言">汇编语言</h1>
<h2 id="概述">概述</h2>
<p>编程形式</p>
<blockquote>
<p>开关&ndash;&gt;打孔&ndash;&gt;输入设备</p>
</blockquote>
<p>汇编语言的出现</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">mov eax, 5
mov ebx, 6
add eax, ebx
</code></pre><p>汇编程序的执行</p>
<blockquote>
<p>汇编代码 -&gt; 汇编程序 -&gt; 处理器可识别 01010101 -&gt; 处理器执行</p>
</blockquote>
<h3 id="学习汇编的意义">学习汇编的意义</h3>
<ol>
<li>开发时调试</li>
<li>逆向时候的代码阅读</li>
<li>某些特殊技术的使用（如shellcode、壳）</li>
</ol>
<blockquote>
<p>shellcode：可以运行在任意位置的代码（汇编语言）</p>
<p>壳：加壳或脱壳都需要用的汇编语言</p>
</blockquote>
<p>环境配置</p>
<ul>
<li>
<p>Ollydbg</p>
</li>
<li>
<p>Visual Studio 2015</p>
</li>
</ul>
<h2 id="x16-汇编">x16 汇编</h2>
<h3 id="通用寄存器">通用寄存器</h3>
<table>
<thead>
<tr>
<th>16位寄存器</th>
<th>高8位</th>
<th>低8位</th>
</tr>
</thead>
<tbody>
<tr>
<td>AX</td>
<td>AH</td>
<td>AL</td>
</tr>
<tr>
<td>BX</td>
<td>BH</td>
<td>BL</td>
</tr>
<tr>
<td>CX</td>
<td>CH</td>
<td>CL</td>
</tr>
<tr>
<td>DX</td>
<td>DH</td>
<td>DL</td>
</tr>
<tr>
<td>SI</td>
<td>\</td>
<td>\</td>
</tr>
<tr>
<td>DI</td>
<td>\</td>
<td>\</td>
</tr>
<tr>
<td>SP</td>
<td>\</td>
<td>\</td>
</tr>
<tr>
<td>BP</td>
<td>\</td>
<td>\</td>
</tr>
</tbody>
</table>
<p><img src="/images/ASM/image-20211123194526478.png" alt="image-20211123194526478"></p>
<h3 id="内存字节序">内存字节序</h3>
<p>:chestnut: 0x12345678</p>
<p>每个地址只有存储1字节</p>
<table>
<thead>
<tr>
<th>大端序</th>
<th>小端序</th>
</tr>
</thead>
<tbody>
<tr>
<td>12</td>
<td>78</td>
</tr>
<tr>
<td>34</td>
<td>56</td>
</tr>
<tr>
<td>56</td>
<td>34</td>
</tr>
<tr>
<td>78</td>
<td>12</td>
</tr>
<tr>
<td>CC</td>
<td>CC</td>
</tr>
<tr>
<td>CC</td>
<td>CC</td>
</tr>
<tr>
<td>CC</td>
<td>CC</td>
</tr>
</tbody>
</table>
<h3 id="段的概念">段的概念</h3>
<p><img src="/images/ASM/image-20211123201417209.png" alt="image-20211123201417209"></p>
<blockquote>
<p>CS段只有16位，8086有20根地址线，那么地址如何存储？</p>
<p>简单粗暴 除以0x10，因为只有以零结尾的地址才能作为段地址</p>
</blockquote>
<p>CS：代码段</p>
<p>DS：数据段</p>
<p>ES：扩展段</p>
<p>SS：堆栈段</p>
<h3 id="16位汇编基本框架">16位汇编基本框架</h3>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">assume cs:code ;设置代码段

code segment ;代码段开始
rkmain proc
	mov ax,0
	mov cx, 10H
rk:     
	inc ax
	loop rk
	mov ax, 4c00H
	int 21H
rkmain endp

start:  call rkmain ;指定开始位置
code ends ;代码段结束
end start
</code></pre><blockquote>
<p><code>add</code> 加</p>
<p><code>int</code> 自增</p>
<p><code>sub</code> 减</p>
<p><code>dec</code> 自减</p>
<p><code>loop</code> 循环</p>
</blockquote>
<h3 id="函数传参">函数传参</h3>
<ul>
<li>寄存器传参</li>
<li>堆栈传参</li>
<li>内存传参</li>
</ul>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">assume cs:code

code segment

addx proc
	push bp
	mov bp,sp
	mov si,[bp+4]
	mov di,[bp+6]
	add si,di
	mov ax,si
	pop bp
	ret
addx endp

rkmain proc
	mov ax,5
	mov bx,6
	push ax
	push bx
	call addx
	add sp,4
	mov bx,ax
	mov ax, 4c00H
	int 21H
rkmain endp

start:  call rkmain

code ends
end start
</code></pre><h3 id="flag寄存器">FLAG寄存器</h3>
<h4 id="状态标志">状态标志</h4>
<p>CF：进位位</p>
<p>PF：奇偶位</p>
<p>AF：辅助进位位</p>
<p>ZF：零值位</p>
<p>SF：符号位</p>
<p>OF：溢出位</p>
<h3 id="cmp指令">CMP指令</h3>
<blockquote>
<p>CMP OPRD1, OPRD2</p>
<p>SUB</p>
<p>影响标志位</p>
</blockquote>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">mov ax,2
mov bx,1
cmp ax.bx
</code></pre><p>相等</p>
<p>AX-BX = 0 ZF=1</p>
<p>不等</p>
<p>AX-BX !=0 ZF=0</p>
<p>AX &lt; BX:</p>
<p>AX-BX = ? CF=1</p>
<p>AX &gt; BX:</p>
<p>AX-BX=? CF=0 ZF=0</p>
<p>AX &lt;= BX:</p>
<p>AX-BX=? CF=1 || ZF=1</p>
<p>AX &gt;= BX:</p>
<p>AX-BX=? CF=0 || ZF=1</p>
<h3 id="jcc指令">JCC指令</h3>
<p>一类指令 跳转</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">jmp address 
je address ;等于则跳转 ZF=1
jne address ;不等于则跳转 ZF=0
jb address ;低于则跳转 CF=1
ja address ;高于则跳转 CF=0 &amp;&amp; ZF=0
</code></pre><h3 id="运算指令">运算指令</h3>
<p>四则运算</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">mov ax,16
mov bx,5
add ax,5
sub ax,3
mul bx ; &gt;16bit DX:AX 32bit 默认与ax操作
div bx ; DX-&gt;余数 AX-&gt;商 默认与ax操作
</code></pre><p>位运算</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">xor ax,bx
and ax,bx
or ax,bx
not ax
</code></pre><h2 id="x86汇编">x86汇编</h2>
<p>通用寄存器</p>
<table>
<thead>
<tr>
<th>寄存器</th>
</tr>
</thead>
<tbody>
<tr>
<td>EAX</td>
</tr>
<tr>
<td>EBX</td>
</tr>
<tr>
<td>ECX</td>
</tr>
<tr>
<td>EDX</td>
</tr>
<tr>
<td>ESI</td>
</tr>
<tr>
<td>EDI</td>
</tr>
<tr>
<td>ESP</td>
</tr>
<tr>
<td>EBP</td>
</tr>
</tbody>
</table>
<h3 id="段">段</h3>
<table>
<thead>
<tr>
<th>段</th>
</tr>
</thead>
<tbody>
<tr>
<td>CS</td>
</tr>
<tr>
<td>DS</td>
</tr>
<tr>
<td>ES</td>
</tr>
<tr>
<td>SS</td>
</tr>
<tr>
<td>FS</td>
</tr>
<tr>
<td>GS</td>
</tr>
</tbody>
</table>
<h4 id="段选择子">段选择子</h4>
<p>CS 代码段 1B</p>
<p>DS ES SS 数据段 23</p>
<p>FS 3B</p>
<ul>
<li>
<p>Index：3</p>
</li>
<li>
<p>Ti：0</p>
</li>
<li>
<p>RPL：3</p>
</li>
</ul>
<h4 id="段描述符">段描述符</h4>
<p>代码段：</p>
<blockquote>
<p><code>00cffb00 0000ffff</code></p>
<p>1100 1111 1111 1011 0000 0000</p>
<p>Base：<code>0000 0000</code></p>
<p>Limit：<code>ffffff</code></p>
<p><code>ffffff * 0x1000</code></p>
<p><code>FFFFFF000+0X1000</code></p>
<p><code>10 0000 0000 - 1</code></p>
<p><code>FFFF FFFF</code></p>
<p>G = 1 Limit单位是页</p>
<p>G = 0 Limit单位是字节</p>
<p>页</p>
<ul>
<li>大页 4M</li>
<li>小页 4K</li>
</ul>
<p>寻址空间：<code>0000 0000 ~ FFFF FFFF</code></p>
</blockquote>
<p>数据段</p>
<blockquote>
<p><code>00cff300 0000ffff</code></p>
<p>BASE：<code>0000 0000</code></p>
<p>Limit：<code>FFFF FFFF</code></p>
</blockquote>
<p>FS段</p>
<blockquote>
<p><code>0040f300 00000fff</code></p>
<p>G=0 字节</p>
<p><code>0000 0000 0100 0000 1111 0011 0000 0000</code></p>
<p><code>fff * 1</code> <code>fff</code>字节</p>
<p><code>0 ~ fff</code></p>
</blockquote>
<p>4GB空间 虚拟的4GB空间</p>
<ul>
<li>低2GB是每个进程独享的</li>
<li>高2GB是内核空间，是共享的</li>
</ul>
<p>base+offset = 虚拟地址</p>
<h3 id="页">页</h3>
<blockquote>
<p>内存的一种管理模式</p>
</blockquote>
<p>29912</p>
<p>CR3</p>
<p>PDPTE -&gt; PTE - PDE -&gt; 物理页 (4k)</p>
<p>76B26000 E9 A1 B0 76</p>
<p>01 (PDPTE) （1 * 8)</p>
<p>110110101(PTE) (1B5 * 8 )</p>
<p>100100110(PDE) (126 * 8)</p>
<p>00000000000(页内偏移) (000)</p>
<hr>
<blockquote>
<p>R3 用户层 TEB（线程环境块）</p>
<p>R0 系统内核 驱动 KPCR（CPU状态块）</p>
</blockquote>
<h3 id="调用约定">调用约定</h3>
<ol>
<li><code>cdecl</code></li>
<li><code>stdcall</code></li>
<li><code>fastcall</code></li>
<li><code>thiscall</code></li>
</ol>
<blockquote>
<p><code>lib</code> 静态链接库</p>
<p><code>dll</code> 动态链接库</p>
</blockquote>
<h4 id="cdecl">cdecl</h4>
<p>C语言调用约定</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">push eax
push eax
call printf
add esp,8
</code></pre><h4 id="stdcall">stdcall</h4>
<p>Win32调用约定</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">push 1
push 2
push 3
push 4
call messagebox
</code></pre><h4 id="fastcall">fastcall</h4>
<p>x64 调用约定</p>
<p>前四个参数使用寄存器传参，后面使用堆栈</p>
<blockquote>
<p>rcx rdx r8 r9</p>
</blockquote>
<h3 id="x86基本框架">x86基本框架</h3>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">.586
.model flat,stdcall
option casemap:none

includelib ucrt.lib
includelib legacy_stdio_definitions.lib
includelib User32.lib
includelib Kernel32.lib

MessageBoxA PROTO hWnd:DWORD,lpText:BYTE,lpCaption:BYTE,uType:DWORD
ExitProcess PROTO uType:DWORD
extern printf:proc
extern scanf:proc
extern putchar:proc

.data
szStr db &#39;Hello World!&#39;,0
.code
main proc
	lea eax,szStr
	push eax
	call printf
	add esp,4
	push 0
	call ExitProcess
	add esp,4
main endp
end
</code></pre><h3 id="内联汇编">内联汇编</h3>
<p>单行内联汇编</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>_ASM<span style="color:#f92672">/</span> mov nNum, <span style="color:#ae81ff">100</span>;
</span></span></code></pre></div><p>多行内联汇编</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>_ASM<span style="color:#f92672">/</span> {
</span></span><span style="display:flex;"><span>		mov nNum,<span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>		mov eax,nNum
</span></span><span style="display:flex;"><span>		push eax
</span></span><span style="display:flex;"><span>		mov eax,fNum
</span></span><span style="display:flex;"><span>		push eax
</span></span><span style="display:flex;"><span>		call printf
</span></span><span style="display:flex;"><span>		add esp,<span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>	}
</span></span></code></pre></div><p>遍历数组</p>
<p>按结尾数据遍历</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> nNum;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> fNum <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> arr[] <span style="color:#f92672">=</span> { <span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">0</span> };
</span></span><span style="display:flex;"><span>	_ASM<span style="color:#f92672">/</span> {
</span></span><span style="display:flex;"><span>		xor esi,esi
</span></span><span style="display:flex;"><span>		jmp loopX
</span></span><span style="display:flex;"><span>	loopM:
</span></span><span style="display:flex;"><span>		inc esi
</span></span><span style="display:flex;"><span>	loopX:
</span></span><span style="display:flex;"><span>		mov edi,[arr<span style="color:#f92672">+</span>esi<span style="color:#f92672">*</span><span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>		push edi
</span></span><span style="display:flex;"><span>		mov eax,fNum
</span></span><span style="display:flex;"><span>		push eax
</span></span><span style="display:flex;"><span>		call printf
</span></span><span style="display:flex;"><span>		add esp,<span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>		cmp edi,<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>		jne loopM
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;pause&#34;</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>按长度进行遍历</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> nNum;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> fNum <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> arr[<span style="color:#ae81ff">10</span>];
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">size_t</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>; i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		arr[i] <span style="color:#f92672">=</span> i;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	_ASM<span style="color:#f92672">/</span> {
</span></span><span style="display:flex;"><span>		xor edi,edi
</span></span><span style="display:flex;"><span>		xor esi,esi
</span></span><span style="display:flex;"><span>		xor edx,edx
</span></span><span style="display:flex;"><span>		mov edi,<span style="color:#ae81ff">9</span>h
</span></span><span style="display:flex;"><span>		jmp Mloop
</span></span><span style="display:flex;"><span>		Xloop:
</span></span><span style="display:flex;"><span>		inc esi
</span></span><span style="display:flex;"><span>		Mloop:
</span></span><span style="display:flex;"><span>		mov edx, [arr <span style="color:#f92672">+</span> esi <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>		push edx
</span></span><span style="display:flex;"><span>		mov eax,fNum
</span></span><span style="display:flex;"><span>		push eax
</span></span><span style="display:flex;"><span>		call printf
</span></span><span style="display:flex;"><span>		add esp,<span style="color:#ae81ff">8</span>
</span></span><span style="display:flex;"><span>		cmp edi,esi
</span></span><span style="display:flex;"><span>		jne Xloop
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;pause&#34;</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="结构体和api">结构体和API</h3>
<p>汇编语言结构体</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">.586
.model flat,stdcall

.data
info struct ;声明结构体
x dword ?
y dword ?
info ends

m_info info &lt;&gt; ;初始化结构体
.code

main proc
	mov eax,5
	mov m_info.x,eax
	mov ebx,m_info.x
	mov eax,eax
main endp

end main
</code></pre><h2 id="x64汇编">x64汇编</h2>
<p>x64和x86汇编寄存器区别</p>
<blockquote>
<p>x86 : <code>eax ebx ecx edx esi edi ebp esp eip eflags</code></p>
<p>x64 : <code>rax rbx rcx rdx rsi rdi rbp rsp rip rflags </code></p>
<p>x64扩展 ： <code>r8 r9 r10 r11 r12 r13 r14 r15</code></p>
</blockquote>
<h2 id="汇编代码剽窃小技巧">汇编代码剽窃小技巧</h2>
<ol>
<li>所有的jcc死地址，都要改成标号</li>
<li>所有的call，都要确定，是系统函数，还是自己的函数，想办法call过去</li>
<li>一切检查或者初始化类的无用代码，全部去掉</li>
<li>一些必要逻辑里的不合理东西，去掉这些，然后自己写代码，让他合理化</li>
</ol>
<h2 id="16位32位64位汇编的区别">16位/32位/64位汇编的区别</h2>
<p>区别</p>
<blockquote>
<p>16位：实模式，16位处理器内的内部，最多可以处理存储的长度为16位。</p>
<p>32位：保护模式，32位处理器内的内部，最多可以处理存储的长度为32位。</p>
<p>64位：保护模式，64位处理器内的内部，最多可以处理存储的长度为64位。</p>
</blockquote>
<p>通用寄存器简介</p>
<table>
<thead>
<tr>
<th>位数</th>
<th>通用寄存器</th>
<th>扩展</th>
</tr>
</thead>
<tbody>
<tr>
<td>16</td>
<td>AX BX CX DX SI DI BP SP</td>
<td>R8W R9W R10W R11W R12W R13W R14W R15W</td>
</tr>
<tr>
<td>32</td>
<td>EAX EBX ECX EDX ESI EDI EBP ESP</td>
<td>R8D R9D R10D R11D R12D R13D R14D R15D</td>
</tr>
<tr>
<td>64</td>
<td>RAX RBX RCX RDX RSI RDI RBP RSP</td>
<td>R8 R9 R10 R11 R12 R13 R14 R15</td>
</tr>
</tbody>
</table>
<p>基本执行环境</p>
<table>
<thead>
<tr>
<th>32位</th>
<th>64位</th>
</tr>
</thead>
<tbody>
<tr>
<td>8个32位通用寄存器</td>
<td>16个64位通用寄存器</td>
</tr>
<tr>
<td>标志寄存器EFLAGS</td>
<td>标志寄存器RFLAGS</td>
</tr>
<tr>
<td>指令寄存器EIP</td>
<td>指令寄存器RIP</td>
</tr>
</tbody>
</table>
<h3 id="eflags寄存器">EFLAGS寄存器</h3>
<p>Eflags寄存器，Eflags寄存器包含了独立的二进制位，用于控制CPU操作。或是反应一些CPU操作的结果。有些指令可以测试和控制这些单独的处理器标志位。</p>
<h3 id="mmx寄存器">MMX寄存器</h3>
<p>在实现高级多媒体和通信应用时，MMX技术提高了Intel处理器的性能。8个64位MMX寄存器支持成为SIMD的特殊指令。顾名思义，MMX指令对MMX寄存器中的数据值直接进行并行操作。虽然它们看上去是独立的寄存器，但是MMX寄存器实际上是浮点单元中使用的同样寄存器的别名。</p>
<h2 id="通用寄存器-1">通用寄存器</h2>
<p>eax：累加器，操作数和结果数据累加器，返回值运算结果一般都存储在这里</p>
<p><img src="/images/ASM/image-20210811183106370.png" alt="image-20210811183106370"></p>
<p>ebx：基地址，DS段的数据指针，在内存寻址的时候存放基地址</p>
<p><img src="/images/ASM/image-20210811183206737.png" alt="image-20210811183206737"></p>
<p>ecx：计数器，字符串和循环操作的计数器</p>
<p><img src="/images/ASM/image-20210811183244169.png" alt="image-20210811183244169"></p>
<p>edx：用于存储部分乘法结果和部分除法被除数</p>
<p><img src="/images/ASM/image-20210811183411998.png" alt="image-20210811183411998"></p>
<p>ebp：基址指针，SS段的数据指针</p>
<p><img src="/images/ASM/image-20210811183548209.png" alt="image-20210811183548209"></p>
<p>esp：栈帧指针，一般指向栈顶，所以也被称为栈顶指针</p>
<p><img src="/images/ASM/image-20210811183809151.png" alt="image-20210811183809151"></p>
<p>edi：字符串操作的目标指针，ES段的数据指针</p>
<p><img src="/images/ASM/image-20210811183910749.png" alt="image-20210811183910749"></p>
<p>esi：字符串操作的源指针，SS段的数据指针</p>
<p><img src="/images/ASM/image-20210811184031993.png" alt="image-20210811184031993"></p>
<h2 id="冯诺依曼">冯诺依曼</h2>
<p>计算机科学的奠基者</p>
<ul>
<li>艾伦·麦锡森·图灵  - - - 图灵机</li>
<li>约翰·冯·诺依曼  - - - 数据存储的体系结构</li>
</ul>
<p>约翰·冯·诺依曼</p>
<blockquote>
<p>1903年 出生犹太家庭</p>
<p>1926年 布达佩斯大学数学博士学位</p>
<p>1930年 接受了普林斯顿大学客座教授的职位</p>
<p>1931年 普林斯顿大学终身教授</p>
<p>1933年 普林斯顿高等研究院</p>
<p>1937年 美国公民</p>
<p>1938年 获博修奖</p>
<p>1954年 美国原子能委员会委员</p>
<p>1957 在华盛顿德里医院去世</p>
</blockquote>
<h3 id="冯诺依曼体系">冯诺依曼体系</h3>
<p>计算机由控制器、运算器、存储器、输入设备、输出设备五部分组成。</p>
<p>冯诺依曼提出的计算机体系结构，奠定了现代计算机的结构理念</p>
<p><img src="/images/ASM/image-20210811190118360.png" alt="image-20210811190118360"></p>
<h2 id="内存基础">内存基础</h2>
<h3 id="什么是内存">什么是内存</h3>
<p>在冯诺依曼结构中用来存储程序和数据的部件叫做存储器，我们的计算机可以正常的运行，主要依靠的就是存储器的记忆能力。存储器分为主存储器和辅助存储器，主存储器也叫内存储器，也就是我们常说的内存</p>
<h3 id="内存寻址范围">内存寻址范围</h3>
<blockquote>
<p>现在主流的系统是32位系统和64位系统</p>
<p>32位系统内存的寻址范围是0x00000000-0xFFFFFFFF</p>
<p>32位系统内存最大寻址范围是0xFFFFFFFF+1(4294967296) - - - 4GB</p>
<p>64位内存的寻址范围是0x0000000000000000-0xFFFFFFFFFFFFFFFF</p>
</blockquote>
<p><img src="/images/ASM/image-20210811191257593.png" alt="image-20210811191257593"></p>
<h3 id="内存和寄存器的区别">内存和寄存器的区别</h3>
<p>寄存器：数量少，在CPU内部，速度极快，但是价格昂贵</p>
<p>内存：数量庞大，相对寄存器而言，速度较慢，但是价格便宜</p>
<h3 id="内存的五种表现形式">内存的五种表现形式</h3>
<p>立即数：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">MOV EAX, DWORD PTR DS:[0x???????]
</code></pre><p>寄存器：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">MOV EBX, 0x????????
MOV EAX, DWORD PTR DS:[EBX]
</code></pre><p>寄存器+立即数</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">MOV EBX, 0x???????
MOV EAX, DWORD PTR DS:[EBX+4]
</code></pre><p>比例因子：[REG+REG*{1,2,4,8}]</p>
<p>数组元素地址=数组首地址+元素索引*数组元素占用空间</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">MOV EAX, 0x????????
MOV EBX, 0x2
MOV ECX, DWORD PTR DS:[EAX+EBX*4]
</code></pre><p>比例因子+立刻数：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">MOV EAX, 0x????????
MOV EBX, 0x2
MOV ECX, DWORD PTR DS:[EAX+EBX*4+1]
</code></pre><h3 id="数据存储模式">数据存储模式</h3>
<p>大端序：数据高位在内存低位，数据低位在内存高位</p>
<p>小端序：数据高位在内存高位，数据低位在内存低位</p>
<p>地址0x77 66 55 44</p>
<p>大端序：念的时候是77 66 55 44</p>
<p>小端序：念的时候是44 55 66 77</p>
<p>大端序常用于ARM架构</p>
<p>小端序常用于x86、AMD64架构</p>
<h2 id="eflags寄存器-1">EFLAGS寄存器</h2>
<p>CF：进位借位标志位</p>
<p>PF：奇偶标志位</p>
<p>AF：辅助进位标志位</p>
<p>ZF：0标志位</p>
<p>SF：符号标志位</p>
<p>TF：单目标志位</p>
<p>IF：中断标志位</p>
<p>DF：方向标志位</p>
<p>OF：溢出标志位</p>
<h2 id="数学运算">数学运算</h2>
<h3 id="加法">加法</h3>
<p>加法指令 ADD（Addition）</p>
<p>格式：ADD OPRD1, OPRD2</p>
<p>功能：两数相加</p>
<p>加法指令运算的结果对CF、SF、OF、PF、ZF、AF都会有影响</p>
<p>不允许OPRD1与OPRD2同时为存储器</p>
<hr>
<p>带进位加法指令 ADC（Addition Carry)</p>
<p>格式：ADC OPRD1, OPRD2</p>
<p>功能：OPRD1 = OPRD1 + OPRD2 + CF</p>
<h3 id="减法">减法</h3>
<p>减法指令 SUB（Subtract）</p>
<p>格式：SUB OPRD1, OPRD2</p>
<p>功能：两个操作数的相减，即从OPRD1中减去OPRD2，其结果放在OPRD1中。指令的类型及对标志位的影响与ADD指令相同，注意立即数不能用于目的操作数，两个存储器操作数之间不能直接相减，操作数可为8位或16位的无符号数或带符号数。</p>
<hr>
<p>带借位减法指令 SBB（Subtraction with Borrow）</p>
<p>格式：SBB OPRD1, OPRD2</p>
<p>功能：进行两个操作数的相减再减去CF进位标志位，即从OPRD1 = OPRD1 - OPRD2 -CF，其结果放在OPDR1中。</p>
<h3 id="乘法">乘法</h3>
<p>无符号数乘法指令 MUL（Multiply）</p>
<p>格式：MUL OPRD</p>
<hr>
<p>带符号数乘法指令 IMUL（Integer Multiply）</p>
<p>格式：IMUL OPRD、</p>
<p>功能：乘法操作</p>
<p>OPRD为通用寄存器或寄存器操作数</p>
<p>本指令影响标志位CF及OF</p>
<h3 id="除法">除法</h3>
<p>无符号数除法指令 DIV（Division）</p>
<p>格式：DIV OPRD</p>
<p>功能：实现两个无符号二进制数除法运算</p>
<hr>
<p>带符号数除法指定 IDIV（Integer Division）</p>
<p>格式：IDIV OPRD</p>
<p>功能：这实现两个带符号数的二进制除法运算</p>
<blockquote>
<p>16bit，分存2个8bit AH:AL 商AL 余AH</p>
<p>32bit，分存2个16bit DX:AX 商AX 余DX</p>
<p>64bit，分存2个32bit EDX:EAX 商EAX 余EDX</p>
<p>128bit，分存2个64bit RDX:RAX 商RAX 余RDX</p>
</blockquote>
<h3 id="自增">自增</h3>
<p>加1指令 INC（Increment by 1）</p>
<p>格式：INC OPRD</p>
<p>功能：OPRD = OPRD + 1</p>
<h3 id="自减">自减</h3>
<p>减1指令 DEC（Decrement by 1）</p>
<p>格式：DEC OPRD</p>
<p>功能：OPRD = OPRD - 1</p>
<h2 id="逻辑运算">逻辑运算</h2>
<h3 id="与">与</h3>
<p>逻辑与运算指令 AND</p>
<p>格式：AND OPRD1, OPRD2</p>
<p>功能：对两个操作数实现按位逻辑与运算，结果送至目的操作数。本指令可以进行字节或字的 ‘与‘ 运算，OPRD1 &lt; - - OPRD1 and OPRD2.</p>
<p>本指令影响标志位PF、SF、ZF，使CF=0、OF=0.例如，在同一个通用寄存器自身相与时，  操作数虽不变，但使CF置零。本指令主要用于修改操作数或置某些位为零。</p>
<h3 id="或">或</h3>
<p>逻辑或指令 OR</p>
<p>格式：OR OPRD1, OPRD2</p>
<p>功能：OR指令完成对两个操作数按位的 ‘或’ 运算，结果送至目的操作数中，本指令可以进 - - - - 行字节或字的 ‘或’ 运算。OPRD1 &lt; - - OPRD1 OR  OPRD2。</p>
<h3 id="异或操作">异或操作</h3>
<p>逻辑异或运算指令 XOR</p>
<p>格式：XOR OPRD1, OPRD2</p>
<p>功能：实现两个操作数按位 ‘异或’ 运算，结果送至目的操作数中。OPRD1 &lt; - - OPRD1 XOR OPRD2</p>
<h3 id="非运算">非运算</h3>
<p>逻辑操作符 NOT</p>
<p>格式：NOT exp</p>
<p>功能：按位求反</p>
<h2 id="堆栈操作">堆栈操作</h2>
<h3 id="什么是堆栈">什么是堆栈</h3>
<ol>
<li>栈是一个后进先出的存储区域，位于堆栈段中，SS段寄存器描述的就是堆栈段的地址</li>
<li>栈的数据出口位于栈顶，也就是esp寄存器所指向的位置</li>
<li>栈顶是低位，也就是地址较小的一侧，由ebp寄存器指向的栈底，并不会改变</li>
</ol>
<h3 id="栈操作指令">栈操作指令</h3>
<p>PUSH：压栈操作，32位汇编首先ESP-4，留出一个空间，然后把要压入栈中的内容压入</p>
<p>POP：出栈指令，32位汇编首先将栈顶的数据弹出给指定的目标，然后ESP+4，清掉空间</p>
<h3 id="栈的作用">栈的作用</h3>
<ol>
<li>存储少量数据</li>
<li>保存寄存器环境</li>
<li>传递参数</li>
</ol>
<h2 id="数据移动指令">数据移动指令</h2>
<h3 id="mov指令">MOV指令</h3>
<p>数据传送指令MOV</p>
<p>格式：MOV OPRD1, OPRD2</p>
<p>功能：本指令将一个源操作数送到目的操作数中，即OPRD1 &lt; - - OPRD2</p>
<p>说明：</p>
<ul>
<li>OPRD1为目的操作数，可以是寄存器、存储器、累加器</li>
<li>OPRD2为源操作数，可以是寄存器、存储器、累加器和立即数</li>
</ul>
<h3 id="lea指令">LEA指令</h3>
<p>有效地址传送指令 LEA</p>
<p>格式：LEA OPRD1，OPRD2</p>
<p>功能：将源操作数给出的有效地址传送到指定的寄存器中</p>
<p>OPRD1必须是寄存器</p>
<h3 id="xchg指令">XCHG指令</h3>
<p>数据交换指令 XCHG</p>
<p>格式：XCHG OPRD1, OPRD2 其中的OPRD1为目的操作数，OPRD2为源操作数</p>
<p>功能：将两个操作数相互交换位置，该指令把源操作数OPRD2与目的操作数OPRD1交换</p>
<h2 id="比较指令">比较指令</h2>
<h3 id="cmp指令-1">CMP指令</h3>
<p>比较指令 CMP（Compare）</p>
<p>格式：CMP OPRD1, OPRD2</p>
<p>功能：对两数进行相减，进行比较</p>
<h3 id="test指令">TEST指令</h3>
<p>测试指令 TEST</p>
<p>格式：TEST OPRD1,OPRD2</p>
<p>功能：其中OPRD1、OPRD2的含义同AND指令一样，也是对两个操作数进行按位的 ‘与’ 运算，- - - - 唯一不同之处是不将 ‘与’ 的结果送目的操作数，即本指令对两个操作数的内容均不进行修改，仅是在逻辑与操作后，对标志位重新置位</p>
<h2 id="jcc条件转移指令">JCC条件转移指令</h2>
<h3 id="常用的jcc指令">常用的JCC指令</h3>
<p>JMP：无条件跳转</p>
<p>JZ/JE：ZF = 1 等于0或相等跳转</p>
<p>JNZ/JNE：ZF = 0 不等于0或者不相等跳转</p>
<p>JBE/JNA：CF = 1/ZF = 1 低于等于/不高于跳转</p>
<p>JNBE/JA：CF = 0/ ZF = 0 不低于等于/高于跳转</p>
<p>JL/JNGE：SF！=OF 小于/不大于等于跳转</p>
<p>JNL/JGE：SF = OF 不小于/大于等于跳转</p>
<h3 id="jcc表">JCC表</h3>
<table>
<thead>
<tr>
<th>JCC指令</th>
<th>中文含义</th>
<th>英文原意</th>
<th>检查符号位</th>
<th>典型C应用</th>
</tr>
</thead>
<tbody>
<tr>
<td>JZ/JE</td>
<td>若为0则跳转；若相等则跳转</td>
<td>jump if zero;jump if equal</td>
<td>ZF=1</td>
<td>if (i == j);if (i == 0);</td>
</tr>
<tr>
<td>JNZ/JNE</td>
<td>若不为0则跳转；若不相等则跳转</td>
<td>jump if not zero;jump if not equal</td>
<td>ZF=0</td>
<td>if (i != j);if (i != 0);</td>
</tr>
<tr>
<td>JS</td>
<td>若为负则跳转</td>
<td>jump if sign</td>
<td>SF=1</td>
<td>if (i &lt; 0);</td>
</tr>
<tr>
<td>JNS</td>
<td>若为正则跳转</td>
<td>jump if not sign</td>
<td>SF=0</td>
<td>if (i &gt; 0);</td>
</tr>
<tr>
<td>JP/JPE</td>
<td>若1出现次数为偶数则跳转</td>
<td>jump if Parity (Even)</td>
<td>PF=1</td>
<td>(null)</td>
</tr>
<tr>
<td>JNP/JPO</td>
<td>若1出现次数为奇数则跳转</td>
<td>jump if not parity (odd)</td>
<td>PF=0</td>
<td>(null)</td>
</tr>
<tr>
<td>JO</td>
<td>若溢出则跳转</td>
<td>jump if overflow</td>
<td>OF=1</td>
<td>(null)</td>
</tr>
<tr>
<td>JNO</td>
<td>若无溢出则跳转</td>
<td>jump if not overflow</td>
<td>OF=0</td>
<td>(null)</td>
</tr>
<tr>
<td>JC/JB/JNAE</td>
<td>若进位则跳转；若低于则跳转；若不高于等于则跳转</td>
<td>jump if carry;jump if below;jump if not above equal</td>
<td>CF=1</td>
<td>if (i &lt; j);</td>
</tr>
<tr>
<td>JNC/JNB/JAE</td>
<td>若无进位则跳转；若不低于则跳转；若高于等于则跳转；</td>
<td>jump if not carry;jump if not below;jump if above equal</td>
<td>CF=0</td>
<td>if (i &gt;= j);</td>
</tr>
<tr>
<td>JBE/JNA</td>
<td>若低于等于则跳转；若不高于则跳转</td>
<td>jump if below equal;jump if not above</td>
<td>ZF=1或CF=1</td>
<td>if (i &lt;= j);</td>
</tr>
<tr>
<td>JNBE/JA</td>
<td>若不低于等于则跳转；若高于则跳转</td>
<td>jump if not below equal;jump if above</td>
<td>ZF=0或CF=0</td>
<td>if (i &gt; j);</td>
</tr>
<tr>
<td>JL/JNGE</td>
<td>若小于则跳转；若不大于等于则跳转</td>
<td>jump if less;jump if not greater equal</td>
<td>SF != OF</td>
<td>if (si &lt; sj);</td>
</tr>
<tr>
<td>JNL/JGE</td>
<td>若不小于则跳转；若大于等于则跳转；</td>
<td>jump if not less;jump if greater equal</td>
<td>SF = OF</td>
<td>if (si &gt;= sj);</td>
</tr>
<tr>
<td>JLE/JNG</td>
<td>若小于等于则跳转；若不大于则跳转</td>
<td>jump if less equal;jump if not greater</td>
<td>ZF != OF 或 ZF=1</td>
<td>if (si &lt;= sj);</td>
</tr>
<tr>
<td>JNLE/JG</td>
<td>若不小于等于则跳转；若大于则跳转</td>
<td>jump if not less equal;jump if greater</td>
<td>SF=0F 且 ZF=0</td>
<td>if(si&gt;sj)</td>
</tr>
</tbody>
</table>
<h2 id="串操作指令">串操作指令</h2>
<h3 id="movs指令">MOVS指令</h3>
<p>字符串传送指令 MOVS</p>
<p>格式：MOVS OPRD1, OPRD2 MOVSB MOVSW</p>
<p>功能：OPRD1 &lt; - - OPRD2</p>
<p>说明：</p>
<ol>
<li>其中OPRD2为源串符号地址，OPRD1为目的串符号地址</li>
</ol>
<h3 id="stos指令">STOS指令</h3>
<p>字符串存储指令 STOS</p>
<p>格式：STOS OPRD</p>
<p>功能：把AL(字节)或AX(字)中的数据存储到DI为目的串地址指针所寻址的存储器单元中去指针DI将根据DF的值进行自动调整</p>
<h3 id="rep指令">REP指令</h3>
<p>重复前缀说明</p>
<p>格式：</p>
<ul>
<li>REP  ;CX&lt;&gt;0 重复执行字符串指令</li>
<li>REPZ/REPE ;CX&lt;&gt;0 且ZF=1重复执行字符串指令</li>
<li>REPNZ/REPNE ;CX&lt;&gt;0 且ZF=0重复执行字符串指令</li>
</ul>
<p>功能：在串操作指令前加上重复前缀，可以对字符串进行重复处理。由于加上重复前缀后，对应的指令代码是不同的，所以指令的功能便具有重复处理的功能，重复的次数存放在CX寄存器中</p>
<h2 id="call与retn">CALL与RETN</h2>
<h3 id="call指令">CALL指令</h3>
<p>过程调用指令 CALL</p>
<p>格式：CALL OPRD</p>
<p>功能：过程调用指令</p>
<p>相当于：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">push eip
jmp OPRD
</code></pre><h3 id="retn指令">RETN指令</h3>
<pre><code>返回指令，相当于：
</code></pre>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">pop eip
jmp eip
</code></pre><h2 id="函数">函数</h2>
<p>过程调用-函数</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">function proc
	code
function end
</code></pre><p>参数传递方式：</p>
<ol>
<li>寄存器传参</li>
<li>堆栈传参</li>
</ol>
<h2 id="win32汇编入门">WIN32汇编入门</h2>
<p>什么是API？</p>
<p>API（Application Programming Interface, 应用程序接口）是一些预先定义的函数，或指软件系统不同组成部分衔接的约定。目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问原码，或理解内部工作机制的细节</p>
<p>Windows系统除了协调应用程序的执行、内存的分配、系统资源的管理外，同时他也是一个很大的服务中心。调用这个服务中心的各种服务（每一种服务就是一个函数）可以帮助应用程序达到开启视窗、描绘图形和使用周边设备等目的，由于这些函数服务的对象是应用程序，所以称之为Application Programming Interface, 简称API函数。WIN32 API也就是Microsoft Windows 32位平台的应用程序编程接口</p>
<p>凡是在 Windows 工作环境底下执行的应用程序，都可以调用Windows API</p>
]]></content>
        </item>
        
        <item>
            <title>C语言核心内容 笔记</title>
            <link>/posts/c-core/</link>
            <pubDate>Tue, 01 Feb 2022 19:01:04 +0800</pubDate>
            
            <guid>/posts/c-core/</guid>
            <description>C语言核心 函数 基本函数
#include &amp;lt;stdio.h&amp;gt; // 函数的声明 void Hello(); int main() { // 最简单函数的调用 Hello(); return 0; } void Hello() { printf(&amp;#34;Hello!\n&amp;#34;); } #include &amp;lt;stdio.h&amp;gt; void Hello() { printf(&amp;#34;Hello!\n&amp;#34;); } int main() { // 最简单函数的调用 Hello(); return 0; } 函数的定义 返回值类型 函数名(参数列表) { 函数体 } 函数声明 所谓声明就是（Declaration）,就是告诉编译器我要使用这个函数，你现在没有找到它的定义不要紧，请不要报错，稍后我会把定义补上
参数 形参 形式参数
实参 实际参数
传值和传址 传递数值 会受到作用域的限制
传递地址 任意门不会受到作用域的限制
可变参数 #include &amp;lt;stdarg.h&amp;gt;
va_list va_start va_arg va_end #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdarg.h&amp;gt; int sum(int n, .</description>
            <content type="html"><![CDATA[<h1 id="c语言核心">C语言核心</h1>
<h2 id="函数">函数</h2>
<p>基本函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt; </span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">// 函数的声明
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">Hello</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 最简单函数的调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Hello</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">Hello</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Hello!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt; </span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">Hello</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Hello!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 最简单函数的调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">Hello</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="函数的定义">函数的定义</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">返回值类型</span> <span style="color:#960050;background-color:#1e0010">函数名</span>(<span style="color:#960050;background-color:#1e0010">参数列表</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">函数体</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="函数声明">函数声明</h3>
<p>所谓声明就是（Declaration）,就是告诉编译器我要使用这个函数，你现在没有找到它的定义不要紧，请不要报错，稍后我会把定义补上</p>
<h3 id="参数">参数</h3>
<p>形参 形式参数</p>
<p>实参 实际参数</p>
<h4 id="传值和传址">传值和传址</h4>
<p>传递数值 会受到作用域的限制</p>
<p>传递地址 任意门不会受到作用域的限制</p>
<h4 id="可变参数">可变参数</h4>
<p><code>#include &lt;stdarg.h&gt;</code></p>
<ul>
<li>va_list</li>
<li>va_start</li>
<li>va_arg</li>
<li>va_end</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdarg.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sum</span>(<span style="color:#66d9ef">int</span> n, ...);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sum</span>(<span style="color:#66d9ef">int</span> n, ...)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> i, sum <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	va_list vap;
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">va_start</span>(vap, n);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span>n;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		sum <span style="color:#f92672">+=</span> <span style="color:#a6e22e">va_arg</span>(vap,<span style="color:#66d9ef">int</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">va_end</span>(vap);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> sum;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> result;
</span></span><span style="display:flex;"><span>	result <span style="color:#f92672">=</span> <span style="color:#a6e22e">sum</span>(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;result = %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, result);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><hr>
<p>带参数的函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">add</span>(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 参数里的a和b都是形式参数（形参），我们在调用的时候，需要填写实际参数（实参）
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> a <span style="color:#f92672">+</span> b;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%d&#34;</span>, c);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>函数的返回值</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> nNum <span style="color:#f92672">=</span> <span style="color:#a6e22e">add</span>(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%d&#34;</span>, nNum);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b){
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> a <span style="color:#f92672">+</span> b;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> c;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="递归">递归</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">hello</span>(<span style="color:#66d9ef">int</span> n);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">hello</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">hello</span>(<span style="color:#66d9ef">int</span> n)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(n <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;hello!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">hello</span>(n<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;end&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="数组">数组</h2>
<p><strong>定义</strong></p>
<ul>
<li>
<p>类型 数组名 [元素个数]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">6</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> b[<span style="color:#ae81ff">24</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">double</span> c[<span style="color:#ae81ff">3</span>];
</span></span></code></pre></div></li>
<li>
<p>数组不能动态定义</p>
</li>
</ul>
<p><strong>访问</strong></p>
<ul>
<li>
<p>数组名[下标]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>a[<span style="color:#ae81ff">0</span>];<span style="color:#75715e">//访问a数组中的第一个元素
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>b[<span style="color:#ae81ff">1</span>];<span style="color:#75715e">//访问b数组中的第二个元素
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>c[<span style="color:#ae81ff">5</span>];<span style="color:#75715e">//访问c数组中的第六个元素
</span></span></span></code></pre></div></li>
<li>
<p>注意</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">5</span>]; <span style="color:#75715e">// 创建一个具有五个的数组
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>a[<span style="color:#ae81ff">0</span>];<span style="color:#75715e">// 访问第一个元素的下标是0，不是1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>a[<span style="color:#ae81ff">5</span>];<span style="color:#75715e">// 报错，因为第五个元素的下标是a[4]
</span></span></span></code></pre></div><p><strong>循环跟数组的关系</strong></p>
<p><em>我们常常需要使用循环来访问数组</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">10</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    a[i] <span style="color:#f92672">=</span> i;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
</ul>
<p><strong>初始化</strong></p>
<ul>
<li>
<p>将数组中所用元素初始化为0，可以这么写：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};<span style="color:#75715e">// 事实上这里只是将第一个元素赋值为0
</span></span></span></code></pre></div></li>
<li>
<p>如果是赋予不同的值，那么用逗号分隔开即可：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">0</span>};
</span></span></code></pre></div></li>
<li>
<p>你还可以只给一部分元素赋值，未被赋值的元素自动初始化为0：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>};
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 表示为前边6个元素赋值，后边4个元素系统自动初始化为0
</span></span></span></code></pre></div></li>
<li>
<p>有时候还可以偷懒，可以只给出各个元素的值，而不指定数组的长度（因为编译器会根据值的个数自动判断数组的长度）：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">0</span>};
</span></span></code></pre></div></li>
<li>
<p>C99增加了一种新特性：指定初始化的元素。这样就可以只对数组中的某些指定元素进行初始化赋值，而来被赋值的元素自动初始化为0；</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> {[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>, [<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, [<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>};
</span></span></code></pre></div></li>
</ul>
<p>最新的标准：会出现数组动态定义和越界问题的解决情况</p>
<h3 id="字符数组">字符数组</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">int main()</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>{	
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 初始化字符数组的每个元素
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> str1[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;F&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;C&#39;</span>,<span style="color:#e6db74">&#39;\0&#39;</span>};
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 可以不写元素的个数，因为编译器会自动计算
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> str3[] <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;F&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;C&#39;</span>,<span style="color:#e6db74">&#39;\0&#39;</span>};
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 使用字符串常量初始化字符数组
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> str4[] <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;FishC&#34;</span>};
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 使用字符串常量初始化，可以省略大括号
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> str5[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;FishC&#34;</span> ;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 初始化字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> str6[<span style="color:#ae81ff">128</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;FishC&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>字符串处理函数</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// strlen 字符串长度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">char</span> str[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;I love C language&#34;</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%u&#34;</span>,str)
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// strcpy 和 strncpy 复制和拷贝字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">char</span> str1[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Original String&#34;</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> str2[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;New String&#34;</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">strcpy</span>(str1,str2);<span style="color:#75715e">//大坑copy小坑会出现溢出
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">strncpy</span>(str1,str2,<span style="color:#ae81ff">5</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// strcat和strncat 连接字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">strcat</span>(str1,str2);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">strncat</span>(str1,str2,<span style="color:#ae81ff">5</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//strcmp和strncmp 比较字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(str1,str2))
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;两个字符串完全一致</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;两个字符串存在差异！</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="二维数组">二维数组</h3>
<p>平面、矩阵</p>
<p><strong>定义</strong></p>
<ul>
<li>
<p>类型 数组名 [常用表达式][常量表达式]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">6</span>][<span style="color:#ae81ff">6</span>]; <span style="color:#75715e">// 6*6, 6行6列
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">char</span> b[<span style="color:#ae81ff">4</span>][<span style="color:#ae81ff">5</span>]; <span style="color:#75715e">// 4*5, 4行5列
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">double</span> c[<span style="color:#ae81ff">6</span>][<span style="color:#ae81ff">3</span>]; <span style="color:#75715e">// 6*3, 6行3列
</span></span></span></code></pre></div><p><em>存放方式依然是线性</em></p>
</li>
</ul>
<p><strong>访问</strong></p>
<ul>
<li>
<p>1数组名[下标][下标]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>a[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>]; <span style="color:#75715e">// 访问a数组中第1行第1列的元素
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>b[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">3</span>]; <span style="color:#75715e">// 访问b数组中第2行第4列的元素
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>c[<span style="color:#ae81ff">3</span>][<span style="color:#ae81ff">3</span>]; <span style="color:#75715e">// 访问c数组中第4行第4列的元素
</span></span></span></code></pre></div></li>
<li>
<p>同样需要注意下标的取值范围，以防数组的越界访问</p>
</li>
</ul>
<p><strong>二维数组初始化</strong></p>
<ul>
<li>
<p>由于二维数组在内存中是线性存放的，因此可以将所有的数据写在一个花括号内：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">3</span>][<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">12</span>};
</span></span></code></pre></div></li>
<li>
<p>为了更直观地表示元素的分布，可以用大括号将每一行的元素括起来：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">3</span>][<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> {{<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>},{<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">8</span>},{<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">12</span>}};
</span></span></code></pre></div><p>或者</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">3</span>][<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>    {<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">8</span>},
</span></span><span style="display:flex;"><span>    {<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">12</span>}
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div></li>
<li>
<p>二维数组也可以仅对部分元素赋初值：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">3</span>][<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> {{<span style="color:#ae81ff">1</span>},{<span style="color:#ae81ff">5</span>},{<span style="color:#ae81ff">9</span>}};
</span></span></code></pre></div></li>
<li>
<p>如果希望整个二维数组初始化为0，那么直接在大括号里写一个0即可：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">3</span>][<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
</span></span></code></pre></div></li>
<li>
<p>C99同样增加了一种新特性：指定初始化的元素。这样就可以只对数组中的某些指定元素进行初始化赋值，而未被赋值的元素自动初始化为0：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[<span style="color:#ae81ff">3</span>][<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> {[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, [<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, [<span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>};
</span></span></code></pre></div></li>
<li>
<p>二维数组的初始化也能偷懒，让编译器根据元素的数量计算数组的长度。但只有第1维的元素个数可以不写，其他维度必须写上：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a[][<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> {{<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>},{<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">6</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">8</span>},{<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">12</span>}};
</span></span></code></pre></div></li>
</ul>
<p><em>矩阵的转置</em></p>
<blockquote>
<p>遍历数字变更</p>
<p>进行转置</p>
</blockquote>
<h2 id="字符串">字符串</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 这种声明方式会默认在最后添加一个\0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// 在我们这个C和C++中，字符串都是以00，也就是、0结尾的
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> szStr[] <span style="color:#f92672">=</span> { <span style="color:#e6db74">&#34;My name is rkvir&#34;</span> };
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 像下面这种，没有默认添加的，就需要字节手动添加00，也就是\0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> cStr[] <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;M&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39; &#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39; &#39;</span>, <span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39; &#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;\0&#39;</span>};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> pStr <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;My name is rkvir&#34;</span>;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>,cStr);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="字符操作">字符操作</h3>
<p>获取一个字符并进行输出：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> a;
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">=</span> <span style="color:#a6e22e">getchar</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">putchar</span>();
</span></span></code></pre></div><p>C语言<code>ctype.h</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;ctype.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">isalpha</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">isalnum</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">isblank</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">iscntrl</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">isdigit</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">isgraph</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">islower</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">isprint</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">ispunct</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">isspace</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">isupper</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">isxdigit</span>();
</span></span></code></pre></div><p>大小写处理函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> a <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;a&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> flag <span style="color:#f92672">=</span> <span style="color:#a6e22e">toupper</span>(a);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> flags <span style="color:#f92672">=</span> <span style="color:#a6e22e">tolower</span>(flag);
</span></span></code></pre></div><p>字符串接收输出</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> string;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span> ((string <span style="color:#f92672">=</span> <span style="color:#a6e22e">getchar</span>()) <span style="color:#f92672">!=</span> EOF)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">putchar</span>(string);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// EOF 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// CTRL+C
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// CTRL+Z
</span></span></span></code></pre></div><h3 id="字符串输入">字符串输入</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// gets fgets scanf
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">char</span> szStr[<span style="color:#ae81ff">50</span>]
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">gets</span>(szStr); <span style="color:#75715e">// 以回车结尾
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fget</span>(szStr,<span style="color:#ae81ff">50</span>,stdin); <span style="color:#75715e">// 接受指定长度,也会接受回车
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>,<span style="color:#f92672">&amp;</span>szStr); <span style="color:#75715e">// 接受地址
</span></span></span></code></pre></div><h3 id="字符串输出">字符串输出</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>pStr <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello World!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#75715e">// puts printf
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// puts这个函数会自动添加换行符
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">puts</span>(szStr);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fputs</span>(szStr, stdout);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>,szStr);
</span></span></code></pre></div><h3 id="字符串操作">字符串操作</h3>
<p>字符串长度</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// strlen
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> szStr[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello World!&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> Length <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(szStr);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>字符串拼接</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// strcat strncat
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> szStr1[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> szStr2[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;rkvir&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *strcat有两个参数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *第一个参数是目的字符串，第二个参数是源字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *strcat的作用就是把源字符串拼接大屏目的字符串的末尾处，并且将拼接后的字符串存储到目的字符串中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">strcat</span>(); <span style="color:#75715e">// 会出溢出
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">// strncat 控制拼接长度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">strncat</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>字符串比对</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> szStr1[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello World!&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> szStr2[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> szStr3[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello World!&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// strcmp strncmp
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">/* strcmp有两个参数，就是待比较的两个字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 返回值是结果
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 如果返回值等于0，那么两个字符串就相等
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 如果返回值不等于0，那么两个字符串就不相等
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> ret <span style="color:#f92672">=</span> <span style="color:#a6e22e">strcmp</span>(szStr1, szStr3);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* strncmp有三个参数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 前两个参数是待比较的两个字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 但是第三个字符，是比对的字符数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> ret0 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strncmp</span>(szStr1, szStr2, <span style="color:#ae81ff">6</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>字符串拷贝</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> szStr1[<span style="color:#ae81ff">50</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> szStr2[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello&#34;</span>;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// strcpy strncpy
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">/* strcpy有两个参数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 第一个参数是目的字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 第二个参数是源字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * strcpy的作用就是把源字符串拷贝到目的字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">strcpy</span>(szStr1,szStr2);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">strncpy</span>(szStr1,szStr2<span style="color:#ae81ff">.2</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>字符串格式化</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> szStr1[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> nNum <span style="color:#f92672">=</span> <span style="color:#ae81ff">11</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> cS <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;A&#39;</span>;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> szStr2[<span style="color:#ae81ff">100</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* sprintf 三个参数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 第一个参数，就是目的字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 第二个参数，是格式化符号
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 第三个参数就是变量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sprintf</span>(szStr2, <span style="color:#e6db74">&#34;%s %d %c&#34;</span>, szStr1,nNum,cs);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="指针">指针</h2>
<p>内存储存的真相：数据储存在内存地址上</p>
<h3 id="指针和指针变量">指针和指针变量</h3>
<p>指针：指向内存储存的地址</p>
<h4 id="指针变量">指针变量</h4>
<p><strong>定义指针变量</strong></p>
<ul>
<li>
<p>类型名 *指针变量名</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>pa;<span style="color:#75715e">// 定义一个指向字符型的指针变量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>pb; <span style="color:#75715e">// 定义一个指向整型的指针变量
</span></span></span></code></pre></div></li>
</ul>
<p><strong>取地址运算符和取值运算符</strong></p>
<ul>
<li>
<p>如果需要获取某个变量的地址，可以使用取地址运算符（&amp;）：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>pa <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>a;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>pb <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>f;
</span></span></code></pre></div></li>
<li>
<p>如果需要访问指针变量指向的数据，可以使用取值运算符（*）：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%c,%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">*</span>pa,<span style="color:#f92672">*</span>pd);
</span></span></code></pre></div></li>
</ul>
<p><strong>避免访问未初始化的指针</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;studio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>a;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>a <span style="color:#f92672">=</span> <span style="color:#ae81ff">123</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><em>操作非常危险</em></p>
<h3 id="指针和数组">指针和数组</h3>
<p><strong>数组名的真实身份</strong></p>
<p>数组名其实是数组第一个元素的地址！</p>
<p><strong>指向数组的指针</strong></p>
<ul>
<li>
<p>如果用一个指针指向数组，应该怎么做呢？</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>p;
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> a; <span style="color:#75715e">// 语句1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>p <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>a[<span style="color:#ae81ff">0</span>]; <span style="color:#75715e">// 语句2
</span></span></span></code></pre></div></li>
</ul>
<p>==<strong>指针的运算</strong>==</p>
<ul>
<li>当指针指向数组元素的时候，我们可以对指针变量进行加减运算，这样做的意义相当于指向距离指针所在位置向前或向后第n个元素</li>
<li>对比标准的下标法访问数组元素，这种使用指针进行间接访问的方法叫做指针法</li>
<li>需要郑重强调的是：p+1并不是简单地将地址加1，而是指向数组的下一个元素</li>
</ul>
<h4 id="指针和数组的区别">指针和数组的区别</h4>
<p><em>数组名只是一个地址，而指针是一个左值</em></p>
<p><strong>指针数组</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>p1[<span style="color:#ae81ff">5</span>]; <span style="color:#75715e">//指针数组
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 初始化
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> d <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> e <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>pl[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> {<span style="color:#f92672">&amp;</span>a ,<span style="color:#f92672">&amp;</span>b ,<span style="color:#f92672">&amp;</span>c ,<span style="color:#f92672">&amp;</span>d ,<span style="color:#f92672">&amp;</span>e };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> i;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span>; i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,<span style="color:#f92672">*</span>pl[i]);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><em>指针数组是一个数组，每个数组元素存放一个指针变量</em></p>
<p><strong>数组指针</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> (<span style="color:#f92672">*</span>p2)[<span style="color:#ae81ff">5</span>];
</span></span></code></pre></div><p><em>数组指针是一个指针，它指向的是一个数组</em></p>
<h4 id="指针和二维数组">指针和二维数组</h4>
<p><strong>array表示的是什么？</strong></p>
<p>array表示指向5个元素的数组指针（即指向一维数组的数组指针）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#f92672">*</span>(array<span style="color:#f92672">+</span>i) <span style="color:#f92672">==</span> array[i];
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(<span style="color:#f92672">*</span>(array<span style="color:#f92672">+</span>i)<span style="color:#f92672">+</span>j) <span style="color:#f92672">==</span> array[i][j];
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span>(<span style="color:#f92672">*</span>(<span style="color:#f92672">*</span>(array<span style="color:#f92672">+</span>i)<span style="color:#f92672">+</span>j)<span style="color:#f92672">+</span>k) <span style="color:#f92672">==</span> array[i][j][k];
</span></span></code></pre></div><h4 id="数组指针和二维指针">数组指针和二维指针</h4>
<ul>
<li>
<p>初始化二维数组是可以偷懒的：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> array[<span style="color:#ae81ff">2</span>][<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> {{<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>}, {<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>}};
</span></span></code></pre></div><p>可以写成</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> array[][<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> {{<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>},{<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>}};
</span></span></code></pre></div></li>
<li>
<p>定义一个数组指针是这样的：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> (<span style="color:#f92672">*</span>p)[<span style="color:#ae81ff">3</span>];
</span></span></code></pre></div></li>
</ul>
<h3 id="void指针">void指针</h3>
<p>void指针我们把它称之为通用指针，就是可以指向任意类型的数据。也就是说，任何类型的指针都可以赋值给void指针</p>
<p>取出void指针的数值需要使用到强制类型转换</p>
<h3 id="null指针">NULL指针</h3>
<p>NULL指针即为空指针</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define NULL ((void *)0)
</span></span></span></code></pre></div><p>当你还不清楚要将指针初始化为什么地址时，请将它初始化NULL；在对指针进行解引用时，先检查该指针是否为NULL。这种策略可以为你今后编写大型程序节省大量的调试时间。</p>
<h3 id="指针之指针">指针之指针</h3>
<p>指向指针的指针</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> num <span style="color:#f92672">=</span> <span style="color:#ae81ff">520</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>p <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>num;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> <span style="color:#f92672">**</span>pp <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>p;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="指针数组和指向指针的指针">指针数组和指向指针的指针</h4>
<p>至少有两个好处：</p>
<ul>
<li>避免重复分配内存</li>
<li>只需要进行一处修改</li>
</ul>
<p>代码的灵活性和安全性都有了显著地提高！</p>
<p>数组指针和二维数组</p>
<h3 id="常量和指针">常量和指针</h3>
<p>const关键字，使变量可读取而不可修改</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> price <span style="color:#f92672">=</span> <span style="color:#ae81ff">520</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> a <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;a&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">float</span> pi <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.14</span>
</span></span></code></pre></div><ul>
<li>指针可以修改为指向不同的常量</li>
<li>指针可以修改为指向不同的变量</li>
<li>可以通过解引用来读取指针指向的数据</li>
<li>不可以通过解引用修改指针指向的数据</li>
</ul>
<p>常量指针</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> num <span style="color:#f92672">=</span> <span style="color:#ae81ff">520</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">const</span> p <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>num;
</span></span></code></pre></div><ul>
<li>指向非常量的常量指针
<ul>
<li>指针自身不可以被修改</li>
<li>指针指向的值可以被修改</li>
</ul>
</li>
<li>指向常量的常量指针
<ul>
<li>指针自身不可以被修改</li>
<li>指针指向的值也不可以被修改</li>
</ul>
</li>
</ul>
<h3 id="指针与函数">指针与函数</h3>
<p>指针函数，是函数</p>
<p>函数指针，是指针</p>
<h4 id="函数指针">函数指针</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a <span style="color:#f92672">+</span> b;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#a6e22e">int</span>(<span style="color:#f92672">*</span>Myadd)(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b);
</span></span><span style="display:flex;"><span>Myadd my <span style="color:#f92672">=</span> add;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> <span style="color:#a6e22e">my</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>);
</span></span></code></pre></div><p>应用场景：</p>
<ul>
<li>系统库API</li>
<li>load dll</li>
<li>模块基质</li>
<li>GetProcAddress 获取函数地址</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> (<span style="color:#f92672">*</span>Myadd)(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//不带括号不带参数的函数名，其实就是函数的首地址
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    MyAdd <span style="color:#f92672">=</span> add;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> a, <span style="color:#66d9ef">int</span> b)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a<span style="color:#f92672">+</span>b;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="指针函数">指针函数</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>a);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> arrNum[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">5</span>};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>ret <span style="color:#f92672">=</span> <span style="color:#a6e22e">add</span>(arrNum);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> nNum <span style="color:#f92672">=</span> ret[<span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">add</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>a)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> a;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="存储类">存储类</h2>
<ul>
<li>静态存储时期</li>
<li>自动存储时期</li>
</ul>
<p>静态存储类</p>
<ul>
<li>自动</li>
<li>寄存器 register</li>
<li>具有外部链接的静态存储类 extern</li>
<li>具有内部链接的静态存储类 static</li>
<li>空链接的静态存储类 static</li>
</ul>
<h2 id="动态内存管理">动态内存管理</h2>
<blockquote>
<p>申请内存</p>
<p>释放内存</p>
</blockquote>
<p>数组是默认给你开辟了一块连续空间</p>
<p><code>malloc</code>在堆上面申请内存，返回的是<code>void *</code> 单位是字节</p>
<p><code>memset</code>，把一段内存，全部刷成你想要的值</p>
<p><code>free</code>，释放一段内存的空间</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> szStr;
</span></span><span style="display:flex;"><span>    szStr <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">malloc</span>(<span style="color:#ae81ff">200</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>));
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(szStr, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">200</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>));
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">free</span>(szStr);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="文件操作">文件操作</h2>
<p>文件指针：位于文件头部的指针，然后可以对其移动，这样就可以读取文件任意位置的数据了，文件指针移动到末尾出的时候，文件就读取完了</p>
<p>fopen的模式</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>“r”</td>
<td>打开一个用于读取的文件，该文件必须存在。</td>
</tr>
<tr>
<td>“w”</td>
<td>创建一个用于写入的空文件，如果文件名称与已存在的文件相同，则会删除已有文件的内容，文件视为一个新的空文件。</td>
</tr>
<tr>
<td>“a”</td>
<td>追加到一个文件，写操作向文件末尾追加数据，如果文件不存在，则创建文件。</td>
</tr>
<tr>
<td>“r+”</td>
<td>打开一个用于更新的文件，可读取也可写入，该文件必须存在。</td>
</tr>
<tr>
<td>“w+”</td>
<td>创建一个用于读写的空文件。</td>
</tr>
<tr>
<td>“a+”</td>
<td>打开一个用于读取和追加的文件。</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 声明文件指针
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	FILE <span style="color:#f92672">*</span> pFile;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 存储读取到的文件的内存空间，也就是一个char * 类型的字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> szReadTextBuffer;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 读取到的文件的尺寸
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> nReadFileSize;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 获取读取到的文件缓冲区字节数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> nReadRetSize <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* fopen,fopen有两个参数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 第一个参数是需要打开的文件的路径
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 第二个参数是打开的模式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>((pFile <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>(<span style="color:#e6db74">&#34;file.txt&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>)) <span style="color:#f92672">==</span> NULL)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 处理一下如果打开文件失败了
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Open File Failed!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 因为设置文件指针到末尾处了，我们可以通过文件指针位置的方式，获取文件大小
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#75715e">//设置文件指针到末尾处
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">fseek</span>(pFile, <span style="color:#ae81ff">0</span>, SEEK_EMD);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 获取文件指针的位置，获取文件大小
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    nReadFileSize <span style="color:#f92672">=</span> <span style="color:#a6e22e">ftell</span>(pFile);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//文件指针复位到初始位置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">rewind</span>(pFile);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 根据文件尺寸申请一块足够大小的内存空间
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    szReadTextBuffer <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">malloc</span>(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>)<span style="color:#f92672">*</span>nReadFileSize <span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(szReadTextBuffer <span style="color:#f92672">==</span> NULL)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 处理内存申请失败代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;malloc memory failed!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 对申请到的内存进行初始化
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">menset</span>(szReadTextBuffer, <span style="color:#ae81ff">0</span>, nReadFileSize <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 将已经获取到文件指针的文件的内容读取到已经申请好的缓冲区中，并且返回真实读取到的内容长度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    nReadRetSize <span style="color:#f92672">=</span> <span style="color:#a6e22e">fread</span>(szReadTextBuffer, <span style="color:#ae81ff">1</span>, nReadFileSize, pFile);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 判断是否读取失败，真实读取到的内存长度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span>(nReadFileSize <span style="color:#f92672">!=</span> nReadRetSize)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 处理读取失败的代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Read File Failed!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fclose</span>(pFile);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>读取文件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	FILE<span style="color:#f92672">*</span> pFile;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> szReadTextBuffer;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> nReadFileSize;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> nReadRetSize;
</span></span><span style="display:flex;"><span>	pFile <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>(<span style="color:#e6db74">&#34;C:</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">15890</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Desktop</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">file.txt&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (pFile <span style="color:#f92672">==</span> NULL)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;open file failed!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fseek</span>(pFile, <span style="color:#ae81ff">0</span>, SEEK_END);
</span></span><span style="display:flex;"><span>	nReadFileSize <span style="color:#f92672">=</span> <span style="color:#a6e22e">ftell</span>(pFile);
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">rewind</span>(pFile);
</span></span><span style="display:flex;"><span>	szReadTextBuffer <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)<span style="color:#a6e22e">malloc</span>((nReadFileSize <span style="color:#f92672">*</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>)) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (szReadTextBuffer <span style="color:#f92672">==</span> NULL)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;mallco memory failed!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">memset</span>(szReadTextBuffer, <span style="color:#ae81ff">0</span>, nReadFileSize <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>	nReadRetSize <span style="color:#f92672">=</span> <span style="color:#a6e22e">fread</span>(szReadTextBuffer, <span style="color:#ae81ff">1</span>, nReadFileSize, pFile);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (nReadFileSize <span style="color:#f92672">!=</span> nReadRetSize)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Read file failed!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">puts</span>(szReadTextBuffer);
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fclose</span>(pFile);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>写入文件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> szWriteBuffer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;I love the reverse program!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> nWriteSize <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	FILE<span style="color:#f92672">*</span> pFile;
</span></span><span style="display:flex;"><span>	pFile <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>(<span style="color:#e6db74">&#34;C:</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">15890</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Desktop</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">myfile.txt&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (pFile <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;failed!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fwrite</span>(szWriteBuffer, <span style="color:#a6e22e">strlen</span>(szWriteBuffer), <span style="color:#ae81ff">1</span>, pFile);
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">fclose</span>(pFile);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="结构体联合体枚举">结构体、联合体、枚举</h2>
<h3 id="结构体">结构体</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 用struct标记为结构体，然后后面是结构体的名字
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">struct</span> NPC
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 名字
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> Name;
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 血量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> HP;
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 魔法值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> MP;
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 坐标
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> x;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> y;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> z;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 给结构体小儿的各种变量赋值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    NPC xiaoer;
</span></span><span style="display:flex;"><span>    xiaoer.Name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;wangxiaoer&#34;</span>;
</span></span><span style="display:flex;"><span>    xiaoer.HP <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>;
</span></span><span style="display:flex;"><span>    xiaoer.MP <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    xiaoer.x <span style="color:#f92672">=</span> <span style="color:#ae81ff">111</span>;
</span></span><span style="display:flex;"><span>    xiaoer.y <span style="color:#f92672">=</span> <span style="color:#ae81ff">222</span>;
</span></span><span style="display:flex;"><span>    xiaoer.z <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>结构体指针</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 用struct标记为结构体，然后后面是结构体的名字
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">struct</span> NPC
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 名字
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> Name;
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 血量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> HP;
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 魔法值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> MP;
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 坐标
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">int</span> x;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> y;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> z;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> NPC npcarry[<span style="color:#ae81ff">100</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> NPC <span style="color:#f92672">*</span>npcindex;
</span></span><span style="display:flex;"><span>    npcindex <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>npcarry[<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>    npcindex <span style="color:#f92672">-&gt;</span> Name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;xiaoyi&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//  *npcindex.Name = &#34;xiaoyi&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    npcindex<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    npcindex <span style="color:#f92672">-&gt;</span> Name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;xiaoer&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// *npcindex.Name = &#34;xiaoer&#34;;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>结构体参数</p>
<h4 id="位域">位域</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> a : <span style="color:#ae81ff">8</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> b : <span style="color:#ae81ff">8</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> c : <span style="color:#ae81ff">8</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> d : <span style="color:#ae81ff">8</span>;
</span></span><span style="display:flex;"><span>}rk
</span></span></code></pre></div><h3 id="联合体">联合体</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">union</span> Info
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> PlayerName[<span style="color:#ae81ff">20</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> MP;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">float</span> x;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">union</span> Info MyInfo;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">strcpy</span>(MyInfo.PlayerName, <span style="color:#e6db74">&#34;NPC&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%f</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, MyInfo.PlayerName, MyInfo.MP, MyInfo.x);
</span></span></code></pre></div><p>联合体所有成员共用一个地址，只能使用一个成员</p>
<h3 id="枚举">枚举</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">enum</span> color
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        red;
</span></span><span style="display:flex;"><span>        green;
</span></span><span style="display:flex;"><span>        blue;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> flag <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>flag);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span>(flag)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> red:
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;red</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> green:
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;green</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> blue:
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;blue</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="高级数据表示">高级数据表示</h2>
<h3 id="顺序结构">顺序结构</h3>
<p>数组</p>
<p>栈</p>
<p>队列</p>
<h3 id="链式结构">链式结构</h3>
<p>链表</p>
<p>链栈</p>
<p>链队列</p>
<h3 id="树">树</h3>
<p>二叉树</p>
<ol>
<li>度不能超过2</li>
<li>有序树</li>
<li>无序树</li>
</ol>
<p>遍历</p>
<ul>
<li>先序遍历：根 左 右</li>
<li>中序遍历：左 根 右</li>
<li>后序遍历：左 右 根</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>C语言基础 笔记</title>
            <link>/posts/c-basic/</link>
            <pubDate>Tue, 01 Feb 2022 18:48:50 +0800</pubDate>
            
            <guid>/posts/c-basic/</guid>
            <description>C语言基础 概述 main函数 main函数是C语言的主函数，每个C语言程序都必须存在一个main函数，因为在程序开始的时候就会调用，它是程序执行的起点，当main函数的类型为int的时候表示函数返回一个整数值，类型为VOID表示函数不接受任何参数。main函数的函数体包括左花括号和右花括号之间的任何内容。
printf函数 printf()函数是格式化输出函数，一般用于向标准输出设备按规定格式输出信息
printf()函数的调用格式为：printf(&amp;quot;&amp;lt;格式化字符串&amp;gt;, &amp;lt;参量表&amp;gt;&amp;quot;)
格式输出，它是c语言中产生格式化输出的函数（在stdio.h中定义）。用于向终端（显示器、控制台等）输出字符。格式控制由要输出的文字和数据格式说明组成。要输出的文字除了可以使用字母、数字、空格和一些数字符号以外，还可以使用一些转义字符表示特殊的含义。主要包括%d, %o, %x, %g, %c, %s, 以及换行符\n
空白与注释 空白在C语言里并没有什么特殊的约定来限制你的使用，它的作用仅仅只是似的程序更好理解，更好的显示出程序的结构，仅此而已
在C语言里存在以下两种注释方式
// 单行注释 /*多行注释*/ 基础介绍 运行机制：C语言–&amp;gt; 汇编语言–&amp;gt;机器语言–&amp;gt;CPU
编译型语言VS解释性语言
编译型语言：编译为可执行文件，直接由CPU执行 解释型语言：编译为字节码，由解释器交给CPU执行 程序执行 编写 gcc test.c -o test编译 ./test执行 格式化输入
#include &amp;lt;studio.h&amp;gt; int main(){ printf(&amp;#39;hello world&amp;#39;); return 0; } 输入输出函数 输入函数 scanf(&amp;quot;%?&amp;quot;, temp);
输出函数 printf(&amp;quot;%?&amp;quot;, temp);
转义字符 转义字符 含义 \a 响铃(BEL) \b 退格(BS)，将当前位置移到前一列 \f 换页(FF)，将当前位置移到下页开头 \n 换行(LF)，将当前位置移到下一行开头 \r 回车(CR)，将当前位置移到本行开头 \t 水平制表(HT)，跳到下一个TAB位置 \v 垂直制表 \\ 表示(\) \&#39; 表示(‘) \&amp;quot; 表示(“) \?</description>
            <content type="html"><![CDATA[<h1 id="c语言基础">C语言基础</h1>
<h2 id="概述">概述</h2>
<h3 id="main函数">main函数</h3>
<p>main函数是C语言的主函数，每个C语言程序都必须存在一个main函数，因为在程序开始的时候就会调用，它是程序执行的起点，当main函数的类型为int的时候表示函数返回一个整数值，类型为VOID表示函数不接受任何参数。main函数的函数体包括左花括号和右花括号之间的任何内容。</p>
<h3 id="printf函数">printf函数</h3>
<p><code>printf()</code>函数是格式化输出函数，一般用于向标准输出设备按规定格式输出信息</p>
<p><code>printf()</code>函数的调用格式为：<code>printf(&quot;&lt;格式化字符串&gt;, &lt;参量表&gt;&quot;)</code></p>
<p>格式输出，它是c语言中产生格式化输出的函数（在stdio.h中定义）。用于向终端（显示器、控制台等）输出字符。格式控制由要输出的文字和数据格式说明组成。要输出的文字除了可以使用字母、数字、空格和一些数字符号以外，还可以使用一些转义字符表示特殊的含义。主要包括<a href="#%E5%8D%A0%E4%BD%8D%E5%AD%97%E7%AC%A6">%d, %o, %x, %g, %c, %s</a>, 以及换行符<a href="#%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6">\n</a></p>
<h3 id="空白与注释">空白与注释</h3>
<p>空白在C语言里并没有什么特殊的约定来限制你的使用，它的作用仅仅只是似的程序更好理解，更好的显示出程序的结构，仅此而已</p>
<p>在C语言里存在以下两种注释方式</p>
<ol>
<li><code>// 单行注释</code></li>
<li><code>/*多行注释*/</code></li>
</ol>
<h2 id="基础介绍">基础介绍</h2>
<p>运行机制：C语言–&gt; 汇编语言–&gt;机器语言–&gt;CPU</p>
<blockquote>
<p><strong>编译型语言VS解释性语言</strong></p>
<ul>
<li>编译型语言：编译为可执行文件，直接由CPU执行</li>
<li>解释型语言：编译为字节码，由解释器交给CPU执行</li>
</ul>
</blockquote>
<h3 id="程序执行">程序执行</h3>
<ol>
<li>编写</li>
<li><code>gcc test.c -o test</code>编译</li>
<li><code>./test</code>执行</li>
</ol>
<p>格式化输入</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;studio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(){
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">printf</span>(<span style="color:#960050;background-color:#1e0010">&#39;</span>hello world<span style="color:#960050;background-color:#1e0010">&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="输入输出函数">输入输出函数</h3>
<p>输入函数 <code>scanf(&quot;%?&quot;, temp);</code></p>
<p>输出函数 <code>printf(&quot;%?&quot;, temp);</code></p>
<h3 id="转义字符">转义字符</h3>
<table>
<thead>
<tr>
<th style="text-align:center">转义字符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>\a</code></td>
<td style="text-align:center">响铃(BEL)</td>
</tr>
<tr>
<td style="text-align:center"><code>\b</code></td>
<td style="text-align:center">退格(BS)，将当前位置移到前一列</td>
</tr>
<tr>
<td style="text-align:center"><code>\f</code></td>
<td style="text-align:center">换页(FF)，将当前位置移到下页开头</td>
</tr>
<tr>
<td style="text-align:center"><code>\n</code></td>
<td style="text-align:center">换行(LF)，将当前位置移到下一行开头</td>
</tr>
<tr>
<td style="text-align:center"><code>\r</code></td>
<td style="text-align:center">回车(CR)，将当前位置移到本行开头</td>
</tr>
<tr>
<td style="text-align:center"><code>\t</code></td>
<td style="text-align:center">水平制表(HT)，跳到下一个TAB位置</td>
</tr>
<tr>
<td style="text-align:center"><code>\v</code></td>
<td style="text-align:center">垂直制表</td>
</tr>
<tr>
<td style="text-align:center"><code>\\</code></td>
<td style="text-align:center">表示(<code>\</code>)</td>
</tr>
<tr>
<td style="text-align:center"><code>\'</code></td>
<td style="text-align:center">表示(<code>‘</code>)</td>
</tr>
<tr>
<td style="text-align:center"><code>\&quot;</code></td>
<td style="text-align:center">表示(<code>“</code>)</td>
</tr>
<tr>
<td style="text-align:center"><code>\?</code></td>
<td style="text-align:center">表示(<code>?</code>)</td>
</tr>
<tr>
<td style="text-align:center"><code>\0</code></td>
<td style="text-align:center">表示空字符(<code>NULL</code>)</td>
</tr>
<tr>
<td style="text-align:center"><code>\ddd</code></td>
<td style="text-align:center">1到3位八进制数所代表的任意字符</td>
</tr>
<tr>
<td style="text-align:center"><code>\xhh</code></td>
<td style="text-align:center">1到2位十六进制所代表的任意字符</td>
</tr>
</tbody>
</table>
<h3 id="占位字符">占位字符</h3>
<p><img src="/images/C-basic/image-20201222124236020.png" alt="image-20201222124236020"></p>
<h3 id="关键字与保留标识符">关键字与保留标识符</h3>
<h4 id="关键字">关键字</h4>
<p>变量常量命名不能使用</p>
<p>32个关键字</p>
<p><img src="/images/C-basic/image-20210816093545748.png" alt="image-20210816093545748"></p>
<h4 id="标识符">标识符</h4>
<ol>
<li>
<p>以下划线开始的标识符，例如：</p>
<p><code>_Bool</code>、<code>_Complex</code>、<code>_Imaginary</code></p>
</li>
<li>
<p>语言标准库函数名，例如：</p>
<p><code>printf()</code> <code>scanf()</code> <code> strlen()</code> <code>strcpy()</code></p>
</li>
</ol>
<h2 id="命名规则">命名规则</h2>
<p>匈牙利命名法</p>
<ul>
<li>
<p>变量名前，加上属性、类型</p>
</li>
<li>
<p>变量命名有意义</p>
</li>
<li>
<p>驼峰命名法</p>
<ul>
<li>
<p>大驼峰命名法</p>
<p>所有单词全部首字母大写</p>
</li>
<li>
<p>小驼峰命名法</p>
<p>除了第一个单词小写外，其他的单词首字母大写</p>
</li>
</ul>
</li>
</ul>
<h2 id="变量常量">变量常量</h2>
<h3 id="变量">变量</h3>
<blockquote>
<p>变量的意义就算确定目标并提供存放的空间</p>
</blockquote>
<p><strong>变量名</strong></p>
<ul>
<li>变量名只能三英文字母（A-Z，a-z）和数字（0-9）或者下划线（_)组成</li>
<li>第一个字母必须三字母或者下划线开头</li>
<li>变量名区分大小写</li>
</ul>
<p><strong>数据类型</strong></p>
<ul>
<li>
<p>char</p>
<p>字符型，占用一个字节</p>
</li>
<li>
<p>int</p>
<p>整型，通常反映了所用机器中整数的最自然长度</p>
</li>
<li>
<p>float</p>
<p>单精度浮点型</p>
</li>
<li>
<p>double</p>
<p>双精度浮点型</p>
</li>
</ul>
<p><strong>声明变量的语法</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> b;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">float</span> c;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">double</span> d;
</span></span></code></pre></div><h4 id="变量赋值方式">变量赋值方式</h4>
<p>方式一：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a, b, c;
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>b <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span></code></pre></div><p>方式二：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span></code></pre></div><p>方式三：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>, b <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, c <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span></code></pre></div><h3 id="常量">常量</h3>
<p><strong>类型</strong></p>
<ul>
<li>整型常量：520，1314，123</li>
<li>实型常量：3.14，5.12，8.97</li>
<li>字符常量
<ul>
<li>普通字符：‘L’，‘o’，‘v’，’e‘</li>
<li>转义字符：‘\n’，’\t‘，‘\b’</li>
</ul>
</li>
<li>字符串常量：“FishC”</li>
</ul>
<p><strong>定义符号常量</strong></p>
<ul>
<li>
<p>格式：<code>#define 标识符 常量</code></p>
</li>
<li>
<p>比如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define URL &#39;http:</span><span style="color:#75715e">//www.fishc.com&#39;
</span></span></span></code></pre></div><p><em>一般用小写字母命名变量，用大写字母命名常量</em></p>
<p><strong>标识符</strong></p>
<p>命名规则同变量的命名规则 [[C-basic#变量|变量]]</p>
</li>
</ul>
<p><strong>字符串常量</strong></p>
<ul>
<li>
<p>字符：‘F’, ’i’, ‘s ‘ , ‘h’ , ‘C’</p>
</li>
<li>
<p>字符串：</p>
<ul>
<li>“Hello world”</li>
<li>“I love FishC.com!”</li>
</ul>
<blockquote>
<p>编译过程中会将字符串最后一个字符后面添加一个<code>\0</code>的空字符，用于判断字符串结束</p>
</blockquote>
</li>
</ul>
<h2 id="数据类型">数据类型</h2>
<ul>
<li>
<p>基本类型</p>
<ul>
<li>
<p>整数类型<code>int</code></p>
<blockquote>
<p>short int &lt;= int &lt;= long int &lt;=long long int</p>
</blockquote>
</li>
<li>
<p>浮点数类型<code>float double</code></p>
<blockquote>
<p>float</p>
<p>double</p>
<p>long double</p>
</blockquote>
</li>
<li>
<p>字符类型<code>char</code></p>
</li>
<li>
<p>布尔类型 <code>_Bool</code></p>
<p><em>C99之前C语言没有布尔类型，需要引用<code>#include &lt;stdbool&gt;</code></em></p>
</li>
<li>
<p>枚举类型<code>enum</code></p>
</li>
</ul>
</li>
<li>
<p>指针类型 <code>type *</code></p>
</li>
<li>
<p>构造类型</p>
<ul>
<li>数组类型</li>
<li>结构类型 <code>union</code></li>
<li>联合类型 <code>struct</code></li>
</ul>
</li>
<li>
<p>空类型</p>
</li>
</ul>
<h3 id="整型">整型</h3>
<p><strong><code>signed和unsigned</code></strong></p>
<blockquote>
<p><code>signed</code>：可以储存负值</p>
<p><code>unsigned</code>：只能储存正值及0</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>[<span style="color:#66d9ef">signed</span>] <span style="color:#66d9ef">short</span> [<span style="color:#66d9ef">int</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span> [<span style="color:#66d9ef">int</span>];
</span></span><span style="display:flex;"><span>[<span style="color:#66d9ef">signed</span>] <span style="color:#66d9ef">int</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>;
</span></span></code></pre></div><p><strong>取值范围</strong></p>
<p><strong>二进制</strong></p>
<ul>
<li>
<p>比特位</p>
<blockquote>
<p>CPU能读懂的最小单位——比特位，bit，b</p>
</blockquote>
</li>
<li>
<p>字节</p>
<p>内存机构的最小寻址单位——字节，Byte，B</p>
<p>1 Byte == 8 bit</p>
<p>计算技巧 $2^n-1$</p>
</li>
</ul>
<p><strong>符号位</strong></p>
<ul>
<li>存放signed类型的存储单元中，左边第一位表示符号位。如果该位为0，表示该整数是一个正数；如果该位为1，表示该整数是一个负数</li>
<li>一个32位的整型变量，除去左边第一位符号位，剩下表示值的只有31个比特位</li>
<li>事实上计算机是用补码的形式来存放整数的值
<ul>
<li>正数的补码三该数的二进制形式</li>
<li>负数的补码需要通过以下几步获得：
<ol>
<li>先取得该数的绝对值</li>
<li>再将第1步的值按位取反</li>
<li>最后将第2步的值加1</li>
</ol>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">字节</th>
<th style="text-align:center">取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">char</td>
<td style="text-align:center">1</td>
<td style="text-align:center">-128~127</td>
</tr>
<tr>
<td style="text-align:center">unsigned char</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0~255</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">2</td>
<td style="text-align:center">-32768~32767</td>
</tr>
<tr>
<td style="text-align:center">unsigned short</td>
<td style="text-align:center">2</td>
<td style="text-align:center">0~65535</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-2147483648~2147483647</td>
</tr>
<tr>
<td style="text-align:center">unsigned int</td>
<td style="text-align:center">4</td>
<td style="text-align:center">0~4294967295</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-2147483648~2147483647</td>
</tr>
<tr>
<td style="text-align:center">unsigned long</td>
<td style="text-align:center">4</td>
<td style="text-align:center">0~4294967295</td>
</tr>
<tr>
<td style="text-align:center">long long</td>
<td style="text-align:center">8</td>
<td style="text-align:center">-9223372036854775808~9223372035854775807</td>
</tr>
<tr>
<td style="text-align:center">unsigned long long</td>
<td style="text-align:center">8</td>
<td style="text-align:center">0~18446744073709551615</td>
</tr>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">4</td>
<td style="text-align:center">$1.17549<em>10^{-38}～3.40282</em>10^{38}$</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">8</td>
<td style="text-align:center">$2.22507<em>10^{-308}～1.79769</em>10^{308}$</td>
</tr>
<tr>
<td style="text-align:center">long double</td>
<td style="text-align:center">12</td>
<td style="text-align:center">$2.22507<em>10^{-308}～1.79769</em>10^{308}$</td>
</tr>
</tbody>
</table>
<h3 id="字符和字符串">字符和字符串</h3>
<p><strong>ASCII编码表</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">字节数</th>
<th style="text-align:center">取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">signed char</td>
<td style="text-align:center">1</td>
<td style="text-align:center">-128~127</td>
</tr>
<tr>
<td style="text-align:center">unsigned char</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0~255</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">2</td>
<td style="text-align:center">-32768~32767</td>
</tr>
<tr>
<td style="text-align:center">unsigned short</td>
<td style="text-align:center">2</td>
<td style="text-align:center">0~65535</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-2147483648~2147483647</td>
</tr>
<tr>
<td style="text-align:center">unsigned int</td>
<td style="text-align:center">4</td>
<td style="text-align:center">0~4294967295</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-2147483648~2147483647</td>
</tr>
<tr>
<td style="text-align:center">unsigned long</td>
<td style="text-align:center">4</td>
<td style="text-align:center">0~4294967295</td>
</tr>
<tr>
<td style="text-align:center">long long</td>
<td style="text-align:center">8</td>
<td style="text-align:center">-9223372036854775808~9223372036854775807</td>
</tr>
<tr>
<td style="text-align:center">unsigned long long</td>
<td style="text-align:center">8</td>
<td style="text-align:center">0~18446744073709551615</td>
</tr>
</tbody>
</table>
<p><em>字符串一般不会默认unsigned</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// 声明字符串：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">char</span> name[<span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 给字符串赋值：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>name[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;F&#39;</span>;
</span></span><span style="display:flex;"><span>name[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;i&#39;</span>;
</span></span><span style="display:flex;"><span>name[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;s&#39;</span>;
</span></span><span style="display:flex;"><span>name[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;h&#39;</span>;
</span></span><span style="display:flex;"><span>name[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;C&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 定义字符串：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">char</span> name[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;F&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;C&#39;</span>};
</span></span></code></pre></div><p><strong>类型转换</strong></p>
<p>小坑位数据会转变为大坑位数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;整型输出：%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,<span style="color:#ae81ff">1</span><span style="color:#f92672">+</span>(<span style="color:#66d9ef">int</span>)<span style="color:#ae81ff">1.8</span>);<span style="color:#75715e">// 类型强制转换
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;浮点型输出：%f</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,<span style="color:#ae81ff">1</span><span style="color:#f92672">+</span><span style="color:#ae81ff">2.0</span>);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="运算符">运算符</h2>
<h3 id="算术运算符">算术运算符</h3>
<p>C语言通过提供运算符来支持我们对数据进行处理</p>
<p><strong>算术运算府</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">名称</th>
<th style="text-align:center">例子</th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">加法运算符（双目）</td>
<td style="text-align:center">5+3</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">减法运算符（双目）</td>
<td style="text-align:center">5-3</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">乘法运算符（双目）</td>
<td style="text-align:center">5*3</td>
<td style="text-align:center">15</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:center">除法运算符（双目）</td>
<td style="text-align:center">5/3</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">求余运算符（双目）</td>
<td style="text-align:center">5%3</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">正号运算符（单目）</td>
<td style="text-align:center">+5</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">负号运算符（单目）</td>
<td style="text-align:center">-5</td>
<td style="text-align:center">-5</td>
</tr>
</tbody>
</table>
<blockquote>
<p>%不能将浮点数进行取余</p>
</blockquote>
<p><strong>目</strong></p>
<p><img src="/images/C-basic/image-20200806071721188.png" alt="image-20200806071721188"></p>
<p><strong>表达式</strong></p>
<ul>
<li>
<p>用运算符和括号将操作数连接起来的式子，我们称之为表达式</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;b&#39;</span>;
</span></span><span style="display:flex;"><span>a<span style="color:#f92672">+</span>b;
</span></span><span style="display:flex;"><span>a<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;b&#39;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">pow</span>(a,b)<span style="color:#f92672">*</span><span style="color:#ae81ff">3</span><span style="color:#f92672">/</span><span style="color:#ae81ff">4</span><span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>;
</span></span></code></pre></div><p><em><strong>运算符存在怕<a href="#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7">优先级</a></strong></em></p>
</li>
</ul>
<h3 id="关系运算符">关系运算符</h3>
<ul>
<li>
<p>使用关系运算符来比较两个数的大小关系：</p>
<p><strong>优先级相同（高）</strong></p>
<p><code>&lt;</code>（小于）</p>
<p><code>&lt; =</code> （小于或等于）</p>
<p><code>&gt;</code> （大于）</p>
<p><strong>优先级相同（低）</strong></p>
<p><code>==</code> （等于）</p>
<p><code>!=</code> （不等于）</p>
</li>
</ul>
<p><strong>关系表达式</strong></p>
<ul>
<li>
<p>用关系运算符将两边的变量、数据或表达式连接起来，称之为关系表达式：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#ae81ff">1</span><span style="color:#f92672">&lt;</span><span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>a<span style="color:#f92672">&lt;</span>b;
</span></span><span style="display:flex;"><span>a<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">1</span><span style="color:#f92672">+</span>b;
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;b&#39;</span><span style="color:#f92672">&lt;=</span><span style="color:#e6db74">&#39;c&#39;</span>;
</span></span><span style="display:flex;"><span>(a<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span>)<span style="color:#f92672">&gt;</span>(b<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>);<span style="color:#75715e">// 只会返回一个布尔值
</span></span></span></code></pre></div></li>
<li>
<p>关系表达式得到的值是一个逻辑值，即真或假，在C语言的逻辑运算中，用数字1表示真，用数字0表示假</p>
</li>
</ul>
<h3 id="逻辑运算符">逻辑运算符</h3>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">优先级</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>!</code></td>
<td style="text-align:center">逻辑非</td>
<td style="text-align:center">高</td>
<td style="text-align:center"><code>!a</code></td>
</tr>
<tr>
<td style="text-align:center"><code>&amp;&amp;</code></td>
<td style="text-align:center">逻辑与</td>
<td style="text-align:center">中</td>
<td style="text-align:center"><code>a&amp;&amp;b</code></td>
</tr>
<tr>
<td style="text-align:center">`</td>
<td style="text-align:center"></td>
<td style="text-align:center">`</td>
<td style="text-align:center">逻辑或</td>
</tr>
</tbody>
</table>
<p>逻辑与，参与的所有表达式，结果全部为真，才为真，只要有一个为假，就为假</p>
<p>逻辑或，参与的所有表达式中，只有一个结果为真，结果就为真，所有的都为假，才会为假</p>
<p><strong>逻辑表达式</strong></p>
<p>用逻辑运算符将两边的变量、数据或表达式连接起来，称之为逻辑表达式</p>
<p><strong>短路求值</strong></p>
<ul>
<li>短路求值又称最小化求值，是一种逻辑运算符的求值策略。只有当第一个运算数的值无法确定逻辑运算的结果时，才对第二个运算数进行求值</li>
<li>C语言对于逻辑与和逻辑或采用短路求值的方式</li>
</ul>
<h3 id="位运算符">位运算符</h3>
<table>
<thead>
<tr>
<th>运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;</td>
<td>与</td>
</tr>
<tr>
<td>|</td>
<td>或</td>
</tr>
<tr>
<td>^</td>
<td>异或</td>
</tr>
<tr>
<td>~</td>
<td>取反</td>
</tr>
<tr>
<td>&raquo;</td>
<td>左移</td>
</tr>
<tr>
<td>&laquo;</td>
<td>右移</td>
</tr>
</tbody>
</table>
<h3 id="赋值运算符">赋值运算符</h3>
<table>
<thead>
<tr>
<th>运算符</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>赋值</td>
</tr>
<tr>
<td>+=</td>
<td>加法且赋值</td>
</tr>
<tr>
<td>-=</td>
<td>减法且赋值</td>
</tr>
<tr>
<td>*=</td>
<td>乘法且赋值</td>
</tr>
<tr>
<td>/=</td>
<td>除法且赋值</td>
</tr>
<tr>
<td>%=</td>
<td>取余且赋值</td>
</tr>
<tr>
<td>&raquo;=</td>
<td>左移且赋值</td>
</tr>
<tr>
<td>&laquo;=</td>
<td>右移且赋值</td>
</tr>
<tr>
<td>&amp;=</td>
<td>按位与且赋值</td>
</tr>
<tr>
<td>|=</td>
<td>按位或且赋值</td>
</tr>
<tr>
<td>^=</td>
<td>按位异或且赋值</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a;
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span></code></pre></div><blockquote>
<p>赋值运算符的左边必须是一个<code>lvalue</code>,变量名就是<code>lvalue</code></p>
</blockquote>
<p>复合的赋值运算符</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a;
</span></span><span style="display:flex;"><span>a<span style="color:#f92672">+=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>a<span style="color:#f92672">-=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>a<span style="color:#f92672">*=</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>a<span style="color:#f92672">/=</span><span style="color:#ae81ff">1</span>;
</span></span></code></pre></div><p><strong>自增自减运算符</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a;
</span></span><span style="display:flex;"><span>a<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">++</span>a;
</span></span><span style="display:flex;"><span>a<span style="color:#f92672">--</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span>a;
</span></span></code></pre></div><h3 id="其他运算符">其他运算符</h3>
<h4 id="sizeof运算符">sizeof运算符</h4>
<p><strong><code>sizeof</code>运算符</strong></p>
<p><code>sizeof</code>运算符用于获得数据类型或表达式的长度</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">sizeof</span>(object); <span style="color:#75715e">//sizeof(对象)；
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">sizeof</span>(type_name); <span style="color:#75715e">// sizeof(类型)；
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">sizeof</span> object; <span style="color:#75715e">// sizeof 对象
</span></span></span></code></pre></div><h4 id="条件运算符">条件运算符</h4>
<ul>
<li>语法：<code>exp1?exp2:exp3;</code>
<ul>
<li><code>exp1</code>是条件表达式</li>
<li>如果结果为真，返回<code>exp2</code></li>
<li>如果结果为假，返回<code>exp3</code></li>
</ul>
</li>
</ul>
<p>真左假右</p>
<h4 id="逗号运算符">逗号运算符</h4>
<ul>
<li>语法：表达式1，表达式2，……，表达式n
<ul>
<li>逗号表达式的运算过程为从左往右逐个计算表达式</li>
<li>逗号表达式作为一个整体，它的值为最后一个表达式（也即表达式n）的值</li>
</ul>
</li>
<li>a = (b = 3, (c = b + 4 ) + 5)
<ul>
<li>先将变量b赋值为3</li>
<li>然后变量c赋值为b+4的和，也就是7</li>
<li>接下来把c的值加上5</li>
<li>最后赋值给变量a，得到变量a的值是12</li>
</ul>
</li>
</ul>
<h3 id="运算符优先级">运算符优先级</h3>
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>结合律</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>后缀运算符：[]   ()   ·   -&gt;   ++   &ndash;(类型名称){列表}</td>
<td>从左到右</td>
</tr>
<tr>
<td>2</td>
<td>一元运算符：++   &ndash;   !   ~   +   -   *   &amp;   sizeof_Alignof</td>
<td>从右到左</td>
</tr>
<tr>
<td>3</td>
<td>类型转换运算符：(类型名称)</td>
<td>从右到左</td>
</tr>
<tr>
<td>4</td>
<td>乘除法运算符：*   /   %</td>
<td>从左到右</td>
</tr>
<tr>
<td>5</td>
<td>加减法运算符：+   -</td>
<td>从左到右</td>
</tr>
<tr>
<td>6</td>
<td>移位运算符：&laquo;   &raquo;</td>
<td>从左到右</td>
</tr>
<tr>
<td>7</td>
<td>关系运算符：&laquo;=   &raquo;=</td>
<td>从左到右</td>
</tr>
<tr>
<td>8</td>
<td>相等运算符：==   !=</td>
<td>从左到右</td>
</tr>
<tr>
<td>9</td>
<td>位运算符 AND：&amp;</td>
<td>从左到右</td>
</tr>
<tr>
<td>10</td>
<td>位运算符 XOR：^</td>
<td>从左到右</td>
</tr>
<tr>
<td>11</td>
<td>位运算符 OR：|</td>
<td>从左到右</td>
</tr>
<tr>
<td>12</td>
<td>逻辑运算符 AND：&amp;&amp;</td>
<td>从左到右</td>
</tr>
<tr>
<td>13</td>
<td>逻辑运算符 OR：||</td>
<td>从左到右</td>
</tr>
<tr>
<td>14</td>
<td>条件运算符：?:</td>
<td>从右到左</td>
</tr>
<tr>
<td>15</td>
<td>赋值运算符：    =     +=     -=    *=    /=    %=    &amp;=    ^=    |=     &laquo;=    &raquo;=</td>
<td>从右到左</td>
</tr>
<tr>
<td>16</td>
<td>逗号运算符：，</td>
<td>从左到右</td>
</tr>
</tbody>
</table>
<h2 id="逻辑结构">逻辑结构</h2>
<p>C语言中，包括三种执行流程</p>
<ol>
<li>顺序结构，所谓的顺序结构呢，就是从上往下顺序的执行</li>
<li>选择结构，就是给出一个条件，如果条件符合，去哪里执行，不符合，又去哪里执行</li>
<li>循环结构，循环结构呢，就是重复执行某一段代码</li>
</ol>
<h3 id="分支结构">分支结构</h3>
<h4 id="if语句">if语句</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-CQL" data-lang="CQL"><span style="display:flex;"><span><span style="color:#75715e">// if 语句（1）
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span>(<span style="color:#960050;background-color:#1e0010">表达式</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    ......<span style="color:#75715e">// 逻辑值为真所执行的语句、程序块
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// if 语句（2）
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span>(<span style="color:#960050;background-color:#1e0010">表达式</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    ......<span style="color:#75715e">// 逻辑值为真所执行的语句、程序块
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span>else
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    ......<span style="color:#75715e">// 逻辑值为假所执行的语句、程序块
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// if 语句（3）
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span>(<span style="color:#960050;background-color:#1e0010">表达式</span><span style="color:#ae81ff">1</span>){......}
</span></span><span style="display:flex;"><span>else <span style="color:#66d9ef">if</span>(<span style="color:#960050;background-color:#1e0010">表达式</span><span style="color:#ae81ff">2</span>){......}
</span></span><span style="display:flex;"><span>else <span style="color:#66d9ef">if</span>(<span style="color:#960050;background-color:#1e0010">表达式</span><span style="color:#ae81ff">3</span>){......}
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>.
</span></span><span style="display:flex;"><span>else <span style="color:#66d9ef">if</span>(<span style="color:#960050;background-color:#1e0010">表达式</span>n){......}
</span></span><span style="display:flex;"><span>else{......}
</span></span></code></pre></div><h4 id="switch语句">switch语句</h4>
<p><strong>break语句</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">switch</span>(<span style="color:#960050;background-color:#1e0010">表达式</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#960050;background-color:#1e0010">常量表达式</span><span style="color:#ae81ff">1</span><span style="color:#f92672">:</span><span style="color:#960050;background-color:#1e0010">语句或程序块</span><span style="color:#ae81ff">1</span>;<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#960050;background-color:#1e0010">常量表达式</span><span style="color:#ae81ff">2</span><span style="color:#f92672">:</span><span style="color:#960050;background-color:#1e0010">语句或程序块</span><span style="color:#ae81ff">2</span>;<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    ......
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#960050;background-color:#1e0010">常量表达式</span>n:<span style="color:#960050;background-color:#1e0010">语句或程序块</span>n;<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span><span style="color:#960050;background-color:#1e0010">语句或程序块</span>n<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="分支结构的嵌套">分支结构的嵌套</h4>
<p><img src="/images/C-basic/image-20200806121857343.png" alt="image-20200806121857343"></p>
<p><em>根据流程图写代码</em></p>
<p><strong>悬挂else问题</strong>：<code>else</code>会匹配最近的<code>if</code></p>
<p>解决：<code>{}</code></p>
<h3 id="循环结构">循环结构</h3>
<h4 id="while语句">while语句</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// while语句 入口条件循环
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">while</span>(i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">100</span>) 
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    sum <span style="color:#f92672">=</span> sum <span style="color:#f92672">+</span>i;
</span></span><span style="display:flex;"><span>    i<span style="color:#f92672">=</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// do...while语句 出口条件循环
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">do</span>{
</span></span><span style="display:flex;"><span>    sum <span style="color:#f92672">=</span> sum <span style="color:#f92672">+</span> i;
</span></span><span style="display:flex;"><span>    i <span style="color:#f92672">=</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span>(i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">100</span>);
</span></span></code></pre></div><h4 id="for循环">for循环</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">for</span>(<span style="color:#960050;background-color:#1e0010">表达式</span><span style="color:#ae81ff">1</span>;<span style="color:#960050;background-color:#1e0010">表达式</span><span style="color:#ae81ff">2</span>;<span style="color:#960050;background-color:#1e0010">表达式</span><span style="color:#ae81ff">3</span>){
</span></span><span style="display:flex;"><span>    <span style="color:#960050;background-color:#1e0010">循环体</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>三个表达式用分号隔开，其中：</p>
<ul>
<li>表达式1是循环初始化表达式</li>
<li>表达式2是循环条件表达式</li>
<li>表达式3是循环调整表达式</li>
</ul>
<p><strong>灵活的for语句</strong></p>
<ul>
<li>表达式1，表达式2和表达式3可以按照需要进行省略（但分号不能省）</li>
<li>表达式1和表达式3可以是一个简单的表达式，也可以是逗号表达式（即用逗号分隔多个表达式）</li>
<li>C99允许在for语句的表达式1中定义变量</li>
</ul>
<h4 id="循环嵌套">循环嵌套</h4>
<p>先执行内部循环再执行外部循环</p>
<h4 id="跳出循环">跳出循环</h4>
<p><strong>break语言</strong></p>
<p>跳出循环</p>
<p><strong>continue语言</strong></p>
<p>跳出本轮循环</p>
<p><em>只能作用于一层循环</em></p>
<h2 id="预处理">预处理</h2>
<h3 id="宏">宏</h3>
<p>宏（Macro）是预处理命令的一种，它允许用一个标识符来表示一个字符串。</p>
<p>define</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define nNum 15
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define ADD (a+b)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define MAX(a,b) ((a&gt;b)?(a):(b))
</span></span></span></code></pre></div><p>undef</p>
<blockquote>
<p>取消宏处理</p>
</blockquote>
<p>条件编译</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#ifdef RKVIR
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;this is def&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">#else
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;this is else&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define SYS 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#if SYS == 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;1&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">#elif SYS == 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;2&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">#endif
</span></span></span></code></pre></div><h2 id="标准库">标准库</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;math.h&gt;</span><span style="color:#75715e">
</span></span></span></code></pre></div><p>C的标准库</p>
<table>
<thead>
<tr>
<th>Header File</th>
<th>Content</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>stdio.h</code></td>
<td>输入和输出</td>
</tr>
<tr>
<td><code>stdlib.h</code></td>
<td>最常用的一些系统函数</td>
</tr>
<tr>
<td><code>string.h</code></td>
<td>字符串处理</td>
</tr>
<tr>
<td><code>math.h</code></td>
<td>数学函数</td>
</tr>
<tr>
<td><code>ctype.h</code></td>
<td>字符类测试</td>
</tr>
<tr>
<td><code>time.h</code></td>
<td>时间和日期</td>
</tr>
<tr>
<td><code>stdarg.h</code></td>
<td>可变参数列表</td>
</tr>
<tr>
<td><code>signal.h</code></td>
<td>信号</td>
</tr>
<tr>
<td><code>assert.h</code></td>
<td>断言</td>
</tr>
<tr>
<td><code>setjmp.h</code></td>
<td>非局部跳转</td>
</tr>
<tr>
<td><code>errno.h</code></td>
<td>定义错误代码</td>
</tr>
<tr>
<td><code>stddef.h</code></td>
<td>一些常数、类型和变量</td>
</tr>
<tr>
<td><code>locale.h</code></td>
<td>本土化</td>
</tr>
<tr>
<td><code>float.h</code></td>
<td>浮点数运算</td>
</tr>
<tr>
<td><code>limits.h</code></td>
<td>定义整数数据类型的取值范围</td>
</tr>
</tbody>
</table>
<h2 id="补充">补充</h2>
<h3 id="go-to语句">go to语句</h3>
<p>类似于汇编语言的JMP</p>
<ul>
<li>语法：goto标签；</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> nNum <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>loop:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, nNum);
</span></span><span style="display:flex;"><span>    nNum<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">goto</span> loop;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>尽量永远不要用到</p>
<p><em>不建议使用</em></p>
<h3 id="typedef">typedef</h3>
<p>定义类型的别名</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">int</span> uint32;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> DATEBASE_CLASS_ONE DCO;
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Java面向对象之多态 笔记</title>
            <link>/posts/java-polymorphic/</link>
            <pubDate>Sat, 29 Jan 2022 19:01:51 +0800</pubDate>
            
            <guid>/posts/java-polymorphic/</guid>
            <description>Java面向对象之多态 方法重写 子类和父类同名方法 子类和父类同名方法，方法重写
前提：需要有继承关系
方法重写表现：
方法名必须相同
参数列表必须相同
返回值类型必须相同
修饰符：范围可以扩大或相同，但是不能缩小 public &amp;gt; protected &amp;gt;default
方法重写
public class Animal { public void eat() { System.out.println(&amp;#34;动物去吃东西&amp;#34;); } } public class Cat extends Animal { public void eat() { System.out.println(&amp;#34;猫喜欢吃鱼&amp;#34;); } } public class Dog { public void eat() { System.out.println(&amp;#34;狗喜欢吃骨头&amp;#34;); } } 不能重写父类的private方法，如果定义的话只是定义了一个新方法，不是方法重写
运行时多态 后期绑定
如果被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式也被称之为后期绑定
运行时多态
方法重写是根据实际的类型决定调用哪个重写的方法，发生在运行期间，也叫做运行时多态
多态
public class Animal { public void eat() { System.out.println(&amp;#34;动物去吃东西&amp;#34;); } } public class Cat extends Animal { public void eat() { System.</description>
            <content type="html"><![CDATA[<h1 id="java面向对象之多态">Java面向对象之多态</h1>
<h2 id="方法重写">方法重写</h2>
<h3 id="子类和父类同名方法">子类和父类同名方法</h3>
<ul>
<li>
<p>子类和父类同名方法，方法重写</p>
</li>
<li>
<p>前提：需要有继承关系</p>
</li>
<li>
<p>方法重写表现：</p>
<p>方法名必须相同</p>
<p>参数列表必须相同</p>
<p>返回值类型必须相同</p>
<p>修饰符：范围可以扩大或相同，但是不能缩小 <code>public</code> &gt; <code>protected</code> &gt;<code>default</code></p>
</li>
</ul>
<p>方法重写</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Animal</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;动物去吃东西&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Cat</span> <span style="color:#66d9ef">extends</span> Animal
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;猫喜欢吃鱼&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dog</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;狗喜欢吃骨头&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><em>不能重写父类的private方法，如果定义的话只是定义了一个新方法，不是方法重写</em></p>
<h4 id="运行时多态">运行时多态</h4>
<ul>
<li>
<p>后期绑定</p>
<p>如果被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式也被称之为后期绑定</p>
</li>
<li>
<p>运行时多态</p>
<p>方法重写是根据实际的类型决定调用哪个重写的方法，发生在运行期间，也叫做运行时多态</p>
</li>
</ul>
<p>多态</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Animal</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;动物去吃东西&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Cat</span> <span style="color:#66d9ef">extends</span> Animal
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;猫喜欢吃鱼&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dog</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;狗喜欢吃骨头&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Test</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Animal an <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Cat<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        an<span style="color:#f92672">.</span><span style="color:#a6e22e">eat</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="子类和父类static修饰的同名方法">子类和父类static修饰的同名方法</h3>
<ul>
<li>
<p>子类和父类static修饰的同名方法</p>
<p>static修饰的方法是静态方法，也叫做类方法使用</p>
<p>使用private或static或final修饰的变量或者方法，是早期绑定</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Animal</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;动物在吃&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Cat</span> <span style="color:#66d9ef">extends</span> Animal
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;猫吃鱼&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Test</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Animal an <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Cat<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        an<span style="color:#f92672">.</span><span style="color:#a6e22e">eat</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="动态绑定和解耦合简介">动态绑定和解耦合简介</h3>
<ul>
<li>
<p>动态绑定</p>
<p>在运行时根据具体对象的类型进行绑定，也就是后期绑定</p>
</li>
<li>
<p>解耦合简介</p>
<p>解耦合，字面意思就是解除耦合关系</p>
<p>设计的核心思想：</p>
<blockquote>
<p>尽可能减少代码耦合，如果发现代码耦合，就要采用解耦技术</p>
<p>数据模型，业务逻辑和视图显示三层之间彼此降低耦合</p>
</blockquote>
</li>
</ul>
<p>解耦合简介</p>
<ul>
<li>
<p>父子关系和夫妻关系的区别</p>
<p>从编程角度，父子关系是不能拆分的</p>
<p>从编程角度，夫妻关系是可以拆分的</p>
</li>
</ul>
<h3 id="同名变量和方法重写">同名变量和方法重写</h3>
<p>子类和父类出现同名变量</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Father</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Father</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        a <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        b <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Son</span> <span style="color:#66d9ef">extends</span> Father
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Son</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        a <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        b <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Son s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Son<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        Father f <span style="color:#f92672">=</span> s<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;f.a = &#34;</span><span style="color:#f92672">+</span>f<span style="color:#f92672">.</span><span style="color:#a6e22e">a</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,f.b=&#34;</span><span style="color:#f92672">+</span>f<span style="color:#f92672">.</span><span style="color:#a6e22e">b</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;s.a = &#34;</span><span style="color:#f92672">+</span>s<span style="color:#f92672">.</span><span style="color:#a6e22e">a</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,s.b=&#34;</span><span style="color:#f92672">+</span>s<span style="color:#f92672">.</span><span style="color:#a6e22e">b</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="方法重载和方法重写的区别和应用">方法重载和方法重写的区别和应用</h3>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">方法重载</th>
<th style="text-align:center">方法重写</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">类</td>
<td style="text-align:center">一个类</td>
<td style="text-align:center">继承关系</td>
</tr>
<tr>
<td style="text-align:center">方法名</td>
<td style="text-align:center">参数个数不同、参数类型不同、参数顺序不同</td>
<td style="text-align:center">参数列表相同</td>
</tr>
<tr>
<td style="text-align:center">返回值类型</td>
<td style="text-align:center">可以不同</td>
<td style="text-align:center">必须相同</td>
</tr>
<tr>
<td style="text-align:center">调用方式</td>
<td style="text-align:center">参数决定</td>
<td style="text-align:center">创建的实际对象决定</td>
</tr>
<tr>
<td style="text-align:center">static修饰</td>
<td style="text-align:center">是方法重载</td>
<td style="text-align:center">不是方法重写</td>
</tr>
</tbody>
</table>
<h2 id="抽象类">抽象类</h2>
<h3 id="抽象类-1">抽象类</h3>
<p>为什么需要抽象类？</p>
<blockquote>
<p>动物Animal都有自己的行为，小鸟和老虎继承了动物的行为，但小鸟和老虎的行动方式不一样。在动物中能给出行动的具体实现吗？</p>
<p>抽象类和抽象方法来解决这个问题</p>
</blockquote>
<p>什么是抽象类？</p>
<blockquote>
<p>使用abstract关键字修饰的方法叫做抽象方法，抽象方法没有方法体。当一个类中包含了抽象方法，那么该类也必须使用abstract关键字来修饰，这种使用abstract关键字修饰的类就是抽象类。</p>
</blockquote>
<p>抽象类及抽象方法定义的语法格式</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">[</span><span style="color:#960050;background-color:#1e0010">修饰符</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">类名</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 定义抽象方法
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">[</span><span style="color:#960050;background-color:#1e0010">修饰符</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">abstract</span> <span style="color:#960050;background-color:#1e0010">方法返回值类型</span> <span style="color:#960050;background-color:#1e0010">方法名</span><span style="color:#f92672">([</span><span style="color:#960050;background-color:#1e0010">参数列表</span><span style="color:#f92672">]);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 其他方法或属性
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="抽象类的作用">抽象类的作用</h3>
<p>抽象类的作用类似于“模板”，其目的是方便开发人员根据抽象类的格式来修改和创建新类。</p>
<p>抽象类主要用于继承，有利于程序的扩展。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Book</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">abstract</span> String <span style="color:#a6e22e">getAuthor</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ComputerBook</span> <span style="color:#66d9ef">extends</span> Book
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">getAuthor</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;詹姆斯·高斯林 James Gosling&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">EnglishBook</span> <span style="color:#66d9ef">extends</span> Book
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">getAuthor</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Tom&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="抽象类的特点">抽象类的特点</h4>
<ol>
<li>抽象类不能创建对象，如果创建，编译无法通过而报错，只能创建其非抽象子类的对象。</li>
<li>抽象类中，可以有构造器，是供子类创建对象时，初始化父类成员使用的。</li>
<li>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</li>
<li>抽象类的子类，必须重写抽象父类中所有的抽象方法，否则子类也必须定义成抽象类，不然编译无法通过而报错。</li>
<li>抽象类中的抽象方法不能用private、final、static修饰</li>
<li>抽象类存在的意义是为了被子类继承，抽象类体现的是模板思想。</li>
</ol>
<h2 id="接口">接口</h2>
<h3 id="接口的定义">接口的定义</h3>
<p>为什么需要接口？</p>
<ul>
<li>可以使用接口解决Java多继承的问题</li>
</ul>
<p>什么是接口</p>
<ul>
<li>接口就是某个事物对外提供的一些功能的声明</li>
<li>可以利用接口实现多态，同时接口也弥补了Java单一继承的弱点</li>
<li>使用interface关键字定义接口</li>
</ul>
<h3 id="接口的特性">接口的特性</h3>
<p>JDK 1.8之前接口的特性：</p>
<ul>
<li>接口允许多继承</li>
<li>接口没有构造方法</li>
<li>接口中的属性默认是用public static final修饰</li>
<li>接口中的方法默认是用public abstract修饰的</li>
<li>接口继承接口用extends，不能implement</li>
</ul>
<p>JDK 1.8 之后接口的语法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">[</span><span style="color:#960050;background-color:#1e0010">修饰符</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">interface</span> <span style="color:#960050;background-color:#1e0010">接口名 [</span><span style="color:#a6e22e">extends</span> <span style="color:#960050;background-color:#1e0010">父接口</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#960050;background-color:#1e0010">父接口</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,...]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">[</span><span style="color:#66d9ef">public</span><span style="color:#f92672">]</span> <span style="color:#f92672">[</span><span style="color:#66d9ef">static</span><span style="color:#f92672">]</span> <span style="color:#f92672">[</span><span style="color:#66d9ef">final</span><span style="color:#f92672">]</span> <span style="color:#960050;background-color:#1e0010">常量类型</span> <span style="color:#960050;background-color:#1e0010">常量名</span> <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">常量值</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">[</span><span style="color:#66d9ef">public</span><span style="color:#f92672">]</span> <span style="color:#f92672">[</span><span style="color:#66d9ef">abstract</span><span style="color:#f92672">]</span> <span style="color:#960050;background-color:#1e0010">方法返回值类型</span> <span style="color:#960050;background-color:#1e0010">方法名</span><span style="color:#f92672">([</span><span style="color:#960050;background-color:#1e0010">参数列表</span><span style="color:#f92672">]);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">[</span><span style="color:#66d9ef">public</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">default</span> <span style="color:#960050;background-color:#1e0010">方法返回值类型</span> <span style="color:#960050;background-color:#1e0010">方法名</span><span style="color:#f92672">([</span><span style="color:#960050;background-color:#1e0010">参数列表</span><span style="color:#f92672">]){</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 默认方法的方法体
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">[</span><span style="color:#66d9ef">public</span><span style="color:#f92672">]</span> <span style="color:#66d9ef">static</span> <span style="color:#960050;background-color:#1e0010">方法返回值类型</span> <span style="color:#960050;background-color:#1e0010">方法名</span><span style="color:#f92672">([</span><span style="color:#960050;background-color:#1e0010">参数列表</span><span style="color:#f92672">]){</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 类方法的方法体
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>JDK 1.8之后接口的特性：</p>
<ul>
<li>在接口内部可以定义多个常量和抽象方法，定义常量时必须进行初始化赋值，定义默认方法和静态方法时，可以有方法体。</li>
<li>在接口中定义常量时，可以省略“public static final”修饰符，接口会默认为常量添加”public static final“修饰符。与此类似，在接口中定义抽象方法时，也可以省略”public abstract“修饰符，定义default默认方法和static静态方法时，可以省略”public“修饰符，这些修饰符系统都会默认进行添加。</li>
</ul>
<h3 id="接口的作用">接口的作用</h3>
<ul>
<li>
<p>接口表示一种能力，例如：”做这项工作需要一个钳工/木匠/程序员“</p>
</li>
<li>
<p>接口是一种能力</p>
<ul>
<li>体现在接口方法上</li>
</ul>
</li>
<li>
<p>面向接口编程</p>
<p><img src="/images/Java-Polymorphic/image-20210717200449346.png" alt="image-20210717200449346"></p>
</li>
</ul>
<h3 id="接口的设计">接口的设计</h3>
<ul>
<li>面向接口编程</li>
<li>需求：开发打印机
<ul>
<li>墨盒：彩色、黑白</li>
<li>纸张类型：A4、B5</li>
<li>墨盒和纸张都不是打印机厂商提供的</li>
<li>打印机厂商要兼容市场上的墨盒、纸张</li>
</ul>
</li>
<li>结果：
<ul>
<li>使用黑白墨盒在A4纸上打印</li>
<li>使用彩色墨盒在B5纸上打印</li>
<li>使用彩色墨盒在A4纸上打印</li>
</ul>
</li>
</ul>
<h2 id="接口与抽象类">接口与抽象类</h2>
<h3 id="抽象类的特点-1">抽象类的特点</h3>
<p>何时使用继承？</p>
<ul>
<li>
<p>继承与真实世界类似，只要说”猫是哺乳动物“，猫的很多属性、行为就不言自明了。</p>
<p><strong>符合is-a关系的设计使用抽象类继承</strong></p>
</li>
<li>
<p>继承是代码重用的一种方式，将子类共有的属性和行为放到父类中，子类与父类是is-a关系</p>
</li>
</ul>
<h3 id="接口的特点">接口的特点</h3>
<blockquote>
<p>USB接口本身没有实现任何功能</p>
<p>USB接口规定了数据传输的要求</p>
<p>USB接口可以被多种USB设备实现</p>
</blockquote>
<p>可以使用Java接口来实现</p>
<ul>
<li>编写USB接口 根据需求设计方法</li>
<li>实现USB接口 实现所有方法</li>
<li>使用USB接口 用多态的方式使用</li>
</ul>
<p><strong>符合has-is关系的设计使用接口</strong></p>
]]></content>
        </item>
        
        <item>
            <title>Java面向对象之继承 笔记</title>
            <link>/posts/java-extends/</link>
            <pubDate>Sat, 29 Jan 2022 18:54:26 +0800</pubDate>
            
            <guid>/posts/java-extends/</guid>
            <description>Java面向对象之继承 类的继承机制 继承的的作用 继承的作用：减少重复的冗余的相同属性和方法
多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中
那么多个类无需再定义这些相同属性和行为，只要继承那个类即可
public class Person { // 姓名 private String name; // 年龄 private int age; public void setName(String name) { this.name = name; } public void setAge(int age) { this.age = age; } public void eat() { System.out.println(&amp;#34;吃饭&amp;#34;); } } public class Student extends Person { } 子类和父类的继承机制 继承关系是两个类，一个为子类（派生类），一个父类（基类）。 子类继承父类，使用关键字extends来表示 extends的意思是“扩展”，子类是对父类的扩展 java中类只有单继承，没有多继承（一个儿子只有一个直接的爸爸，但是爸爸可以有多个儿子） Java的单继承 Java不支持多继承，只允许一个类直接继承另一个类 子类只能有一个父类，extends关键字后面只能有一个类名 Java继承的顶级父类：Object类简介 Object类是Java中所有类的始祖 Java中的每一个类都是由它扩展而来，但是并不需要明确写出要继承它 自然的，所有Java类都拥有了其方法 toString()方法
该方法用来返回对象的字符串表示形式
public class Person { // 姓名 private String name; // 年龄 private int age; public String toString() { return &amp;#34;Person[&amp;#34;+name+&amp;#34;,&amp;#34;+age+&amp;#34;]&amp;#34;; } public static void main(String[] args) { Person p = new Person(); p.</description>
            <content type="html"><![CDATA[<h1 id="java面向对象之继承">Java面向对象之继承</h1>
<h2 id="类的继承机制">类的继承机制</h2>
<h3 id="继承的的作用">继承的的作用</h3>
<ul>
<li>
<p>继承的作用：减少重复的冗余的相同属性和方法</p>
</li>
<li>
<p>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中</p>
</li>
<li>
<p>那么多个类无需再定义这些相同属性和行为，只要继承那个类即可</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 姓名
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 年龄
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setName</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setAge</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> age<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">age</span> <span style="color:#f92672">=</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;吃饭&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span> <span style="color:#66d9ef">extends</span> Person
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="子类和父类的继承机制">子类和父类的继承机制</h3>
<ul>
<li>继承关系是两个类，一个为子类（派生类），一个父类（基类）。</li>
<li>子类继承父类，使用关键字extends来表示</li>
<li>extends的意思是“扩展”，子类是对父类的扩展</li>
<li>java中类只有单继承，没有多继承（一个儿子只有一个直接的爸爸，但是爸爸可以有多个儿子）</li>
</ul>
<h3 id="java的单继承">Java的单继承</h3>
<ul>
<li>Java不支持多继承，只允许一个类直接继承另一个类</li>
<li>子类只能有一个父类，extends关键字后面只能有一个类名</li>
</ul>
<h3 id="java继承的顶级父类object类简介">Java继承的顶级父类：Object类简介</h3>
<ul>
<li>Object类是Java中所有类的始祖</li>
<li>Java中的每一个类都是由它扩展而来，但是并不需要明确写出要继承它</li>
<li>自然的，所有Java类都拥有了其方法</li>
</ul>
<p><code>toString()</code>方法</p>
<blockquote>
<p>该方法用来返回对象的字符串表示形式</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 姓名
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 年龄
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">toString</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Person[&#34;</span><span style="color:#f92672">+</span>name<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;,&#34;</span><span style="color:#f92672">+</span>age<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;]&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Person p <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        p<span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;张五&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        p<span style="color:#f92672">.</span><span style="color:#a6e22e">age</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>p<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><code>equals(Object obj)</code>方法</p>
<blockquote>
<p>该方法用来判断两个对象是否相同</p>
<p>如果没有被重写过，其与==等价</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PersonOne</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        PersonOne p1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> PersonOne<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        PersonOne p2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> PersonOne<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>p1<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>p2<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><code>hashCode()</code>方法</p>
<blockquote>
<p>Object类的hashCode方法是返回对象存储地址</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PersonOne</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        PersonOne p1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> PersonOne<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>p1<span style="color:#f92672">.</span><span style="color:#a6e22e">hashCode</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        PersonOne p2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> PersonOne<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>p2<span style="color:#f92672">.</span><span style="color:#a6e22e">hashCode</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="对象向上转型">对象向上转型</h3>
<blockquote>
<p>引用类型的转换</p>
</blockquote>
<ul>
<li>子类转换成为父类，向上转型</li>
<li>格式：父类名称 对象名称 = new 子类名称();</li>
<li>含义：把创建的子类对象当做父类看待和使用</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">run</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Person Run&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span> <span style="color:#66d9ef">extends</span> Person
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span>  <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Son eat&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Application</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// person(父类引用)可以指向子类
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// 向上转型
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        Person s2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Student<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        s2<span style="color:#f92672">.</span><span style="color:#a6e22e">run</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 但不能调用子类特有的方法
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">//s2.eat();
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="对象向下转型">对象向下转型</h3>
<blockquote>
<p>引用类型转换</p>
</blockquote>
<ul>
<li>父类转换为子类，向下转型</li>
<li>子类 引用 = （子类）父类对象</li>
<li>强制类型转换</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">run</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Person Run&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span> <span style="color:#66d9ef">extends</span> Person
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span>  <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Son eat&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Test</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Person p <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Student<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 报错
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// p.eat();
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 向下转型
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        Student s <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>Student<span style="color:#f92672">)</span> p<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        s<span style="color:#f92672">.</span><span style="color:#a6e22e">eat</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>对象向下转型注意：</p>
<p>问题：可能会出现ClassCastException异常</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">run</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Person Run&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span> <span style="color:#66d9ef">extends</span> Person
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span>  <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Son eat&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> TestDemo<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Test1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Person p <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        Student s <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>Student<span style="color:#f92672">)</span> p<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        s<span style="color:#f92672">.</span><span style="color:#a6e22e">eat</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="super关键字">super关键字</h2>
<h3 id="super在继承构造函数中定义和作用">super在继承构造函数中定义和作用</h3>
<ul>
<li>在继承中子类的构造函数必须依赖父类提供的构造函数</li>
<li>super（参数列表）访问父类的构造函数</li>
<li>super调用父类的构造函数，必须在构造函数的第一行</li>
</ul>
<blockquote>
<p>如果父类的构造函数是无参构造函数，可以默认不写super关键字</p>
</blockquote>
<ul>
<li>在继承中子类的构造函数必须依赖父类提供的构造函数</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> age<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span> <span style="color:#66d9ef">extends</span> Person
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Student</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 1. 如果父类提供的只有有参数的构造函数，子类的构造必须依赖父类提供的现有构造函数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// 2. super(参数列表)去访问父类的提供的构造函数，必须明确写出参数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">// 3. super必须在第一行
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">super</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;小张&#34;</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">20</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="super访问父类的属性">super访问父类的属性</h3>
<ul>
<li>在子类的方法或构造器中，通过使用super属性</li>
<li>特殊情况：当子类和父类中定义了同名的属性时，想调用父类中声明的属性，就需要通过super.属性的方式来声明调用的是父类中声明的属性</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 身份证号
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">1001</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span> <span style="color:#66d9ef">extends</span> Person
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 学生证号
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> id <span style="color:#f92672">=</span> <span style="color:#ae81ff">80</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">show</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;身份证号是&#34;</span><span style="color:#f92672">+</span><span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;，学生证号是&#34;</span><span style="color:#f92672">+</span>id<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> super_Demo<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Test</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Student s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Student<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        s<span style="color:#f92672">.</span><span style="color:#a6e22e">show</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="super访问父类的方法">super访问父类的方法</h3>
<p>在子类的方法或构造器中，通过使用super.方法名</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;人都要吃饭&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span> <span style="color:#66d9ef">extends</span> Person
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Student</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 访问父类的方法
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">eat</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Student s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Student<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="super和this区别">super和this区别</h3>
<ul>
<li>super()调用父类的构造函数，必须在构造函数的第一行</li>
<li>this()调用本类的构造函数，必须在构造函数的第一行</li>
<li>super()和this()不能同时调用构造函数</li>
</ul>
<p>代表对象不同</p>
<ul>
<li>this：本身调用者这个对象</li>
<li>super：代表父类对象的引用</li>
</ul>
<p>前置</p>
<ul>
<li>this：没有继承也可以使用</li>
<li>super：只能在继承条件下才能使用</li>
</ul>
<p>构造方法</p>
<ul>
<li>this()：本类的构造</li>
<li>super()：父类的构造</li>
</ul>
<h2 id="final关键字">final关键字</h2>
<h3 id="final关键字修饰变量">final关键字修饰变量</h3>
<ul>
<li>final关键字修饰的变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能修改</li>
<li>final关键字修饰的变量，如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象</li>
<li>final修饰的变量都是常量</li>
<li>final可以修饰局部变量</li>
</ul>
<p><img src="/images/Java-Extends/image-20210713083547227.png" alt="image-20210713083547227"></p>
<h3 id="final关键字修饰方法">final关键字修饰方法</h3>
<ul>
<li>
<p>final修饰的成员方法不能被子类重写</p>
<p>当父类的方法为final时，子类不能与父类有方法名、参数类型、参数个数及参数顺序都一样的方法</p>
</li>
</ul>
<p><img src="/images/Java-Extends/image-20210713085130171.png" alt="image-20210713085130171"></p>
<p><img src="/images/Java-Extends/image-20210713085145406.png" alt="image-20210713085145406"></p>
<ul>
<li>父类方法为private修饰符的final方法</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">show</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Person:show&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span> <span style="color:#66d9ef">extends</span> Person
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">show</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Student:show&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Test</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Person person <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        Student stu <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Student<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">//private的方法仅本类可见，该方法不可见
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">//person.show();
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>        stu<span style="color:#f92672">.</span><span style="color:#a6e22e">show</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="final修饰类">final修饰类</h3>
<ul>
<li>final修饰的类不能被子类继承</li>
<li>final类中的成员方法也默认为final</li>
<li>final类中的变量值是可以改变的</li>
</ul>
<p><img src="/images/Java-Extends/image-20210713091825631.png" alt="image-20210713091825631"></p>
<p><img src="/images/Java-Extends/image-20210713091741790.png" alt="image-20210713091741790"></p>
]]></content>
        </item>
        
        <item>
            <title>Java 面向对象之类和对象 笔记</title>
            <link>/posts/java-object/</link>
            <pubDate>Sat, 29 Jan 2022 18:47:56 +0800</pubDate>
            
            <guid>/posts/java-object/</guid>
            <description>Java 面向对象之类和对象 面向对象与面向过程 面向过程 面向过程编程就是分析出解决问题的步骤 然后使用函数把这些步骤一步步实现 重心放在完成的每个过程上 面向对象 构成问题事务分解成各个对象 描述某个事物在整个解决问题的步骤中的行为 面向过程和面向对象区别 面向过程就是步骤，就是解决问题按部就班 面向对象关注的解决问题所需要的对象 面向过程就是自己办事，面向对象就是托人办事 现实世界的面向对象 类和对象：
类(class)是抽象的 对象(object)是具体的 汽车类(class) –new–&amp;gt;实例(instance)
Java的类和对象 Java的类 类可以看作是一个模板 用于描述一类对象的行为和状态 Java的类的描述 public class Person { // 姓名 String name; // 年龄 int age; // 身高 int height; // 唱歌 void sing() { } // 跳舞 void dance() { } } Java的对象 万物皆对象 对象是具体的物体 拥有属性 拥有行为 把很多零散的构建成一个整体 具有唯一性 类和创建对象 public class Person { // 姓名 String name; // 年龄 int age; // 身高 int height; public static void main(String[] args) { Person p = new Person(); p.</description>
            <content type="html"><![CDATA[<h1 id="java-面向对象之类和对象">Java 面向对象之类和对象</h1>
<h2 id="面向对象与面向过程">面向对象与面向过程</h2>
<h3 id="面向过程">面向过程</h3>
<ul>
<li>面向过程编程就是分析出解决问题的步骤</li>
<li>然后使用函数把这些步骤一步步实现</li>
<li>重心放在完成的每个过程上</li>
</ul>
<h3 id="面向对象">面向对象</h3>
<ul>
<li>构成问题事务分解成各个对象</li>
<li>描述某个事物在整个解决问题的步骤中的行为</li>
</ul>
<h3 id="面向过程和面向对象区别">面向过程和面向对象区别</h3>
<ul>
<li>面向过程就是步骤，就是解决问题按部就班</li>
<li>面向对象关注的解决问题所需要的对象</li>
<li>面向过程就是自己办事，面向对象就是托人办事</li>
</ul>
<p><img src="/images/Java-Object/image-20210708193911362.png" alt="image-20210708193911362"></p>
<h2 id="现实世界的面向对象">现实世界的面向对象</h2>
<p>类和对象：</p>
<ul>
<li>类(class)是抽象的</li>
<li>对象(object)是具体的</li>
</ul>
<p>汽车类(class) –new–&gt;实例(instance)</p>
<h2 id="java的类和对象">Java的类和对象</h2>
<h3 id="java的类">Java的类</h3>
<ul>
<li>类可以看作是一个模板</li>
<li>用于描述一类对象的行为和状态</li>
</ul>
<h3 id="java的类的描述">Java的类的描述</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 姓名
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 年龄
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 身高
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> height<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 唱歌
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">sing</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>   
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 跳舞
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">dance</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="java的对象">Java的对象</h3>
<ul>
<li>万物皆对象</li>
<li>对象是具体的物体</li>
<li>拥有属性</li>
<li>拥有行为</li>
<li>把很多零散的构建成一个整体</li>
<li>具有唯一性</li>
</ul>
<h3 id="类和创建对象">类和创建对象</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 姓名
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 年龄
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 身高
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> height<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Person p <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        p<span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;小鸿蒙&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        p<span style="color:#f92672">.</span><span style="color:#a6e22e">age</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        p<span style="color:#f92672">.</span><span style="color:#a6e22e">height</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">8848</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;这个人的名字是：&#34;</span><span style="color:#f92672">+</span>p<span style="color:#f92672">.</span><span style="color:#a6e22e">name</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;，年龄是&#34;</span><span style="color:#f92672">+</span>p<span style="color:#f92672">.</span><span style="color:#a6e22e">age</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;，身高是：&#34;</span><span style="color:#f92672">+</span>p<span style="color:#f92672">.</span><span style="color:#a6e22e">height</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>类名 对象名=new 类名();</p>
<pre tabindex="0"><code>Person p = new Person();
</code></pre><h3 id="对象与new关键字">对象与new关键字</h3>
<ul>
<li>new关键字表示创建一个对象</li>
<li>new关键字表示实例化对象</li>
<li>new关键字表示申请内存空间</li>
</ul>
<p><code>Person person = null;</code></p>
<p><img src="/images/Java-Object/image-20210709075102873.png" alt="image-20210709075102873"></p>
<p><code>Person person = new Person();</code></p>
<p><img src="/images/Java-Object/image-20210709075214789.png" alt="image-20210709075214789"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>Person person <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>person<span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;小张&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>person<span style="color:#f92672">.</span><span style="color:#a6e22e">age</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span><span style="color:#f92672">;</span>
</span></span></code></pre></div><p><img src="/images/Java-Object/image-20210709081317483.png" alt="image-20210709081317483"></p>
<h3 id="java的内存中创建多个对象">Java的内存中创建多个对象</h3>
<p><img src="/images/Java-Object/image-20210709081600071.png" alt="image-20210709081600071"></p>
<h3 id="类与对象的关系">类与对象的关系</h3>
<p>类的作用 — 产生出具体的对象</p>
<p>对象 – 抽象 – 类 – 实例化 – 对象</p>
<h2 id="java对象的组成">Java对象的组成</h2>
<h3 id="实例变量和静态变量">实例变量和静态变量</h3>
<h4 id="实例变量">实例变量</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 姓名
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 年龄
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 身高
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> height<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Person p <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        p<span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;小鸿蒙&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        p<span style="color:#f92672">.</span><span style="color:#a6e22e">age</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        p<span style="color:#f92672">.</span><span style="color:#a6e22e">height</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">8848</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;这个人的名字是&#34;</span><span style="color:#f92672">+</span>p<span style="color:#f92672">.</span><span style="color:#a6e22e">name</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;，年龄是&#34;</span><span style="color:#f92672">+</span>p<span style="color:#f92672">.</span><span style="color:#a6e22e">age</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;，身高是&#34;</span><span style="color:#f92672">+</span>p<span style="color:#f92672">.</span><span style="color:#a6e22e">height</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="静态变量">静态变量</h4>
<ul>
<li>独立于方法之外的变量，用<code>static</code>修饰，静态变量，也可以叫做类变量</li>
<li>static不能修饰局部变量</li>
</ul>
<h3 id="构造函数">构造函数</h3>
<ul>
<li>java构造函数，也叫构造方法，是java中一种特殊的函数</li>
<li>构造函数没有返回类型，函数名和类名保持一致</li>
<li>new对象产生后，就调用了对象的属性和方法</li>
<li>作用：一般用来初始化成员属性和成员方法</li>
</ul>
<p>格式：</p>
<ol>
<li>修饰符 类名（参数列表）{ }</li>
<li>直接类名 （参数列表）{ }</li>
</ol>
<p>默认无参构造函数和有参构造函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// 无参构造函数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Employee</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Employee</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 有参构造函数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Employee</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Employee</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> age<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>构造函数可以有return关键字，但是不能有具体的返回值类型</p>
<p>构造函数</p>
<ul>
<li>构造函数不是手动调用的，是对象被创建的时候jvm调用</li>
<li>如果一个类没有定义构造方法，jvm在编译的时候会给这个类默认添加一个无参构造方法</li>
<li>如果定义了构造方法，那么jvm不会再创建无参构造方法</li>
<li>创建对象的时候，有几个参数，就要有相应的构造方法，也是对应的要有几个参数</li>
<li>构造函数可以调用构造函数</li>
</ul>
<p>构造函数的作用</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Employee</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Employee</span><span style="color:#f92672">()</span> <span style="color:#75715e">// 构造函数的作用是给类中的属性赋值初始化
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;鸿蒙&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        age <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>构造函数和创建对象</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Student s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Student<span style="color:#f92672">();</span> <span style="color:#75715e">// 创建对象会自动隐式的调用类中提供的构造函数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Student</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> age<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Student s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Student<span style="color:#f92672">();</span><span style="color:#75715e">// 错误
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        Student s1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Student<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;鸿蒙&#34;</span><span style="color:#f92672">,</span><span style="color:#ae81ff">2</span><span style="color:#f92672">);</span><span style="color:#75715e">// 正确
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#75715e">//  创建对象必须依赖类中现在提供的构造函数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="匿名构造块">匿名构造块</h3>
<ul>
<li>构造代码块的格式：{ }</li>
<li>代码块的作用：对象统一初始化</li>
<li>对象创建之前都会执行这个代码块</li>
</ul>
<p>匿名构造块执行</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Dept</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;这是匿名构造块&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Dept dept <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Dept<span style="color:#f92672">();</span><span style="color:#75715e">// 创建对象，如果类中提供了匿名构造块，都会执行
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>创建对象之前都会执行匿名构造块，执行匿名构造块和构造函数的参数无关</p>
<h3 id="构造函数重载">构造函数重载</h3>
<ul>
<li>构造函数重载是多态的一个典型的特例</li>
<li>类中有多个构造函数，参数列表不同</li>
<li>重载构造函数来表达对象的多种初始化行为</li>
</ul>
<p><img src="/images/Java-Object/image-20210709191419342.png" alt="image-20210709191419342"></p>
<p>构造函数重载</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>String pname<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> page<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        name <span style="color:#f92672">=</span> pname<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        age <span style="color:#f92672">=</span> page<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Person p1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        Person p2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;张员工&#34;</span><span style="color:#f92672">,</span><span style="color:#ae81ff">22</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="方法的定义">方法的定义</h3>
<ul>
<li>方法是类或对象的行为特征的抽象</li>
<li>Java中的方法不能独立存在，必须定义在类体中</li>
</ul>
<p>语法格式：</p>
<p>权限修饰符 返回值类型 方法名（参数类型 参数名）</p>
<p>{</p>
<p>// 方法体</p>
<p>// 返回值</p>
<p>}</p>
<p>方法的定义</p>
<ul>
<li>
<p>方法定义的先后顺序无所谓</p>
</li>
<li>
<p>方法的定义不能产生嵌套包含关系</p>
</li>
<li>
<p>方法定义中的返回值与传递的参数类型均为java中定义的数据类型</p>
</li>
<li>
<p>在方法中可以进行返回数据的处理，格式：</p>
<p>return 返回数据类型</p>
<p>void 不返回数据类型</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;这个eat方法是声明了void类型，void类型就是没有返回值&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getAge</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;这个getAge方法是声明了int类型，表示需要在方法的最后使用return返回具体的值&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">20</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="方法的调用">方法的调用</h3>
<ul>
<li>
<p>方法定义了，不会执行，如果想要执行，应进行方法调用</p>
</li>
<li>
<p>本类中的方法调用</p>
<p>方法名(参数列表)</p>
</li>
<li>
<p>外部类中的方法调用</p>
<p>调用类的对象.方法名(参数列表)</p>
</li>
</ul>
<p>方法的调用</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;这个eat方法是声明了void类型，void类型就是没有返回值&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getAge</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;这个getAge方法是声明了int类型，表示需要在方法的最后使用return返回具体的值&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">20</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Person p <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        p<span style="color:#f92672">.</span><span style="color:#a6e22e">eat</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> age <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span><span style="color:#a6e22e">getAge</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;年龄是&#34;</span><span style="color:#f92672">+</span>age<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="构造函数和普通方法的区别">构造函数和普通方法的区别</h4>
<p><img src="/images/Java-Object/image-20210709221321240.png" alt="image-20210709221321240"></p>
<h3 id="方法的重载">方法的重载</h3>
<ul>
<li>一个类中多个方法名称相同</li>
<li>参数的列表不同</li>
<li>返回值类型无关</li>
<li>与修饰符无关</li>
</ul>
<p>方法重载的具体表现形式</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Employee</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;员工默认吃工作餐&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">(</span>String food<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;在一些节日员工可以定制具体的食物，具体的事物是&#34;</span><span style="color:#f92672">+</span>food<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Employee e <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Employee<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        e<span style="color:#f92672">.</span><span style="color:#a6e22e">eat</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        e<span style="color:#f92672">.</span><span style="color:#a6e22e">eat</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;北京烤鸭&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="编译时多态">编译时多态</h4>
<ul>
<li>
<p>早期绑定</p>
<p>早期绑定就是指被调用的目标方法如果在编译期可知</p>
<p>且运行期保持不变时，即可将这个方法与所属的类型进行绑定</p>
</li>
<li>
<p>重载的方法是早期绑定完成</p>
<p>调用了一个重载的方法，在编译时根据参数列表就可以确定方法</p>
</li>
</ul>
<h3 id="面向对象的封装">面向对象的封装</h3>
<ul>
<li>封装是指隐藏对象的属性和实现细节，仅对外提供公式访问方式</li>
</ul>
<p>封装原则：</p>
<ol>
<li>将不需要对外提供的内容都隐藏起来</li>
<li>把属性都隐藏，提供公共方法对其访问</li>
</ol>
<p>封装好处：</p>
<ol>
<li>提高数据访问的安全性</li>
<li>隐藏了实现细节</li>
</ol>
<ul>
<li>
<p>从数据安全角度</p>
<p>没有封装，在外部类中可以直接访问修改数据，造成数据不安全</p>
</li>
<li>
<p>封装的控制与实现：private私有访问修饰符修饰变量</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Employee</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">double</span> salary<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>该露的露，该藏的藏</p>
<ol>
<li>我们程序设计要追求“高内聚，低耦合”</li>
<li>高内聚就是类的内部数据操作细节自己完成，不允许外部干涉</li>
<li>低耦合：仅暴露方法给外部使用</li>
<li>应禁止直接访问一个对象中数据的实际表示，而通过操着方法来访问，这称为数据的隐藏</li>
</ol>
<h2 id="this关键字">this关键字</h2>
<ul>
<li>this代表当前对象的一个引用</li>
<li>所谓当前对象，指的是调用类中方法或属性的那个对象</li>
<li>this只能在方法内部使用，表示对“调用方法的那个对象”的引用</li>
<li>this属性名：表示本对象自己的属性</li>
</ul>
<p>对象的一个属性被方法或构造器的参数屏蔽</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> age<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">age</span> <span style="color:#f92672">=</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Person p1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;小张&#34;</span><span style="color:#f92672">,</span><span style="color:#ae81ff">20</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        Person p2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;小李&#34;</span><span style="color:#f92672">,</span><span style="color:#ae81ff">22</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>this关键字调用本类构造函数</p>
<ul>
<li>this关键字调用类的重载构造函数</li>
<li>this关键字必须位于构造函数的第一行</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> age<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">age</span> <span style="color:#f92672">=</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Person</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Person p1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;出生婴儿1&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        Person p2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Person<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;出生婴儿2&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>this关键字调用本类方法</p>
<ul>
<li>this.方法名 ：表示当前对象自己的方法</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">eat</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;同学先吃点食物&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">talk</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">eat</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;同学吃完饭再说&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>this关键字使用注意</p>
<ul>
<li>this不能用于静态方法和静态块</li>
<li>main方法也是静态的，所以this也不能用于main方法</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Person</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;小妮子&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">age</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="static-关键字">static 关键字</h2>
<p>static修饰变量</p>
<ul>
<li>static变量也称作静态变量，也叫做类变量</li>
<li>静态变量被所用的对象所共享，在内存中只有一个副本</li>
<li>当且仅当在类初次加载时会被初始化</li>
<li>静态变量属于类</li>
<li>通过类名就可以调用静态变量</li>
<li>也可以通过对象名.静态变量名调用</li>
</ul>
<p>static变量</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> String schoolName<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> count<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">Student</span><span style="color:#f92672">(</span>String name<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        count<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">showStuInfo</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;学生的姓名是&#34;</span><span style="color:#f92672">+</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;，学校的名字是&#34;</span><span style="color:#f92672">+</span>Student<span style="color:#f92672">.</span><span style="color:#a6e22e">schoolName</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Student<span style="color:#f92672">.</span><span style="color:#a6e22e">schoolName</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;第五十七中&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        Student s1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Student<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;小张&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        Student s2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Student<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;小王&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        Student s3 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Student<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;小美&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        s1<span style="color:#f92672">.</span><span style="color:#a6e22e">showStuInfo</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        s2<span style="color:#f92672">.</span><span style="color:#a6e22e">showStuInfo</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        s3<span style="color:#f92672">.</span><span style="color:#a6e22e">showStuInfo</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;学生的数量是&#34;</span><span style="color:#f92672">+</span>Student<span style="color:#f92672">.</span><span style="color:#a6e22e">count</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>static修饰方法</p>
<ul>
<li>static修饰的方法叫静态方法，也叫做类方法</li>
<li>静态方法中不能直接访问类的非静态成员变量和非静态成员方法</li>
<li>静态方法中不能使用this关键字</li>
<li>通过类名就可以调用静态方法</li>
<li>也可以通过对象名.静态方法名调用</li>
</ul>
<p>静态方法和静态方法访问</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> String name<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">int</span> studentId<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> String classRoom<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">showClassRoom</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;自习教室是公共教室1001&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Student<span style="color:#f92672">.</span><span style="color:#a6e22e">showClassRoom</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>static块</p>
<ul>
<li>静态代码块在类加载时执行，并且只执行一次</li>
<li>静态代码块在类中可以有多个</li>
<li>静态代码块中不能有this关键字</li>
</ul>
<p>静态块可以有多个按照顺序执行</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Emp</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">static</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;欢迎您员工&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">static</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;每天上班都要打卡&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;每天下班都要打卡&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>注意静态块，匿名构造块，构造函数的执行顺序</p>
<h2 id="类的生命周期">类的生命周期</h2>
<p>类的生命周期由五部分组成：</p>
<ol>
<li>加载</li>
<li>连接</li>
<li>初始化</li>
<li>使用</li>
<li>卸载</li>
</ol>
<p>其中，连接阶段又分为三个阶段：</p>
<ol>
<li>验证</li>
<li>准备</li>
<li>解析</li>
</ol>
<p>总的生命周期如下图所示：</p>
<p><img src="/images/Java-Object/image-20210712082608962.png" alt="image-20210712082608962"></p>
<ul>
<li>加载</li>
<li>验证</li>
<li>准备</li>
<li>解析</li>
<li>初始化</li>
<li>使用</li>
<li>卸载</li>
</ul>
<h2 id="java方法参数">Java方法参数</h2>
<p>方法参数的基本类型和引用类型</p>
<ul>
<li>在java方法中参数列表有两种类型的参数，基本类型和引用类型</li>
<li>参数类型是基本数据类型，那么传过来的就是这个参数的一个副本</li>
<li>参数类型是引用类型，那么传过来的就这个引用参数的脚本，这个副本存放的是参数的地址</li>
</ul>
<p>Java方法的参数基本数据类型</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Test1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">change</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> a<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> b<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        a <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        b <span style="color:#f92672">=</span> <span style="color:#ae81ff">30</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;chang方法里，a的值是：&#34;</span><span style="color:#f92672">+</span>a<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;;b的值是：&#34;</span><span style="color:#f92672">+</span>b<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Test1 t <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Test1<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        t<span style="color:#f92672">.</span><span style="color:#a6e22e">change</span><span style="color:#f92672">(</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">a</span><span style="color:#f92672">,</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">b</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;交换结束后，a的值是：&#34;</span><span style="color:#f92672">+</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">a</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;;b的值是：&#34;</span><span style="color:#f92672">+</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">b</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Java方法的参数引用数据类型</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Test2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">change</span><span style="color:#f92672">(</span>Test2 t<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        t<span style="color:#f92672">.</span><span style="color:#a6e22e">a</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        t<span style="color:#f92672">.</span><span style="color:#a6e22e">b</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">30</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;change方法里，a的值是：&#34;</span><span style="color:#f92672">+</span>a<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;;b的值是：&#34;</span><span style="color:#f92672">+</span>b<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Test2 t <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Test2<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        t<span style="color:#f92672">.</span><span style="color:#a6e22e">change</span><span style="color:#f92672">(</span>t<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;交换结束后，a的值是：&#34;</span><span style="color:#f92672">+</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">a</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;;b的值是：&#34;</span><span style="color:#f92672">+</span>t<span style="color:#f92672">.</span><span style="color:#a6e22e">b</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Java的可变参数列表</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Test</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">...</span> a<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i<span style="color:#f92672">&lt;</span>a<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>a<span style="color:#f92672">[</span>i<span style="color:#f92672">]);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Test t <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Test<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        t<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        t<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        t<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">,</span><span style="color:#ae81ff">2</span><span style="color:#f92672">,</span><span style="color:#ae81ff">5</span><span style="color:#f92672">,</span><span style="color:#ae81ff">8</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="java参数传递基本数据类型和引用类型区别">Java参数传递基本数据类型和引用类型区别</h3>
<table>
<thead>
<tr>
<th style="text-align:center">说明</th>
<th style="text-align:center">基本数据类型</th>
<th style="text-align:center">引用数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">根本</td>
<td style="text-align:center">会创建副本</td>
<td style="text-align:center">不会创建副本</td>
</tr>
<tr>
<td style="text-align:center">所以</td>
<td style="text-align:center">函数中无法改变原始对象</td>
<td style="text-align:center">函数中可以改变原始对象</td>
</tr>
</tbody>
</table>
]]></content>
        </item>
        
        <item>
            <title>Java基础语法 笔记</title>
            <link>/posts/java-basic/</link>
            <pubDate>Sat, 29 Jan 2022 16:27:52 +0800</pubDate>
            
            <guid>/posts/java-basic/</guid>
            <description>Java基础语法 概述 JVM
JVM：Java虚拟机，简称JVM Java程序的跨平台性的核心是JVM JRE和JDK
JRE：Java程序运行环境 JDK：Java程序开发工具包 安装 Java官方网站：http://oracle.com
Java JDK SE8
环境变量：Java_Home
%Java_Home% /bin
bin目录：
java.exe
javac.exe
第一个Java程序 Java是纯面向对象高级编程语言
开发步骤
定义类 class public classclass名与源文件名一致，且一个文件只能有一个 主方法 main 入口函数 系统输出：编译 public class HelloWorld { /** * public class：公共类名，一个文件只有一个 * 类名：HelloWorld 与文件名一致 */ public static void main(String[] args) { /** * static：静态 * void：返回值的类型 * main：方法名，严格定义 * String：字符串 * []：数组 * args：参数名 */ Syetem.out.print(&amp;#34;1.Hello World!&amp;#34;); // 不换行输出 System.out.println(&amp;#34;2.Hello World&amp;#34;); // 换行输出 } } 编码规范 标识符 标识符：字符序列</description>
            <content type="html"><![CDATA[<h1 id="java基础语法">Java基础语法</h1>
<h2 id="概述">概述</h2>
<p><strong>JVM</strong></p>
<ul>
<li>JVM：Java虚拟机，简称JVM</li>
<li>Java程序的跨平台性的核心是JVM</li>
</ul>
<p><strong>JRE和JDK</strong></p>
<ul>
<li>JRE：Java程序运行环境</li>
<li>JDK：Java程序开发工具包</li>
</ul>
<p><img src="/images/Java-basic/image-20200929132634842.png" alt="image-20200929132634842"></p>
<h2 id="安装">安装</h2>
<p>Java官方网站：http://oracle.com</p>
<p>Java JDK SE8</p>
<p>环境变量：Java_Home</p>
<p>%Java_Home% /bin</p>
<blockquote>
<p>bin目录：</p>
<p>java.exe</p>
<p>javac.exe</p>
</blockquote>
<h2 id="第一个java程序">第一个Java程序</h2>
<p>Java是纯面向对象高级编程语言</p>
<p><strong>开发步骤</strong></p>
<ol>
<li>定义类 class  <code>public class</code>class名与源文件名一致，且一个文件只能有一个</li>
<li>主方法 main 入口函数</li>
<li>系统输出：编译</li>
</ol>
<p><img src="/images/Java-basic/image-20220129124723960.png" alt="image-20220129124723960"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HelloWorld</span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span> 
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">   * public class：公共类名，一个文件只有一个
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">   * 类名：HelloWorld 与文件名一致
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">   */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       * static：静态
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       * void：返回值的类型
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       * main：方法名，严格定义
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       * String：字符串
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       * []：数组
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       * args：参数名
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">       */</span>
</span></span><span style="display:flex;"><span>        Syetem<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">print</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;1.Hello World!&#34;</span><span style="color:#f92672">);</span> <span style="color:#75715e">// 不换行输出
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;2.Hello World&#34;</span><span style="color:#f92672">);</span> <span style="color:#75715e">// 换行输出
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h2 id="编码规范">编码规范</h2>
<h3 id="标识符">标识符</h3>
<p>标识符：字符序列</p>
<p>标识符规范：</p>
<p><img src="/images/Java-basic/image-20210623151855271.png" alt="image-20210623151855271"></p>
<h3 id="命名规范">命名规范</h3>
<ol>
<li>
<p>类、接口</p>
<blockquote>
<p>单个单词：小驼峰命名 <code>Hello</code></p>
<p>多个单词：大驼峰命名 <code>HelloWorld</code></p>
</blockquote>
</li>
<li>
<p>变量、方法</p>
<blockquote>
<p>单个单词：全小写 <code>check()</code></p>
<p>多个单词：首单词全小写，后面每个单词首字母大写 <code>checkUserName()</code></p>
</blockquote>
</li>
<li>
<p>常量</p>
<blockquote>
<p>单个单词：全大写 <code>NUMBER</code></p>
<p>多个单词：全大写中间下划线 <code>MAX_VALUE</code></p>
</blockquote>
</li>
</ol>
<h3 id="注释">注释</h3>
<p>注释：不进行编译处理 可读性</p>
<p>类型：</p>
<ul>
<li>
<p>单行注释</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// 单行注释 可嵌套
</span></span></span></code></pre></div></li>
<li>
<p>多行注释（区块注释）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> 多行注释 不可嵌套
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*/</span>
</span></span></code></pre></div></li>
<li>
<p>文档注释 <code>javadoc</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * 文档注释 Javadoc生成文档
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span></code></pre></div></li>
</ul>
<p><code>javadoc</code> 用法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>javadoc <span style="color:#f92672">[</span>options<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>packagenames<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>sourcefiles<span style="color:#f92672">]</span>
</span></span></code></pre></div><h2 id="数据类型和变量">数据类型和变量</h2>
<h3 id="变量">变量</h3>
<p>存储程序的数据 -&gt; 申请存储空间 -&gt; 变量</p>
<table>
<thead>
<tr>
<th>比喻</th>
<th>概念</th>
</tr>
</thead>
<tbody>
<tr>
<td>房间</td>
<td>变量</td>
</tr>
<tr>
<td>房间名</td>
<td>变量名</td>
</tr>
<tr>
<td>房间类型</td>
<td>变量类型</td>
</tr>
<tr>
<td>入住的客人</td>
<td>变量值</td>
</tr>
</tbody>
</table>
<h4 id="使用步骤">使用步骤</h4>
<ol>
<li>
<p>声明变量，即根据数据类型在内存申请空间</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// 数据类型 变量名;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> age<span style="color:#f92672">;</span>
</span></span></code></pre></div></li>
<li>
<p>赋值，即将数据存储至对应的内存空间</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// 变量名 = 数值;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>age <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>
</span></span></code></pre></div></li>
<li>
<p>使用变量</p>
</li>
</ol>
<blockquote>
<p>1 和 2 可进行合并</p>
</blockquote>
<p>变量名：标识符 -&gt; 遵循规范</p>
<h4 id="变量类型">变量类型</h4>
<ul>
<li>局部：某方法或代码块</li>
<li>全局：类的属性</li>
<li>静态：<code>static</code>修饰，整个类成员共享</li>
</ul>
<p>作用域：全局 局部</p>
<h3 id="数据类型">数据类型</h3>
<p>数据类型 –&gt; 分类数据</p>
<p><img src="/images/Java-basic/image-20220129130446200.png" alt="image-20220129130446200"></p>
<h4 id="基本数据类型">基本数据类型</h4>
<p><strong>整型</strong></p>
<table>
<thead>
<tr>
<th>整型</th>
<th>bit</th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>8</td>
<td>-128~127</td>
</tr>
<tr>
<td>short</td>
<td>16</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>int</td>
<td>32</td>
<td>-2^31^ ~ 2^31^-1</td>
</tr>
<tr>
<td>long</td>
<td>64</td>
<td>-2^63^ ~ 2^63^-1</td>
</tr>
</tbody>
</table>
<p>整型数据存在有符号为类进行补码：</p>
<table>
<thead>
<tr>
<th>bit</th>
<th>符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>正数</td>
</tr>
<tr>
<td>1</td>
<td>负数</td>
</tr>
</tbody>
</table>
<p><strong>浮点型</strong></p>
<table>
<thead>
<tr>
<th>浮点型</th>
<th>bit</th>
</tr>
</thead>
<tbody>
<tr>
<td>float</td>
<td>32</td>
</tr>
<tr>
<td>double（默认类型）</td>
<td>64</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">float</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.14f</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">double</span> b <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.14</span><span style="color:#f92672">;</span>
</span></span></code></pre></div><p><strong>布尔类型</strong></p>
<p>只有两个值 <code>true</code>和<code>false</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">boolean</span> flag1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">boolean</span> flag2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>flag1<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;flag1 is true&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>flag2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;flag2 is true&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><strong>字符型</strong></p>
<p>编码：二进制类型映射到字符</p>
<p>编码表：如何编码字符</p>
<p><img src="/images/Java-basic/image-20210623162225439.png" alt="image-20210623162225439"></p>
<p>ASCII码：编码美国字符（8位） 7位二进制 剩下一位为0</p>
<p>Unicode码：万国码（16位） 65536个字符</p>
<p><code>char</code> 2字节 [0, 65536]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">char</span> c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;中&#34;</span> <span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> c<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 数据类型自动转换
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">char</span> c <span style="color:#f92672">=</span> <span style="color:#ae81ff">20013</span><span style="color:#f92672">;</span>
</span></span></code></pre></div><h5 id="数据类型转换">数据类型转换</h5>
<p>大范围 -&gt; 小范围 强制转换</p>
<p>小范围 -&gt; 大范围 自动转换</p>
<p>强制转换语法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// 目标数据类型 变量名 = （目标数据类型）值/变量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> c <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">short</span> s <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">short</span><span style="color:#f92672">)</span> c<span style="color:#f92672">;</span>
</span></span></code></pre></div><p><img src="/images/Java-basic/image-20220129132435327.png" alt="image-20220129132435327"></p>
<h4 id="引用类型">引用类型</h4>
<p>在C和C++通过指针操作内存中的元素，Java使用“引用”，java中一切都被视为对象</p>
<p>引用数据类型：</p>
<ul>
<li>数组</li>
<li>接口</li>
<li>对象</li>
</ul>
<p>引用类型在内存中的存储方式：</p>
<p><img src="/images/Java-basic/image-20210623202017056.png" alt="image-20210623202017056"></p>
<p>引用类型<code>==</code>比的是值，即内存地址</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>String s1 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> String<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;abc&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>String s2 <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> String<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;abc&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>s1 <span style="color:#f92672">==</span> s2<span style="color:#f92672">);</span>
</span></span></code></pre></div><p>运行结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>false
</span></span></code></pre></div><h2 id="运算符">运算符</h2>
<p>简介：对常量或变量进行操作的符号</p>
<p>表达式：运算符和操作数的组合
$$
\begin{equation}
\underbrace{Y = X * \overbrace{(2+10)}^{子表达式}}_{表达式}
\end{equation}
$$
分类：</p>
<p><img src="/images/Java-basic/image-20220129143503745.png" alt="image-20220129143503745"></p>
<p><img src="/images/Java-basic/image-20220129143659794.png" alt="image-20220129143659794"></p>
<h3 id="赋值运算符">赋值运算符</h3>
<p>自右向左运行</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a<span style="color:#f92672">,</span>b<span style="color:#f92672">,</span>c<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">=</span> b <span style="color:#f92672">=</span> c <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span> 
</span></span></code></pre></div><h3 id="算术运算符">算术运算符</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">double</span> c <span style="color:#f92672">=</span> <span style="color:#ae81ff">4.00</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">double</span> m <span style="color:#f92672">=</span> <span style="color:#ae81ff">20.00</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>a<span style="color:#f92672">+</span>b<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>a<span style="color:#f92672">-</span>b<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>a<span style="color:#f92672">*</span>b<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>a<span style="color:#f92672">/</span>b<span style="color:#f92672">);</span> <span style="color:#75715e">// 值为 int
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>a<span style="color:#f92672">%</span>b<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>a<span style="color:#f92672">/</span>c<span style="color:#f92672">);</span> <span style="color:#75715e">// 值为 float
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>m<span style="color:#f92672">/</span>b<span style="color:#f92672">);</span> <span style="color:#75715e">// 值为 float
</span></span></span></code></pre></div><p>复合运算符：赋值运算符+算术运算符 （自左向右） 效率高于算术运算符</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">*=</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">/=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">%=</span> <span style="color:#ae81ff">26</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">+=</span> a <span style="color:#f92672">+=</span> <span style="color:#ae81ff">6</span> <span style="color:#75715e">// 等价于 a = a+(a+6)
</span></span></span></code></pre></div><p>自增/自减运算</p>
<p>前缀运算“先运算后使用”</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> <span style="color:#f92672">++</span>a<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;a=&#34;</span><span style="color:#f92672">+</span>a<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;b=&#34;</span><span style="color:#f92672">+</span>b<span style="color:#f92672">);</span>
</span></span></code></pre></div><p>后缀运算“先使用后运算”</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> a<span style="color:#f92672">++;</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;a=&#34;</span><span style="color:#f92672">+</span>a<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;b=&#34;</span><span style="color:#f92672">+</span>b<span style="color:#f92672">);</span>
</span></span></code></pre></div><h3 id="关系运算符">关系运算符</h3>
<p>运算结果为<code>boolean</code>类型 <code>true</code>或<code>false</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> a <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> <span style="color:#ae81ff">15</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>a <span style="color:#f92672">&gt;=</span> b<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>a <span style="color:#f92672">&lt;=</span> b<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>a <span style="color:#f92672">==</span> b<span style="color:#f92672">);</span> <span style="color:#75715e">// 引用类型不能使用 == 进行比较
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>a <span style="color:#f92672">&gt;</span> b<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>a <span style="color:#f92672">&lt;</span> b<span style="color:#f92672">);</span>
</span></span></code></pre></div><h3 id="逻辑运算符">逻辑运算符</h3>
<p>逻辑运算符也叫短路运算符 -&gt; 复杂的逻辑表达式 -&gt; boolean类型</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">boolean</span> a <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">boolean</span> b <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">&amp;&amp;</span> b<span style="color:#f92672">;</span> <span style="color:#75715e">// false
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>a <span style="color:#f92672">||</span> b<span style="color:#f92672">;</span> <span style="color:#75715e">// true
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">!</span>a<span style="color:#f92672">;</span> <span style="color:#75715e">// false
</span></span></span></code></pre></div><h3 id="三目运算符">三目运算符</h3>
<p>语法：布尔表达式？表达式1：表达式2</p>
<p><img src="/images/Java-basic/image-20220129144526912.png" alt="image-20220129144526912"></p>
<h3 id="instanceof运算符">instanceof运算符</h3>
<p>判断类的实例是否属于该类</p>
<p>引用实例-&gt; 属于instanceof -&gt; 引用数据类型</p>
<h3 id="位运算符">位运算符</h3>
<p>C语言的低级操作 -&gt; 操作二进制位</p>
<table>
<thead>
<tr>
<th>位操作符</th>
<th>含义</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;</td>
<td>与</td>
<td></td>
</tr>
<tr>
<td>|</td>
<td>或</td>
<td></td>
</tr>
<tr>
<td>^</td>
<td>异或</td>
<td></td>
</tr>
<tr>
<td>&laquo;</td>
<td>左移</td>
<td>高位丢弃，低位补0</td>
</tr>
<tr>
<td>&raquo;</td>
<td>右移</td>
<td>低位丢弃，高位补1或0，根据计算结果</td>
</tr>
<tr>
<td>&raquo;&gt;</td>
<td>无符号右移</td>
<td>忽略符号位，高位补0</td>
</tr>
</tbody>
</table>
<hr>
<p>运算符优先级：</p>
<table>
<thead>
<tr>
<th>顺序</th>
<th>运算符</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>()</code> <code>[]</code></td>
</tr>
<tr>
<td>2</td>
<td><code>++</code> <code>--</code> <code>!</code></td>
</tr>
<tr>
<td>3</td>
<td><code>*</code> <code>/</code> <code>%</code> <code>+</code> <code>-</code></td>
</tr>
<tr>
<td>4</td>
<td><code>&gt;</code> <code>&gt;=</code> <code>&lt;</code> <code>&lt;=</code> <code>==</code> <code>!=</code></td>
</tr>
<tr>
<td>5</td>
<td><code>&amp;&amp;</code> `</td>
</tr>
<tr>
<td>6</td>
<td><code>?:</code> <code>=</code> <code>*=</code> <code>/=</code> <code>+=</code> <code>-=</code></td>
</tr>
</tbody>
</table>
<h2 id="逻辑流程控制语句">逻辑流程控制语句</h2>
<h3 id="main函数和顺序结构">main函数和顺序结构</h3>
<p><img src="/images/Java-basic/image-20220129161200091.png" alt="image-20220129161200091"></p>
<p>默认运行 public class -&gt; main (可以传入参数)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">){}</span>
</span></span></code></pre></div><p>顺序结构 自上而下运行</p>
<h3 id="选择结构">选择结构</h3>
<p><img src="/images/Java-basic/image-20210624094807166.png" alt="image-20210624094807166"></p>
<p>if语句：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// if形式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>expr<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    code block
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// if-else形式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>expr<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    code block <span style="color:#ae81ff">1</span>   
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    code block <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// if-else if-else形式 多条件分支
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>expr1<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    code block <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>expr2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    code block <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	code block <span style="color:#ae81ff">3</span>    
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>switch语句：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">switch</span><span style="color:#f92672">(</span>expr<span style="color:#f92672">){</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> value1<span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>        codeBlock1<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> value2<span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>        codeBlock2<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>codeBlockn<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><blockquote>
<p>JDK 1.5 以前 expr: <code>byte</code> <code>short</code> <code>int</code> <code>char</code></p>
<p>JDK 1.5 支持 <code>enmu</code></p>
<p>JDK 1.7 支持 <code>String</code></p>
</blockquote>
<p><img src="/images/Java-basic/image-20220129162518022.png" alt="image-20220129162518022"></p>
<p>if条件分支 可以进行嵌套，灵活性更高</p>
<p>switch-case条件分支 不能嵌套：</p>
<ul>
<li>效率更高</li>
<li>批处理</li>
<li>可读性更高</li>
</ul>
<h3 id="循环结构">循环结构</h3>
<p><img src="/images/Java-basic/image-20210624094747664.png" alt="image-20210624094747664"></p>
<p>while循环结构：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">while</span><span style="color:#f92672">(</span>expr<span style="color:#f92672">){</span>
</span></span><span style="display:flex;"><span>    Loop body
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><img src="/images/Java-basic/image-20210624094719748.png" alt="image-20210624094719748"></p>
<p>do-while循环结构：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    Loop body
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span><span style="color:#66d9ef">while</span><span style="color:#f92672">(</span>expr<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>for循环结构：</p>
<p>循环最清晰，for循环，预定次数执行语句</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">100</span><span style="color:#f92672">;</span>i<span style="color:#f92672">++)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">+=</span> i<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>result<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span><span style="color:#f92672">(;;)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">//死循环 for三个语句都去掉依然可以执行
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="循环控制">循环控制</h3>
<p><code>break</code> 结束当前循环，语句块</p>
<p><code>continue</code> 结束本次循环，进入下次循环</p>
<p><code>return</code> 方法的结束，返回指定类型的值，也可以是对象</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#f92672">;</span> <span style="color:#75715e">// 无 void
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">return</span> i<span style="color:#f92672">;</span> <span style="color:#75715e">// 有
</span></span></span></code></pre></div><h3 id="循环嵌套">循环嵌套</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>i<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">9</span><span style="color:#f92672">;</span>i<span style="color:#f92672">++)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> j<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>j<span style="color:#f92672">&lt;=</span>i<span style="color:#f92672">;</span>j<span style="color:#f92672">++)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">print</span><span style="color:#f92672">(</span>j<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;*&#34;</span><span style="color:#f92672">+</span>i<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;=&#34;</span><span style="color:#f92672">+(</span>j<span style="color:#f92672">*</span>i<span style="color:#f92672">)+</span><span style="color:#e6db74">&#34; &#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>编码-编写你的快乐</title>
            <link>/posts/encode/</link>
            <pubDate>Sat, 29 Jan 2022 11:36:02 +0800</pubDate>
            
            <guid>/posts/encode/</guid>
            <description>编码 编码是将信息从一种形式转换位另一种形式的过程。它用预先规定的方法将文字、数字或其他对象编成数码，或者将信息、数据转换成规定的电脉冲信号。编码被广泛应用于电子计算机、电视、遥控和通信等方面。解码是编码的逆过程。
编码和解码是个相当广泛的话题，涉及计算机对信息处理的根本方式。编码的目的不是为了让别人看到后解不出来，而是代表信息的另一种表达方式。将原始信息转化为编码信息进行传输，可以解决一些特殊字符、不可见字符的传输问题。接收者将编码信息再转化成原始信息，转化的过程称之为解码。
历史 编码的演变源于人对计算机需求的改变。
编码的萌芽——控制码 ASCII码的出现 ASCII码的发展——扩展字符集 编码的中国化——GBK家族 编码的国家化——百家争鸣的编码时代 编码的国际化——Unicode编码 编码的互联网化——UTF家族 从本质上讲，编码/解码是在做将一种形式的数据翻译为另一种形式的数据的工作。
编码类型 ASCII码 ASCII码是最常见的编码类型。ASCII ((American Standard Code for Information Interchange): 美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。它是最通用的信息交换标准，并等同于国际标准ISO/IEC 646。ASCII第一次以规范标准的类型发表是在1967年，最后一次更新则是在1986年，到目前为止共定义了128个字符。
ASCII码现在也经常出现在计算编码运输过程中，进行编码，而且在很多编程语言中也经常有用到。
Bin(二进制) Oct(八进制) Dec(十进制) Hex(十六进制) 缩写/字符 解释 0000 0000 00 0 0x00 NUL(null) 空字符 0000 0001 01 1 0x01 SOH(start of headline) 标题开始 0000 0010 02 2 0x02 STX (start of text) 正文开始 0000 0011 03 3 0x03 ETX (end of text) 正文结束 0000 0100 04 4 0x04 EOT (end of transmission) 传输结束 0000 0101 05 5 0x05 ENQ (enquiry) 请求 0000 0110 06 6 0x06 ACK (acknowledge) 收到通知 0000 0111 07 7 0x07 BEL (bell) 响铃 0000 1000 010 8 0x08 BS (backspace) 退格 0000 1001 011 9 0x09 HT (horizontal tab) 水平制表符 0000 1010 012 10 0x0A LF (NL line feed, new line) 换行键 0000 1011 013 11 0x0B VT (vertical tab) 垂直制表符 0000 1100 014 12 0x0C FF (NP form feed, new page) 换页键 0000 1101 015 13 0x0D CR (carriage return) 回车键 0000 1110 016 14 0x0E SO (shift out) 不用切换 0000 1111 017 15 0x0F SI (shift in) 启用切换 0001 0000 020 16 0x10 DLE (data link escape) 数据链路转义 0001 0001 021 17 0x11 DC1 (device control 1) 设备控制1 0001 0010 022 18 0x12 DC2 (device control 2) 设备控制2 0001 0011 023 19 0x13 DC3 (device control 3) 设备控制3 0001 0100 024 20 0x14 DC4 (device control 4) 设备控制4 0001 0101 025 21 0x15 NAK (negative acknowledge) 拒绝接收 0001 0110 026 22 0x16 SYN (synchronous idle) 同步空闲 0001 0111 027 23 0x17 ETB (end of trans.</description>
            <content type="html"><![CDATA[<h1 id="编码">编码</h1>
<p>编码是将信息从一种形式转换位另一种形式的过程。它用预先规定的方法将文字、数字或其他对象编成数码，或者将信息、数据转换成规定的电脉冲信号。编码被广泛应用于电子计算机、电视、遥控和通信等方面。解码是编码的逆过程。</p>
<p>编码和解码是个相当广泛的话题，涉及计算机对信息处理的根本方式。编码的目的不是为了让别人看到后解不出来，而是代表信息的另一种表达方式。将原始信息转化为编码信息进行传输，可以解决一些特殊字符、不可见字符的传输问题。接收者将编码信息再转化成原始信息，转化的过程称之为解码。</p>
<h2 id="历史">历史</h2>
<p>编码的演变源于人对计算机需求的改变。</p>
<ol>
<li>编码的萌芽——控制码</li>
<li>ASCII码的出现</li>
<li>ASCII码的发展——扩展字符集</li>
<li>编码的中国化——GBK家族</li>
<li>编码的国家化——百家争鸣的编码时代</li>
<li>编码的国际化——Unicode编码</li>
<li>编码的互联网化——UTF家族</li>
</ol>
<p>从本质上讲，编码/解码是在做将一种形式的数据翻译为另一种形式的数据的工作。</p>
<h2 id="编码类型">编码类型</h2>
<h3 id="ascii码">ASCII码</h3>
<p>ASCII码是最常见的编码类型。ASCII ((American Standard Code for Information Interchange): 美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。它是最通用的信息交换标准，并等同于国际标准ISO/IEC 646。ASCII第一次以规范标准的类型发表是在1967年，最后一次更新则是在1986年，到目前为止共定义了128个字符。</p>
<p>ASCII码现在也经常出现在计算编码运输过程中，进行编码，而且在很多编程语言中也经常有用到。</p>
<table>
<thead>
<tr>
<th>Bin(二进制)</th>
<th>Oct(八进制)</th>
<th>Dec(十进制)</th>
<th>Hex(十六进制)</th>
<th>缩写/字符</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>0000 0000</td>
<td>00</td>
<td>0</td>
<td>0x00</td>
<td>NUL(null)</td>
<td>空字符</td>
</tr>
<tr>
<td>0000 0001</td>
<td>01</td>
<td>1</td>
<td>0x01</td>
<td>SOH(start of headline)</td>
<td>标题开始</td>
</tr>
<tr>
<td>0000 0010</td>
<td>02</td>
<td>2</td>
<td>0x02</td>
<td>STX (start of text)</td>
<td>正文开始</td>
</tr>
<tr>
<td>0000 0011</td>
<td>03</td>
<td>3</td>
<td>0x03</td>
<td>ETX (end of text)</td>
<td>正文结束</td>
</tr>
<tr>
<td>0000 0100</td>
<td>04</td>
<td>4</td>
<td>0x04</td>
<td>EOT (end of transmission)</td>
<td>传输结束</td>
</tr>
<tr>
<td>0000 0101</td>
<td>05</td>
<td>5</td>
<td>0x05</td>
<td>ENQ (enquiry)</td>
<td>请求</td>
</tr>
<tr>
<td>0000 0110</td>
<td>06</td>
<td>6</td>
<td>0x06</td>
<td>ACK (acknowledge)</td>
<td>收到通知</td>
</tr>
<tr>
<td>0000 0111</td>
<td>07</td>
<td>7</td>
<td>0x07</td>
<td>BEL (bell)</td>
<td>响铃</td>
</tr>
<tr>
<td>0000 1000</td>
<td>010</td>
<td>8</td>
<td>0x08</td>
<td>BS (backspace)</td>
<td>退格</td>
</tr>
<tr>
<td>0000 1001</td>
<td>011</td>
<td>9</td>
<td>0x09</td>
<td>HT (horizontal tab)</td>
<td>水平制表符</td>
</tr>
<tr>
<td>0000 1010</td>
<td>012</td>
<td>10</td>
<td>0x0A</td>
<td>LF (NL line feed, new line)</td>
<td>换行键</td>
</tr>
<tr>
<td>0000 1011</td>
<td>013</td>
<td>11</td>
<td>0x0B</td>
<td>VT (vertical tab)</td>
<td>垂直制表符</td>
</tr>
<tr>
<td>0000 1100</td>
<td>014</td>
<td>12</td>
<td>0x0C</td>
<td>FF (NP form feed, new page)</td>
<td>换页键</td>
</tr>
<tr>
<td>0000 1101</td>
<td>015</td>
<td>13</td>
<td>0x0D</td>
<td>CR (carriage return)</td>
<td>回车键</td>
</tr>
<tr>
<td>0000 1110</td>
<td>016</td>
<td>14</td>
<td>0x0E</td>
<td>SO (shift out)</td>
<td>不用切换</td>
</tr>
<tr>
<td>0000 1111</td>
<td>017</td>
<td>15</td>
<td>0x0F</td>
<td>SI (shift in)</td>
<td>启用切换</td>
</tr>
<tr>
<td>0001 0000</td>
<td>020</td>
<td>16</td>
<td>0x10</td>
<td>DLE (data link escape)</td>
<td>数据链路转义</td>
</tr>
<tr>
<td>0001 0001</td>
<td>021</td>
<td>17</td>
<td>0x11</td>
<td>DC1 (device control 1)</td>
<td>设备控制1</td>
</tr>
<tr>
<td>0001 0010</td>
<td>022</td>
<td>18</td>
<td>0x12</td>
<td>DC2 (device control 2)</td>
<td>设备控制2</td>
</tr>
<tr>
<td>0001 0011</td>
<td>023</td>
<td>19</td>
<td>0x13</td>
<td>DC3 (device control 3)</td>
<td>设备控制3</td>
</tr>
<tr>
<td>0001 0100</td>
<td>024</td>
<td>20</td>
<td>0x14</td>
<td>DC4 (device control 4)</td>
<td>设备控制4</td>
</tr>
<tr>
<td>0001 0101</td>
<td>025</td>
<td>21</td>
<td>0x15</td>
<td>NAK (negative acknowledge)</td>
<td>拒绝接收</td>
</tr>
<tr>
<td>0001 0110</td>
<td>026</td>
<td>22</td>
<td>0x16</td>
<td>SYN (synchronous idle)</td>
<td>同步空闲</td>
</tr>
<tr>
<td>0001 0111</td>
<td>027</td>
<td>23</td>
<td>0x17</td>
<td>ETB (end of trans. block)</td>
<td>结束传输块</td>
</tr>
<tr>
<td>0001 1000</td>
<td>030</td>
<td>24</td>
<td>0x18</td>
<td>CAN (cancel)</td>
<td>取消</td>
</tr>
<tr>
<td>0001 1001</td>
<td>031</td>
<td>25</td>
<td>0x19</td>
<td>EM (end of medium)</td>
<td>媒介结束</td>
</tr>
<tr>
<td>0001 1010</td>
<td>032</td>
<td>26</td>
<td>0x1A</td>
<td>SUB (substitute)</td>
<td>代替</td>
</tr>
<tr>
<td>0001 1011</td>
<td>033</td>
<td>27</td>
<td>0x1B</td>
<td>ESC (escape)</td>
<td>换码(溢出)</td>
</tr>
<tr>
<td>0001 1100</td>
<td>034</td>
<td>28</td>
<td>0x1C</td>
<td>FS (file separator)</td>
<td>文件分隔符</td>
</tr>
<tr>
<td>0001 1101</td>
<td>035</td>
<td>29</td>
<td>0x1D</td>
<td>GS (group separator)</td>
<td>分组符</td>
</tr>
<tr>
<td>0001 1110</td>
<td>036</td>
<td>30</td>
<td>0x1E</td>
<td>RS (record separator)</td>
<td>记录分隔符</td>
</tr>
<tr>
<td>0001 1111</td>
<td>037</td>
<td>31</td>
<td>0x1F</td>
<td>US (unit separator)</td>
<td>单元分隔符</td>
</tr>
<tr>
<td>0010 0000</td>
<td>040</td>
<td>32</td>
<td>0x20</td>
<td>(space)</td>
<td>空格</td>
</tr>
<tr>
<td>0010 0001</td>
<td>041</td>
<td>33</td>
<td>0x21</td>
<td>!</td>
<td>叹号</td>
</tr>
<tr>
<td>0010 0010</td>
<td>042</td>
<td>34</td>
<td>0x22</td>
<td>&quot;</td>
<td>双引号</td>
</tr>
<tr>
<td>0010 0011</td>
<td>043</td>
<td>35</td>
<td>0x23</td>
<td>#</td>
<td>井号</td>
</tr>
<tr>
<td>0010 0100</td>
<td>044</td>
<td>36</td>
<td>0x24</td>
<td>$</td>
<td>美元符</td>
</tr>
<tr>
<td>0010 0101</td>
<td>045</td>
<td>37</td>
<td>0x25</td>
<td>%</td>
<td>百分号</td>
</tr>
<tr>
<td>0010 0110</td>
<td>046</td>
<td>38</td>
<td>0x26</td>
<td>&amp;</td>
<td>和号</td>
</tr>
<tr>
<td>0010 0111</td>
<td>047</td>
<td>39</td>
<td>0x27</td>
<td>'</td>
<td>闭单引号</td>
</tr>
<tr>
<td>0010 1000</td>
<td>050</td>
<td>40</td>
<td>0x28</td>
<td>(</td>
<td>开括号</td>
</tr>
<tr>
<td>0010 1001</td>
<td>051</td>
<td>41</td>
<td>0x29</td>
<td>)</td>
<td>闭括号</td>
</tr>
<tr>
<td>0010 1010</td>
<td>052</td>
<td>42</td>
<td>0x2A</td>
<td>*</td>
<td>星号</td>
</tr>
<tr>
<td>0010 1011</td>
<td>053</td>
<td>43</td>
<td>0x2B</td>
<td>+</td>
<td>加号</td>
</tr>
<tr>
<td>0010 1100</td>
<td>054</td>
<td>44</td>
<td>0x2C</td>
<td>,</td>
<td>逗号</td>
</tr>
<tr>
<td>0010 1101</td>
<td>055</td>
<td>45</td>
<td>0x2D</td>
<td>-</td>
<td>减号/破折号</td>
</tr>
<tr>
<td>0010 1110</td>
<td>056</td>
<td>46</td>
<td>0x2E</td>
<td>.</td>
<td>句号</td>
</tr>
<tr>
<td>0010 1111</td>
<td>057</td>
<td>47</td>
<td>0x2F</td>
<td>/</td>
<td>斜杠</td>
</tr>
<tr>
<td>0011 0000</td>
<td>060</td>
<td>48</td>
<td>0x30</td>
<td>0</td>
<td>字符0</td>
</tr>
<tr>
<td>0011 0001</td>
<td>061</td>
<td>49</td>
<td>0x31</td>
<td>1</td>
<td>字符1</td>
</tr>
<tr>
<td>0011 0010</td>
<td>062</td>
<td>50</td>
<td>0x32</td>
<td>2</td>
<td>字符2</td>
</tr>
<tr>
<td>0011 0011</td>
<td>063</td>
<td>51</td>
<td>0x33</td>
<td>3</td>
<td>字符3</td>
</tr>
<tr>
<td>0011 0100</td>
<td>064</td>
<td>52</td>
<td>0x34</td>
<td>4</td>
<td>字符4</td>
</tr>
<tr>
<td>0011 0101</td>
<td>065</td>
<td>53</td>
<td>0x35</td>
<td>5</td>
<td>字符5</td>
</tr>
<tr>
<td>0011 0110</td>
<td>066</td>
<td>54</td>
<td>0x36</td>
<td>6</td>
<td>字符6</td>
</tr>
<tr>
<td>0011 0111</td>
<td>067</td>
<td>55</td>
<td>0x37</td>
<td>7</td>
<td>字符7</td>
</tr>
<tr>
<td>0011 1000</td>
<td>070</td>
<td>56</td>
<td>0x38</td>
<td>8</td>
<td>字符8</td>
</tr>
<tr>
<td>0011 1001</td>
<td>071</td>
<td>57</td>
<td>0x39</td>
<td>9</td>
<td>字符9</td>
</tr>
<tr>
<td>0011 1010</td>
<td>072</td>
<td>58</td>
<td>0x3A</td>
<td>:</td>
<td>冒号</td>
</tr>
<tr>
<td>0011 1011</td>
<td>073</td>
<td>59</td>
<td>0x3B</td>
<td>;</td>
<td>分号</td>
</tr>
<tr>
<td>0011 1100</td>
<td>074</td>
<td>60</td>
<td>0x3C</td>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>0011 1101</td>
<td>075</td>
<td>61</td>
<td>0x3D</td>
<td>=</td>
<td>等号</td>
</tr>
<tr>
<td>0011 1110</td>
<td>076</td>
<td>62</td>
<td>0x3E</td>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>0011 1111</td>
<td>077</td>
<td>63</td>
<td>0x3F</td>
<td>?</td>
<td>问号</td>
</tr>
<tr>
<td>0100 0000</td>
<td>0100</td>
<td>64</td>
<td>0x40</td>
<td>@</td>
<td>电子邮件符号</td>
</tr>
<tr>
<td>0100 0001</td>
<td>0101</td>
<td>65</td>
<td>0x41</td>
<td>A</td>
<td>大写字母A</td>
</tr>
<tr>
<td>0100 0010</td>
<td>0102</td>
<td>66</td>
<td>0x42</td>
<td>B</td>
<td>大写字母B</td>
</tr>
<tr>
<td>0100 0011</td>
<td>0103</td>
<td>67</td>
<td>0x43</td>
<td>C</td>
<td>大写字母C</td>
</tr>
<tr>
<td>0100 0100</td>
<td>0104</td>
<td>68</td>
<td>0x44</td>
<td>D</td>
<td>大写字母D</td>
</tr>
<tr>
<td>0100 0101</td>
<td>0105</td>
<td>69</td>
<td>0x45</td>
<td>E</td>
<td>大写字母E</td>
</tr>
<tr>
<td>0100 0110</td>
<td>0106</td>
<td>70</td>
<td>0x46</td>
<td>F</td>
<td>大写字母F</td>
</tr>
<tr>
<td>0100 0111</td>
<td>0107</td>
<td>71</td>
<td>0x47</td>
<td>G</td>
<td>大写字母G</td>
</tr>
<tr>
<td>0100 1000</td>
<td>0110</td>
<td>72</td>
<td>0x48</td>
<td>H</td>
<td>大写字母H</td>
</tr>
<tr>
<td>0100 1001</td>
<td>0111</td>
<td>73</td>
<td>0x49</td>
<td>I</td>
<td>大写字母I</td>
</tr>
<tr>
<td>01001010</td>
<td>0112</td>
<td>74</td>
<td>0x4A</td>
<td>J</td>
<td>大写字母J</td>
</tr>
<tr>
<td>0100 1011</td>
<td>0113</td>
<td>75</td>
<td>0x4B</td>
<td>K</td>
<td>大写字母K</td>
</tr>
<tr>
<td>0100 1100</td>
<td>0114</td>
<td>76</td>
<td>0x4C</td>
<td>L</td>
<td>大写字母L</td>
</tr>
<tr>
<td>0100 1101</td>
<td>0115</td>
<td>77</td>
<td>0x4D</td>
<td>M</td>
<td>大写字母M</td>
</tr>
<tr>
<td>0100 1110</td>
<td>0116</td>
<td>78</td>
<td>0x4E</td>
<td>N</td>
<td>大写字母N</td>
</tr>
<tr>
<td>0100 1111</td>
<td>0117</td>
<td>79</td>
<td>0x4F</td>
<td>O</td>
<td>大写字母O</td>
</tr>
<tr>
<td>0101 0000</td>
<td>0120</td>
<td>80</td>
<td>0x50</td>
<td>P</td>
<td>大写字母P</td>
</tr>
<tr>
<td>0101 0001</td>
<td>0121</td>
<td>81</td>
<td>0x51</td>
<td>Q</td>
<td>大写字母Q</td>
</tr>
<tr>
<td>0101 0010</td>
<td>0122</td>
<td>82</td>
<td>0x52</td>
<td>R</td>
<td>大写字母R</td>
</tr>
<tr>
<td>0101 0011</td>
<td>0123</td>
<td>83</td>
<td>0x53</td>
<td>S</td>
<td>大写字母S</td>
</tr>
<tr>
<td>0101 0100</td>
<td>0124</td>
<td>84</td>
<td>0x54</td>
<td>T</td>
<td>大写字母T</td>
</tr>
<tr>
<td>0101 0101</td>
<td>0125</td>
<td>85</td>
<td>0x55</td>
<td>U</td>
<td>大写字母U</td>
</tr>
<tr>
<td>0101 0110</td>
<td>0126</td>
<td>86</td>
<td>0x56</td>
<td>V</td>
<td>大写字母V</td>
</tr>
<tr>
<td>0101 0111</td>
<td>0127</td>
<td>87</td>
<td>0x57</td>
<td>W</td>
<td>大写字母W</td>
</tr>
<tr>
<td>0101 1000</td>
<td>0130</td>
<td>88</td>
<td>0x58</td>
<td>X</td>
<td>大写字母X</td>
</tr>
<tr>
<td>0101 1001</td>
<td>0131</td>
<td>89</td>
<td>0x59</td>
<td>Y</td>
<td>大写字母Y</td>
</tr>
<tr>
<td>0101 1010</td>
<td>0132</td>
<td>90</td>
<td>0x5A</td>
<td>Z</td>
<td>大写字母Z</td>
</tr>
<tr>
<td>0101 1011</td>
<td>0133</td>
<td>91</td>
<td>0x5B</td>
<td>[</td>
<td>开方括号</td>
</tr>
<tr>
<td>0101 1100</td>
<td>0134</td>
<td>92</td>
<td>0x5C</td>
<td>\</td>
<td>反斜杠</td>
</tr>
<tr>
<td>0101 1101</td>
<td>0135</td>
<td>93</td>
<td>0x5D</td>
<td>]</td>
<td>闭方括号</td>
</tr>
<tr>
<td>0101 1110</td>
<td>0136</td>
<td>94</td>
<td>0x5E</td>
<td>^</td>
<td>脱字符</td>
</tr>
<tr>
<td>0101 1111</td>
<td>0137</td>
<td>95</td>
<td>0x5F</td>
<td>_</td>
<td>下划线</td>
</tr>
<tr>
<td>0110 0000</td>
<td>0140</td>
<td>96</td>
<td>0x60</td>
<td>`</td>
<td>开单引号</td>
</tr>
<tr>
<td>0110 0001</td>
<td>0141</td>
<td>97</td>
<td>0x61</td>
<td>a</td>
<td>小写字母a</td>
</tr>
<tr>
<td>0110 0010</td>
<td>0142</td>
<td>98</td>
<td>0x62</td>
<td>b</td>
<td>小写字母b</td>
</tr>
<tr>
<td>0110 0011</td>
<td>0143</td>
<td>99</td>
<td>0x63</td>
<td>c</td>
<td>小写字母c</td>
</tr>
<tr>
<td>0110 0100</td>
<td>0144</td>
<td>100</td>
<td>0x64</td>
<td>d</td>
<td>小写字母d</td>
</tr>
<tr>
<td>0110 0101</td>
<td>0145</td>
<td>101</td>
<td>0x65</td>
<td>e</td>
<td>小写字母e</td>
</tr>
<tr>
<td>0110 0110</td>
<td>0146</td>
<td>102</td>
<td>0x66</td>
<td>f</td>
<td>小写字母f</td>
</tr>
<tr>
<td>0110 0111</td>
<td>0147</td>
<td>103</td>
<td>0x67</td>
<td>g</td>
<td>小写字母g</td>
</tr>
<tr>
<td>0110 1000</td>
<td>0150</td>
<td>104</td>
<td>0x68</td>
<td>h</td>
<td>小写字母h</td>
</tr>
<tr>
<td>0110 1001</td>
<td>0151</td>
<td>105</td>
<td>0x69</td>
<td>i</td>
<td>小写字母i</td>
</tr>
<tr>
<td>0110 1010</td>
<td>0152</td>
<td>106</td>
<td>0x6A</td>
<td>j</td>
<td>小写字母j</td>
</tr>
<tr>
<td>0110 1011</td>
<td>0153</td>
<td>107</td>
<td>0x6B</td>
<td>k</td>
<td>小写字母k</td>
</tr>
<tr>
<td>0110 1100</td>
<td>0154</td>
<td>108</td>
<td>0x6C</td>
<td>l</td>
<td>小写字母l</td>
</tr>
<tr>
<td>0110 1101</td>
<td>0155</td>
<td>109</td>
<td>0x6D</td>
<td>m</td>
<td>小写字母m</td>
</tr>
<tr>
<td>0110 1110</td>
<td>0156</td>
<td>110</td>
<td>0x6E</td>
<td>n</td>
<td>小写字母n</td>
</tr>
<tr>
<td>0110 1111</td>
<td>0157</td>
<td>111</td>
<td>0x6F</td>
<td>o</td>
<td>小写字母o</td>
</tr>
<tr>
<td>0111 0000</td>
<td>0160</td>
<td>112</td>
<td>0x70</td>
<td>p</td>
<td>小写字母p</td>
</tr>
<tr>
<td>0111 0001</td>
<td>0161</td>
<td>113</td>
<td>0x71</td>
<td>q</td>
<td>小写字母q</td>
</tr>
<tr>
<td>0111 0010</td>
<td>0162</td>
<td>114</td>
<td>0x72</td>
<td>r</td>
<td>小写字母r</td>
</tr>
<tr>
<td>0111 0011</td>
<td>0163</td>
<td>115</td>
<td>0x73</td>
<td>s</td>
<td>小写字母s</td>
</tr>
<tr>
<td>0111 0100</td>
<td>0164</td>
<td>116</td>
<td>0x74</td>
<td>t</td>
<td>小写字母t</td>
</tr>
<tr>
<td>0111 0101</td>
<td>0165</td>
<td>117</td>
<td>0x75</td>
<td>u</td>
<td>小写字母u</td>
</tr>
<tr>
<td>0111 0110</td>
<td>0166</td>
<td>118</td>
<td>0x76</td>
<td>v</td>
<td>小写字母v</td>
</tr>
<tr>
<td>0111 0111</td>
<td>0167</td>
<td>119</td>
<td>0x77</td>
<td>w</td>
<td>小写字母w</td>
</tr>
<tr>
<td>0111 1000</td>
<td>0170</td>
<td>120</td>
<td>0x78</td>
<td>x</td>
<td>小写字母x</td>
</tr>
<tr>
<td>0111 1001</td>
<td>0171</td>
<td>121</td>
<td>0x79</td>
<td>y</td>
<td>小写字母y</td>
</tr>
<tr>
<td>0111 1010</td>
<td>0172</td>
<td>122</td>
<td>0x7A</td>
<td>z</td>
<td>小写字母z</td>
</tr>
<tr>
<td>0111 1011</td>
<td>0173</td>
<td>123</td>
<td>0x7B</td>
<td>{</td>
<td>开花括号</td>
</tr>
<tr>
<td>0111 1100</td>
<td>0174</td>
<td>124</td>
<td>0x7C</td>
<td>|</td>
<td>垂线</td>
</tr>
<tr>
<td>0111 1101</td>
<td>0175</td>
<td>125</td>
<td>0x7D</td>
<td>}</td>
<td>闭花括号</td>
</tr>
<tr>
<td>0111 1110</td>
<td>0176</td>
<td>126</td>
<td>0x7E</td>
<td>~</td>
<td>波浪号</td>
</tr>
<tr>
<td>0111 1111</td>
<td>0177</td>
<td>127</td>
<td>0x7F</td>
<td>DEL (delete)</td>
<td>删除</td>
</tr>
</tbody>
</table>
<h3 id="hex编码">hex编码</h3>
<p>hex是最常用的编码方式之一，这一点非常容易理解，就是将信息转化为十六进制。要进行各类编码的转化，或者是要将信息在计算机存储中最为本质的一面表现出来的时候，都可以使用hex编码方式。Hex编码就是把一个8位的字节数据用两个十六进制数展示出来，编码时，将8位二进制码重新分组成两个4位的字节，其中一个字节的低4位是原字节的高四位，另一个字节的低4位是原数据的低4位，高4位都补0，然后输出这两个字节对应十六进制数字作为编码。Hex编码后的长度是源数据的2倍。</p>
<h3 id="base家族">Base家族</h3>
<p>Base家族，最著名的就是Base64编码，在计算机的数据传输过程中也经常用到，Base64编码在RSA签名算法也都有用到，是一种比较基础的编码方式。Base家族的编码实质上就是进制的转换。</p>
<p>Base编码是怎么来的呢？</p>
<p>1970~1980 年代，DEC（和其他公司）生产的“微型计算机”使用的字符编码为 ASCII。 每个字节使用 7 位，给出 128 个可用值。 这足以满足大写和小写拉丁字母，数字，标点，一些常见的数学符号，货币符号和控制字符的需要。此后 ASCII 变得非常流行，并在很长一段时间内占主导地位。ASCII 规定了范围在 [0,127] 之间的字符编码，其中 [0, 31] 以及 127 (del) 这 33 个属于不可打印的控制字符（可以使用 man ascii 查证）。互联网的杀手级应用——电子邮件系统当初是为了传输 7 位 ASCII 文本而设计的，于是在传输信息时，有些邮件网关会把 [0,31] 这些控制字符给清除，而有些会替换 10 (newline 或 \n）和 13 (carrige 或 \r) 字符，有些更加粗暴地将二进制的最高位清空，还有的程序在收到 [128, 255 ] 之间的国际字符会发生错误。</p>
<p>如何在不同邮件网关之间安全地传输控制字符、国际字符和二进制文件呢？作为 MIME（<a href="https://link.zhihu.com/?target=https%3A//tools.ietf.org/html/rfc2045%23page-24">RFC 2045</a> 和 <a href="https://link.zhihu.com/?target=https%3A//tools.ietf.org/html/rfc3548">RFC 3548</a>）多媒体电子邮件标准的一部分的 Base64 编码就被开发出来了。</p>
<p>Base64 用于编码邮件内容、网页图片，意在减少传输过程中可能出现的错误；Base58 是比特币地址使用的编码方法，旨在提高地址的辨识度；Base32 用在一些对大小写不敏感的文件系统中。每种 Base-x 的编码都有适合它们的应用场景。</p>
<p>Base编码从底层来说就是对数据进行进制转换，Base64是64进制，Base32是32进制，Base16是16进制。而中间的过程是为了更好地进行传输数据。</p>
<h3 id="url编码">URL编码</h3>
<p>url编码是一种浏览器用来打包表单输入的格式。浏览器从表单中获取所有的name和其中的值 ，将它们以name/value参数编码（移去那些不能传送的字符，将数据排行等等）作为URL的一部分或者分离地发给服务器。</p>
<p>URL编码是比较常见的编码类型，在浏览器进行数据传输的过程中会经常使用到，可以用于构造反序列化对象、SQL注入绕过、文件包含绕过等等。</p>
<p>URL编码参考手册：</p>
<table>
<thead>
<tr>
<th>ASCII 字符</th>
<th>URL-编码</th>
</tr>
</thead>
<tbody>
<tr>
<td>space</td>
<td>%20</td>
</tr>
<tr>
<td>!</td>
<td>%21</td>
</tr>
<tr>
<td>&quot;</td>
<td>%22</td>
</tr>
<tr>
<td>#</td>
<td>%23</td>
</tr>
<tr>
<td>$</td>
<td>%24</td>
</tr>
<tr>
<td>%</td>
<td>%25</td>
</tr>
<tr>
<td>&amp;</td>
<td>%26</td>
</tr>
<tr>
<td>'</td>
<td>%27</td>
</tr>
<tr>
<td>(</td>
<td>%28</td>
</tr>
<tr>
<td>)</td>
<td>%29</td>
</tr>
<tr>
<td>*</td>
<td>%2A</td>
</tr>
<tr>
<td>+</td>
<td>%2B</td>
</tr>
<tr>
<td>,</td>
<td>%2C</td>
</tr>
<tr>
<td>-</td>
<td>%2D</td>
</tr>
<tr>
<td>.</td>
<td>%2E</td>
</tr>
<tr>
<td>/</td>
<td>%2F</td>
</tr>
<tr>
<td>0</td>
<td>%30</td>
</tr>
<tr>
<td>1</td>
<td>%31</td>
</tr>
<tr>
<td>2</td>
<td>%32</td>
</tr>
<tr>
<td>3</td>
<td>%33</td>
</tr>
<tr>
<td>4</td>
<td>%34</td>
</tr>
<tr>
<td>5</td>
<td>%35</td>
</tr>
<tr>
<td>6</td>
<td>%36</td>
</tr>
<tr>
<td>7</td>
<td>%37</td>
</tr>
<tr>
<td>8</td>
<td>%38</td>
</tr>
<tr>
<td>9</td>
<td>%39</td>
</tr>
<tr>
<td>:</td>
<td>%3A</td>
</tr>
<tr>
<td>;</td>
<td>%3B</td>
</tr>
<tr>
<td>&lt;</td>
<td>%3C</td>
</tr>
<tr>
<td>=</td>
<td>%3D</td>
</tr>
<tr>
<td>&gt;</td>
<td>%3E</td>
</tr>
<tr>
<td>?</td>
<td>%3F</td>
</tr>
<tr>
<td>@</td>
<td>%40</td>
</tr>
<tr>
<td>A</td>
<td>%41</td>
</tr>
<tr>
<td>B</td>
<td>%42</td>
</tr>
<tr>
<td>C</td>
<td>%43</td>
</tr>
<tr>
<td>D</td>
<td>%44</td>
</tr>
<tr>
<td>E</td>
<td>%45</td>
</tr>
<tr>
<td>F</td>
<td>%46</td>
</tr>
<tr>
<td>G</td>
<td>%47</td>
</tr>
<tr>
<td>H</td>
<td>%48</td>
</tr>
<tr>
<td>I</td>
<td>%49</td>
</tr>
<tr>
<td>J</td>
<td>%4A</td>
</tr>
<tr>
<td>K</td>
<td>%4B</td>
</tr>
<tr>
<td>L</td>
<td>%4C</td>
</tr>
<tr>
<td>M</td>
<td>%4D</td>
</tr>
<tr>
<td>N</td>
<td>%4E</td>
</tr>
<tr>
<td>O</td>
<td>%4F</td>
</tr>
<tr>
<td>P</td>
<td>%50</td>
</tr>
<tr>
<td>Q</td>
<td>%51</td>
</tr>
<tr>
<td>R</td>
<td>%52</td>
</tr>
<tr>
<td>S</td>
<td>%53</td>
</tr>
<tr>
<td>T</td>
<td>%54</td>
</tr>
<tr>
<td>U</td>
<td>%55</td>
</tr>
<tr>
<td>V</td>
<td>%56</td>
</tr>
<tr>
<td>W</td>
<td>%57</td>
</tr>
<tr>
<td>X</td>
<td>%58</td>
</tr>
<tr>
<td>Y</td>
<td>%59</td>
</tr>
<tr>
<td>Z</td>
<td>%5A</td>
</tr>
<tr>
<td>[</td>
<td>%5B</td>
</tr>
<tr>
<td>\</td>
<td>%5C</td>
</tr>
<tr>
<td>]</td>
<td>%5D</td>
</tr>
<tr>
<td>^</td>
<td>%5E</td>
</tr>
<tr>
<td>_</td>
<td>%5F</td>
</tr>
<tr>
<td>`</td>
<td>%60</td>
</tr>
<tr>
<td>a</td>
<td>%61</td>
</tr>
<tr>
<td>b</td>
<td>%62</td>
</tr>
<tr>
<td>c</td>
<td>%63</td>
</tr>
<tr>
<td>d</td>
<td>%64</td>
</tr>
<tr>
<td>e</td>
<td>%65</td>
</tr>
<tr>
<td>f</td>
<td>%66</td>
</tr>
<tr>
<td>g</td>
<td>%67</td>
</tr>
<tr>
<td>h</td>
<td>%68</td>
</tr>
<tr>
<td>i</td>
<td>%69</td>
</tr>
<tr>
<td>j</td>
<td>%6A</td>
</tr>
<tr>
<td>k</td>
<td>%6B</td>
</tr>
<tr>
<td>l</td>
<td>%6C</td>
</tr>
<tr>
<td>m</td>
<td>%6D</td>
</tr>
<tr>
<td>n</td>
<td>%6E</td>
</tr>
<tr>
<td>o</td>
<td>%6F</td>
</tr>
<tr>
<td>p</td>
<td>%70</td>
</tr>
<tr>
<td>q</td>
<td>%71</td>
</tr>
<tr>
<td>r</td>
<td>%72</td>
</tr>
<tr>
<td>s</td>
<td>%73</td>
</tr>
<tr>
<td>t</td>
<td>%74</td>
</tr>
<tr>
<td>u</td>
<td>%75</td>
</tr>
<tr>
<td>v</td>
<td>%76</td>
</tr>
<tr>
<td>w</td>
<td>%77</td>
</tr>
<tr>
<td>x</td>
<td>%78</td>
</tr>
<tr>
<td>y</td>
<td>%79</td>
</tr>
<tr>
<td>z</td>
<td>%7A</td>
</tr>
<tr>
<td>{</td>
<td>%7B</td>
</tr>
<tr>
<td>|</td>
<td>%7C</td>
</tr>
<tr>
<td>}</td>
<td>%7D</td>
</tr>
<tr>
<td>~</td>
<td>%7E</td>
</tr>
<tr>
<td></td>
<td>%7F</td>
</tr>
<tr>
<td>`</td>
<td>%80</td>
</tr>
<tr>
<td></td>
<td>%81</td>
</tr>
<tr>
<td>‚</td>
<td>%82</td>
</tr>
<tr>
<td>ƒ</td>
<td>%83</td>
</tr>
<tr>
<td>„</td>
<td>%84</td>
</tr>
<tr>
<td>…</td>
<td>%85</td>
</tr>
<tr>
<td>†</td>
<td>%86</td>
</tr>
<tr>
<td>‡</td>
<td>%87</td>
</tr>
<tr>
<td>ˆ</td>
<td>%88</td>
</tr>
<tr>
<td>‰</td>
<td>%89</td>
</tr>
<tr>
<td>Š</td>
<td>%8A</td>
</tr>
<tr>
<td>‹</td>
<td>%8B</td>
</tr>
<tr>
<td>Œ</td>
<td>%8C</td>
</tr>
<tr>
<td></td>
<td>%8D</td>
</tr>
<tr>
<td>Ž</td>
<td>%8E</td>
</tr>
<tr>
<td></td>
<td>%8F</td>
</tr>
<tr>
<td></td>
<td>%90</td>
</tr>
<tr>
<td>'</td>
<td>%91</td>
</tr>
<tr>
<td>'</td>
<td>%92</td>
</tr>
<tr>
<td>&quot;</td>
<td>%93</td>
</tr>
<tr>
<td>&quot;</td>
<td>%94</td>
</tr>
<tr>
<td>•</td>
<td>%95</td>
</tr>
<tr>
<td>–</td>
<td>%96</td>
</tr>
<tr>
<td>—</td>
<td>%97</td>
</tr>
<tr>
<td>˜</td>
<td>%98</td>
</tr>
<tr>
<td>™</td>
<td>%99</td>
</tr>
<tr>
<td>š</td>
<td>%9A</td>
</tr>
<tr>
<td>›</td>
<td>%9B</td>
</tr>
<tr>
<td>œ</td>
<td>%9C</td>
</tr>
<tr>
<td></td>
<td>%9D</td>
</tr>
<tr>
<td>ž</td>
<td>%9E</td>
</tr>
<tr>
<td>Ÿ</td>
<td>%9F</td>
</tr>
<tr>
<td></td>
<td>%A0</td>
</tr>
<tr>
<td>¡</td>
<td>%A1</td>
</tr>
<tr>
<td>¢</td>
<td>%A2</td>
</tr>
<tr>
<td>£</td>
<td>%A3</td>
</tr>
<tr>
<td>¤</td>
<td>%A4</td>
</tr>
<tr>
<td>¥</td>
<td>%A5</td>
</tr>
<tr>
<td>¦</td>
<td>%A6</td>
</tr>
<tr>
<td>§</td>
<td>%A7</td>
</tr>
<tr>
<td>¨</td>
<td>%A8</td>
</tr>
<tr>
<td>©</td>
<td>%A9</td>
</tr>
<tr>
<td>ª</td>
<td>%AA</td>
</tr>
<tr>
<td>«</td>
<td>%AB</td>
</tr>
<tr>
<td>¬</td>
<td>%AC</td>
</tr>
<tr>
<td>­</td>
<td>%AD</td>
</tr>
<tr>
<td>®</td>
<td>%AE</td>
</tr>
<tr>
<td>¯</td>
<td>%AF</td>
</tr>
<tr>
<td>°</td>
<td>%B0</td>
</tr>
<tr>
<td>±</td>
<td>%B1</td>
</tr>
<tr>
<td>²</td>
<td>%B2</td>
</tr>
<tr>
<td>³</td>
<td>%B3</td>
</tr>
<tr>
<td>´</td>
<td>%B4</td>
</tr>
<tr>
<td>µ</td>
<td>%B5</td>
</tr>
<tr>
<td>¶</td>
<td>%B6</td>
</tr>
<tr>
<td>·</td>
<td>%B7</td>
</tr>
<tr>
<td>¸</td>
<td>%B8</td>
</tr>
<tr>
<td>¹</td>
<td>%B9</td>
</tr>
<tr>
<td>º</td>
<td>%BA</td>
</tr>
<tr>
<td>»</td>
<td>%BB</td>
</tr>
<tr>
<td>¼</td>
<td>%BC</td>
</tr>
<tr>
<td>½</td>
<td>%BD</td>
</tr>
<tr>
<td>¾</td>
<td>%BE</td>
</tr>
<tr>
<td>¿</td>
<td>%BF</td>
</tr>
<tr>
<td>À</td>
<td>%C0</td>
</tr>
<tr>
<td>Á</td>
<td>%C1</td>
</tr>
<tr>
<td>Â</td>
<td>%C2</td>
</tr>
<tr>
<td>Ã</td>
<td>%C3</td>
</tr>
<tr>
<td>Ä</td>
<td>%C4</td>
</tr>
<tr>
<td>Å</td>
<td>%C5</td>
</tr>
<tr>
<td>Æ</td>
<td>%C6</td>
</tr>
<tr>
<td>Ç</td>
<td>%C7</td>
</tr>
<tr>
<td>È</td>
<td>%C8</td>
</tr>
<tr>
<td>É</td>
<td>%C9</td>
</tr>
<tr>
<td>Ê</td>
<td>%CA</td>
</tr>
<tr>
<td>Ë</td>
<td>%CB</td>
</tr>
<tr>
<td>Ì</td>
<td>%CC</td>
</tr>
<tr>
<td>Í</td>
<td>%CD</td>
</tr>
<tr>
<td>Î</td>
<td>%CE</td>
</tr>
<tr>
<td>Ï</td>
<td>%CF</td>
</tr>
<tr>
<td>Ð</td>
<td>%D0</td>
</tr>
<tr>
<td>Ñ</td>
<td>%D1</td>
</tr>
<tr>
<td>Ò</td>
<td>%D2</td>
</tr>
<tr>
<td>Ó</td>
<td>%D3</td>
</tr>
<tr>
<td>Ô</td>
<td>%D4</td>
</tr>
<tr>
<td>Õ</td>
<td>%D5</td>
</tr>
<tr>
<td>Ö</td>
<td>%D6</td>
</tr>
<tr>
<td>×</td>
<td>%D7</td>
</tr>
<tr>
<td>Ø</td>
<td>%D8</td>
</tr>
<tr>
<td>Ù</td>
<td>%D9</td>
</tr>
<tr>
<td>Ú</td>
<td>%DA</td>
</tr>
<tr>
<td>Û</td>
<td>%DB</td>
</tr>
<tr>
<td>Ü</td>
<td>%DC</td>
</tr>
<tr>
<td>Ý</td>
<td>%DD</td>
</tr>
<tr>
<td>Þ</td>
<td>%DE</td>
</tr>
<tr>
<td>ß</td>
<td>%DF</td>
</tr>
<tr>
<td>à</td>
<td>%E0</td>
</tr>
<tr>
<td>á</td>
<td>%E1</td>
</tr>
<tr>
<td>â</td>
<td>%E2</td>
</tr>
<tr>
<td>ã</td>
<td>%E3</td>
</tr>
<tr>
<td>ä</td>
<td>%E4</td>
</tr>
<tr>
<td>å</td>
<td>%E5</td>
</tr>
<tr>
<td>æ</td>
<td>%E6</td>
</tr>
<tr>
<td>ç</td>
<td>%E7</td>
</tr>
<tr>
<td>è</td>
<td>%E8</td>
</tr>
<tr>
<td>é</td>
<td>%E9</td>
</tr>
<tr>
<td>ê</td>
<td>%EA</td>
</tr>
<tr>
<td>ë</td>
<td>%EB</td>
</tr>
<tr>
<td>ì</td>
<td>%EC</td>
</tr>
<tr>
<td>í</td>
<td>%ED</td>
</tr>
<tr>
<td>î</td>
<td>%EE</td>
</tr>
<tr>
<td>ï</td>
<td>%EF</td>
</tr>
<tr>
<td>ð</td>
<td>%F0</td>
</tr>
<tr>
<td>ñ</td>
<td>%F1</td>
</tr>
<tr>
<td>ò</td>
<td>%F2</td>
</tr>
<tr>
<td>ó</td>
<td>%F3</td>
</tr>
<tr>
<td>ô</td>
<td>%F4</td>
</tr>
<tr>
<td>õ</td>
<td>%F5</td>
</tr>
<tr>
<td>ö</td>
<td>%F6</td>
</tr>
<tr>
<td>÷</td>
<td>%F7</td>
</tr>
<tr>
<td>ø</td>
<td>%F8</td>
</tr>
<tr>
<td>ù</td>
<td>%F9</td>
</tr>
<tr>
<td>ú</td>
<td>%FA</td>
</tr>
<tr>
<td>û</td>
<td>%FB</td>
</tr>
<tr>
<td>ü</td>
<td>%FC</td>
</tr>
<tr>
<td>ý</td>
<td>%FD</td>
</tr>
<tr>
<td>þ</td>
<td>%FE</td>
</tr>
<tr>
<td>ÿ</td>
<td>%FF</td>
</tr>
</tbody>
</table>
<h3 id="html编码">HTML编码</h3>
<p>HTML编码在HTML文件中经常会使用到，在信息传输过程中并不是非常常见。HTML编码也叫HTML字符实体。是HTML编写过程中使用特殊的编码符号来进行网页页面符号的正确显示，是网页上面的一种编码格式。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTML">HTML</a> 实体是一段以连字号（<code>&amp;</code>）开头、以分号（<code>;</code>）结尾的文本（字符串）。实体常常用于显示保留字符（这些字符会被解析为 HTML 代码）和不可见的字符（如“不换行空格”）。你也可以用实体来代替其他难以用标准键盘键入的字符。</p>
<blockquote>
<p>很多字符都有易于记忆的实体。例如版权符号 (<code>©</code>) 的实体是 <code>©</code>。对于没那么容易记住的字符，例如 <code>—</code> 或 <code>—</code>，你可以查看 <a href="https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references">参考表</a> 或使用 <a href="https://mothereff.in/html-entities">解码工具 </a>。</p>
</blockquote>
<table>
<thead>
<tr>
<th>显示结果</th>
<th>描述</th>
<th>实体名称</th>
<th>实体编号</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>空格</td>
<td>&amp;nbsp;</td>
<td> </td>
</tr>
<tr>
<td>&lt;</td>
<td>小于号</td>
<td>&amp;lt;</td>
<td>&amp;#60;</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于号</td>
<td>&amp;gt;</td>
<td>&amp;#62;</td>
</tr>
<tr>
<td>&amp;</td>
<td>和号</td>
<td>&amp;amp;</td>
<td>&amp;#38;</td>
</tr>
<tr>
<td>&quot;</td>
<td>引号</td>
<td>&amp;quot;</td>
<td>&amp;#34;</td>
</tr>
<tr>
<td>'</td>
<td>撇号</td>
<td>&amp;apos; (IE不支持)</td>
<td>&amp;#39;</td>
</tr>
<tr>
<td>￠</td>
<td>分（cent）</td>
<td>&amp;cent;</td>
<td>&amp;#162;</td>
</tr>
<tr>
<td>£</td>
<td>镑（pound）</td>
<td>&amp;pound;</td>
<td>&amp;#163;</td>
</tr>
<tr>
<td>¥</td>
<td>元（yen）</td>
<td>&amp;yen;</td>
<td>&amp;#165;</td>
</tr>
<tr>
<td>€</td>
<td>欧元（euro）</td>
<td>&amp;euro;</td>
<td>&amp;#8364;</td>
</tr>
<tr>
<td>§</td>
<td>小节</td>
<td>&amp;sect;</td>
<td>&amp;#167;</td>
</tr>
<tr>
<td>©</td>
<td>版权（copyright）</td>
<td>&amp;copy;</td>
<td>&amp;#169;</td>
</tr>
<tr>
<td>®</td>
<td>注册商标</td>
<td>&amp;reg;</td>
<td>&amp;#174;</td>
</tr>
<tr>
<td>™</td>
<td>商标</td>
<td>&amp;trade;</td>
<td>&amp;#8482;</td>
</tr>
<tr>
<td>×</td>
<td>乘号</td>
<td>&amp;times;</td>
<td>&amp;#215;</td>
</tr>
<tr>
<td>÷</td>
<td>除号</td>
<td>&amp;divide;</td>
<td>&amp;#247;</td>
</tr>
</tbody>
</table>
<h3 id="unicode编码">Unicode编码</h3>
<p>Unicode 是一种<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/character_set">字符集</a>标准，用于对来自世界上不同语言、文字系统和符号进行编号和<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Character">字符</a>定义。通过给每个字符分配一个编号，程序员可以创建<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/character_encoding">字符编码</a>，让计算机在同一个文件或程序中存储、处理和传输任何语言组合。</p>
<p>在 Unicode 定义之前，在同一数据中混合使用不同的语言是很困难的，而且容易出错。例如，一个字符集存储的是日文字符，而另一个字符集存储的是阿拉伯字母。如果没有明确标明数据的哪些部分属于哪个字符集，其他程序和计算机就会错误地显示文本，或者在处理过程中损坏文本。如果你曾经见过像 (<code>“”</code>) 被替换为胡言乱语 <code>Ã‚Â£</code>，那么你就已经看到过这个被称为 <a href="https://zh.wikipedia.org/wiki/Mojibake">Mojibake</a> 的问题。</p>
<p>网络上最常见的 Unicode 字符编码是<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/UTF-8">UTF-8</a>。还存在一些其他编码，如 UTF-16或过时的 UCS-2，但推荐使用 UTF-8。</p>
<p>Unicode编码也被称为万国码，是比较常见的编码格式，在计算机中经常会使用到Unicode编码进行互联网上应用的传输和编写。</p>
<h3 id="morse电码">Morse电码</h3>
<p>Morse电码也叫Morsecode，是大家耳熟能详的编码方式，很多人都误认为它是一种加密方式，但其实它是一种编码，因为它并不存在密钥。</p>
<p>Morsecode的编码形式非常容易识别，就是<code>.---</code> <code>.-.--</code>等类似的形式，非常容易识别并进行解码。</p>
<p><img src="/images/Encode/morse-code-4_ML.jpg" alt="查看源图像"></p>
<h3 id="jsfuck">JSFuck</h3>
<p>jsfuck是一种非常有意思的编码方式，仅使用6个字符就可以书写任意的<code>JavaScript</code>代码。从直观上非常容易辨别出这种编码方式，只需要“()+[]!”这6个字符组成的字符串。jsfuck的编码和解码与morsecode类似，只不过其表示的是<code>JavaScript</code>的语句。jsfuck源于一门编程语言brainfuck，其主要的思想就是只使用8种特定的符号来编写代码。jsfuck也是沿用了这个思想，它仅仅使用6种符号来编写代码。它们分别是<code>()+[]!</code></p>
<p>JSFuck可以使用jsfuck官方的网站进行解密：[JSFuck - Write any JavaScript with 6 Characters: <a href=""></a>!+](<a href="http://www.jsfuck.com/">http://www.jsfuck.com/</a>)</p>
<p>比如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>(<span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><p>就可以被jsfuck编码为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]][([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]((<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>(<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]))[(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]][([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>((<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]]](<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]])<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]])()((<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]])
</span></span></code></pre></div><h3 id="quoted-printable编码">Quoted-Printable编码</h3>
<p>Quoted-printable 可译为“可打印字符引用编码”、“使用可打印字符的编码”，我们收邮件，查看信件原始信息，经常会看到这种类型的编码！</p>
<p>Quoted-printable或QP encoding，没有规范的中文译名，可译为可打印字符引用编码或使用可打印字符的编码。Quoted-printable是使用可打印的ASCII字符（如字母、数字与“=”）表示各种编码格式下的字符，以便能在7-bit数据通路上传输8-bit数据, 或者更一般地说在非8-bit clean媒体上正确处理数据。这被定义为MIME content transfer encoding，用于e-mail。QP使用“=”开头的转义字符. 一般限制行宽为76，因为有些软件限制了行宽.</p>
<p>MIME定义了在e-mail中发送各种信息的方法, 包括非英语的其它语言文本信息, 使用非ASCII的其它字符编码。这些编码常常使用ASCII范围以外的值来编码字符，因此需要进一步被编码以便适用于non-8-bit-clean环境。Quoted-printable编码就是把任意字节序列映射为ASCII字符序列。Quoted-printable自身并不是一种字符编码方案, 而是一种在面向字节的编码时的数据编码布置（data coding layer），即由编码的字符序列如何表示为字节流QP是可逆的，即可以由原来的非ASCII字符流与QP编码后的字节流来回转换而不失信息。</p>
<p>Quoted-printable与Base64是两种基本的MIME内容传输编码, 如果通常的“8bit”编码不适用。如果文本不含很多非ASCII字符，quoted-printable编码的结果的可读性相当好[注 2]而且紧凑。但是，如果输入的大多数是非ASCII字符，那么quoted-printable编码将变得既不可读又非常低效。Base64并不是人可读的，但对于所有数据其成本均匀，适用于二进制数据与非拉丁字母语言文本。</p>
<p>比如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>密码学
</span></span></code></pre></div><p>可以使用Quoted-printable编码为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>=E5=AF=86=E7=A0=81=E5=AD=A6=0A=09=09=09=09=09
</span></span></code></pre></div><p>Quoted-printable的编码形式也比较容易辨认，基本上就是字符加等于号构成编码文段格式。</p>
<h3 id="brainfuck编码">BrainFuck编码</h3>
<p>BrainFuck是一种编程语言，也可以作为一种编码的手段进行编码，对文本进行BrainFuck编码然后进行快速传输。</p>
<p>Brainfuck，是一种极小化的程序语言，它是由Urban Müller在1993年创造的。由于fuck在英语中是脏话，这种语言有时被称为Brainf*ck或Brainf***，或被简称为BF。</p>
<p>Müller的目标是创建一种简单的、可以用最小的编译器来实现的、符合图灵完全思想的编程语言。这种语言由八种运算符构成，为Amiga机器编写的编译器（第二版）只有240个字节大小。就像它的名字所暗示的，Brainfuck程序很难读懂。尽管如此，Brainfuck图灵机一样可以完成任何计算任务。虽然Brainfuck的计算方式如此与众不同，但它确实能够正确运行。这种语言基于一个简单的机器模型，除了指令，这个机器还包括：一个以字节为单位、被初始化为零的数组、一个指向该数组的指针（初始时指向数组的第一个字节）、以及用于输入输出的两个字节流。</p>
<p>比如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Hello world!
</span></span></code></pre></div><p>使用BrainFuck进行编码就会得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>+++++ +++[- &gt;++++ ++++&lt; ]&gt;+++ +++++ .&lt;+++ ++[-&gt; +++++ &lt;]&gt;++ ++.++ +++++
</span></span><span style="display:flex;"><span>..+++ .&lt;+++ +++++ [-&gt;-- ----- -&lt;]&gt;- ----- ----- ----. &lt;++++ +++[- &gt;++++
</span></span><span style="display:flex;"><span>+++&lt;] &gt;++++ ++.&lt;+ +++[- &gt;++++ &lt;]&gt;++ +++++ +.+++ .---- --.-- ----- -.&lt;++
</span></span><span style="display:flex;"><span>+++++ +[-&gt;- ----- --&lt;]&gt; ---.&lt; 
</span></span></code></pre></div><p>可以使用<a href="https://www.splitbrain.org/services/ook">Brainfuck/Ook! Obfuscation/Encoding</a> 这个网站进行编码和解码</p>
<h3 id="ook编码">Ook编码</h3>
<p>Ook也是一种小型的编程语言，Ook是为红毛猩猩设计的编程语言，设计思路和BrainFuck的设计思路基本类似，但是Ook采用了更少的元素进行编程，语句更加简单。由于Ook的特点，因此Ook也可以设计为一种特殊的编码方式。</p>
<p>比如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Hello world!
</span></span></code></pre></div><p>使用Ook编码后，得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span></span><span style="display:flex;"><span>Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span></span><span style="display:flex;"><span>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook.
</span></span><span style="display:flex;"><span>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span></span><span style="display:flex;"><span>Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!
</span></span><span style="display:flex;"><span>Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span></span><span style="display:flex;"><span>Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!
</span></span><span style="display:flex;"><span>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span></span><span style="display:flex;"><span>Ook! Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.
</span></span><span style="display:flex;"><span>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span></span><span style="display:flex;"><span>Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!
</span></span><span style="display:flex;"><span>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook!
</span></span><span style="display:flex;"><span>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!
</span></span><span style="display:flex;"><span>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.
</span></span><span style="display:flex;"><span>Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span></span><span style="display:flex;"><span>Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.
</span></span><span style="display:flex;"><span>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook?
</span></span><span style="display:flex;"><span>Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span></span><span style="display:flex;"><span>Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!
</span></span><span style="display:flex;"><span>Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook.
</span></span><span style="display:flex;"><span>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook!
</span></span><span style="display:flex;"><span>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!
</span></span><span style="display:flex;"><span>Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
</span></span><span style="display:flex;"><span>Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!
</span></span><span style="display:flex;"><span>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook?
</span></span><span style="display:flex;"><span>Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. 
</span></span></code></pre></div><p>非常长，进行Ook编码和解码的网站也是<a href="https://www.splitbrain.org/services/ook">Brainfuck/Ook! Obfuscation/Encoding</a></p>
<h3 id="uuencode编码">UUencode编码</h3>
<p>一种逐渐退出历史舞台的编码方式，编码的文段中有许多特殊的字符。</p>
<p>uuencode这个名字是衍生自&quot;Unix-to-Unix encoding&quot;，原先是Unix系统下将二进制的资料借由uucp邮件系统传输的一个编码程式，是一种二进制到文字的编码。uudecode是与uuencode搭配的解码程式，uuencode/decode常见于电子邮件中的档案传送以及usenet新闻组和BBS的贴文等等。近来已被MIME所大量取代。</p>
<p>UUencode的编码原理和Base64的编码原理非常相似。</p>
<p><img src="/images/Encode/image-20210713141225018.png" alt="image-20210713141225018"></p>
<p>比如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Hello World!
</span></span></code></pre></div><p>进行编码后得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>,2&amp;5L;&amp;\@5V]R;&amp;0A
</span></span></code></pre></div><h3 id="xxencode编码">XXencode编码</h3>
<p>XXencode编码和base64编码类似，只不过是使用的转换表不同。</p>
<p>Xxencode编码，也是一个二进制字符转换为普通打印字符方法。跟UUencode编码原理方法很相似，唯独不同的是可打印字符不同。通个UUencode编码，我们知道它有个缺点就是，64个可打印字符中，有很多的特殊字符。而XXencode编码方法，对64个原字符有做规范。这里它有跟Base64类型了。都有指定可打印字符范围、及编号。Xxencode编码在上世纪后期，IBM大型机中得到很广泛的应用。现在逐渐被Base64编码转换方法所取代了。</p>
<p>比如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Hello World!
</span></span></code></pre></div><p>进行XXencode编码后，得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BG4JgP4wUJqxmP4EV0U++
</span></span></code></pre></div><h3 id="jjencode编码">JJencode编码</h3>
<p>算是JSFuck编码的前身，是由18种字符组成的编码格式。是针对JavaScript进行设计的编码方式。</p>
<p>长谷川阳介（Yosuke Hasegawa）于2009年7月创建了一个名为“jjencode”的网络应用程序，可将一切的JavaScript代码混淆为<a href=""></a>!+,&quot;$.:;_{}~=这十八个字符的排列组合。</p>
<p>比如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>alert(&#34;Hello, JavaScript&#34; )
</span></span></code></pre></div><p>进行jjencode编码，得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>$=~[];$={___:++$,$$$$:(![]+&#34;&#34;)[$],__$:++$,$_$_:(![]+&#34;&#34;)[$],_$_:++$,$_$$:({}+&#34;&#34;)[$],$$_$:($[$]+&#34;&#34;)[$],_$$:++$,$$$_:(!&#34;&#34;+&#34;&#34;)[$],$__:++$,$_$:++$,$$__:({}+&#34;&#34;)[$],$$_:++$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+&#34;&#34;)[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+&#34;&#34;)[$.__$])+((!$)+&#34;&#34;)[$._$$]+($.__=$.$_[$.$$_])+($.$=(!&#34;&#34;+&#34;&#34;)[$.__$])+($._=(!&#34;&#34;+&#34;&#34;)[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!&#34;&#34;+&#34;&#34;)[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+&#34;\&#34;&#34;+$.$_$_+(![]+&#34;&#34;)[$._$_]+$.$$$_+&#34;\\&#34;+$.__$+$.$$_+$._$_+$.__+&#34;(\\\&#34;\\&#34;+$.__$+$.__$+$.___+$.$$$_+(![]+&#34;&#34;)[$._$_]+(![]+&#34;&#34;)[$._$_]+$._$+&#34;,\\&#34;+$.$__+$.___+&#34;\\&#34;+$.__$+$.__$+$._$_+$.$_$_+&#34;\\&#34;+$.__$+$.$$_+$.$$_+$.$_$_+&#34;\\&#34;+$.__$+$._$_+$._$$+$.$$__+&#34;\\&#34;+$.__$+$.$$_+$._$_+&#34;\\&#34;+$.__$+$.$_$+$.__$+&#34;\\&#34;+$.__$+$.$$_+$.___+$.__+&#34;\\\&#34;\\&#34;+$.$__+$.___+&#34;)&#34;+&#34;\&#34;&#34;)())();
</span></span></code></pre></div><h3 id="aaencode编码">AAencode编码</h3>
<p>aaencode编码是一个比较有意思的编码形式，同样也是对于JavaScript语言设计的编码方式，是把JavaScript的代码编码成日本的表情包。</p>
<p>比如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>alert(&#34;Hello, JavaScript&#34;)
</span></span></code></pre></div><p>通过aaencode编码，得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ [&#39;_&#39;]; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: &#39;_&#39; ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +&#39;_&#39;) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ &#39;_&#39;)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +&#39;_&#39;)[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +&#39;_&#39;) [c^_^o];(ﾟДﾟ) [&#39;c&#39;] = ((ﾟДﾟ)+&#39;_&#39;) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [&#39;o&#39;] = ((ﾟДﾟ)+&#39;_&#39;) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [&#39;c&#39;]+(ﾟДﾟ) [&#39;o&#39;]+(ﾟωﾟﾉ +&#39;_&#39;)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +&#39;_&#39;) [ﾟｰﾟ] + ((ﾟДﾟ) +&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +&#39;_&#39;) [ﾟΘﾟ]+((ﾟｰﾟ==3) +&#39;_&#39;) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [&#39;c&#39;]+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [&#39;o&#39;]+((ﾟｰﾟ==3) +&#39;_&#39;) [ﾟΘﾟ];(ﾟДﾟ) [&#39;_&#39;] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +&#39;_&#39;) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟωﾟﾉ +&#39;_&#39;) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=&#39;\\&#39;; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +&#39;_&#39;)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=&#39;\&#34;&#39;;(ﾟДﾟ) [&#39;_&#39;] ( (ﾟДﾟ) [&#39;_&#39;] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟΘﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (&#39;_&#39;);
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>现代密码-看尽如今的满目繁华</title>
            <link>/posts/modern_crypto/</link>
            <pubDate>Sat, 29 Jan 2022 11:31:41 +0800</pubDate>
            
            <guid>/posts/modern_crypto/</guid>
            <description>现代密码 现代密码根据密钥的方式可以分为对称密码和非对称密码，这两类密码是现代密码的支柱，现代密码又可以根据加密的方式分为流密码和分组密码。流密码，分组密码在CTF中通常是以对称密码的方式进行而RSA、ECC、格密码通常是以非对称密码的方式进行。
流密码 流密码一般逐字节或者逐比特处理信息。一般来说
流密码的密钥长度会与明文的长度相同。 流密码的密钥派生自一个较短的密钥，派生算法通常为一个伪随机数生成算法。 需要注意的是，流加密目前来说都是对称加密。
伪随机数生成算法生成的序列的随机性越强，明文中的统计特征被覆盖的更好。
流密码加解密非常简单，在已知明文的情况下，可以非常容易地获取密钥流。
流密码的关键在于设计好的伪随机数生成器。一般来说，伪随机数生成器的基本构造模块为反馈移位寄存器。当然，也有一些特殊设计的流密码，比如 RC4。^1^
分组密码 分组密码又叫块加密。所谓块加密就是每次加密一块明文，常见的加密算法有
IDEA 加密 DES 加密 AES 加密 块加密也是对称加密。
其实，我们也可以把块加密理解一种特殊的替代密码，但是其每次替代的是一大块。而正是由于一大块，明文空间巨大，而且对于不同的密钥，我们无法做一个表进行对应相应的密文，因此必须得有 复杂 的加解密算法来加解密明密文。
而与此同时，明文往往可能很长也可能很短，因此在块加密时往往需要两个辅助
padding，即 padding 到指定分组长度 分组加密模式，即明文分组加密的方式。 基本策略 在分组密码设计时，充分使用了Shannon提出的两大策略：混淆和扩散两大策略
混淆，Confusion，将密文与密钥之间的统计关系变得尽可能复杂，使得攻击者即使获取了密文的一些统计特性，也无法推测密钥。
扩散，Diffusion，使得明文中的每一位影响密文中的许多位。
非对称密码 在非对称密码中，加密者与解密者所使用的密钥并不一样，典型的有 RSA 加密，背包加密，椭圆曲线加密。
非对称密码通常也被称为公钥密码
Diffie和Hellman在1976年的论文《密码学的新方向》中提出了全新的密码思想，即一个密码体制中的加密密钥和解密密钥是保密的，且由公开的加密密钥难以推测出保密的解密密钥。这种密码体制称为公开密钥密码体制，也称为公钥密码体制。
公钥密码体制的算法很多，所有的公钥密码算法都是基于某个困难的数学问题而产生的，其中，最受CTF青睐的就是RSA了。
目前现代密码在CTF比赛出现比较频繁，现在CTF中主要考察的就是现代密码学的知识应用，和数学公式的理解。进行相应的密码学题目的求解。
参考 Introduction - CTF Wiki (ycdxsb.cn) </description>
            <content type="html"><![CDATA[<h1 id="现代密码">现代密码</h1>
<p>现代密码根据密钥的方式可以分为对称密码和非对称密码，这两类密码是现代密码的支柱，现代密码又可以根据加密的方式分为流密码和分组密码。流密码，分组密码在CTF中通常是以对称密码的方式进行而RSA、ECC、格密码通常是以非对称密码的方式进行。</p>
<h2 id="流密码">流密码</h2>
<p>流密码一般逐字节或者逐比特处理信息。一般来说</p>
<ul>
<li>流密码的密钥长度会与明文的长度相同。</li>
<li>流密码的密钥派生自一个较短的密钥，派生算法通常为一个伪随机数生成算法。</li>
</ul>
<p>需要注意的是，流加密目前来说都是对称加密。</p>
<p>伪随机数生成算法生成的序列的随机性越强，明文中的统计特征被覆盖的更好。</p>
<p>流密码加解密非常简单，在已知明文的情况下，可以非常容易地获取密钥流。</p>
<p>流密码的关键在于设计好的伪随机数生成器。一般来说，伪随机数生成器的基本构造模块为反馈移位寄存器。当然，也有一些特殊设计的流密码，比如 RC4。^1^</p>
<h2 id="分组密码">分组密码</h2>
<p>分组密码又叫块加密。所谓块加密就是每次加密一块明文，常见的加密算法有</p>
<ul>
<li>IDEA 加密</li>
<li>DES 加密</li>
<li>AES 加密</li>
</ul>
<p>块加密也是对称加密。</p>
<p>其实，我们也可以把块加密理解一种特殊的替代密码，但是其每次替代的是一大块。而正是由于一大块，明文空间巨大，而且对于不同的密钥，我们无法做一个表进行对应相应的密文，因此必须得有 <strong>复杂</strong> 的加解密算法来加解密明密文。</p>
<p>而与此同时，明文往往可能很长也可能很短，因此在块加密时往往需要两个辅助</p>
<ul>
<li>padding，即 padding 到指定分组长度</li>
<li>分组加密模式，即明文分组加密的方式。</li>
</ul>
<h3 id="基本策略">基本策略</h3>
<p>在分组密码设计时，充分使用了Shannon提出的两大策略：混淆和扩散两大策略</p>
<p>混淆，Confusion，将密文与密钥之间的统计关系变得尽可能复杂，使得攻击者即使获取了密文的一些统计特性，也无法推测密钥。</p>
<p>扩散，Diffusion，使得明文中的每一位影响密文中的许多位。</p>
<h2 id="非对称密码">非对称密码</h2>
<p>在非对称密码中，加密者与解密者所使用的密钥并不一样，典型的有 RSA 加密，背包加密，椭圆曲线加密。</p>
<p>非对称密码通常也被称为公钥密码</p>
<p>Diffie和Hellman在1976年的论文《密码学的新方向》中提出了全新的密码思想，即一个密码体制中的加密密钥和解密密钥是保密的，且由公开的加密密钥难以推测出保密的解密密钥。这种密码体制称为公开密钥密码体制，也称为公钥密码体制。</p>
<p>公钥密码体制的算法很多，所有的公钥密码算法都是基于某个困难的数学问题而产生的，其中，最受CTF青睐的就是RSA了。</p>
<hr>
<p>目前现代密码在CTF比赛出现比较频繁，现在CTF中主要考察的就是现代密码学的知识应用，和数学公式的理解。进行相应的密码学题目的求解。</p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="http://ctfwiki.ycdxsb.cn/crypto/streamcipher/intro-zh/">Introduction - CTF Wiki (ycdxsb.cn)</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>古典密码-探寻曾经的故事</title>
            <link>/posts/classic_crypto/</link>
            <pubDate>Sat, 29 Jan 2022 11:28:09 +0800</pubDate>
            
            <guid>/posts/classic_crypto/</guid>
            <description>古典密码 密码和编码最大的区别就是密码多了一个很关键的信息：密钥。
密码(Cryptology)是一种用来混淆的技术,它希望将正常的、可识别的信息转变为无法识别的信息。密码学是一个即古老又新兴的学科,密码学一词源自希腊文“krypto&amp;rsquo;s”及“logos”两字,直译即为“隐藏”及“讯息”之意。
密码学是一门拥有几千年历史的学科。密码学的发展大概经历了三个阶段:古典密码阶段、近代密码阶段、现代密码阶段。下面我们一起了解古典密码阶段。
古典密码阶段是指从密码的产生到发展成为近代密码之间的这段时期密码的发展历史。
值得一提的是，在古典密码学中，设计者主要考虑消息的保密性，使得只有相关密钥的人才可以解密密文获得消息的内容，对于消息的完整性和不可否认性则并没有进行太多的考虑。(1)
历史 古代中国:从古到今,军队历来是使用密码最频繁的地方,因为保护己方秘密并洞悉敌方秘密是克敌制胜的重要条件。正如中国古代军事著作《孙子兵法》中所说:知己知彼,百战不殆;不知彼而知己,一胜一负;不知彼不知己,每战必败。中国古代有着丰富的军事实践和发达的军事理论,其中不乏巧妙、规范和系统的保密通信和身份认证方法。
中国古代兵书《六韬》中的阴符和阴书:《六韬》又称《太公六韬》或《太公兵法》,据说是由西周的开国功臣太公望(又名吕尚或姜子牙,约公元前1128—公元前1015)所著。书中以周文王和周武王与太公问答的形式阐述军事理论,其中《龙韬•阴符》篇和《龙韬•阴书》篇,讲述了君主如何在战争中与在外的将领进行保密通信。
以下是关于“阴符”使用方法对话的译文。
武王问太公说:领兵深入敌国境内,军队突然遇到紧急情况,战事或有利,或失利。我要与各军远近相通,内外相应,保持密切的联系,以便及时应对战场上军队的需求,应该怎么办呢?
太公回答说:国君与主将之间用阴符秘密联络。阴符共有八种:一种长一尺,表示大获全胜,摧毁敌人;一种长九寸,表示攻破敌军,杀敌主将;一种长八寸,表示守城的敌人已投降,我军已占领该城;一种长七寸,表示敌军已败退,远传捷报;一种长六寸,表示我军将誓死坚守城邑;一种长五寸,表示请拨运军粮,增派援军;一种长四寸,表示军队战败,主将阵亡;一种长三寸,表示战事失利,全军伤亡惨重。如奉命传递阴符的使者延误传递,则处死;如阴符的秘密被泄露,则无论无意泄密者或有意传告者也处死。只有国君和主将知道这八种阴符的秘密。这就是不会泄露朝廷与军队之间相互联系内容的秘密通信语言。敌人再聪明也不能识破它。
以下是关于“阴书”使用方法对话的译文。
武王问太公说:领兵深入敌国境内,君主和将帅各率一军,要使两支军队配合作战,实施变化无穷的作战方法,谋取敌人意想不到的胜利。但需要联络的事情很多,使用阴符难以说明,而两军之间又距离遥远,言语不能通达,应该怎么办呢?
太公回答说:如果有军机大事需要联络,应该用书信而不用符。君主通过书信向主将指示,主将则通过书信向君主请示。书信都要拆分成三部分,并分派三人发出,每人拿一部分。只有这三部分合在一起才能读懂信的内容。这就是所谓的阴书(机密信),敌人再聪明,也看不懂这种书信。
中国宋代兵书《武经总要》是北宋仁宗时期官修的一部兵书,成书于1040年—1044年,作者是天章阁待制曾公亮和工部侍郎丁度。该书前集第15卷中有“符契”、“信牌”和“字验”三节,专门讲述军队中秘密通信和身份验证的方法。
“符契”是《六韬》中“阴符”方法的改进。其中的“符”是皇帝派人向军队调兵的凭证,共有5种符,各种符的组合表示调用兵力的多少,每符分左右两段,右段留京师,左段由各路军队的主将收掌。使者将带着皇帝的命令和由枢密院封印的相应的右符,前往军队调兵;主将听完使者宣读皇帝的命令后,须启封使者带来的右符,并与所藏的左符验合,才能接受命令;然后用本将军的印重封右符,交由使者带回京师。
“契”是主将派人向镇守各方的下属调兵的凭证,共有三种契,每契都是鱼形,可分为上下两段。上段留主将收掌,下段交各处下属收掌,使用方法类似于上述的符。
“信牌”是两军阵前交战时,派人传送紧急命令的信物和文件。北宋初期使用的信物是一分两半的铜钱,后来改用木牌,上面可以写字。
“字验”则是秘密传送军情的一套方法。先约定40种不同的军情,然后用一首含有40个不同字的诗,令其中每一个字对应一种军情。传送军情时,写一封普通的书信或文件,在其中的关键字旁加印记。军使在送信途中,不怕被敌方截获并破解信中内容。将军们收到信后,找出其中加印记的关键字,然后根据约定的40字诗来查出该字所告知的情况,还可以在这些字上再加印记,以表示对有关情况的处理,并令军使带回。
我们看到,宋代的“字验”方法与近代以来军队、外交官和间谍们常用的借助密码字典进行秘密通信和联络的原理相同。
古代中国的君王常以虎符作为调用军队的凭证。如在春秋战国时期,就有魏信陵君使如姬窃取魏王的虎符,并以此夺取大将晋鄙的兵权,然后率兵大破秦军,以解赵国之围的故事。虎符一般由铜、银等金属制成,背面刻有铭文,以示级别、身份、调用军队的对象和范围等;虎符分为两半,一半放在朝廷,另一半由在外的将帅保管。朝廷派来的使者,需携虎符验合,才可调兵遣将。
顺便解释“符”字:其本义是指古代朝廷下命令的凭证;部首的“竹”表明最早的“符”是用竹子做的;“符”通常做成两部分,使用时一分为二,验证时合二为一;只有同一符的两部分才能完美地合在一起;这就是常用词“符合”的来历。近代间谍史上,常有人把纸币钞票一撕为二,作为接头联络的工具,其原理同“符”。现代密码学中,运用公钥—私钥体系进行身份认证的方法也与“符”相通。
我国明末清初著名的军事理论家揭暄(1613—1695)所著的《兵经百言》用100个字条系统阐述了中国古代的军事理论。其中的“传”字诀则是古代军队通信方法的总结,其解释如下:
军队分开行动后,如相互之间不能通信,就要打败仗;如果能通信但不保密,则也要被敌人暗算。所以除了用锣鼓、旌旗、骑马送信、燃火、烽烟等联系外,两军相遇,还要对暗号(口令)。当军队分开有千里之远时,宜用机密信(素书)进行通信。机密信分为三种:改变字的通常书写或阅读方式(“不成字”,如传统密码学的文字替换或移位方法);隐写术(“无形文”,用含有某种化学物质的液体来书写,收信者用特殊方法使文字显现出来,如矾书);不是把书信写在常用的纸上(“非纸简”),而是写在特殊的、不引人注意的载体上(如服饰,甚至人体上等)。这些通信方式连送信的使者都不知道信中的内容,但收信人却可以接收到信息。
古埃及:公元前2000年人类文明刚刚形成,大约就在那个时候古埃及就拥有了密码。贵族克努姆霍特普二世的墓碑上记载了在阿梅连希第二法老王朝供职期间它所建立的功勋。上面的象形文字与我们已知的埃及象形文字有所不同,那是由一位擅长书写的人对普通象形文字经过处理之后刻录的,但是具体的方法尚未可知。民众们推测这可能是庄严和权威的象征。
古印度:印度公元前三百年写成的《经济论》旨在描述当时密探充斥全国时特务机关的官员用密写的方式给密探下达任务。
古希腊:大约在公元前700年,古希腊军队用一种叫做Scytale的圆木棍来进行保密通信。其使用方法是:把长带子状羊皮纸缠绕在圆木棍上,然后在上面写字;解下羊皮纸后,上面只有杂乱无章的字符,只有再次以同样的方式缠绕到同样粗细的棍子上,才能看出所写的内容。
这种Scytale圆木棍也许是人类最早使用的文字加密解密工具,据说主要是古希腊城邦中的斯巴达人(Sparta)在使用它,所以又被叫做“斯巴达棒”。
斯巴达棒的加密原理属于密码学中的“换位法”(Transition)加密,因为它通过改变文本中字母的阅读顺序来达到加密的目的。(2)
类型 古典密码在形式上可分成移位密码和替代密码两类，其中替代密码又可分为单表替代密码和多表替代。
移位密码 曲路密码 曲路密码是一种置换密码，其中密钥是从明文创建的块中读取密文时要遵循的路径,该密钥需双方事先约定好（曲路路径）。
下面给出一个例子：
明文：The quick brown fox jumps over the lazy dog 填入填入 5 行 7 列表（事先约定填充的行列数）
加密的回路线（事先约定填充的行列数）
密文：gesfc inpho dtmwu qoury zejre hbxva lookT 云影密码 该密码又称为01248，使用 0，1，2，4，8 四个数字，其中 0 用来表示间隔，其他数字以加法可以表示出 如：28=10，124=7，18=9，再用 1-&amp;gt;26 表示 A-&amp;gt;Z。
可以看出该密码有以下特点：
只有 0，1，2，4，8 这里举个栗子</description>
            <content type="html"><![CDATA[<h1 id="古典密码">古典密码</h1>
<blockquote>
<p>密码和编码最大的区别就是密码多了一个很关键的信息：密钥。</p>
</blockquote>
<p>密码(Cryptology)是一种用来混淆的技术,它希望将正常的、可识别的信息转变为无法识别的信息。密码学是一个即古老又新兴的学科,密码学一词源自希腊文“krypto&rsquo;s”及“logos”两字,直译即为“隐藏”及“讯息”之意。</p>
<p>密码学是一门拥有几千年历史的学科。密码学的发展大概经历了三个阶段:古典密码阶段、近代密码阶段、现代密码阶段。下面我们一起了解古典密码阶段。</p>
<p>古典密码阶段是指从密码的产生到发展成为近代密码之间的这段时期密码的发展历史。</p>
<blockquote>
<p>值得一提的是，在古典密码学中，设计者主要考虑消息的保密性，使得只有相关密钥的人才可以解密密文获得消息的内容，对于消息的完整性和不可否认性则并没有进行太多的考虑。(1)</p>
</blockquote>
<h2 id="历史">历史</h2>
<p>古代中国:从古到今,军队历来是使用密码最频繁的地方,因为保护己方秘密并洞悉敌方秘密是克敌制胜的重要条件。正如中国古代军事著作《孙子兵法》中所说:知己知彼,百战不殆;不知彼而知己,一胜一负;不知彼不知己,每战必败。中国古代有着丰富的军事实践和发达的军事理论,其中不乏巧妙、规范和系统的保密通信和身份认证方法。</p>
<p>中国古代兵书《六韬》中的阴符和阴书:《六韬》又称《太公六韬》或《太公兵法》,据说是由西周的开国功臣太公望(又名吕尚或姜子牙,约公元前1128—公元前1015)所著。书中以周文王和周武王与太公问答的形式阐述军事理论,其中《龙韬•阴符》篇和《龙韬•阴书》篇,讲述了君主如何在战争中与在外的将领进行保密通信。</p>
<p>以下是关于“阴符”使用方法对话的译文。</p>
<p>武王问太公说:领兵深入敌国境内,军队突然遇到紧急情况,战事或有利,或失利。我要与各军远近相通,内外相应,保持密切的联系,以便及时应对战场上军队的需求,应该怎么办呢?</p>
<p>太公回答说:国君与主将之间用阴符秘密联络。阴符共有八种:一种长一尺,表示大获全胜,摧毁敌人;一种长九寸,表示攻破敌军,杀敌主将;一种长八寸,表示守城的敌人已投降,我军已占领该城;一种长七寸,表示敌军已败退,远传捷报;一种长六寸,表示我军将誓死坚守城邑;一种长五寸,表示请拨运军粮,增派援军;一种长四寸,表示军队战败,主将阵亡;一种长三寸,表示战事失利,全军伤亡惨重。如奉命传递阴符的使者延误传递,则处死;如阴符的秘密被泄露,则无论无意泄密者或有意传告者也处死。只有国君和主将知道这八种阴符的秘密。这就是不会泄露朝廷与军队之间相互联系内容的秘密通信语言。敌人再聪明也不能识破它。</p>
<p>以下是关于“阴书”使用方法对话的译文。</p>
<p>武王问太公说:领兵深入敌国境内,君主和将帅各率一军,要使两支军队配合作战,实施变化无穷的作战方法,谋取敌人意想不到的胜利。但需要联络的事情很多,使用阴符难以说明,而两军之间又距离遥远,言语不能通达,应该怎么办呢?</p>
<p>太公回答说:如果有军机大事需要联络,应该用书信而不用符。君主通过书信向主将指示,主将则通过书信向君主请示。书信都要拆分成三部分,并分派三人发出,每人拿一部分。只有这三部分合在一起才能读懂信的内容。这就是所谓的阴书(机密信),敌人再聪明,也看不懂这种书信。</p>
<p>中国宋代兵书《武经总要》是北宋仁宗时期官修的一部兵书,成书于1040年—1044年,作者是天章阁待制曾公亮和工部侍郎丁度。该书前集第15卷中有“符契”、“信牌”和“字验”三节,专门讲述军队中秘密通信和身份验证的方法。</p>
<p>“符契”是《六韬》中“阴符”方法的改进。其中的“符”是皇帝派人向军队调兵的凭证,共有5种符,各种符的组合表示调用兵力的多少,每符分左右两段,右段留京师,左段由各路军队的主将收掌。使者将带着皇帝的命令和由枢密院封印的相应的右符,前往军队调兵;主将听完使者宣读皇帝的命令后,须启封使者带来的右符,并与所藏的左符验合,才能接受命令;然后用本将军的印重封右符,交由使者带回京师。</p>
<p>“契”是主将派人向镇守各方的下属调兵的凭证,共有三种契,每契都是鱼形,可分为上下两段。上段留主将收掌,下段交各处下属收掌,使用方法类似于上述的符。</p>
<p>“信牌”是两军阵前交战时,派人传送紧急命令的信物和文件。北宋初期使用的信物是一分两半的铜钱,后来改用木牌,上面可以写字。</p>
<p>“字验”则是秘密传送军情的一套方法。先约定40种不同的军情,然后用一首含有40个不同字的诗,令其中每一个字对应一种军情。传送军情时,写一封普通的书信或文件,在其中的关键字旁加印记。军使在送信途中,不怕被敌方截获并破解信中内容。将军们收到信后,找出其中加印记的关键字,然后根据约定的40字诗来查出该字所告知的情况,还可以在这些字上再加印记,以表示对有关情况的处理,并令军使带回。</p>
<p>我们看到,宋代的“字验”方法与近代以来军队、外交官和间谍们常用的借助密码字典进行秘密通信和联络的原理相同。</p>
<p>古代中国的君王常以虎符作为调用军队的凭证。如在春秋战国时期,就有魏信陵君使如姬窃取魏王的虎符,并以此夺取大将晋鄙的兵权,然后率兵大破秦军,以解赵国之围的故事。虎符一般由铜、银等金属制成,背面刻有铭文,以示级别、身份、调用军队的对象和范围等;虎符分为两半,一半放在朝廷,另一半由在外的将帅保管。朝廷派来的使者,需携虎符验合,才可调兵遣将。</p>
<p>顺便解释“符”字:其本义是指古代朝廷下命令的凭证;部首的“竹”表明最早的“符”是用竹子做的;“符”通常做成两部分,使用时一分为二,验证时合二为一;只有同一符的两部分才能完美地合在一起;这就是常用词“符合”的来历。近代间谍史上,常有人把纸币钞票一撕为二,作为接头联络的工具,其原理同“符”。现代密码学中,运用公钥—私钥体系进行身份认证的方法也与“符”相通。</p>
<p>我国明末清初著名的军事理论家揭暄(1613—1695)所著的《兵经百言》用100个字条系统阐述了中国古代的军事理论。其中的“传”字诀则是古代军队通信方法的总结,其解释如下:</p>
<p>军队分开行动后,如相互之间不能通信,就要打败仗;如果能通信但不保密,则也要被敌人暗算。所以除了用锣鼓、旌旗、骑马送信、燃火、烽烟等联系外,两军相遇,还要对暗号(口令)。当军队分开有千里之远时,宜用机密信(素书)进行通信。机密信分为三种:改变字的通常书写或阅读方式(“不成字”,如传统密码学的文字替换或移位方法);隐写术(“无形文”,用含有某种化学物质的液体来书写,收信者用特殊方法使文字显现出来,如矾书);不是把书信写在常用的纸上(“非纸简”),而是写在特殊的、不引人注意的载体上(如服饰,甚至人体上等)。这些通信方式连送信的使者都不知道信中的内容,但收信人却可以接收到信息。</p>
<p>古埃及:公元前2000年人类文明刚刚形成,大约就在那个时候古埃及就拥有了密码。贵族克努姆霍特普二世的墓碑上记载了在阿梅连希第二法老王朝供职期间它所建立的功勋。上面的象形文字与我们已知的埃及象形文字有所不同,那是由一位擅长书写的人对普通象形文字经过处理之后刻录的,但是具体的方法尚未可知。民众们推测这可能是庄严和权威的象征。</p>
<p>古印度:印度公元前三百年写成的《经济论》旨在描述当时密探充斥全国时特务机关的官员用密写的方式给密探下达任务。</p>
<p>古希腊:大约在公元前700年,古希腊军队用一种叫做Scytale的圆木棍来进行保密通信。其使用方法是:把长带子状羊皮纸缠绕在圆木棍上,然后在上面写字;解下羊皮纸后,上面只有杂乱无章的字符,只有再次以同样的方式缠绕到同样粗细的棍子上,才能看出所写的内容。</p>
<p>这种Scytale圆木棍也许是人类最早使用的文字加密解密工具,据说主要是古希腊城邦中的斯巴达人(Sparta)在使用它,所以又被叫做“斯巴达棒”。</p>
<p>斯巴达棒的加密原理属于密码学中的“换位法”(Transition)加密,因为它通过改变文本中字母的阅读顺序来达到加密的目的。(2)</p>
<h2 id="类型">类型</h2>
<p>古典密码在形式上可分成移位密码和替代密码两类，其中替代密码又可分为单表替代密码和多表替代。</p>
<h3 id="移位密码">移位密码</h3>
<h4 id="曲路密码">曲路密码</h4>
<p>曲路密码是一种置换密码，其中密钥是从明文创建的块中读取密文时要遵循的路径,该密钥需双方事先约定好（曲路路径）。</p>
<p>下面给出一个例子：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>明文：The quick brown fox jumps over the lazy dog
</span></span></code></pre></div><p>填入填入 5 行 7 列表（事先约定填充的行列数）</p>
<p><img src="/images/Classic_Crypto/image-20210719200647994.png" alt="image-20210719200647994"></p>
<p>加密的回路线（事先约定填充的行列数）</p>
<p><img src="/images/Classic_Crypto/image-20210719200710292.png" alt="image-20210719200710292"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>密文：gesfc inpho dtmwu qoury zejre hbxva lookT
</span></span></code></pre></div><h4 id="云影密码">云影密码</h4>
<p>该密码又称为01248，使用 0，1，2，4，8 四个数字，其中 0 用来表示间隔，其他数字以加法可以表示出 如：28=10，124=7，18=9，再用 1-&gt;26 表示 A-&gt;Z。</p>
<p>可以看出该密码有以下特点：</p>
<ul>
<li>只有 0，1，2，4，8</li>
</ul>
<p>这里举个栗子</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>密文：WELLDONE
</span></span></code></pre></div><p>采用0进行分割，得到云影密码加密结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>8842101220480224404014224202480122
</span></span></code></pre></div><h4 id="栅栏密码">栅栏密码</h4>
<p>栅栏密码把要加密的明文分成 N 个一组，然后把每组的第 1 个字连起来，形成一段无规律的话。栅栏密码分为两种类型，一种是传统的栅栏密码，另一种是W型的栅栏密码。</p>
<h5 id="传统栅栏密码">传统栅栏密码</h5>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>明文：THEREISACIPHER
</span></span></code></pre></div><p>分成三栏，三个一组得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>THE REI SAC IPH ER
</span></span></code></pre></div><p>先取出第一个字母，再取出第二个字母</p>
<pre tabindex="0"><code>TRSIE
HEAPR
EICH
</code></pre><p>连在一起就是密文</p>
<pre tabindex="0"><code>TRSIEHEAPREICH
</code></pre><h5 id="w型栅栏密码">W型栅栏密码</h5>
<p>W型栅栏密码和传统的栅栏密码原理类似，就排列方式有所差异</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>明文：THEREISACIPHER
</span></span></code></pre></div><p>分成三栏，三个一组得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>THE REI SAC IPH ER
</span></span></code></pre></div><p>进行W型栅栏排列</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>T   E   C   E
</span></span><span style="display:flex;"><span> H R I A I H R
</span></span><span style="display:flex;"><span>  E   S   P
</span></span></code></pre></div><p>连在一起就是密文</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>TECEHRIAIHRESP
</span></span></code></pre></div><h3 id="替换密码">替换密码</h3>
<h4 id="单表替换密码">单表替换密码</h4>
<p>在单表替换加密中，所有的加密方式几乎都有一个共性，那就是明密文一一对应。所以说，一般有以下两种方式来进行破解 (4)</p>
<ul>
<li>在密钥空间较小的情况下，采用暴力破解方式</li>
<li>在密文长度足够长的时候，使用词频分析，http://quipqiup.com/</li>
</ul>
<p>当密钥空间足够大，而密文长度足够短的情况下，破解较为困难。</p>
<h5 id="凯撒密码">凯撒密码</h5>
<p>凯撒密码是非常著名的古典密码，也是非常经典的古典密码。</p>
<p>凯撒密码（Caesar）加密时会将明文中的 <strong>每个字母</strong> 都按照其在字母表中的顺序向后（或向前）移动固定数目（<strong>循环移动</strong>）作为密文。例如，当偏移量是左移 3 的时候（解密时的密钥就是 3）：^4^</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>明文字母表：ABCDEFGHIJKLMNOPQRSTUVWXYZ
</span></span><span style="display:flex;"><span>密文字母表：DEFGHIJKLMNOPQRSTUVWXYZABC
</span></span></code></pre></div><p>使用时，加密者查找明文字母表中需要加密的消息中的每一个字母所在位置，并且写下密文字母表中对应的字母。需要解密的人则根据事先已知的密钥反过来操作，得到原来的明文。例如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>明文：THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG
</span></span><span style="display:flex;"><span>密文：WKH TXLFN EURZQ IRA MXPSV RYHU WKH ODCB GRJ
</span></span></code></pre></div><p>根据偏移量的不同，还存在<strong>若干特定的恺撒密码名称</strong>：</p>
<ul>
<li>偏移量为10：Avocat (A–&gt;K)</li>
<li>偏移量为13：ROT13</li>
<li>偏移量为-5：Cassis (K 6)</li>
<li>偏移量为-6：Cassette (K 7)</li>
</ul>
<p>举个栗子：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>明文：This is a fake flag
</span></span></code></pre></div><p>经过凯撒密码，位移3进行加密得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>密文：Wklv lv d idnh iodj
</span></span></code></pre></div><h5 id="埃特巴什码">埃特巴什码</h5>
<p>与凯撒密码不同的是，埃特巴什码的提代表不是通过移位获得的，而是通过对称获得的。其通过将字母表的位置完全镜面对称后获得字母的替代表，然后进行加密。</p>
<p>埃特巴什码（Atbash Cipher）其实可以视为下面要介绍的简单替换密码的特例，它使用字母表中的最后一个字母代表第一个字母，倒数第二个字母代表第二个字母。在罗马字母表中，它是这样出现的：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>明文：A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
</span></span><span style="display:flex;"><span>密文：Z Y X W V U T S R Q P O N M L K J I H G F E D C B A
</span></span></code></pre></div><p>给出一个栗子：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>明文：the quick brown fox jumps over the lazy dog
</span></span><span style="display:flex;"><span>密文：gsv jfrxp yildm ulc qfnkh levi gsv ozab wlt
</span></span></code></pre></div><h5 id="培根密码">培根密码</h5>
<p>培根密码一般使用两种不同的字体表示密文，密文的内容不是关键所在，关键是字体。使用AB代表两种字体，五个一组，表示密文，明密问对应如表：(5)</p>
<table>
<thead>
<tr>
<th>明文</th>
<th>密文</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>AAAAA</td>
</tr>
<tr>
<td>b</td>
<td>AAAAB</td>
</tr>
<tr>
<td>c</td>
<td>AAABA</td>
</tr>
<tr>
<td>d</td>
<td>AAABB</td>
</tr>
<tr>
<td>e</td>
<td>AABAA</td>
</tr>
<tr>
<td>f</td>
<td>AABAB</td>
</tr>
<tr>
<td>g</td>
<td>AABBA</td>
</tr>
<tr>
<td>h</td>
<td>AABBB</td>
</tr>
<tr>
<td>i-j</td>
<td>ABAAA</td>
</tr>
<tr>
<td>k</td>
<td>ABAAB</td>
</tr>
<tr>
<td>l</td>
<td>ABABA</td>
</tr>
<tr>
<td>m</td>
<td>ABABB</td>
</tr>
<tr>
<td>n</td>
<td>ABBAA</td>
</tr>
<tr>
<td>o</td>
<td>ABBAB</td>
</tr>
<tr>
<td>p</td>
<td>ABBBA</td>
</tr>
<tr>
<td>q</td>
<td>ABBBB</td>
</tr>
<tr>
<td>r</td>
<td>BAAAA</td>
</tr>
<tr>
<td>s</td>
<td>BAAAB</td>
</tr>
<tr>
<td>t</td>
<td>BAABA</td>
</tr>
<tr>
<td>u-v</td>
<td>BAABB</td>
</tr>
<tr>
<td>w</td>
<td>BABAA</td>
</tr>
<tr>
<td>x</td>
<td>BABAB</td>
</tr>
<tr>
<td>y</td>
<td>BABBA</td>
</tr>
<tr>
<td>z</td>
<td>BABBB</td>
</tr>
</tbody>
</table>
<p>上面的是常用的加密表。还有另外的一种加密表，可认为是将 26 个字母从 0 到 25 排序，以二进制表示，A 代表 0，B 代表 1。</p>
<p>下面这一段内容就是明文 steganography 加密后的内容，正常字体是 A，粗体是 B：</p>
<p><strong>T</strong>o en<strong>co</strong>de <strong>a</strong> mes<strong>s</strong>age e<strong>ac</strong>h letter <strong>of</strong> the <strong>pl</strong>a<strong>i</strong>nt<strong>ex</strong>t <strong>i</strong>s replaced b<strong>y a g</strong>rou<strong>p of f</strong>i<strong>ve</strong> of <strong>th</strong>e lett<strong>ers</strong> <strong>&lsquo;A&rsquo;</strong> o<strong>r &lsquo;B&rsquo;</strong>.</p>
<p>可以看到，培根密码主要有以下特点:</p>
<ul>
<li>只有两种字符</li>
<li>每一段的长度为5</li>
<li>加密内容会有特殊的字体之分，亦或者大小写之分</li>
</ul>
<h5 id="图形替代密码">图形替代密码</h5>
<p>猪圈密码和跳舞的小人都是典型的图形替代密码，图形替代密码是通过将明文用图形进行替代以实现加密。解密时进行一样对应就可以进行解密。这里列出几种经典的图形替代密码：</p>
<ol>
<li>
<p>猪圈密码</p>
<p><img src="/images/Classic_Crypto/image-20210723143749253.png" alt="image-20210723143749253"></p>
</li>
<li>
<p>标准银河字母</p>
<p><img src="/images/Classic_Crypto/image-20210723143804055.png" alt="image-20210723143804055"></p>
</li>
<li>
<p>圣堂武士密码</p>
<p><img src="/images/Classic_Crypto/image-20210723143823252.png" alt="image-20210723143823252"></p>
</li>
<li>
<p>跳舞的小人</p>
<p><img src="/images/Classic_Crypto/image-20210723170216677.png" alt="image-20210723170216677"></p>
</li>
<li>
<p>古埃及象形密码</p>
<p><img src="/images/Classic_Crypto/image-20210723143640427.png" alt="image-20210723143640427"></p>
</li>
<li>
<p>Wingdings</p>
<p><img src="/images/Classic_Crypto/image-20210723170304399.png" alt="image-20210723170304399"></p>
</li>
</ol>
<h5 id="仿射密码">仿射密码</h5>
<p>仿射密码的替代表生成方式依据：
$$
c = am+b\ \text{mod}\ n
$$</p>
<ul>
<li>$m$ 为明文对应字母得到的数字</li>
<li>$a$  和 $n$ 互质</li>
<li>$n$ 是编码系统中字母的数目</li>
</ul>
<p>解密函数是 $D(x) = a^{-1} (m-b) \ \text{mod}\ n$, 其中$a^{-1}$是$a$在$\mathbb{Z}_m$群的乘法逆元。</p>
<h4 id="多表替换密码">多表替换密码</h4>
<p>对于多表替换加密来说，加密后的字母几乎不再保持原来的频率，所以我们一般只能通过寻找算法实现对应的弱点进行破解。</p>
<h5 id="棋盘类密码">棋盘类密码</h5>
<p>Playfair、Polybius和Nihilist均属于棋盘类密码。此类密码的密钥为一个5x5的棋盘。棋盘生成符号如下条件：</p>
<ul>
<li>顺序随意</li>
<li>不得出现重复字母</li>
<li>i和j可视为同一个字（也有将q去除的，以保证总数为25个）</li>
</ul>
<p>生成棋盘后，不同加密方式使用不同的转换方式。</p>
<h5 id="维吉尼亚密码">维吉尼亚密码</h5>
<p>凯撒密码是单表替代密码，其只使用了一个替代表，维吉尼亚密码则是标准的多表替代密码。</p>
<p>首先，多表替代密码的密钥不再是固定不变的，而是随着位置发生改变的。在维吉尼亚密码中，根据密钥的字母来选择。</p>
<p>使用数学语言进行描述：</p>
<p>维吉尼亚密码是一种简单的多表代换密码(由26个类似的Caesar密码的代换表组成)，</p>
<p>即由<strong>一些</strong>偏移量不同的恺撒密码组成，这些代换在一起组成了密钥。</p>
<p>英文中a~z，由0~25表示。</p>
<p>假设串长为：m，明文为P，密文为C，密钥为K则
$$
C = (P_1 +K_1,P_2+K_2,\dots,P_m+K_m)\text{mod}26
$$</p>
<p>$$
P = (C_1 -K_1,C_2-K_2,\dots,C_m-K_m)\text{mod}26
$$</p>
<p>举个栗子：</p>
<p>如果密钥是LOVE，那么明文会四个一组进行循环。明文的第一个位置会使用“L”进行加密，第二个位置会使用“O”进行加密，第四个位置会使用“E”进行加密，到第五个位置时又会回归到使用“L”进行加密。</p>
<p>一般情况下，维吉尼亚密码的破解必须依赖爆破+词频统计的方法来进行</p>
<h5 id="希尔密码">希尔密码</h5>
<p>希尔密码（Hill）使用每个字母在字母表中的顺序作为其对应的数字，即 A=0，B=1，C=2 等，然后将明文转化为 n 维向量，跟一个 n × n 的矩阵相乘，再将得出的结果模 26。注意用作加密的矩阵（即密匙）在$\mathbb{Z}^n_{26}$必须是可逆的，否则就不可能解码。只有矩阵的行列式和26互质，才是可逆的。下面举一个例子</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>明文：ACT
</span></span></code></pre></div><p>将明文化为矩阵
$$
\left[
\begin{matrix}
0 \\
2 \\
19
\end{matrix}
\right]
$$</p>
<p>假设密钥为：
$$
\left[
\begin{matrix}
6 &amp; 24 &amp; 1\\
13 &amp; 16 &amp; 10\\
20 &amp; 17 &amp; 15
\end{matrix}
\right]
$$
加密过程为
$$
\left[
\begin{matrix}
6 &amp; 24 &amp; 1\\
13 &amp; 16 &amp; 10\\
20 &amp; 17 &amp; 15
\end{matrix}
\right]
\left[
\begin{matrix}
0\\
2\\
19
\end{matrix}
\right]
\equiv
\left[
\begin{matrix}
67\\
222\\
319
\end{matrix}
\right]
\equiv
\left[
\begin{matrix}
15\\
14\\
7
\end{matrix}
\right]
\ \text{mod}\ 26
$$</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>密文：POH
</span></span></code></pre></div><h2 id="参考">参考</h2>
<ol>
<li><a href="https://ctf-wiki.org/crypto/classical/introduction/">古典密码简介 - CTF Wiki (ctf-wiki.org)</a></li>
<li><a href="https://oscca.gov.cn/sca/zxfw/2017-04/24/content_1011709.shtml">密码发展史之古典密码 _国家密码管理局门户 (oscca.gov.cn)</a></li>
<li><a href="https://ctf-wiki.org/crypto/classical/introduction/">古典密码简介 - CTF Wiki (ctf-wiki.org)</a></li>
<li><a href="http://www.dyf.ink/crypto/classical/monoalphabetic/">单表代换加密 - CTF Wiki (dyf.ink)</a></li>
<li><a href="https://ctf-wiki.org/crypto/classical/others/">其它类型加密 - CTF Wiki (ctf-wiki.org)</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>One Time_Pad</title>
            <link>/posts/one-time_pad/</link>
            <pubDate>Sat, 29 Jan 2022 11:26:36 +0800</pubDate>
            
            <guid>/posts/one-time_pad/</guid>
            <description>One-Time pad 密码学中有一种加密方法叫做 One Time Pad ，翻译过来叫做“一次性密码本”。因为这种密码最早就是真的写在一个本子上传递的，所以有了这个名字。这是一种安全度最高的加密方法，需要通信双方事先去沟通一个一次性的和被加密信息长度相等或者更长的秘钥。
次性密码本（英语：one-time pad，缩写为OTP）是古典密码学中的一种加密算法。是以随机的密钥（key）组成明文，且只使用一次。
密码学安全性最强的密码OTP（One-Time pad），OTP的安全性依赖于 ”一次一密“ 理论的安全性。
历史 1917年，Vernam发明一次一密，并为此申请了专利。
安全性 OTP是绝对安全的，是牢不可破的。香农已经证实了一次一密理论的安全性。
虽然它在理论上的安全性无庸置疑，但在实际操作上却有着以下的问题：
用以加密的文本，也就是一次性密码本，必须确实是随机产生的。 它至少必须和被加密的文件等长。 用以加密的文本只能用一次，且必须对非关系人小心保密，不再使用时，用以加密的文本应当要销毁，以防重复使用。 加密方式 首先手上要有一本一次性密码本用以加密文件，接着将一次性密码本里的字母，与被加密文件的字母给依序按某个事先约定的规定一一相混，其中一个相混的作法是将字母指定数字（如在英语中，将A至Z依序指定为0至25）然后将一次性密码文本上的字母所代表的数字和被加密文件上相对应的数字给相加，再除以该语言的字母数后获取其余数，假设字母数是 n（如英语为26），若就此得出来的某个数字小于零，则将该小于零的数给加上n，如此便完成加密。
一次一密密码具有非常棒的安全性，但是理想很美好，现实很残酷，理想状态下的一次一密密码非常安全、非常简单同时也非常完美。但是，现实状态下的一次一密密码是几乎不可能实现的。
使用 One Time Pad 有两个最佳实践。第一，一个 One Time Pad 只用一次。第二，每个 One Time Pad 中的数据要保证真正的随机。
这意味着真正使用的时候，每次加密都需要重新生成并且再次发布给通信双方。互联网是一个不安全的环境，安全的发布 One Time Pad 其实是非常困难的，这就使得在很多的应用情形下是不能使用 One Time Pad 的。
参考 一次性密码本 - 万维百科 (wanweibaike.net) One Time Pad 一次性密码本 - 知乎 (zhihu.com) </description>
            <content type="html"><![CDATA[<h1 id="one-time--pad">One-Time  pad</h1>
<p>密码学中有一种加密方法叫做 One Time Pad ，翻译过来叫做“一次性密码本”。因为这种密码最早就是真的写在一个本子上传递的，所以有了这个名字。这是一种安全度最高的加密方法，需要通信双方事先去沟通一个一次性的和被加密信息长度相等或者更长的秘钥。</p>
<p>次性密码本（英语：one-time pad，缩写为OTP）是古典密码学中的一种加密算法。是以随机的密钥（key）组成明文，且只使用一次。</p>
<p>密码学安全性最强的密码OTP（One-Time pad），OTP的安全性依赖于 ”一次一密“ 理论的安全性。</p>
<h2 id="历史">历史</h2>
<p>1917年，Vernam发明一次一密，并为此申请了专利。</p>
<h2 id="安全性">安全性</h2>
<p>OTP是绝对安全的，是牢不可破的。香农已经证实了一次一密理论的安全性。</p>
<p>虽然它在理论上的安全性无庸置疑，但在实际操作上却有着以下的问题：</p>
<ul>
<li>用以加密的文本，也就是一次性密码本，必须确实是随机产生的。</li>
<li>它至少必须和被加密的文件等长。</li>
<li>用以加密的文本只能用一次，且必须对非关系人小心保密，不再使用时，用以加密的文本应当要销毁，以防重复使用。</li>
</ul>
<h2 id="加密方式">加密方式</h2>
<p>首先手上要有一本一次性密码本用以加密文件，接着将一次性密码本里的字母，与被加密文件的字母给依序按某个事先约定的规定一一相混，其中一个相混的作法是将字母指定数字（如在英语中，将A至Z依序指定为0至25）然后将一次性密码文本上的字母所代表的数字和被加密文件上相对应的数字给相加，再除以该语言的字母数后获取其余数，假设字母数是 n（如英语为26），若就此得出来的某个数字小于零，则将该小于零的数给加上n，如此便完成加密。</p>
<hr>
<p>一次一密密码具有非常棒的安全性，但是理想很美好，现实很残酷，理想状态下的一次一密密码非常安全、非常简单同时也非常完美。但是，现实状态下的一次一密密码是几乎不可能实现的。</p>
<p>使用 One Time Pad 有两个最佳实践。第一，一个 One Time Pad 只用一次。第二，每个 One Time Pad 中的数据要保证真正的随机。</p>
<p>这意味着真正使用的时候，每次加密都需要重新生成并且再次发布给通信双方。互联网是一个不安全的环境，安全的发布 One Time Pad 其实是非常困难的，这就使得在很多的应用情形下是不能使用 One Time Pad 的。</p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://wanweibaike.net/wiki-%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AF%86%E7%A2%BC%E6%9C%AC">一次性密码本 - 万维百科 (wanweibaike.net)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/58751912">One Time Pad 一次性密码本 - 知乎 (zhihu.com)</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>2021 绿城杯 Crypto_writeup</title>
            <link>/posts/2021-%E7%BB%BF%E5%9F%8E%E6%9D%AF-crypto_writeup/</link>
            <pubDate>Sat, 29 Jan 2022 10:57:34 +0800</pubDate>
            
            <guid>/posts/2021-%E7%BB%BF%E5%9F%8E%E6%9D%AF-crypto_writeup/</guid>
            <description>2021 绿城杯 Crypto Writeup 河南郑州的绿城杯，也是第一届绿城杯比赛。使用的比赛平台是安恒的比赛平台。比赛过程中出现了卡顿的问题。绿城杯的整体题目难度还是比较友好的，至少密码学方向是相对比较简单的一部分内容。
密码学题目有三道题目，一道古典密码学题目，两道RSA题目。本人太菜，仅仅做出了前两道题目。
0x0 [warmup]加密算法 直接看看题目的源码
from Crypto.Util.number import * from flag import flag assert flag[:5]==&amp;#39;flag{&amp;#39; str1 = &amp;#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#39; def encode(plain_text, a, b, m): cipher_text = &amp;#39;&amp;#39; for i in plain_text: if i in str1: addr = str1.find(i) cipher_text += str1[(a*addr+b) % m] else: cipher_text += i print(cipher_text) encode(flag,37,23,52) # cipher_text = &amp;#39;aoxL{XaaHKP_tHgwpc_hN_ToXnnht}&amp;#39; 代码看样子是非常简单的，可以找到加密的关键代码：
def encode(plain_text, a, b, m): cipher_text = &amp;#39;&amp;#39; for i in plain_text: if i in str1: addr = str1.</description>
            <content type="html"><![CDATA[<h1 id="2021-绿城杯-crypto-writeup">2021 绿城杯 Crypto Writeup</h1>
<p>河南郑州的绿城杯，也是第一届绿城杯比赛。使用的比赛平台是安恒的比赛平台。比赛过程中出现了卡顿的问题。绿城杯的整体题目难度还是比较友好的，至少密码学方向是相对比较简单的一部分内容。</p>
<p>密码学题目有三道题目，一道古典密码学题目，两道RSA题目。本人太菜，仅仅做出了前两道题目。</p>
<h2 id="0x0-warmup加密算法">0x0 [warmup]加密算法</h2>
<p>直接看看题目的源码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> flag <span style="color:#f92672">import</span> flag
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span> flag[:<span style="color:#ae81ff">5</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">&#39;flag{&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>str1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode</span>(plain_text, a, b, m):
</span></span><span style="display:flex;"><span>	cipher_text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> plain_text:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> str1:
</span></span><span style="display:flex;"><span>			addr <span style="color:#f92672">=</span> str1<span style="color:#f92672">.</span>find(i)
</span></span><span style="display:flex;"><span>			cipher_text <span style="color:#f92672">+=</span> str1[(a<span style="color:#f92672">*</span>addr<span style="color:#f92672">+</span>b) <span style="color:#f92672">%</span> m]
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>			cipher_text <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>	print(cipher_text)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>encode(flag,<span style="color:#ae81ff">37</span>,<span style="color:#ae81ff">23</span>,<span style="color:#ae81ff">52</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># cipher_text = &#39;aoxL{XaaHKP_tHgwpc_hN_ToXnnht}&#39;</span>
</span></span></code></pre></div><p>代码看样子是非常简单的，可以找到加密的关键代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode</span>(plain_text, a, b, m):
</span></span><span style="display:flex;"><span>	cipher_text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> plain_text:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> str1:
</span></span><span style="display:flex;"><span>			addr <span style="color:#f92672">=</span> str1<span style="color:#f92672">.</span>find(i)
</span></span><span style="display:flex;"><span>			cipher_text <span style="color:#f92672">+=</span> str1[(a<span style="color:#f92672">*</span>addr<span style="color:#f92672">+</span>b) <span style="color:#f92672">%</span> m]
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>			cipher_text <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>	print(cipher_text)
</span></span></code></pre></div><p>对加密函数进行审计可以发现有一个比较明显的数学运算：</p>
<p>$$
cipher\underline{~~}text \equiv a \times addr + b\ \text{mod}\ m
$$</p>
<p>看到这个数学运算，应该可以自然而然的想到是仿射加密，对应的解密函数也就是该运算的逆运算：</p>
<p>$$
plain\underline{~~} text \equiv {addr}^{-1} \times (a-b)\  \text{mod}\ m
$$</p>
<p>根据运算构造解密函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode</span>(cipher_text,a,b,m):
</span></span><span style="display:flex;"><span>    plain_text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    a_inv <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(a,m)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_text:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> str1:
</span></span><span style="display:flex;"><span>            addr <span style="color:#f92672">=</span> str1<span style="color:#f92672">.</span>find(i)
</span></span><span style="display:flex;"><span>            plain_text <span style="color:#f92672">+=</span> str1[(a_inv<span style="color:#f92672">*</span>(addr<span style="color:#f92672">-</span>b))<span style="color:#f92672">%</span>m]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            plain_text <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>    print(plain_text)
</span></span></code></pre></div><p>根据解密函数进行求解即可求解</p>
<p>完整exp：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>str1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode</span>(plain_text, a, b, m):
</span></span><span style="display:flex;"><span>	cipher_text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> plain_text:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> str1:
</span></span><span style="display:flex;"><span>			addr <span style="color:#f92672">=</span> str1<span style="color:#f92672">.</span>find(i)
</span></span><span style="display:flex;"><span>			cipher_text <span style="color:#f92672">+=</span> str1[(a<span style="color:#f92672">*</span>addr<span style="color:#f92672">+</span>b) <span style="color:#f92672">%</span> m]
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>			cipher_text <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>	print(cipher_text)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode</span>(cipher_text,a,b,m):
</span></span><span style="display:flex;"><span>    plain_text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    a_inv <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(a,m)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_text:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> str1:
</span></span><span style="display:flex;"><span>            addr <span style="color:#f92672">=</span> str1<span style="color:#f92672">.</span>find(i)
</span></span><span style="display:flex;"><span>            plain_text <span style="color:#f92672">+=</span> str1[(a_inv<span style="color:#f92672">*</span>(addr<span style="color:#f92672">-</span>b))<span style="color:#f92672">%</span>m]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            plain_text <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>    print(plain_text)
</span></span><span style="display:flex;"><span>cipher_text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;aoxL</span><span style="color:#e6db74">{XaaHKP_tHgwpc_hN_ToXnnht}</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>decode(cipher_text,<span style="color:#ae81ff">37</span>,<span style="color:#ae81ff">23</span>,<span style="color:#ae81ff">52</span>)
</span></span></code></pre></div><h2 id="0x1-rsa-1">0x1 RSA-1</h2>
<p>RSA的题目，康康题目源码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> flag <span style="color:#f92672">import</span> flag
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span> flag[:<span style="color:#ae81ff">5</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;flag{&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> bytes_to_long(flag)
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p <span style="color:#f92672">*</span> q
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;n =&#39;</span>,n)
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
</span></span><span style="display:flex;"><span>M <span style="color:#f92672">=</span> <span style="color:#ae81ff">2021</span> <span style="color:#f92672">*</span> m <span style="color:#f92672">*</span> <span style="color:#ae81ff">1001</span> <span style="color:#f92672">*</span> p 
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> pow(M,e,n)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;c =&#39;</span>,c)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#n = 17365231154926348364478276872558492775911760603002394353723603461898405740234715001820111548600914907617003806652492391686710256274156677887101997175692277729648456087534987616743724646598234466094779540729413583826355145277980479040157075453694250572316638348121571218759769533738721506811175866990851972838466307594226293836934116659685215775643285465895317755892754473332034234495795936183610569571016400535362762699517686781602302045048532131426035260878979892169441059467623523060569285570577199236309888155833013721997933960457784653262076135561769838704166810384309655788983073376941843467117256002645962737847</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#c = 6944967108815437735428941286784119403138319713455732155925055928646536962597672941805831312130689338014913452081296400272862710447207265099750401657828165836013122848656839100854719965188680097375491193249127725599660383746827031803066026497989298856420216250206035068180963797454792151191071433645946245914916732637007117085199442894495667455544517483404006536607121480678688000420422281380539368519807162175099763891988648117937777951069899975260190018995834904541447562718307433906592021226666885638877020304005614450763081337082838608414756162253825697420493509914578546951634127502393647068722995363753321912676</span>
</span></span></code></pre></div><p>进行代码审计，可以发现前面的加密过程是RSA的基本加密过程和步骤，但是到了后面的步骤，发现加密过程出现了异样，这很有可能就是我们的攻击点。找到题目源码中的可疑运算：
$$
M = 2021 \times m \times 1001 \times p
$$
观察这个等式可以得出一些微妙的关系：
$$
c \equiv M^e \ \text{mod}\ n \
n  = p \cdot q
$$
根据这个关系进一步推到可以得到
$$
c \equiv {(2021 \times m \times 1001 \times p)}^e\ \text{mod}\ n
$$
观察这个等式可以显然发现 c 和 n 存在着有着微妙的关系，利用这个微妙的关系可以得到攻击这个密码体制的钥匙，即
$$
p = \gcd (c,n)
$$
利用这个关系即可求解本题</p>
<p>完整exp：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">17365231154926348364478276872558492775911760603002394353723603461898405740234715001820111548600914907617003806652492391686710256274156677887101997175692277729648456087534987616743724646598234466094779540729413583826355145277980479040157075453694250572316638348121571218759769533738721506811175866990851972838466307594226293836934116659685215775643285465895317755892754473332034234495795936183610569571016400535362762699517686781602302045048532131426035260878979892169441059467623523060569285570577199236309888155833013721997933960457784653262076135561769838704166810384309655788983073376941843467117256002645962737847</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">6944967108815437735428941286784119403138319713455732155925055928646536962597672941805831312130689338014913452081296400272862710447207265099750401657828165836013122848656839100854719965188680097375491193249127725599660383746827031803066026497989298856420216250206035068180963797454792151191071433645946245914916732637007117085199442894495667455544517483404006536607121480678688000420422281380539368519807162175099763891988648117937777951069899975260190018995834904541447562718307433906592021226666885638877020304005614450763081337082838608414756162253825697420493509914578546951634127502393647068722995363753321912676</span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>gcd(c,n)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span> p
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span>(n <span style="color:#f92672">==</span> p<span style="color:#f92672">*</span>q)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)
</span></span><span style="display:flex;"><span>M <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> M<span style="color:#f92672">//</span>(<span style="color:#ae81ff">2021</span><span style="color:#f92672">*</span>p<span style="color:#f92672">*</span><span style="color:#ae81ff">1001</span>)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> long_to_bytes(m)
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><h2 id="0x2-rsa-2">0x2 RSA-2</h2>
<p>当时没做出来，没有认真进行数学分析，是本菜狗没错了，后来看大佬的Writeup发现是一道原题，大佬的博客：<a href="https://jsur.in/post/2019-07-01-isitdtu-2019-quals-ctf-writeups">ISITDTU 2019 Quals CTF Writeups | Joseph Surin | joseph&rsquo;s blog (jsur.in)</a></p>
<p>这道题目，我根据对博客的学习和理解进行简单地复现，这道题目其实也就是数学的推导和猜测，又是暴力的美学和优雅地求解。</p>
<p>看看题目源码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> flag <span style="color:#f92672">import</span> flag
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span> flag[:<span style="color:#ae81ff">5</span>]<span style="color:#f92672">==</span><span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;flag{&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m1 <span style="color:#f92672">=</span> bytes_to_long(flag[:<span style="color:#ae81ff">20</span>])
</span></span><span style="display:flex;"><span>p  <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">512</span>)
</span></span><span style="display:flex;"><span>p1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>next_prime(p)
</span></span><span style="display:flex;"><span>q  <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">512</span>)
</span></span><span style="display:flex;"><span>q1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>next_prime(q)
</span></span><span style="display:flex;"><span>n1 <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q<span style="color:#f92672">*</span>p1<span style="color:#f92672">*</span>q1
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;n1 =&#39;</span>,n1)
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
</span></span><span style="display:flex;"><span>c1 <span style="color:#f92672">=</span> pow(m1,e,n1)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;c1 =&#39;</span>,c1)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m2 <span style="color:#f92672">=</span> bytes_to_long(flag[<span style="color:#ae81ff">20</span>:])
</span></span><span style="display:flex;"><span>p2 <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>q2 <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;p2+q2 =&#39;</span>,p2<span style="color:#f92672">+</span>q2)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;q2*q2 =&#39;</span>,p2<span style="color:#f92672">*</span>q2)
</span></span><span style="display:flex;"><span>n2 <span style="color:#f92672">=</span> p2<span style="color:#f92672">*</span>p2<span style="color:#f92672">*</span>q2<span style="color:#f92672">*</span>q2<span style="color:#f92672">*</span>q2
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;n2 =&#39;</span>,n2)
</span></span><span style="display:flex;"><span>c2 <span style="color:#f92672">=</span> pow(m2,e,n2)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;c2 =&#39;</span>,c2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#n1 = 6348779979606280884589422188738902470575876294643492831465947360363568026280963989291591157710389629216109615274754718329987990551836115660879103234129921943824061416396264358110216047994331119920503431491509529604742468032906950984256964560405062345280120526771439940278606226153077959057882262745273394986607004406770035459301695806378598890589432538916219821477777021460189140081521779103226953544426441823244765828342973086422949017937701261348963541035128661464068769033772390320426795044617751909787914185985911277628404632533530390761257251552073493697518547350246993679844132297414094727147161169548160586911</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#c1 = 6201882078995455673376327652982610102807874783073703018551044780440620679217833227711395689114659144506630609087600915116940111002026241056808189658969089532597757995423694966667948250438579639890580690392400661711864264184444018345499567505424672090632235109624193289954785503512742400960515331371813467034511130432319427185134018830006918682733848618201088649690422818940385123599468595766345668931882249779415788129316594083269412221804774856038796248038700275509397599351533280014908894068141056694660319816046357462684688942519849441237878018480036145051967731081582598773076490918572392784684372694103015244826</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#p2+q2 = 274773146761138462708137582309097386437793891793691383033856524303010811294101933454824485010521468914846151819876043508541879637544444256520741418495479393777132830985856522008561088410862815913292288683761657919121930016956916865849261153721097671315883469348972925757078089715102032241818526925988645578778</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#q2*q2 = 18514724270030962172566965941723224386374076294232652258701085781018776172843355920566035157331579524980108190739141959926523082142273672741849552475156278397131571360099018592018959785627785130126477982765210498547680367230723634424036009539347854344573537848628061468892166199866227984167843139793429682559241317072979374002912607549039431398267184818771503468116379618249319324788996321340764624593443106354104274472601170229835219638093242557547840060892527576940077162990069687019966946826210112318408269749294366586682732614372434218768720577917368726530200897558912687470088583774711767599580037663378929000217</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#n2 = 40588227045595304080360385041082238507044292731344465815296032905633525556943787610712651675460810768762763493579129831271018141591546207557410817432455139315527674932933085299277599173971912445226532235814580879585317211349524406424200622675880992390782025158621241499693400288031658194434641718026910652327933253877313106112861283314274635124734817398465059373562194694957841264834312640926278890386089611103714990646541470577351599526904458342660444968591197606820361364761648205241041444681145820799054413179462285509661124362074093583494932706249461954240408827087015525507173082129412234486228092002841868365895837463699200959915782767657258729794037776401995309244941171415842403617486719492483671490834562579225506831496881542530519595438932482796867853234159664409420977526102480385193101883785161080269573707156626838551506024455480650224305894501968583442346807126920740779780593650871645915149689424292912611578291912721896864772950410266629045542480009266574096080138709683466489568290569363478444349563498507530805502511051165160827192795520182720802422213364247355775222858214648603034743679187470844212529134374975737510982287957316878179964602394749601431823167982157434890459245394370728942790117156485268116758052636794417268680901420193002289035538753620555488506926366624641291881353268617130968991258983002165300186971963661666476600998389048880565199317280428349802824448329898502788492233381873026217202981921654673840142095839603360666049476100561268336225902504932800605464136192275593886736746497955270280541423593</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#c2 = 25591090168544821761746024178724660839590948190451329227481168576490717242294520739865602061082558759751196452117720647426598261568572440942370039702932821941366792140173428488344932203576334292648255551171274828821657097667106792872200082579319963310503721435500623146012954474613150848083425126987554594651797477741828655238243550266972216752593788734836373144363217639612492397228808215205862281278774096317615918854403992620720969173788151215489908812749179861803144937169587452008097008940710091361183942268245271154461872102813602754439939747566507116519362821255724179093051041994730856401493996771276172343313045755916751082693149885922105491818225012844519264933137622929024918619477538521533548551789739698933067212305578480416163609137189891797209277557411169643568540392303036719952140554435338851671440952865151077383220305295001632816442144022437763089133141886924265774247290306669825085862351732336395617276100374237159580759999593028756939354840677333467281632435767033150052439262501059299035212928041546259933118564251119588970009016873855478556588250138969938599988198494567241172399453741709840486953189764289118312870580993115636710724139809708256360212728127786394411676427828431569046279687481368215137561500777480380501551616577832499521295655237360184159889151837766353116185320317774645294201044772828099074917077896631909654671612557207653830344897644115936322128351494551004652981550758791285434809816872381900401440743578104582305215488888563166054568802145921399726673752722820646807494657299104190123945675647</span>
</span></span></code></pre></div><p>题目源码分为两个部分，将flag进行分割了，分成两个部分进行加密。</p>
<p>第一部分需要使用暴力的美学进行求解。</p>
<p>第二部分需要使用优雅的运算进行求解。</p>
<p>首先，看一下第一部分的加密代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>m1 <span style="color:#f92672">=</span> bytes_to_long(flag[:<span style="color:#ae81ff">20</span>])
</span></span><span style="display:flex;"><span>p  <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">512</span>)
</span></span><span style="display:flex;"><span>p1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>next_prime(p)
</span></span><span style="display:flex;"><span>q  <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">512</span>)
</span></span><span style="display:flex;"><span>q1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>next_prime(q)
</span></span><span style="display:flex;"><span>n1 <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q<span style="color:#f92672">*</span>p1<span style="color:#f92672">*</span>q1
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;n1 =&#39;</span>,n1)
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
</span></span><span style="display:flex;"><span>c1 <span style="color:#f92672">=</span> pow(m1,e,n1)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;c1 =&#39;</span>,c1)
</span></span></code></pre></div><p>多素因子进行加密的，但是这几个素因子的生成是非常有意思的，有着微妙的关系，可以根据这个关系来寻找可能存在的漏洞
$$
p_1 = p + \epsilon \
q_1 = q + \delta
$$
根据这种关系可以进行发现：
$$
\begin{aligned}
p \cdot q_1 - q \cdot p_1 &amp;= p \cdot (q+\delta) - q \cdot (p+\epsilon) \
&amp;= p \cdot q + p \cdot \delta - p \cdot q - q\cdot \epsilon \
&amp;= p \cdot \delta - q \cdot \epsilon
\end{aligned}
$$
根据运算可以发现 pq1 和 qp1 之间相差不是非常大，可以使用 <a href="https://www.alpertron.com.ar/ECM.HTM">Alpertron&rsquo;s Integer Factorization Calculator</a>算法进行求解得到 pq1 和 qp1的数值</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>t1 = 79679231796035037354449627487236220201878797729093909877127396750043503300636464774059752126148617367251988043645511172901030621825575172979048675217345099706517900079260617448298874437193769061144201311929792287772928471712053565834702260975126852624433945451405258351557569670978748727663718174543709899747
</span></span><span style="display:flex;"><span>t2 = 79679231796035037354449627487236220201878797729093909877127396750043503300636464774059752126148617367251988043645511172901030621825575172979048675217341753594180007984204016274224280609480494305040439035855109422239942522968468133274883986349646765947317076885918174299537297351936448296784166003890345486613
</span></span></code></pre></div><p>现在得到了一部分信息，继续进行求解：
$$
\begin{aligned}
t_1 &amp;= p\cdot q_1 \
&amp;= p \cdot (q+\delta) \
\Rightarrow p &amp;= \frac{t_1}{q+\delta}
\end{aligned}
$$</p>
<p>$$
\begin{aligned}
t_2 &amp;= q\cdot p_1 \
&amp;= q \cdot (p+\epsilon) \
\Rightarrow p &amp;= \frac{t_2-q \cdot \epsilon}{q}
\end{aligned}
$$</p>
<p>组合这两个等式有
$$
\begin{aligned}
\frac{t_2 - q \cdot \epsilon}{q} &amp;= \frac{t_1}{q+\delta}  \
(q+\delta) \cdot (t_2 - q\cdot \epsilon)  &amp;= t_1 \cdot q  \
\epsilon \cdot q^2 + (\epsilon \cdot \delta+t_1-t_2)\cdot q - \delta\cdot t_2 &amp;= 0
\end{aligned}
$$
下面就是需要进行小素数的爆破求解以及，方程的求解</p>
<p>根据式子可以写个程序进行求解，求解得到q然后可以根究q求出p1和q1，然后再根据求出的q1求出p，这道题目的前半部分就算是求解完成了</p>
<p>前半部分的exp：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">quadratic</span>(a, b, c):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        (d, _) <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>iroot(b<span style="color:#f92672">*</span>b <span style="color:#f92672">-</span> (<span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>a<span style="color:#f92672">*</span>c),<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> ((<span style="color:#f92672">-</span>b<span style="color:#f92672">-</span>d)<span style="color:#f92672">//</span>(<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>a), (<span style="color:#f92672">-</span>b<span style="color:#f92672">+</span>d)<span style="color:#f92672">//</span>(<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>a))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># flag[:20]</span>
</span></span><span style="display:flex;"><span>n1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">6348779979606280884589422188738902470575876294643492831465947360363568026280963989291591157710389629216109615274754718329987990551836115660879103234129921943824061416396264358110216047994331119920503431491509529604742468032906950984256964560405062345280120526771439940278606226153077959057882262745273394986607004406770035459301695806378598890589432538916219821477777021460189140081521779103226953544426441823244765828342973086422949017937701261348963541035128661464068769033772390320426795044617751909787914185985911277628404632533530390761257251552073493697518547350246993679844132297414094727147161169548160586911</span>
</span></span><span style="display:flex;"><span>c1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">6201882078995455673376327652982610102807874783073703018551044780440620679217833227711395689114659144506630609087600915116940111002026241056808189658969089532597757995423694966667948250438579639890580690392400661711864264184444018345499567505424672090632235109624193289954785503512742400960515331371813467034511130432319427185134018830006918682733848618201088649690422818940385123599468595766345668931882249779415788129316594083269412221804774856038796248038700275509397599351533280014908894068141056694660319816046357462684688942519849441237878018480036145051967731081582598773076490918572392784684372694103015244826</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>t2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">79679231796035037354449627487236220201878797729093909877127396750043503300636464774059752126148617367251988043645511172901030621825575172979048675217341753594180007984204016274224280609480494305040439035855109422239942522968468133274883986349646765947317076885918174299537297351936448296784166003890345486613</span>
</span></span><span style="display:flex;"><span>t1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">79679231796035037354449627487236220201878797729093909877127396750043503300636464774059752126148617367251988043645511172901030621825575172979048675217345099706517900079260617448298874437193769061144201311929792287772928471712053565834702260975126852624433945451405258351557569670978748727663718174543709899747</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>epsilon <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>delta <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (epsilon, delta) <span style="color:#f92672">in</span> ((epsilon, delta) <span style="color:#66d9ef">for</span> epsilon <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5000</span>) <span style="color:#66d9ef">for</span> delta <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5000</span>)):
</span></span><span style="display:flex;"><span>    q1 <span style="color:#f92672">=</span> quadratic(epsilon, epsilon<span style="color:#f92672">*</span>delta<span style="color:#f92672">+</span>t1<span style="color:#f92672">-</span>t2, <span style="color:#f92672">-</span>delta<span style="color:#f92672">*</span>t2)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> q1 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        q1 <span style="color:#f92672">=</span> q1[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>    res <span style="color:#f92672">=</span> q1<span style="color:#f92672">*</span>q1<span style="color:#f92672">*</span>epsilon <span style="color:#f92672">+</span> q1<span style="color:#f92672">*</span>(epsilon<span style="color:#f92672">*</span>delta<span style="color:#f92672">+</span>t1<span style="color:#f92672">-</span>t2)<span style="color:#f92672">-</span>delta<span style="color:#f92672">*</span>t2
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> res <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> isPrime(q1):
</span></span><span style="display:flex;"><span>        q <span style="color:#f92672">=</span> q1
</span></span><span style="display:flex;"><span>        epsilon <span style="color:#f92672">=</span> epsilon
</span></span><span style="display:flex;"><span>        delta <span style="color:#f92672">=</span> delta
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>q1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>next_prime(q)
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">=</span> t2 <span style="color:#f92672">//</span> q
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> t1<span style="color:#f92672">//</span>q1
</span></span><span style="display:flex;"><span>phi1 <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(p1<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q1<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d1 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi1)
</span></span><span style="display:flex;"><span>m1 <span style="color:#f92672">=</span> pow(c1,d1,n1)
</span></span><span style="display:flex;"><span>flag1 <span style="color:#f92672">=</span> long_to_bytes(m1)
</span></span></code></pre></div><p>然后，看一下第二部分的代码，第二部分是非常优雅的进行求解的</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>m2 <span style="color:#f92672">=</span> bytes_to_long(flag[<span style="color:#ae81ff">20</span>:])
</span></span><span style="display:flex;"><span>p2 <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>q2 <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;p2+q2 =&#39;</span>,p2<span style="color:#f92672">+</span>q2)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;q2*q2 =&#39;</span>,p2<span style="color:#f92672">*</span>q2)
</span></span><span style="display:flex;"><span>n2 <span style="color:#f92672">=</span> p2<span style="color:#f92672">*</span>p2<span style="color:#f92672">*</span>q2<span style="color:#f92672">*</span>q2<span style="color:#f92672">*</span>q2
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;n2 =&#39;</span>,n2)
</span></span><span style="display:flex;"><span>c2 <span style="color:#f92672">=</span> pow(m2,e,n2)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;c2 =&#39;</span>,c2)
</span></span></code></pre></div><p>对第二部分进行审计可以发现，第二部分就是一个解方程和Euler定理的应用，构造方程和Euler定理进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>p2 <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;p2&#39;</span>)
</span></span><span style="display:flex;"><span>q2 <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;q2&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>solve([p2<span style="color:#f92672">+</span>q2<span style="color:#f92672">-</span><span style="color:#ae81ff">274773146761138462708137582309097386437793891793691383033856524303010811294101933454824485010521468914846151819876043508541879637544444256520741418495479393777132830985856522008561088410862815913292288683761657919121930016956916865849261153721097671315883469348972925757078089715102032241818526925988645578778</span>,p2<span style="color:#f92672">*</span>q2<span style="color:#f92672">-</span><span style="color:#ae81ff">18514724270030962172566965941723224386374076294232652258701085781018776172843355920566035157331579524980108190739141959926523082142273672741849552475156278397131571360099018592018959785627785130126477982765210498547680367230723634424036009539347854344573537848628061468892166199866227984167843139793429682559241317072979374002912607549039431398267184818771503468116379618249319324788996321340764624593443106354104274472601170229835219638093242557547840060892527576940077162990069687019966946826210112318408269749294366586682732614372434218768720577917368726530200897558912687470088583774711767599580037663378929000217</span>],p2,q2)
</span></span><span style="display:flex;"><span>n2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">40588227045595304080360385041082238507044292731344465815296032905633525556943787610712651675460810768762763493579129831271018141591546207557410817432455139315527674932933085299277599173971912445226532235814580879585317211349524406424200622675880992390782025158621241499693400288031658194434641718026910652327933253877313106112861283314274635124734817398465059373562194694957841264834312640926278890386089611103714990646541470577351599526904458342660444968591197606820361364761648205241041444681145820799054413179462285509661124362074093583494932706249461954240408827087015525507173082129412234486228092002841868365895837463699200959915782767657258729794037776401995309244941171415842403617486719492483671490834562579225506831496881542530519595438932482796867853234159664409420977526102480385193101883785161080269573707156626838551506024455480650224305894501968583442346807126920740779780593650871645915149689424292912611578291912721896864772950410266629045542480009266574096080138709683466489568290569363478444349563498507530805502511051165160827192795520182720802422213364247355775222858214648603034743679187470844212529134374975737510982287957316878179964602394749601431823167982157434890459245394370728942790117156485268116758052636794417268680901420193002289035538753620555488506926366624641291881353268617130968991258983002165300186971963661666476600998389048880565199317280428349802824448329898502788492233381873026217202981921654673840142095839603360666049476100561268336225902504932800605464136192275593886736746497955270280541423593</span>
</span></span><span style="display:flex;"><span>c2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">25591090168544821761746024178724660839590948190451329227481168576490717242294520739865602061082558759751196452117720647426598261568572440942370039702932821941366792140173428488344932203576334292648255551171274828821657097667106792872200082579319963310503721435500623146012954474613150848083425126987554594651797477741828655238243550266972216752593788734836373144363217639612492397228808215205862281278774096317615918854403992620720969173788151215489908812749179861803144937169587452008097008940710091361183942268245271154461872102813602754439939747566507116519362821255724179093051041994730856401493996771276172343313045755916751082693149885922105491818225012844519264933137622929024918619477538521533548551789739698933067212305578480416163609137189891797209277557411169643568540392303036719952140554435338851671440952865151077383220305295001632816442144022437763089133141886924265774247290306669825085862351732336395617276100374237159580759999593028756939354840677333467281632435767033150052439262501059299035212928041546259933118564251119588970009016873855478556588250138969938599988198494567241172399453741709840486953189764289118312870580993115636710724139809708256360212728127786394411676427828431569046279687481368215137561500777480380501551616577832499521295655237360184159889151837766353116185320317774645294201044772828099074917077896631909654671612557207653830344897644115936322128351494551004652981550758791285434809816872381900401440743578104582305215488888563166054568802145921399726673752722820646807494657299104190123945675647</span>
</span></span><span style="display:flex;"><span>P2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>Q2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> test <span style="color:#f92672">in</span> result:
</span></span><span style="display:flex;"><span>    _p2 <span style="color:#f92672">=</span> test[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    _q2 <span style="color:#f92672">=</span> test[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> n2 <span style="color:#f92672">==</span> _p2<span style="color:#f92672">*</span>_p2<span style="color:#f92672">*</span>_q2<span style="color:#f92672">*</span>_q2<span style="color:#f92672">*</span>_q2:
</span></span><span style="display:flex;"><span>        P2 <span style="color:#f92672">=</span> _p2
</span></span><span style="display:flex;"><span>        Q2 <span style="color:#f92672">=</span> _q2
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi2 <span style="color:#f92672">=</span> P2<span style="color:#f92672">*</span>(P2<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>pow(Q2,<span style="color:#ae81ff">2</span>)<span style="color:#f92672">*</span>(Q2<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d2 <span style="color:#f92672">=</span> int(libnum<span style="color:#f92672">.</span>invmod(e,phi2))
</span></span><span style="display:flex;"><span>m2 <span style="color:#f92672">=</span> pow(c2,d2,n2)
</span></span><span style="display:flex;"><span>flag2 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m2)
</span></span></code></pre></div><p>完整exp：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sympy
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">quadratic</span>(a, b, c):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        (d, _) <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>iroot(b<span style="color:#f92672">*</span>b <span style="color:#f92672">-</span> (<span style="color:#ae81ff">4</span><span style="color:#f92672">*</span>a<span style="color:#f92672">*</span>c),<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> ((<span style="color:#f92672">-</span>b<span style="color:#f92672">-</span>d)<span style="color:#f92672">//</span>(<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>a), (<span style="color:#f92672">-</span>b<span style="color:#f92672">+</span>d)<span style="color:#f92672">//</span>(<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>a))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># flag[:20]</span>
</span></span><span style="display:flex;"><span>n1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">6348779979606280884589422188738902470575876294643492831465947360363568026280963989291591157710389629216109615274754718329987990551836115660879103234129921943824061416396264358110216047994331119920503431491509529604742468032906950984256964560405062345280120526771439940278606226153077959057882262745273394986607004406770035459301695806378598890589432538916219821477777021460189140081521779103226953544426441823244765828342973086422949017937701261348963541035128661464068769033772390320426795044617751909787914185985911277628404632533530390761257251552073493697518547350246993679844132297414094727147161169548160586911</span>
</span></span><span style="display:flex;"><span>c1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">6201882078995455673376327652982610102807874783073703018551044780440620679217833227711395689114659144506630609087600915116940111002026241056808189658969089532597757995423694966667948250438579639890580690392400661711864264184444018345499567505424672090632235109624193289954785503512742400960515331371813467034511130432319427185134018830006918682733848618201088649690422818940385123599468595766345668931882249779415788129316594083269412221804774856038796248038700275509397599351533280014908894068141056694660319816046357462684688942519849441237878018480036145051967731081582598773076490918572392784684372694103015244826</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>t2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">79679231796035037354449627487236220201878797729093909877127396750043503300636464774059752126148617367251988043645511172901030621825575172979048675217341753594180007984204016274224280609480494305040439035855109422239942522968468133274883986349646765947317076885918174299537297351936448296784166003890345486613</span>
</span></span><span style="display:flex;"><span>t1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">79679231796035037354449627487236220201878797729093909877127396750043503300636464774059752126148617367251988043645511172901030621825575172979048675217345099706517900079260617448298874437193769061144201311929792287772928471712053565834702260975126852624433945451405258351557569670978748727663718174543709899747</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>epsilon <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>delta <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (epsilon, delta) <span style="color:#f92672">in</span> ((epsilon, delta) <span style="color:#66d9ef">for</span> epsilon <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5000</span>) <span style="color:#66d9ef">for</span> delta <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">5000</span>)):
</span></span><span style="display:flex;"><span>    q1 <span style="color:#f92672">=</span> quadratic(epsilon, epsilon<span style="color:#f92672">*</span>delta<span style="color:#f92672">+</span>t1<span style="color:#f92672">-</span>t2, <span style="color:#f92672">-</span>delta<span style="color:#f92672">*</span>t2)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> q1 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        q1 <span style="color:#f92672">=</span> q1[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>    res <span style="color:#f92672">=</span> q1<span style="color:#f92672">*</span>q1<span style="color:#f92672">*</span>epsilon <span style="color:#f92672">+</span> q1<span style="color:#f92672">*</span>(epsilon<span style="color:#f92672">*</span>delta<span style="color:#f92672">+</span>t1<span style="color:#f92672">-</span>t2)<span style="color:#f92672">-</span>delta<span style="color:#f92672">*</span>t2
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> res <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">and</span> isPrime(q1):
</span></span><span style="display:flex;"><span>        q <span style="color:#f92672">=</span> q1
</span></span><span style="display:flex;"><span>        epsilon <span style="color:#f92672">=</span> epsilon
</span></span><span style="display:flex;"><span>        delta <span style="color:#f92672">=</span> delta
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>q1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>next_prime(q)
</span></span><span style="display:flex;"><span>p1<span style="color:#f92672">=</span> t2 <span style="color:#f92672">//</span> q
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> t1<span style="color:#f92672">//</span>q1
</span></span><span style="display:flex;"><span>phi1 <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(p1<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q1<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d1 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi1)
</span></span><span style="display:flex;"><span>m1 <span style="color:#f92672">=</span> pow(c1,d1,n1)
</span></span><span style="display:flex;"><span>flag1 <span style="color:#f92672">=</span> long_to_bytes(m1)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># flag[20:]</span>
</span></span><span style="display:flex;"><span>p2 <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;p2&#39;</span>)
</span></span><span style="display:flex;"><span>q2 <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;q2&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>solve([p2<span style="color:#f92672">+</span>q2<span style="color:#f92672">-</span><span style="color:#ae81ff">274773146761138462708137582309097386437793891793691383033856524303010811294101933454824485010521468914846151819876043508541879637544444256520741418495479393777132830985856522008561088410862815913292288683761657919121930016956916865849261153721097671315883469348972925757078089715102032241818526925988645578778</span>,p2<span style="color:#f92672">*</span>q2<span style="color:#f92672">-</span><span style="color:#ae81ff">18514724270030962172566965941723224386374076294232652258701085781018776172843355920566035157331579524980108190739141959926523082142273672741849552475156278397131571360099018592018959785627785130126477982765210498547680367230723634424036009539347854344573537848628061468892166199866227984167843139793429682559241317072979374002912607549039431398267184818771503468116379618249319324788996321340764624593443106354104274472601170229835219638093242557547840060892527576940077162990069687019966946826210112318408269749294366586682732614372434218768720577917368726530200897558912687470088583774711767599580037663378929000217</span>],p2,q2)
</span></span><span style="display:flex;"><span>n2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">40588227045595304080360385041082238507044292731344465815296032905633525556943787610712651675460810768762763493579129831271018141591546207557410817432455139315527674932933085299277599173971912445226532235814580879585317211349524406424200622675880992390782025158621241499693400288031658194434641718026910652327933253877313106112861283314274635124734817398465059373562194694957841264834312640926278890386089611103714990646541470577351599526904458342660444968591197606820361364761648205241041444681145820799054413179462285509661124362074093583494932706249461954240408827087015525507173082129412234486228092002841868365895837463699200959915782767657258729794037776401995309244941171415842403617486719492483671490834562579225506831496881542530519595438932482796867853234159664409420977526102480385193101883785161080269573707156626838551506024455480650224305894501968583442346807126920740779780593650871645915149689424292912611578291912721896864772950410266629045542480009266574096080138709683466489568290569363478444349563498507530805502511051165160827192795520182720802422213364247355775222858214648603034743679187470844212529134374975737510982287957316878179964602394749601431823167982157434890459245394370728942790117156485268116758052636794417268680901420193002289035538753620555488506926366624641291881353268617130968991258983002165300186971963661666476600998389048880565199317280428349802824448329898502788492233381873026217202981921654673840142095839603360666049476100561268336225902504932800605464136192275593886736746497955270280541423593</span>
</span></span><span style="display:flex;"><span>c2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">25591090168544821761746024178724660839590948190451329227481168576490717242294520739865602061082558759751196452117720647426598261568572440942370039702932821941366792140173428488344932203576334292648255551171274828821657097667106792872200082579319963310503721435500623146012954474613150848083425126987554594651797477741828655238243550266972216752593788734836373144363217639612492397228808215205862281278774096317615918854403992620720969173788151215489908812749179861803144937169587452008097008940710091361183942268245271154461872102813602754439939747566507116519362821255724179093051041994730856401493996771276172343313045755916751082693149885922105491818225012844519264933137622929024918619477538521533548551789739698933067212305578480416163609137189891797209277557411169643568540392303036719952140554435338851671440952865151077383220305295001632816442144022437763089133141886924265774247290306669825085862351732336395617276100374237159580759999593028756939354840677333467281632435767033150052439262501059299035212928041546259933118564251119588970009016873855478556588250138969938599988198494567241172399453741709840486953189764289118312870580993115636710724139809708256360212728127786394411676427828431569046279687481368215137561500777480380501551616577832499521295655237360184159889151837766353116185320317774645294201044772828099074917077896631909654671612557207653830344897644115936322128351494551004652981550758791285434809816872381900401440743578104582305215488888563166054568802145921399726673752722820646807494657299104190123945675647</span>
</span></span><span style="display:flex;"><span>P2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>Q2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> test <span style="color:#f92672">in</span> result:
</span></span><span style="display:flex;"><span>    _p2 <span style="color:#f92672">=</span> test[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    _q2 <span style="color:#f92672">=</span> test[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> n2 <span style="color:#f92672">==</span> _p2<span style="color:#f92672">*</span>_p2<span style="color:#f92672">*</span>_q2<span style="color:#f92672">*</span>_q2<span style="color:#f92672">*</span>_q2:
</span></span><span style="display:flex;"><span>        P2 <span style="color:#f92672">=</span> _p2
</span></span><span style="display:flex;"><span>        Q2 <span style="color:#f92672">=</span> _q2
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi2 <span style="color:#f92672">=</span> P2<span style="color:#f92672">*</span>(P2<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>pow(Q2,<span style="color:#ae81ff">2</span>)<span style="color:#f92672">*</span>(Q2<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d2 <span style="color:#f92672">=</span> int(libnum<span style="color:#f92672">.</span>invmod(e,phi2))
</span></span><span style="display:flex;"><span>m2 <span style="color:#f92672">=</span> pow(c2,d2,n2)
</span></span><span style="display:flex;"><span>flag2 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> flag1<span style="color:#f92672">+</span>flag2
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>2021 鹤城杯 Crypto_Writeup</title>
            <link>/posts/2021-%E9%B9%A4%E5%9F%8E%E6%9D%AF-crypto_writeup/</link>
            <pubDate>Sat, 29 Jan 2022 10:57:12 +0800</pubDate>
            
            <guid>/posts/2021-%E9%B9%A4%E5%9F%8E%E6%9D%AF-crypto_writeup/</guid>
            <description>2021-鹤城杯-Crypto Writeup 鹤城杯的密码学题目，难度相对较低。但是也挺有意思的，可以学习点小知识。
0x0 easy_Crypto 签到题
公正公正公正诚信文明公正民主公正法治法治诚信民主自由敬业公正友善公正平等平等法治民主平等平等和谐敬业自由诚信平等和谐平等公正法治法治平等平等爱国和谐公正平等敬业公正敬业自由敬业平等自由法治和谐平等文明自由诚信自由平等富强公正敬业平等民主公正诚信和谐公正文明公正爱国自由诚信自由平等文明公正诚信富强自由法治法治平等平等自由平等富强法治诚信和谐 社会主义核心价值观编码，直接解编码就可
flag{IlUqU9O5guX6YiITsRNPiQmbhNRjGuTP} 0x1 A_Crypto 传统密码学题目，应该是个套娃密码
4O595954494Q32515046324757595N534R52415653334357474R4N575955544R4O5N4Q46434S4O59474253464Q5N444R4Q51334557524O5N4S424944473542554O595N44534O324R49565746515532464O49345649564O464R4R494543504N35 使用python的ciphey库进行求解就好
python3 -m ciphey -t &amp;#34;4O595954494Q32515046324757595N534R52415653334357474R4N575955544R4O5N4Q46434S4O59474253464Q5N444R4Q51334557524O5N4S424944473542554O595N44534O324R49565746515532464O49345649564O464R4R494543504N35&amp;#34; 大约2s左右就能抛出flag了
直接求解出传统密码学套娃题目的flag：
flag{W0w_y0u_c4n_rea11y_enc0d1ng!} 0x2 babyrsa from Crypto.Util.number import getPrime, bytes_to_long from secret import flag p = getPrime(1024) q = getPrime(1024) n = p * q e = 65537 hint1 = p &amp;gt;&amp;gt; 724 hint2 = q % (2 ** 265) ct = pow(bytes_to_long(flag), e, n) print(hint1) print(hint2) print(n) print(ct) 听大佬们说这是一道原题，我也不清楚是在哪里的原题，好像需要简单变化就能得到flag
分析一下题目，题目泄露了p的高位数据，但是只泄露了300位，还不能使用coppersmith攻击，需要至少576位才能使用coppersmith攻击。但是题目给到了另一个因子，因此可以尝试使用另一个因子进行构造来求解。</description>
            <content type="html"><![CDATA[<h1 id="2021-鹤城杯-crypto-writeup">2021-鹤城杯-Crypto Writeup</h1>
<p>鹤城杯的密码学题目，难度相对较低。但是也挺有意思的，可以学习点小知识。</p>
<h2 id="0x0-easy_crypto">0x0 easy_Crypto</h2>
<p>签到题</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>公正公正公正诚信文明公正民主公正法治法治诚信民主自由敬业公正友善公正平等平等法治民主平等平等和谐敬业自由诚信平等和谐平等公正法治法治平等平等爱国和谐公正平等敬业公正敬业自由敬业平等自由法治和谐平等文明自由诚信自由平等富强公正敬业平等民主公正诚信和谐公正文明公正爱国自由诚信自由平等文明公正诚信富强自由法治法治平等平等自由平等富强法治诚信和谐
</span></span></code></pre></div><p>社会主义核心价值观编码，直接解编码就可</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{IlUqU9O5guX6YiITsRNPiQmbhNRjGuTP}
</span></span></code></pre></div><h2 id="0x1-a_crypto">0x1 A_Crypto</h2>
<p>传统密码学题目，应该是个套娃密码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>4O595954494Q32515046324757595N534R52415653334357474R4N575955544R4O5N4Q46434S4O59474253464Q5N444R4Q51334557524O5N4S424944473542554O595N44534O324R49565746515532464O49345649564O464R4R494543504N35
</span></span></code></pre></div><p>使用<code>python</code>的<code>ciphey</code>库进行求解就好</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>python3 -m ciphey -t <span style="color:#e6db74">&#34;4O595954494Q32515046324757595N534R52415653334357474R4N575955544R4O5N4Q46434S4O59474253464Q5N444R4Q51334557524O5N4S424944473542554O595N44534O324R49565746515532464O49345649564O464R4R494543504N35&#34;</span>
</span></span></code></pre></div><p>大约2s左右就能抛出flag了</p>
<p><img src="/images/2021-%E9%B9%A4%E5%9F%8E%E6%9D%AF-Crypto_Writeup/image-20211008200334880.png" alt="image-20211008200334880"></p>
<p>直接求解出传统密码学套娃题目的flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{W0w_y0u_c4n_rea11y_enc0d1ng!}
</span></span></code></pre></div><h2 id="0x2-babyrsa">0x2 babyrsa</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> getPrime, bytes_to_long
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> secret <span style="color:#f92672">import</span> flag
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p <span style="color:#f92672">*</span> q
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>hint1 <span style="color:#f92672">=</span> p <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">724</span>
</span></span><span style="display:flex;"><span>hint2 <span style="color:#f92672">=</span> q <span style="color:#f92672">%</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">265</span>)
</span></span><span style="display:flex;"><span>ct <span style="color:#f92672">=</span> pow(bytes_to_long(flag), e, n)
</span></span><span style="display:flex;"><span>print(hint1)
</span></span><span style="display:flex;"><span>print(hint2)
</span></span><span style="display:flex;"><span>print(n)
</span></span><span style="display:flex;"><span>print(ct)
</span></span></code></pre></div><p>听大佬们说这是一道原题，我也不清楚是在哪里的原题，好像需要简单变化就能得到flag</p>
<p>分析一下题目，题目泄露了p的高位数据，但是只泄露了300位，还不能使用coppersmith攻击，需要至少576位才能使用coppersmith攻击。但是题目给到了另一个因子，因此可以尝试使用另一个因子进行构造来求解。</p>
<p>另一个因子该怎么使用呢？看来需要简单的数学推导了 XD
$$
q\ \text{mod}\ 2^{265} \equiv q_0 \
q = q_0 + 2^{265} \times k \
n = q_0\cdot p + 2^{265} \cdot k \cdot p \
n \cdot q_0^{-1} = p + 2^{265} \cdot k \cdot p \cdot q_0^{-1} \
p_0 \equiv n \cdot q_0^{-1}\ \text{mod}\ 2^{265}
$$
根据推导过程可以获取到p的低位p0，然后就可以使用coppersmith攻击进行快乐求解了。求解后可以得到p，然后根据p的数值来获得q的数值。现在得到这两个数值就可以进行RSA的正常求解啦！</p>
<p>EXP:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">21815431662065695412834116602474344081782093119269423403335882867255834302242945742413692949886248581138784199165404321893594820375775454774521554409598568793217997859258282700084148322905405227238617443766062207618899209593375881728671746850745598576485323702483634599597393910908142659231071532803602701147251570567032402848145462183405098097523810358199597631612616833723150146418889589492395974359466777040500971885443881359700735149623177757865032984744576285054725506299888069904106805731600019058631951255795316571242969336763938805465676269140733371287244624066632153110685509892188900004952700111937292221969</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">19073695285772829730103928222962723784199491145730661021332365516942301513989932980896145664842527253998170902799883262567366661277268801440634319694884564820420852947935710798269700777126717746701065483129644585829522353341718916661536894041337878440111845645200627940640539279744348235772441988748977191513786620459922039153862250137904894008551515928486867493608757307981955335488977402307933930592035163126858060189156114410872337004784951228340994743202032248681976932591575016798640429231399974090325134545852080425047146251781339862753527319093938929691759486362536986249207187765947926921267520150073408188188</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>p1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1514296530850131082973956029074258536069144071110652176122006763622293335057110441067910479</span>
</span></span><span style="display:flex;"><span>q0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">40812438243894343296354573724131194431453023461572200856406939246297219541329623</span>
</span></span><span style="display:flex;"><span>mod <span style="color:#f92672">=</span> pow(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">265</span>)
</span></span><span style="display:flex;"><span>p0 <span style="color:#f92672">=</span> n<span style="color:#f92672">*</span>(gmpy2<span style="color:#f92672">.</span>invert(q0, mod))<span style="color:#f92672">%</span>mod
</span></span><span style="display:flex;"><span>pbar<span style="color:#f92672">=</span>(p1<span style="color:#f92672">&lt;&lt;</span><span style="color:#ae81ff">724</span>)<span style="color:#f92672">+</span>p0
</span></span><span style="display:flex;"><span>PR<span style="color:#f92672">.&lt;</span>x<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> PolynomialRing(Zmod(n))
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>):
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">=</span>pbar<span style="color:#f92672">+</span>x<span style="color:#f92672">*</span>mod<span style="color:#f92672">*</span><span style="color:#ae81ff">32</span>
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">=</span>f<span style="color:#f92672">.</span>monic()
</span></span><span style="display:flex;"><span>    pp<span style="color:#f92672">=</span>f<span style="color:#f92672">.</span>small_roots(X<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">^</span><span style="color:#ae81ff">454</span>,beta<span style="color:#f92672">=</span><span style="color:#ae81ff">0.4</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(pp):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>    pbar<span style="color:#f92672">+=</span>mod
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">=</span>int(pbar<span style="color:#f92672">+</span>pp[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">32</span><span style="color:#f92672">*</span>mod)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span> n<span style="color:#f92672">%</span>p<span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> n<span style="color:#f92672">//</span>p
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c, d, n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> long_to_bytes(m)
</span></span><span style="display:flex;"><span>print(flag)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># b&#39;flag{ef5e1582-8116-4f61-b458-f793dc03f2ff}&#39;</span>
</span></span></code></pre></div><h2 id="0x3-crazy_rsa_tech">0x3 Crazy_Rsa_Tech</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.Padding <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>FLAG <span style="color:#f92672">=</span> bytes_to_long(pad(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;flag{??????}&#34;</span>,<span style="color:#ae81ff">64</span>))
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">init_key</span>():
</span></span><span style="display:flex;"><span>    p, q <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">512</span>), getPrime(<span style="color:#ae81ff">512</span>)
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>    e <span style="color:#f92672">=</span> <span style="color:#ae81ff">9</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span>(GCD((p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>),e)<span style="color:#f92672">!=</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        p, q <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">512</span>), getPrime(<span style="color:#ae81ff">512</span>)
</span></span><span style="display:flex;"><span>        n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>    d <span style="color:#f92672">=</span> inverse(e,(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> n,e,d
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n_list<span style="color:#f92672">=</span>list()
</span></span><span style="display:flex;"><span>c_list<span style="color:#f92672">=</span>list()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">9</span>):
</span></span><span style="display:flex;"><span>    N,e,d<span style="color:#f92672">=</span>init_key()
</span></span><span style="display:flex;"><span>    n_list<span style="color:#f92672">.</span>append(N)
</span></span><span style="display:flex;"><span>    c<span style="color:#f92672">=</span>pow(FLAG,e,N)
</span></span><span style="display:flex;"><span>    c_list<span style="color:#f92672">.</span>append(pow(FLAG,e,N))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span>(pow(c,d,N)<span style="color:#f92672">==</span>FLAG)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;n_list:&#34;</span>,n_list)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;c_list:&#34;</span>,c_list)
</span></span></code></pre></div><p>多组加密，而且加密的明文是一致的，直接使用CRT求解，写个CRT的脚本直接求解出flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n_list<span style="color:#f92672">=</span> [<span style="color:#ae81ff">71189786319102608575263218254922479901008514616376166401353025325668690465852130559783959409002115897148828732231478529655075366072137059589917001875303598680931962384468363842379833044123189276199264340224973914079447846845897807085694711541719515881377391200011269924562049643835131619086349617062034608799</span>, <span style="color:#ae81ff">92503831027754984321994282254005318198418454777812045042619263533423066848097985191386666241913483806726751133691867010696758828674382946375162423033994046273252417389169779506788545647848951018539441971140081528915876529645525880324658212147388232683347292192795975558548712504744297104487514691170935149949</span>, <span style="color:#ae81ff">100993952830138414466948640139083231443558390127247779484027818354177479632421980458019929149817002579508423291678953554090956334137167905685261724759487245658147039684536216616744746196651390112540237050493468689520465897258378216693418610879245129435268327315158194612110422630337395790254881602124839071919</span>, <span style="color:#ae81ff">59138293747457431012165762343997972673625934330232909935732464725128776212729547237438509546925172847581735769773563840639187946741161318153031173864953372796950422229629824699580131369991913883136821374596762214064774480548532035315344368010507644630655604478651898097886873485265848973185431559958627423847</span>, <span style="color:#ae81ff">66827868958054485359731420968595906328820823695638132426084478524423658597714990545142120448668257273436546456116147999073797943388584861050133103137697812149742551913704341990467090049650721713913812069904136198912314243175309387952328961054617877059134151915723594900209641163321839502908705301293546584147</span>, <span style="color:#ae81ff">120940513339890268554625391482989102665030083707530690312336379356969219966820079510946652021721814016286307318930536030308296265425674637215009052078834615196224917417698019787514831973471113022781129000531459800329018133248426080717653298100515701379374786486337920294380753805825328119757649844054966712377</span>, <span style="color:#ae81ff">72186594495190221129349814154999705524005203343018940547856004977368023856950836974465616291478257156860734574686154136925776069045232149725101769594505766718123155028300703627531567850035682448632166309129911061492630709698934310123778699316856399909549674138453085885820110724923723830686564968967391721281</span>, <span style="color:#ae81ff">69105037583161467265649176715175579387938714721653281201847973223975467813529036844308693237404592381480367515044829190066606146105800243199497182114398931410844901178842049915914390117503986044951461783780327749665912369177733246873697481544777183820939967036346862056795919812693669387731294595126647751951</span>, <span style="color:#ae81ff">76194219445824867986050004226602973283400885106636660263597964027139613163638212828932901192009131346530898961165310615466747046710743013409318156266326090650584190382130795884514074647833949281109675170830565650006906028402714868781834693473191228256626654011772428115359653448111208831188721505467497494581</span>]
</span></span><span style="display:flex;"><span>c_list<span style="color:#f92672">=</span> [<span style="color:#ae81ff">62580922178008480377006528793506649089253164524883696044759651305970802215270721223149734532870729533611357047595181907404222690394917605617029675103788705320032707977225447998111744887898039756375876685711148857676502670812333076878964148863713993853526715855758799502735753454247721711366497722251078739585</span>, <span style="color:#ae81ff">46186240819076690248235492196228128599822002268014359444368898414937734806009161030424589993541799877081745454934484263188270879142125136786221625234555265815513136730416539407710862948861531339065039071959576035606192732936477944770308784472646015244527805057990939765708793705044236665364664490419874206900</span>, <span style="color:#ae81ff">85756449024868529058704599481168414715291172247059370174556127800630896693021701121075838517372920466708826412897794900729896389468152213884232173410022054605870785910461728567377769960823103334874807744107855490558726013068890632637193410610478514663078901021307258078678427928255699031215654693270240640198</span>, <span style="color:#ae81ff">14388767329946097216670270960679686032536707277732968784379505904021622612991917314721678940833050736745004078559116326396233622519356703639737886289595860359630019239654690312132039876082685046329079266785042428947147658321799501605837784127004536996628492065409017175037161261039765340032473048737319069656</span>, <span style="color:#ae81ff">1143736792108232890306863524988028098730927600066491485326214420279375304665896453544100447027809433141790331191324806205845009336228331138326163746853197990596700523328423791764843694671580875538251166864957646807184041817863314204516355683663859246677105132100377322669627893863885482167305919925159944839</span>, <span style="color:#ae81ff">2978800921927631161807562509445310353414810029862911925227583943849942080514132963605492727604495513988707849133045851539412276254555228149742924149242124724864770049898278052042163392380895275970574317984638058768854065506927848951716677514095183559625442889028813635385408810698294574175092159389388091981</span>, <span style="color:#ae81ff">16200944263352278316040095503540249310705602580329203494665614035841657418101517016718103326928336623132935178377208651067093136976383774189554806135146237406248538919915426183225265103769259990252162411307338473817114996409705345401251435268136647166395894099897737607312110866874944619080871831772376466376</span>, <span style="color:#ae81ff">31551601425575677138046998360378916515711528548963089502535903329268089950335615563205720969393649713416910860593823506545030969355111753902391336139384464585775439245735448030993755229554555004154084649002801255396359097917380427525820249562148313977941413268787799534165652742114031759562268691233834820996</span>, <span style="color:#ae81ff">25288164985739570635307839193110091356864302148147148153228604718807817833935053919412276187989509493755136905193728864674684139319708358686431424793278248263545370628718355096523088238513079652226028236137381367215156975121794485995030822902933639803569133458328681148758392333073624280222354763268512333515</span>]
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">9</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">CRT</span>(aList, mList):
</span></span><span style="display:flex;"><span>    M <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> mList:
</span></span><span style="display:flex;"><span>        M <span style="color:#f92672">=</span> M <span style="color:#f92672">*</span> i   
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(mList)):
</span></span><span style="display:flex;"><span>        Mi <span style="color:#f92672">=</span> M <span style="color:#f92672">//</span> mList[i]   
</span></span><span style="display:flex;"><span>        Mi_inverse <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(Mi, mList[i]) 
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">+=</span> aList[i] <span style="color:#f92672">*</span> Mi <span style="color:#f92672">*</span> Mi_inverse 
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> x <span style="color:#f92672">%</span> M
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> x
</span></span><span style="display:flex;"><span>m_e <span style="color:#f92672">=</span> CRT(c_list, n_list) 
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>iroot(m_e, e)[<span style="color:#ae81ff">0</span>] 
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> long_to_bytes(m)
</span></span><span style="display:flex;"><span>print(flag)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># b&#39;flag{H0w_Fun_13_HAstads_broadca5t_AtTack!}\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16&#39;</span>
</span></span></code></pre></div><p>运行脚本就能拿到本道题目的flag了！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{H0w_Fun_13_HAstads_broadca5t_AtTack!}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>2021_美团_MT CTF_Writeup</title>
            <link>/posts/2021_%E7%BE%8E%E5%9B%A2_mt-ctf_writeup/</link>
            <pubDate>Sat, 29 Jan 2022 10:56:47 +0800</pubDate>
            
            <guid>/posts/2021_%E7%BE%8E%E5%9B%A2_mt-ctf_writeup/</guid>
            <description>2021 美团网络安全 MT-CTF writup 本菜鸡比较菜，有些安详，仅仅只搞出了两道题目。两道简单的密码学题目：
Symbol 非常奇怪的题目：
题目是一堆奇奇怪怪的符号，对字符进行搜索找到其内涵含义后发现找到了LaTex关键字
于是想起了写个人简历和公式会经常用到的LaTeX语言，查找一下LaTeX的字符表得到：
$$ \flat\lambda\alpha\gamma\{\forall\uplus\nu\_\Lambda\alpha\Tau\epsilon\Xi\_ M \approx\triangleleft\hbar\} $$ 根据代码的首字母可以得到：
flag{fun_LaTeX_Math} 根据题目要求用md5进行加密，然后套一个flag得到
flag{639220f4b70bb4a3ac80d95efcfb2353} hamburgerRSA RSA的题目看下题目源码：
from Crypto.Util.number import * flag = open(&amp;#39;flag.txt&amp;#39;).read() nbit = 64 while True: p, q = getPrime(nbit), getPrime(nbit) PP = int(str(p) + str(p) + str(q) + str(q)) QQ = int(str(q) + str(q) + str(p) + str(p)) if isPrime(PP) and isPrime(QQ): break n = PP * QQ m = bytes_to_long(flag.encode()) c = pow(m, 65537, n) print(&amp;#39;n =&amp;#39;, n) 发现生成算法有些奇怪，感觉p*q和PP*QQ应该有些关系，使用python测试着生成一下，观察一下规律：（不想具体推到关系了）</description>
            <content type="html"><![CDATA[<h1 id="2021-美团网络安全-mt-ctf-writup">2021 美团网络安全 MT-CTF writup</h1>
<p>本菜鸡比较菜，有些安详，仅仅只搞出了两道题目。两道简单的密码学题目：</p>
<h2 id="symbol">Symbol</h2>
<p>非常奇怪的题目：</p>
<p><img src="/images/2021_%E7%BE%8E%E5%9B%A2_MT-CTF_Writeup/Symbols.png" alt="Symbols"></p>
<p>题目是一堆奇奇怪怪的符号，对字符进行搜索找到其内涵含义后发现找到了<code>LaTex</code>关键字</p>
<p>于是想起了写个人简历和公式会经常用到的LaTeX语言，查找一下LaTeX的字符表得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-latex" data-lang="latex"><span style="display:flex;"><span><span style="color:#e6db74">$$</span>
</span></span><span style="display:flex;"><span>  \flat\lambda\alpha\gamma\{\forall\uplus\nu\_\Lambda\alpha\Tau\epsilon\Xi\_ M \approx\triangleleft\hbar\}
</span></span><span style="display:flex;"><span><span style="color:#e6db74">$$</span>
</span></span></code></pre></div><p>根据代码的首字母可以得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{fun_LaTeX_Math}
</span></span></code></pre></div><p>根据题目要求用md5进行加密，然后套一个flag得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{639220f4b70bb4a3ac80d95efcfb2353}
</span></span></code></pre></div><h2 id="hamburgerrsa">hamburgerRSA</h2>
<p>RSA的题目看下题目源码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#39;flag.txt&#39;</span>)<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>nbit <span style="color:#f92672">=</span> <span style="color:#ae81ff">64</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>    p, q <span style="color:#f92672">=</span> getPrime(nbit), getPrime(nbit)
</span></span><span style="display:flex;"><span>    PP <span style="color:#f92672">=</span> int(str(p) <span style="color:#f92672">+</span> str(p) <span style="color:#f92672">+</span> str(q) <span style="color:#f92672">+</span> str(q))
</span></span><span style="display:flex;"><span>    QQ <span style="color:#f92672">=</span> int(str(q) <span style="color:#f92672">+</span> str(q) <span style="color:#f92672">+</span> str(p) <span style="color:#f92672">+</span> str(p))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> isPrime(PP) <span style="color:#f92672">and</span> isPrime(QQ):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> PP <span style="color:#f92672">*</span> QQ
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> bytes_to_long(flag<span style="color:#f92672">.</span>encode())
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> pow(m, <span style="color:#ae81ff">65537</span>, n)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;n =&#39;</span>, n)
</span></span></code></pre></div><p>发现生成算法有些奇怪，感觉<code>p*q</code>和<code>PP*QQ</code>应该有些关系，使用python测试着生成一下，观察一下规律：（不想具体推到关系了）</p>
<p>写一个测试脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nbit <span style="color:#f92672">=</span> <span style="color:#ae81ff">64</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>    p, q <span style="color:#f92672">=</span> getPrime(nbit), getPrime(nbit)
</span></span><span style="display:flex;"><span>    PP <span style="color:#f92672">=</span> int(str(p) <span style="color:#f92672">+</span> str(p) <span style="color:#f92672">+</span> str(q) <span style="color:#f92672">+</span> str(q))
</span></span><span style="display:flex;"><span>    QQ <span style="color:#f92672">=</span> int(str(q) <span style="color:#f92672">+</span> str(q) <span style="color:#f92672">+</span> str(p) <span style="color:#f92672">+</span> str(p))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> isPrime(PP) <span style="color:#f92672">and</span> isPrime(QQ):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> PP <span style="color:#f92672">*</span> QQ
</span></span><span style="display:flex;"><span>N <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;n:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(n))
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;N:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(N))
</span></span></code></pre></div><p>运行下脚本可以发现：</p>
<p><img src="/images/2021_%E7%BE%8E%E5%9B%A2_MT-CTF_Writeup/image-20211217191213473.png" alt="image-20211217191213473"></p>
<p>n的前19位与N的前19位一致，n的后19位与N的后19位一致，可以根据这个特点来进行简单爆破，使用一个sage脚本进行简单爆破：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">177269125756508652546242326065138402971542751112423326033880862868822164234452280738170245589798474033047460920552550018968571267978283756742722231922451193</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n1 <span style="color:#f92672">=</span> str(n)[:<span style="color:#ae81ff">19</span>]
</span></span><span style="display:flex;"><span>n2 <span style="color:#f92672">=</span> str(n)[<span style="color:#f92672">-</span><span style="color:#ae81ff">19</span>:]
</span></span><span style="display:flex;"><span>print(n1)
</span></span><span style="display:flex;"><span>print(n2)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span>  N <span style="color:#f92672">=</span> int(n1<span style="color:#f92672">+</span>str(i)<span style="color:#f92672">+</span>n2)
</span></span><span style="display:flex;"><span>  result <span style="color:#f92672">=</span> factor(N)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span>(len(result) <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>):
</span></span><span style="display:flex;"><span>    print(result)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">break</span>
</span></span></code></pre></div><p>运行得到p和q的数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>9788542938580474429 * 18109858317913867117
</span></span></code></pre></div><p>然后根据得到的p和q的数据写个脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span>  gmpy2 <span style="color:#f92672">import</span> invert
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">177269125756508652546242326065138402971542751112423326033880862868822164234452280738170245589798474033047460920552550018968571267978283756742722231922451193</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">47718022601324543399078395957095083753201631332808949406927091589044837556469300807728484035581447960954603540348152501053100067139486887367207461593404096</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p, q <span style="color:#f92672">=</span> <span style="color:#ae81ff">9788542938580474429</span>, <span style="color:#ae81ff">18109858317913867117</span>
</span></span><span style="display:flex;"><span>PP <span style="color:#f92672">=</span> int(str(p) <span style="color:#f92672">+</span> str(p) <span style="color:#f92672">+</span> str(q) <span style="color:#f92672">+</span> str(q))
</span></span><span style="display:flex;"><span>QQ <span style="color:#f92672">=</span> int(str(q) <span style="color:#f92672">+</span> str(q) <span style="color:#f92672">+</span> str(p) <span style="color:#f92672">+</span> str(p))
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (PP<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(QQ<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> invert(<span style="color:#ae81ff">65537</span>,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c, d, n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> long_to_bytes(m)
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>运行脚本就可以得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>b&#39;flag{f8d8bfa5-6c7f-14cb-908b-abc1e96946c6}&#39;
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>2021 羊城杯 Crypto部分_Writeup</title>
            <link>/posts/2021-%E7%BE%8A%E5%9F%8E%E6%9D%AF-crypto%E9%83%A8%E5%88%86_writeup/</link>
            <pubDate>Sat, 29 Jan 2022 10:56:25 +0800</pubDate>
            
            <guid>/posts/2021-%E7%BE%8A%E5%9F%8E%E6%9D%AF-crypto%E9%83%A8%E5%88%86_writeup/</guid>
            <description>2021 羊城杯 Crypto部分 Writeup 菜鸡Crypto手，就解出来了两道题，都是相对比较简单的密码学题目，供各位大佬参考
BigRSA 题目源码
from Crypto.Util.number import * from flag import * n1 = 103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061 n2 = 115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073 e = 65537 m = bytes_to_long(flag) c = pow(m, e, n1) c = pow(c, e, n2) print(&amp;#34;c = %d&amp;#34; % c) # output # c = 60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264 手速题目，可以通过n1和n2直接的关系。
n1和n2经过测试是存在有一个不等于1的最大公约数，这个最大公约数显然就是共同的p，可以根据这一线索进行。然后就是两层的加密数值，求出两个q，然后再求出两个phi和d，然后这道题目就像剥洋葱一样简单了
EXP：
import gmpy2 import libnum from Crypto.Util.number import * n1 = 103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061 n2 = 115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073 e = 65537 # m = bytes_to_long(flag) # c = pow(m, e, n1) # c = pow(c, e, n2) c = 60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264 p =int(gmpy2.</description>
            <content type="html"><![CDATA[<h1 id="2021-羊城杯-crypto部分-writeup">2021 羊城杯 Crypto部分 Writeup</h1>
<p>菜鸡Crypto手，就解出来了两道题，都是相对比较简单的密码学题目，供各位大佬参考</p>
<h2 id="bigrsa">BigRSA</h2>
<p>题目源码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> flag <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span>
</span></span><span style="display:flex;"><span>n2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> bytes_to_long(flag)
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> pow(m, e, n1)
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> pow(c, e, n2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;c = </span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> c)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># output</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># c = 60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span>
</span></span></code></pre></div><p>手速题目，可以通过n1和n2直接的关系。</p>
<p>n1和n2经过测试是存在有一个不等于1的最大公约数，这个最大公约数显然就是共同的p，可以根据这一线索进行。然后就是两层的加密数值，求出两个q，然后再求出两个phi和d，然后这道题目就像剥洋葱一样简单了</p>
<p>EXP：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span>
</span></span><span style="display:flex;"><span>n2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># m = bytes_to_long(flag)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># c = pow(m, e, n1)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># c = pow(c, e, n2)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span>int(gmpy2<span style="color:#f92672">.</span>gcd(n1,n2))
</span></span><span style="display:flex;"><span>q1 <span style="color:#f92672">=</span> n1<span style="color:#f92672">//</span>p
</span></span><span style="display:flex;"><span>q2 <span style="color:#f92672">=</span> n2<span style="color:#f92672">//</span>p
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span> p<span style="color:#f92672">*</span>q1 <span style="color:#f92672">==</span> n1
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span> p<span style="color:#f92672">*</span>q2 <span style="color:#f92672">==</span> n2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi1 <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q1<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>phi2 <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q2<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>d1 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi1)
</span></span><span style="display:flex;"><span>d2 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c1 <span style="color:#f92672">=</span> pow(c,d2,n2)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c1,d1,n1)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> long_to_bytes(m)
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><h2 id="ringringring">RingRingRing</h2>
<p>这道题目需要使用羊城杯官方的VPN进行连接，是一个远程的动态靶机，其实也就是一个身份认证加一个简单是数学运算题目，我是采用从简单的形式入手，由简单推向复杂，找出规律就行遍历求解。
$$
a^4+b^4+c^4+d^4 = e^2
$$
题目关键点也就是这个公式，根据这个公式的特点：
$$
1^4 + 1^4 +1^4 + 1^4 = 2^2
$$</p>
<p>$$
2^4 + 2^4 + 2^4 + 2^4 = 8^2
$$</p>
<p>$$
4^4 + 4^4 + 4^4 + 4^4 = 32^2
$$</p>
<p>根据简单的数据推测出规律性的公式
$$
(2^n)^4+(2^n)^4+(2^n)^4+(2^n)^4 = (2^{2n+1})^2
$$
根据公式进行代码编写即可求解</p>
<p>EXP：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> itertools
</span></span><span style="display:flex;"><span>sh <span style="color:#f92672">=</span> remote(<span style="color:#e6db74">&#34;192.168.39.50&#34;</span>,<span style="color:#ae81ff">2378</span>)
</span></span><span style="display:flex;"><span>line <span style="color:#f92672">=</span> sh<span style="color:#f92672">.</span>recvline()<span style="color:#f92672">.</span>decode()<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>ans <span style="color:#f92672">=</span> line[<span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>:]
</span></span><span style="display:flex;"><span>s2 <span style="color:#f92672">=</span> line[line<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#34;+&#34;</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>:line<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#34;)&#34;</span>)]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> itertools<span style="color:#f92672">.</span>product(string<span style="color:#f92672">.</span>ascii_letters <span style="color:#f92672">+</span> string<span style="color:#f92672">.</span>digits, repeat<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>    s1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(i)
</span></span><span style="display:flex;"><span>    ss <span style="color:#f92672">=</span> s1 <span style="color:#f92672">+</span> s2
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (hashlib<span style="color:#f92672">.</span>md5(ss<span style="color:#f92672">.</span>encode())<span style="color:#f92672">.</span>hexdigest()[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> ans):
</span></span><span style="display:flex;"><span>        sh<span style="color:#f92672">.</span>sendline(s1)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>context<span style="color:#f92672">.</span>log_level <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;debug&#39;</span>
</span></span><span style="display:flex;"><span>sh<span style="color:#f92672">.</span>recvline()
</span></span><span style="display:flex;"><span>sh<span style="color:#f92672">.</span>recvline()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">100</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>        sh<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">2</span><span style="color:#f92672">**</span>j))
</span></span><span style="display:flex;"><span>        sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    sh<span style="color:#f92672">.</span>sendline(str(<span style="color:#ae81ff">2</span><span style="color:#f92672">**</span>(<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>j<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)))
</span></span><span style="display:flex;"><span>    sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>sh<span style="color:#f92672">.</span>interactive()
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Jarvisoj Basic_writeup</title>
            <link>/posts/jarvisoj-basic_writeup/</link>
            <pubDate>Sat, 29 Jan 2022 10:49:20 +0800</pubDate>
            
            <guid>/posts/jarvisoj-basic_writeup/</guid>
            <description>Jarvisoj-Basic writeup JarvisOJ是浙江大学系统安全实验室(USS Lab.)学生Jarvis所开发的一个CTF在线答题系统。题目形式与各大CTF比赛相同。目的主要是为自己整理历次比赛题目供以后查阅以及测试的作用，同时开放给广大爱好信息安全的朋友，可以在这里一起学习，一起进步。
浙江大学的CTF刷题平台，使用起来还是比较不错的。界面简洁易用。
Basic模块的题目都是非常简单的练手题，刷一刷，玩一玩。顺便学习一些奇淫技巧，:smirk:
0x00 base64? GUYDIMZVGQ2DMN3CGRQTONJXGM3TINLGG42DGMZXGM3TINLGGY4DGNBXGYZTGNLGGY3DGNBWMU3WI=== 看样子像是Base32编码，直接解编码得到：
504354467b4a7573745f743373745f683476335f66346e7d hex编码解编码得到：
PCTF{Just_t3st_h4v3_f4n} 0x01 关于USS Lab USS的英文全称是什么，请全部小写并使用下划线连接_，并在外面加上PCTF{}之后提交 USS Lab是Jarvis OJ的主要承办单位，在刷题平台就能找到相关的信息
flag已经显而易见了，非常简单
PCTF{UBIQUITOUS_SYSTEM_SECURITY} 0x02 veryeasy 使用基本命令获取flag 直接使用cat命令查看附件内容，或者strings命令查看附件内容
就能得到flag：
PCTF{strings_i5_3asy_isnt_i7} 0x03 段子 程序猿圈子里有个非常著名的段子： 手持两把锟斤拷，口中疾呼烫烫烫。 请提交其中&amp;#34;锟斤拷&amp;#34;的十六进制编码。(大写) FLAG: PCTF{你的答案} 锟斤拷，是一串经常在搜索引擎页面和其他网站上看到的乱码字符。乱码源于GBK字符集和Unicode字符集之间的转换问题。
可以直接在python解释器上进行调试得到：
&amp;#34;锟斤拷&amp;#34;.encode(&amp;#39;gbk&amp;#39;).hex().upper() # &amp;#39;EFBFBDEFBFBD&amp;#39; 故flag：
PCTF{EFBFBDEFBFBD} 0x04 手贱 某天A君的网站被日，管理员密码被改，死活登不上，去数据库一看，啥，这密码md5不是和原来一样吗？为啥登不上咧？ d78b6f302l25cdc811adfe8d4e7c9fd34 请提交PCTF{原来的管理员密码} 挺无聊的题目的，题目给出的md5的长度是33位，需要删去一位来进行爆破
使用python脚本迭代出可能的md5数值：
# coding:utf8 myMd5 = &amp;#34;&amp;#34; for i in range(len(myMd5)): for j in range(len(myMd5)): if i == j: pass else: print myMd5[j], print &amp;#34;&amp;#34; 然后依次在cmd5网站进行解密，直到解出flag</description>
            <content type="html"><![CDATA[<h1 id="jarvisoj-basic-writeup">Jarvisoj-Basic writeup</h1>
<blockquote>
<p>JarvisOJ是浙江大学系统安全实验室(USS  Lab.)学生Jarvis所开发的一个CTF在线答题系统。题目形式与各大CTF比赛相同。目的主要是为自己整理历次比赛题目供以后查阅以及测试的作用，同时开放给广大爱好信息安全的朋友，可以在这里一起学习，一起进步。</p>
</blockquote>
<p><img src="/images/Jarvisoj-Basic_writeup/image-20211018145837413.png" alt="image-20211018145837413"></p>
<p>浙江大学的CTF刷题平台，使用起来还是比较不错的。界面简洁易用。</p>
<p>Basic模块的题目都是非常简单的练手题，刷一刷，玩一玩。顺便学习一些奇淫技巧，:smirk:</p>
<h2 id="0x00-base64">0x00 base64?</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>GUYDIMZVGQ2DMN3CGRQTONJXGM3TINLGG42DGMZXGM3TINLGGY4DGNBXGYZTGNLGGY3DGNBWMU3WI===
</span></span></code></pre></div><p>看样子像是Base32编码，直接解编码得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>504354467b4a7573745f743373745f683476335f66346e7d
</span></span></code></pre></div><p>hex编码解编码得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PCTF{Just_t3st_h4v3_f4n}
</span></span></code></pre></div><h2 id="0x01-关于uss-lab">0x01 关于USS Lab</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>USS的英文全称是什么，请全部小写并使用下划线连接_，并在外面加上PCTF{}之后提交
</span></span></code></pre></div><p>USS Lab是Jarvis OJ的主要承办单位，在刷题平台就能找到相关的信息</p>
<p><img src="/images/Jarvisoj-Basic_writeup/image-20211018160449136.png" alt="image-20211018160449136"></p>
<p>flag已经显而易见了，非常简单</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PCTF{UBIQUITOUS_SYSTEM_SECURITY}
</span></span></code></pre></div><h2 id="0x02-veryeasy">0x02 veryeasy</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>使用基本命令获取flag
</span></span></code></pre></div><p>直接使用cat命令查看附件内容，或者strings命令查看附件内容</p>
<p>就能得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PCTF{strings_i5_3asy_isnt_i7}
</span></span></code></pre></div><h2 id="0x03-段子">0x03 段子</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>程序猿圈子里有个非常著名的段子：
</span></span><span style="display:flex;"><span>手持两把锟斤拷，口中疾呼烫烫烫。
</span></span><span style="display:flex;"><span>请提交其中&#34;锟斤拷&#34;的十六进制编码。(大写)
</span></span><span style="display:flex;"><span>FLAG: PCTF{你的答案}
</span></span></code></pre></div><p>锟斤拷，是一串经常在搜索引擎页面和其他网站上看到的乱码字符。乱码源于GBK字符集和Unicode字符集之间的转换问题。</p>
<p>可以直接在python解释器上进行调试得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;锟斤拷&#34;</span><span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;gbk&#39;</span>)<span style="color:#f92672">.</span>hex()<span style="color:#f92672">.</span>upper()
</span></span><span style="display:flex;"><span><span style="color:#75715e"># &#39;EFBFBDEFBFBD&#39;</span>
</span></span></code></pre></div><p>故flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PCTF{EFBFBDEFBFBD}
</span></span></code></pre></div><h2 id="0x04-手贱">0x04 手贱</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>某天A君的网站被日，管理员密码被改，死活登不上，去数据库一看，啥，这密码md5不是和原来一样吗？为啥登不上咧？
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>d78b6f302l25cdc811adfe8d4e7c9fd34
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>请提交PCTF{原来的管理员密码}
</span></span></code></pre></div><p>挺无聊的题目的，题目给出的md5的长度是33位，需要删去一位来进行爆破</p>
<p>使用python脚本迭代出可能的md5数值：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># coding:utf8</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>myMd5 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(myMd5)):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(myMd5)):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">==</span> j:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">pass</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            print myMd5[j],
</span></span><span style="display:flex;"><span>    print <span style="color:#e6db74">&#34;&#34;</span>
</span></span></code></pre></div><p>然后依次在cmd5网站进行解密，直到解出flag</p>
<p>当然也可以使用python结合批量工具进行MD5求解，这就需要使用到彩虹表的工具进行求解。</p>
<p>这里就不深入说明这个工具的使用，批量脚本确实很快，但是编写和生成彩虹表比较麻烦。</p>
<p>经测试，flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PCTF{hack}
</span></span></code></pre></div><h2 id="0x05-美丽的实验室logo">0x05 美丽的实验室logo</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>出题人丢下个logo就走了，大家自己看着办吧
</span></span></code></pre></div><p>附件是个好康的图片：</p>
<p><img src="/images/Jarvisoj-Basic_writeup/logo.jpg" alt="logo"></p>
<p>使用<code>Stegsolve.jar</code>工具，使用Analyse的Frame Browsers直接看</p>
<p><img src="/images/Jarvisoj-Basic_writeup/image-20211018184321692.png" alt="image-20211018184321692"></p>
<p>直接就是flag了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PCTF{You_are_R3ally_Car3ful}
</span></span></code></pre></div><h2 id="0x06-veryeasyrsa">0x06 veryeasyRSA</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>已知RSA公钥生成参数：
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e = 65537
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>求d = 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>请提交PCTF{d}
</span></span></code></pre></div><p>非常简单的RSA题目，一个脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">3487583947589437589237958723892346254777</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">8767867843568934765983476584376578389</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e, phi)
</span></span><span style="display:flex;"><span>print(d)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 19178568796155560423675975774142829153827883709027717723363077606260717434369</span>
</span></span></code></pre></div><p>根据题目要求稍加处理就是flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PCTF{19178568796155560423675975774142829153827883709027717723363077606260717434369}
</span></span></code></pre></div><h2 id="0x07-神秘的文件">0x07 神秘的文件</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>出题人太懒<span style="color:#960050;background-color:#1e0010">，</span>还是就丢了个文件就走了<span style="color:#960050;background-color:#1e0010">，</span>你能发现里面的秘密吗<span style="color:#960050;background-color:#1e0010">？</span>
</span></span></code></pre></div><p>可能是文件隐写，查看一下文件格式</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>binwalk haha
</span></span></code></pre></div><p>发现是一个磁盘文件，装载一下磁盘</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>mount haha mnt
</span></span></code></pre></div><p>然后进入到磁盘，发现磁盘里面有很多文件，而且每个文件里面都是单个字符</p>
<p>可以使用cat命令把所有文件的字符拼接</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cat *
</span></span></code></pre></div><p>得到输出结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Haha ext2 file system is easy, and I know you can easily decompress of it and find the content in it.But the content is spilted in pieces can you make the pieces together. Now this is the flag PCTF{P13c3_7oghter_i7}. The rest is up to you. Cheer up, boy.cat: lost+found: Permission denied
</span></span></code></pre></div><p>可以清晰地看到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PCTF{P13c3_7oghter_i7}
</span></span></code></pre></div><p>思路和考察的角度还是比较简单，虽然只是记录下简单的题目</p>
<h2 id="0x08-公倍数">0x08 公倍数</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>请计算1000000000以内3或5的倍数之和。
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>如：10以内这样的数有3,5,6,9，和是23
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>请提交PCTF{你的答案}
</span></span></code></pre></div><p>算法题目，非常简单就是有些吃内存</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> ll;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    ll a<span style="color:#f92672">=</span><span style="color:#ae81ff">1000000000</span>;
</span></span><span style="display:flex;"><span>    ll sum<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(ll i<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>;i<span style="color:#f92672">&lt;</span>a;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(i<span style="color:#f92672">%</span><span style="color:#ae81ff">3</span><span style="color:#f92672">==</span><span style="color:#ae81ff">0</span><span style="color:#f92672">||</span>i<span style="color:#f92672">%</span><span style="color:#ae81ff">5</span><span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            sum<span style="color:#f92672">+=</span>i;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    cout<span style="color:#f92672">&lt;&lt;</span>sum<span style="color:#f92672">&lt;&lt;</span>endl;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>运行程序，就可以得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>233333333166666668
</span></span></code></pre></div><p>故本题的flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{233333333166666668}
</span></span></code></pre></div><h2 id="0x09-easy-crackme">0x09 Easy Crackme</h2>
<p>应该是简单的逆向的题目，走下逆向的流程，使用DIE进行查看：</p>
<p><img src="/images/Jarvisoj-Basic_writeup/image-20211108143211427.png" alt="image-20211108143211427"></p>
<p>64位ELF，先进行静态分析查看：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> v3; <span style="color:#75715e">// cl
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v4; <span style="color:#75715e">// rsi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// edx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// ecx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// er8
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// er9
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v9; <span style="color:#75715e">// rdx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v10; <span style="color:#75715e">// ecx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v11; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">bool</span> v12; <span style="color:#75715e">// zf
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v13; <span style="color:#75715e">// ecx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v14; <span style="color:#75715e">// rdx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v15; <span style="color:#75715e">// rdi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v17; <span style="color:#75715e">// [rsp+0h] [rbp-38h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v18; <span style="color:#75715e">// [rsp+10h] [rbp-28h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _BYTE v19[<span style="color:#ae81ff">39</span>]; <span style="color:#75715e">// [rsp+11h] [rbp-27h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#e6db74">&#34;Input your password:&#34;</span>, (_DWORD)argv, (_DWORD)envp, v3);
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v18;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">_isoc99_scanf</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#e6db74">&#34;%s&#34;</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#f92672">&amp;</span>v18, v5, v6, v7, v8, <span style="color:#ae81ff">171</span>);
</span></span><span style="display:flex;"><span>  v9 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v18;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v10 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)v9;
</span></span><span style="display:flex;"><span>    v9 <span style="color:#f92672">+=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>    v11 <span style="color:#f92672">=</span> <span style="color:#f92672">~</span>v10 <span style="color:#f92672">&amp;</span> (v10 <span style="color:#f92672">-</span> <span style="color:#ae81ff">16843009</span>) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x80808080</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ( <span style="color:#f92672">!</span>v11 );
</span></span><span style="display:flex;"><span>  v12 <span style="color:#f92672">=</span> (<span style="color:#f92672">~</span>v10 <span style="color:#f92672">&amp;</span> (v10 <span style="color:#f92672">-</span> <span style="color:#ae81ff">16843009</span>) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x8080</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( (<span style="color:#f92672">~</span>v10 <span style="color:#f92672">&amp;</span> (v10 <span style="color:#f92672">-</span> <span style="color:#ae81ff">16843009</span>) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x8080</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">LOBYTE</span>(v11) <span style="color:#f92672">=</span> (<span style="color:#f92672">~</span>v10 <span style="color:#f92672">&amp;</span> (v10 <span style="color:#f92672">-</span> <span style="color:#ae81ff">16843009</span>) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x80808080</span>) <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">16</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">LOBYTE</span>(v13) <span style="color:#f92672">=</span> (_BYTE)v9 <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v12 )
</span></span><span style="display:flex;"><span>    v9 <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>  v14 <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>v9[<span style="color:#f92672">-</span><span style="color:#a6e22e">__CFADD__</span>((_BYTE)v11, (_BYTE)v11) <span style="color:#f92672">-</span> <span style="color:#ae81ff">3</span>] <span style="color:#f92672">-</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v18;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v14 <span style="color:#f92672">==</span> <span style="color:#ae81ff">26</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v15 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>    v4 <span style="color:#f92672">=</span> v19;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( (v18 <span style="color:#f92672">^</span> <span style="color:#ae81ff">0xAB</span>) <span style="color:#f92672">==</span> list1 )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">LODWORD</span>(v14) <span style="color:#f92672">=</span> ((<span style="color:#66d9ef">int</span>)v15 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>        v13 <span style="color:#f92672">=</span> ((<span style="color:#66d9ef">int</span>)v15 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( (v19[v15] <span style="color:#f92672">^</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)<span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>v17 <span style="color:#f92672">+</span> v13)) <span style="color:#f92672">!=</span> byte_6B41D1[v15] )
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">++</span>v15 <span style="color:#f92672">==</span> <span style="color:#ae81ff">25</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">printf</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#e6db74">&#34;Congratulations!&#34;</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)v19, v14, v13);
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#e6db74">&#34;Password Wrong!! Please try again.&#34;</span>, (_DWORD)v4, v14, v13);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>进行代码审计可以轻松手撸出解题程序：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> n[] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">251</span>, <span style="color:#ae81ff">158</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">78</span>, <span style="color:#ae81ff">157</span>, <span style="color:#ae81ff">152</span>, <span style="color:#ae81ff">171</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">70</span>, <span style="color:#ae81ff">138</span>, <span style="color:#ae81ff">244</span>,
</span></span><span style="display:flex;"><span>     <span style="color:#ae81ff">180</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">67</span>, <span style="color:#ae81ff">220</span>, <span style="color:#ae81ff">217</span>, <span style="color:#ae81ff">164</span>, <span style="color:#ae81ff">108</span>, <span style="color:#ae81ff">49</span>, <span style="color:#ae81ff">116</span>, <span style="color:#ae81ff">156</span>, <span style="color:#ae81ff">210</span>, <span style="color:#ae81ff">160</span>};
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> key[] <span style="color:#f92672">=</span> { <span style="color:#ae81ff">0xab</span>, <span style="color:#ae81ff">0xdd</span>, <span style="color:#ae81ff">0x33</span>, <span style="color:#ae81ff">0x54</span>, <span style="color:#ae81ff">0x35</span>, <span style="color:#ae81ff">0xef</span> };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span>(size_t i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">26</span>; i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>          putchar(n[i] <span style="color:#f92672">^</span> key[i <span style="color:#f92672">%</span> <span style="color:#ae81ff">6</span>]);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行程序可以得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span>PCTF{r3v3Rse_i5_v3ry_eAsy}
</span></span></code></pre></div><h2 id="0x0a-secret">0x0A Secret</h2>
<p>web题目，可是这个平台的web题目炸了，不能继续开心地刷题了</p>
<p>进入网站F12 然后使用F5查看请求头来拿到flag</p>
<p>flag为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PCTF{Welcome_to_phrackCTF_2016}
</span></span></code></pre></div><h2 id="0x0b-爱吃培根的出题人">0x0B 爱吃培根的出题人</h2>
<p>看题目应该是培根密码，看下题目</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>听说你也喜欢吃培根？那我们一起来欣赏一段培根的介绍吧：
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>bacoN is one of aMerICa&#39;S sWEethEartS. it&#39;s A dARlinG, SuCCulEnt fOoD tHAt PaIRs FlawLE
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>什么，不知道要干什么？上面这段巨丑无比的文字，为什么会有大小写呢？你能发现其中的玄机吗？
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>提交格式：PCTF{你发现的玄机}
</span></span></code></pre></div><p>看文段应该就是培根密码，直接进行解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BACONISNOTFOOD
</span></span></code></pre></div><h2 id="0x0c-easy-rsa">0x0C Easy RSA</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>还记得veryeasy RSA吗？是不是不难？那继续来看看这题吧，这题也不难。
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>已知一段RSA加密的信息为：0xdc2eeeb2782c且已知加密所用的公钥：
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>(N=322831561921859 e = 23)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>请解密出明文，提交时请将数字转化为ascii码提交
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>比如你解出的明文是0x6162，那么请提交字符串ab
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>提交格式:PCTF{明文字符串}
</span></span></code></pre></div><p>N的数值非常小，直接对N进行yafu大数分解可以得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>p = 23781539
</span></span><span style="display:flex;"><span>q = 13574881
</span></span></code></pre></div><p>知道p和q，直接一个脚本求解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> long_to_bytes
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">23781539</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">13574881</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">23</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">322831561921859</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xdc2eeeb2782c</span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e, phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> long_to_bytes(m)
</span></span><span style="display:flex;"><span>print(flag)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># b&#39;3a5Y&#39;</span>
</span></span></code></pre></div><p>根据题目要求，flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PCTF{3a5Y}
</span></span></code></pre></div><h2 id="0x0d-ropgadget">0x0D ROPGadget</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>都说学好汇编是学习PWN的基础，以下有一段ROPGadget的汇编指令序列，请提交其十六进制机器码(大写，不要有空格)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>XCHG EAX,ESP
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>RET
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>MOV ECX,[EAX]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>MOV [EDX],ECX
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>POP EBX
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>RET
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>提交格式：PCTF{你的答案}
</span></span></code></pre></div><p>非常简单，使用python的pwntools模块就可以进行求解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>print asm(<span style="color:#e6db74">&#39;XCHG EAX,ESP</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">RET</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">MOV ECX,[EAX]</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">MOV [EDX],ECX</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">POP EBX</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">RET&#39;</span><span style="color:#f92672">.</span>lower())<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;hex&#39;</span>)<span style="color:#f92672">.</span>upper()
</span></span></code></pre></div><p>运行得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>94C38B08890A5BC3
</span></span></code></pre></div><h2 id="0x0e-取证">0x0E 取证</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>有一款取证神器如下图所示，可以从内存dump里分析出TureCrypt的密钥，你能找出这款软件的名字吗？名称请全部小写。
</span></span></code></pre></div><p><img src="/images/Jarvisoj-Basic_writeup/28601465358215259.JPG" alt="img"></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>提交格式：PCTF{软件名字}
</span></span></code></pre></div><p>常识性题目，可以直接作答</p>
<p>flag为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PCTF{volatility}
</span></span></code></pre></div><h2 id="0x0f-熟悉的声音">0x0F 熟悉的声音</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>两种不同的元素，如果是声音的话，听起来是不是很熟悉呢，据说前不久神盾局某位特工领便当了大家都很惋惜哦
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>XYYY YXXX XYXX XXY XYY X XYY YX YYXX
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>请提交PCTF{你的答案}
</span></span></code></pre></div><p>看样子像是，莫尔斯电码，转换成<code>.-</code>，使用Morse电码求解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>.--- -... .-.. ..- .-- . .-- -. --..
</span></span></code></pre></div><p>使用Morse求解得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>JBLUWEWNZ
</span></span></code></pre></div><p>然后发现并不是有意义的字符串，这时候可能需要进行凯撒密码的处理就可以得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PHRACKCTF
</span></span></code></pre></div><h2 id="0x10-babys-crack">0x10 Baby’s Crack</h2>
<p>应该是道逆向题目，看下题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>既然是逆向题，我废话就不多说了，自己看着办吧。
</span></span></code></pre></div><p>先使用DIE进行探测吧：</p>
<p><img src="/images/Jarvisoj-Basic_writeup/image-20211109214508584.png" alt="image-20211109214508584"></p>
<p>64位PE程序，使用x64 IDA pro的静态分析</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Buffer[<span style="color:#ae81ff">104</span>]; <span style="color:#75715e">// [rsp+20h] [rbp-80h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  FILE <span style="color:#f92672">*</span>v5; <span style="color:#75715e">// [rsp+88h] [rbp-18h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  FILE <span style="color:#f92672">*</span>Stream; <span style="color:#75715e">// [rsp+90h] [rbp-10h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v7; <span style="color:#75715e">// [rsp+9Fh] [rbp-1h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">_main</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( argc <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Usage: %s [FileName]</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#f92672">*</span>argv);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(aFilename);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  Stream <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>(argv[<span style="color:#ae81ff">1</span>], <span style="color:#e6db74">&#34;rb+&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( Stream )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>(<span style="color:#e6db74">&#34;tmp&#34;</span>, <span style="color:#e6db74">&#34;wb+&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">feof</span>(Stream) )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      v7 <span style="color:#f92672">=</span> <span style="color:#a6e22e">fgetc</span>(Stream);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( v7 <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> v7 )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( v7 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">47</span> <span style="color:#f92672">&amp;&amp;</span> v7 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">96</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          v7 <span style="color:#f92672">+=</span> <span style="color:#ae81ff">53</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> ( v7 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">46</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          v7 <span style="color:#f92672">+=</span> v7 <span style="color:#f92672">%</span> <span style="color:#ae81ff">11</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          v7 <span style="color:#f92672">-=</span> v7 <span style="color:#f92672">%</span> <span style="color:#ae81ff">61</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fputc</span>(v7, v5);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fclose</span>(v5);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fclose</span>(Stream);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sprintf</span>(Buffer, <span style="color:#e6db74">&#34;del %s&#34;</span>, argv[<span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">system</span>(Buffer);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sprintf</span>(Buffer, <span style="color:#e6db74">&#34;ren tmp %s&#34;</span>, argv[<span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">system</span>(Buffer);
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#f92672">&amp;</span>byte_40404B, argv[<span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>应该是一个非常简单的文件加密程序，看一下加密文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>jeihjiiklwjnk{ljj{kflghhj{ilk{k{kij{ihlgkfkhkwhhjgly
</span></span></code></pre></div><p>加密后的字符串都是大于100的字符，可以根据代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v7 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">47</span> <span style="color:#f92672">&amp;&amp;</span> v7 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">96</span> )
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    v7 <span style="color:#f92672">+=</span> <span style="color:#ae81ff">53</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>直接写个小程序进行破解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>string c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;jeihjiiklwjnk{ljj{kflghhj{ilk{k{kij{ihlgkfkhkwhhjgly&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">auto</span> s : c){
</span></span><span style="display:flex;"><span>    putchar(s<span style="color:#f92672">-</span><span style="color:#ae81ff">53</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>504354467B596F755F6172335F476F6F645F437261636B33527D
</span></span></code></pre></div><p>然后对这段hex字符串进行解码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PCTF{You_ar3_Good_Crack3R}
</span></span></code></pre></div><h2 id="0x11-help">0x11 Help!!</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>出题人硬盘上找到一个神秘的压缩包，里面有个word文档，可是好像加密了呢~让我们一起分析一下吧！
</span></span></code></pre></div><p>应该是一个MISC的题目，看看吧</p>
<p>下载附件得到了一个zip加密的压缩文件，可能是伪加密的zip文件，使用 010 editor来进行修改下解伪加密就可以正常解压了</p>
<p>得到一个word文件，下面就是丢到binwalk进行查看喽</p>
<p><img src="/images/Jarvisoj-Basic_writeup/image-20211110081259691.png" alt="image-20211110081259691"></p>
<p>发现存在有两个图片文件，直接修改后缀名继续解压查看图片：</p>
<p><img src="/images/Jarvisoj-Basic_writeup/image-20211110081457331.png" alt="image-20211110081457331"></p>
<p>flag就在图片里面</p>
<h2 id="0x12-shellcode">0x12 Shellcode</h2>
<p>使用github上的工具：https://github.com/bdamele/shellcodeexec</p>
<p>执行附件中的Shellcode就可以了</p>
<p><img src="/images/Jarvisoj-Basic_writeup/image-20211110162145491.png" alt="image-20211110162145491"></p>
<p>成功拿到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>PCTF{Begin_4_good_pwnn3r}
</span></span></code></pre></div><h2 id="0x13-a-piece-of-cake">0x13 A Piece Of Cake</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>nit yqmg mqrqn bxw mtjtm nq rqni fiklvbxu mqrqnl xwg dvmnzxu lqjnyxmt xatwnl, rzn nit uxnntm xmt zlzxuuk mtjtmmtg nq xl rqnl. nitmt vl wq bqwltwlzl qw yivbi exbivwtl pzxuvjk xl mqrqnl rzn nitmt vl atwtmxu xamttetwn xeqwa tsftmnl, xwg nit fzruvb, nixn mqrqnl ntwg nq gq lqet qm xuu qj nit jquuqyvwa: xbbtfn tutbnmqwvb fmqamxeevwa, fmqbtll gxnx qm fiklvbxu ftmbtfnvqwl tutbnmqwvbxuuk, qftmxnt xznqwqeqzluk nq lqet gtamtt, eqdt xmqzwg, qftmxnt fiklvbxu fxmnl qj vnltuj qm fiklvbxu fmqbtlltl, ltwlt xwg exwvfzuxnt nitvm twdvmqwetwn, xwg tsivrvn vwntuuvatwn rtixdvqm - tlftbvxuuk rtixdvqm yivbi evevbl izexwl qm qnitm xwvexul. juxa vl lzrlnvnzntfxllvldtmktxlkkqzaqnvn. buqltuk mtuxntg nq nit bqwbtfn qj x mqrqn vl nit jvtug qj lkwnitnvb rvquqak, yivbi lnzgvtl twnvnvtl yiqlt wxnzmt vl eqmt bqefxmxrut nq rtvwal nixw nq exbivwtl.
</span></span></code></pre></div><p>直接丢到词频分析</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>	the word robot can refer to both physical robots and virtual software agents, but the latter are usually referred to as bots. there is no consensus on which machines qualify as robots but there is general agreement among experts, and the public, that robots tend to do some or all of the following: accept electronic programming, process data or physical perceptions electronically, operate autonomously to some degree, move around, operate physical parts of itself or physical processes, sense and manipulate their environment, and exhibit intelligent behavior - especially behavior which mimics humans or other animals. flag is substitutepassisveryeasyyougotit. closely related to the concept of a robot is the field of synthetic biology, which studies entities whose nature is more comparable to beings than to machines.
</span></span></code></pre></div><p>直接看到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>substitutepassisveryeasyyougotit
</span></span></code></pre></div><h2 id="0x14---字符串">0x14 -.-字符串</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>请选手观察以下密文并转换成flag形式
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>..-. .-.. .- --. ..... ..--- ..--- ----- .---- ---.. -.. -.... -.... ..... ...-- ---.. --... -.. .---- -.. .- ----. ...-- .---- ---.. .---- ..--- -... --... --... --... -.... ...-- ....- .---- -----
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag形式为32位大写md5
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>题目来源：CFF2016
</span></span></code></pre></div><p>直接进行Morse解码得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>FLAG522018D665387D1DA931812B77763410
</span></span></code></pre></div><p>这应该就是flag</p>
<h2 id="0x15-德军的密码">0x15 德军的密码</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>已知将一个flag以一种加密形式为使用密钥进行加密，使用密钥WELCOMETOCFF加密后密文为 000000000000000000000000000000000000000000000000000101110000110001000000101000000001 请分析出flag。Flag为12位大写字母
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>题目来源：CFF2016
</span></span></code></pre></div><p>二战中德国使用过的密码是费娜姆密码</p>
<p>写个小程序进行异或操作就可：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> data[] {
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0b0000000</span>,<span style="color:#ae81ff">0b0000000</span>,<span style="color:#ae81ff">0b0000000</span>,<span style="color:#ae81ff">0b0000000</span>,<span style="color:#ae81ff">0b0000000</span>,<span style="color:#ae81ff">0b0000000</span>,<span style="color:#ae81ff">0b0000000</span>,<span style="color:#ae81ff">0b0010111</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0b0000110</span>,<span style="color:#ae81ff">0b0010000</span>,<span style="color:#ae81ff">0b0010100</span>,<span style="color:#ae81ff">0b0000001</span>
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> key[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;WELCOMETOCFF&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span>(size_t i;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">12</span>;i<span style="color:#f92672">++</span>){
</span></span><span style="display:flex;"><span>    putchar(key[i]<span style="color:#f92672">^</span>data[i]);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行就可以得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>WELCOMECISRG
</span></span></code></pre></div><h2 id="0x16-握手包">0x16 握手包</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>给你握手包，flag是Flag_is_here这个AP的密码，自己看着办吧。
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>提交格式：flag{WIFI密码}
</span></span></code></pre></div><p>把文件直接拖到kali里面，使用kali的工具进行破解</p>
<p>用aircrack-ng命令进行破解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>aircrack-ng  wifi.cap -w /usr/share/wordlists/rockyou.txt
</span></span></code></pre></div><p>很快就可以破解出握手包的密码</p>
<p><img src="/images/Jarvisoj-Basic_writeup/image-20211110085013887.png" alt="image-20211110085013887"></p>
<p>直接over了，flag即为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{11223344}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>CTF整体规划</title>
            <link>/posts/ctf%E6%95%B4%E4%BD%93%E8%A7%84%E5%88%92/</link>
            <pubDate>Sat, 29 Jan 2022 09:29:15 +0800</pubDate>
            
            <guid>/posts/ctf%E6%95%B4%E4%BD%93%E8%A7%84%E5%88%92/</guid>
            <description>CTF整体规划 CTF（Capture The Flag，夺旗赛）起源于 1996 年 DEFCON 全球黑客大会，是网络安全爱好者之间的竞技游戏。
CTF 竞赛涉及众多领域，内容繁杂。与此同时，安全技术的发展速度越来越快，CTF 题目的难度越来越高，初学者面对的门槛越来越高。
概述^1^ CTF 的起源 CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON。
早期 CTF 竞赛 第一个 CTF 比赛（1996 年 - 2001 年），没有明确的比赛规则，没有专业搭建的比赛平台与环境。由参数队伍各自准备比赛目标（自行准备与防守比赛目标，并要尝试攻破对方的比赛目标）。而组织者大都只是一些非专业的志愿者，接受参赛队伍手工计分的请求。
没有后台自动系统支持和裁判技术能力认定，计分延迟和误差以及不可靠的网络和不当的配置，导致比赛带来了极大的争论与不满。
「现代」CTF 竞赛 由专业队伍承担比赛平台、命题、赛事组织以及自动化积分系统。参赛队伍需提交参赛申请，由 DEFCON 会议组织者们进行评选。
就 LegitBS 组织的三年 DEFCON CTF 比赛而言，有以下突出特点：
比赛侧重于对计算机底层和系统安全的核心能力，Web 漏洞攻防技巧完全被忽略。 竞赛环境趋向多 CPU 指令架构集，多操作系统，多编程语言。 采用「零和」计分规则。 团队综合能力考验：逆向分析、漏洞挖掘、漏洞利用、漏洞修补加固、网络流量分析、系统安全运行维护以及安全方面的编程调试。 二级制安全规划 Hacking 三部曲 理解系统（Understanding） 系统性地基础课程学习，深入理解计算机系统运作机制 破坏系统（Breaking） 学习与创造漏洞挖掘与利用技巧 重构系统（Reconstruction） 设计与构建系统防护 基础课程学习 核心基础课程 - 计算工作原理
体系结构
CPU的设计与实现 CMU 18-477
机器指令与汇编语言 指令的解码、执行 内存管理 编译原理
编译器的设计与实现 Stanford CS143</description>
            <content type="html"><![CDATA[<h1 id="ctf整体规划">CTF整体规划</h1>
<p><strong>CTF</strong>（Capture The Flag，夺旗赛）起源于 1996 年 <strong>DEFCON</strong> 全球黑客大会，是网络安全爱好者之间的竞技游戏。</p>
<p><strong>CTF</strong> 竞赛涉及众多领域，内容繁杂。与此同时，安全技术的发展速度越来越快，<strong>CTF</strong> 题目的难度越来越高，初学者面对的门槛越来越高。</p>
<h2 id="概述1">概述^1^</h2>
<h3 id="ctf-的起源">CTF 的起源</h3>
<p>CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON。</p>
<h3 id="早期-ctf-竞赛">早期 CTF 竞赛</h3>
<p>第一个 CTF 比赛（1996 年 - 2001 年），没有明确的比赛规则，没有专业搭建的比赛平台与环境。由参数队伍各自准备比赛目标（自行准备与防守比赛目标，并要尝试攻破对方的比赛目标）。而组织者大都只是一些非专业的志愿者，接受参赛队伍手工计分的请求。</p>
<p>没有后台自动系统支持和裁判技术能力认定，计分延迟和误差以及不可靠的网络和不当的配置，导致比赛带来了极大的争论与不满。</p>
<h3 id="现代ctf-竞赛">「现代」CTF 竞赛</h3>
<p>由专业队伍承担比赛平台、命题、赛事组织以及自动化积分系统。参赛队伍需提交参赛申请，由 DEFCON 会议组织者们进行评选。</p>
<p>就 LegitBS 组织的三年 DEFCON CTF 比赛而言，有以下突出特点：</p>
<ul>
<li>比赛侧重于对计算机底层和系统安全的核心能力，Web 漏洞攻防技巧完全被忽略。</li>
<li>竞赛环境趋向多 CPU 指令架构集，多操作系统，多编程语言。</li>
<li>采用「零和」计分规则。</li>
<li>团队综合能力考验：逆向分析、漏洞挖掘、漏洞利用、漏洞修补加固、网络流量分析、系统安全运行维护以及安全方面的编程调试。</li>
</ul>
<h2 id="二级制安全规划">二级制安全规划</h2>
<h3 id="hacking-三部曲">Hacking 三部曲</h3>
<ul>
<li>理解系统（Understanding）
<ul>
<li>系统性地基础课程学习，深入理解计算机系统运作机制</li>
</ul>
</li>
<li>破坏系统（Breaking）
<ul>
<li>学习与创造漏洞挖掘与利用技巧</li>
</ul>
</li>
<li>重构系统（Reconstruction）
<ul>
<li>设计与构建系统防护</li>
</ul>
</li>
</ul>
<h3 id="基础课程学习">基础课程学习</h3>
<p>核心基础课程 - 计算工作原理</p>
<ul>
<li>
<p>体系结构</p>
<p>CPU的设计与实现 <a href="https://course.ece.cmu.edu/~ece447/s15/doku.php">CMU 18-477</a></p>
<ul>
<li>机器指令与汇编语言</li>
<li>指令的解码、执行</li>
<li>内存管理</li>
</ul>
</li>
<li>
<p>编译原理</p>
<p>编译器的设计与实现 <a href="http://web.stanford.edu/class/cs143/">Stanford CS143</a></p>
<ul>
<li>自动机、词法分析、语法分析</li>
<li>运行时</li>
<li>程序静态分析</li>
</ul>
</li>
<li>
<p>操作系统</p>
<p>操作系统的设计与实现 <a href="https://pdos.csail.mit.edu/6.828/2018/schedule.html">MIT 6.828</a></p>
<ul>
<li>系统的加载与引导</li>
<li>用户态与内核态、系统调用、中断和驱动</li>
<li>进程与内存管理、文件系统</li>
<li>虚拟机</li>
</ul>
</li>
</ul>
<p>其他基础课程 - 系统软件开发基础</p>
<ul>
<li>编程语言</li>
<li>网络协议</li>
<li>算法与数据结构</li>
</ul>
<h3 id="漏洞挖掘与利用快速入门---ctf">漏洞挖掘与利用快速入门 - CTF</h3>
<ul>
<li>蓝莲花战队CTF成长秘诀——坚持超过1年的以赛代练</li>
<li>CTF历史资料库：<a href="https://github.com/ctfs/">CTFs · GitHub</a></li>
<li>Wargames
<ul>
<li><a href="https://pwnable.kr/">https://pwnable.kr</a></li>
<li><a href="http://smashthestack.org/">SmashTheStack Wargaming Network</a></li>
</ul>
</li>
</ul>
<h3 id="漏洞挖掘与利用实战">漏洞挖掘与利用实战</h3>
<h4 id="如何从ctf赛棍转型">如何从CTF赛棍转型</h4>
<p>CTF</p>
<ul>
<li>短时间</li>
<li>目标代码量小</li>
<li>漏洞容易发现</li>
<li>利用技巧千奇百怪</li>
</ul>
<p>实战 - 长期做一道很难的CTF题</p>
<ul>
<li>长期</li>
<li>目标代码量大</li>
<li>漏洞难以发现</li>
<li>利用技术有套路可寻</li>
</ul>
<h4 id="目标">目标</h4>
<ul>
<li>网络协议的实现</li>
<li>脚本引擎</li>
<li>内核</li>
</ul>
<h4 id="准备">准备</h4>
<ul>
<li>学习历史漏洞 - CVEs</li>
<li>挖掘新漏洞
<ul>
<li>逆向分析 + 代码审计
<ul>
<li>快速逆向与理解</li>
<li>对漏洞的感觉</li>
</ul>
</li>
<li>模糊测试
<ul>
<li>测试框架</li>
<li>样例生成想法</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="构建系统防护">构建系统防护</h3>
<p>漏洞自动挖掘技术</p>
<ul>
<li>静态程序分析</li>
<li>符号执行</li>
<li>机器学习</li>
</ul>
<p>漏洞利用防护机制</p>
<ul>
<li>Intel SGX</li>
<li>控制流完整</li>
<li>拟态</li>
</ul>
<h2 id="web安全规划">WEB安全规划</h2>
<h3 id="漏洞类型">漏洞类型</h3>
<p>注入类</p>
<ul>
<li>SQL注入</li>
<li>XSS</li>
<li>XEE</li>
<li>命令执行，命令注入</li>
<li>文件上传，文件下载</li>
</ul>
<p>信息泄露</p>
<ul>
<li>源码泄露</li>
<li>敏感信息泄露</li>
<li>员工资料泄露</li>
<li>服务器信息泄露</li>
</ul>
<p>逻辑类</p>
<ul>
<li>权限绕过</li>
<li>条件竞争</li>
<li>数据篡改</li>
</ul>
<h3 id="基础课程学习-1">基础课程学习</h3>
<h4 id="核心基础课程---网站工作原理">核心基础课程 - 网站工作原理</h4>
<p>HTTP协议</p>
<ul>
<li>
<p>http-header构成</p>
</li>
<li>
<p>http-body构成</p>
</li>
<li>
<p>http方法</p>
</li>
</ul>
<p>Webserver</p>
<ul>
<li>Webserver分类</li>
<li>Webserver解析流程</li>
<li>Webserver基础安全</li>
</ul>
<h4 id="其他基础课程---软件开发基础">其他基础课程 - 软件开发基础</h4>
<p>编程语言</p>
<ul>
<li>前端：html、js、css</li>
<li>后端、脚本语言：php、java、python</li>
</ul>
<p>数据库原理</p>
<ul>
<li>关系型数据库</li>
<li>非关系型数据库</li>
</ul>
<h3 id="漏洞挖掘与利用">漏洞挖掘与利用</h3>
<h4 id="准备-1">准备</h4>
<p>信息收集工具</p>
<ul>
<li>端口</li>
<li>子域名</li>
<li>代码泄露</li>
<li>员工字典</li>
</ul>
<p>数据包抓取修改重放工具</p>
<p>顺手的浏览器以及插件</p>
<p>VPS，漏洞验证</p>
<h4 id="挖掘">挖掘</h4>
<p>分析业务功能</p>
<p>分析web架构</p>
<p>针对性罗列可能的漏洞类型</p>
<p>详细测试：不要放过任何一个数据包</p>
<h4 id="利用举例">利用举例</h4>
<p>单一利用</p>
<ul>
<li>Getshell</li>
<li>敏感信息接口</li>
</ul>
<p>组合利用</p>
<ul>
<li>Xss+csrf</li>
</ul>
<h2 id="相关资料">相关资料</h2>
<p>CTF比赛详情</p>
<ul>
<li><a href="https://ctftime.org/">CTFtime.org / All about CTF (Capture The Flag)</a></li>
</ul>
<p>CTF历史资料库</p>
<ul>
<li><a href="https://github.com/ctfs/">CTFs · GitHub</a></li>
</ul>
<p>Wargames &amp; Labs</p>
<ul>
<li><a href="https://pwnable.kr/">https://pwnable.kr</a></li>
<li><a href="http://smashthestack.org/">SmashTheStack Wargaming Network</a></li>
<li><a href="http://wargame.kr/">Wargame.kr - 2.1</a></li>
<li><a href="https://www.pentesterlab.com/">PentesterLab: Learn Web Penetration Testing: The Right Way</a></li>
<li><a href="https://overthewire.org/wargames/">OverTheWire: Wargames</a></li>
<li><a href="https://exploit-exercises.com/">Homepage One - exploit-exercises.com</a></li>
</ul>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://ctf-wiki.org/introduction/history/">CTF 历史 - CTF Wiki (ctf-wiki.org)</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>大学,未来</title>
            <link>/posts/%E5%A4%A7%E5%AD%A6%E6%9C%AA%E6%9D%A5/</link>
            <pubDate>Sat, 29 Jan 2022 09:26:51 +0800</pubDate>
            
            <guid>/posts/%E5%A4%A7%E5%AD%A6%E6%9C%AA%E6%9D%A5/</guid>
            <description>大学，未来 大学是一个知识分子的聚集地，是一个自由的学术殿堂。但是大学也有着很多限制和禁锢，大学生往往也在承受着社会的诸多压力。以上是我对于大学最基本的一种认识和一种观念上的思考。
大学 什么是大学？我们为什么要上大学？
我们年轻人往往存在着诸多迷茫和对于未来的种种困惑，我或许不能带来更多的思维上的超脱，但是我希望可以带来思维上的解放和独立
大学是自由的学术空间，你可以在大学自由遨游，做任何自己想要做的事情，当然是在不违反大学规则的一种相对自由。大学的学术资源、知识资源和知识库存非常的丰富，在大学可以尽情的学习知识。在大学，你可以不受任何约束，去学习，去思考，去交谈，去恋爱等等。但是大学有不仅仅只是大学，大学有着诸多的现实性的因素和社会普遍观念的影响。因而，大学是一个人完全展现的自由空间，每个人都有着自己的自由世界和固有领域，相互交叉着，融合着形成了一种多元丰富的大学文化和大学空间。
大学是一个个性发展的平台，同时大学也是一个思想碰撞和灵魂交错融合的空间。虽然现在社会上充斥着诸多的大学无用论和大学生的诸多问题。上大学究竟有没有用，或者说上大学的意义又是什么呢？寻找意义往往可能会是一种比较徒劳的过程，与其寻找意义倒不如去用自己的青春热血去创造意义，世界的未来必然是年轻人的天下和年轻人的一方天地。大学提升的往往不是一种知识层面上的增长，而更多的是一种精神层面和思维层面的增长，这些层次的增长会提升一个人的软实力和综合素质。这些能力的提升，必然会带来诸多方面的改变。因而，我们上大学有时不是为了改变我们自己，更多的是为了改变世界。
学习 大学的主要组成成分是学习，但是又不仅仅是学习，但是更多的还是学习。 学习有广义和狭义之分，在大学之前的学习往往是一种狭义上的学习，在大学之后的学习往往是一种广义的学习。什么是狭义的学习？什么又是广义的学习？ 狭义的学习：指书本上知识内容或课堂内容的学习，这些学习到的知识往往都有着比较实质性的作用，比如应对考试、考证以及升学等诸多方面。 广义的学习：指更大范围的学习，一种终身学习的态度对待生活中的任何事情，知识的载体不仅限于书本和课堂，还有更多方面的载体，处处皆可学习，处处皆能学习。
大学生之间的差异性往往在于学习的差异性，不同人对于学习的态度不同，对于学习的思考和思维方式不同，而带来了诸多方方面面的不同和差异性。我们大学生应该怎么进行学习？什么样的学习是有效的学习？
很多大学生的学习方式往往都带有目的性，这个目的性往往指向期末考试和 GPA ，以及更多现实方面的意义。他们很多都是以 DDL 来鞭策自己，普遍具有拖延情况，而且很多大学生都缺乏正确的时间管理方法。于是，很多大学生就开始进行短期高效的学习。但是，这种学习往往都是不长久的学习。知识不能在大学生的思维深处内化，学习似乎变成了一种应付考试的短期用品，而不是一种长期的理念和生活方式。
学习是大学生生活的一部分，更是要时时进行的一种思维训练和精神上的洗礼。学习可以给我们大学生带来一种视角和认知方式的改变，学习这个过程是苦乐交织的过程。通过学习知识，我们大学生可以更好地理解世界，更好地体会生命所带来的美好以及大学生活的意义。
学习的方式有很多方面，学习本质是将信息转换为知识的过程。什么是信息?什么又是知识?信息就是我们日常生活所接触到的方方面面的可以影响决策的数据，知识就是根据一部分信息可以获取另一部分或者是推断出另一部分信息的模型或者是函数。要进行学习，首先需要获取信息，将信息整合成知识。或者将前人总结的知识进行模型化迁移进行内化和泛化处理。
获取信息的途径有很多种，尤其在我们所处的信息时代中。我们可以通过互联网获得诸多信息，通过教学视频迁移前人或是他人的知识，通过阅读系统化地获取信息。对信息进行整合和转化的过程即是学习。
信息获取的途径繁多，自然也带来了很多曾经没有的困境，即知识焦虑，信息迷茫问题。这些问题是伴随着信息时代所产生的一种问题，信息质量参差不齐，信息碎片化，信息数量大。这诸多情况，导致很多大学生不知道该对那些信息进行知识性转化。以及很多大学生不知道应该采取哪些渠道进行信息获取有效的知识并进行有效的学习。或许，也有很多人不知道该怎么去学习，或者他们根本并没有太多学习的欲望，把学习进行了泛化，进行着一种自我麻醉的学习。更可怕的是，他们却浑然不知，并且深深地沉浸在这种自我麻痹式的学习中。学习，也就是这样子了。
信息的过滤和整合是学习过程中最美好的一个过程，也是最能体验到知识美好的一个过程，实现这个过程的方法很多，形式很多样化。每个人都有着自己的想法和自己的愿景，一般而言都会根据学习的原理进行个性化定制属于自己的那套学习方法。学习原理都是比较简单的内容，就是一种大脑思维的模型，大脑进行学习的工作原理，简而言之，学习就是获取知识的过程，学习原理也就是如何高效学习，即输入-计算-输出。构建这个知识模型，根据大脑的神经网络结构进行刻意练习，就是学习的本质也就是学习的原理。
学习的方式因人而异，但是学习的原理一般都是具有普遍适应性的，具有非常好的兼容性。学习方法是根据学习原理来进行定制的，但是常见的学习方式一般有最近比较流行的思维导图，费曼学习法。其实，总的学习方法也是根据这两种学习方法进行个性化定制和改善的。还有一些学习方法是根据心理学上的一些原理和知识进行设计的，根据心理学的原理设计的方法很多都具有普遍性，由于这些方法都是针对人体本身的大脑思维原理的特点和优势进行开发和制作的。
学习是个很大的话题，我所能介绍的不过也只是冰山一角，学习是大学生的任务，或者应该说是大学生的一种使命性的事情。我们大学生应该去面对学习这件事情，认真对待学习，在这个时代，知识就是力量。没有知识真的是寸步难行，特别是我们大学生。
学习，从阅读一本书，做好每堂课程的笔记开始。
知识 知识是具有普遍性通用性的特殊性的信息。在大学期间，我该去如何去考量知识呢？我们应该去选择哪些知识呢？
现在社会焦虑开始不断扩大，各个层级开始不断出现内卷的现象，基于此。很多大学生也会受到社会或多或少的影响而去麻木地学习社会所需要的知识和内容。这些大学生进行这样的功利性学习是没有活力的学习，也不是说功利性学习不好，只是在我们这个相对和平安定的年代，我应该可以有选择知识的自由，遵从内心的想法，富有灵魂地学习一些自己所向往的知识领域。“爱你所爱，行你所行，听从你心，无问西东”，我们大学生应该有活力有激情地选择自己内心深处喜爱的知识，而不是仅仅被社会所束缚。知识，是灵动的，是富有生气的。
知识和技能总会产生相应的联系。可以这么理解：
知识是理论层面，就是大脑接收到的信息。 技能是实践层面，就是需要动手将信息有效利用。 现在计算机技术迭代迅速，计算机行业也是很多大学生争先恐后要去的方向。计算机行业是高薪行业，同时在这个浮躁且急功近利的社会中，大学生往往会更倾向于去选择这样的一个行业，因为未来就业可以相对比较容易，方向多，待遇方面相对较好。但是我们往往在追求功利的时候，我们可能往往变成了一个精致的利己主义者，这样真的是我们大学生学习知识和技能的意义吗？
我们为什么学习知识？我们为什么学习技能？
学习知识是为了更好的生活，更好的适应环境，毕竟物竞天择，适者生存嘛。但是我们大学应该拥有对于知识和技能更多的认识和见解，这些东西不应该只满足最低的生存需求，我们还有安全需求、归属寻求、自尊需求和自我实现需求。我们大学生，去学习那些知识应该尽可能去满足我们的自我实现需求，而生存需求、安全需求、归属需求等也就是在实现自我价值的过程中得到满足。
知识，不仅仅只是书本上面的知识，还生活中的知识，知识就存在于我们身边，我们随处都可以学习。我们是否可以汲取到这些知识，取决于我们自己的内心，我们是否可以做到 “求知若渴，虚心若愚”。
技能，不仅仅是枯燥无味的行动方针和工作方式，技能是富有灵魂和活动，是一种朝气蓬勃的动力和激情演绎出的具现化的知识。当我们使用技能的时候，我们应该是非常快乐而且非常愉悦的。
我们应该保有我们自己所拥有的灵魂快乐与自我，去追求我们可以去追求的事情呀！
“我为什么要那么努力， 因为我喜欢的东西都很贵， 我想去的地方都很远， 我爱的人超完美。”
生活 生活总的来说，还是比生活艰难的，生活不止是学习，同时生活又在不断的和学习进行交融着，不确定我们究竟是在学习中生活还是在生活中学习。如果泛化学习的概念，学习可以说是无处不在的，到处都可以学习。泛化后的学习的形式不再仅仅局限于读书、记笔记而是展现于感官中的学习，即展现在听、说、读、写、思五个方面。这五个方面的学习可以融入到生活之中，进行相应的学习。那么生活是什么？
生活是一个复杂集合体，每个人在生命过程中遇到的任何事情和任何发展以及想法都会扔到生活这个集合体中，但是我们每个人也在生活中，这些事情就会有生活再反馈给我们自身，在生活中遇到困难和烦恼，逃避是不能解决问题，有时候我们必须去面对生活中所产生的种种问题。生活中的问题其实都是由我们而生的，“人是一切社会关系的总和”，生活中的发生的事情，其实就是我们每一个人的社会关系所造成的一种效应。这种效应可能是显式的，也可能是隐式的，由于这种效应的存在。我们在生活中就好似被各种关系所连接的节点，与整个社会中的人群进行着交流和沟通，与他们产生羁绊和牵连。但是关系也只是生活的一个部分，还有一部分是自身因素所产生的，因而，总的来说，生活就是自身因素和自身的社会关系所产生的效应的集合体。
我们应该怎样对待生活？自由的支配生活，还是被欲望所支配着看似自由的生活？大学生该如何生活才可以有一个光明的大学生活？这里产生很多问题和很多矛盾，很多大学生在纠结着该如何生活，很多大学生都很想奋进，很想努力去学习更多的知识，好好看看这个美丽的世界。但是，他们很多却被生活的压力和本能的反应所压制，而不知道该如何去正确的生活。正确往往存在于每个人的内心中，是否正确没有固定的标准和准则，准则存在于每个人的心中。
很多时候，生活的意义一直在被很多人思考着、追寻着。我们可能并不了解生活究竟有什么样的意义和什么样的价值，仅仅只是将就着，被社会的理念和物质文化所牵动着，很多大学生的生活就被社会所物化，没有本真的活力和本真的激情。青年人，本应该是一种活力四射、激情盎然的样子，那气宇轩昂的志气。
生活是年轻一代大学生自己所能做到的存在方式，这种存在方式取决于大学生自己的行为模式和思维模式，同时也影响着他们的模式。
未来 未来，这是一个多么美好的词汇呀！
但是，我们当代大学生或青年人的未来又会是什么样子呢？
未来的大学生或青年人可以开心快乐，如果能够拥有足够强大的能力那就非常好了。
为什么这样说呢？根据大学生近期情况的信息，不难察觉到当代大学生存在着很多不快乐的倾向，很多大学生都不是快乐的。这几年抑郁症的人群越来越大，而且患抑郁症的人群年龄在下调，人群分布似乎主要在年轻人的范围之内。很多年轻人都是不快乐的，为什么呢？原因可能是社会因素的影响，也可能是网络影响，总之诸多因素的影响下，年轻人面对着诸多的压力和焦虑情绪。而且，很多年轻人还没有完全适应信息时代高速发展所带来的冲击和不适，进而加剧了年轻人的焦虑情绪，而且网络上充斥着不少贩卖焦虑的文章和内容，更近一步加剧了年轻人的焦虑心理。这种心理不断演化、恶化。最终，抑郁症患者频出，抑郁症的患病率逐年升高。
因而，开心快乐其实才是人生最美的时光，也是期许未来所能带来的最美好的回馈。
最后 可能我的想法过于阴暗，过于偏激。可能我自己都不能搞清楚自己究竟是什么样子的恶魔，自己到底是什么样子的存在，也许，只是我看到太多比较阴暗的东西，我的观察角度往往只注意到了当代的大学生或年轻人的很多不足之处，只关注到了他们的阴暗面和阴暗的成分。
我也只是一个大学生，我的想法可能也存在着很大的局限性，因为我还不能完全以局外人的身份去观测大学生这个群体。这些内容也仅仅只是我自己的个人见解罢了。
我的经历是比较灰暗的，我能够观察到很多灰暗的细节性，虽然这有后期刻意练习观察力有关系吧。我的童年其实是非常静默的时光，我就像是一个隐匿的黑影，没有什么快乐的时光，仅仅只是呆呆地和父母一起生活，和自己生活。我曾经生活中确实是有一段时间，那段时间算是一段比较黄金的时光，那段时光里，我醉心于学习，沉迷于知识，没有太多物化的想法而内心满满只是一种仰望星空的蝶影。那段时间是在我的初中时期，我的高中时期是一个完全不一样的自我，一个从深渊中慢慢爬向另一个阴影中的自我，那时候我在不断不断地蜕变，看到了更多的光同时也看到了更多暗，也看到了完全不一样的世界风光。而进入大学时期，我也在不断地蜕变和改变着自己的生活方式，不断地学习各种个样的知识，去尽量抓住自己想要抓住的信息和知识，以及各种个样的机会。
我也希望自己能够有一个比较好的规划，十年或是五年，自己也能有一个美好的梦想，去追逐，去努力实现。这篇文章本来就是写自己未来规划的文章，结果还是有点拖延呢，写着写着就写了很多很多乱七八糟的内容和想法吧。</description>
            <content type="html"><![CDATA[<h1 id="大学未来">大学，未来</h1>
<blockquote>
<p>大学是一个知识分子的聚集地，是一个自由的学术殿堂。但是大学也有着很多限制和禁锢，大学生往往也在承受着社会的诸多压力。以上是我对于大学最基本的一种认识和一种观念上的思考。</p>
</blockquote>
<h2 id="大学">大学</h2>
<p>什么是大学？我们为什么要上大学？</p>
<blockquote>
<p>我们年轻人往往存在着诸多迷茫和对于未来的种种困惑，我或许不能带来更多的思维上的超脱，但是我希望可以带来思维上的解放和独立</p>
</blockquote>
<p>大学是自由的学术空间，你可以在大学自由遨游，做任何自己想要做的事情，当然是在不违反大学规则的一种相对自由。大学的学术资源、知识资源和知识库存非常的丰富，在大学可以尽情的学习知识。在大学，你可以不受任何约束，去学习，去思考，去交谈，去恋爱等等。但是大学有不仅仅只是大学，大学有着诸多的现实性的因素和社会普遍观念的影响。因而，大学是一个人完全展现的自由空间，每个人都有着自己的自由世界和固有领域，相互交叉着，融合着形成了一种多元丰富的大学文化和大学空间。</p>
<p>大学是一个个性发展的平台，同时大学也是一个思想碰撞和灵魂交错融合的空间。虽然现在社会上充斥着诸多的大学无用论和大学生的诸多问题。上大学究竟有没有用，或者说上大学的意义又是什么呢？寻找意义往往可能会是一种比较徒劳的过程，与其寻找意义倒不如去用自己的青春热血去创造意义，世界的未来必然是年轻人的天下和年轻人的一方天地。大学提升的往往不是一种知识层面上的增长，而更多的是一种精神层面和思维层面的增长，这些层次的增长会提升一个人的软实力和综合素质。这些能力的提升，必然会带来诸多方面的改变。因而，我们上大学有时不是为了改变我们自己，更多的是为了改变世界。</p>
<h2 id="学习">学习</h2>
<blockquote>
<p>大学的主要组成成分是学习，但是又不仅仅是学习，但是更多的还是学习。
学习有广义和狭义之分，在大学之前的学习往往是一种狭义上的学习，在大学之后的学习往往是一种广义的学习。什么是狭义的学习？什么又是广义的学习？
狭义的学习：指书本上知识内容或课堂内容的学习，这些学习到的知识往往都有着比较实质性的作用，比如应对考试、考证以及升学等诸多方面。
广义的学习：指更大范围的学习，一种终身学习的态度对待生活中的任何事情，知识的载体不仅限于书本和课堂，还有更多方面的载体，处处皆可学习，处处皆能学习。</p>
</blockquote>
<p>大学生之间的差异性往往在于学习的差异性，不同人对于学习的态度不同，对于学习的思考和思维方式不同，而带来了诸多方方面面的不同和差异性。我们大学生应该怎么进行学习？什么样的学习是有效的学习？</p>
<p>很多大学生的学习方式往往都带有目的性，这个目的性往往指向期末考试和 GPA ，以及更多现实方面的意义。他们很多都是以 DDL 来鞭策自己，普遍具有拖延情况，而且很多大学生都缺乏正确的时间管理方法。于是，很多大学生就开始进行短期高效的学习。但是，这种学习往往都是不长久的学习。知识不能在大学生的思维深处内化，学习似乎变成了一种应付考试的短期用品，而不是一种长期的理念和生活方式。</p>
<p>学习是大学生生活的一部分，更是要时时进行的一种思维训练和精神上的洗礼。学习可以给我们大学生带来一种视角和认知方式的改变，学习这个过程是苦乐交织的过程。通过学习知识，我们大学生可以更好地理解世界，更好地体会生命所带来的美好以及大学生活的意义。</p>
<p>学习的方式有很多方面，学习本质是将信息转换为知识的过程。什么是信息?什么又是知识?信息就是我们日常生活所接触到的方方面面的可以影响决策的数据，知识就是根据一部分信息可以获取另一部分或者是推断出另一部分信息的模型或者是函数。要进行学习，首先需要获取信息，将信息整合成知识。或者将前人总结的知识进行模型化迁移进行内化和泛化处理。</p>
<p>获取信息的途径有很多种，尤其在我们所处的信息时代中。我们可以通过互联网获得诸多信息，通过教学视频迁移前人或是他人的知识，通过阅读系统化地获取信息。对信息进行整合和转化的过程即是学习。</p>
<p>信息获取的途径繁多，自然也带来了很多曾经没有的困境，即知识焦虑，信息迷茫问题。这些问题是伴随着信息时代所产生的一种问题，信息质量参差不齐，信息碎片化，信息数量大。这诸多情况，导致很多大学生不知道该对那些信息进行知识性转化。以及很多大学生不知道应该采取哪些渠道进行信息获取有效的知识并进行有效的学习。或许，也有很多人不知道该怎么去学习，或者他们根本并没有太多学习的欲望，把学习进行了泛化，进行着一种自我麻醉的学习。更可怕的是，他们却浑然不知，并且深深地沉浸在这种自我麻痹式的学习中。学习，也就是这样子了。</p>
<p>信息的过滤和整合是学习过程中最美好的一个过程，也是最能体验到知识美好的一个过程，实现这个过程的方法很多，形式很多样化。每个人都有着自己的想法和自己的愿景，一般而言都会根据学习的原理进行个性化定制属于自己的那套学习方法。学习原理都是比较简单的内容，就是一种大脑思维的模型，大脑进行学习的工作原理，简而言之，学习就是获取知识的过程，学习原理也就是如何高效学习，即输入-计算-输出。构建这个知识模型，根据大脑的神经网络结构进行刻意练习，就是学习的本质也就是学习的原理。</p>
<p>学习的方式因人而异，但是学习的原理一般都是具有普遍适应性的，具有非常好的兼容性。学习方法是根据学习原理来进行定制的，但是常见的学习方式一般有最近比较流行的思维导图，费曼学习法。其实，总的学习方法也是根据这两种学习方法进行个性化定制和改善的。还有一些学习方法是根据心理学上的一些原理和知识进行设计的，根据心理学的原理设计的方法很多都具有普遍性，由于这些方法都是针对人体本身的大脑思维原理的特点和优势进行开发和制作的。</p>
<p>学习是个很大的话题，我所能介绍的不过也只是冰山一角，学习是大学生的任务，或者应该说是大学生的一种使命性的事情。我们大学生应该去面对学习这件事情，认真对待学习，在这个时代，知识就是力量。没有知识真的是寸步难行，特别是我们大学生。</p>
<p>学习，从阅读一本书，做好每堂课程的笔记开始。</p>
<h2 id="知识">知识</h2>
<p>知识是具有普遍性通用性的特殊性的信息。在大学期间，我该去如何去考量知识呢？我们应该去选择哪些知识呢？</p>
<p>现在社会焦虑开始不断扩大，各个层级开始不断出现内卷的现象，基于此。很多大学生也会受到社会或多或少的影响而去麻木地学习社会所需要的知识和内容。这些大学生进行这样的功利性学习是没有活力的学习，也不是说功利性学习不好，只是在我们这个相对和平安定的年代，我应该可以有选择知识的自由，遵从内心的想法，富有灵魂地学习一些自己所向往的知识领域。“爱你所爱，行你所行，听从你心，无问西东”，我们大学生应该有活力有激情地选择自己内心深处喜爱的知识，而不是仅仅被社会所束缚。知识，是灵动的，是富有生气的。</p>
<p>知识和技能总会产生相应的联系。可以这么理解：</p>
<ul>
<li>知识是理论层面，就是大脑接收到的信息。</li>
<li>技能是实践层面，就是需要动手将信息有效利用。</li>
</ul>
<p>现在计算机技术迭代迅速，计算机行业也是很多大学生争先恐后要去的方向。计算机行业是高薪行业，同时在这个浮躁且急功近利的社会中，大学生往往会更倾向于去选择这样的一个行业，因为未来就业可以相对比较容易，方向多，待遇方面相对较好。但是我们往往在追求功利的时候，我们可能往往变成了一个精致的利己主义者，这样真的是我们大学生学习知识和技能的意义吗？</p>
<p>我们为什么学习知识？我们为什么学习技能？</p>
<p>学习知识是为了更好的生活，更好的适应环境，毕竟物竞天择，适者生存嘛。但是我们大学应该拥有对于知识和技能更多的认识和见解，这些东西不应该只满足最低的生存需求，我们还有安全需求、归属寻求、自尊需求和自我实现需求。我们大学生，去学习那些知识应该尽可能去满足我们的自我实现需求，而生存需求、安全需求、归属需求等也就是在实现自我价值的过程中得到满足。</p>
<p>知识，不仅仅只是书本上面的知识，还生活中的知识，知识就存在于我们身边，我们随处都可以学习。我们是否可以汲取到这些知识，取决于我们自己的内心，我们是否可以做到 “求知若渴，虚心若愚”。</p>
<p>技能，不仅仅是枯燥无味的行动方针和工作方式，技能是富有灵魂和活动，是一种朝气蓬勃的动力和激情演绎出的具现化的知识。当我们使用技能的时候，我们应该是非常快乐而且非常愉悦的。</p>
<p>我们应该保有我们自己所拥有的灵魂快乐与自我，去追求我们可以去追求的事情呀！</p>
<p>“我为什么要那么努力， 因为我喜欢的东西都很贵， 我想去的地方都很远， 我爱的人超完美。”</p>
<h2 id="生活">生活</h2>
<p>生活总的来说，还是比生活艰难的，生活不止是学习，同时生活又在不断的和学习进行交融着，不确定我们究竟是在学习中生活还是在生活中学习。如果泛化学习的概念，学习可以说是无处不在的，到处都可以学习。泛化后的学习的形式不再仅仅局限于读书、记笔记而是展现于感官中的学习，即展现在听、说、读、写、思五个方面。这五个方面的学习可以融入到生活之中，进行相应的学习。那么生活是什么？</p>
<p>生活是一个复杂集合体，每个人在生命过程中遇到的任何事情和任何发展以及想法都会扔到生活这个集合体中，但是我们每个人也在生活中，这些事情就会有生活再反馈给我们自身，在生活中遇到困难和烦恼，逃避是不能解决问题，有时候我们必须去面对生活中所产生的种种问题。生活中的问题其实都是由我们而生的，“人是一切社会关系的总和”，生活中的发生的事情，其实就是我们每一个人的社会关系所造成的一种效应。这种效应可能是显式的，也可能是隐式的，由于这种效应的存在。我们在生活中就好似被各种关系所连接的节点，与整个社会中的人群进行着交流和沟通，与他们产生羁绊和牵连。但是关系也只是生活的一个部分，还有一部分是自身因素所产生的，因而，总的来说，生活就是自身因素和自身的社会关系所产生的效应的集合体。</p>
<p>我们应该怎样对待生活？自由的支配生活，还是被欲望所支配着看似自由的生活？大学生该如何生活才可以有一个光明的大学生活？这里产生很多问题和很多矛盾，很多大学生在纠结着该如何生活，很多大学生都很想奋进，很想努力去学习更多的知识，好好看看这个美丽的世界。但是，他们很多却被生活的压力和本能的反应所压制，而不知道该如何去正确的生活。正确往往存在于每个人的内心中，是否正确没有固定的标准和准则，准则存在于每个人的心中。</p>
<p>很多时候，生活的意义一直在被很多人思考着、追寻着。我们可能并不了解生活究竟有什么样的意义和什么样的价值，仅仅只是将就着，被社会的理念和物质文化所牵动着，很多大学生的生活就被社会所物化，没有本真的活力和本真的激情。青年人，本应该是一种活力四射、激情盎然的样子，那气宇轩昂的志气。</p>
<p>生活是年轻一代大学生自己所能做到的存在方式，这种存在方式取决于大学生自己的行为模式和思维模式，同时也影响着他们的模式。</p>
<h2 id="未来">未来</h2>
<p>未来，这是一个多么美好的词汇呀！</p>
<p>但是，我们当代大学生或青年人的未来又会是什么样子呢？</p>
<p>未来的大学生或青年人可以开心快乐，如果能够拥有足够强大的能力那就非常好了。</p>
<p>为什么这样说呢？根据大学生近期情况的信息，不难察觉到当代大学生存在着很多不快乐的倾向，很多大学生都不是快乐的。这几年抑郁症的人群越来越大，而且患抑郁症的人群年龄在下调，人群分布似乎主要在年轻人的范围之内。很多年轻人都是不快乐的，为什么呢？原因可能是社会因素的影响，也可能是网络影响，总之诸多因素的影响下，年轻人面对着诸多的压力和焦虑情绪。而且，很多年轻人还没有完全适应信息时代高速发展所带来的冲击和不适，进而加剧了年轻人的焦虑情绪，而且网络上充斥着不少贩卖焦虑的文章和内容，更近一步加剧了年轻人的焦虑心理。这种心理不断演化、恶化。最终，抑郁症患者频出，抑郁症的患病率逐年升高。</p>
<p>因而，开心快乐其实才是人生最美的时光，也是期许未来所能带来的最美好的回馈。</p>
<h2 id="最后">最后</h2>
<p>可能我的想法过于阴暗，过于偏激。可能我自己都不能搞清楚自己究竟是什么样子的恶魔，自己到底是什么样子的存在，也许，只是我看到太多比较阴暗的东西，我的观察角度往往只注意到了当代的大学生或年轻人的很多不足之处，只关注到了他们的阴暗面和阴暗的成分。</p>
<p>我也只是一个大学生，我的想法可能也存在着很大的局限性，因为我还不能完全以局外人的身份去观测大学生这个群体。这些内容也仅仅只是我自己的个人见解罢了。</p>
<p>我的经历是比较灰暗的，我能够观察到很多灰暗的细节性，虽然这有后期刻意练习观察力有关系吧。我的童年其实是非常静默的时光，我就像是一个隐匿的黑影，没有什么快乐的时光，仅仅只是呆呆地和父母一起生活，和自己生活。我曾经生活中确实是有一段时间，那段时间算是一段比较黄金的时光，那段时光里，我醉心于学习，沉迷于知识，没有太多物化的想法而内心满满只是一种仰望星空的蝶影。那段时间是在我的初中时期，我的高中时期是一个完全不一样的自我，一个从深渊中慢慢爬向另一个阴影中的自我，那时候我在不断不断地蜕变，看到了更多的光同时也看到了更多暗，也看到了完全不一样的世界风光。而进入大学时期，我也在不断地蜕变和改变着自己的生活方式，不断地学习各种个样的知识，去尽量抓住自己想要抓住的信息和知识，以及各种个样的机会。</p>
<p>我也希望自己能够有一个比较好的规划，十年或是五年，自己也能有一个美好的梦想，去追逐，去努力实现。这篇文章本来就是写自己未来规划的文章，结果还是有点拖延呢，写着写着就写了很多很多乱七八糟的内容和想法吧。</p>
]]></content>
        </item>
        
        <item>
            <title>数学之美,程序之巧</title>
            <link>/posts/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E%E7%A8%8B%E5%BA%8F%E4%B9%8B%E5%B7%A7/</link>
            <pubDate>Sat, 29 Jan 2022 09:25:11 +0800</pubDate>
            
            <guid>/posts/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E%E7%A8%8B%E5%BA%8F%E4%B9%8B%E5%B7%A7/</guid>
            <description>数学之美，程序之巧 计算机程序，简单来说，就是指令和数据的组合。程序可以通过算法组成相应的逻辑系统，逻辑系统可以根据编写者需求来完成各种各样的事情。
计算机内部数据处理方式是什么样？
这个问题可以从机器语言开始说起，如果要说到机器语言自然就要聊一聊编程语言喽：
编程语言（英语：programming language），是用来定义计算机程序的形式语言。它是一种被标准化的交流技巧，用来向计算机发出指令。一种能够让程序员准确地定义计算机所需要使用数据的计算机语言，并精确地定义在不同情况下所应当采取的行动。^1^
机器语言是编程语言最初的一个代表，机器语言的表示方式通常是101010的二进制方式，这也是计算机运行最底层的内容和最底层的模块，在101010的运算模式是非常适合计算机进行计算的。编程就是数据和指令的集合，而计算机就是将101010的二进制数字进行运算，计算机的运算方式通常由逻辑运算和算术运算。但是这和数学有什么关系吗？计算机的运算是数学理论产生的产物，集成电路上闪动的光波，跳动的粒子都是多少数学家理论的产物呀！
话说回来，机器语言现在几乎都不使用，都在使用高级编程语言。根据现在的情况，编程语言有大致三代。第一代编程语言是机器语言，编写非常复杂。第二代编程语言是汇编语言，编写相对机器语言简单了许多，但是仍然是比较复杂的语言。第三代编程语言是现在非常经常使用的高级编程语言，C语言，C++语言，Java语言等静态语言以及Python，PHP，Ruby，JavaScript等动态语言。发展到第三代编程语言，编程的难度大大降低。
但是，编程和数学有什么关系呢？
个人认为，编程本身是美的，数学亦是美的。编程的美是基于数学的逻辑，数学的理论和数学中的各种各样的奇妙变换。编程如果接触到了比较底层的内容，也就到了最核心的部分——数据结构和算法，而数据结构和算法很多的知识都是基于数学的思考。这里用算法里面的时间复杂度和数学中的微积分做一下对比：
$$ O(n \cdot \ln:n) $$
$$ f(x) = n \cdot \ln : n $$
这两个公式是非常相像的，而时间复杂度的比较其实也是基于微积分中极限的概念进行比较的。
如果要比较 (O(\ln : n)) 和 (O(n))的时间复杂度，该怎么比较呢？
这里可以使用微积分中的无穷小比较来进行比较的，同样是采用微积分中的极限的思想来进行比较的：
$$ \lim_{x \to +\infty} \frac{\ln : n}{n} = 0 $$
这个式子在微积分中是非常常见的概念，通过数学的证明来证明这个结论。根据这个结论就可以非常容易的判断出时间复杂度之间的大小。这是数学在编程算法中的一个应用。通过这个应用可以说明计算机编程和数学之间的微妙关系。
进行数学问题研究的人员往往是高深的数学家，而进行计算机编程的人员往往是秃头的程序员，程序员很少研究数学问题，但是程序员也了解一部分数学知识。而数学家和程序员之间又有什么关系呢？
程序员是敲代码，负责对功能的实现，是应用方面的。而数学家是解决数学问题的，使用数学优美的证明和严谨的逻辑来证明数学问题，是理论方面的。看起来是没有什么必然的联系，其实进行连接的中介就是计算机科学家，他们负责对计算机理论的研究和算法的创新求解，他们会整合数学家的最新的研究成功并尝试融入到计算机理论中去。程序员可以从计算机理论中的很多相关内容中，进行代码和设计方面的功能实现，优化服务。
现在的大时代趋势是万物互联，每个学科都不在是孤立存在的学科，学科之间彼此有着多重的交叉。随着时代的进步，学科交叉应该会越来越明显，而计算机和数学关系是非常密切的，应该会最先进行交叉研究，其实现在已经进行交叉研究了。
我个人认为程序员应该是有一种对于数学的热爱，看到数学优美的证明会心生惊叹，面对数学问题会竭尽全力去攻克数学问题。其实这其实也是程序员对于程序和代码的一种态度，一种专业素养。程序员往往都会追求完美，希望程序可以不断优化不断进行完善，更少的BUG，更高的性能。这无非不是对于数学赞扬和感叹。
数学之美，程序之巧，尽展心中，会现颅内。
参考 编程语言-维基百科 闲聊到此为止，来喝杯茶可好？</description>
            <content type="html"><![CDATA[<h1 id="数学之美程序之巧">数学之美，程序之巧</h1>
<p>计算机程序，简单来说，就是指令和数据的组合。程序可以通过算法组成相应的逻辑系统，逻辑系统可以根据编写者需求来完成各种各样的事情。</p>
<p>计算机内部数据处理方式是什么样？</p>
<p>这个问题可以从机器语言开始说起，如果要说到机器语言自然就要聊一聊编程语言喽：</p>
<p>编程语言（英语：programming language），是用来定义计算机程序的形式语言。它是一种被标准化的交流技巧，用来向计算机发出指令。一种能够让程序员准确地定义计算机所需要使用数据的计算机语言，并精确地定义在不同情况下所应当采取的行动。^1^</p>
<p>机器语言是编程语言最初的一个代表，机器语言的表示方式通常是101010的二进制方式，这也是计算机运行最底层的内容和最底层的模块，在101010的运算模式是非常适合计算机进行计算的。编程就是数据和指令的集合，而计算机就是将101010的二进制数字进行运算，计算机的运算方式通常由逻辑运算和算术运算。但是这和数学有什么关系吗？计算机的运算是数学理论产生的产物，集成电路上闪动的光波，跳动的粒子都是多少数学家理论的产物呀！</p>
<p>话说回来，机器语言现在几乎都不使用，都在使用高级编程语言。根据现在的情况，编程语言有大致三代。第一代编程语言是机器语言，编写非常复杂。第二代编程语言是汇编语言，编写相对机器语言简单了许多，但是仍然是比较复杂的语言。第三代编程语言是现在非常经常使用的高级编程语言，C语言，C++语言，Java语言等静态语言以及Python，PHP，Ruby，JavaScript等动态语言。发展到第三代编程语言，编程的难度大大降低。</p>
<p>但是，编程和数学有什么关系呢？</p>
<p>个人认为，编程本身是美的，数学亦是美的。编程的美是基于数学的逻辑，数学的理论和数学中的各种各样的奇妙变换。编程如果接触到了比较底层的内容，也就到了最核心的部分——数据结构和算法，而数据结构和算法很多的知识都是基于数学的思考。这里用算法里面的时间复杂度和数学中的微积分做一下对比：</p>
<p>$$
O(n \cdot \ln:n)
$$</p>
<p>$$
f(x) =  n \cdot \ln : n
$$</p>
<p>这两个公式是非常相像的，而时间复杂度的比较其实也是基于微积分中极限的概念进行比较的。</p>
<p>如果要比较 (O(\ln : n)) 和 (O(n))的时间复杂度，该怎么比较呢？</p>
<p>这里可以使用微积分中的无穷小比较来进行比较的，同样是采用微积分中的极限的思想来进行比较的：</p>
<p>$$
\lim_{x \to +\infty} \frac{\ln : n}{n} = 0
$$</p>
<p>这个式子在微积分中是非常常见的概念，通过数学的证明来证明这个结论。根据这个结论就可以非常容易的判断出时间复杂度之间的大小。这是数学在编程算法中的一个应用。通过这个应用可以说明计算机编程和数学之间的微妙关系。</p>
<p>进行数学问题研究的人员往往是高深的数学家，而进行计算机编程的人员往往是秃头的程序员，程序员很少研究数学问题，但是程序员也了解一部分数学知识。而数学家和程序员之间又有什么关系呢？</p>
<p>程序员是敲代码，负责对功能的实现，是应用方面的。而数学家是解决数学问题的，使用数学优美的证明和严谨的逻辑来证明数学问题，是理论方面的。看起来是没有什么必然的联系，其实进行连接的中介就是计算机科学家，他们负责对计算机理论的研究和算法的创新求解，他们会整合数学家的最新的研究成功并尝试融入到计算机理论中去。程序员可以从计算机理论中的很多相关内容中，进行代码和设计方面的功能实现，优化服务。</p>
<p>现在的大时代趋势是万物互联，每个学科都不在是孤立存在的学科，学科之间彼此有着多重的交叉。随着时代的进步，学科交叉应该会越来越明显，而计算机和数学关系是非常密切的，应该会最先进行交叉研究，其实现在已经进行交叉研究了。</p>
<p>我个人认为程序员应该是有一种对于数学的热爱，看到数学优美的证明会心生惊叹，面对数学问题会竭尽全力去攻克数学问题。其实这其实也是程序员对于程序和代码的一种态度，一种专业素养。程序员往往都会追求完美，希望程序可以不断优化不断进行完善，更少的BUG，更高的性能。这无非不是对于数学赞扬和感叹。</p>
<p>数学之美，程序之巧，尽展心中，会现颅内。</p>
<h3 id="参考">参考</h3>
<ol>
<li><a href="https://wiwiki.kfd.me/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80">编程语言-维基百科</a></li>
</ol>
<p>闲聊到此为止，来喝杯茶可好？</p>
]]></content>
        </item>
        
        <item>
            <title>浅谈椭圆曲线加密算法(ECC)</title>
            <link>/posts/%E6%B5%85%E8%B0%88%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95ecc/</link>
            <pubDate>Sat, 29 Jan 2022 09:22:23 +0800</pubDate>
            
            <guid>/posts/%E6%B5%85%E8%B0%88%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95ecc/</guid>
            <description>浅谈椭圆曲线加密算法（ECC） 椭圆曲线加密算法是近十年提出的一个非对称加密算法，这个加密算法非常复杂，加密的数据具有良好的保密性。加密效果比RSA加密算法都高。这次不可能全部将ECC加密算法讲完，只能简单聊聊ECC加密算法的基本概念和ECC加密算法的数学基础了。
什么是ECC加密算法？
椭圆曲线密码学（英语：Elliptic Curve Cryptography，缩写：ECC）是一种基于椭圆曲线数学的公开密钥加密算法。椭圆曲线在密码学中的使用是在1985年由Neal Koblitz（英语：Neal Koblitz）和Victor Miller（英语：Victor Miller）分别独立提出的。
ECC的主要优势是它相比RSA加密算法使用较小的密钥长度并提供相当等级的安全性[1]。ECC的另一个优势是可以定义群之间的双线性映射，基于Weil对或是Tate对；双线性映射已经在密码学中发现了大量的应用，例如基于身份的加密。^1^
椭圆曲线加密算法，简称ECC，是基于椭圆曲线数学理论实现的一种非对称加密算法。相比RSA，ECC优势是可以使用更短的密钥，来实现与RSA相当或更高的安全，RSA加密算法也是一种非对称加密算法，在公开密钥加密和电子商业中RSA被广泛使用。据研究，160位ECC加密安全性相当于1024位RSA加密，210位ECC加密安全性相当于2048位RSA加密（有待考证）。^2^
ECC加密算法需要的数学理论基础相对来说是比较高的层次方面，远比RSA的数学难度高。看来，数学上层理论的基础是对密码学产生了比较大的影响。下面，来简单聊聊数学基础吧。
数学基础 阿贝尔群 刚看到这个的时候，我的第一反应是：这是什么东西？（一脸懵逼）
阿贝尔群其实就是针对椭圆曲线的概念抽象的一个群，简单来说就是针对椭圆曲线的加减乘除规则。概念的变换，就像刚开始学习微积分的加减乘除规则转换到矩阵的加减乘除规律一样。群其实就是一种推广的矩阵。那么，阿贝尔群定义了些什么有趣的东西呢？
封闭性：如果$ a $和$ b $ 都是阿贝尔群的成员，那么 $ a + b $ 也是阿贝尔群的成员 结合律：$ (a+b)+c=a+(b+c) $ 单位元：如果$ a+0=0+a=a $，则 $ 0 $就是单位元 逆元：对于任意值$ a $必定存在$ b $，使得$ a+b=0 $ 交换律：$ a + b = b + a $ 根据这个定义整数集是个阿贝尔群。
椭圆曲线的数学性质 加法 过曲线上的两点$ A $、$ B $画一条直线，找到直线与椭圆曲线的交点，交点关于$ x $轴对称位置的点，定义为$ A+B $，即为加法。
二倍运算 上述方法无法解释$ A + A $，即两点重合的情况，因此在这种情况下，将椭圆曲线在$ A $点的切线，与椭圆曲线的交点，交点关于$ x $轴对称位置的点，定义为$ A + A $，即$ 2A $，即为二倍运算。</description>
            <content type="html"><![CDATA[<h1 id="浅谈椭圆曲线加密算法ecc">浅谈椭圆曲线加密算法（ECC）</h1>
<p>椭圆曲线加密算法是近十年提出的一个非对称加密算法，这个加密算法非常复杂，加密的数据具有良好的保密性。加密效果比RSA加密算法都高。这次不可能全部将ECC加密算法讲完，只能简单聊聊ECC加密算法的基本概念和ECC加密算法的数学基础了。</p>
<p>什么是ECC加密算法？</p>
<p>椭圆曲线密码学（英语：Elliptic Curve Cryptography，缩写：ECC）是一种基于椭圆曲线数学的公开密钥加密算法。椭圆曲线在密码学中的使用是在1985年由Neal Koblitz（英语：Neal Koblitz）和Victor Miller（英语：Victor Miller）分别独立提出的。</p>
<p>ECC的主要优势是它相比RSA加密算法使用较小的密钥长度并提供相当等级的安全性[1]。ECC的另一个优势是可以定义群之间的双线性映射，基于Weil对或是Tate对；双线性映射已经在密码学中发现了大量的应用，例如基于身份的加密。^1^</p>
<p>椭圆曲线加密算法，简称ECC，是基于椭圆曲线数学理论实现的一种非对称加密算法。相比RSA，ECC优势是可以使用更短的密钥，来实现与RSA相当或更高的安全，RSA加密算法也是一种非对称加密算法，在公开密钥加密和电子商业中RSA被广泛使用。据研究，160位ECC加密安全性相当于1024位RSA加密，210位ECC加密安全性相当于2048位RSA加密（有待考证）。^2^</p>
<p>ECC加密算法需要的数学理论基础相对来说是比较高的层次方面，远比RSA的数学难度高。看来，数学上层理论的基础是对密码学产生了比较大的影响。下面，来简单聊聊数学基础吧。</p>
<h3 id="数学基础">数学基础</h3>
<h4 id="阿贝尔群">阿贝尔群</h4>
<blockquote>
<p>刚看到这个的时候，我的第一反应是：这是什么东西？（一脸懵逼）</p>
</blockquote>
<p>阿贝尔群其实就是针对椭圆曲线的概念抽象的一个群，简单来说就是针对椭圆曲线的加减乘除规则。概念的变换，就像刚开始学习微积分的加减乘除规则转换到矩阵的加减乘除规律一样。群其实就是一种推广的矩阵。那么，阿贝尔群定义了些什么有趣的东西呢？</p>
<ul>
<li>封闭性：如果$ a $和$ b $ 都是阿贝尔群的成员，那么 $ a + b $ 也是阿贝尔群的成员</li>
<li>结合律：$ (a+b)+c=a+(b+c) $</li>
<li>单位元：如果$ a+0=0+a=a $，则 $ 0 $就是单位元</li>
<li>逆元：对于任意值$ a $必定存在$ b $，使得$ a+b=0 $</li>
<li>交换律：$ a + b = b + a $</li>
</ul>
<p>根据这个定义整数集是个阿贝尔群。</p>
<h4 id="椭圆曲线的数学性质">椭圆曲线的数学性质</h4>
<h5 id="加法">加法</h5>
<p>过曲线上的两点$ A $、$ B $画一条直线，找到直线与椭圆曲线的交点，交点关于$ x $轴对称位置的点，定义为$ A+B $，即为加法。</p>
<h5 id="二倍运算">二倍运算</h5>
<p>上述方法无法解释$ A + A $，即两点重合的情况，因此在这种情况下，将椭圆曲线在$ A $点的切线，与椭圆曲线的交点，交点关于$ x $轴对称位置的点，定义为$ A + A $，即$ 2A $，即为二倍运算。</p>
<h4 id="同余运算">同余运算</h4>
<p>同余就是有相同的余数，两个整数 a、 b，若它们除以正整数 m所得的余数相等，则称$ a $，$  b $对于模m同余。</p>
<p>$$
a\equiv b(mod;m)
$$</p>
<h4 id="乘法逆元">乘法逆元</h4>
<p>这是比较简单的一个概念，在RSA加密算法里面也进行了阐述，这里就举个例子说明吧：</p>
<p>在模7乘法中：</p>
<ul>
<li>1的逆元为1 $ (1 \times 1) \mod ; 7=1 $</li>
<li>2的逆元为4 $ (2 \times 4) \mod ; 7=1 $</li>
<li>3的逆元为5 $ (3 \times 5) \mod ; 7=1 $</li>
<li>4的逆元为2 $ (4 \times 2) \mod ; 7=1 $</li>
<li>5的逆元为3 $ (5 \times 3) \mod ; 7=1 $</li>
<li>6的逆元为6 $ (6 \times 6) \mod ; 7=1 $</li>
</ul>
<p>这些大致就是ECC所需要的大致的数学理论，可能也只是很少的一部分数学理论，毕竟ECC加密算法的安全性是非常高的，因此可以考虑在ECC算法的基础进行改进和拓展出更多的ECC变体的加密算法，ECC的数学理论主要是建立在抽象代数相关理论中，可以补抽象代数的相关内容来进行ECC加密算法的深入了解。</p>
<h3 id="参考">参考：</h3>
<ol>
<li><a href="https://wiwiki.kfd.me/wiki/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6">椭圆曲线密码学-维基百科</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/101907402">椭圆曲线加密算法(ECC)-知乎</a></li>
</ol>
<p>闲聊到此为止，来喝杯茶可好？</p>
]]></content>
        </item>
        
        <item>
            <title>进程与线程</title>
            <link>/posts/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link>
            <pubDate>Sat, 29 Jan 2022 09:20:55 +0800</pubDate>
            
            <guid>/posts/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</guid>
            <description>进程与线程的理解 个人对于进程和线程概念的理解，可能会有些偏差
进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。^1^
线程（英语：thread）是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。^2^
百度百科上面的解释是一种比较抽象的解释，看了不是非常容易理解。
可以进程的概念和线程的概念联系到一起进行理解
首先明确一下进程的概念：
“进程是数据集合的运行运动”，这句话简单来说就是将数据进行整合的封装成一个又个文件，而这些文件就是模块。
“线程是操作系统能够进行运算调度的最小单位”，这句话简单来说就是线程把各种文件模块跑起来的单位。
这就需要了解一下一个程序是如何跑起来的了？ 一个程序要运行起来需要创建进程，**所有的进程都是别的进程创建的（第一个进程是由操作系统内核创建的）**都是由explorer.exe这个进程创建的。
Explorer是怎么创建进程的？
它调用了一个函数：CreateProcess()，把我们的程序变成了进程
CreateProcess怎么把一个程序变成进程的？
映射exe文件
创建内核对象EPROCESS
映射系统DLL(ntdll.dll)
创建线程内核对象ETHREAD
系统启动线程
5.1 映射DLL(ntdll.LdrlnitializeThunk)
5.2 线程开始执行
进程提供代码、资源、数据等，使用这些东西的都是线程，不然它就是一个死的
那么该怎么去理解进程和线程 我个人找到了几个理解线程和进程的角度：
生物学的角度 参考有丝分裂的过程来进行进程与线程的理解
根据高中生物学的基础知识来理解，我们都知道生物的有丝分裂的过程是一个高中生物学非常基本的分裂过程。有丝分裂主要分为两个重要的时期，分裂间期和分裂期。根据最基本的高中生物知识可以很容易地知道，分裂间期需要准备资源的过程，也就是蛋白质和DNA复制的过程。分裂期也就是利用资源进行分裂的过程。
我们可以这样理解进程和线程，进程提供代码、资源、数据。线程进行程序的运算。仔细观察线程和进程是不是和生物学中的有丝分裂的分裂间期和分裂期。
我们可以把有丝分裂的分裂间期来看作进程的过程，把有丝分裂的分裂期来看作线程的过程。
这样进行类比，对于进程和线程的理解就非常清晰了。
面向对象的角度 面向对象的思想是现代编程的一个重要思想，通过面向对象的概念可以比较清晰地理解进程和线程的关系。
面向对象是一种抽象的思维过程，有几个比较关键的概念，类，构造函数，析构函数，实例化。在编程过程中，会经常使用到面向对象的思想。
#include &amp;lt;iostream&amp;gt; class MyObj { int var = 0; public: MyObj() { var = 10; } int run() { std::cout &amp;lt;&amp;lt; &amp;#34;the program running!&amp;#34; &amp;lt;&amp;lt; std::endl; return 0; } ~MyObj() { var = 0; } }; int main(){ MyObj* obj = new MyObj(); obj-&amp;gt;run(); return 0; } 这是C++中简单的对象格式。</description>
            <content type="html"><![CDATA[<h1 id="进程与线程的理解">进程与线程的理解</h1>
<p>个人对于进程和线程概念的理解，可能会有些偏差</p>
<blockquote>
<p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>结构的基础。^1^</p>
<p><strong>线程</strong>（英语：thread）是<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>能够进行运算<a href="https://baike.baidu.com/item/%E8%B0%83%E5%BA%A6">调度</a>的最小单位。它被包含在<a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B">进程</a>之中，是<a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B">进程</a>中的实际运作单位。^2^</p>
</blockquote>
<p>百度百科上面的解释是一种比较抽象的解释，看了不是非常容易理解。</p>
<p>可以进程的概念和线程的概念联系到一起进行理解</p>
<p>首先明确一下进程的概念：</p>
<p>“进程是数据集合的运行运动”，这句话简单来说就是将数据进行整合的封装成一个又个文件，而这些文件就是模块。</p>
<p>“线程是操作系统能够进行运算调度的最小单位”，这句话简单来说就是线程把各种文件模块跑起来的单位。</p>
<h2 id="这就需要了解一下一个程序是如何跑起来的了">这就需要了解一下一个程序是如何跑起来的了？</h2>
<p>一个程序要运行起来需要创建进程，**所有的进程都是别的进程创建的（第一个进程是由操作系统内核创建的）**都是由explorer.exe这个进程创建的。</p>
<p>Explorer是怎么创建进程的？</p>
<p>它调用了一个函数：<code>CreateProcess()</code>，把我们的程序变成了进程</p>
<p><code>CreateProcess</code>怎么把一个程序变成进程的？</p>
<ol>
<li>
<p>映射exe文件</p>
</li>
<li>
<p>创建内核对象EPROCESS</p>
</li>
<li>
<p>映射系统DLL(ntdll.dll)</p>
</li>
<li>
<p>创建线程内核对象ETHREAD</p>
</li>
<li>
<p>系统启动线程</p>
<p>5.1 映射DLL(ntdll.LdrlnitializeThunk)</p>
<p>5.2 线程开始执行</p>
</li>
</ol>
<blockquote>
<p>进程提供代码、资源、数据等，使用这些东西的都是线程，不然它就是一个死的</p>
</blockquote>
<h2 id="那么该怎么去理解进程和线程">那么该怎么去理解进程和线程</h2>
<p>我个人找到了几个理解线程和进程的角度：</p>
<h3 id="生物学的角度">生物学的角度</h3>
<p>参考有丝分裂的过程来进行进程与线程的理解</p>
<p>根据高中生物学的基础知识来理解，我们都知道生物的有丝分裂的过程是一个高中生物学非常基本的分裂过程。有丝分裂主要分为两个重要的时期，分裂间期和分裂期。根据最基本的高中生物知识可以很容易地知道，分裂间期需要准备资源的过程，也就是蛋白质和DNA复制的过程。分裂期也就是利用资源进行分裂的过程。</p>
<p>我们可以这样理解进程和线程，进程提供代码、资源、数据。线程进行程序的运算。仔细观察线程和进程是不是和生物学中的有丝分裂的分裂间期和分裂期。</p>
<p>我们可以把有丝分裂的分裂间期来看作进程的过程，把有丝分裂的分裂期来看作线程的过程。</p>
<p>这样进行类比，对于进程和线程的理解就非常清晰了。</p>
<h3 id="面向对象的角度">面向对象的角度</h3>
<p>面向对象的思想是现代编程的一个重要思想，通过面向对象的概念可以比较清晰地理解进程和线程的关系。</p>
<p>面向对象是一种抽象的思维过程，有几个比较关键的概念，类，构造函数，析构函数，实例化。在编程过程中，会经常使用到面向对象的思想。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyObj</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> var <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    MyObj() {
</span></span><span style="display:flex;"><span>        var <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">run</span>() {
</span></span><span style="display:flex;"><span>        std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;the program running!&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">~</span>MyObj() {
</span></span><span style="display:flex;"><span>        var <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(){
</span></span><span style="display:flex;"><span>    MyObj<span style="color:#f92672">*</span> obj <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> MyObj();
</span></span><span style="display:flex;"><span>    obj<span style="color:#f92672">-&gt;</span>run();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>这是C++中简单的对象格式。</p>
<p>创建对象实例时，实例会进行初始化。对象实例进行初始化的过程中，会初始化对象实例所需的资源代码。</p>
<p>对象实例调用成员方法时，对象就会使用初始化的一些资源进行成员函数的调用。</p>
<p>根据我个人的理解，面向对象的编程过程，其实就和进程与线程的原理相似。可以把进程的准备过程理解成初始化，线程作为成员函数的调用。只不过，进程和线程是一个完全连续的过程，没有线程进程就是死的。</p>
<hr>
<p>以上是我对于进程和线程的理解，可能略有不足。</p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://baike.baidu.com/item/%E8%BF%9B%E7%A8%8B/382503">进程（一段程序的执行过程）_百度百科 (baidu.com)</a></li>
<li><a href="https://baike.baidu.com/item/%E7%BA%BF%E7%A8%8B/103101">线程（计算机术语）_百度百科 (baidu.com)</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>杯茗藏香，君闻几何</title>
            <link>/posts/%E6%9D%AF%E8%8C%97%E8%97%8F%E9%A6%99%E5%90%9B%E9%97%BB%E5%87%A0%E4%BD%95/</link>
            <pubDate>Sat, 29 Jan 2022 08:07:30 +0800</pubDate>
            
            <guid>/posts/%E6%9D%AF%E8%8C%97%E8%97%8F%E9%A6%99%E5%90%9B%E9%97%BB%E5%87%A0%E4%BD%95/</guid>
            <description>杯茗藏香，君闻几何 “浅谈密码学” 密文寥寥，清茶袅袅。
杯杯入境，字字明心。
密码学是主要研究密码编码和解码的一种学科，主要目标是提供在不安全的信道上的安全通信机制^1^
根据OWASP上面的定义来开启我们的闲聊。“密码学是主要研究密码编码和解码的一种学科”，这里有两个比较关键的词汇。密码编码和解码，密码比较好理解。平时我们注册一个账户的时候通常就需要一个密码来进行登入，密码和账户构成了网络账户的基本符号。那么，编码和解码又该怎么理解呢？
编码是信息从一种形式或格式转换为另一种形式的过程，也称为计算机编程语言的代码简称编码。^2^
编码，简单来说就是对内容进行编制，来确保内容不会影响到互联网整体的传输过程。在互联网中，数据传输通常是采用http，ftp，https等协议进行传输的。这些协议中也会有些特殊的字符有特殊的功能性作用，如果不进行编码，可能会出现预期之外的事故。当然编码也有一些安全性的作用，可以确保数据传输过程中数据不是特别明显的暴露，有较大的截获风险。
编码是互联网中不可或缺的一种数据处理方式。
解码是一种用特定方法，把数码还原成它所代表的内容或将电脉冲信号、光信号、无线电波等转换成它所代表的信息、数据等的过程。解码是受传者将接受到的符号或代码还原为信息的过程，与编码过程相对应。^3^
解码，就是将编码的内容进行还原的过程。意思很明了，在互联网中一般会将解码后的信息展示给用户，在数据传输的过程中，将数据进行编码传输。为什么这样做？一方面是为了用户的使用体验，另一方面是为了数据传输的正常进行和安全性保障。
OWASP的密码学定义相对来说是比较狭义的，只对互联网中的简单过程进行了定义，将密码学研究的范围缩小了。
那么，密码学是什么呢？
密码学，就是将OWASP对于密码学的定义进行推广和扩充。编码不仅仅限制于互联网、计算机领域中，解码也不仅仅仅限于互联网、计算机领域方面。编码就变成了加密的一个子集，解码就变成了解密的一个子集。加密前的数据就有了一个比较完整的概念，即明文。加密后的数据也有了一个名字叫密文。进行加密的工具叫做密钥。这些是密码学的基础性的概念。这些概念和体系形成了密码学的大集体。
下面是百度百科给出的对于密码学的具体定义和描述。
密码学（在西欧语文中，源于希腊语kryptós“隐藏的”，和gráphein“书写”）是研究如何隐密地传递信息的学科。在现代特别指对信息以及其传输的数学性研究，常被认为是数学和计算机科学的分支，和信息论也密切相关。著名的密码学者Ron Rivest解释道：“密码学是关于如何在敌人存在的环境中通讯”，自工程学的角度，这相当于密码学与纯数学的异同。密码学是信息安全等相关议题，如认证、访问控制的核心。密码学的首要目的是隐藏信息的涵义，并不是隐藏信息的存在。密码学也促进了计算机科学，特别是在于电脑与网络安全所使用的技术，如访问控制与信息的机密性。密码学已被应用在日常生活：包括自动柜员机的芯片卡、电脑使用者存取密码、电子商务等等。^4^
密码学不仅仅只是计算机领域的内容，也是一种比较多元化的体系，但是主要应用于计算机领域。密码学会涉及到很多与数学相关联的知识体系，从微积分到线性代数、概率论以及离散数学，再从线性代数到抽象代数，再从抽象代数到数论。几乎数学方面比较难的模块都涉及到了密码学中，仿佛富有丰富的能量和特别的活力。
这回只是对密码学的初步探索和学习，有时候知识都是相通的，都是彼此有联系的存在。密码学何尝不是呢？喝杯茶其实也是种生活种的密码学。
密码学有密文和明文，茶叶中有遗传密码和表现型，有香气分子和味觉感受。密码学应该是和生物学一样，是非常beautiful的学科，一定非常好玩！
请君先闻龙井香，道出多少古时芳。
参考： http://www.owasp.org.cn/ https://baike.baidu.com/item/%E7%BC%96%E7%A0%81/80092 https://baike.baidu.com/item/%E8%A7%A3%E7%A0%81 https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E5%AD%A6 闲聊到此为止，来喝杯茶可好？</description>
            <content type="html"><![CDATA[<h1 id="杯茗藏香君闻几何">杯茗藏香，君闻几何</h1>
<h2 id="浅谈密码学">“浅谈密码学”</h2>
<blockquote>
<p>密文寥寥，清茶袅袅。</p>
<p>杯杯入境，字字明心。</p>
</blockquote>
<p>密码学是主要研究密码编码和解码的一种学科，主要目标是提供在不安全的信道上的安全通信机制^1^</p>
<p>根据OWASP上面的定义来开启我们的闲聊。“密码学是主要研究密码编码和解码的一种学科”，这里有两个比较关键的词汇。密码编码和解码，密码比较好理解。平时我们注册一个账户的时候通常就需要一个密码来进行登入，密码和账户构成了网络账户的基本符号。那么，编码和解码又该怎么理解呢？</p>
<p>编码是信息从一种形式或格式转换为另一种形式的过程，也称为计算机编程语言的代码简称编码。^2^</p>
<p>编码，简单来说就是对内容进行编制，来确保内容不会影响到互联网整体的传输过程。在互联网中，数据传输通常是采用http，ftp，https等协议进行传输的。这些协议中也会有些特殊的字符有特殊的功能性作用，如果不进行编码，可能会出现预期之外的事故。当然编码也有一些安全性的作用，可以确保数据传输过程中数据不是特别明显的暴露，有较大的截获风险。</p>
<p>编码是互联网中不可或缺的一种数据处理方式。</p>
<p>解码是一种用特定方法，把数码还原成它所代表的内容或将电脉冲信号、光信号、无线电波等转换成它所代表的信息、数据等的过程。解码是受传者将接受到的符号或代码还原为信息的过程，与编码过程相对应。^3^</p>
<p>解码，就是将编码的内容进行还原的过程。意思很明了，在互联网中一般会将解码后的信息展示给用户，在数据传输的过程中，将数据进行编码传输。为什么这样做？一方面是为了用户的使用体验，另一方面是为了数据传输的正常进行和安全性保障。</p>
<p>OWASP的密码学定义相对来说是比较狭义的，只对互联网中的简单过程进行了定义，将密码学研究的范围缩小了。</p>
<p>那么，密码学是什么呢？</p>
<p>密码学，就是将OWASP对于密码学的定义进行推广和扩充。编码不仅仅限制于互联网、计算机领域中，解码也不仅仅仅限于互联网、计算机领域方面。编码就变成了加密的一个子集，解码就变成了解密的一个子集。加密前的数据就有了一个比较完整的概念，即明文。加密后的数据也有了一个名字叫密文。进行加密的工具叫做密钥。这些是密码学的基础性的概念。这些概念和体系形成了密码学的大集体。</p>
<p>下面是百度百科给出的对于密码学的具体定义和描述。</p>
<p>密码学（在西欧语文中，源于希腊语kryptós“隐藏的”，和gráphein“书写”）是研究如何隐密地传递信息的学科。在现代特别指对信息以及其传输的数学性研究，常被认为是数学和计算机科学的分支，和信息论也密切相关。著名的密码学者Ron Rivest解释道：“密码学是关于如何在敌人存在的环境中通讯”，自工程学的角度，这相当于密码学与纯数学的异同。密码学是信息安全等相关议题，如认证、访问控制的核心。密码学的首要目的是隐藏信息的涵义，并不是隐藏信息的存在。密码学也促进了计算机科学，特别是在于电脑与网络安全所使用的技术，如访问控制与信息的机密性。密码学已被应用在日常生活：包括自动柜员机的芯片卡、电脑使用者存取密码、电子商务等等。^4^</p>
<p>密码学不仅仅只是计算机领域的内容，也是一种比较多元化的体系，但是主要应用于计算机领域。密码学会涉及到很多与数学相关联的知识体系，从微积分到线性代数、概率论以及离散数学，再从线性代数到抽象代数，再从抽象代数到数论。几乎数学方面比较难的模块都涉及到了密码学中，仿佛富有丰富的能量和特别的活力。</p>
<p>这回只是对密码学的初步探索和学习，有时候知识都是相通的，都是彼此有联系的存在。密码学何尝不是呢？喝杯茶其实也是种生活种的密码学。</p>
<p>密码学有密文和明文，茶叶中有遗传密码和表现型，有香气分子和味觉感受。密码学应该是和生物学一样，是非常beautiful的学科，一定非常好玩！</p>
<p>请君先闻龙井香，道出多少古时芳。</p>
<h2 id="参考">参考：</h2>
<ol>
<li><a href="http://www.owasp.org.cn/https://baike.baidu.com/item/%E7%BC%96%E7%A0%81/80092https://baike.baidu.com/item/%E8%A7%A3%E7%A0%81">http://www.owasp.org.cn/</a></li>
<li><a href="http://www.owasp.org.cn/https://baike.baidu.com/item/%E7%BC%96%E7%A0%81/80092https://baike.baidu.com/item/%E8%A7%A3%E7%A0%81">https://baike.baidu.com/item/%E7%BC%96%E7%A0%81/80092</a></li>
<li><a href="http://www.owasp.org.cn/https://baike.baidu.com/item/%E7%BC%96%E7%A0%81/80092https://baike.baidu.com/item/%E8%A7%A3%E7%A0%81">https://baike.baidu.com/item/%E8%A7%A3%E7%A0%81</a></li>
<li><a href="https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E5%AD%A6">https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E5%AD%A6</a></li>
</ol>
<p>闲聊到此为止，来喝杯茶可好？</p>
]]></content>
        </item>
        
        <item>
            <title>一花一世界，一码一千秋</title>
            <link>/posts/%E4%B8%80%E8%8A%B1%E4%B8%80%E4%B8%96%E7%95%8C%E4%B8%80%E7%A0%81%E4%B8%80%E5%8D%83%E7%A7%8B/</link>
            <pubDate>Sat, 29 Jan 2022 08:02:58 +0800</pubDate>
            
            <guid>/posts/%E4%B8%80%E8%8A%B1%E4%B8%80%E4%B8%96%E7%95%8C%E4%B8%80%E7%A0%81%E4%B8%80%E5%8D%83%E7%A7%8B/</guid>
            <description>一花一世界，一码一千秋 ”逆向工程初步“ 逆向工程应该是一门优雅的艺术，而不是一些低层次者手中的粗陋工具；
逆向工程的目的是学习与再利用；
逆向工程的精神是“自由”。
《加密与解密》
什么是逆向工程？ 逆向工程（Reverse engineering），又称反向工程，是一种技术过程，即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能性能规格等设计要素，以制作出功能相近，但又不完全一样的产品。逆向工程源于商业及军事领域中的硬件分析。其主要目的是，在无法轻易获得必要的生产信息下，直接从成品的分析，推导产品的设计原理。^1^
通俗来讲，逆向工程就是将机器才能够懂的机器代码（0101二进制代码）翻译成人能够读懂的代码（汇编、smali代码）。 但实际情况往往是，我们只寻找关键的代码去翻译或仅了解其业务逻辑，因为要将所有的机器代码翻译出来，工作量是极其巨大的且繁琐的。^2^
逆向技术在实际业务中一般应用于以下几个方面：二进制漏洞挖掘、软件破解、恶意代码分析、竞品分析等。
逆向工程涉及的知识面非常广，从计算机基础原理到计算机架构，再到各种编程语言的编译原理。逆向工程往往需要对算法进行逆向，对操作系统架构进行逆向，这就要求逆向工程师有不错的算法水平，而且对计算机相关的原理深入理解。
一个逆向工程大师，也许具有如下特征。
永远保持好奇心，崇尚自由——既能促使探索，也能抵抗商业利益和欲望的侵袭。有了它，枯燥的代码世界才有了生气。 勤奋与毅力。在一篇关于逆向的文章中有这样的语句：“让我们搞清楚作为一名逆向工作者需要具备的基本条件，其实那并不是扎实的汇编功底和编程基础——可以完全不懂这些，秘诀就是勤奋加上执着！记住并做到这两点，你一样可以变得优秀。” 精通至少一门编程语言——不仅仅是代码，更重要的是编程思想。 扎实的汇编功底和系统编程知识。 基础知识 汇编语言 C语言 一门脚本语言(Python) Windows核心编程 PE文件格式 程序加载流程 基础工具 查壳工具（DIE、PEID、EXEINFO、LordPE、ResourceHacker等） 常用脱壳工具或脱壳脚本（专属壳的脱壳器例如upx等、各种壳的脱壳脚本） 十六进制编辑器（010Editor、winhex等） 反汇编工具（IDA、Hopper） 调试器（Ollydbg、gdb、windbg等） 这些都是比较常用的逆向工具。其中特别要熟练使用IDA与Ollydbg，IDA一般用来做静态分析，其中的F5功能更是强大到没朋友，新手必备。Ollydbg简称OD一般用来做动态调试使用，两者结合使用堪比倚天剑和屠龙刀，可谓是神挡杀神佛挡杀佛。^3^
逆向的分类 解释型语言的逆向 编译型语言的逆向 分析手段 静态分析 动态分析 网络流量分析 猜 静态分析 将机器代码反汇编成方便人类理解的代码，如smali代码（Java）、汇编代码或汇编代码翻译的C语言伪代码等等，通过分析这些比较低级的编程语言的代码，找到程序的业务流程或设计逻辑。
动态分析 通过断点调试手段，让程序单步执行进行分析。动态分析往往是在静态分析出一定的结果的基础上进行，找到合适的地方给代码打断点，即时地读取当前变量的值，来进一步分析程序的逻辑、获取程序关系数据。
网络流量分析 通过代理方式或者其他方式，截取程序与服务器通信的数据流量（抓包），来分析客户端和服务端的通信协议。网络流量分析比较有局限性，若客户端使用Http这种明文传输的协议，会比较容易分析；但如果客户端使用SSL、Https等加密传输协议与服务端进行通信，那么抓包的前提是需要拿到服务端下发给客户端的证书才能进一步解密分析，这种情况下就比较棘手。网上有方案通过安装插件拿到Chrome或者Firefox浏览器的本地证书，但只适用于客户端是网页的情况。若其他大佬有好的宝贵经验，还望能指点迷津。
猜 猜测的前提是，你需要有一定的编程经验，能够在逆向分析出一些代码后，对其上下的代码进行合理的推测，推测不出来的代码再通过以上手段分析。可以这么说，你的推测能力决定了你的逆向分析效率，而编程经验则是你猜测能力的基石。
逆向工程的学习是一条漫长的道路，每一个逆向工程师都是一个优秀的开发者，只不过他们选择去挑战更有深度，更有趣味的事情。加密与解密，解开每一段代码的意味，看到软件背后潜藏的世界，正所谓，一花一世界，一码一千秋嘛。
参考 逆向工程-维基百科 逆向工程入门概述-知乎 CTF逆向选手入坑指南-FreeBuf 闲聊到此为止，来喝杯茶可好？</description>
            <content type="html"><![CDATA[<h1 id="一花一世界一码一千秋">一花一世界，一码一千秋</h1>
<h2 id="逆向工程初步">”逆向工程初步“</h2>
<blockquote>
<p>逆向工程应该是一门优雅的艺术，而不是一些低层次者手中的粗陋工具；</p>
<p>逆向工程的目的是学习与再利用；</p>
<p>逆向工程的精神是“自由”。</p>
<p>《加密与解密》</p>
</blockquote>
<h3 id="什么是逆向工程">什么是逆向工程？</h3>
<p>逆向工程（Reverse engineering），又称反向工程，是一种技术过程，即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能性能规格等设计要素，以制作出功能相近，但又不完全一样的产品。逆向工程源于商业及军事领域中的硬件分析。其主要目的是，在无法轻易获得必要的生产信息下，直接从成品的分析，推导产品的设计原理。^1^</p>
<p>通俗来讲，逆向工程就是将机器才能够懂的机器代码（0101二进制代码）翻译成人能够读懂的代码（汇编、smali代码）。 但实际情况往往是，我们只寻找关键的代码去翻译或仅了解其业务逻辑，因为要将所有的机器代码翻译出来，工作量是极其巨大的且繁琐的。^2^</p>
<p>逆向技术在实际业务中一般应用于以下几个方面：二进制漏洞挖掘、软件破解、恶意代码分析、竞品分析等。</p>
<p>逆向工程涉及的知识面非常广，从计算机基础原理到计算机架构，再到各种编程语言的编译原理。逆向工程往往需要对算法进行逆向，对操作系统架构进行逆向，这就要求逆向工程师有不错的算法水平，而且对计算机相关的原理深入理解。</p>
<p>一个逆向工程大师，也许具有如下特征。</p>
<ul>
<li>永远保持好奇心，崇尚自由——既能促使探索，也能抵抗商业利益和欲望的侵袭。有了它，枯燥的代码世界才有了生气。</li>
<li>勤奋与毅力。在一篇关于逆向的文章中有这样的语句：“让我们搞清楚作为一名逆向工作者需要具备的基本条件，其实那并不是扎实的汇编功底和编程基础——可以完全不懂这些，秘诀就是勤奋加上执着！记住并做到这两点，你一样可以变得优秀。”</li>
<li>精通至少一门编程语言——不仅仅是代码，更重要的是编程思想。</li>
<li>扎实的汇编功底和系统编程知识。</li>
</ul>
<h3 id="基础知识">基础知识</h3>
<ol>
<li>汇编语言</li>
<li>C语言</li>
<li>一门脚本语言(Python)</li>
<li>Windows核心编程</li>
<li>PE文件格式</li>
<li>程序加载流程</li>
</ol>
<h3 id="基础工具">基础工具</h3>
<ol>
<li>查壳工具（DIE、PEID、EXEINFO、LordPE、ResourceHacker等）</li>
<li>常用脱壳工具或脱壳脚本（专属壳的脱壳器例如upx等、各种壳的脱壳脚本）</li>
<li>十六进制编辑器（010Editor、winhex等）</li>
<li>反汇编工具（IDA、Hopper）</li>
<li>调试器（Ollydbg、gdb、windbg等）</li>
</ol>
<p>这些都是比较常用的逆向工具。其中特别要熟练使用IDA与Ollydbg，IDA一般用来做静态分析，其中的F5功能更是强大到没朋友，新手必备。Ollydbg简称OD一般用来做动态调试使用，两者结合使用堪比倚天剑和屠龙刀，可谓是神挡杀神佛挡杀佛。^3^</p>
<h3 id="逆向的分类">逆向的分类</h3>
<ul>
<li>解释型语言的逆向</li>
<li>编译型语言的逆向</li>
</ul>
<h3 id="分析手段">分析手段</h3>
<ol>
<li>静态分析</li>
<li>动态分析</li>
<li>网络流量分析</li>
<li>猜</li>
</ol>
<h4 id="静态分析">静态分析</h4>
<p>将机器代码反汇编成方便人类理解的代码，如smali代码（Java）、汇编代码或汇编代码翻译的C语言伪代码等等，通过分析这些比较低级的编程语言的代码，找到程序的业务流程或设计逻辑。</p>
<h4 id="动态分析">动态分析</h4>
<p>通过断点调试手段，让程序单步执行进行分析。动态分析往往是在静态分析出一定的结果的基础上进行，找到合适的地方给代码打断点，即时地读取当前变量的值，来进一步分析程序的逻辑、获取程序关系数据。</p>
<h4 id="网络流量分析">网络流量分析</h4>
<p>通过代理方式或者其他方式，截取程序与服务器通信的数据流量（抓包），来分析客户端和服务端的通信协议。网络流量分析比较有局限性，若客户端使用<em>Http</em>这种明文传输的协议，会比较容易分析；但如果客户端使用SSL、<em>Https</em>等加密传输协议与服务端进行通信，那么抓包的前提是需要拿到服务端下发给客户端的证书才能进一步解密分析，这种情况下就比较棘手。网上有方案通过安装插件拿到Chrome或者Firefox浏览器的本地证书，但只适用于客户端是网页的情况。若其他大佬有好的宝贵经验，还望能指点迷津。</p>
<h4 id="猜">猜</h4>
<p>猜测的前提是，你需要有一定的编程经验，能够在逆向分析出一些代码后，对其上下的代码进行合理的推测，推测不出来的代码再通过以上手段分析。可以这么说，你的推测能力决定了你的逆向分析效率，而编程经验则是你猜测能力的基石。</p>
<blockquote>
<p>逆向工程的学习是一条漫长的道路，每一个逆向工程师都是一个优秀的开发者，只不过他们选择去挑战更有深度，更有趣味的事情。加密与解密，解开每一段代码的意味，看到软件背后潜藏的世界，正所谓，一花一世界，一码一千秋嘛。</p>
</blockquote>
<h3 id="参考">参考</h3>
<ol>
<li><a href="https://wiwiki.kfd.me/wiki/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B">逆向工程-维基百科</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/148099666">逆向工程入门概述-知乎</a></li>
<li><a href="https://www.freebuf.com/column/225999.html">CTF逆向选手入坑指南-FreeBuf</a></li>
</ol>
<p>闲聊到此为止，来喝杯茶可好？</p>
]]></content>
        </item>
        
        <item>
            <title>XCTF REVERSE Expert (3) Writeup</title>
            <link>/posts/xctf-reverse-expert-3_writeup/</link>
            <pubDate>Fri, 28 Jan 2022 19:34:08 +0800</pubDate>
            
            <guid>/posts/xctf-reverse-expert-3_writeup/</guid>
            <description>XCTF-REVERSE-高手区-3 writeup 继续玩一玩逆向的题目，感觉还是蛮有意思的。
0x0 srm-50 使用DIE进行探测：
32位PE程序，无壳。可以尝试运行一下：
应该是一个邮箱破解的程序，终于有点稍微有意思的题目了
首先进行静态分析看代码：
根据WIN32的编程基础，关键函数应该是在DialogFunc中，登录的细节应该是在DialogFunc中。
跟进DialogFunc函数，来寻找更多的细节
INT_PTR __stdcall DialogFunc(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4) { HMODULE v5; // eax HICON v6; // eax HMODULE v7; // eax HWND v8; // eax HCURSOR v9; // [esp-4h] [ebp-34Ch] CHAR String[256]; // [esp+8h] [ebp-340h] BYREF CHAR v11[256]; // [esp+108h] [ebp-240h] BYREF CHAR Text[256]; // [esp+208h] [ebp-140h] BYREF char Source[60]; // [esp+308h] [ebp-40h] BYREF if ( a2 == 16 ) { EndDialog(hDlg, 0); return 0; } if ( a2 == 272 ) { v5 = GetModuleHandleW(0); v6 = LoadIconW(v5, (LPCWSTR)0x67); SetClassLongA(hDlg, -14, (LONG)v6); v7 = GetModuleHandleW(0); v9 = LoadCursorW(v7, (LPCWSTR)0x66); v8 = GetDlgItem(hDlg, 1); SetClassLongA(v8, -12, (LONG)v9); return 1; } if ( a2 !</description>
            <content type="html"><![CDATA[<h1 id="xctf-reverse-高手区-3-writeup">XCTF-REVERSE-高手区-3 writeup</h1>
<p>继续玩一玩逆向的题目，感觉还是蛮有意思的。</p>
<h2 id="0x0-srm-50">0x0 srm-50</h2>
<p>使用DIE进行探测：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103093725322.png" alt="image-20211103093725322"></p>
<p>32位PE程序，无壳。可以尝试运行一下：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103093811981.png" alt="image-20211103093811981"></p>
<p>应该是一个邮箱破解的程序，终于有点稍微有意思的题目了</p>
<p>首先进行静态分析看代码：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103094139950.png" alt="image-20211103094139950"></p>
<p>根据WIN32的编程基础，关键函数应该是在<code>DialogFunc</code>中，登录的细节应该是在<code>DialogFunc</code>中。</p>
<p>跟进<code>DialogFunc</code>函数，来寻找更多的细节</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>INT_PTR <span style="color:#66d9ef">__stdcall</span> <span style="color:#a6e22e">DialogFunc</span>(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  HMODULE v5; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  HICON v6; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  HMODULE v7; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  HWND v8; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  HCURSOR v9; <span style="color:#75715e">// [esp-4h] [ebp-34Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  CHAR String[<span style="color:#ae81ff">256</span>]; <span style="color:#75715e">// [esp+8h] [ebp-340h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  CHAR v11[<span style="color:#ae81ff">256</span>]; <span style="color:#75715e">// [esp+108h] [ebp-240h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  CHAR Text[<span style="color:#ae81ff">256</span>]; <span style="color:#75715e">// [esp+208h] [ebp-140h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Source[<span style="color:#ae81ff">60</span>]; <span style="color:#75715e">// [esp+308h] [ebp-40h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">16</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">EndDialog</span>(hDlg, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">272</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">GetModuleHandleW</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    v6 <span style="color:#f92672">=</span> <span style="color:#a6e22e">LoadIconW</span>(v5, (LPCWSTR)<span style="color:#ae81ff">0x67</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SetClassLongA</span>(hDlg, <span style="color:#f92672">-</span><span style="color:#ae81ff">14</span>, (LONG)v6);
</span></span><span style="display:flex;"><span>    v7 <span style="color:#f92672">=</span> <span style="color:#a6e22e">GetModuleHandleW</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    v9 <span style="color:#f92672">=</span> <span style="color:#a6e22e">LoadCursorW</span>(v7, (LPCWSTR)<span style="color:#ae81ff">0x66</span>);
</span></span><span style="display:flex;"><span>    v8 <span style="color:#f92672">=</span> <span style="color:#a6e22e">GetDlgItem</span>(hDlg, <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SetClassLongA</span>(v8, <span style="color:#f92672">-</span><span style="color:#ae81ff">12</span>, (LONG)v9);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">273</span> <span style="color:#f92672">||</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)a3 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(String, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)a3 <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#66d9ef">sizeof</span>(String));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(v11, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(v11));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(Text, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(Text));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">GetDlgItemTextA</span>(hDlg, <span style="color:#ae81ff">1001</span>, String, <span style="color:#ae81ff">256</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">GetDlgItemTextA</span>(hDlg, <span style="color:#ae81ff">1002</span>, v11, <span style="color:#ae81ff">256</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strstr</span>(String, <span style="color:#e6db74">&#34;@&#34;</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">strstr</span>(String, <span style="color:#e6db74">&#34;.&#34;</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">strstr</span>(String, <span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">strstr</span>(String, <span style="color:#e6db74">&#34;@&#34;</span>)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">46</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">strcpy</span>(<span style="color:#f92672">&amp;</span>Source[<span style="color:#ae81ff">36</span>], <span style="color:#e6db74">&#34;Registration failure.&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">strcpy</span>(Source, <span style="color:#e6db74">&#34;Registration Success!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Your flag is:&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(v11) <span style="color:#f92672">==</span> <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">67</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">88</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">90</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">65</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">57</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">98</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">55</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">109</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">71</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">113</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">57</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">52</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">103</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">99</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">56</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">strcpy_s</span>(Text, <span style="color:#ae81ff">0x100u</span>, Source);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">strcat_s</span>(Text, <span style="color:#ae81ff">0x100u</span>, v11);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">strcpy_s</span>(Text, <span style="color:#ae81ff">0x100u</span>, <span style="color:#f92672">&amp;</span>Source[<span style="color:#ae81ff">36</span>]);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">strcpy_s</span>(Text, <span style="color:#ae81ff">0x100u</span>, <span style="color:#e6db74">&#34;Your E-mail address in not valid.&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">MessageBoxA</span>(hDlg, Text, <span style="color:#e6db74">&#34;Registeration&#34;</span>, <span style="color:#ae81ff">0x40u</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>flag直接展示的非常清晰了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strstr</span>(String, <span style="color:#e6db74">&#34;@&#34;</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">strstr</span>(String, <span style="color:#e6db74">&#34;.&#34;</span>) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">strstr</span>(String, <span style="color:#e6db74">&#34;.&#34;</span>)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">strstr</span>(String, <span style="color:#e6db74">&#34;@&#34;</span>)[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">46</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">strcpy</span>(<span style="color:#f92672">&amp;</span>Source[<span style="color:#ae81ff">36</span>], <span style="color:#e6db74">&#34;Registration failure.&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">strcpy</span>(Source, <span style="color:#e6db74">&#34;Registration Success!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Your flag is:&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(v11) <span style="color:#f92672">==</span> <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">67</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">88</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">90</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">65</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">57</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">98</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">55</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">109</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">71</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">113</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">57</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">52</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">103</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">99</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> v11[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">56</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">strcpy_s</span>(Text, <span style="color:#ae81ff">0x100u</span>, Source);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">strcat_s</span>(Text, <span style="color:#ae81ff">0x100u</span>, v11);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">strcpy_s</span>(Text, <span style="color:#ae81ff">0x100u</span>, <span style="color:#f92672">&amp;</span>Source[<span style="color:#ae81ff">36</span>]);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>对<code>v11</code>数组进行运算就可以得到，非常简单，可以非常容易地得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>CZ9dmq4c8g9G7bAX
</span></span></code></pre></div><p>故本题的flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>CZ9dmq4c8g9G7bAX
</span></span></code></pre></div><h2 id="0x1-simple-check-100">0x1 simple-check-100</h2>
<p>先使用DIE姐姐进行探测一下，呐呐~</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103095757150.png" alt="image-20211103095757150"></p>
<p>PE32程序，没有加壳。直接静态分析看一波：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>v3; <span style="color:#75715e">// esp
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>v4; <span style="color:#75715e">// esp
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v6; <span style="color:#75715e">// [esp+8h] [ebp-40h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v7; <span style="color:#75715e">// [esp+1Bh] [ebp-2Dh] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v8; <span style="color:#75715e">// [esp+1Ch] [ebp-2Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// [esp+20h] [ebp-28h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v10; <span style="color:#75715e">// [esp+25h] [ebp-23h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v11; <span style="color:#75715e">// [esp+26h] [ebp-22h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v12; <span style="color:#75715e">// [esp+27h] [ebp-21h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v13; <span style="color:#75715e">// [esp+28h] [ebp-20h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v14; <span style="color:#75715e">// [esp+29h] [ebp-1Fh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v15; <span style="color:#75715e">// [esp+2Ah] [ebp-1Eh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v16; <span style="color:#75715e">// [esp+2Bh] [ebp-1Dh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v17; <span style="color:#75715e">// [esp+2Ch] [ebp-1Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v18; <span style="color:#75715e">// [esp+2Dh] [ebp-1Bh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v19; <span style="color:#75715e">// [esp+2Eh] [ebp-1Ah]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v20; <span style="color:#75715e">// [esp+2Fh] [ebp-19h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v21; <span style="color:#75715e">// [esp+30h] [ebp-18h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v22; <span style="color:#75715e">// [esp+31h] [ebp-17h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v23; <span style="color:#75715e">// [esp+32h] [ebp-16h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v24; <span style="color:#75715e">// [esp+33h] [ebp-15h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v25; <span style="color:#75715e">// [esp+34h] [ebp-14h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v26; <span style="color:#75715e">// [esp+35h] [ebp-13h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v27; <span style="color:#75715e">// [esp+36h] [ebp-12h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v28; <span style="color:#75715e">// [esp+37h] [ebp-11h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v29; <span style="color:#75715e">// [esp+38h] [ebp-10h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v30; <span style="color:#75715e">// [esp+39h] [ebp-Fh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v31; <span style="color:#75715e">// [esp+3Ah] [ebp-Eh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v32; <span style="color:#75715e">// [esp+3Bh] [ebp-Dh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v33; <span style="color:#75715e">// [esp+3Ch] [ebp-Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v34; <span style="color:#75715e">// [esp+3Dh] [ebp-Bh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v35; <span style="color:#75715e">// [esp+3Eh] [ebp-Ah]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v36; <span style="color:#75715e">// [esp+3Fh] [ebp-9h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>v37; <span style="color:#75715e">// [esp+40h] [ebp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v37 <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>argc;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__main</span>();
</span></span><span style="display:flex;"><span>  v7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">84</span>;
</span></span><span style="display:flex;"><span>  v36 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">56</span>;
</span></span><span style="display:flex;"><span>  v35 <span style="color:#f92672">=</span> <span style="color:#ae81ff">126</span>;
</span></span><span style="display:flex;"><span>  v34 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">29</span>;
</span></span><span style="display:flex;"><span>  v33 <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>;
</span></span><span style="display:flex;"><span>  v32 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">57</span>;
</span></span><span style="display:flex;"><span>  v31 <span style="color:#f92672">=</span> <span style="color:#ae81ff">22</span>;
</span></span><span style="display:flex;"><span>  v30 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">102</span>;
</span></span><span style="display:flex;"><span>  v29 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">51</span>;
</span></span><span style="display:flex;"><span>  v28 <span style="color:#f92672">=</span> <span style="color:#ae81ff">17</span>;
</span></span><span style="display:flex;"><span>  v27 <span style="color:#f92672">=</span> <span style="color:#ae81ff">101</span>;
</span></span><span style="display:flex;"><span>  v26 <span style="color:#f92672">=</span> <span style="color:#ae81ff">50</span>;
</span></span><span style="display:flex;"><span>  v25 <span style="color:#f92672">=</span> <span style="color:#ae81ff">45</span>;
</span></span><span style="display:flex;"><span>  v24 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">29</span>;
</span></span><span style="display:flex;"><span>  v23 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">45</span>;
</span></span><span style="display:flex;"><span>  v22 <span style="color:#f92672">=</span> <span style="color:#ae81ff">67</span>;
</span></span><span style="display:flex;"><span>  v21 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">110</span>;
</span></span><span style="display:flex;"><span>  v20 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">87</span>;
</span></span><span style="display:flex;"><span>  v19 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">99</span>;
</span></span><span style="display:flex;"><span>  v18 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">46</span>;
</span></span><span style="display:flex;"><span>  v17 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">26</span>;
</span></span><span style="display:flex;"><span>  v16 <span style="color:#f92672">=</span> <span style="color:#ae81ff">109</span>;
</span></span><span style="display:flex;"><span>  v15 <span style="color:#f92672">=</span> <span style="color:#ae81ff">44</span>;
</span></span><span style="display:flex;"><span>  v14 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">45</span>;
</span></span><span style="display:flex;"><span>  v13 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">74</span>;
</span></span><span style="display:flex;"><span>  v12 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">67</span>;
</span></span><span style="display:flex;"><span>  v11 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>  v10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">106</span>;
</span></span><span style="display:flex;"><span>  v9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">19</span>;
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">alloca</span>(<span style="color:#ae81ff">32</span>);
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">alloca</span>(<span style="color:#ae81ff">32</span>);
</span></span><span style="display:flex;"><span>  v8 <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>v6;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Key: &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, v8);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">check_key</span>((<span style="color:#66d9ef">int</span>)v8) )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">interesting_function</span>((<span style="color:#66d9ef">int</span>)<span style="color:#f92672">&amp;</span>v7);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Wrong&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>关键函数是<code>check_key</code>函数，只要对<code>check_key</code>函数进行绕过应该就可以拿到flag</p>
<p>使用Ollydbg进行动态调试：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103155250920.png" alt="image-20211103155250920"></p>
<p>发现Ollydbg总是会输出乱码。不能够正确地将flag输出出来，可能是由于WINDOW编码的问题，也可能是由于题目的WINDOWS程序没有写好。需要再进行对Linux程序进行分析，但是考虑到Linux程序的代码应该是和Windows的代码结构大致一致</p>
<p>把程序拖到Kali Linux中，使用GDB进行调试：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103160210709.png" alt="image-20211103160210709"></p>
<p>成功调试出了flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag_is_you_know_cracking!!!
</span></span></code></pre></div><h2 id="0x2-mysterious">0x2 Mysterious</h2>
<p>先使用DIE探测一下：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103163229333.png" alt="image-20211103163229333"></p>
<p>32位PE程序，无壳</p>
<p>尝试运行一下这个程序：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103163501910.png" alt="image-20211103163501910"></p>
<p>密码破解的程序，先进行静态分析确定位置：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103163903336.png" alt="image-20211103163903336"></p>
<p>经典的WIN32程序，继续跟进</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103164106092.png" alt="image-20211103164106092"></p>
<p>跟进<code>DialogFunc</code>函数，这个函数主要就是WIN32的窗口创建函数，代码逻辑应该就在WIN32中。</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103164207779.png" alt="image-20211103164207779"></p>
<p>继续跟进，胜利就在前方！</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103164237890.png" alt="image-20211103164237890"></p>
<p>找到主要的逻辑函数，在下面寻找逻辑判断语句</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103164423968.png" alt="image-20211103164423968"></p>
<p>这个<code>loc_401183</code>应该是关键函数，这个函数的地址是<code>0x401183</code>，使用Ollydbg进行同时调试来绕过这个判断条件直接出flag</p>
<p>使用Ollydbg，使用快捷键<code>CTRL+G</code>快速跳转到<code>0x401183</code>的地址，同时也要根据代码静态分析的逻辑来进行判断，发现需要进行输入的代码段是122，这个可以作为Key进行输入：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103165814525.png" alt="image-20211103165814525"></p>
<p>在Ollydbg中修改汇编，修改跳转条件，然后输入122</p>
<p>就可以拿到flag了</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103171857297.png" alt="image-20211103171857297"></p>
<p>flag为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{123_Buff3r_0v3rf|0w}
</span></span></code></pre></div><hr>
<p>本题还有一种更简单的解法，就是直接静态分析来读取密码直接输入来拿到flag</p>
<p>本菜鸡只是希望可以学习到更多的技能点，于是使用另一种思路进行求解。</p>
<h2 id="0x3-re1-100">0x3 re1-100</h2>
<p>先进行一下探测：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103172548605.png" alt="image-20211103172548605"></p>
<p>64位的ELF文件，直接静态分析：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103172742437.png" alt="image-20211103172742437"></p>
<p>代码中有反调试函数，这道题目使用动态调试会有些麻烦，应该是使用静态调试进行求解</p>
<p>查看静态调试代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  __pid_t v3; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">size_t</span> v4; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">ssize_t</span> v5; <span style="color:#75715e">// rbx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">bool</span> v6; <span style="color:#75715e">// al
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">bool</span> bCheckPtrace; <span style="color:#75715e">// [rsp+13h] [rbp-1BDh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">ssize_t</span> numRead; <span style="color:#75715e">// [rsp+18h] [rbp-1B8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">ssize_t</span> numReada; <span style="color:#75715e">// [rsp+18h] [rbp-1B8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> bufWrite[<span style="color:#ae81ff">200</span>]; <span style="color:#75715e">// [rsp+20h] [rbp-1B0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> bufParentRead[<span style="color:#ae81ff">200</span>]; <span style="color:#75715e">// [rsp+F0h] [rbp-E0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v12; <span style="color:#75715e">// [rsp+1B8h] [rbp-18h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v12 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  bCheckPtrace <span style="color:#f92672">=</span> <span style="color:#a6e22e">detectDebugging</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">pipe</span>(pParentWrite) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">pipe</span>(pParentRead) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">fork</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v3 <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v3 )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">close</span>(pParentWrite[<span style="color:#ae81ff">0</span>]);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">close</span>(pParentRead[<span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Input key : &#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">memset</span>(bufWrite, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(bufWrite));
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">gets</span>(bufWrite);
</span></span><span style="display:flex;"><span>        v4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(bufWrite);
</span></span><span style="display:flex;"><span>        v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">write</span>(pParentWrite[<span style="color:#ae81ff">1</span>], bufWrite, v4);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( v5 <span style="color:#f92672">!=</span> <span style="color:#a6e22e">strlen</span>(bufWrite) )
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;parent - partial/failed write&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">memset</span>(bufParentRead, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(bufParentRead));
</span></span><span style="display:flex;"><span>          numReada <span style="color:#f92672">=</span> <span style="color:#a6e22e">read</span>(pParentRead[<span style="color:#ae81ff">0</span>], bufParentRead, <span style="color:#ae81ff">0xC8uLL</span>);
</span></span><span style="display:flex;"><span>          v6 <span style="color:#f92672">=</span> bCheckPtrace <span style="color:#f92672">||</span> <span style="color:#a6e22e">checkDebuggerProcessRunning</span>();
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>v6 <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">checkStringIsNumber</span>(bufParentRead) <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">atoi</span>(bufParentRead) )
</span></span><span style="display:flex;"><span>          {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;True&#34;</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">close</span>(pParentWrite[<span style="color:#ae81ff">1</span>]) <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>              <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Wrong !!!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> ( numReada <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> );
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">close</span>(pParentWrite[<span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">close</span>(pParentRead[<span style="color:#ae81ff">0</span>]);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">memset</span>(bufParentRead, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(bufParentRead));
</span></span><span style="display:flex;"><span>      numRead <span style="color:#f92672">=</span> <span style="color:#a6e22e">read</span>(pParentWrite[<span style="color:#ae81ff">0</span>], bufParentRead, <span style="color:#ae81ff">0xC8uLL</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( numRead <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( numRead )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">childCheckDebugResult</span>()
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&amp;&amp;</span> bufParentRead[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">123</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">strlen</span>(bufParentRead) <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;*&#39;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">strncmp</span>(<span style="color:#f92672">&amp;</span>bufParentRead[<span style="color:#ae81ff">1</span>], <span style="color:#e6db74">&#34;53fc275d81&#34;</span>, <span style="color:#ae81ff">0xAuLL</span>)
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&amp;&amp;</span> bufParentRead[<span style="color:#a6e22e">strlen</span>(bufParentRead) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">125</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">strncmp</span>(<span style="color:#f92672">&amp;</span>bufParentRead[<span style="color:#ae81ff">31</span>], <span style="color:#e6db74">&#34;4938ae4efd&#34;</span>, <span style="color:#ae81ff">0xAuLL</span>)
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">confuseKey</span>(bufParentRead, <span style="color:#ae81ff">42</span>)
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">strncmp</span>(bufParentRead, <span style="color:#e6db74">&#34;{daf29f59034938ae4efd53fc275d81053ed5be8c}&#34;</span>, <span style="color:#ae81ff">0x2AuLL</span>) )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">responseTrue</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">responseFalse</span>();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>发现存在有一个可疑的字符串：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>{daf29f59034938ae4efd53fc275d81053ed5be8c}
</span></span></code></pre></div><p>这个字符串可能是flag，但是感觉似乎有些不太对劲</p>
<p>往上观察，发现存在有一个进行变换的函数<code>confusekey</code></p>
<p>进入这个函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">confuseKey</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>szKey, <span style="color:#66d9ef">int</span> iKeyLength)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> szPart1[<span style="color:#ae81ff">15</span>]; <span style="color:#75715e">// [rsp+10h] [rbp-50h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> szPart2[<span style="color:#ae81ff">15</span>]; <span style="color:#75715e">// [rsp+20h] [rbp-40h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> szPart3[<span style="color:#ae81ff">15</span>]; <span style="color:#75715e">// [rsp+30h] [rbp-30h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> szPart4[<span style="color:#ae81ff">15</span>]; <span style="color:#75715e">// [rsp+40h] [rbp-20h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v7; <span style="color:#75715e">// [rsp+58h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v7 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)szPart1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart1[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_WORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart1[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  szPart1[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)szPart2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart2[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_WORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart2[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  szPart2[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)szPart3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart3[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_WORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart3[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  szPart3[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)szPart4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart4[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_WORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>szPart4[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  szPart4[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( iKeyLength <span style="color:#f92672">!=</span> <span style="color:#ae81ff">42</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>szKey )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(szKey) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">42</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>szKey <span style="color:#f92672">!=</span> <span style="color:#ae81ff">123</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strncpy</span>(szPart1, szKey <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0xAuLL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strncpy</span>(szPart2, szKey <span style="color:#f92672">+</span> <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">0xAuLL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strncpy</span>(szPart3, szKey <span style="color:#f92672">+</span> <span style="color:#ae81ff">21</span>, <span style="color:#ae81ff">0xAuLL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strncpy</span>(szPart4, szKey <span style="color:#f92672">+</span> <span style="color:#ae81ff">31</span>, <span style="color:#ae81ff">0xAuLL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(szKey, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x2AuLL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>szKey <span style="color:#f92672">=</span> <span style="color:#ae81ff">123</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcat</span>(szKey, szPart3);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcat</span>(szKey, szPart4);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcat</span>(szKey, szPart1);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcat</span>(szKey, szPart2);
</span></span><span style="display:flex;"><span>  szKey[<span style="color:#ae81ff">41</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">125</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>发现字符串发生了位置的变化，将位置变化还原应该就是flag</p>
<p>看代码可以直接对字符进行变换处理：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>53fc275d81053ed5be8cdaf29f59034938ae4efd
</span></span></code></pre></div><p>本题的flag为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>53fc275d81053ed5be8cdaf29f59034938ae4efd
</span></span></code></pre></div><h2 id="0x4-crazy">0x4 crazy</h2>
<p>探测探测，看看是什么样的程序：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103185717266.png" alt="image-20211103185717266"></p>
<p>64位的ELF程序，无壳。直接上静态分析看一看：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v4; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v6; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v7; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v8; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v9; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v10; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v11; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v12; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v13; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v14; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v15; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v16; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v18[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+10h] [rbp-130h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v19[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+30h] [rbp-110h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v20[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+50h] [rbp-F0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v21[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+70h] [rbp-D0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v22[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+90h] [rbp-B0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v23[<span style="color:#ae81ff">120</span>]; <span style="color:#75715e">// [rsp+B0h] [rbp-90h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v24; <span style="color:#75715e">// [rsp+128h] [rbp-18h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v24 <span style="color:#f92672">=</span> __readfsqword(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span>basic_string(v18, argv, envp);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&gt;&gt;&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cin, v18);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;-------------------------------------------&#34;</span>);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v3, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;Quote from people&#39;s champ&#34;</span>);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v4, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;-------------------------------------------&#34;</span>);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v5, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>  v6 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout,
</span></span><span style="display:flex;"><span>         <span style="color:#e6db74">&#34;*My goal was never to be the loudest or the craziest. It was to be the most entertaining.&#34;</span>);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v6, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>  v7 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;*Wrestling was like stand-up comedy for me.&#34;</span>);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v7, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>  v8 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout,
</span></span><span style="display:flex;"><span>         <span style="color:#e6db74">&#34;*I like to use the hard times in the past to motivate me today.&#34;</span>);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v8, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>  v9 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;-------------------------------------------&#34;</span>);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v9, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>  HighTemplar<span style="color:#f92672">::</span>HighTemplar((DarkTemplar <span style="color:#f92672">*</span>)v23, (<span style="color:#66d9ef">__int64</span>)v18);
</span></span><span style="display:flex;"><span>  v10 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;Checking....&#34;</span>);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v10, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span>basic_string(v19, v18);
</span></span><span style="display:flex;"><span>  func1(v20, v19);
</span></span><span style="display:flex;"><span>  func2(v21, v20);
</span></span><span style="display:flex;"><span>  func3(v21, <span style="color:#ae81ff">0LL</span>);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::~</span>basic_string(v21);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::~</span>basic_string(v20);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::~</span>basic_string(v19);
</span></span><span style="display:flex;"><span>  HighTemplar<span style="color:#f92672">::</span>calculate((HighTemplar <span style="color:#f92672">*</span>)v23);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)HighTemplar<span style="color:#f92672">::</span>getSerial((HighTemplar <span style="color:#f92672">*</span>)v23) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v11 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;/////////////////////////////////&#34;</span>);
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v11, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>    v12 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;Do not be angry. Happy Hacking :)&#34;</span>);
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v12, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>    v13 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;/////////////////////////////////&#34;</span>);
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v13, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>    HighTemplar<span style="color:#f92672">::</span>getFlag[abi:cxx11](v22, v23);
</span></span><span style="display:flex;"><span>    v14 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;flag{&#34;</span>);
</span></span><span style="display:flex;"><span>    v15 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>(v14, v22);
</span></span><span style="display:flex;"><span>    v16 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(v15, <span style="color:#e6db74">&#34;}&#34;</span>);
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v16, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::~</span>basic_string(v22);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  HighTemplar<span style="color:#f92672">::~</span>HighTemplar((HighTemplar <span style="color:#f92672">*</span>)v23);
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::~</span>basic_string(v18);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>这道题目的难点应该是C++反汇编反编译代码的阅读，需要寻找关键函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span>HighTemplar<span style="color:#f92672">::</span>HighTemplar((DarkTemplar <span style="color:#f92672">*</span>)v23, (<span style="color:#66d9ef">__int64</span>)v18); <span style="color:#75715e">// 数据：&#34;327a6c4304ad5938eaf0efb6cc3e53dc&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>HighTemplar<span style="color:#f92672">::</span>calculate((HighTemplar <span style="color:#f92672">*</span>)v23); <span style="color:#75715e">// 加密
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>HighTemplar<span style="color:#f92672">::</span>getSerial((HighTemplar <span style="color:#f92672">*</span>)v23); <span style="color:#75715e">// 验证
</span></span></span></code></pre></div><p>现在通过审计获得了三个关键函数，现在就可以逐一分析了</p>
<p>先看看加密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">__fastcall</span> HighTemplar<span style="color:#f92672">::</span>calculate(HighTemplar <span style="color:#f92672">*</span><span style="color:#66d9ef">this</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">__int64</span> v1; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v2; <span style="color:#75715e">// rbx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">bool</span> result; <span style="color:#75715e">// al
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v4; <span style="color:#75715e">// rbx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+18h] [rbp-18h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> j; <span style="color:#75715e">// [rsp+1Ch] [rbp-14h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span>length((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">32</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v1 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;Too short or too long&#34;</span>);
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v1, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>    exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        i <span style="color:#f92672">&lt;=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span>length((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v2 <span style="color:#f92672">=</span> (_BYTE <span style="color:#f92672">*</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span><span style="color:#66d9ef">operator</span>[](
</span></span><span style="display:flex;"><span>                    (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>,
</span></span><span style="display:flex;"><span>                    i);
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>v2 <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span><span style="color:#66d9ef">operator</span>[](
</span></span><span style="display:flex;"><span>                       (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>,
</span></span><span style="display:flex;"><span>                       i) <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x50</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">+</span> <span style="color:#ae81ff">23</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; ; <span style="color:#f92672">++</span>j )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> j <span style="color:#f92672">&lt;=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span>length((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>result )
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    v4 <span style="color:#f92672">=</span> (_BYTE <span style="color:#f92672">*</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span><span style="color:#66d9ef">operator</span>[](
</span></span><span style="display:flex;"><span>                    (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>,
</span></span><span style="display:flex;"><span>                    j);
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>v4 <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span><span style="color:#66d9ef">operator</span>[](
</span></span><span style="display:flex;"><span>                       (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>,
</span></span><span style="display:flex;"><span>                       j) <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x13</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">+</span> <span style="color:#ae81ff">11</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>对加密代码简要分析就是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>c <span style="color:#f92672">=</span> (((m <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x50</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">23</span>) <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x13</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">11</span>
</span></span></code></pre></div><p>然后查看一下验证函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> HighTemplar<span style="color:#f92672">::</span>getSerial(HighTemplar <span style="color:#f92672">*</span><span style="color:#66d9ef">this</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> v1; <span style="color:#75715e">// bl
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v2; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v4; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+1Ch] [rbp-14h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        (<span style="color:#66d9ef">int</span>)i <span style="color:#f92672">&lt;</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span>length((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v1 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span><span style="color:#66d9ef">operator</span>[](
</span></span><span style="display:flex;"><span>                     (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">80</span>,
</span></span><span style="display:flex;"><span>                     (<span style="color:#66d9ef">int</span>)i);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">!=</span> <span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>basic_string<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span>,std<span style="color:#f92672">::</span>allocator<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;::</span><span style="color:#66d9ef">operator</span>[](
</span></span><span style="display:flex;"><span>                           (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>,
</span></span><span style="display:flex;"><span>                           (<span style="color:#66d9ef">int</span>)i) )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      v4 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;You did not pass &#34;</span>);
</span></span><span style="display:flex;"><span>      v5 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v4, i);
</span></span><span style="display:flex;"><span>      std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v5, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">*</span>((_DWORD <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    v2 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;&lt;</span>std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>(<span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>cout, <span style="color:#e6db74">&#34;Pass &#34;</span>);
</span></span><span style="display:flex;"><span>    v3 <span style="color:#f92672">=</span> std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v2, i);
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>ostream<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">&lt;&lt;</span>(v3, <span style="color:#f92672">&amp;</span>std<span style="color:#f92672">::</span>endl<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>,std<span style="color:#f92672">::</span>char_traits<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;&gt;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#f92672">*</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>)<span style="color:#66d9ef">this</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>也是对于字符<code>327a6c4304ad5938eaf0efb6cc3e53dc</code>的验证</p>
<p>于是这道题目就非常简单了，直接对于异或操作进行逆向求解，写个python即可求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>data<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;327a6c4304ad5938eaf0efb6cc3e53dc&#39;</span>
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(data)):
</span></span><span style="display:flex;"><span>    n<span style="color:#f92672">=</span>ord(data[i])
</span></span><span style="display:flex;"><span>    flag<span style="color:#f92672">+=</span>chr((((n<span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>)<span style="color:#f92672">^</span><span style="color:#ae81ff">0x13</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">23</span>)<span style="color:#f92672">^</span><span style="color:#ae81ff">0x50</span>)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#39;flag{&#39;</span><span style="color:#f92672">+</span>flag<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;}&#39;</span>)
</span></span></code></pre></div><p>运行就能得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{tMx~qdstOs~crvtwb~aOba}qddtbrtcd}
</span></span></code></pre></div><h2 id="0x5-windows-reverse1">0x5 Windows Reverse1</h2>
<p>探测程序：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103200343354.png" alt="image-20211103200343354"></p>
<p>程序是32位PE程序，使用了UPX的压缩壳，需要进行程序脱壳</p>
<p>使用 <code>upx -d</code>命令进行脱壳</p>
<p>脱壳后再次检查：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211103202849197.png" alt="image-20211103202849197"></p>
<p>脱壳之后然后进行静态分析：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> v4; <span style="color:#75715e">// [esp+4h] [ebp-804h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5[<span style="color:#ae81ff">1023</span>]; <span style="color:#75715e">// [esp+5h] [ebp-803h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v6; <span style="color:#75715e">// [esp+404h] [ebp-404h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v7[<span style="color:#ae81ff">1023</span>]; <span style="color:#75715e">// [esp+405h] [ebp-403h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v6 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(v7, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(v7));
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(v5, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(v5));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;please input code:&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#f92672">&amp;</span>v6);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_401000</span>(<span style="color:#f92672">&amp;</span>v6);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(<span style="color:#f92672">&amp;</span>v4, <span style="color:#e6db74">&#34;DDCTF{reverseME}&#34;</span>) )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;You&#39;ve got it!!%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#f92672">&amp;</span>v4);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Try again later.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>进行静态分析发现，存在一个关键函数在进行处理，即<code>sub_401000</code>函数在进行处理</p>
<p>跟进这个函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_401000</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  _BYTE <span style="color:#f92672">*</span>v1; <span style="color:#75715e">// ecx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v2; <span style="color:#75715e">// edi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// ebx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  result <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(a1);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( result )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v4 <span style="color:#f92672">=</span> a1 <span style="color:#f92672">-</span> v1;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">*</span>v1 <span style="color:#f92672">=</span> byte_402FF8[(<span style="color:#66d9ef">char</span>)v1[v4]];
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">++</span>v2;
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">++</span>v1;
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(a1);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> ( v2 <span style="color:#f92672">&lt;</span> result );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>发现这个函数的具体实现算法相对而言是比较难以理解，当然也是本垃圾太菜了，对这个算法的逻辑搞不太清楚。</p>
<p>看看这个代码的汇编语句：</p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211104075853810.png" alt="image-20211104075853810"></p>
<p>对汇编代码的阅读，就可以理解关键语句</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#f92672">*</span>v1 <span style="color:#f92672">=</span> byte_402FF8[(<span style="color:#66d9ef">char</span>)v1[v4]];
</span></span></code></pre></div><p>这个代码就可以转换为</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#f92672">*</span>v1 <span style="color:#f92672">=</span> byte_402FF8[(<span style="color:#66d9ef">char</span>)(v1<span style="color:#f92672">+</span>v4)];
</span></span></code></pre></div><p>同时，由于：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>v4 <span style="color:#f92672">=</span> a1 <span style="color:#f92672">-</span> v1;
</span></span></code></pre></div><p>因此：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#f92672">*</span>v1 <span style="color:#f92672">=</span> byte_402FF8[(<span style="color:#66d9ef">char</span>)a1];
</span></span></code></pre></div><p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211104084802229.png" alt="image-20211104084802229"></p>
<p>这样子就很好分析了，就是将<code>a1</code>进行遍历，将数据存储在v1里面。下面就是寻找<code>byte_402FF8</code></p>
<p>由于本题是在进行很多地址的运算，数组也大概率被存储在更高位的地址，依着逻辑去寻找可以找到<code>byte_402FF8</code></p>
<p><img src="/images/XCTF-REVERSE-expert-3_writeup/image-20211104085233187.png" alt="image-20211104085233187"></p>
<p>应该就是下面那一坨字符，进行提取就可以了。</p>
<p>现在逻辑已经大致梳理清楚了，可以写个程序进行求解了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cstring&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> data[]{
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">126</span>, <span style="color:#ae81ff">125</span>, <span style="color:#ae81ff">124</span>, <span style="color:#ae81ff">123</span>, <span style="color:#ae81ff">122</span>, <span style="color:#ae81ff">121</span>, <span style="color:#ae81ff">120</span>, <span style="color:#ae81ff">119</span>, <span style="color:#ae81ff">118</span>, <span style="color:#ae81ff">117</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">116</span>, <span style="color:#ae81ff">115</span>, <span style="color:#ae81ff">114</span>, <span style="color:#ae81ff">113</span>, <span style="color:#ae81ff">112</span>, <span style="color:#ae81ff">111</span>, <span style="color:#ae81ff">110</span>, <span style="color:#ae81ff">109</span>, <span style="color:#ae81ff">108</span>, <span style="color:#ae81ff">107</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">106</span>, <span style="color:#ae81ff">105</span>, <span style="color:#ae81ff">104</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">102</span>, <span style="color:#ae81ff">101</span>, <span style="color:#ae81ff">100</span>,  <span style="color:#ae81ff">99</span>,  <span style="color:#ae81ff">98</span>,  <span style="color:#ae81ff">97</span>, 
</span></span><span style="display:flex;"><span>     <span style="color:#ae81ff">96</span>,  <span style="color:#ae81ff">95</span>,  <span style="color:#ae81ff">94</span>,  <span style="color:#ae81ff">93</span>,  <span style="color:#ae81ff">92</span>,  <span style="color:#ae81ff">91</span>,  <span style="color:#ae81ff">90</span>,  <span style="color:#ae81ff">89</span>,  <span style="color:#ae81ff">88</span>,  <span style="color:#ae81ff">87</span>, 
</span></span><span style="display:flex;"><span>     <span style="color:#ae81ff">86</span>,  <span style="color:#ae81ff">85</span>,  <span style="color:#ae81ff">84</span>,  <span style="color:#ae81ff">83</span>,  <span style="color:#ae81ff">82</span>,  <span style="color:#ae81ff">81</span>,  <span style="color:#ae81ff">80</span>,  <span style="color:#ae81ff">79</span>,  <span style="color:#ae81ff">78</span>,  <span style="color:#ae81ff">77</span>, 
</span></span><span style="display:flex;"><span>     <span style="color:#ae81ff">76</span>,  <span style="color:#ae81ff">75</span>,  <span style="color:#ae81ff">74</span>,  <span style="color:#ae81ff">73</span>,  <span style="color:#ae81ff">72</span>,  <span style="color:#ae81ff">71</span>,  <span style="color:#ae81ff">70</span>,  <span style="color:#ae81ff">69</span>,  <span style="color:#ae81ff">68</span>,  <span style="color:#ae81ff">67</span>, 
</span></span><span style="display:flex;"><span>     <span style="color:#ae81ff">66</span>,  <span style="color:#ae81ff">65</span>,  <span style="color:#ae81ff">64</span>,  <span style="color:#ae81ff">63</span>,  <span style="color:#ae81ff">62</span>,  <span style="color:#ae81ff">61</span>,  <span style="color:#ae81ff">60</span>,  <span style="color:#ae81ff">59</span>,  <span style="color:#ae81ff">58</span>,  <span style="color:#ae81ff">57</span>, 
</span></span><span style="display:flex;"><span>     <span style="color:#ae81ff">56</span>,  <span style="color:#ae81ff">55</span>,  <span style="color:#ae81ff">54</span>,  <span style="color:#ae81ff">53</span>,  <span style="color:#ae81ff">52</span>,  <span style="color:#ae81ff">51</span>,  <span style="color:#ae81ff">50</span>,  <span style="color:#ae81ff">49</span>,  <span style="color:#ae81ff">48</span>,  <span style="color:#ae81ff">47</span>, 
</span></span><span style="display:flex;"><span>     <span style="color:#ae81ff">46</span>,  <span style="color:#ae81ff">45</span>,  <span style="color:#ae81ff">44</span>,  <span style="color:#ae81ff">43</span>,  <span style="color:#ae81ff">42</span>,  <span style="color:#ae81ff">41</span>,  <span style="color:#ae81ff">40</span>,  <span style="color:#ae81ff">39</span>,  <span style="color:#ae81ff">38</span>,  <span style="color:#ae81ff">37</span>, 
</span></span><span style="display:flex;"><span>     <span style="color:#ae81ff">36</span>,  <span style="color:#ae81ff">35</span>,  <span style="color:#ae81ff">34</span>,  <span style="color:#ae81ff">33</span>,  <span style="color:#ae81ff">32</span>,   <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> c[]{<span style="color:#e6db74">&#34;DDCTF{reverseME}&#34;</span>};
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;flag{&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span>(size_t i{ <span style="color:#ae81ff">0</span> };i <span style="color:#f92672">&lt;</span> strlen(c);i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(size_t j{ <span style="color:#ae81ff">0</span> };j <span style="color:#f92672">&lt;</span> strlen(data); j<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span>(c[i] <span style="color:#f92672">==</span> data[j])
</span></span><span style="display:flex;"><span>              putchar(<span style="color:#ae81ff">32</span><span style="color:#f92672">+</span>j);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;}&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行，就能拿到flag啦：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{ZZ[JX#,9(9,+9QY!}
</span></span></code></pre></div><p>这道题目坑好多，而且考察的点是相对比较偏的。</p>
]]></content>
        </item>
        
        <item>
            <title>XCTF REVERSE Expert (2) Writeup</title>
            <link>/posts/xctf-reverse-expert-2_writeup/</link>
            <pubDate>Fri, 28 Jan 2022 19:33:59 +0800</pubDate>
            
            <guid>/posts/xctf-reverse-expert-2_writeup/</guid>
            <description>XCTF-REVERSE-高手区-2 writeup 感觉攻防世界的逆向题目还是蛮有意思的，刷着玩玩，就当作闯关游戏一样！
0x0 EasyRE 使用DIE查看一下程序信息：
无壳32位程序，直接静态分析走起！
int __cdecl main(int argc, const char **argv, const char **envp) { unsigned int v3; // kr00_4 int v4; // edx char *v5; // esi char v6; // al unsigned int i; // edx int v8; // eax char Arglist[16]; // [esp+2h] [ebp-24h] BYREF __int64 v11; // [esp+12h] [ebp-14h] BYREF int v12; // [esp+1Ah] [ebp-Ch] __int16 v13; // [esp+1Eh] [ebp-8h] sub_401020(Format, Arglist[0]); v12 = 0; v13 = 0; *(_OWORD *)Arglist = 0i64; v11 = 0i64; sub_401050(&amp;#34;%s&amp;#34;, (char)Arglist); v3 = strlen(Arglist); if ( v3 &amp;gt;= 0x10 &amp;amp;&amp;amp; v3 == 24 ) { v4 = 0; v5 = (char *)&amp;amp;v11 + 7; do { v6 = *v5--; byte_40336C[v4++] = v6; } while ( v4 &amp;lt; 24 ); for ( i = 0; i &amp;lt; 0x18; ++i ) byte_40336C[i] = (byte_40336C[i] + 1) ^ 6; v8 = strcmp(byte_40336C, aXircjR2twsv3pt); if ( v8 ) v8 = v8 &amp;lt; 0 ?</description>
            <content type="html"><![CDATA[<h1 id="xctf-reverse-高手区-2-writeup">XCTF-REVERSE-高手区-2 writeup</h1>
<p>感觉攻防世界的逆向题目还是蛮有意思的，刷着玩玩，就当作闯关游戏一样！</p>
<h2 id="0x0-easyre">0x0 EasyRE</h2>
<p>使用DIE查看一下程序信息：</p>
<p><img src="/images/XCTF-REVERSE-expert-2_writeup/image-20211101090530961.png" alt="image-20211101090530961"></p>
<p>无壳32位程序，直接静态分析走起！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// kr00_4
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// edx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v5; <span style="color:#75715e">// esi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v6; <span style="color:#75715e">// al
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// edx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Arglist[<span style="color:#ae81ff">16</span>]; <span style="color:#75715e">// [esp+2h] [ebp-24h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v11; <span style="color:#75715e">// [esp+12h] [ebp-14h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v12; <span style="color:#75715e">// [esp+1Ah] [ebp-Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int16</span> v13; <span style="color:#75715e">// [esp+1Eh] [ebp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_401020</span>(Format, Arglist[<span style="color:#ae81ff">0</span>]);
</span></span><span style="display:flex;"><span>  v12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_OWORD <span style="color:#f92672">*</span>)Arglist <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>i64;
</span></span><span style="display:flex;"><span>  v11 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>i64;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_401050</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, (<span style="color:#66d9ef">char</span>)Arglist);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(Arglist);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v3 <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0x10</span> <span style="color:#f92672">&amp;&amp;</span> v3 <span style="color:#f92672">==</span> <span style="color:#ae81ff">24</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    v5 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v11 <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      v6 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>v5<span style="color:#f92672">--</span>;
</span></span><span style="display:flex;"><span>      byte_40336C[v4<span style="color:#f92672">++</span>] <span style="color:#f92672">=</span> v6;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> ( v4 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">24</span> );
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x18</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>      byte_40336C[i] <span style="color:#f92672">=</span> (byte_40336C[i] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">^</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>    v8 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strcmp</span>(byte_40336C, aXircjR2twsv3pt);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v8 )
</span></span><span style="display:flex;"><span>      v8 <span style="color:#f92672">=</span> v8 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">?</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>v8 )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_401020</span>(<span style="color:#e6db74">&#34;right</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, Arglist[<span style="color:#ae81ff">0</span>]);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;pause&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>看代码，应该是比较简单的。但是需要对代码进行相对比较仔细的审计，来确保代码审计的成功</p>
<p>首先程序先对数组进行了倒序处理</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>v5 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v11 <span style="color:#f92672">+</span> <span style="color:#ae81ff">7</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  v6 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>v5<span style="color:#f92672">--</span>;
</span></span><span style="display:flex;"><span>  byte_40336C[v4<span style="color:#f92672">++</span>] <span style="color:#f92672">=</span> v6;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( v4 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">24</span> );
</span></span></code></pre></div><p>然后是对数据进行处理</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x18</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  byte_40336C[i] <span style="color:#f92672">=</span> (byte_40336C[i] <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">^</span> <span style="color:#ae81ff">6</span>;
</span></span></code></pre></div><p>而我们的目标是得到原始匹配的输入数据来获取到flag</p>
<p>编写一个小程序来获得flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cstring&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> data[]{
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x78</span>, <span style="color:#ae81ff">0x49</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x43</span>, <span style="color:#ae81ff">0x6A</span>, <span style="color:#ae81ff">0x7E</span>, <span style="color:#ae81ff">0x3C</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x7C</span>, <span style="color:#ae81ff">0x32</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0x57</span>, <span style="color:#ae81ff">0x73</span>, <span style="color:#ae81ff">0x76</span>, <span style="color:#ae81ff">0x33</span>, <span style="color:#ae81ff">0x50</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0x49</span>, <span style="color:#ae81ff">0x7F</span>, <span style="color:#ae81ff">0x7A</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x6E</span>, <span style="color:#ae81ff">0x64</span>, <span style="color:#ae81ff">0x6B</span>, <span style="color:#ae81ff">0x61</span>
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i{ <span style="color:#ae81ff">0</span> };i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">24</span>;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    data[i] <span style="color:#f92672">=</span> (data[i]<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span>)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> j{<span style="color:#ae81ff">23</span>};j<span style="color:#f92672">&gt;=</span><span style="color:#ae81ff">0</span>;j<span style="color:#f92672">--</span>)
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    putchar(data[j]);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行程序得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{xNqU4otPq3ys9wkDsN} 
</span></span></code></pre></div><h2 id="0x1-shuffle">0x1 Shuffle</h2>
<p>丢到DIE探测一波：</p>
<p><img src="/images/XCTF-REVERSE-expert-2_writeup/image-20211101161009642.png" alt="image-20211101161009642"></p>
<p>没有壳，32位的Ubuntu编译的程序，直接静态分析</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">time_t</span> v3; <span style="color:#75715e">// ebx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  __pid_t v4; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+14h] [ebp-44h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// [esp+18h] [ebp-40h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// [esp+1Ch] [ebp-3Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v9; <span style="color:#75715e">// [esp+20h] [ebp-38h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">40</span>]; <span style="color:#75715e">// [esp+24h] [ebp-34h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v11; <span style="color:#75715e">// [esp+4Ch] [ebp-Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v11 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readgsdword</span>(<span style="color:#ae81ff">0x14u</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcpy</span>(s, <span style="color:#e6db74">&#34;SECCON{Welcome to the SECCON 2014 CTF!}&#34;</span>);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">time</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">getpid</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">srand</span>(v3 <span style="color:#f92672">+</span> v4);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">99</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v7 <span style="color:#f92672">=</span> <span style="color:#a6e22e">rand</span>() <span style="color:#f92672">%</span> <span style="color:#ae81ff">0x28u</span>;
</span></span><span style="display:flex;"><span>    v8 <span style="color:#f92672">=</span> <span style="color:#a6e22e">rand</span>() <span style="color:#f92672">%</span> <span style="color:#ae81ff">0x28u</span>;
</span></span><span style="display:flex;"><span>    v9 <span style="color:#f92672">=</span> s[v7];
</span></span><span style="display:flex;"><span>    s[v7] <span style="color:#f92672">=</span> s[v8];
</span></span><span style="display:flex;"><span>    s[v8] <span style="color:#f92672">=</span> v9;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(s);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>由于题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>找到字符串在随机化之前
</span></span></code></pre></div><p>故flag为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>SECCON{Welcome to the SECCON 2014 CTF!}
</span></span></code></pre></div><h2 id="0x2-re-for-50-plz-50">0x2 re-for-50-plz-50</h2>
<p>使用DIE查看程序信息：</p>
<p><img src="/images/XCTF-REVERSE-expert-2_writeup/image-20211102081907475.png" alt="image-20211102081907475"></p>
<p>没有壳32位程序，直接静态分析：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [sp+18h] [+18h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">31</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( meow[i] <span style="color:#f92672">!=</span> (<span style="color:#66d9ef">char</span>)(argv[<span style="color:#ae81ff">1</span>][i] <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x37</span>) )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">print</span>(<span style="color:#e6db74">&#34;NOOOOOOOOOOOOOOOOOO</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">exit_funct</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;C0ngr4ssulations!! U did it.&#34;</span>, argv, envp);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">exit_funct</span>();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>代码非常简单，就是对程序静态字符串进行按位异或操作，编写一个程序来求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> meow[]{
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0x62</span>, <span style="color:#ae81ff">0x74</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0x71</span>, <span style="color:#ae81ff">0x4C</span>, <span style="color:#ae81ff">0x55</span>, <span style="color:#ae81ff">0x42</span>, <span style="color:#ae81ff">0x43</span>, <span style="color:#ae81ff">0x68</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x45</span>, <span style="color:#ae81ff">0x52</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x5B</span>, <span style="color:#ae81ff">0x5B</span>, <span style="color:#ae81ff">0x4E</span>, <span style="color:#ae81ff">0x68</span>, <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x5F</span>, <span style="color:#ae81ff">0x58</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x5E</span>, <span style="color:#ae81ff">0x44</span>, <span style="color:#ae81ff">0x5D</span>, <span style="color:#ae81ff">0x58</span>, <span style="color:#ae81ff">0x5F</span>, <span style="color:#ae81ff">0x59</span>, <span style="color:#ae81ff">0x50</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x5B</span>, <span style="color:#ae81ff">0x43</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x4A</span>
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> f{<span style="color:#ae81ff">0x37</span>};
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i{<span style="color:#ae81ff">0</span>};i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">31</span>;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    putchar(meow[i]<span style="color:#f92672">^</span>f);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>TUCTF{but_really_whoisjohngalt}
</span></span></code></pre></div><h2 id="0x3-dmd-50">0x3 dmd-50</h2>
<p>使用DIE来进行探测：</p>
<p><img src="/images/XCTF-REVERSE-expert-2_writeup/image-20211102130922964.png" alt="image-20211102130922964"></p>
<p>64位ELF程序，静态分析一探究竟：</p>
<p><img src="/images/XCTF-REVERSE-expert-2_writeup/image-20211102135037235.png" alt="image-20211102135037235"></p>
<p>看样子应该是C++编写的程序，可以发现汇编代码有个<code>md5</code>的函数，应该是使用了md5加密</p>
<p>后面的汇编语句进行了一系列的比较操作：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">0x00400f36      cmp     al, 0x37   ; 55
0x00400f38      jne     0x40129b
0x00400f3e      mov     rax, qword [var_58h]
0x00400f42      add     rax, 1
0x00400f46      movzx   eax, byte [rax]
0x00400f49      cmp     al, 0x38   ; 56
0x00400f4b      jne     0x40129b
0x00400f51      mov     rax, qword [var_58h]
0x00400f55      add     rax, 2
0x00400f59      movzx   eax, byte [rax]
0x00400f5c      cmp     al, 0x30   ; 48
0x00400f5e      jne     0x40129b
0x00400f64      mov     rax, qword [var_58h]
0x00400f68      add     rax, 3
0x00400f6c      movzx   eax, byte [rax]
0x00400f6f      cmp     al, 0x34   ; 52
0x00400f71      jne     0x40129b
0x00400f77      mov     rax, qword [var_58h]
0x00400f7b      add     rax, 4
0x00400f7f      movzx   eax, byte [rax]
0x00400f82      cmp     al, 0x33   ; 51
0x00400f84      jne     0x40129b
0x00400f8a      mov     rax, qword [var_58h]
0x00400f8e      add     rax, 5
0x00400f92      movzx   eax, byte [rax]
0x00400f95      cmp     al, 0x38   ; 56
0x00400f97      jne     0x40129b
0x00400f9d      mov     rax, qword [var_58h]
0x00400fa1      add     rax, 6
0x00400fa5      movzx   eax, byte [rax]
0x00400fa8      cmp     al, 0x64   ; 100
0x00400faa      jne     0x40129b
0x00400fb0      mov     rax, qword [var_58h]
0x00400fb4      add     rax, 7
0x00400fb8      movzx   eax, byte [rax]
0x00400fbb      cmp     al, 0x35   ; 53
0x00400fbd      jne     0x40129b
0x00400fc3      mov     rax, qword [var_58h]
0x00400fc7      add     rax, 8
0x00400fcb      movzx   eax, byte [rax]
0x00400fce      cmp     al, 0x62   ; 98
0x00400fd0      jne     0x40129b
0x00400fd6      mov     rax, qword [var_58h]
0x00400fda      add     rax, 9
0x00400fde      movzx   eax, byte [rax]
0x00400fe1      cmp     al, 0x36   ; 54
0x00400fe3      jne     0x40129b
0x00400fe9      mov     rax, qword [var_58h]
0x00400fed      add     rax, 0xa
0x00400ff1      movzx   eax, byte [rax]
0x00400ff4      cmp     al, 0x65   ; 101
0x00400ff6      jne     0x40129b
0x00400ffc      mov     rax, qword [var_58h]
0x00401000      add     rax, 0xb   ; 11
0x00401004      movzx   eax, byte [rax]
0x00401007      cmp     al, 0x32   ; 50
0x00401009      jne     0x40129b
0x0040100f      mov     rax, qword [var_58h]
0x00401013      add     rax, 0xc   ; 12
0x00401017      movzx   eax, byte [rax]
0x0040101a      cmp     al, 0x39   ; 57
0x0040101c      jne     0x40129b
0x00401022      mov     rax, qword [var_58h]
0x00401026      add     rax, 0xd   ; 13
0x0040102a      movzx   eax, byte [rax]
0x0040102d      cmp     al, 0x64   ; 100
0x0040102f      jne     0x40129b
0x00401035      mov     rax, qword [var_58h]
0x00401039      add     rax, 0xe   ; 14
0x0040103d      movzx   eax, byte [rax]
0x00401040      cmp     al, 0x62   ; 98
0x00401042      jne     0x40129b
0x00401048      mov     rax, qword [var_58h]
0x0040104c      add     rax, 0xf   ; 15
0x00401050      movzx   eax, byte [rax]
0x00401053      cmp     al, 0x30   ; 48
0x00401055      jne     0x40129b
0x0040105b      mov     rax, qword [var_58h]
0x0040105f      add     rax, 0x10  ; 16
0x00401063      movzx   eax, byte [rax]
0x00401066      cmp     al, 0x38   ; 56
0x00401068      jne     0x40129b
0x0040106e      mov     rax, qword [var_58h]
0x00401072      add     rax, 0x11  ; 17
0x00401076      movzx   eax, byte [rax]
0x00401079      cmp     al, 0x39   ; 57
0x0040107b      jne     0x40129b
0x00401081      mov     rax, qword [var_58h]
0x00401085      add     rax, 0x12  ; 18
0x00401089      movzx   eax, byte [rax]
0x0040108c      cmp     al, 0x38   ; 56
0x0040108e      jne     0x40129b
0x00401094      mov     rax, qword [var_58h]
0x00401098      add     rax, 0x13  ; 19
0x0040109c      movzx   eax, byte [rax]
0x0040109f      cmp     al, 0x62   ; 98
0x004010a1      jne     0x40129b
0x004010a7      mov     rax, qword [var_58h]
0x004010ab      add     rax, 0x14  ; 20
0x004010af      movzx   eax, byte [rax]
0x004010b2      cmp     al, 0x63   ; 99
0x004010b4      jne     0x40129b
0x004010ba      mov     rax, qword [var_58h]
0x004010be      add     rax, 0x15  ; 21
0x004010c2      movzx   eax, byte [rax]
0x004010c5      cmp     al, 0x34   ; 52
0x004010c7      jne     0x40129b
0x004010cd      mov     rax, qword [var_58h]
0x004010d1      add     rax, 0x16  ; 22
0x004010d5      movzx   eax, byte [rax]
0x004010d8      cmp     al, 0x66   ; 102
0x004010da      jne     0x40129b
0x004010e0      mov     rax, qword [var_58h]
0x004010e4      add     rax, 0x17  ; 23
0x004010e8      movzx   eax, byte [rax]
0x004010eb      cmp     al, 0x30   ; 48
0x004010ed      jne     0x40129b
0x004010f3      mov     rax, qword [var_58h]
0x004010f7      add     rax, 0x18  ; 24
0x004010fb      movzx   eax, byte [rax]
0x004010fe      cmp     al, 0x32   ; 50
0x00401100      jne     0x40129b
0x00401106      mov     rax, qword [var_58h]
0x0040110a      add     rax, 0x19  ; 25
0x0040110e      movzx   eax, byte [rax]
0x00401111      cmp     al, 0x32   ; 50
0x00401113      jne     0x40129b
0x00401119      mov     rax, qword [var_58h]
0x0040111d      add     rax, 0x1a  ; 26
0x00401121      movzx   eax, byte [rax]
0x00401124      cmp     al, 0x35   ; 53
0x00401126      jne     0x40129b
0x0040112c      mov     rax, qword [var_58h]
0x00401130      add     rax, 0x1b  ; 27
0x00401134      movzx   eax, byte [rax]
0x00401137      cmp     al, 0x39   ; 57
0x00401139      jne     0x40129b
0x0040113f      mov     rax, qword [var_58h]
0x00401143      add     rax, 0x1c  ; 28
0x00401147      movzx   eax, byte [rax]
0x0040114a      cmp     al, 0x33   ; 51
0x0040114c      jne     0x40129b
0x00401152      mov     rax, qword [var_58h]
0x00401156      add     rax, 0x1d  ; 29
0x0040115a      movzx   eax, byte [rax]
0x0040115d      cmp     al, 0x35   ; 53
0x0040115f      jne     0x40129b
0x00401165      mov     rax, qword [var_58h]
0x00401169      add     rax, 0x1e  ; 30
0x0040116d      movzx   eax, byte [rax]
0x00401170      cmp     al, 0x63   ; 99
0x00401172      jne     0x40129b
0x00401178      mov     rax, qword [var_58h]
0x0040117c      add     rax, 0x1f  ; 31
0x00401180      movzx   eax, byte [rax]
0x00401183      cmp     al, 0x30   ; 48
0x00401185      jne     0x40129b
</code></pre><p>根据汇编语句可以得到md5的字符应该是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>780438d5b6e29db0898bc4f0225935c0
</span></span></code></pre></div><p>试试使用一些md5破解的工具进行破解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>b781cbb29054db12f88f08c6e161c199
</span></span></code></pre></div><p>这个应该就是flag了，题目思路也就很简单。可能感到困难的是C++的反汇编。</p>
<p>本题flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>b781cbb29054db12f88f08c6e161c199
</span></span></code></pre></div><h2 id="0x4-parallel-comparator-200">0x4 parallel-comparator-200</h2>
<p>题目直接给到了C的源代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;pthread.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define FLAG_LEN 20
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">checking</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>arg) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>result <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>));
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argument <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)arg;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>result <span style="color:#f92672">=</span> (argument[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span>argument[<span style="color:#ae81ff">1</span>]) <span style="color:#f92672">^</span> argument[<span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">highly_optimized_parallel_comparsion</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>user_string)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> initialization_number;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> i;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> generated_string[FLAG_LEN <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>    generated_string[FLAG_LEN] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;\0&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> ((initialization_number <span style="color:#f92672">=</span> <span style="color:#a6e22e">random</span>()) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">64</span>);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> first_letter;
</span></span><span style="display:flex;"><span>    first_letter <span style="color:#f92672">=</span> (initialization_number <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pthread_t</span> <span style="color:#66d9ef">thread</span>[FLAG_LEN];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> differences[FLAG_LEN] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">6</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">6</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>arguments[<span style="color:#ae81ff">20</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> FLAG_LEN; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        arguments[i] <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">malloc</span>(<span style="color:#ae81ff">3</span><span style="color:#f92672">*</span><span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>));
</span></span><span style="display:flex;"><span>        arguments[i][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> first_letter;
</span></span><span style="display:flex;"><span>        arguments[i][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> differences[i];
</span></span><span style="display:flex;"><span>        arguments[i][<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> user_string[i];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">pthread_create</span>((<span style="color:#66d9ef">pthread_t</span><span style="color:#f92672">*</span>)(<span style="color:#66d9ef">thread</span><span style="color:#f92672">+</span>i), NULL, checking, arguments[i]);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>result;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> just_a_string[FLAG_LEN] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">115</span>, <span style="color:#ae81ff">116</span>, <span style="color:#ae81ff">114</span>, <span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">110</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">101</span>, <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">115</span>, <span style="color:#ae81ff">116</span>, <span style="color:#ae81ff">114</span>, <span style="color:#ae81ff">105</span>, <span style="color:#ae81ff">110</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">105</span>, <span style="color:#ae81ff">116</span>, <span style="color:#ae81ff">95</span>, <span style="color:#ae81ff">105</span>, <span style="color:#ae81ff">115</span>};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> FLAG_LEN; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">pthread_join</span>(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">thread</span><span style="color:#f92672">+</span>i), <span style="color:#f92672">&amp;</span>result);
</span></span><span style="display:flex;"><span>        generated_string[i] <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)result <span style="color:#f92672">+</span> just_a_string[i];
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">free</span>(result);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">free</span>(arguments[i]);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> is_ok <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> FLAG_LEN; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (generated_string[i] <span style="color:#f92672">!=</span> just_a_string[i])
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>user_string <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">calloc</span>(FLAG_LEN<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>));
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fgets</span>(user_string, FLAG_LEN<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>, stdin);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> is_ok <span style="color:#f92672">=</span> <span style="color:#a6e22e">highly_optimized_parallel_comparsion</span>(user_string);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (is_ok)
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;You win!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Wrong!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>应该是一个代码审计的题目，对C语言源码进行审计</p>
<p>找到关键函数代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">pthread_t</span> <span style="color:#66d9ef">thread</span>[FLAG_LEN];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> differences[FLAG_LEN] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">6</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">6</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>arguments[<span style="color:#ae81ff">20</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> FLAG_LEN; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    arguments[i] <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">malloc</span>(<span style="color:#ae81ff">3</span><span style="color:#f92672">*</span><span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>));
</span></span><span style="display:flex;"><span>    arguments[i][<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> first_letter;
</span></span><span style="display:flex;"><span>    arguments[i][<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> differences[i];
</span></span><span style="display:flex;"><span>    arguments[i][<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> user_string[i];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pthread_create</span>((<span style="color:#66d9ef">pthread_t</span><span style="color:#f92672">*</span>)(<span style="color:#66d9ef">thread</span><span style="color:#f92672">+</span>i), NULL, checking, arguments[i]);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>关键应该是<code>pthread_create</code>函数和<code>checking</code>函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">checking</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>arg) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>result <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">char</span>));
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argument <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)arg;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>result <span style="color:#f92672">=</span> (argument[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span>argument[<span style="color:#ae81ff">1</span>]) <span style="color:#f92672">^</span> argument[<span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>通过对函数<code>pthread_create</code>的查阅并根据<code>checking</code>的返回值可以得到：</p>
<p><code>result == 0</code> ，也就是可以得到一个等式关系来进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>(argument[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span>argument[<span style="color:#ae81ff">1</span>]) <span style="color:#f92672">==</span> argument[<span style="color:#ae81ff">2</span>];
</span></span></code></pre></div><p>故现在只需要得到<code>argument[0]</code>的数值就可以进行求解了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> first_letter;
</span></span><span style="display:flex;"><span>first_letter <span style="color:#f92672">=</span> (initialization_number <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;
</span></span></code></pre></div><p>现在可以知道<code>argument[0]</code>的取值范围在 0 ~ 25根据这个范围进行爆破。</p>
<p>根据上述分析，写一个python脚本求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>differences <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">6</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">13</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">9</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">6</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">7</span>]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">97</span>,<span style="color:#ae81ff">97</span><span style="color:#f92672">+</span><span style="color:#ae81ff">26</span>):
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> differences:
</span></span><span style="display:flex;"><span>        flag <span style="color:#f92672">+=</span> chr(k<span style="color:#f92672">+</span>i)
</span></span><span style="display:flex;"><span>    print(flag)
</span></span></code></pre></div><p>运行代码在输出结果中可以找到：</p>
<p><img src="/images/XCTF-REVERSE-expert-2_writeup/image-20211102180423890.png" alt="image-20211102180423890"></p>
<p>故本题的flag:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>lucky_hacker_you_are
</span></span></code></pre></div><h2 id="0x5-secret-galaxy-300">0x5 secret-galaxy-300</h2>
<p>使用DIE来对程序进行探测：</p>
<p><img src="/images/XCTF-REVERSE-expert-2_writeup/image-20211102184409728.png" alt="image-20211102184409728"></p>
<p>没有壳，静态分析看下代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__main</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fill_starbase</span>(<span style="color:#f92672">&amp;</span>starbase);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">print_starbase</span>(<span style="color:#f92672">&amp;</span>starbase);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>分别跟进两个函数来查看</p>
<p>fill_starbase：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">fill_starbase</span>(<span style="color:#66d9ef">int</span> a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+8h] [ebp-10h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v2; <span style="color:#75715e">// [esp+Ch] [ebp-Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i) <span style="color:#f92672">=</span> galaxy_name[i];
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>) <span style="color:#f92672">=</span> <span style="color:#a6e22e">rand</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">12</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> (i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> a1;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">20</span>) <span style="color:#f92672">=</span> v2;
</span></span><span style="display:flex;"><span>    v2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1;
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>print_starbase：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">print_starbase</span>(<span style="color:#66d9ef">int</span> a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v2; <span style="color:#75715e">// edx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+1Ch] [ebp-Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;--------------GALAXY DATABASE-------------&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%10s | %s | %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#e6db74">&#34;Galaxy name&#34;</span>, <span style="color:#e6db74">&#34;Existence of life&#34;</span>, <span style="color:#e6db74">&#34;Distance from Earth&#34;</span>);
</span></span><span style="display:flex;"><span>  result <span style="color:#f92672">=</span> <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;-------------------------------------------&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>      v2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;INHABITED&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>      v2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;IS NOT INHABITED&#34;</span>;
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%11s | %17s | %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, <span style="color:#f92672">*</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1), v2, <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>));
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>实在是看不出什么线索，查看一下字符串输出</p>
<p><img src="/images/XCTF-REVERSE-expert-2_writeup/image-20211102191117327.png" alt="image-20211102191117327"></p>
<p>发现有个字符串没有进行输出，有点可疑，跟进去一探究竟</p>
<p><img src="/images/XCTF-REVERSE-expert-2_writeup/image-20211102191250757.png" alt="image-20211102191250757"></p>
<p>果然有些端倪，继续追踪</p>
<p><img src="/images/XCTF-REVERSE-expert-2_writeup/image-20211102191341004.png" alt="image-20211102191341004"></p>
<p>再接再励，真相就在眼前</p>
<p><img src="/images/XCTF-REVERSE-expert-2_writeup/image-20211102191448118.png" alt="image-20211102191448118"></p>
<p>这个字符串的地址是0x4013E0，拿到了地址就可以做很多事情了，可以使用Ollydbg跟踪到这个地址来进行动态分析，如果没有问题的话，flag应该就在动态调试的内存中。先来尝试一下调试调试：</p>
<p>步入到断点0x4013E0，不断进行F8单步运行，运行到函数结尾位置，查看一下内存：</p>
<p><img src="/images/XCTF-REVERSE-expert-2_writeup/image-20211102192916295.png" alt="image-20211102192916295"></p>
<p>发现可疑字符，这段字符应该就是可能的flag</p>
<p>这道题目的flag是</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>aliens_are_around_us
</span></span></code></pre></div><hr>
]]></content>
        </item>
        
        <item>
            <title>XCTF REVERSE Expert (1) Writeup</title>
            <link>/posts/xctf-reverse-expert-1_writeup/</link>
            <pubDate>Fri, 28 Jan 2022 19:33:49 +0800</pubDate>
            
            <guid>/posts/xctf-reverse-expert-1_writeup/</guid>
            <description>XCTF-REVERSE-高手区-1 writeup 有段时间没有刷题了，刷刷题找找手感
0x0 answer_to_everything 使用DIE查看程序信息
程序没有壳，而且是64位。然后看看文件长什么样，静态分析的时刻来临：
发现关键函数，跟进这个函数
__int64 __fastcall not_the_flag(int a1) { if ( a1 == 42 ) puts(&amp;#34;Cipher from Bill \nSubmit without any tags\n#kdudpeh&amp;#34;); else puts(&amp;#34;YOUSUCK&amp;#34;); return 0LL; } 根据题目要求，应该是要对一个字段进行sha1加密，仔细观察逆向程序，发现应该是对kdudpeh进行sha1加密
使用python进行sha1加密得：
80ee2a3fe31da904c596d993f7f1de4827c1450a 故本题flag为
flag{80ee2a3fe31da904c596d993f7f1de4827c1450a} 0x1 elrond32 使用DIE查询一下文件信息
32位的exec文件，使用IDA pro打开
定位到main函数的位置
int __cdecl main(int a1, char **a2) { if ( a1 &amp;gt; 1 &amp;amp;&amp;amp; sub_8048414(a2[1], 0) ) { puts(&amp;#34;Access granted&amp;#34;); sub_8048538(a2[1]); } else { puts(&amp;#34;Access denied&amp;#34;); } return 0; } 关键函数应该是在sub_8048538(a2[1])函数里面</description>
            <content type="html"><![CDATA[<h1 id="xctf-reverse-高手区-1-writeup">XCTF-REVERSE-高手区-1 writeup</h1>
<p>有段时间没有刷题了，刷刷题找找手感</p>
<h2 id="0x0-answer_to_everything">0x0 answer_to_everything</h2>
<p>使用DIE查看程序信息</p>
<p><img src="/images/XCTF-REVERSE-expert-1_writeup/image-20211031104627471.png" alt="image-20211031104627471"></p>
<p>程序没有壳，而且是64位。然后看看文件长什么样，静态分析的时刻来临：</p>
<p><img src="/images/XCTF-REVERSE-expert-1_writeup/image-20211031104740182.png" alt="image-20211031104740182"></p>
<p>发现关键函数，跟进这个函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">not_the_flag</span>(<span style="color:#66d9ef">int</span> a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">42</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Cipher from Bill </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Submit without any tags</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">#kdudpeh&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;YOUSUCK&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>根据题目要求，应该是要对一个字段进行sha1加密，仔细观察逆向程序，发现应该是对<code>kdudpeh</code>进行sha1加密</p>
<p>使用python进行sha1加密得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>80ee2a3fe31da904c596d993f7f1de4827c1450a
</span></span></code></pre></div><p>故本题flag为</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{80ee2a3fe31da904c596d993f7f1de4827c1450a}
</span></span></code></pre></div><h2 id="0x1-elrond32">0x1 elrond32</h2>
<p>使用DIE查询一下文件信息</p>
<p><img src="/images/XCTF-REVERSE-expert-1_writeup/image-20211031105318823.png" alt="image-20211031105318823"></p>
<p>32位的exec文件，使用IDA pro打开</p>
<p>定位到main函数的位置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> a1, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a2)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( a1 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">sub_8048414</span>(a2[<span style="color:#ae81ff">1</span>], <span style="color:#ae81ff">0</span>) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Access granted&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_8048538</span>(a2[<span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Access denied&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>关键函数应该是在<code>sub_8048538(a2[1])</code>函数里面</p>
<p>跟进到<code>sub_8048538(a2[1])</code>函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_8048538</span>(<span style="color:#66d9ef">int</span> a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> v2[<span style="color:#ae81ff">33</span>]; <span style="color:#75715e">// [esp+18h] [ebp-A0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+9Ch] [ebp-1Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">qmemcpy</span>(v2, <span style="color:#f92672">&amp;</span>unk_8048760, <span style="color:#66d9ef">sizeof</span>(v2));
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">32</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">putchar</span>(v2[i] <span style="color:#f92672">^</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">8</span>));
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">putchar</span>(<span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>发现和参数a2有关联，需要寻找<code>a2</code>的相关线索</p>
<p>发现<code>if</code>判断那个位置的函数有对<code>a2</code>数据进行处理，跟进那个函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_8048414</span>(_BYTE <span style="color:#f92672">*</span>a1, <span style="color:#66d9ef">int</span> a2)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">switch</span> ( a2 )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">105</span> )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_19;
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">101</span> )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_19;
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">110</span> )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_19;
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">100</span> )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_19;
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">97</span> )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_19;
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">6</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">103</span> )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_19;
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">7</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">115</span> )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_19;
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">9</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>a1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">114</span> )
</span></span><span style="display:flex;"><span>LABEL_19:
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_8048414</span>(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">7</span> <span style="color:#f92672">*</span> (a2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">11</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>对于<code>a2</code>进行递归变化，结合对于<code>a2</code>处理的函数，可以编写个小程序来生成flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> v2[]
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x0F</span>, <span style="color:#ae81ff">0x1F</span>,  <span style="color:#ae81ff">0x04</span>, <span style="color:#ae81ff">0x09</span>, <span style="color:#ae81ff">0x1C</span>, <span style="color:#ae81ff">0x12</span>,  <span style="color:#ae81ff">0x42</span>,  <span style="color:#ae81ff">0x09</span>,  <span style="color:#ae81ff">0x0C</span>, <span style="color:#ae81ff">0x44</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x0D</span>, <span style="color:#ae81ff">0x07</span>,  <span style="color:#ae81ff">0x09</span>, <span style="color:#ae81ff">0x06</span>, <span style="color:#ae81ff">0x2D</span>, <span style="color:#ae81ff">0x37</span>,  <span style="color:#ae81ff">0x59</span>,  <span style="color:#ae81ff">0x1E</span>,  <span style="color:#ae81ff">0x00</span>, <span style="color:#ae81ff">0x59</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x0F</span>, <span style="color:#ae81ff">0x08</span>,  <span style="color:#ae81ff">0x1C</span>, <span style="color:#ae81ff">0x23</span>, <span style="color:#ae81ff">0x36</span>, <span style="color:#ae81ff">0x07</span>,  <span style="color:#ae81ff">0x55</span>,  <span style="color:#ae81ff">0x02</span>,  <span style="color:#ae81ff">0x0C</span>, <span style="color:#ae81ff">0x08</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x41</span>, <span style="color:#ae81ff">0x0A</span>,  <span style="color:#ae81ff">0x14</span>
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> key[]
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">105</span>,<span style="color:#ae81ff">115</span>,<span style="color:#ae81ff">101</span>,<span style="color:#ae81ff">110</span>,<span style="color:#ae81ff">103</span>,<span style="color:#ae81ff">97</span>,<span style="color:#ae81ff">114</span>,<span style="color:#ae81ff">100</span>
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">33</span>;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    putchar(v2[i]<span style="color:#f92672">^</span>key[i<span style="color:#f92672">%</span><span style="color:#ae81ff">8</span>]);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行，就能得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{s0me7hing_S0me7hinG_t0lki3n}
</span></span></code></pre></div><h2 id="0x2-666">0x2 666</h2>
<p>使用DIE查询一下程序信息：</p>
<p><img src="/images/XCTF-REVERSE-expert-1_writeup/image-20211031153424353.png" alt="image-20211031153424353"></p>
<p>64位程序，使用GCC进行编译的无壳程序</p>
<p>使用IDA x64 pro 对程序进行静态分析：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">240</span>]; <span style="color:#75715e">// [rsp+0h] [rbp-1E0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5[<span style="color:#ae81ff">240</span>]; <span style="color:#75715e">// [rsp+F0h] [rbp-F0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(s, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">30uLL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Please Input Key: &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__isoc99_scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, v5);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">encode</span>(v5, (<span style="color:#66d9ef">__int64</span>)s);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(v5) <span style="color:#f92672">==</span> key )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(s, enflag) )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;You are Right&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;flag{This_1s_f4cker_flag}&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>关键函数应该是在encode里面，这个程序的基本逻辑就是将输入进行<code>encode</code>函数处理，然后与指定的字符串进行比对来进行验证。</p>
<p>而输入的字符串就是flag数据。</p>
<p>因此，这道题目也就可以非常简单进行处理，也就是对<code>encode</code>函数进行逆向处理就可</p>
<p>首先，还是查看一下<code>encode</code>的内部实现情况：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">encode</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>a1, <span style="color:#66d9ef">__int64</span> a2)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> v3[<span style="color:#ae81ff">104</span>]; <span style="color:#75715e">// [rsp+10h] [rbp-70h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// [rsp+78h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+7Ch] [rbp-4h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(a1) <span style="color:#f92672">!=</span> key )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Your Length is Wrong&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> key; i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">3</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v3[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">64</span>] <span style="color:#f92672">=</span> key <span style="color:#f92672">^</span> (a1[i] <span style="color:#f92672">+</span> <span style="color:#ae81ff">6</span>);
</span></span><span style="display:flex;"><span>    v3[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">33</span>] <span style="color:#f92672">=</span> (a1[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">6</span>) <span style="color:#f92672">^</span> key;
</span></span><span style="display:flex;"><span>    v3[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> a1[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>] <span style="color:#f92672">^</span> <span style="color:#ae81ff">6</span> <span style="color:#f92672">^</span> key;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)(a2 <span style="color:#f92672">+</span> i) <span style="color:#f92672">=</span> v3[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">64</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)(a2 <span style="color:#f92672">+</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1LL</span>) <span style="color:#f92672">=</span> v3[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">33</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(_BYTE <span style="color:#f92672">*</span>)(a2 <span style="color:#f92672">+</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2LL</span>) <span style="color:#f92672">=</span> v3[i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> a2;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>进行跟踪发现<code>key = 18</code></p>
<p>可以得知我们输入的内容长度为18</p>
<p>根据编码函数编写一个解密器进行程序破解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> enflag[] <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x69</span>, <span style="color:#ae81ff">0x7A</span>, <span style="color:#ae81ff">0x77</span>, <span style="color:#ae81ff">0x68</span>, <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x6F</span>, <span style="color:#ae81ff">0x7A</span>, <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x77</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x76</span>, <span style="color:#ae81ff">0x2E</span>, <span style="color:#ae81ff">0x4B</span>, <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x2E</span>, <span style="color:#ae81ff">0x4E</span>, <span style="color:#ae81ff">0x69</span>, <span style="color:#ae81ff">0x00</span>
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> key <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x12</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span>(i;i<span style="color:#f92672">&lt;</span>key;i<span style="color:#f92672">+=</span><span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    putchar((key<span style="color:#f92672">^</span>enflag[i])<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>);
</span></span><span style="display:flex;"><span>    putchar((enflag[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">^</span>key)<span style="color:#f92672">+</span><span style="color:#ae81ff">6</span>);
</span></span><span style="display:flex;"><span>    putchar((enflag[i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>]<span style="color:#f92672">^</span>key<span style="color:#f92672">^</span><span style="color:#ae81ff">6</span>));
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行程序就能拿到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>unctf{b66_6b6_66b}
</span></span></code></pre></div><h2 id="0x3-igniteme">0x3 IgniteMe</h2>
<p>首先是使用DIE进行程序信息的查看：</p>
<p><img src="/images/XCTF-REVERSE-expert-1_writeup/image-20211031161028282.png" alt="image-20211031161028282"></p>
<p>32位的PE程序，PE程序可以使用的工具就有很多了，首先还是静态分析：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">size_t</span> i; <span style="color:#75715e">// [esp+4Ch] [ebp-8Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5[<span style="color:#ae81ff">8</span>]; <span style="color:#75715e">// [esp+50h] [ebp-88h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Str[<span style="color:#ae81ff">128</span>]; <span style="color:#75715e">// [esp+58h] [ebp-80h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_402B30</span>(<span style="color:#f92672">&amp;</span>unk_446360, <span style="color:#e6db74">&#34;Give me your flag:&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_4013F0</span>(sub_403670);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_401440</span>(Str, <span style="color:#ae81ff">127</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(Str) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x1E</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">strlen</span>(Str) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">4</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">strcpy</span>(v5, <span style="color:#e6db74">&#34;EIS{&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">strlen</span>(v5); <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( Str[i] <span style="color:#f92672">!=</span> v5[i] )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_7;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( Str[<span style="color:#ae81ff">28</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">125</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>LABEL_7:
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_402B30</span>(<span style="color:#f92672">&amp;</span>unk_446360, <span style="color:#e6db74">&#34;Sorry, keep trying! &#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_4013F0</span>(sub_403670);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)<span style="color:#a6e22e">sub_4011C0</span>(Str) )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_402B30</span>(<span style="color:#f92672">&amp;</span>unk_446360, <span style="color:#e6db74">&#34;Congratulations! &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_402B30</span>(<span style="color:#f92672">&amp;</span>unk_446360, <span style="color:#e6db74">&#34;Sorry, keep trying! &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_4013F0</span>(sub_403670);
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_402B30</span>(<span style="color:#f92672">&amp;</span>unk_446360, <span style="color:#e6db74">&#34;Sorry, keep trying!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_4013F0</span>(sub_403670);
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>找到关键加密的位置进行分析</p>
<p>即对函数<code>sub_4011c0(str)</code>进行分析</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_4011C0</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>Str)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">size_t</span> v2; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// [esp+50h] [ebp-B0h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Str2[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [esp+54h] [ebp-ACh] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// [esp+74h] [ebp-8Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// [esp+78h] [ebp-88h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">size_t</span> i; <span style="color:#75715e">// [esp+7Ch] [ebp-84h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v8[<span style="color:#ae81ff">128</span>]; <span style="color:#75715e">// [esp+80h] [ebp-80h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(Str) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  i <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>  v6 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ( i <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">strlen</span>(Str) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    v8[v6<span style="color:#f92672">++</span>] <span style="color:#f92672">=</span> Str[i<span style="color:#f92672">++</span>];
</span></span><span style="display:flex;"><span>  v8[v6] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(Str2, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(Str2));
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; ; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v2 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(v8);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( i <span style="color:#f92672">&gt;=</span> v2 )
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v8[i] <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">97</span> <span style="color:#f92672">&amp;&amp;</span> v8[i] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">122</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      v8[i] <span style="color:#f92672">-=</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>      v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>v3 <span style="color:#f92672">&amp;&amp;</span> v8[i] <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">65</span> <span style="color:#f92672">&amp;&amp;</span> v8[i] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> )
</span></span><span style="display:flex;"><span>      v8[i] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>    Str2[i] <span style="color:#f92672">=</span> byte_4420B0[i] <span style="color:#f92672">^</span> <span style="color:#a6e22e">sub_4013C0</span>(v8[i]);
</span></span><span style="display:flex;"><span>    v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strcmp</span>(<span style="color:#e6db74">&#34;GONDPHyGjPEKruv{{pj]X@rF&#34;</span>, Str2) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>直接就是一个加密算法，直接进行手撸一个解密算法即可：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cstring&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> flag[<span style="color:#ae81ff">128</span>]{ <span style="color:#ae81ff">0</span> };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> s[]{
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x0D</span>, <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0x17</span>, <span style="color:#ae81ff">0x11</span>, <span style="color:#ae81ff">0x02</span>, <span style="color:#ae81ff">0x01</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x1D</span>, <span style="color:#ae81ff">0x0C</span>, <span style="color:#ae81ff">0x02</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x19</span>, <span style="color:#ae81ff">0x2F</span>, <span style="color:#ae81ff">0x17</span>, <span style="color:#ae81ff">0x2B</span>, <span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x1F</span>, <span style="color:#ae81ff">0x1E</span>, <span style="color:#ae81ff">0x16</span>, <span style="color:#ae81ff">0x09</span>, <span style="color:#ae81ff">0x0F</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x15</span>, <span style="color:#ae81ff">0x27</span>, <span style="color:#ae81ff">0x13</span>, <span style="color:#ae81ff">0x26</span>, <span style="color:#ae81ff">0x0A</span>, <span style="color:#ae81ff">0x2F</span>, <span style="color:#ae81ff">0x1E</span>, <span style="color:#ae81ff">0x1A</span>, <span style="color:#ae81ff">0x2D</span>, <span style="color:#ae81ff">0x0C</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x04</span>
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> Str[]{ <span style="color:#e6db74">&#34;GONDPHyGjPEKruv{{pj]X@rF&#34;</span> };
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i{ <span style="color:#ae81ff">0</span> };i<span style="color:#f92672">&lt;</span>strlen(Str);i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    flag[i] <span style="color:#f92672">=</span> ((Str[i]<span style="color:#f92672">^</span>s[i])<span style="color:#f92672">-</span><span style="color:#ae81ff">72</span>)<span style="color:#f92672">^</span><span style="color:#ae81ff">0x55</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(flag[i] <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">&amp;&amp;</span> flag[i] <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#39;z&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      flag[i] <span style="color:#f92672">-=</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(flag[i] <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">&amp;&amp;</span> flag[i] <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#39;Z&#39;</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      flag[i] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;EIS{&#34;</span> <span style="color:#f92672">&lt;&lt;</span> flag <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;}&#34;</span> <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行，就可以得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>EIS{wadx_tdgk_aihc_ihkn_pjlm}
</span></span></code></pre></div><h2 id="0x4-debug">0x4 debug</h2>
<p>使用DIE进行正常的程序信息查询：</p>
<p><img src="/images/XCTF-REVERSE-expert-1_writeup/image-20211101080738116.png" alt="image-20211101080738116"></p>
<p>.Net编译的程序，看样子不太友好。面对从未见到过的程序，该怎么做呢？这种情况下，就要使用强大的搜索引擎来寻找答案，经过搜索引擎的帮助，我这边找到了一个工具可以进行.Net程序的逆向——dnSpy</p>
<p>使用dnSpy来进行.Net程序的开心逆向吧！</p>
<p><img src="/images/XCTF-REVERSE-expert-1_writeup/image-20211101082430169.png" alt="image-20211101082430169"></p>
<p>dnSpy程序载入页面，dnSpy是一个非常好用的.Net程序和C#程序逆向工具，而且dnSpy的操作方式与Visual Studio非常相似，可以根据Visual Studio的操作模式进行debug。</p>
<p>首先，需要寻找到关键函数和关键代码位置</p>
<p><img src="/images/XCTF-REVERSE-expert-1_writeup/image-20211101082804148.png" alt="image-20211101082804148"></p>
<p>经过一番寻找，发现在02000003的位置有存在关键代码，根据关键代码跟进关键函数发现：</p>
<p><img src="/images/XCTF-REVERSE-expert-1_writeup/image-20211101083006881.png" alt="image-20211101083006881"></p>
<p>flag就存在在这里，使用断点断在入口函数这里来进行调试，得到：</p>
<p><img src="/images/XCTF-REVERSE-expert-1_writeup/image-20211101083207311.png" alt="image-20211101083207311"></p>
<p>得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{967DDDFBCD32C1F53527C221D9E40A0B}
</span></span></code></pre></div><h2 id="0x5-guess-the-number">0x5 Guess-the-Number</h2>
<p>题目直接给了一个jar程序文件，应该是一个java逆向题目，java逆向和Android逆向类似，故可以使用相似的工具进行反编译：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> defpackage<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.math.BigInteger<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* renamed from: guess  reason: default package */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">guess</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">XOR</span><span style="color:#f92672">(</span>String _str_one<span style="color:#f92672">,</span> String _str_two<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> BigInteger<span style="color:#f92672">(</span>_str_one<span style="color:#f92672">,</span> <span style="color:#ae81ff">16</span><span style="color:#f92672">).</span><span style="color:#a6e22e">xor</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> BigInteger<span style="color:#f92672">(</span>_str_two<span style="color:#f92672">,</span> <span style="color:#ae81ff">16</span><span style="color:#f92672">)).</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(</span><span style="color:#ae81ff">16</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>args<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#ae81ff">309137378</span> <span style="color:#f92672">==</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">parseInt</span><span style="color:#f92672">(</span>args<span style="color:#f92672">[</span><span style="color:#ae81ff">0</span><span style="color:#f92672">]))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">int</span> my_num <span style="color:#f92672">=</span> <span style="color:#ae81ff">349763335</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">345736730</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;your flag is: &#34;</span> <span style="color:#f92672">+</span> XOR<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;4b64ca12ace755516c178f72d05d7061&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;ecd44646cfe5994ebeb35bf922e25dba&#34;</span><span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                System<span style="color:#f92672">.</span><span style="color:#a6e22e">err</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;wrong guess!&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                System<span style="color:#f92672">.</span><span style="color:#a6e22e">exit</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>NumberFormatException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                System<span style="color:#f92672">.</span><span style="color:#a6e22e">err</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;please enter an integer \nexample: java -jar guess 12&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                System<span style="color:#f92672">.</span><span style="color:#a6e22e">exit</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">err</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;wrong guess!&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">int</span> num <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000000</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">exit</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>可以直接拖到idea进行参数调试来得到flag:cat:（偷懒小技巧）</p>
<p><img src="/images/XCTF-REVERSE-expert-1_writeup/image-20211101084458531.png" alt="image-20211101084458531"></p>
<p>成功得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>a7b08c546302cc1fd2a4d48bf2bf2ddb
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>BUUCTF REVERSE [17~24]_Writeup</title>
            <link>/posts/buuctf-reverse-3_writeup/</link>
            <pubDate>Fri, 28 Jan 2022 19:24:35 +0800</pubDate>
            
            <guid>/posts/buuctf-reverse-3_writeup/</guid>
            <description>BUUCTF-REVERSE-3 writeup 8道练手的逆向题目，可以尝试做一做
0x0 [GWCTF 2019] pyre 应该是python逆向的题目
果然是一个pyc文件，使用pyc的逆向工具进行处理得到python的代码
# uncompyle6 version 3.7.4 # Python bytecode 2.7 (62211) # Decompiled from: Python 3.8.8 (default, Apr 13 2021, 15:08:03) [MSC v.1916 64 bit (AMD64)] # Embedded file name: encode.py # Compiled at: 2019-08-19 21:01:57 print &amp;#39;Welcome to Re World!&amp;#39; print &amp;#39;Your input1 is your flag~&amp;#39; l = len(input1) for i in range(l): num = ((input1[i] + i) % 128 + 128) % 128 code += num for i in range(l - 1): code[i] = code[i] ^ code[(i + 1)] print code code = [&amp;#39;\x1f&amp;#39;, &amp;#39;\x12&amp;#39;, &amp;#39;\x1d&amp;#39;, &amp;#39;(&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;\x01&amp;#39;, &amp;#39;\x06&amp;#39;, &amp;#39;\x14&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;,&amp;#39;, &amp;#39;\x1b&amp;#39;, &amp;#39;U&amp;#39;, &amp;#39;?</description>
            <content type="html"><![CDATA[<h1 id="buuctf-reverse-3-writeup">BUUCTF-REVERSE-3 writeup</h1>
<p>8道练手的逆向题目，可以尝试做一做</p>
<p><img src="/images/BUUCTF-REVERSE-3_writeup/image-20210914212658475.png" alt="image-20210914212658475"></p>
<h2 id="0x0-gwctf-2019-pyre">0x0 [GWCTF 2019] pyre</h2>
<p>应该是python逆向的题目</p>
<p>果然是一个pyc文件，使用pyc的逆向工具进行处理得到python的代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># uncompyle6 version 3.7.4</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Python bytecode 2.7 (62211)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Decompiled from: Python 3.8.8 (default, Apr 13 2021, 15:08:03) [MSC v.1916 64 bit (AMD64)]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Embedded file name: encode.py</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Compiled at: 2019-08-19 21:01:57</span>
</span></span><span style="display:flex;"><span>print <span style="color:#e6db74">&#39;Welcome to Re World!&#39;</span>
</span></span><span style="display:flex;"><span>print <span style="color:#e6db74">&#39;Your input1 is your flag~&#39;</span>
</span></span><span style="display:flex;"><span>l <span style="color:#f92672">=</span> len(input1)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(l):
</span></span><span style="display:flex;"><span>    num <span style="color:#f92672">=</span> ((input1[i] <span style="color:#f92672">+</span> i) <span style="color:#f92672">%</span> <span style="color:#ae81ff">128</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">128</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">128</span>
</span></span><span style="display:flex;"><span>    code <span style="color:#f92672">+=</span> num
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(l <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    code[i] <span style="color:#f92672">=</span> code[i] <span style="color:#f92672">^</span> code[(i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print code
</span></span><span style="display:flex;"><span>code <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x1f</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x12</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x1d</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;(&#39;</span>, <span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x01</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x06</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x14</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#e6db74">&#39;,&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;U&#39;</span>, <span style="color:#e6db74">&#39;?&#39;</span>, <span style="color:#e6db74">&#39;o&#39;</span>, <span style="color:#e6db74">&#39;6&#39;</span>, <span style="color:#e6db74">&#39;*&#39;</span>, <span style="color:#e6db74">&#39;:&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x01</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;D&#39;</span>, <span style="color:#e6db74">&#39;;&#39;</span>, <span style="color:#e6db74">&#39;%&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x13</span><span style="color:#e6db74">&#39;</span>]
</span></span><span style="display:flex;"><span><span style="color:#75715e"># okay decompiling .\attachment.pyc</span>
</span></span></code></pre></div><p>对代码进行审计，发现<code>input1</code>的数值没有给到，感觉应该是在<code>input1</code>里面。根据代码进行逆推</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>code <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x1f</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x12</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x1d</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;(&#39;</span>, <span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x01</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x06</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x14</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#e6db74">&#39;,&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x1b</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;U&#39;</span>, <span style="color:#e6db74">&#39;?&#39;</span>, <span style="color:#e6db74">&#39;o&#39;</span>, <span style="color:#e6db74">&#39;6&#39;</span>, <span style="color:#e6db74">&#39;*&#39;</span>, <span style="color:#e6db74">&#39;:&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x01</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;D&#39;</span>, <span style="color:#e6db74">&#39;;&#39;</span>, <span style="color:#e6db74">&#39;%&#39;</span>, <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x13</span><span style="color:#e6db74">&#39;</span>]
</span></span><span style="display:flex;"><span>l <span style="color:#f92672">=</span> len(code)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(l<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>,<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    code[i] <span style="color:#f92672">=</span> chr(ord(code[i])<span style="color:#f92672">^</span>ord(code[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(l):
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">+=</span> chr((ord(code[i]) <span style="color:#f92672">-</span> i)<span style="color:#f92672">%</span><span style="color:#ae81ff">128</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>运行脚本，得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>GWHT{Just_Re_1s_Ha66y!}
</span></span></code></pre></div><h2 id="0x1-rsa">0x1 rsa</h2>
<p>rsa还能出逆向题目：D！Crypto手狂喜</p>
<p>两个文件，一个enc文件和一个key文件，标准的RSA文件</p>
<p>可以使用python脚本来获取n的数值和e的数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.PublicKey <span style="color:#f92672">import</span> RSA
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;pub.key&#34;</span>,<span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>     public_key <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>import_key(f<span style="color:#f92672">.</span>read())
</span></span><span style="display:flex;"><span>     e <span style="color:#f92672">=</span> public_key<span style="color:#f92672">.</span>e
</span></span><span style="display:flex;"><span>     n <span style="color:#f92672">=</span> public_key<span style="color:#f92672">.</span>n
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(n)
</span></span></code></pre></div><p>得到n的数值</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>86934482296048119190666062003494800588905656017203025617216654058378322103517
</span></span></code></pre></div><p>然后使用yafu工具进行大数分解，得到p和q</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>P = 304008741604601924494328155975272418463
</span></span><span style="display:flex;"><span>Q = 285960468890451637935629440372639283459
</span></span></code></pre></div><p>然后根据后续得到是数据写脚本求解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.PublicKey <span style="color:#f92672">import</span> RSA
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> long_to_bytes,bytes_to_long
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> libnum <span style="color:#f92672">import</span> invmod
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;pub.key&#34;</span>,<span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>     public_key <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>import_key(f<span style="color:#f92672">.</span>read())
</span></span><span style="display:flex;"><span>     e <span style="color:#f92672">=</span> public_key<span style="color:#f92672">.</span>e
</span></span><span style="display:flex;"><span>     n <span style="color:#f92672">=</span> public_key<span style="color:#f92672">.</span>n
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print(n)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;flag.enc&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>     c <span style="color:#f92672">=</span> bytes_to_long(f<span style="color:#f92672">.</span>read())
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">304008741604601924494328155975272418463</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">285960468890451637935629440372639283459</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> invmod(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> long_to_bytes(m)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>运行脚本得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>b&#39;\x02\x9d {zR\x1e\x08\xe4\xe6\x18\x06\x00flag{decrypt_256}\n&#39;
</span></span></code></pre></div><p>flag即为</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{decrypt_256}
</span></span></code></pre></div><h2 id="0x2-actf新生赛-easyre">0x2 [ACTF新生赛] easyre</h2>
<p>走下流程，查下壳</p>
<p><img src="/images/BUUCTF-REVERSE-3_writeup/image-20210915090016298.png" alt="image-20210915090016298"></p>
<p>发现有壳，需要进行脱壳</p>
<p>使用UPX进行脱壳处理</p>
<p><img src="/images/BUUCTF-REVERSE-3_writeup/image-20210915090432391.png" alt="image-20210915090432391"></p>
<p>然后再次查看信息</p>
<p><img src="/images/BUUCTF-REVERSE-3_writeup/image-20210915090516027.png" alt="image-20210915090516027"></p>
<p>32位程序，已经成功脱壳，可以丢进ida pro里面玩耍了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  _BYTE v4[<span style="color:#ae81ff">12</span>]; <span style="color:#75715e">// [esp+12h] [ebp-2Eh] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _DWORD v5[<span style="color:#ae81ff">3</span>]; <span style="color:#75715e">// [esp+1Eh] [ebp-22h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _BYTE v6[<span style="color:#ae81ff">5</span>]; <span style="color:#75715e">// [esp+2Ah] [ebp-16h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// [esp+2Fh] [ebp-11h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// [esp+33h] [ebp-Dh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// [esp+37h] [ebp-9h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v10; <span style="color:#75715e">// [esp+3Bh] [ebp-5h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+3Ch] [ebp-4h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__main</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">qmemcpy</span>(v4, <span style="color:#e6db74">&#34;*F&#39;</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">N,</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">(I?+@&#34;</span>, <span style="color:#66d9ef">sizeof</span>(v4));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Please input:&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, v6);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v6[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">65</span> <span style="color:#f92672">||</span> v6[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">67</span> <span style="color:#f92672">||</span> v6[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">84</span> <span style="color:#f92672">||</span> v6[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">70</span> <span style="color:#f92672">||</span> v6[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">123</span> <span style="color:#f92672">||</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">125</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  v5[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> v7;
</span></span><span style="display:flex;"><span>  v5[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> v8;
</span></span><span style="display:flex;"><span>  v5[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> v9;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">11</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v4[i] <span style="color:#f92672">!=</span> _data_start__[<span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v5 <span style="color:#f92672">+</span> i) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] )
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;You are correct!&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>就是非常简单的算法了，进行简单的逆向算法就可以求解，写一个python脚本进行求解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>data_list <span style="color:#f92672">=</span> [<span style="color:#ae81ff">42</span>,<span style="color:#ae81ff">70</span>,<span style="color:#ae81ff">39</span>,<span style="color:#ae81ff">34</span>,<span style="color:#ae81ff">78</span>,<span style="color:#ae81ff">44</span>,<span style="color:#ae81ff">34</span>,<span style="color:#ae81ff">40</span>,<span style="color:#ae81ff">73</span>,<span style="color:#ae81ff">63</span>,<span style="color:#ae81ff">43</span>,<span style="color:#ae81ff">64</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;}|{zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(&#34;</span> <span style="color:#f92672">+</span> chr(<span style="color:#ae81ff">0x27</span>) <span style="color:#f92672">+</span> <span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;&amp;%$# !&#34;&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag_list <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> data_list:
</span></span><span style="display:flex;"><span>    flag_list<span style="color:#f92672">.</span>append(data<span style="color:#f92672">.</span>find(chr(i))<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> [chr(x <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> pos]
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(s)
</span></span><span style="display:flex;"><span>print (<span style="color:#e6db74">&#39;flag{&#39;</span><span style="color:#f92672">+</span>flag<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;}&#39;</span>)
</span></span></code></pre></div><p>运行脚本就可以得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{U9X_1S_W6@T?}
</span></span></code></pre></div><h2 id="0x3-crackrtf">0x3 CrackRTF</h2>
<p>先查一下壳</p>
<p><img src="/images/BUUCTF-REVERSE-3_writeup/image-20210915115948303.png" alt="image-20210915115948303"></p>
<p>32位无壳的pe文件，使用ida pro打开文件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main_0</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  DWORD v3; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  DWORD v4; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Str[<span style="color:#ae81ff">260</span>]; <span style="color:#75715e">// [esp+4Ch] [ebp-310h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// [esp+150h] [ebp-20Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> String1[<span style="color:#ae81ff">260</span>]; <span style="color:#75715e">// [esp+154h] [ebp-208h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Destination[<span style="color:#ae81ff">260</span>]; <span style="color:#75715e">// [esp+258h] [ebp-104h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(Destination, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(Destination));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(String1, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(String1));
</span></span><span style="display:flex;"><span>  v7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;pls input the first passwd(1): &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, Destination);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(Destination) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">6</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Must be 6 characters!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ExitProcess</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  v7 <span style="color:#f92672">=</span> <span style="color:#a6e22e">atoi</span>(Destination);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v7 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">100000</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ExitProcess</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcat</span>(Destination, <span style="color:#e6db74">&#34;@DBApp&#34;</span>);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(Destination);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_40100A</span>((BYTE <span style="color:#f92672">*</span>)Destination, v3, String1);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">_strcmpi</span>(String1, <span style="color:#e6db74">&#34;6E32D0943418C2C33385BC35A1470250DD8923A9&#34;</span>) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;continue...</span><span style="color:#ae81ff">\n\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;pls input the first passwd(2): &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(Str, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(Str));
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, Str);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(Str) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">6</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Must be 6 characters!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">ExitProcess</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">strcat</span>(Str, Destination);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(String1, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(String1));
</span></span><span style="display:flex;"><span>    v4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(Str);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_401019</span>((BYTE <span style="color:#f92672">*</span>)Str, v4, String1);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">_strcmpi</span>(<span style="color:#e6db74">&#34;27019e688a4e62a649fd99cadaafdb4e&#34;</span>, String1) )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)<span style="color:#a6e22e">sub_40100F</span>(Str) )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Error!!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">ExitProcess</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;bye ~~</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>对代码进行审计分析，发现我们需要输入两次密码</p>
<p>首先看下第一次密码输入需要满足什么样的要求：</p>
<p>第一次输入需要进行链接然后使用md5加密然后获取的数值与某些数值相等，也就是:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>MD5(xxxxxx@DBAPP) == 6E32D0943418C2C33385BC35A1470250DD8923A9
</span></span></code></pre></div><p>sub_40100A函数代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_401230</span>(BYTE <span style="color:#f92672">*</span>pbData, DWORD dwDataLen, LPSTR lpString1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  DWORD i; <span style="color:#75715e">// [esp+4Ch] [ebp-28h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  CHAR String2[<span style="color:#ae81ff">4</span>]; <span style="color:#75715e">// [esp+50h] [ebp-24h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  BYTE v6[<span style="color:#ae81ff">20</span>]; <span style="color:#75715e">// [esp+54h] [ebp-20h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  DWORD pdwDataLen; <span style="color:#75715e">// [esp+68h] [ebp-Ch] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  HCRYPTHASH phHash; <span style="color:#75715e">// [esp+6Ch] [ebp-8h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  HCRYPTPROV phProv; <span style="color:#75715e">// [esp+70h] [ebp-4h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">CryptAcquireContextA</span>(<span style="color:#f92672">&amp;</span>phProv, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1u</span>, <span style="color:#ae81ff">0xF0000000</span>) )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">CryptCreateHash</span>(phProv, <span style="color:#ae81ff">0x8004u</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&amp;</span>phHash) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">CryptHashData</span>(phHash, pbData, dwDataLen, <span style="color:#ae81ff">0</span>) )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">CryptGetHashParam</span>(phHash, <span style="color:#ae81ff">2u</span>, v6, <span style="color:#f92672">&amp;</span>pdwDataLen, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">*</span>lpString1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> pdwDataLen; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">wsprintfA</span>(String2, <span style="color:#e6db74">&#34;%02X&#34;</span>, v6[i]);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">lstrcatA</span>(lpString1, String2);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">CryptDestroyHash</span>(phHash);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">CryptReleaseContext</span>(phProv, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">CryptDestroyHash</span>(phHash);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">CryptReleaseContext</span>(phProv, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">CryptReleaseContext</span>(phProv, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>程序直接调用WIN32的API函数进行调用来进行MD5的加密</p>
<p>使用在线的<a href="https://www.somd5.com/">MD5工具</a>进行解密获得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>123321@DBApp
</span></span></code></pre></div><p>下面解决一下第二次加密的问题，第二次加密显然也是一个MD5的比较问题，即：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>MD5(xxxxxx123321@DBApp@DBAPP) == 27019e688a4e62a649fd99cadaafdb4e
</span></span></code></pre></div><p>同样使用上面那个MD5的工具进行求解就可以得到数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>~!3a@0123321@DBApp
</span></span></code></pre></div><p>现在得到了所有的密码，是不是可以运行一下程序来得到结果：</p>
<p>运行程序得到了一个rtf文件，打开rtf文件就能得到flag啦：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Flag{N0_M0re_Free_Bugs}
</span></span></code></pre></div><h2 id="0x4-2019红帽杯-easyre">0x4 [2019红帽杯] easyRE</h2>
<p>得到一个ELF文件，可以确定是Linux系统的文件，虽然Linux系统的大多数文件是不带壳的，但是为了以防万一还是查下程序信息：</p>
<p><img src="/images/BUUCTF-REVERSE-3_writeup/image-20210918150158372.png" alt="image-20210918150158372"></p>
<p>64位程序，果然是没有壳的程序。使用x64 IDA pro打开一下程序，看看程序内部</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// positive sp value has been detected, the output may be wrong!
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#66d9ef">__fastcall</span> __noreturn <span style="color:#a6e22e">start</span>(<span style="color:#66d9ef">__int64</span> a1, <span style="color:#66d9ef">__int64</span> a2, <span style="color:#66d9ef">int</span> a3)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// esi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp-8h] [rbp-8h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>retaddr; <span style="color:#75715e">// [rsp+0h] [rbp+0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> v5;
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> v3;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_401BC0</span>(
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_4009C6,
</span></span><span style="display:flex;"><span>    v4,
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#f92672">&amp;</span>retaddr,
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_402080,
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_402110,
</span></span><span style="display:flex;"><span>    a3,
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v5);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>好像是找不到什么具体的内容，使用字符串检索定位到关键函数的位置</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> <span style="color:#a6e22e">sub_4009C6</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">__int64</span> result; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+Ch] [rbp-114h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v2; <span style="color:#75715e">// [rsp+10h] [rbp-110h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// [rsp+18h] [rbp-108h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v4; <span style="color:#75715e">// [rsp+20h] [rbp-100h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp+28h] [rbp-F8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v6; <span style="color:#75715e">// [rsp+30h] [rbp-F0h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v7; <span style="color:#75715e">// [rsp+38h] [rbp-E8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v8; <span style="color:#75715e">// [rsp+40h] [rbp-E0h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v9; <span style="color:#75715e">// [rsp+48h] [rbp-D8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v10; <span style="color:#75715e">// [rsp+50h] [rbp-D0h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v11; <span style="color:#75715e">// [rsp+58h] [rbp-C8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v12[<span style="color:#ae81ff">13</span>]; <span style="color:#75715e">// [rsp+60h] [rbp-C0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v13[<span style="color:#ae81ff">4</span>]; <span style="color:#75715e">// [rsp+6Dh] [rbp-B3h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v14[<span style="color:#ae81ff">19</span>]; <span style="color:#75715e">// [rsp+71h] [rbp-AFh] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v15[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [rsp+90h] [rbp-90h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v16; <span style="color:#75715e">// [rsp+B0h] [rbp-70h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v17; <span style="color:#75715e">// [rsp+B4h] [rbp-6Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v18[<span style="color:#ae81ff">72</span>]; <span style="color:#75715e">// [rsp+C0h] [rbp-60h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v19; <span style="color:#75715e">// [rsp+108h] [rbp-18h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v19 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">qmemcpy</span>(v12, <span style="color:#e6db74">&#34;Iodl&gt;Qnb(ocy&#34;</span>, <span style="color:#ae81ff">12</span>);
</span></span><span style="display:flex;"><span>  v12[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">127</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">qmemcpy</span>(v13, <span style="color:#e6db74">&#34;y.i&#34;</span>, <span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>  v13[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">127</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">qmemcpy</span>(v14, <span style="color:#e6db74">&#34;d`3w}wek9{iy=~yL@EC&#34;</span>, <span style="color:#66d9ef">sizeof</span>(v14));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(v15, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(v15));
</span></span><span style="display:flex;"><span>  v16 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  v17 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_4406E0</span>(<span style="color:#ae81ff">0LL</span>, v15, <span style="color:#ae81ff">37LL</span>);
</span></span><span style="display:flex;"><span>  v17 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">sub_424BA0</span>(v15) <span style="color:#f92672">==</span> <span style="color:#ae81ff">36</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span>)<span style="color:#a6e22e">sub_424BA0</span>(v15); <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)(v15[i] <span style="color:#f92672">^</span> i) <span style="color:#f92672">!=</span> v12[i] )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">=</span> <span style="color:#ae81ff">4294967294LL</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_13;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_410CC0</span>(<span style="color:#e6db74">&#34;continue!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(v18, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x40uLL</span>);
</span></span><span style="display:flex;"><span>    v18[<span style="color:#ae81ff">64</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_4406E0</span>(<span style="color:#ae81ff">0LL</span>, v18, <span style="color:#ae81ff">64LL</span>);
</span></span><span style="display:flex;"><span>    v18[<span style="color:#ae81ff">39</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">sub_424BA0</span>(v18) <span style="color:#f92672">==</span> <span style="color:#ae81ff">39</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      v2 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400E44</span>(v18);
</span></span><span style="display:flex;"><span>      v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400E44</span>(v2);
</span></span><span style="display:flex;"><span>      v4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400E44</span>(v3);
</span></span><span style="display:flex;"><span>      v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400E44</span>(v4);
</span></span><span style="display:flex;"><span>      v6 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400E44</span>(v5);
</span></span><span style="display:flex;"><span>      v7 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400E44</span>(v6);
</span></span><span style="display:flex;"><span>      v8 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400E44</span>(v7);
</span></span><span style="display:flex;"><span>      v9 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400E44</span>(v8);
</span></span><span style="display:flex;"><span>      v10 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400E44</span>(v9);
</span></span><span style="display:flex;"><span>      v11 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400E44</span>(v10);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">sub_400360</span>(v11, off_6CC090) )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">sub_410CC0</span>(<span style="color:#e6db74">&#34;You found me!!!&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">sub_410CC0</span>(<span style="color:#e6db74">&#34;bye bye~&#34;</span>);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> <span style="color:#ae81ff">4294967293LL</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xFFFFFFFFLL</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>LABEL_13:
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>) <span style="color:#f92672">!=</span> v19 )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_444020</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>找到关键函数，下面就是对关键函数进行分析来寻找线索</p>
<p>简单对代码进行审计，可以发现有很多混淆来防止我们进行正确的逆向分析操作</p>
<p>来，让我们跳进第一个坑：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span> v19 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">qmemcpy</span>(v12, <span style="color:#e6db74">&#34;Iodl&gt;Qnb(ocy&#34;</span>, <span style="color:#ae81ff">12</span>);
</span></span><span style="display:flex;"><span>  v12[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">127</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">qmemcpy</span>(v13, <span style="color:#e6db74">&#34;y.i&#34;</span>, <span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>  v13[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">127</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">qmemcpy</span>(v14, <span style="color:#e6db74">&#34;d`3w}wek9{iy=~yL@EC&#34;</span>, <span style="color:#66d9ef">sizeof</span>(v14));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(v15, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(v15));
</span></span><span style="display:flex;"><span>  v16 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  v17 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_4406E0</span>(<span style="color:#ae81ff">0LL</span>, v15, <span style="color:#ae81ff">37LL</span>);
</span></span><span style="display:flex;"><span>  v17 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">sub_424BA0</span>(v15) <span style="color:#f92672">==</span> <span style="color:#ae81ff">36</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span>)<span style="color:#a6e22e">sub_424BA0</span>(v15); <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)(v15[i] <span style="color:#f92672">^</span> i) <span style="color:#f92672">!=</span> v12[i] )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">=</span> <span style="color:#ae81ff">4294967294LL</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_13;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_410CC0</span>(<span style="color:#e6db74">&#34;continue!&#34;</span>);
</span></span></code></pre></div><p>写一个python脚本迭代出假flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>data <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>v12 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Iodl&gt;Qnb(ocy&#34;</span>
</span></span><span style="display:flex;"><span>insert_v <span style="color:#f92672">=</span> <span style="color:#ae81ff">127</span>;
</span></span><span style="display:flex;"><span>v13 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;y.i&#34;</span>
</span></span><span style="display:flex;"><span>v14 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;d`3w}wek9{iy=~yL@EC&#34;</span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> v12:
</span></span><span style="display:flex;"><span>    data<span style="color:#f92672">.</span>append(ord(i))
</span></span><span style="display:flex;"><span>data<span style="color:#f92672">.</span>append(insert_v)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> v13:
</span></span><span style="display:flex;"><span>    data<span style="color:#f92672">.</span>append(ord(i))
</span></span><span style="display:flex;"><span>data<span style="color:#f92672">.</span>append(insert_v)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> v14:
</span></span><span style="display:flex;"><span>    data<span style="color:#f92672">.</span>append(ord(i))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">36</span>):
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">+=</span>chr(data[i]<span style="color:#f92672">^</span>i)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>运行脚本得到fake flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Info:The first four chars are `flag`
</span></span></code></pre></div><p>然后走进下面一个坑：</p>
<p>（”吾愿称之为base64之坑“ XD ）</p>
<p><img src="/images/BUUCTF-REVERSE-3_writeup/image-20210918163713879.png" alt="image-20210918163713879"></p>
<p>提取数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Vm0wd2VHUXhTWGhpUm1SWVYwZDRWVll3Wkc5WFJsbDNXa1pPVlUxV2NIcFhhMk0xVmpKS1NHVkdXbFpOYmtKVVZtcEtTMUl5VGtsaVJtUk9ZV3hhZVZadGVHdFRNVTVYVW01T2FGSnRVbGhhVjNoaFZWWmtWMXBFVWxSTmJFcElWbTAxVDJGV1NuTlhia0pXWWxob1dGUnJXbXRXTVZaeVdrWm9hVlpyV1hwV1IzaGhXVmRHVjFOdVVsWmlhMHBZV1ZSR1lWZEdVbFZTYlhSWFRWWndNRlZ0TVc5VWJGcFZWbXR3VjJKSFVYZFdha1pXWlZaT2NtRkhhRk5pVjJoWVYxZDBhMVV3TlhOalJscFlZbGhTY1ZsclduZGxiR1J5VmxSR1ZXSlZjRWhaTUZKaFZqSktWVkZZYUZkV1JWcFlWV3BHYTFkWFRrZFRiV3hvVFVoQ1dsWXhaRFJpTWtsM1RVaG9hbEpYYUhOVmJUVkRZekZhY1ZKcmRGTk5Wa3A2VjJ0U1ExWlhTbFpqUldoYVRVWndkbFpxUmtwbGJVWklZVVprYUdFeGNHOVhXSEJIWkRGS2RGSnJhR2hTYXpWdlZGVm9RMlJzV25STldHUlZUVlpXTlZadE5VOVdiVXBJVld4c1dtSllUWGhXTUZwell6RmFkRkpzVWxOaVNFSktWa1phVTFFeFduUlRhMlJxVWxad1YxWnRlRXRXTVZaSFVsUnNVVlZVTURrPQ==
</span></span></code></pre></div><p>进行十次base64解密得到一个博客地址：https://bbs.pediy.com/thread-254172.htm</p>
<p>点开博客看一下，可以看到这段话：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>所谓“让对手不要走正确的破解之路” 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>讲人话 就是“把对手往沟里带” 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>但对手并不傻 很多时候攻击方比防守方更聪明 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>要想带对手进沟 防守方必须首先透彻了解攻击方 特别是其人性弱点（知道为什么是马克思主义学院了吧） 
</span></span></code></pre></div><p>Good, 现在知道自己掉坑里面了， 两个坑都掉了一遍所以flag在哪呢？</p>
<p>我们去找下主函数</p>
<p><img src="/images/BUUCTF-REVERSE-3_writeup/image-20210918173639284.png" alt="image-20210918173639284"></p>
<p>发现周围存在一个奇奇怪怪的函数，会不会就是这个函数呢</p>
<p>点开看看：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> <span style="color:#a6e22e">sub_400D35</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> result; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v1; <span style="color:#75715e">// [rsp+Ch] [rbp-24h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+10h] [rbp-20h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> j; <span style="color:#75715e">// [rsp+14h] [rbp-1Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// [rsp+24h] [rbp-Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp+28h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  v1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_43FD20</span>(<span style="color:#ae81ff">0LL</span>) <span style="color:#f92672">-</span> qword_6CEE38;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1233</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_40F790</span>(v1);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_40FE60</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_40FE60</span>();
</span></span><span style="display:flex;"><span>    v1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_40FE60</span>() <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x98765432</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> v1;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( ((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v1 <span style="color:#f92672">^</span> byte_6CC0A0[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">==</span> <span style="color:#ae81ff">102</span> <span style="color:#f92672">&amp;&amp;</span> (<span style="color:#a6e22e">HIBYTE</span>(v4) <span style="color:#f92672">^</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)byte_6CC0A3) <span style="color:#f92672">==</span> <span style="color:#ae81ff">103</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">24</span>; <span style="color:#f92672">++</span>j )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_410E90</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)(byte_6CC0A0[j] <span style="color:#f92672">^</span> <span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v4 <span style="color:#f92672">+</span> j <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>)));
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  result <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>) <span style="color:#f92672">^</span> v5;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( result )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_444020</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>应该就是简单的异或操作了，需要提取数据来进行异或来得到flag</p>
<p>提取数据并写一个异或脚本就就可以得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>data <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x40</span>, <span style="color:#ae81ff">0x35</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#ae81ff">0x56</span>, <span style="color:#ae81ff">0x5D</span>, <span style="color:#ae81ff">0x18</span>, <span style="color:#ae81ff">0x22</span>, <span style="color:#ae81ff">0x45</span>, <span style="color:#ae81ff">0x17</span>, <span style="color:#ae81ff">0x2F</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x6E</span>, <span style="color:#ae81ff">0x62</span>, <span style="color:#ae81ff">0x3C</span>, <span style="color:#ae81ff">0x27</span>, <span style="color:#ae81ff">0x54</span>, <span style="color:#ae81ff">0x48</span>, <span style="color:#ae81ff">0x6C</span>, <span style="color:#ae81ff">0x24</span>, <span style="color:#ae81ff">0x6E</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0x72</span>, <span style="color:#ae81ff">0x3C</span>, <span style="color:#ae81ff">0x32</span>, <span style="color:#ae81ff">0x45</span>, <span style="color:#ae81ff">0x5B</span>
</span></span><span style="display:flex;"><span>  ]
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag&#34;</span>
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">4</span>):
</span></span><span style="display:flex;"><span>    key <span style="color:#f92672">+=</span> chr(ord(s[i])<span style="color:#f92672">^</span>data[i])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(data)):
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">+=</span> chr(data[i]<span style="color:#f92672">^</span>ord(key[i<span style="color:#f92672">%</span><span style="color:#ae81ff">4</span>]))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>运行脚本就能得到flag，终于是over了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{Act1ve_Defen5e_Test}
</span></span></code></pre></div><h2 id="0x5-actf新生赛2020-rome">0x5 [ACTF新生赛2020] rome</h2>
<p>首先，查一下文件的信息</p>
<p><img src="/images/BUUCTF-REVERSE-3_writeup/image-20210919081555684.png" alt="image-20210919081555684"></p>
<p>32位程序，没有壳，丢进IDA prio里面看看：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">func</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v1[<span style="color:#ae81ff">4</span>]; <span style="color:#75715e">// [esp+14h] [ebp-44h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v2; <span style="color:#75715e">// [esp+24h] [ebp-34h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v3; <span style="color:#75715e">// [esp+25h] [ebp-33h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v4; <span style="color:#75715e">// [esp+26h] [ebp-32h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v5; <span style="color:#75715e">// [esp+27h] [ebp-31h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v6; <span style="color:#75715e">// [esp+28h] [ebp-30h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// [esp+29h] [ebp-2Fh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// [esp+2Dh] [ebp-2Bh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// [esp+31h] [ebp-27h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v10; <span style="color:#75715e">// [esp+35h] [ebp-23h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v11; <span style="color:#75715e">// [esp+39h] [ebp-1Fh]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v12[<span style="color:#ae81ff">29</span>]; <span style="color:#75715e">// [esp+3Bh] [ebp-1Dh] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcpy</span>(v12, <span style="color:#e6db74">&#34;Qsw3sj_lz4_Ujw@l&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Please input:&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#f92672">&amp;</span>v2);
</span></span><span style="display:flex;"><span>  result <span style="color:#f92672">=</span> v2;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">65</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> v3;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v3 <span style="color:#f92672">==</span> <span style="color:#ae81ff">67</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      result <span style="color:#f92672">=</span> v4;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">84</span> )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">=</span> v5;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( v5 <span style="color:#f92672">==</span> <span style="color:#ae81ff">70</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          result <span style="color:#f92672">=</span> v6;
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> ( v6 <span style="color:#f92672">==</span> <span style="color:#ae81ff">123</span> )
</span></span><span style="display:flex;"><span>          {
</span></span><span style="display:flex;"><span>            result <span style="color:#f92672">=</span> v11;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> ( v11 <span style="color:#f92672">==</span> <span style="color:#ae81ff">125</span> )
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>              v1[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> v7;
</span></span><span style="display:flex;"><span>              v1[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> v8;
</span></span><span style="display:flex;"><span>              v1[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> v9;
</span></span><span style="display:flex;"><span>              v1[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> v10;
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>              <span style="color:#66d9ef">while</span> ( <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">15</span> )
</span></span><span style="display:flex;"><span>              {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">64</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> )
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">51</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">65</span>;
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">96</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">122</span> )
</span></span><span style="display:flex;"><span>                  <span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">=</span> (<span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">79</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">++*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>];
</span></span><span style="display:flex;"><span>              }
</span></span><span style="display:flex;"><span>              <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>              <span style="color:#66d9ef">while</span> ( <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">15</span> )
</span></span><span style="display:flex;"><span>              {
</span></span><span style="display:flex;"><span>                result <span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v12[<span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]];
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)v1 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>]) <span style="color:#f92672">!=</span> (_BYTE)result )
</span></span><span style="display:flex;"><span>                  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">++*</span>(_DWORD <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v12[<span style="color:#ae81ff">17</span>];
</span></span><span style="display:flex;"><span>              }
</span></span><span style="display:flex;"><span>              result <span style="color:#f92672">=</span> <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;You are correct!&#34;</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>对代码进行简单的审计，可以发现，程序的加密算法是类似与凯撒加密的位移方式，可以根据程序的这一特点写个Python脚本进行求解来得到flag的数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> [<span style="color:#ae81ff">81</span>,<span style="color:#ae81ff">115</span>,<span style="color:#ae81ff">119</span>,<span style="color:#ae81ff">51</span>,<span style="color:#ae81ff">115</span>,<span style="color:#ae81ff">106</span>,<span style="color:#ae81ff">95</span>,<span style="color:#ae81ff">108</span>,<span style="color:#ae81ff">122</span>,<span style="color:#ae81ff">52</span>,<span style="color:#ae81ff">95</span>,<span style="color:#ae81ff">85</span>,<span style="color:#ae81ff">106</span>,<span style="color:#ae81ff">119</span>,<span style="color:#ae81ff">64</span>,<span style="color:#ae81ff">108</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Lower <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>ascii_lowercase
</span></span><span style="display:flex;"><span>Upper <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>ascii_uppercase
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> data:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> i <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">64</span> <span style="color:#f92672">and</span> i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span>:
</span></span><span style="display:flex;"><span>        flag <span style="color:#f92672">+=</span> Upper[i<span style="color:#f92672">-</span><span style="color:#ae81ff">14</span><span style="color:#f92672">-</span><span style="color:#ae81ff">65</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> i <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">96</span> <span style="color:#f92672">and</span> i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">122</span>:
</span></span><span style="display:flex;"><span>        flag <span style="color:#f92672">+=</span> Lower[i<span style="color:#f92672">-</span><span style="color:#ae81ff">18</span><span style="color:#f92672">-</span><span style="color:#ae81ff">97</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        flag <span style="color:#f92672">+=</span> chr(i)
</span></span><span style="display:flex;"><span>print (<span style="color:#e6db74">&#39;flag{&#39;</span><span style="color:#f92672">+</span>flag<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;}&#39;</span>)
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{Cae3ar_th4_Gre@t}
</span></span></code></pre></div><h2 id="0x6-flareon4-login">0x6 [FlareOn4] login</h2>
<p>发现文件是一个html文件，应该是需要进行源码阅读的题目，然后逆向算法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE Html /&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">title</span>&gt;FLARE On 2017&lt;/<span style="color:#f92672">title</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text&#34;</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;flag&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;flag&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Enter the flag&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">input</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;button&#34;</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;prompt&#34;</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Click to check the flag&#34;</span> /&gt;
</span></span><span style="display:flex;"><span>    &lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span>&gt;
</span></span><span style="display:flex;"><span>        document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;prompt&#34;</span>).<span style="color:#a6e22e">onclick</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> () {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">flag</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">getElementById</span>(<span style="color:#e6db74">&#34;flag&#34;</span>).<span style="color:#a6e22e">value</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">rotFlag</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">flag</span>.<span style="color:#a6e22e">replace</span>(<span style="color:#e6db74">/[a-zA-Z]/g</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">c</span>) { 
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">c</span> <span style="color:#f92672">&lt;=</span> <span style="color:#e6db74">&#34;Z&#34;</span> <span style="color:#f92672">?</span> <span style="color:#ae81ff">90</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">122</span>) <span style="color:#f92672">&gt;=</span> (<span style="color:#a6e22e">c</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">c</span>.<span style="color:#a6e22e">charCodeAt</span>(<span style="color:#ae81ff">0</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">13</span>) <span style="color:#f92672">?</span> <span style="color:#a6e22e">c</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">c</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">26</span>); 
</span></span><span style="display:flex;"><span>            });
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (<span style="color:#e6db74">&#34;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&#34;</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">rotFlag</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;Correct flag!&#34;</span>);
</span></span><span style="display:flex;"><span>            } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;Incorrect flag, rot again&#34;</span>);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    &lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>源码的核心逻辑是在JavaScript的代码中，看来题目要求我们可以能够对算法进行逆向分析，来得到flag数据</p>
<p>代码进行的操作无非就是±13的操作。</p>
<p>代码会区分大小写分别进行相应的操作来得到flag，如果字母+13小于字母表最后一位字母，字母最终就+13，否则字母最终就-13。逻辑非常简单，写个简单的逆向算法就能进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&#34;</span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ord(i) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">65</span> <span style="color:#f92672">and</span> ord(i) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ord(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">65</span>:
</span></span><span style="display:flex;"><span>            m <span style="color:#f92672">+=</span> chr(ord(i)<span style="color:#f92672">+</span><span style="color:#ae81ff">13</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            m <span style="color:#f92672">+=</span> chr(ord(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> ord(i) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">97</span> <span style="color:#f92672">and</span> ord(i) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">122</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ord(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">13</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">97</span>:
</span></span><span style="display:flex;"><span>            m <span style="color:#f92672">+=</span> chr(ord(i)<span style="color:#f92672">+</span><span style="color:#ae81ff">13</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            m <span style="color:#f92672">+=</span> chr(ord(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        m <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(m)
</span></span></code></pre></div><p>运行脚本，就能得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>ClientSideLoginsAreEasy@flare-on.com
</span></span></code></pre></div><p>唔~题目好像还有个hint可以看一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Hint:本题解出相应字符串后请用flag{}包裹，形如：flag{123456@flare-on.com}
</span></span></code></pre></div><p>所以，这道题目的flag应该就是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{ClientSideLoginsAreEasy@flare-on.com}
</span></span></code></pre></div><h2 id="0x7-guet-ctf2019-re">0x7 [GUET-CTF2019] re</h2>
<p>拿到程序，先看看程序的信息：</p>
<p><img src="/images/BUUCTF-REVERSE-3_writeup/image-20210919092405673.png" alt="image-20210919092405673"></p>
<p>发现程序有壳，而且是一个64位的ELF程序</p>
<p>需要进行脱壳处理，程序使用的是最基本的UPX的壳，可以使用UPX进行简单脱壳：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>upx -d re
</span></span></code></pre></div><p>脱壳后，然后使用Exeinfo再次进行查看</p>
<p><img src="/images/BUUCTF-REVERSE-3_writeup/image-20210919092939620.png" alt="image-20210919092939620"></p>
<p>壳已经被脱掉，然后使用x64 IDA pro进行查看程序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// positive sp value has been detected, the output may be wrong!
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">void</span> <span style="color:#66d9ef">__fastcall</span> __noreturn <span style="color:#a6e22e">start</span>(<span style="color:#66d9ef">__int64</span> a1, <span style="color:#66d9ef">__int64</span> a2, <span style="color:#66d9ef">int</span> a3)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// esi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp-8h] [rbp-8h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>retaddr; <span style="color:#75715e">// [rsp+0h] [rbp+0h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> v5;
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> v3;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_4016C0</span>(
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_400E28,
</span></span><span style="display:flex;"><span>    v4,
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#f92672">&amp;</span>retaddr,
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_401B80,
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)sub_401C10,
</span></span><span style="display:flex;"><span>    a3,
</span></span><span style="display:flex;"><span>    (<span style="color:#66d9ef">__int64</span>)<span style="color:#f92672">&amp;</span>v5);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>发现程序入口并找不到什么东西，应该是将入口函数进行混淆和隐藏了</p>
<p>使用字符串检索来获取相应的信息，来定位到主函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">sub_400E28</span>(<span style="color:#66d9ef">__int64</span> a1, <span style="color:#66d9ef">int</span> a2, <span style="color:#66d9ef">int</span> a3, <span style="color:#66d9ef">int</span> a4, <span style="color:#66d9ef">int</span> a5, <span style="color:#66d9ef">int</span> a6)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// edx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// ecx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// er8
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// er9
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> result; <span style="color:#75715e">// rax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v11; <span style="color:#75715e">// [rsp+0h] [rbp-30h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v12; <span style="color:#75715e">// [rsp+28h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v12 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_40F950</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#e6db74">&#34;input your flag:&#34;</span>, a2, a3, a4, a5, a6, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_40FA80</span>((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#e6db74">&#34;%s&#34;</span>, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#f92672">&amp;</span>v11, v6, v7, v8, v9, v11);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)<span style="color:#a6e22e">sub_4009AE</span>(<span style="color:#f92672">&amp;</span>v11) )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_410350</span>(<span style="color:#e6db74">&#34;Correct!&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_410350</span>(<span style="color:#e6db74">&#34;Wrong!&#34;</span>);
</span></span><span style="display:flex;"><span>  result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>) <span style="color:#f92672">!=</span> v12 )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_443550</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>主函数中的一些关键性的函数都被进行了混淆操作，代码进行审计分析</p>
<p>v11是关键输入函数，然后<code>sub_40FA80</code>是关键性的函数，对<code>sub_40FA80</code>分析：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>_BOOL8 <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">sub_4009AE</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">1629056</span> <span style="color:#f92672">*</span> <span style="color:#f92672">*</span>a1 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">166163712</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">6771600</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">731332800</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">3682944</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">357245568</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">10431000</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1074393000</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">3977328</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">489211344</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">5138336</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">518971936</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">7532250</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">406741500</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">5551632</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">294236496</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">3409728</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">177305856</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">13013670</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">650683500</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">6088797</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">298351053</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">7884663</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">386348487</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">8944053</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">438258597</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">5198490</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">249527520</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">4544518</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">445362764</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">3645600</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">174988800</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">10115280</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">981182160</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">9667504</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">493042704</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">5364450</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">257493600</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">13464540</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">767478780</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">5488432</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">312840624</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">14479500</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">22</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1404511500</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">6451830</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">23</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">316139670</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">6252576</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">24</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">619005024</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">7763364</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">25</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">372641472</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">7327320</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">26</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">373693320</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">8741520</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">27</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">498266640</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">8871876</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">28</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">452465676</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">4086720</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">29</span>] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">208422720</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">9374400</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">30</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">515592000</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">5759124</span> <span style="color:#f92672">*</span> a1[<span style="color:#ae81ff">31</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">719890500</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>写个C语言的flag生成器来生成flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> a1[<span style="color:#ae81ff">30</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>a1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">166163712</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">1629056</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">731332800</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">6771600</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">357245568</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3682944</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1074393000</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">10431000</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">489211344</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3977328</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">518971936</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5138336</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">406741500</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">7532250</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">294236496</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5551632</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">177305856</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3409728</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">650683500</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">13013670</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">298351053</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">6088797</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">386348487</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">7884663</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">438258597</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">8944053</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">249527520</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5198490</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">445362764</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">4544518</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">174988800</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3645600</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">981182160</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">10115280</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">493042704</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">9667504</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">257493600</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5364450</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">767478780</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">13464540</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">312840624</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5488432</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">22</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1404511500</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">14479500</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">23</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">316139670</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">6451830</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">24</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">619005024</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">6252576</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">25</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">372641472</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">7763364</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">26</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">373693320</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">7327320</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">27</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">498266640</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">8741520</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">28</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">452465676</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">8871876</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">29</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">208422720</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">4086720</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">30</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">515592000</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">9374400</span>;
</span></span><span style="display:flex;"><span>  a1[<span style="color:#ae81ff">31</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">719890500</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">5759124</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">32</span>;<span style="color:#f92672">++</span>i)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span>(a1[i] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;*&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%c&#34;</span>,a1[i]);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行来得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{e*65421110ba03099a1c039337}
</span></span></code></pre></div><p>由于有一位的字符未知，需要进行爆破来得到flag:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{e165421110ba03099a1c039337}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>BUUCTF REVERSE [9~16]_Writeup</title>
            <link>/posts/buuctf-reverse-2_writeup/</link>
            <pubDate>Fri, 28 Jan 2022 19:18:38 +0800</pubDate>
            
            <guid>/posts/buuctf-reverse-2_writeup/</guid>
            <description>BUUCTF-REVERSE-2 writeup 8道逆向工程的小题目，re真是越来越有意思了
0x0 不一样的flag 简单看看题目描述
是不是做习惯了常规的逆向题目？试试这道题，看你在能不能在程序中找到真正的flag！注意：flag并非是flag{XXX}形式，就是一个’字符串‘，考验眼力的时候到了！ 注意：得到的 flag 请包上 flag{} 提交 应该会是一道非常有趣的题目，非常有意思的题目。
首先还是先查询一下程序信息
没有壳，是一个32位的PE程序，丢进Cutter里面看个究竟吧
#include &amp;lt;stdint.h&amp;gt; int32_t dbg_main (void) { int32_t var_4h; char[5][5] a; int[2] location; int32_t var_34h; int32_t choice; int32_t i; int32_t var_40h; /* int main(); */ _main (ebx, esi, edi); location = 0; var_34h = 0; edx = &amp;amp;a; ebx = &amp;#34;*11110100001010000101111#&amp;#34;; eax = 0x19; edi = edx; esi = ebx; ecx = eax; do { *(es:edi) = *(esi); ecx--; esi++; es:edi++; } while (ecx !</description>
            <content type="html"><![CDATA[<h1 id="buuctf-reverse-2-writeup">BUUCTF-REVERSE-2 writeup</h1>
<p>8道逆向工程的小题目，re真是越来越有意思了</p>
<p><img src="/images/BUUCTF-REVERSE-2_writeup/image-20210808095050806.png" alt="image-20210808095050806"></p>
<h2 id="0x0-不一样的flag">0x0 不一样的flag</h2>
<p>简单看看题目描述</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>是不是做习惯了常规的逆向题目？试试这道题，看你在能不能在程序中找到真正的flag！注意：flag并非是flag{XXX}形式，就是一个’字符串‘，考验眼力的时候到了！ 注意：得到的 flag 请包上 flag{} 提交
</span></span></code></pre></div><p>应该会是一道非常有趣的题目，非常有意思的题目。</p>
<p>首先还是先查询一下程序信息</p>
<p><img src="/images/BUUCTF-REVERSE-2_writeup/image-20210808211004969.png" alt="image-20210808211004969"></p>
<p>没有壳，是一个32位的PE程序，丢进Cutter里面看个究竟吧</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdint.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int32_t</span> <span style="color:#a6e22e">dbg_main</span> (<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_4h;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span>[<span style="color:#ae81ff">5</span>][<span style="color:#ae81ff">5</span>] a;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span>[<span style="color:#ae81ff">2</span>] location;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_34h;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> choice;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> i;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_40h;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* int main(); */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_main</span> (ebx, esi, edi);
</span></span><span style="display:flex;"><span>    location <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    var_34h <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    edx <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>a;
</span></span><span style="display:flex;"><span>    ebx <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;*11110100001010000101111#&#34;</span>;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x19</span>;
</span></span><span style="display:flex;"><span>    edi <span style="color:#f92672">=</span> edx;
</span></span><span style="display:flex;"><span>    esi <span style="color:#f92672">=</span> ebx;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>(es:edi) <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(esi);
</span></span><span style="display:flex;"><span>        ecx<span style="color:#f92672">--</span>;
</span></span><span style="display:flex;"><span>        esi<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>        es:edi<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">while</span> (ecx <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">goto</span> label_1;
</span></span><span style="display:flex;"><span>label_0:
</span></span><span style="display:flex;"><span>label_1:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_puts</span> (<span style="color:#e6db74">&#34;you can choose one action to execute&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_puts</span> (<span style="color:#e6db74">&#34;1 up&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_puts</span> (<span style="color:#e6db74">&#34;2 down&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_puts</span> (<span style="color:#e6db74">&#34;3 left&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_printf</span> (<span style="color:#e6db74">&#34;4 right</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">:&#34;</span>);
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>choice;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_scanf</span> (<span style="color:#ae81ff">0x403066</span>, eax);
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> choice;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">2</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>            } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">3</span>) {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">==</span> <span style="color:#ae81ff">4</span>) {
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">goto</span> label_2;
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">=</span> location;
</span></span><span style="display:flex;"><span>                    eax<span style="color:#f92672">--</span>;
</span></span><span style="display:flex;"><span>                    location <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">=</span> location;
</span></span><span style="display:flex;"><span>                    eax<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>                    location <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">goto</span> label_3;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> var_34h;
</span></span><span style="display:flex;"><span>            eax<span style="color:#f92672">--</span>;
</span></span><span style="display:flex;"><span>            var_34h <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">goto</span> label_3;
</span></span><span style="display:flex;"><span>label_2:
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> var_34h;
</span></span><span style="display:flex;"><span>            eax<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>            var_34h <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">goto</span> label_3;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">_exit</span> (<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>label_3:
</span></span><span style="display:flex;"><span>    i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> i;
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((esp <span style="color:#f92672">+</span> eax<span style="color:#f92672">*</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x30</span>));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> i;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((esp <span style="color:#f92672">+</span> eax<span style="color:#f92672">*</span><span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x30</span>));
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">goto</span> label_4;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">_exit</span> (<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>label_4:
</span></span><span style="display:flex;"><span>        i<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    edx <span style="color:#f92672">=</span> location;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">=</span> var_34h;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> edx;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">+=</span> edx;
</span></span><span style="display:flex;"><span>    edx <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>var_40h;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">+=</span> edx;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">+=</span> ecx;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">-=</span> <span style="color:#ae81ff">0x29</span>;
</span></span><span style="display:flex;"><span>    al <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(eax);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (al <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x31</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">_exit</span> (<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    edx <span style="color:#f92672">=</span> location;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">=</span> var_34h;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> edx;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">+=</span> edx;
</span></span><span style="display:flex;"><span>    esi <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>var_40h;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">+=</span> esi;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">+=</span> ecx;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">-=</span> <span style="color:#ae81ff">0x29</span>;
</span></span><span style="display:flex;"><span>    al <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(eax);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (al <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x23</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> label_0;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_puts</span> (<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">ok, the order you enter is the flag!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_exit</span> (<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>根据反编译的代码，可以发现这道题目是一个走迷宫的题目，总体而言，还是挺有意思的，找到迷宫数据然后走出迷宫。</p>
<p>根据迷宫的特性，需要寻找一下一些关键性的信息，来完成迷宫的</p>
<p>首先是迷宫的信息，可以从反编译的关键代码找到迷宫信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span> ebx <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;*11110100001010000101111#&#34;</span>;
</span></span></code></pre></div><p>将数据整合一下便得到如下内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>*1111
</span></span><span style="display:flex;"><span>01000
</span></span><span style="display:flex;"><span>01010
</span></span><span style="display:flex;"><span>00010
</span></span><span style="display:flex;"><span>1111#
</span></span></code></pre></div><p>对于这个数据可以非常清晰看出迷宫的形式，*是起点，#是终点，1不能通行，0可以通行。</p>
<p>然后是寻找操作指令，自然也可以从反编译代码中找到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">_puts</span> (<span style="color:#e6db74">&#34;you can choose one action to execute&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_puts</span> (<span style="color:#e6db74">&#34;1 up&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_puts</span> (<span style="color:#e6db74">&#34;2 down&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_puts</span> (<span style="color:#e6db74">&#34;3 left&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">_printf</span> (<span style="color:#e6db74">&#34;4 right</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">:&#34;</span>);
</span></span></code></pre></div><p>根据迷宫和操作数，就可以得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{222441144222}
</span></span></code></pre></div><h2 id="0x1-simplerev">0x1 SimpleRev</h2>
<p>首先查一下程序信息，看看程序具体是个什么</p>
<p><img src="/images/BUUCTF-REVERSE-2_writeup/image-20210809170725758.png" alt="image-20210809170725758"></p>
<p>是一个Linux程序，使用x64 IDA pro进行打开</p>
<p>找到main函数位置，查看反编译代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v4; <span style="color:#75715e">// [rsp+Fh] [rbp-1h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Welcome to CTF game!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Please input d/D to start or input q/Q to quit this program: &#34;</span>);
</span></span><span style="display:flex;"><span>      v4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">getchar</span>();
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( v4 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">&amp;&amp;</span> v4 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">68</span> )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">Decry</span>(<span style="color:#e6db74">&#34;Welcome to CTF game!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Please input d/D to start or input q/Q to quit this program: &#34;</span>, argv);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">113</span> <span style="color:#f92672">||</span> v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">81</span> )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">Exit</span>(<span style="color:#e6db74">&#34;Welcome to CTF game!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">Please input d/D to start or input q/Q to quit this program: &#34;</span>, argv);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Input fault format!&#34;</span>);
</span></span><span style="display:flex;"><span>    v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">getchar</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">putchar</span>(v3);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>对反编译的代码进行简单的审计，发现Decry函数是关键函数，可以看看这个函数的具体实现细节</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> <span style="color:#a6e22e">Decry</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> v1; <span style="color:#75715e">// [rsp+Fh] [rbp-51h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v2; <span style="color:#75715e">// [rsp+10h] [rbp-50h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// [rsp+14h] [rbp-4Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+18h] [rbp-48h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// [rsp+1Ch] [rbp-44h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> src[<span style="color:#ae81ff">8</span>]; <span style="color:#75715e">// [rsp+20h] [rbp-40h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v7; <span style="color:#75715e">// [rsp+28h] [rbp-38h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// [rsp+30h] [rbp-30h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v9[<span style="color:#ae81ff">2</span>]; <span style="color:#75715e">// [rsp+40h] [rbp-20h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v10; <span style="color:#75715e">// [rsp+50h] [rbp-10h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v11; <span style="color:#75715e">// [rsp+58h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v11 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>(_QWORD <span style="color:#f92672">*</span>)src <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x534C43444ELL</span>;
</span></span><span style="display:flex;"><span>  v7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  v9[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x776F646168LL</span>;
</span></span><span style="display:flex;"><span>  v9[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>  v10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  text <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">join</span>(key3, v9);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcpy</span>(key, key1);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcat</span>(key, src);
</span></span><span style="display:flex;"><span>  v2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">getchar</span>();
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(key);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> v5; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">64</span> <span style="color:#f92672">&amp;&amp;</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> )
</span></span><span style="display:flex;"><span>      key[i] <span style="color:#f92672">=</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">++</span>v3;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Please input your flag:&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">getchar</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">10</span> )
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">32</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">++</span>v2;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">96</span> <span style="color:#f92672">||</span> v1 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">122</span> )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">64</span> <span style="color:#f92672">&amp;&amp;</span> v1 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          str2[v2] <span style="color:#f92672">=</span> (v1 <span style="color:#f92672">-</span> <span style="color:#ae81ff">39</span> <span style="color:#f92672">-</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">++</span>v3;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        str2[v2] <span style="color:#f92672">=</span> (v1 <span style="color:#f92672">-</span> <span style="color:#ae81ff">39</span> <span style="color:#f92672">-</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>v3;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>(v3 <span style="color:#f92672">%</span> v5) )
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">putchar</span>(<span style="color:#ae81ff">32</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">++</span>v2;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(text, str2) )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Congratulation!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Try again!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>) <span style="color:#f92672">^</span> v11;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>根据函数的核心代码可以知道，最开始的数据是</p>
<blockquote>
<p>Intel CPU/AMD CPU 计算机内部的数据存储的方式是以小端序存储的方式，因此部分数据是以颠倒方式进行存储的</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>text = &#39;killshadow&#39;
</span></span><span style="display:flex;"><span>key =  &#39;ADSFKNDCLS&#39;
</span></span></code></pre></div><p>现在有原始数据就可以进一步对算法进行分析</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    v1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">getchar</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">10</span> )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">==</span> <span style="color:#ae81ff">32</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>v2;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">96</span> <span style="color:#f92672">||</span> v1 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">122</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> ( v1 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">64</span> <span style="color:#f92672">&amp;&amp;</span> v1 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> )
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                str2[v2] <span style="color:#f92672">=</span> (v1 <span style="color:#f92672">-</span> <span style="color:#ae81ff">39</span> <span style="color:#f92672">-</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">++</span>v3;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            str2[v2] <span style="color:#f92672">=</span> (v1 <span style="color:#f92672">-</span> <span style="color:#ae81ff">39</span> <span style="color:#f92672">-</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">97</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">++</span>v3;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>(v3 <span style="color:#f92672">%</span> v5) )
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">putchar</span>(<span style="color:#ae81ff">32</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>v2;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(text, str2) )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Congratulation!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Try again!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span></code></pre></div><p>对代码观察可以发现，最终的逻辑判断是<code>text</code>的数据和<code>str2</code>的数据相等</p>
<p>根据对于程序的逻辑判断，编写逆向算法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> i, j, n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, v2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> v1;
</span></span><span style="display:flex;"><span>	string text <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;killshadow&#34;</span>;
</span></span><span style="display:flex;"><span>	string key <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ADSFKNDCLS&#34;</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> flag[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">=</span> { <span style="color:#ae81ff">0</span> };
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> str2[<span style="color:#ae81ff">104</span>] <span style="color:#f92672">=</span> { <span style="color:#ae81ff">0</span> };	
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> v5 <span style="color:#f92672">=</span> key.length();
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>; i<span style="color:#f92672">&lt;</span>v5; <span style="color:#f92672">++</span>i)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> ( key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">64</span> <span style="color:#f92672">&amp;&amp;</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> )
</span></span><span style="display:flex;"><span>      		key[i] <span style="color:#f92672">=</span> key[v3 <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>    	<span style="color:#f92672">++</span>v3;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> (j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>; <span style="color:#f92672">++</span>j) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (v2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; v2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>; <span style="color:#f92672">++</span>v2) {
</span></span><span style="display:flex;"><span>            v1 <span style="color:#f92672">=</span> text[v2] <span style="color:#f92672">-</span> <span style="color:#ae81ff">97</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">26</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">-</span> <span style="color:#ae81ff">97</span> <span style="color:#f92672">+</span> key[v3<span style="color:#f92672">++</span> <span style="color:#f92672">%</span> v5] <span style="color:#f92672">+</span> <span style="color:#ae81ff">39</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> ((v1 <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">65</span> <span style="color:#f92672">&amp;&amp;</span> v1 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span>) <span style="color:#f92672">||</span> (v1 <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">97</span> <span style="color:#f92672">&amp;&amp;</span> v1 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">122</span>)) {
</span></span><span style="display:flex;"><span>                flag[v2] <span style="color:#f92672">=</span> v1;
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (<span style="color:#f92672">++</span>n <span style="color:#f92672">==</span> <span style="color:#ae81ff">10</span>) {
</span></span><span style="display:flex;"><span>                    cout <span style="color:#f92672">&lt;&lt;</span> flag <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>                    system(<span style="color:#e6db74">&#34;PAUSE&#34;</span>);
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>	system(<span style="color:#e6db74">&#34;PAUSE&#34;</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>运行得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>KLDQCUDFZO
</span></span></code></pre></div><h2 id="0x2-java逆向解密">0x2 Java逆向解密</h2>
<p>Java逆向的题目，本质上和安卓逆向有着异曲同工之处，可以使用安卓逆向工具进行打开，这里使用Jadx打开</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> defpackage<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.ArrayList<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.Scanner<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* renamed from: Reverse  reason: default package */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Reverse</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        Scanner s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Scanner<span style="color:#f92672">(</span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">in</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Please input the flag ：&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        String str <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Your input is ：&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>str<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        Encrypt<span style="color:#f92672">(</span>str<span style="color:#f92672">.</span><span style="color:#a6e22e">toCharArray</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">Encrypt</span><span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> arr<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> KEY<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> Resultlist <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span> c <span style="color:#f92672">:</span> arr<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            Resultlist<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">((</span>c <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;@&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">^</span> <span style="color:#ae81ff">32</span><span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> KEYList <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">:</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{</span><span style="color:#ae81ff">180</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">136</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">137</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">147</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">191</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">137</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">147</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">191</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">148</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">136</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">133</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">191</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">134</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">140</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">129</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">135</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">191</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">65</span><span style="color:#f92672">})</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            KEYList<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>i<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Result:&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>Resultlist<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>KEYList<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Congratulations！&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">err</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Error！&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>应该就是最基本的代码审计</p>
<p>关键代码其实就在<code>Encrypt</code>函数里面</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">Encrypt</span><span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> arr<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> KEY<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> Resultlist <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span> c <span style="color:#f92672">:</span> arr<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            Resultlist<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">((</span>c <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;@&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">^</span> <span style="color:#ae81ff">32</span><span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> KEYList <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">:</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{</span><span style="color:#ae81ff">180</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">136</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">137</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">147</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">191</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">137</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">147</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">191</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">148</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">136</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">133</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">191</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">134</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">140</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">129</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">135</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">191</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">65</span><span style="color:#f92672">})</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            KEYList<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>i<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Result:&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>Resultlist<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>KEYList<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Congratulations！&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">err</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Error！&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>应该是一个注册码校验程序，写一个java程序逆过去应该就可以得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> re<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> java.util.ArrayList<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">JavaRe</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		ArrayList<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">&gt;</span> KEYList <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">:</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">int</span><span style="color:#f92672">[]{</span><span style="color:#ae81ff">180</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">136</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">137</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">147</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">191</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">137</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">147</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">191</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">148</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">136</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">133</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">191</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">134</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">140</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">129</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">135</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">191</span><span style="color:#f92672">,</span> <span style="color:#ae81ff">65</span><span style="color:#f92672">})</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            KEYList<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>i<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        ArrayList<span style="color:#f92672">&lt;</span>Character<span style="color:#f92672">&gt;</span> Resultlist <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> c <span style="color:#f92672">:</span> KEYList<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            Resultlist<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(((</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)((</span>c<span style="color:#f92672">^</span> <span style="color:#ae81ff">32</span><span style="color:#f92672">)-</span><span style="color:#e6db74">&#39;@&#39;</span><span style="color:#f92672">)));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        String flag <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> String<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span><span style="color:#f92672">(</span><span style="color:#66d9ef">char</span> c<span style="color:#f92672">:</span>Resultlist<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        	flag <span style="color:#f92672">+=</span> c<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>flag<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>运行Java程序就可以得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>This_is_the_flag_!
</span></span></code></pre></div><h2 id="0x3-刮开有奖">0x3 刮开有奖</h2>
<p>看下题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>这是一个赌博程序，快去赚钱吧！！！！！！！！！！！！！！！！！！！！！！！！！！！(在编辑框中的输入值，即为flag，提交即可) 注意：得到的 flag 请包上 flag{} 提交
</span></span></code></pre></div><p>先查一下壳：</p>
<p><img src="/images/BUUCTF-REVERSE-2_writeup/image-20210901182834092.png" alt="image-20210901182834092"></p>
<p>没壳，32位的程序，使用IDA pro打开</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__stdcall</span> <span style="color:#a6e22e">WinMain</span>(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span style="color:#66d9ef">int</span> nShowCmd)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">DialogBoxParamA</span>(hInstance, (LPCSTR)<span style="color:#ae81ff">0x67</span>, <span style="color:#ae81ff">0</span>, DialogFunc, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>看样子是调用了一个WIN32的API函数，关键的代码应该是在DialogFunc函数代码中</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>INT_PTR <span style="color:#66d9ef">__stdcall</span> <span style="color:#a6e22e">DialogFunc</span>(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v4; <span style="color:#75715e">// esi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v5; <span style="color:#75715e">// edi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7[<span style="color:#ae81ff">2</span>]; <span style="color:#75715e">// [esp+8h] [ebp-20030h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v8; <span style="color:#75715e">// [esp+10h] [ebp-20028h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// [esp+14h] [ebp-20024h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v10; <span style="color:#75715e">// [esp+18h] [ebp-20020h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v11; <span style="color:#75715e">// [esp+1Ch] [ebp-2001Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v12; <span style="color:#75715e">// [esp+20h] [ebp-20018h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v13; <span style="color:#75715e">// [esp+24h] [ebp-20014h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v14; <span style="color:#75715e">// [esp+28h] [ebp-20010h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v15; <span style="color:#75715e">// [esp+2Ch] [ebp-2000Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v16; <span style="color:#75715e">// [esp+30h] [ebp-20008h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  CHAR String[<span style="color:#ae81ff">65536</span>]; <span style="color:#75715e">// [esp+34h] [ebp-20004h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v18[<span style="color:#ae81ff">65536</span>]; <span style="color:#75715e">// [esp+10034h] [ebp-10004h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">272</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">273</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( (_WORD)a3 <span style="color:#f92672">==</span> <span style="color:#ae81ff">1001</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(String, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0xFFFFu</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">GetDlgItemTextA</span>(hDlg, <span style="color:#ae81ff">1000</span>, String, <span style="color:#ae81ff">0xFFFF</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(String) <span style="color:#f92672">==</span> <span style="color:#ae81ff">8</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      v7[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
</span></span><span style="display:flex;"><span>      v7[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">74</span>;
</span></span><span style="display:flex;"><span>      v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">83</span>;
</span></span><span style="display:flex;"><span>      v9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">69</span>;
</span></span><span style="display:flex;"><span>      v10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">67</span>;
</span></span><span style="display:flex;"><span>      v11 <span style="color:#f92672">=</span> <span style="color:#ae81ff">97</span>;
</span></span><span style="display:flex;"><span>      v12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">78</span>;
</span></span><span style="display:flex;"><span>      v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">72</span>;
</span></span><span style="display:flex;"><span>      v14 <span style="color:#f92672">=</span> <span style="color:#ae81ff">51</span>;
</span></span><span style="display:flex;"><span>      v15 <span style="color:#f92672">=</span> <span style="color:#ae81ff">110</span>;
</span></span><span style="display:flex;"><span>      v16 <span style="color:#f92672">=</span> <span style="color:#ae81ff">103</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_4010F0</span>(v7, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">memset</span>(v18, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0xFFFFu</span>);
</span></span><span style="display:flex;"><span>      v18[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> String[<span style="color:#ae81ff">5</span>];
</span></span><span style="display:flex;"><span>      v18[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> String[<span style="color:#ae81ff">7</span>];
</span></span><span style="display:flex;"><span>      v18[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> String[<span style="color:#ae81ff">6</span>];
</span></span><span style="display:flex;"><span>      v4 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">sub_401000</span>(v18, <span style="color:#a6e22e">strlen</span>(v18));
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">memset</span>(v18, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0xFFFFu</span>);
</span></span><span style="display:flex;"><span>      v18[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> String[<span style="color:#ae81ff">3</span>];
</span></span><span style="display:flex;"><span>      v18[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> String[<span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>      v18[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> String[<span style="color:#ae81ff">4</span>];
</span></span><span style="display:flex;"><span>      v5 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">sub_401000</span>(v18, <span style="color:#a6e22e">strlen</span>(v18));
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( String[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> v7[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">34</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&amp;&amp;</span> String[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> v10
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> String[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">141</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> v8
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&amp;&amp;</span> String[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">/</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> (v13 <span style="color:#f92672">/</span> <span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(v4, <span style="color:#e6db74">&#34;ak1w&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(v5, <span style="color:#e6db74">&#34;V1Ax&#34;</span>) )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">MessageBoxA</span>(hDlg, <span style="color:#e6db74">&#34;U g3t 1T!&#34;</span>, <span style="color:#e6db74">&#34;@_@&#34;</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( (_WORD)a3 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> (_WORD)a3 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">EndDialog</span>(hDlg, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)a3);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>也是调用了几个WIN32的API，对代码进行分析</p>
<p>可以知道：</p>
<p><code>GetDlgItemTextA</code> 函数是获取输入的字符串</p>
<p>这段代码对字符串进行了处理，主要是有两个处理函数<code>sub_4010F0</code> 和 <code>sub_401000</code></p>
<p>这个函数应该是处理这个程序字符串的关键函数</p>
<p>先来看看sub_4010F0函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_4010F0</span>(<span style="color:#66d9ef">int</span> a1, <span style="color:#66d9ef">int</span> a2, <span style="color:#66d9ef">int</span> a3)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// esi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// ecx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// edx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  result <span style="color:#f92672">=</span> a3;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> a2; i <span style="color:#f92672">&lt;=</span> a3; a2 <span style="color:#f92672">=</span> i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i;
</span></span><span style="display:flex;"><span>    v6 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">&lt;</span> result <span style="color:#f92672">&amp;&amp;</span> i <span style="color:#f92672">&lt;</span> result )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( v6 <span style="color:#f92672">&gt;</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> result) )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> ( i <span style="color:#f92672">&gt;=</span> result )
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">++</span>i;
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(v5 <span style="color:#f92672">+</span> a1) <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> result);
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> ( i <span style="color:#f92672">&gt;=</span> result )
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">while</span> ( <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i) <span style="color:#f92672">&lt;=</span> v6 )
</span></span><span style="display:flex;"><span>          {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">++</span>i <span style="color:#f92672">&gt;=</span> result )
</span></span><span style="display:flex;"><span>              <span style="color:#66d9ef">goto</span> LABEL_13;
</span></span><span style="display:flex;"><span>          }
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> ( i <span style="color:#f92672">&gt;=</span> result )
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>          v5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i;
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> result) <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(<span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> a1);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">--</span>result;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">while</span> ( i <span style="color:#f92672">&lt;</span> result );
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>LABEL_13:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(_DWORD <span style="color:#f92672">*</span>)(a1 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> result) <span style="color:#f92672">=</span> v6;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_4010F0</span>(a1, a2, i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> a3;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">++</span>i;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>代码的功能暂时不太清楚，毕竟对C语言的审计功底还是不是很到位，根据代码进行转换为相应的Cpp代码运行一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_4010F0</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>a1, <span style="color:#66d9ef">int</span> a2, <span style="color:#66d9ef">int</span> a3)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// esi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// ecx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// edx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> a3;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> a2; i <span style="color:#f92672">&lt;=</span> a3; a2 <span style="color:#f92672">=</span> i)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        v5 <span style="color:#f92672">=</span> i;
</span></span><span style="display:flex;"><span>        v6 <span style="color:#f92672">=</span> a1[i];
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (a2 <span style="color:#f92672">&lt;</span> result <span style="color:#f92672">&amp;&amp;</span> i <span style="color:#f92672">&lt;</span> result)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (v6 <span style="color:#f92672">&gt;</span>a1[result])
</span></span><span style="display:flex;"><span>                {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> (i <span style="color:#f92672">&gt;=</span> result)
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">++</span>i;
</span></span><span style="display:flex;"><span>                    a1[v5] <span style="color:#f92672">=</span> a1[result];
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> (i <span style="color:#f92672">&gt;=</span> result)
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">while</span> (a1[i] <span style="color:#f92672">&lt;=</span> v6)
</span></span><span style="display:flex;"><span>                    {
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">++</span>i <span style="color:#f92672">&gt;=</span> result)
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">goto</span> LABEL_13;
</span></span><span style="display:flex;"><span>                    }
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> (i <span style="color:#f92672">&gt;=</span> result)
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>                    v5 <span style="color:#f92672">=</span> i;
</span></span><span style="display:flex;"><span>                    a1[result] <span style="color:#f92672">=</span> a1[i];
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">--</span>result;
</span></span><span style="display:flex;"><span>            } <span style="color:#66d9ef">while</span> (i <span style="color:#f92672">&lt;</span> result);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    LABEL_13:
</span></span><span style="display:flex;"><span>        a1[result] <span style="color:#f92672">=</span> v6;
</span></span><span style="display:flex;"><span>        sub_4010F0(a1, a2, i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">=</span> a3;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>i;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> v7[<span style="color:#ae81ff">11</span>];
</span></span><span style="display:flex;"><span>	v7[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
</span></span><span style="display:flex;"><span>    v7[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">74</span>;
</span></span><span style="display:flex;"><span>    v7[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">83</span>;
</span></span><span style="display:flex;"><span>    v7[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">69</span>;
</span></span><span style="display:flex;"><span>    v7[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">67</span>;
</span></span><span style="display:flex;"><span>    v7[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">97</span>;
</span></span><span style="display:flex;"><span>    v7[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">78</span>;
</span></span><span style="display:flex;"><span>    v7[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">72</span>;
</span></span><span style="display:flex;"><span>    v7[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">51</span>;
</span></span><span style="display:flex;"><span>    v7[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">110</span>;
</span></span><span style="display:flex;"><span>    v7[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">103</span>;
</span></span><span style="display:flex;"><span>    cout <span style="color:#f92672">&lt;&lt;</span> v7 <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>    sub_4010F0(v7, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">11</span>;<span style="color:#f92672">++</span>i){
</span></span><span style="display:flex;"><span>    	cout <span style="color:#f92672">&lt;&lt;</span> (<span style="color:#66d9ef">int</span>)v7[i] <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\t</span><span style="color:#e6db74">&#34;</span>;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	cout <span style="color:#f92672">&lt;&lt;</span> endl;
</span></span><span style="display:flex;"><span>	system(<span style="color:#e6db74">&#34;PAUSE&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>运行代码，得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ZJSECaNH3ng
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">51</span>      <span style="color:#ae81ff">67</span>      <span style="color:#ae81ff">69</span>      <span style="color:#ae81ff">72</span>      <span style="color:#ae81ff">74</span>      <span style="color:#ae81ff">78</span>      <span style="color:#ae81ff">83</span>      <span style="color:#ae81ff">90</span>      <span style="color:#ae81ff">97</span>      <span style="color:#ae81ff">103</span>     <span style="color:#ae81ff">110</span>
</span></span></code></pre></div><p>看来应该是一个排序算法，按升序进行排序的</p>
<p>下面分析另一个函数具体是个什么东西：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>_BYTE <span style="color:#f92672">*</span><span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">sub_401000</span>(<span style="color:#66d9ef">int</span> a1, <span style="color:#66d9ef">int</span> a2)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> v2; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// esi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">size_t</span> v4; <span style="color:#75715e">// ebx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v5; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v6; <span style="color:#75715e">// edi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v8; <span style="color:#75715e">// ebx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// edi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v10; <span style="color:#75715e">// edx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v11; <span style="color:#75715e">// edi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v12; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// esi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>result; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v15; <span style="color:#75715e">// [esp+Ch] [ebp-10h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _BYTE <span style="color:#f92672">*</span>v16; <span style="color:#75715e">// [esp+10h] [ebp-Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v17; <span style="color:#75715e">// [esp+14h] [ebp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v18; <span style="color:#75715e">// [esp+18h] [ebp-4h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v2 <span style="color:#f92672">=</span> a2 <span style="color:#f92672">/</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">%</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">++</span>v2;
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> v2 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(v4);
</span></span><span style="display:flex;"><span>  v6 <span style="color:#f92672">=</span> v5;
</span></span><span style="display:flex;"><span>  v15 <span style="color:#f92672">=</span> v5;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>v5 )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(v5, <span style="color:#ae81ff">0</span>, v4);
</span></span><span style="display:flex;"><span>  v7 <span style="color:#f92672">=</span> a2;
</span></span><span style="display:flex;"><span>  v8 <span style="color:#f92672">=</span> v6;
</span></span><span style="display:flex;"><span>  v16 <span style="color:#f92672">=</span> v6;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      v9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      v10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      v18 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( v3 <span style="color:#f92672">&gt;=</span> v7 )
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>v10;
</span></span><span style="display:flex;"><span>        v9 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> <span style="color:#f92672">*</span>)(v3 <span style="color:#f92672">+</span> a1) <span style="color:#f92672">|</span> (v9 <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">8</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">++</span>v3;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">while</span> ( v10 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span> );
</span></span><span style="display:flex;"><span>      v11 <span style="color:#f92672">=</span> v9 <span style="color:#f92672">&lt;&lt;</span> (<span style="color:#ae81ff">8</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">-</span> v10));
</span></span><span style="display:flex;"><span>      v12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      v17 <span style="color:#f92672">=</span> v3;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>; i <span style="color:#f92672">&gt;</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>; i <span style="color:#f92672">-=</span> <span style="color:#ae81ff">6</span> )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( v10 <span style="color:#f92672">&gt;=</span> v12 )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v18 <span style="color:#f92672">+</span> v12) <span style="color:#f92672">=</span> (v11 <span style="color:#f92672">&gt;&gt;</span> i) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x3F</span>;
</span></span><span style="display:flex;"><span>          v8 <span style="color:#f92672">=</span> v16;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v18 <span style="color:#f92672">+</span> v12) <span style="color:#f92672">=</span> <span style="color:#ae81ff">64</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>v8<span style="color:#f92672">++</span> <span style="color:#f92672">=</span> byte_407830[<span style="color:#f92672">*</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v18 <span style="color:#f92672">+</span> v12<span style="color:#f92672">++</span>)];
</span></span><span style="display:flex;"><span>        v16 <span style="color:#f92672">=</span> v8;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      v3 <span style="color:#f92672">=</span> v17;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( v17 <span style="color:#f92672">&gt;=</span> a2 )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>      v7 <span style="color:#f92672">=</span> a2;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    v6 <span style="color:#f92672">=</span> v15;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  result <span style="color:#f92672">=</span> v6;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">*</span>v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>看代码，发现有3和8移位的特征初步推测是base64编码，看到有一个<code>byte_407830</code>的数组，跟进点开查看数据内容</p>
<p><img src="/images/BUUCTF-REVERSE-2_writeup/image-20210901203207491.png" alt="image-20210901203207491"></p>
<p>看到这数据应该就可以断定是base64编码了。</p>
<p>现在知道了两个函数的功能作用，可以直接进行求解，直接定位到判断条件的位置：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( String[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> v7[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> <span style="color:#ae81ff">34</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&amp;&amp;</span> String[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> v10
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">*</span> String[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">-</span> <span style="color:#ae81ff">141</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> v8
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&amp;&amp;</span> String[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">/</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> (v13 <span style="color:#f92672">/</span> <span style="color:#ae81ff">9</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(v4, <span style="color:#e6db74">&#34;ak1w&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(v5, <span style="color:#e6db74">&#34;V1Ax&#34;</span>) )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">MessageBoxA</span>(hDlg, <span style="color:#e6db74">&#34;U g3t 1T!&#34;</span>, <span style="color:#e6db74">&#34;@_@&#34;</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>      }
</span></span></code></pre></div><p>进行简单的推断可以得出</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>String[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">85</span>; <span style="color:#75715e">// 51+34 = 85
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>String[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">74</span>;
</span></span><span style="display:flex;"><span>String[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">87</span>; <span style="color:#75715e">//(3 x 69 +141)/4 = 87
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>String[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">80</span>;<span style="color:#75715e">// 2 x (90 / 9) x4 == 80
</span></span></span></code></pre></div><p>下面进行base64解码来得到后面四个字符的数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>b<span style="color:#e6db74">&#39;jMp&#39;</span>
</span></span><span style="display:flex;"><span>b<span style="color:#e6db74">&#39;WP1&#39;</span>
</span></span></code></pre></div><p>根据推断出来的信息可以求解得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>UJWP1jMp
</span></span></code></pre></div><hr>
<p>也可以使用Python脚本快速求解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> [<span style="color:#ae81ff">51</span>, <span style="color:#ae81ff">67</span>, <span style="color:#ae81ff">69</span>, <span style="color:#ae81ff">72</span>, <span style="color:#ae81ff">74</span>, <span style="color:#ae81ff">78</span>, <span style="color:#ae81ff">83</span>, <span style="color:#ae81ff">90</span>, <span style="color:#ae81ff">97</span>, <span style="color:#ae81ff">103</span>, <span style="color:#ae81ff">110</span>]
</span></span><span style="display:flex;"><span>String <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>String <span style="color:#f92672">+=</span> chr(data[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span><span style="color:#ae81ff">34</span>)
</span></span><span style="display:flex;"><span>String <span style="color:#f92672">+=</span> chr(data[<span style="color:#ae81ff">4</span>])
</span></span><span style="display:flex;"><span>String <span style="color:#f92672">+=</span> base64<span style="color:#f92672">.</span>b64decode(<span style="color:#e6db74">&#34;V1Ax&#34;</span>)<span style="color:#f92672">.</span>decode()
</span></span><span style="display:flex;"><span>String <span style="color:#f92672">+=</span> base64<span style="color:#f92672">.</span>b64decode(<span style="color:#e6db74">&#34;ak1w&#34;</span>)<span style="color:#f92672">.</span>decode()
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>String<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>运行脚本就可以得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{UJWP1jMp}
</span></span></code></pre></div><h2 id="0x4-gxyctf2019luck_guy">0x4 [GXYCTF2019]luck_guy</h2>
<p>文件没有拓展名，感觉是一个ELF格式的文件</p>
<p>先走一下逆向的流程，首先查下壳</p>
<p><img src="/images/BUUCTF-REVERSE-2_writeup/image-20210902074301328.png" alt="image-20210902074301328"></p>
<p>果然是一个ELF文件，64位的文件，用x64 IDA pro打开文件，查看主程序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// [rsp+14h] [rbp-Ch] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v5; <span style="color:#75715e">// [rsp+18h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">welcome</span>(argc, argv, envp);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;_________________&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;try to patch me and find flag&#34;</span>);
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;please input a lucky number&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__isoc99_scanf</span>(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v4);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">patch_me</span>(v4);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;OK,see you again&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>程序挺简单的，需要寻找一下核心代码</p>
<p>看样子核心代码应该是在<code>patch_me(v4)</code>函数里面，进入函数内部</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">patch_me</span>(<span style="color:#66d9ef">int</span> a1)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( a1 <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;just finished&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#a6e22e">get_flag</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>继续跟进到<code>get_flag()</code>函数里面</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> <span style="color:#a6e22e">get_flag</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v0; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+4h] [rbp-3Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> j; <span style="color:#75715e">// [rsp+8h] [rbp-38h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> s; <span style="color:#75715e">// [rsp+10h] [rbp-30h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5; <span style="color:#75715e">// [rsp+18h] [rbp-28h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v6; <span style="color:#75715e">// [rsp+38h] [rbp-8h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v6 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  v0 <span style="color:#f92672">=</span> <span style="color:#a6e22e">time</span>(<span style="color:#ae81ff">0LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">srand</span>(v0);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> ( <span style="color:#a6e22e">rand</span>() <span style="color:#f92672">%</span> <span style="color:#ae81ff">200</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;OK, it&#39;s flag:&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">memset</span>(<span style="color:#f92672">&amp;</span>s, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x28uLL</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcat</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>s, f1);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcat</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>s, <span style="color:#f92672">&amp;</span>f2);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>s);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Solar not like you&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Solar want a girlfriend&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">4</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>        s <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x7F666F6067756369LL</span>;
</span></span><span style="display:flex;"><span>        v5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcat</span>(<span style="color:#f92672">&amp;</span>f2, (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>s);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">5</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">7</span>; <span style="color:#f92672">++</span>j )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">if</span> ( j <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>f2 <span style="color:#f92672">+</span> j) <span style="color:#f92672">-=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">--*</span>(<span style="color:#f92672">&amp;</span>f2 <span style="color:#f92672">+</span> j);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;emmm,you can&#39;t find flag 23333&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>) <span style="color:#f92672">^</span> v6;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>看来flag应该就在这个函数里面，本来觉得可以使用gdb调试出来，无奈自己太菜了，不知道到gdb怎么修改汇编代码进行跳转，只能进行静态分析调试</p>
<p>进行分析发现，<code>switch</code> 条件的顺序应该是 4 –&gt; 5 —&gt;1的顺序依次输出flag</p>
<p>写一个脚本将flag数据输出</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;GXY{do_not_&#39;</span>
</span></span><span style="display:flex;"><span>f2 <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0x7F</span>, <span style="color:#ae81ff">0x66</span>, <span style="color:#ae81ff">0x6F</span>, <span style="color:#ae81ff">0x60</span>, <span style="color:#ae81ff">0x67</span>, <span style="color:#ae81ff">0x75</span>, <span style="color:#ae81ff">0x63</span>, <span style="color:#ae81ff">0x69</span>][::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">8</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> i <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>        s <span style="color:#f92672">=</span> chr(f2[i] <span style="color:#f92672">-</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        s <span style="color:#f92672">=</span> chr(f2[i] <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">+=</span> s
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>运行脚本，得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>GXY{do_not_hate_me}
</span></span></code></pre></div><h2 id="0x5-findit">0x5 findit</h2>
<p>看下题目哈</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>不知不觉，小明长大了，变成了一个程序员，虽然很苦逼，但是偶尔编写个小东西坑害公司新人还是蛮好玩的。新人小萌一天问小明wifi账号密码，一分钟后，小萌收到了一个文件。小萌想了好久都没得到密码，怎么办，女朋友要买东西，流量告罄，没wifi上不了网，不买就分手，是时候该展现月老的实力了兄弟们！代表月亮惩罚小明！得出答案。 注意：得到的 flag 请包上 flag{} 提交
</span></span></code></pre></div><p>感觉像是一道APK的题目，下载附件发现果然是一个APK的题目，使用APK逆向工具jadx进行逆向</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> com.example.findit<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.os.Bundle<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.support.v7.app.ActionBarActivity<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.view.MenuItem<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.view.View<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.widget.Button<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.widget.EditText<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.widget.TextView<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MainActivity</span> <span style="color:#66d9ef">extends</span> ActionBarActivity <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* access modifiers changed from: protected */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span> <span style="color:#75715e">// android.support.v7.app.ActionBarActivity, android.support.v4.app.FragmentActivity
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onCreate</span><span style="color:#f92672">(</span>Bundle savedInstanceState<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">onCreate</span><span style="color:#f92672">(</span>savedInstanceState<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        setContentView<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">layout</span><span style="color:#f92672">.</span><span style="color:#a6e22e">activity_main</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> EditText edit <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>EditText<span style="color:#f92672">)</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">widget2</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> TextView text <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>TextView<span style="color:#f92672">)</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">widget1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> a <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;T&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;h&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;i&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;s&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;I&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;s&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;T&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;h&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;e&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;F&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;l&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;g&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;H&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;o&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;e&#39;</span><span style="color:#f92672">};</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> b <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;p&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;v&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;k&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;q&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;{&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;1&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;6&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;4&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;6&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;7&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;5&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;6&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;3&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;3&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;l&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;4&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;4&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;9&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;l&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;n&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;p&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;7&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;p&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;9&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;n&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;k&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;8&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;k&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;7&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;5&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;}&#39;</span><span style="color:#f92672">};</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">((</span>Button<span style="color:#f92672">)</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">widget3</span><span style="color:#f92672">)).</span><span style="color:#a6e22e">setOnClickListener</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> View<span style="color:#f92672">.</span><span style="color:#a6e22e">OnClickListener</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">/* class com.example.findit.MainActivity.AnonymousClass1 */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onClick</span><span style="color:#f92672">(</span>View v<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> x <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[</span><span style="color:#ae81ff">17</span><span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> y <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[</span><span style="color:#ae81ff">38</span><span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">17</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;I&#39;</span> <span style="color:#f92672">&amp;&amp;</span> a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> <span style="color:#f92672">(</span>a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;i&#39;</span> <span style="color:#f92672">&amp;&amp;</span> a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        x<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">18</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">||</span> a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">||</span> a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        x<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> a<span style="color:#f92672">[</span>i<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        x<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>a<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">-</span> <span style="color:#e6db74">&#39;\b&#39;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>x<span style="color:#f92672">).</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>edit<span style="color:#f92672">.</span><span style="color:#a6e22e">getText</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">38</span><span style="color:#f92672">;</span> i2<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">||</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">||</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                            y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                            y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span> <span style="color:#f92672">&amp;&amp;</span> y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                                y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">26</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                    text<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>y<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                text<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;答案错了肿么办。。。不给你又不好意思。。。哎呀好纠结啊~~~&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">});</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">onOptionsItemSelected</span><span style="color:#f92672">(</span>MenuItem item<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>item<span style="color:#f92672">.</span><span style="color:#a6e22e">getItemId</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">action_settings</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">onOptionsItemSelected</span><span style="color:#f92672">(</span>item<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>看样子好像是一个简单的加密程序，可以进行简单的分析</p>
<p>发现主要的flag代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">38</span><span style="color:#f92672">;</span> i2<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">||</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">||</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span> <span style="color:#f92672">&amp;&amp;</span> y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">26</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>text<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>y<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span></code></pre></div><p>这行代码稍加修改一下运行就可以直接俄得到flag了，写个Java的flag生成器，来生成flag吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> re<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Findit</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> b <span style="color:#f92672">=</span> <span style="color:#f92672">{</span><span style="color:#e6db74">&#39;p&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;v&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;k&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;q&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;{&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;1&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;6&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;4&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;6&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;7&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;5&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;6&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;3&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;3&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;l&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;4&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;4&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;9&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;l&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;n&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;p&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;7&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;p&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;9&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;m&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;n&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;k&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;2&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;8&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;k&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;7&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;5&#39;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#39;}&#39;</span><span style="color:#f92672">};</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> y <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">[</span><span style="color:#ae81ff">38</span><span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>		
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">38</span><span style="color:#f92672">;</span> i2<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	        <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;A&#39;</span> <span style="color:#f92672">||</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">||</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	            y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> b<span style="color:#f92672">[</span>i2<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>	        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	            y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>b<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	            <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;Z&#39;</span> <span style="color:#f92672">&amp;&amp;</span> y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">&gt;=</span> <span style="color:#e6db74">&#39;z&#39;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	                y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">(</span>y<span style="color:#f92672">[</span>i2<span style="color:#f92672">]</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">26</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>	        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>	    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>y<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>	
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>运行一下这个java程序就能生成flag啦！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{c164675262033b4c49bdf7f9cda28a75}
</span></span></code></pre></div><h2 id="0x6-简单的注册器">0x6 简单的注册器</h2>
<p>看下题目</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>生活中难免会有需要使用一些付费的程序，但是没有绿色版怎么办？只能自己逆向看看注册程序的代码是什么逻辑了。 注意：得到的 flag 请包上 flag{} 提交
</span></span></code></pre></div><p>下载附件，发现是一个apk文件，使用apk逆向工具jadx查看apk的伪代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> com.example.flag<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.os.Bundle<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.support.v4.app.Fragment<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.support.v7.app.ActionBarActivity<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.view.LayoutInflater<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.view.Menu<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.view.MenuItem<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.view.View<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.view.ViewGroup<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.widget.Button<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.widget.EditText<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> android.widget.TextView<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MainActivity</span> <span style="color:#66d9ef">extends</span> ActionBarActivity <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* access modifiers changed from: protected */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span> <span style="color:#75715e">// android.support.v7.app.ActionBarActivity, android.support.v4.app.FragmentActivity
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onCreate</span><span style="color:#f92672">(</span>Bundle savedInstanceState<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">onCreate</span><span style="color:#f92672">(</span>savedInstanceState<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        setContentView<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">layout</span><span style="color:#f92672">.</span><span style="color:#a6e22e">activity_main</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>savedInstanceState <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            getSupportFragmentManager<span style="color:#f92672">().</span><span style="color:#a6e22e">beginTransaction</span><span style="color:#f92672">().</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">container</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> PlaceholderFragment<span style="color:#f92672">()).</span><span style="color:#a6e22e">commit</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> TextView textview <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>TextView<span style="color:#f92672">)</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">textView1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> EditText editview <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>EditText<span style="color:#f92672">)</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">editText1</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">((</span>Button<span style="color:#f92672">)</span> findViewById<span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">button1</span><span style="color:#f92672">)).</span><span style="color:#a6e22e">setOnClickListener</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> View<span style="color:#f92672">.</span><span style="color:#a6e22e">OnClickListener</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">/* class com.example.flag.MainActivity.AnonymousClass1 */</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">onClick</span><span style="color:#f92672">(</span>View v<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">int</span> flag <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                String xx <span style="color:#f92672">=</span> editview<span style="color:#f92672">.</span><span style="color:#a6e22e">getText</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!(</span>xx<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">32</span> <span style="color:#f92672">&amp;&amp;</span> xx<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span><span style="color:#ae81ff">31</span><span style="color:#f92672">)</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">&amp;&amp;</span> xx<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span><span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;b&#39;</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>xx<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span><span style="color:#ae81ff">0</span><span style="color:#f92672">)</span> <span style="color:#f92672">+</span> xx<span style="color:#f92672">.</span><span style="color:#a6e22e">charAt</span><span style="color:#f92672">(</span><span style="color:#ae81ff">2</span><span style="color:#f92672">))</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">48</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">56</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    flag <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>flag <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dd2940c04462b4dd7c450528835cca15&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">toCharArray</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                    x<span style="color:#f92672">[</span><span style="color:#ae81ff">2</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span><span style="color:#ae81ff">2</span><span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">3</span><span style="color:#f92672">])</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">50</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    x<span style="color:#f92672">[</span><span style="color:#ae81ff">4</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span><span style="color:#ae81ff">2</span><span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">5</span><span style="color:#f92672">])</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">48</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    x<span style="color:#f92672">[</span><span style="color:#ae81ff">30</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span><span style="color:#ae81ff">31</span><span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">9</span><span style="color:#f92672">])</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">48</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    x<span style="color:#f92672">[</span><span style="color:#ae81ff">14</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span><span style="color:#ae81ff">27</span><span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">28</span><span style="color:#f92672">])</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">97</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">16</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">char</span> a <span style="color:#f92672">=</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">-</span> i<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>                        x<span style="color:#f92672">[</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">-</span> i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> x<span style="color:#f92672">[</span>i<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>                        x<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> a<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                    textview<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;flag{&#34;</span> <span style="color:#f92672">+</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>x<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;}&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                textview<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;输入注册码错误&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">});</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">onCreateOptionsMenu</span><span style="color:#f92672">(</span>Menu menu<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        getMenuInflater<span style="color:#f92672">().</span><span style="color:#a6e22e">inflate</span><span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">menu</span><span style="color:#f92672">.</span><span style="color:#a6e22e">main</span><span style="color:#f92672">,</span> menu<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">onOptionsItemSelected</span><span style="color:#f92672">(</span>MenuItem item<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>item<span style="color:#f92672">.</span><span style="color:#a6e22e">getItemId</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> R<span style="color:#f92672">.</span><span style="color:#a6e22e">id</span><span style="color:#f92672">.</span><span style="color:#a6e22e">action_settings</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">onOptionsItemSelected</span><span style="color:#f92672">(</span>item<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PlaceholderFragment</span> <span style="color:#66d9ef">extends</span> Fragment <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">@Override</span> <span style="color:#75715e">// android.support.v4.app.Fragment
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">public</span> View <span style="color:#a6e22e">onCreateView</span><span style="color:#f92672">(</span>LayoutInflater inflater<span style="color:#f92672">,</span> ViewGroup container<span style="color:#f92672">,</span> Bundle savedInstanceState<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> inflater<span style="color:#f92672">.</span><span style="color:#a6e22e">inflate</span><span style="color:#f92672">(</span>R<span style="color:#f92672">.</span><span style="color:#a6e22e">layout</span><span style="color:#f92672">.</span><span style="color:#a6e22e">fragment_main</span><span style="color:#f92672">,</span> container<span style="color:#f92672">,</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>进行简单的代码审计，可以确定核心代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>flag <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dd2940c04462b4dd7c450528835cca15&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">toCharArray</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    x<span style="color:#f92672">[</span><span style="color:#ae81ff">2</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span><span style="color:#ae81ff">2</span><span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">3</span><span style="color:#f92672">])</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">50</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    x<span style="color:#f92672">[</span><span style="color:#ae81ff">4</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span><span style="color:#ae81ff">2</span><span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">5</span><span style="color:#f92672">])</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">48</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    x<span style="color:#f92672">[</span><span style="color:#ae81ff">30</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span><span style="color:#ae81ff">31</span><span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">9</span><span style="color:#f92672">])</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">48</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    x<span style="color:#f92672">[</span><span style="color:#ae81ff">14</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span><span style="color:#ae81ff">27</span><span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">28</span><span style="color:#f92672">])</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">97</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">16</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> a <span style="color:#f92672">=</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">-</span> i<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>        x<span style="color:#f92672">[</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">-</span> i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> x<span style="color:#f92672">[</span>i<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>        x<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> a<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    textview<span style="color:#f92672">.</span><span style="color:#a6e22e">setText</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;flag{&#34;</span> <span style="color:#f92672">+</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>x<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;}&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>写一个Java注册器，把flag注册出来</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#f92672">package</span> re<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Register</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">char</span><span style="color:#f92672">[]</span> x <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;dd2940c04462b4dd7c450528835cca15&#34;</span><span style="color:#f92672">.</span><span style="color:#a6e22e">toCharArray</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>	    x<span style="color:#f92672">[</span><span style="color:#ae81ff">2</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span><span style="color:#ae81ff">2</span><span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">3</span><span style="color:#f92672">])</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">50</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	    x<span style="color:#f92672">[</span><span style="color:#ae81ff">4</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span><span style="color:#ae81ff">2</span><span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">5</span><span style="color:#f92672">])</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">48</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	    x<span style="color:#f92672">[</span><span style="color:#ae81ff">30</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span><span style="color:#ae81ff">31</span><span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">9</span><span style="color:#f92672">])</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">48</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	    x<span style="color:#f92672">[</span><span style="color:#ae81ff">14</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">char</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>x<span style="color:#f92672">[</span><span style="color:#ae81ff">27</span><span style="color:#f92672">]</span> <span style="color:#f92672">+</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">28</span><span style="color:#f92672">])</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">97</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	    <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">16</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	        <span style="color:#66d9ef">char</span> a <span style="color:#f92672">=</span> x<span style="color:#f92672">[</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">-</span> i<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>	        x<span style="color:#f92672">[</span><span style="color:#ae81ff">31</span> <span style="color:#f92672">-</span> i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> x<span style="color:#f92672">[</span>i<span style="color:#f92672">];</span>
</span></span><span style="display:flex;"><span>	        x<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> a<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>	    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;flag{&#34;</span> <span style="color:#f92672">+</span> String<span style="color:#f92672">.</span><span style="color:#a6e22e">valueOf</span><span style="color:#f92672">(</span>x<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;}&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>运行注册器来注册一个flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{59acc538825054c7de4b26440c0999dd}
</span></span></code></pre></div><h2 id="0x7-bjdctf2020justre">0x7 [BJDCTF2020]JustRE</h2>
<p>下载下来是一个挺有意思的exe程序</p>
<p><img src="/images/BUUCTF-REVERSE-2_writeup/image-20210902121321802.png" alt="image-20210902121321802"></p>
<p>走下流程，首先是查询文件</p>
<p><img src="/images/BUUCTF-REVERSE-2_writeup/image-20210902121542969.png" alt="image-20210902121542969"></p>
<p>32位的PE程序，使用IDA pro反汇编通过检索BJD的字符串来定位到核心代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>INT_PTR <span style="color:#66d9ef">__stdcall</span> <span style="color:#a6e22e">DialogFunc</span>(HWND hWnd, UINT a2, WPARAM a3, LPARAM a4)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  CHAR String[<span style="color:#ae81ff">100</span>]; <span style="color:#75715e">// [esp+0h] [ebp-64h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">272</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( a2 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">273</span> )
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( (_WORD)a3 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> (_WORD)a3 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sprintf</span>(String, Format, <span style="color:#f92672">++</span>dword_4099F0);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( dword_4099F0 <span style="color:#f92672">==</span> <span style="color:#ae81ff">19999</span> )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">sprintf</span>(String, <span style="color:#e6db74">&#34; BJD{%d%d2069a45792d233ac}&#34;</span>, <span style="color:#ae81ff">19999</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">SetWindowTextA</span>(hWnd, String);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">SetWindowTextA</span>(hWnd, String);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">EndDialog</span>(hWnd, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int16</span>)a3);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>发现核心代码中隐藏着flag的信息，得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BJD{1999902069a45792d233ac}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>XCTF REVERSE novice_writeup</title>
            <link>/posts/xctf-reverse-novice_writeup/</link>
            <pubDate>Thu, 14 Oct 2021 13:27:13 +0800</pubDate>
            
            <guid>/posts/xctf-reverse-novice_writeup/</guid>
            <description>XCTF-REVERSE-新手区 writeup 来XCTF平台，做做Re练练手
XCTF平台有十道题目：
十道题目应该是涵盖了逆向方向的主要内容，带着好奇心去探索逆向的世界吧
0x0 insanity 往往第一道题目都不是很难，下载附件，看看是个什么东西。
文件没有扩展名，可能是个ELF文件，走个流程
首先查一下壳
果然是ELF格式的文件，不过不是x64格式的ELF文件
使用IDA pro打开文件，查看主函数的反编译代码
int __cdecl main(int argc, const char **argv, const char **envp) { unsigned int v3; // eax unsigned int v4; // eax puts(&amp;#34;Reticulating splines, please wait..&amp;#34;); sleep(5u); v3 = time(0); srand(v3); v4 = rand(); puts((&amp;amp;strs)[v4 % 0xA]); return 0; } 跟进strs的数据
继续跟进strs的数据
get到了flag
9447{This_is_a_flag} 0x1 python-trade 看题目应该是一个Python的逆向题目
文件是一个pyc文件应该是Python的逆向文件，可以使用Python的反编译工具进行反编译
可以使用 uncompyle 进行反编译：
# uncompyle6 version 3.7.4 # Python bytecode 2.</description>
            <content type="html"><![CDATA[<h1 id="xctf-reverse-新手区-writeup">XCTF-REVERSE-新手区 writeup</h1>
<p>来XCTF平台，做做Re练练手</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902134256690.png" alt="image-20210902134256690"></p>
<p>XCTF平台有十道题目：</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902134352010.png" alt="image-20210902134352010"></p>
<p>十道题目应该是涵盖了逆向方向的主要内容，带着好奇心去探索逆向的世界吧</p>
<h2 id="0x0-insanity">0x0 insanity</h2>
<p>往往第一道题目都不是很难，下载附件，看看是个什么东西。</p>
<p>文件没有扩展名，可能是个ELF文件，走个流程</p>
<p>首先查一下壳</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902135713948.png" alt="image-20210902135713948"></p>
<p>果然是ELF格式的文件，不过不是x64格式的ELF文件</p>
<p>使用IDA pro打开文件，查看主函数的反编译代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Reticulating splines, please wait..&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sleep</span>(<span style="color:#ae81ff">5u</span>);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">time</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">srand</span>(v3);
</span></span><span style="display:flex;"><span>  v4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">rand</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>((<span style="color:#f92672">&amp;</span>strs)[v4 <span style="color:#f92672">%</span> <span style="color:#ae81ff">0xA</span>]);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>跟进strs的数据</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902145813017.png" alt="image-20210902145813017"></p>
<p>继续跟进strs的数据</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902145852653.png" alt="image-20210902145852653"></p>
<p>get到了flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>9447{This_is_a_flag}
</span></span></code></pre></div><h2 id="0x1-python-trade">0x1 python-trade</h2>
<p>看题目应该是一个Python的逆向题目</p>
<p>文件是一个pyc文件应该是Python的逆向文件，可以使用Python的反编译工具进行反编译</p>
<p>可以使用 <code>uncompyle</code> 进行反编译：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># uncompyle6 version 3.7.4</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Python bytecode 2.7 (62211)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Decompiled from: Python 3.8.8 (default, Apr 13 2021, 15:08:03) [MSC v.1916 64 bit (AMD64)]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Embedded file name: 1.py</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Compiled at: 2017-06-03 10:20:43</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode</span>(message):
</span></span><span style="display:flex;"><span>    s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> message:
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> ord(i) <span style="color:#f92672">^</span> <span style="color:#ae81ff">32</span>
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>        s <span style="color:#f92672">+=</span> chr(x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> base64<span style="color:#f92672">.</span>b64encode(s)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>correct <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;XlNkVmtUI1MgXWBZXCFeKY+AaXNt&#39;</span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>print <span style="color:#e6db74">&#39;Input flag:&#39;</span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> raw_input()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> encode(flag) <span style="color:#f92672">==</span> correct:
</span></span><span style="display:flex;"><span>    print <span style="color:#e6db74">&#39;correct&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    print <span style="color:#e6db74">&#39;wrong&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># okay decompiling .\test.pyc</span>
</span></span></code></pre></div><p>应该是需要逆这个加密算法的进行求解，密码手的老本行了，写个求解脚本:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">Redecode</span>(cipher):
</span></span><span style="display:flex;"><span>    message <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    cipher <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(cipher)<span style="color:#f92672">.</span>decode()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> ord(i) <span style="color:#f92672">-</span> <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">^</span> <span style="color:#ae81ff">32</span>
</span></span><span style="display:flex;"><span>        message <span style="color:#f92672">+=</span> chr(x)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> message
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;XlNkVmtUI1MgXWBZXCFeKY+AaXNt&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> Redecode(cipher)
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>在python2环境下运行脚本，就能得到flag了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>nctf{d3c0mpil1n9_PyC}
</span></span></code></pre></div><h2 id="0x2-re1">0x2 re1</h2>
<p>附件有报毒，麻了</p>
<p>走一下流程，先查文件信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902152537015.png" alt="image-20210902152537015"></p>
<p>32位的可执行程序，程序没有壳，丢进IDA pro进行静态分析</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__m128i</span> v5; <span style="color:#75715e">// [esp+0h] [ebp-44h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v6[<span style="color:#ae81ff">8</span>]; <span style="color:#75715e">// [esp+10h] [ebp-34h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// [esp+18h] [ebp-2Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int16</span> v8; <span style="color:#75715e">// [esp+1Ch] [ebp-28h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v9[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [esp+20h] [ebp-24h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">_mm_loadu_si128</span>((<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">__m128i</span> <span style="color:#f92672">*</span>)<span style="color:#e6db74">&#34;DUTCTF{We1c0met0DUTCTF}&#34;</span>);
</span></span><span style="display:flex;"><span>  v7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcpy</span>(v6, <span style="color:#e6db74">&#34;DUTCTF}&#34;</span>);
</span></span><span style="display:flex;"><span>  v8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;欢迎来到DUTCTF呦</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;这是一道很可爱很简单的逆向题呦</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;输入flag吧:&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, v9);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strcmp</span>(v5.m128i_i8, v9);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v3 )
</span></span><span style="display:flex;"><span>    v3 <span style="color:#f92672">=</span> v3 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">?</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v3 )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(aFlag_0);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(aFlagGet);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;pause&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>首先，我们需要知道具体的逻辑判断形式，逻辑判断是以什么形式进行判断的，找到逻辑判断语句</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v3 )
</span></span><span style="display:flex;"><span>    v3 <span style="color:#f92672">=</span> v3 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">?</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( v3 )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(aFlag_0);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(aFlagGet);
</span></span></code></pre></div><p><code>v3</code> 数值不为0的情况下会先执行第一个 <code>if</code> 语句，将不正确的v3值进行转换</p>
<p>然后再进行一个<code>if - else </code> 的逻辑语句，判断<code>v3</code>的数值，如果<code>v3</code>的数值是等于<code>0</code>的，那么我们输入的flag就是正确的</p>
<p>那么，<code>v3</code> 是什么东西？</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strcmp</span>(v5.m128i_i8, v9);
</span></span></code></pre></div><p>是一个比较数值，如果 <code>v5.m128i_i8</code> 与 <code>v9</code> 相等，那么<code>v3</code> 的数值就等于0了，逻辑现在搞通了，下面跟进数据：</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902155119211.png" alt="image-20210902155119211"></p>
<p>这段数据应该就是 <code>v5 </code>的数据了，将数据转换成字符串</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902155219566.png" alt="image-20210902155219566"></p>
<p>成功得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>DUTCTF{We1c0met0DUTCTF}
</span></span></code></pre></div><h2 id="0x3-game">0x3 game</h2>
<p>应该是个游戏，感觉还是挺有意思的</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902160124008.png" alt="image-20210902160124008"></p>
<p>果然是一个游戏，还蛮有意思的，不过，还是要走下流程查一下信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210902160325396.png" alt="image-20210902160325396"></p>
<p>32位程序，没有壳，先丢进IDA pro康一康</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main_0</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+DCh] [ebp-20h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v5; <span style="color:#75715e">// [esp+F4h] [ebp-8h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#f92672">&amp;</span>unk_50B110);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#f92672">&amp;</span>unk_50B158);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#f92672">&amp;</span>unk_50B1A0);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#f92672">&amp;</span>unk_50B1E8);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#f92672">&amp;</span>unk_50B230);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#f92672">&amp;</span>unk_50B278);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#f92672">&amp;</span>unk_50B2C0);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#f92672">&amp;</span>unk_50B308);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#e6db74">&#34;二                                                     |</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#e6db74">&#34;|              by 0x61                                 |</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#e6db74">&#34;|                                                      |</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#e6db74">&#34;|------------------------------------------------------|</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;Play a game</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;The n is the serial number of the lamp,and m is the state of the lamp</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;If m of the Nth lamp is 1,it&#39;s on ,if not it&#39;s off</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;At first all the lights were closed</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#e6db74">&#34;Now you can input n to change its state</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;But you should pay attention to one thing,if you change the state of the Nth lamp,the state of (N-1)th and (N+1)th w&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;ill be changed too</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#e6db74">&#34;When all lamps are on,flag will appear</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#e6db74">&#34;Now,input n </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#e6db74">&#34;input n,n(1-8)</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_459418</span>();
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#e6db74">&#34;n=&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_4596D4</span>(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v5);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( v5 <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&amp;&amp;</span> v5 <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">8</span> )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_45A7BE</span>(<span style="color:#e6db74">&#34;sorry,n error,try again</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v5 )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_4576D6</span>(v5 <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">8</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)i <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">9</span> )
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">sub_458919</span>();
</span></span><span style="display:flex;"><span>        byte_532E28[i] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_4581B7</span>(<span style="color:#e6db74">&#34;CLS&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_458054</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( byte_532E28[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_457AB4</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>寻找到核心代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( byte_532E28[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&amp;&amp;</span> byte_532E28[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_457AB4</span>();
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>可以知道，可以确定是 <code>sub_457AB4();</code> 函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sub_45E940</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> v1; <span style="color:#75715e">// [esp+0h] [ebp-164h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+D0h] [ebp-94h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v3[<span style="color:#ae81ff">22</span>]; <span style="color:#75715e">// [esp+DCh] [ebp-88h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v4[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [esp+F2h] [ebp-72h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5[<span style="color:#ae81ff">4</span>]; <span style="color:#75715e">// [esp+112h] [ebp-52h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v6[<span style="color:#ae81ff">64</span>]; <span style="color:#75715e">// [esp+120h] [ebp-44h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_45A7BE</span>((<span style="color:#66d9ef">int</span>)<span style="color:#e6db74">&#34;done!!! the flag is &#34;</span>, v1);
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">64</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">98</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">48</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">49</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">65</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">12</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">48</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">65</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">31</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">78</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">62</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">49</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">22</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">23</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">57</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">24</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">96</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">25</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">26</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">21</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">27</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">9</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">28</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">29</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">62</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">30</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">31</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">32</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">33</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">34</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">35</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">36</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">44</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">37</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">65</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">38</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">78</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">39</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">40</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">41</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">97</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">42</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">54</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">43</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">44</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">44</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">45</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">52</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">46</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">47</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">64</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">48</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">89</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">49</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">45</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">50</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">51</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">65</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">52</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">15</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">53</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">34</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">54</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">55</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>;
</span></span><span style="display:flex;"><span>  v6[<span style="color:#ae81ff">56</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">123</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">98</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">119</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">108</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">65</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">41</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">124</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">80</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">125</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">38</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">124</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">111</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">74</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">49</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">83</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">108</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">94</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">108</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">84</span>;
</span></span><span style="display:flex;"><span>  v3[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">qmemcpy</span>(v4, <span style="color:#e6db74">&#34;`S,yhn _uec{&#34;</span>, <span style="color:#ae81ff">12</span>);
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">127</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">119</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">96</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">48</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">16</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">107</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">17</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">71</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">18</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">92</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">19</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">29</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">20</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">81</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">21</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">107</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">22</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">23</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">85</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">24</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">64</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">25</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">12</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">26</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">43</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">27</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">76</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">28</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">86</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">29</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">13</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">30</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">114</span>;
</span></span><span style="display:flex;"><span>  v4[<span style="color:#ae81ff">31</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcpy</span>(v5, <span style="color:#e6db74">&#34;u~&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">56</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v3[i] <span style="color:#f92672">^=</span> v6[i];
</span></span><span style="display:flex;"><span>    v3[i] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">0x13u</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">sub_45A7BE</span>((<span style="color:#66d9ef">int</span>)<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, (<span style="color:#66d9ef">char</span>)v3);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>基本上可以确定在这里输出flag，基本逻辑应该可以清晰的知道</p>
<p>下面使用Ollydbg进行动态调试，调试出来flag</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909174908510.png" alt="image-20210909174908510"></p>
<p>先使用F8进行单步调试，确定关键函数位置</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909195648745.png" alt="image-20210909195648745"></p>
<p>F7进入函数的具体执行过程，进行字符串检索</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909195755383.png" alt="image-20210909195755383"></p>
<p>找到输入的关键位置，然后移动到关键位置</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909195839072.png" alt="image-20210909195839072"></p>
<p>根据已知的逻辑循环，修改逻辑循环</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909200656065.png" alt="image-20210909200656065"></p>
<p>修改这个关键性的跳转代码进行跳转修改，将跳转修改为call那个位置</p>
<p>修改为：</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">jnz short 00D2F66C
</code></pre><p>然后运行修改过汇编的程序</p>
<p>尝试输入几个参数就能获取到flag了</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909201014405.png" alt="image-20210909201014405"></p>
<p>得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>zsctf{T9is_tOpic_1s_v5ry_int7resting_b6t_others_are_n0t}
</span></span></code></pre></div><h2 id="0x4-hello-ctf">0x4 Hello, CTF</h2>
<p>首先查一下程序信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210909201418156.png" alt="image-20210909201418156"></p>
<p>32位没有壳的程序</p>
<p>使用IDA pro的看一下程序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// ebx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v4; <span style="color:#75715e">// al
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> result; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// [esp+0h] [ebp-70h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v7; <span style="color:#75715e">// [esp+0h] [ebp-70h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Buffer[<span style="color:#ae81ff">2</span>]; <span style="color:#75715e">// [esp+12h] [ebp-5Eh] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v9[<span style="color:#ae81ff">20</span>]; <span style="color:#75715e">// [esp+14h] [ebp-5Ch] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v10[<span style="color:#ae81ff">32</span>]; <span style="color:#75715e">// [esp+28h] [ebp-48h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int16</span> v11; <span style="color:#75715e">// [esp+48h] [ebp-28h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v12; <span style="color:#75715e">// [esp+4Ah] [ebp-26h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v13[<span style="color:#ae81ff">36</span>]; <span style="color:#75715e">// [esp+4Ch] [ebp-24h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcpy</span>(v13, <span style="color:#e6db74">&#34;437261636b4d654a757374466f7246756e&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(v10, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(v10));
</span></span><span style="display:flex;"><span>    v11 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    v12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_40134B</span>(aPleaseInputYou, v6);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, v9);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(v9) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0x11</span> )
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">17</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      v4 <span style="color:#f92672">=</span> v9[i];
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>v4 )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sprintf</span>(Buffer, <span style="color:#e6db74">&#34;%x&#34;</span>, v4);
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">strcat</span>(v10, Buffer);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">strcmp</span>(v10, v13) )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_40134B</span>(aSuccess, v7);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_40134B</span>(aWrong, v7);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_40134B</span>(aWrong, v7);
</span></span><span style="display:flex;"><span>  result <span style="color:#f92672">=</span> <span style="color:#f92672">--</span>Stream._cnt;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( Stream._cnt <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">_filbuf</span>(<span style="color:#f92672">&amp;</span>Stream);
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">++</span>Stream._ptr;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>代码非常清晰，应该可以明确v13的值和flag应该是一致的</p>
<p>v13应该是Hex编码的字符串，进行解码就得到flag了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>CrackMeJustForFun
</span></span></code></pre></div><h2 id="0x5-open-source">0x5 open-source</h2>
<p>下载附件，源代码审计，看看源代码内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>argv[]) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (argc <span style="color:#f92672">!=</span> <span style="color:#ae81ff">4</span>) {
</span></span><span style="display:flex;"><span>    	<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;what?</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    	<span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> first <span style="color:#f92672">=</span> <span style="color:#a6e22e">atoi</span>(argv[<span style="color:#ae81ff">1</span>]);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (first <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xcafe</span>) {
</span></span><span style="display:flex;"><span>    	<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;you are wrong, sorry.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    	<span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> second <span style="color:#f92672">=</span> <span style="color:#a6e22e">atoi</span>(argv[<span style="color:#ae81ff">2</span>]);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (second <span style="color:#f92672">%</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">||</span> second <span style="color:#f92672">%</span> <span style="color:#ae81ff">17</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">8</span>) {
</span></span><span style="display:flex;"><span>    	<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;ha, you won&#39;t get it!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    	<span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">strcmp</span>(<span style="color:#e6db74">&#34;h4cky0u&#34;</span>, argv[<span style="color:#ae81ff">3</span>])) {
</span></span><span style="display:flex;"><span>    	<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;so close, dude!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    	<span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Brr wrrr grr</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> hash <span style="color:#f92672">=</span> first <span style="color:#f92672">*</span> <span style="color:#ae81ff">31337</span> <span style="color:#f92672">+</span> (second <span style="color:#f92672">%</span> <span style="color:#ae81ff">17</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">strlen</span>(argv[<span style="color:#ae81ff">3</span>]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1615810207</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Get your key: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%x</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, hash);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>根据源码进行求解，其实也就是解个方程</p>
<p>可以写个C程序直接求解</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> first <span style="color:#f92672">=</span>  <span style="color:#ae81ff">0xcafe</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> second <span style="color:#f92672">=</span> <span style="color:#ae81ff">25</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> Third <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;h4cky0u&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> hash <span style="color:#f92672">=</span> first <span style="color:#f92672">*</span> <span style="color:#ae81ff">31337</span> <span style="color:#f92672">+</span> (second <span style="color:#f92672">%</span> <span style="color:#ae81ff">17</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">11</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">strlen</span>(Third) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1615810207</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Get your key: &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%x</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, hash);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行程序就能得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Get your key: c0ffee
</span></span></code></pre></div><h2 id="0x6-simple-unpack">0x6 simple-unpack</h2>
<p>看题目，应该是一个有壳的程序</p>
<p>就正常走一下流程首先先要看看程序的信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910132745520.png" alt="image-20210910132745520"></p>
<p>加壳的64位的程序，首先使用upx脱一下壳，然后使用x64 IDA pro查看</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910133500403.png" alt="image-20210910133500403"></p>
<p>直接就能看到flag信息数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{Upx_1s_n0t_a_d3liv3r_c0mp4ny}
</span></span></code></pre></div><h2 id="0x7-logmein">0x7 logmein</h2>
<p>查一下程序信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910133947331.png" alt="image-20210910133947331"></p>
<p>没有壳，64位的Linux程序</p>
<p>直接进行x64 ida pro静态调试</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#66d9ef">__fastcall</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> a1, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a2, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a3)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">size_t</span> v3; <span style="color:#75715e">// rsi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+3Ch] [rbp-54h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">36</span>]; <span style="color:#75715e">// [rsp+40h] [rbp-50h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v6; <span style="color:#75715e">// [rsp+64h] [rbp-2Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v7; <span style="color:#75715e">// [rsp+68h] [rbp-28h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v8[<span style="color:#ae81ff">28</span>]; <span style="color:#75715e">// [rsp+70h] [rbp-20h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// [rsp+8Ch] [rbp-4h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcpy</span>(v8, <span style="color:#e6db74">&#34;:</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">AL_RT^L*.?+6/46&#34;</span>);
</span></span><span style="display:flex;"><span>  v7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x65626D61726168LL</span>;
</span></span><span style="display:flex;"><span>  v6 <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Welcome to the RC3 secure password guesser.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;To continue, you must enter the correct password.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Enter your guess: &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__isoc99_scanf</span>(<span style="color:#e6db74">&#34;%32s&#34;</span>, s);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(s);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v3 <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">strlen</span>(v8) )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_4007C0</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">strlen</span>(s); <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( i <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">strlen</span>(v8) )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_4007C0</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( s[i] <span style="color:#f92672">!=</span> (<span style="color:#66d9ef">char</span>)(<span style="color:#f92672">*</span>((_BYTE <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>v7 <span style="color:#f92672">+</span> i <span style="color:#f92672">%</span> v6) <span style="color:#f92672">^</span> v8[i]) )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">sub_4007C0</span>();
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_4007F0</span>();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>应该是对算法进行逆向来得到相应的flag</p>
<p>关键的数据是v7和v8，针对这两个数据写个C程序进行逆向算法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> v8[<span style="color:#ae81ff">28</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">strcpy</span>(v8, <span style="color:#e6db74">&#34;:</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">AL_RT^L*.?+6/46&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v7 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;harambe&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> v6 <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> s[<span style="color:#a6e22e">strlen</span>(v8)];
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">strlen</span>(v8); <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>                s[i] <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(v7<span style="color:#f92672">+</span>i <span style="color:#f92672">%</span> v6) <span style="color:#f92672">^</span> v8[i];
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,s);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>RC3-2016-XORISGUD
</span></span></code></pre></div><h2 id="0x8-no-string-attached">0x8 no-string-attached</h2>
<p>查一下文件的信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910153107869.png" alt="image-20210910153107869"></p>
<p>32位文件，没有壳，丢进到IDA pro查看</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">setlocale</span>(<span style="color:#ae81ff">6</span>, <span style="color:#f92672">&amp;</span>locale);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">banner</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">prompt_authentication</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">authenticate</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>进行分析，确定flag应该是在 <code>authenticate()</code>函数中</p>
<p>跟进到 <code>authenticate()</code>函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">authenticate</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">wchar_t</span> ws[<span style="color:#ae81ff">8192</span>]; <span style="color:#75715e">// [esp+1Ch] [ebp-800Ch] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">wchar_t</span> <span style="color:#f92672">*</span>s2; <span style="color:#75715e">// [esp+801Ch] [ebp-Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  s2 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">wchar_t</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">decrypt</span>((<span style="color:#66d9ef">wchar_t</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>s, (<span style="color:#66d9ef">wchar_t</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>dword_8048A90);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">fgetws</span>(ws, <span style="color:#ae81ff">0x2000</span>, stdin) )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    ws[<span style="color:#a6e22e">wcslen</span>(ws) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">wcscmp</span>(ws, s2) )
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">wprintf</span>(<span style="color:#f92672">&amp;</span>unk_8048B44);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">wprintf</span>(<span style="color:#f92672">&amp;</span>unk_8048BA4);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">free</span>(s2);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>关键数据应该是在s2中，调用了decrypt函数，看一下这个函数的汇编代码</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">ws= dword ptr -800Ch
s2= dword ptr -0Ch

; __unwind {
push    ebp
mov     ebp, esp
sub     esp, 8028h
mov     dword ptr [esp+4], offset dword_8048A90 ; wchar_t *
mov     dword ptr [esp], offset s ; s
call    decrypt
mov     [ebp+s2], eax
mov     eax, ds:stdin@@GLIBC_2_0
mov     [esp+8], eax    ; stream
mov     dword ptr [esp+4], 2000h ; n
lea     eax, [ebp+ws]
mov     [esp], eax      ; ws
call    _fgetws
test    eax, eax
jz      short loc_804879C
</code></pre><p>根据汇编代码，应该可以清晰的知道，flag数据应该是存储在eax寄存器中了</p>
<p>使用gdb动态调试程序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>gdb Re_demo
</span></span></code></pre></div><p>然后设置断点，根据刚刚了解到的信息，flag的数据应该是在decrypt函数中，设置断点</p>
<pre tabindex="0"><code class="language-gdb" data-lang="gdb">b decrypt
</code></pre><p>然后运行程序到断点</p>
<pre tabindex="0"><code class="language-gdb" data-lang="gdb">r
</code></pre><p>然后单步执行</p>
<pre tabindex="0"><code class="language-gdb" data-lang="gdb">n
</code></pre><p>查看寄存器</p>
<pre tabindex="0"><code class="language-gdb" data-lang="gdb">i r
</code></pre><p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910155818798.png" alt="image-20210910155818798"></p>
<p>然后查看eax寄存器存储的数据</p>
<pre tabindex="0"><code class="language-gdb" data-lang="gdb">x/sw $eax
</code></pre><p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910155914675.png" alt="image-20210910155914675"></p>
<p>成功拿到flag数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>9447{you_are_an_international_mystery}
</span></span></code></pre></div><h2 id="0x9-getit">0x9 getit</h2>
<p>基本流程，查看程序信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210910160228522.png" alt="image-20210910160228522"></p>
<p>64位无壳的ELF可执行程序</p>
<p>先丢进x64 IDA pro看一看</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> v3; <span style="color:#75715e">// al
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+0h] [rbp-40h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> j; <span style="color:#75715e">// [rsp+4h] [rbp-3Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  FILE <span style="color:#f92672">*</span>stream; <span style="color:#75715e">// [rsp+8h] [rbp-38h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> filename[<span style="color:#ae81ff">24</span>]; <span style="color:#75715e">// [rsp+10h] [rbp-30h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int64</span> v9; <span style="color:#75715e">// [rsp+28h] [rbp-18h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v9 <span style="color:#f92672">=</span> <span style="color:#a6e22e">__readfsqword</span>(<span style="color:#ae81ff">0x28u</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">strlen</span>(s); <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( (i <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> )
</span></span><span style="display:flex;"><span>      v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>      v3 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>t <span style="color:#f92672">+</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">10</span>) <span style="color:#f92672">=</span> s[i] <span style="color:#f92672">+</span> v3;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">strcpy</span>(filename, <span style="color:#e6db74">&#34;/tmp/flag.txt&#34;</span>);
</span></span><span style="display:flex;"><span>  stream <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>(filename, <span style="color:#e6db74">&#34;w&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fprintf</span>(stream, <span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, u);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">strlen</span>(<span style="color:#f92672">&amp;</span>t); <span style="color:#f92672">++</span>j )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fseek</span>(stream, p[j], <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fputc</span>(<span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>t <span style="color:#f92672">+</span> p[j]), stream);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fseek</span>(stream, <span style="color:#ae81ff">0LL</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fprintf</span>(stream, <span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, u);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fclose</span>(stream);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">remove</span>(filename);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>应该是一个文件写入的程序，打开一个文件并进行写入</p>
<p>对程序进行分析应该可以看出三个部分</p>
<ol>
<li>初始化变量</li>
<li>生成flag数据</li>
<li>写入flag数据</li>
</ol>
<p>查看一下静态数据：</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210911072552068.png" alt="image-20210911072552068"></p>
<p>根据静态数据和对代码分析的结果，写一个flag生成器：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> t[] <span style="color:#f92672">=</span><span style="color:#e6db74">&#34; harifCTF{????????????????????????????????}&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">char</span> s[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;c61b68366edeb7bdce3c6820314b7498&#34;</span>;
</span></span><span style="display:flex;"><span>        t[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x53</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> i, v3;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">strlen</span>(s); <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> ( (i <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span> )
</span></span><span style="display:flex;"><span>                        v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>                        v3 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">*</span>(t<span style="color:#f92672">+</span>i<span style="color:#f92672">+</span><span style="color:#ae81ff">10</span>) <span style="color:#f92672">=</span> s[i]<span style="color:#f92672">+</span>v3;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,t);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并运行flag生成器就可以生成flag啦！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>SharifCTF{b70c59275fcfa8aebf2d5911223c6589}
</span></span></code></pre></div><h2 id="0xa-csaw2013reversing2">0xA csaw2013reversing2</h2>
<p>杀软会报毒的程序，首先查一下壳</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210911082611406.png" alt="image-20210911082611406"></p>
<p>32位无壳程序，使用IDA pro查看详细信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> __noreturn <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// ecx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  CHAR <span style="color:#f92672">*</span>lpMem; <span style="color:#75715e">// [esp+8h] [ebp-Ch]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  HANDLE hHeap; <span style="color:#75715e">// [esp+10h] [ebp-4h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  hHeap <span style="color:#f92672">=</span> <span style="color:#a6e22e">HeapCreate</span>(<span style="color:#ae81ff">0x40000u</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  lpMem <span style="color:#f92672">=</span> (CHAR <span style="color:#f92672">*</span>)<span style="color:#a6e22e">HeapAlloc</span>(hHeap, <span style="color:#ae81ff">8u</span>, SourceSize <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memcpy_s</span>(lpMem, SourceSize, <span style="color:#f92672">&amp;</span>unk_409B10, SourceSize);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">sub_40102A</span>() <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">IsDebuggerPresent</span>() )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">MessageBoxA</span>(<span style="color:#ae81ff">0</span>, lpMem <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>, <span style="color:#e6db74">&#34;Flag&#34;</span>, <span style="color:#ae81ff">2u</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">HeapFree</span>(hHeap, <span style="color:#ae81ff">0</span>, lpMem);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">HeapDestroy</span>(hHeap);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">ExitProcess</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__debugbreak</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_401000</span>(v3 <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>, lpMem);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">ExitProcess</span>(<span style="color:#ae81ff">0xFFFFFFFF</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>都是WIN32api的调用，尝试运行一下程序：</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210911084558336.png" alt="image-20210911084558336"></p>
<p>应该是有些关键的语句没有执行</p>
<p>可以查看下IDA pro的汇编语句</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210913082559422.png" alt="image-20210913082559422"></p>
<p>显然是有一个Flag没有进行相应的跳转，显然有着较大的嫌疑，可以尝试去搞一搞让其跳转</p>
<p>使用OD进行调试修改汇编让其进行跳转，首先定位到Flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>000D1092   .  85C0          test    eax, eax
</span></span><span style="display:flex;"><span>000D1094      74 23         je      short 000D10B9
</span></span><span style="display:flex;"><span>000D1096   &gt;  41            inc     ecx
</span></span><span style="display:flex;"><span>000D1097   .  41            inc     ecx
</span></span><span style="display:flex;"><span>000D1098   .  41            inc     ecx
</span></span><span style="display:flex;"><span>000D1099   .  41            inc     ecx
</span></span><span style="display:flex;"><span>000D109A      CC            int3
</span></span><span style="display:flex;"><span>000D109B   .  8B55 F4       mov     edx, dword ptr [ebp-C]
</span></span><span style="display:flex;"><span>000D109E   .  E8 5DFFFFFF   call    000D1000
</span></span><span style="display:flex;"><span>000D10A3      EB 4A         jmp     short 000D10EF
</span></span><span style="display:flex;"><span>000D10A5   .  6A 02         push    2                                ; /Style = MB_ABORTRETRYIGNORE|MB_APPLMODAL
</span></span><span style="display:flex;"><span>000D10A7   .  68 20780D00   push    000D7820                         ; |Title = &#34;Flag&#34;
</span></span><span style="display:flex;"><span>000D10AC   .  FF75 F4       push    dword ptr [ebp-C]                ; |Text
</span></span><span style="display:flex;"><span>000D10AF   .  6A 00         push    0                                ; |hOwner = NULL
</span></span><span style="display:flex;"><span>000D10B1   .  FF15 E4600D00 call    dword ptr [&lt;&amp;USER32.MessageBoxA&gt;&gt;; \MessageBoxA
</span></span><span style="display:flex;"><span>000D10B7   .  EB 14         jmp     short 000D10CD
</span></span><span style="display:flex;"><span>000D10B9   &gt;  6A 02         push    2                                ; /Style = MB_ABORTRETRYIGNORE|MB_APPLMODAL
</span></span><span style="display:flex;"><span>000D10BB   .  68 20780D00   push    000D7820                         ; |Title = &#34;Flag&#34;
</span></span><span style="display:flex;"><span>000D10C0   .  8B45 F4       mov     eax, dword ptr [ebp-C]           ; |
</span></span><span style="display:flex;"><span>000D10C3   .  40            inc     eax                              ; |
</span></span><span style="display:flex;"><span>000D10C4   .  50            push    eax                              ; |Text
</span></span><span style="display:flex;"><span>000D10C5   .  6A 00         push    0                                ; |hOwner = NULL
</span></span><span style="display:flex;"><span>000D10C7   .  FF15 E4600D00 call    dword ptr [&lt;&amp;USER32.MessageBoxA&gt;&gt;; \MessageBoxA
</span></span></code></pre></div><p>然后定位到if语句对应的汇编语句</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>000D1083   .  E8 A2FFFFFF   call    000D102A
</span></span><span style="display:flex;"><span>000D1088   .  85C0          test    eax, eax
</span></span><span style="display:flex;"><span>000D108A   .  75 0A         jnz     short 000D1096
</span></span><span style="display:flex;"><span>000D108C   .  FF15 14600D00 call    dword ptr [&lt;&amp;KERNEL32.IsDebugger&gt;; [IsDebuggerPresent
</span></span><span style="display:flex;"><span>000D1092   .  85C0          test    eax, eax
</span></span><span style="display:flex;"><span>000D1094      74 23         je      short 000D10B9
</span></span><span style="display:flex;"><span>000D1096   &gt;  41            inc     ecx
</span></span><span style="display:flex;"><span>000D1097   .  41            inc     ecx
</span></span><span style="display:flex;"><span>000D1098   .  41            inc     ecx
</span></span><span style="display:flex;"><span>000D1099   .  41            inc     ecx
</span></span><span style="display:flex;"><span>000D109A      CC            int3
</span></span><span style="display:flex;"><span>000D109B   .  8B55 F4       mov     edx, dword ptr [ebp-C]
</span></span><span style="display:flex;"><span>000D109E   .  E8 5DFFFFFF   call    000D1000
</span></span><span style="display:flex;"><span>000D10A3      EB 4A         jmp     short 000D10EF
</span></span></code></pre></div><p>关键就是对这些汇编语句进行修改来获得flag数据，运行过程中有一个int3断点应该是让程序进行终止的，然后就是je跳转语句和jmp跳转语句了。对je跳转语句进行修改和jmp跳转语句进行修改，设置断点进行调试应该就可以获得flag</p>
<p>修改过的汇编语句</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>000D1083   .  E8 A2FFFFFF   call    000D102A
</span></span><span style="display:flex;"><span>000D1088   .  85C0          test    eax, eax
</span></span><span style="display:flex;"><span>000D108A   .  75 0A         jnz     short 000D1096
</span></span><span style="display:flex;"><span>000D108C   .  FF15 14600D00 call    dword ptr [&lt;&amp;KERNEL32.IsDebugger&gt;; [IsDebuggerPresent
</span></span><span style="display:flex;"><span>000D1092   .  85C0          test    eax, eax
</span></span><span style="display:flex;"><span>000D1094      90            nop
</span></span><span style="display:flex;"><span>000D1095      90            nop
</span></span><span style="display:flex;"><span>000D1096   &gt;  41            inc     ecx
</span></span><span style="display:flex;"><span>000D1097   .  41            inc     ecx
</span></span><span style="display:flex;"><span>000D1098   .  41            inc     ecx
</span></span><span style="display:flex;"><span>000D1099   .  41            inc     ecx
</span></span><span style="display:flex;"><span>000D109A      90            nop
</span></span><span style="display:flex;"><span>000D109B   .  8B55 F4       mov     edx, dword ptr [ebp-C]
</span></span><span style="display:flex;"><span>000D109E   .  E8 5DFFFFFF   call    000D1000
</span></span><span style="display:flex;"><span>000D10A3      EB 14         jmp     short 000D10B9
</span></span></code></pre></div><p>然后设置断点进行调试，来获得flag</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210913085300812.png" alt="image-20210913085300812"></p>
<p>成功得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{reversing_is_not_that_hard!}
</span></span></code></pre></div><h2 id="0xb-maze">0xB maze</h2>
<p>走迷宫的题目，逆向题目中多少有些趣味的题目，来一起走迷宫吧</p>
<p>首先查看一下程序信息</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210913085802357.png" alt="image-20210913085802357"></p>
<p>64位的程序，使用x64 IDA pro查看一下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">__int64</span> <span style="color:#66d9ef">__fastcall</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> a1, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a2, <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>a3)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">__int64</span> v3; <span style="color:#75715e">// rbx
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v4; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v5; <span style="color:#75715e">// bp
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> v6; <span style="color:#75715e">// al
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>v7; <span style="color:#75715e">// rdi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v9; <span style="color:#75715e">// [rsp+0h] [rbp-28h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v10[<span style="color:#ae81ff">9</span>]; <span style="color:#75715e">// [rsp+4h] [rbp-24h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  v10[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  v9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Input flag:&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#f92672">&amp;</span>s1);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(<span style="color:#f92672">&amp;</span>s1) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">strncmp</span>(<span style="color:#f92672">&amp;</span>s1, <span style="color:#e6db74">&#34;nctf{&#34;</span>, <span style="color:#ae81ff">5uLL</span>) <span style="color:#f92672">||</span> <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>byte_6010BF <span style="color:#f92672">+</span> <span style="color:#ae81ff">24</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">125</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>LABEL_22:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Wrong flag!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">5LL</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(<span style="color:#f92672">&amp;</span>s1) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      v4 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>s1 <span style="color:#f92672">+</span> v3);
</span></span><span style="display:flex;"><span>      v5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( v4 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">78</span> )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">79</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          v6 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400650</span>(v10);
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">goto</span> LABEL_14;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">111</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          v6 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400660</span>(v10);
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">goto</span> LABEL_14;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">46</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          v6 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400670</span>(<span style="color:#f92672">&amp;</span>v9);
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">goto</span> LABEL_14;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#ae81ff">48</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          v6 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400680</span>(<span style="color:#f92672">&amp;</span>v9);
</span></span><span style="display:flex;"><span>LABEL_14:
</span></span><span style="display:flex;"><span>          v5 <span style="color:#f92672">=</span> v6;
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">goto</span> LABEL_15;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>LABEL_15:
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)<span style="color:#a6e22e">sub_400690</span>(asc_601060, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>)v10[<span style="color:#ae81ff">0</span>], v9) )
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_22;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">++</span>v3 <span style="color:#f92672">&gt;=</span> <span style="color:#a6e22e">strlen</span>(<span style="color:#f92672">&amp;</span>s1) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( v5 )
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>LABEL_20:
</span></span><span style="display:flex;"><span>        v7 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Wrong flag!&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> LABEL_21;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( asc_601060[<span style="color:#ae81ff">8</span> <span style="color:#f92672">*</span> v9 <span style="color:#f92672">+</span> v10[<span style="color:#ae81ff">0</span>]] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">35</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">goto</span> LABEL_20;
</span></span><span style="display:flex;"><span>  v7 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Congratulations!&#34;</span>;
</span></span><span style="display:flex;"><span>LABEL_21:
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(v7);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0LL</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>函数的主要逻辑应该是根据输入的值来进行走迷宫的，走出迷宫即得到flag。程序中肯定存在的有迷宫的地图作为静态数据存储。所以可以尝试查看静态数据：</p>
<p><img src="/images/XCTF-REVERSE-novice_writeup/image-20210913091057871.png" alt="image-20210913091057871"></p>
<p>果然有一个类似迷宫的数据，查看迷宫数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>  *******   *  **** * ****  * ***  *#  *** *** ***     *********
</span></span></code></pre></div><p>需要对代码进行分析来进一步得到迷宫的大致样子</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(<span style="color:#f92672">&amp;</span>s1) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">24</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">strncmp</span>(<span style="color:#f92672">&amp;</span>s1, <span style="color:#e6db74">&#34;nctf{&#34;</span>, <span style="color:#ae81ff">5uLL</span>) <span style="color:#f92672">||</span> <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>byte_6010BF <span style="color:#f92672">+</span> <span style="color:#ae81ff">24</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">125</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>LABEL_22:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Wrong flag!&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>根据这段代码可以判断出走出迷宫需要18个操作数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">while</span> ( <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      v4 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>s1 <span style="color:#f92672">+</span> v3);
</span></span><span style="display:flex;"><span>      v5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ( v4 <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">78</span> )
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;O&#39;</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          v6 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400650</span>(v10);
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">goto</span> LABEL_14;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;o&#39;</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          v6 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400660</span>(v10);
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">goto</span> LABEL_14;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>      {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.&#39;</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          v6 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400670</span>(<span style="color:#f92672">&amp;</span>v9);
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">goto</span> LABEL_14;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> ( (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span>)v4 <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;0&#39;</span> )
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>          v6 <span style="color:#f92672">=</span> <span style="color:#a6e22e">sub_400680</span>(<span style="color:#f92672">&amp;</span>v9);
</span></span></code></pre></div><p>这些是对迷宫操作的判断，根据这些判断可以确定我们如何进行迷宫的操作</p>
<p>首先根据反汇编的代码进行分析，可以发现有两个关键数据有着比较重要的作用就是<code>v10</code>就<code>v9</code>的数据，根据跟进分析，发现<code>v10</code> 是进行横向操作，发现<code>v9</code> 是纵向操作。然后根据函数内部的加或减来确定 上下左右 的方向。</p>
<p>对代码进行进一步分析应该就知道对应操作：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>&#39;O&#39;  ←
</span></span><span style="display:flex;"><span>&#39;o&#39;  →
</span></span><span style="display:flex;"><span>&#39;.&#39;  ↑
</span></span><span style="display:flex;"><span>&#39;0&#39;  ↓
</span></span></code></pre></div><p>根据代码的分析，迷宫应该是8x8的迷宫，可以排列出迷宫的样子</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>00******
</span></span><span style="display:flex;"><span>*000*00*
</span></span><span style="display:flex;"><span>***0*0**
</span></span><span style="display:flex;"><span>**00*0**
</span></span><span style="display:flex;"><span>*00*#00*
</span></span><span style="display:flex;"><span>**0***0*
</span></span><span style="display:flex;"><span>**00000*
</span></span><span style="display:flex;"><span>********
</span></span></code></pre></div><p>根据目前的分析的结果就可以开心地走迷宫了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>o0oo00O000oooo..OO
</span></span></code></pre></div><p>迷宫路线即为flag，因此本题的flag为：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>nctf{o0oo00O000oooo..OO}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>BUUCTF REVERSE [1~8]_writeup</title>
            <link>/posts/buuctf-reverse-1_writeup/</link>
            <pubDate>Thu, 14 Oct 2021 13:03:43 +0800</pubDate>
            
            <guid>/posts/buuctf-reverse-1_writeup/</guid>
            <description>BUUCTF-REVERSE-1 writeup 逆向工程让密码学更加灵动，让密码学不再抽象。初步试水逆向工程题目，嘤嘤嘤！
0x0 easyre 非常简单的逆向题目，这道题目解决方法很多，基本思路就使用静态调试工具进行反汇编，然后检索字符串得到flag。这里使用一个开源的工具Cutter来逆向玩玩。
直接点击下面的Strings
使用过滤器，快速检索flag就能得到flag
得到flag
flag{this_Is_a_EaSyRe} 0x1 reverse1 先丢进IDA pro里面看看，会有什么神奇的反应和效果！
然后我们需要定位到主函数，定位到主函数的方法有很多，目前，我大致有两种，首先是检索字符串，其次就 是检索函数来快速定位主函数。
通过检索字符串来定位主函数，直接检索flag
然后通过检索结果定位到主函数
使用F5看到反编译的代码
代码非常清晰，找到关键的代码
for ( j = 0; ; ++j ) { v8 = j; v2 = j_strlen(Str2); if ( v8 &amp;gt; v2 ) break; if ( Str2[j] == 111 ) Str2[j] = 48; } sub_1400111D1(&amp;#34;input the flag:&amp;#34;); sub_14001128F(&amp;#34;%20s&amp;#34;, Str1); v3 = j_strlen(Str2); if ( !strncmp(Str1, Str2, v3) ) sub_1400111D1(&amp;#34;this is the right flag!</description>
            <content type="html"><![CDATA[<h1 id="buuctf-reverse-1-writeup">BUUCTF-REVERSE-1 writeup</h1>
<p>逆向工程让密码学更加灵动，让密码学不再抽象。初步试水逆向工程题目，嘤嘤嘤！</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210806103313499.png" alt="image-20210806103313499"></p>
<h2 id="0x0-easyre">0x0 easyre</h2>
<p>非常简单的逆向题目，这道题目解决方法很多，基本思路就使用静态调试工具进行反汇编，然后检索字符串得到flag。这里使用一个开源的工具Cutter来逆向玩玩。</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210806113422474.png" alt="image-20210806113422474"></p>
<p>直接点击下面的Strings</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210806114025621.png" alt="image-20210806114025621"></p>
<p>使用过滤器，快速检索flag就能得到flag</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210806114828778.png" alt="image-20210806114828778"></p>
<p>得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{this_Is_a_EaSyRe}
</span></span></code></pre></div><h2 id="0x1-reverse1">0x1 reverse1</h2>
<p>先丢进IDA pro里面看看，会有什么神奇的反应和效果！</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210806192321775.png" alt="image-20210806192321775"></p>
<p>然后我们需要定位到主函数，定位到主函数的方法有很多，目前，我大致有两种，首先是检索字符串，其次就 是检索函数来快速定位主函数。</p>
<p>通过检索字符串来定位主函数，直接检索flag</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210806195615915.png" alt="image-20210806195615915"></p>
<p>然后通过检索结果定位到主函数</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210806195708832.png" alt="image-20210806195708832"></p>
<p>使用F5看到反编译的代码</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210806200411241.png" alt="image-20210806200411241"></p>
<p>代码非常清晰，找到关键的代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; ; <span style="color:#f92672">++</span>j )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v8 <span style="color:#f92672">=</span> j;
</span></span><span style="display:flex;"><span>    v2 <span style="color:#f92672">=</span> <span style="color:#a6e22e">j_strlen</span>(Str2);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v8 <span style="color:#f92672">&gt;</span> v2 )
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( Str2[j] <span style="color:#f92672">==</span> <span style="color:#ae81ff">111</span> )
</span></span><span style="display:flex;"><span>      Str2[j] <span style="color:#f92672">=</span> <span style="color:#ae81ff">48</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_1400111D1</span>(<span style="color:#e6db74">&#34;input the flag:&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_14001128F</span>(<span style="color:#e6db74">&#34;%20s&#34;</span>, Str1);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">j_strlen</span>(Str2);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">strncmp</span>(Str1, Str2, v3) )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_1400111D1</span>(<span style="color:#e6db74">&#34;this is the right flag!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">sub_1400111D1</span>(<span style="color:#e6db74">&#34;wrong flag</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sub_14001113B</span>(v5, <span style="color:#f92672">&amp;</span>unk_140019D00);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>i64;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>进行简单地代码审计可以明确地发现</p>
<p>flag就藏在Str2数据中，顺着这条线找下去可以看到Str2的数据</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210806210806832.png" alt="image-20210806210806832"></p>
<p>现在可以看到了flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>{hello_world}
</span></span></code></pre></div><p>不过，这道题目还没完，还是有个对于数据的变换，变换后的数据才是flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; ; <span style="color:#f92672">++</span>j )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    v8 <span style="color:#f92672">=</span> j;
</span></span><span style="display:flex;"><span>    v2 <span style="color:#f92672">=</span> <span style="color:#a6e22e">j_strlen</span>(Str2);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v8 <span style="color:#f92672">&gt;</span> v2 )
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( Str2[j] <span style="color:#f92672">==</span> <span style="color:#ae81ff">111</span> )
</span></span><span style="display:flex;"><span>      Str2[j] <span style="color:#f92672">=</span> <span style="color:#ae81ff">48</span>;
</span></span><span style="display:flex;"><span>  }
</span></span></code></pre></div><p>这段代码简单来说就是将原始数据中的<code>o</code>变成<code>0</code>，进行变换后就得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{hell0_w0rld}
</span></span></code></pre></div><h2 id="0x2-reverse2">0x2 reverse2</h2>
<p>也是一道简单的逆向题目，稍微走向流程。</p>
<p>查看文件格式信息，由于文件没有扩展名，推测很有可能ELF格式的Linux可执行文件而不是PE文件</p>
<p>使用Exeinfo PE工具查一下信息</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210806222154370.png" alt="image-20210806222154370"></p>
<p>发现是64位的ELF文件，使用Cutter进行反编译并进入到主函数，也就是main函数</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210806232340679.png" alt="image-20210806232340679"></p>
<p>可以找到反编译器中的关键代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (rbx <span style="color:#f92672">&lt;=</span> rax) {
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>        rax <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int64_t</span>) eax;
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((rax <span style="color:#f92672">+</span> flag));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (al <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x69</span>) {
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>            rax <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int64_t</span>) eax;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((rax <span style="color:#f92672">+</span> flag));
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (al <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x72</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">goto</span> label_1;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>        rax <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int64_t</span>) eax;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>((rax <span style="color:#f92672">+</span> flag)) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x31</span>;
</span></span><span style="display:flex;"><span>label_1:
</span></span><span style="display:flex;"><span>        var_38h<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>        rbx <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int64_t</span>) eax;
</span></span><span style="display:flex;"><span>        edi <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;{hacking_for_fun}&#34;</span>;
</span></span><span style="display:flex;"><span>        rax <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span> ();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">goto</span> label_2;
</span></span><span style="display:flex;"><span>label_0:
</span></span><span style="display:flex;"><span>    rcx <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>wstatus;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> pid;
</span></span><span style="display:flex;"><span>    edx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    rsi <span style="color:#f92672">=</span> rcx;
</span></span><span style="display:flex;"><span>    edi <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">waitpid</span> ();
</span></span><span style="display:flex;"><span>label_2:
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span> (<span style="color:#e6db74">&#34;input the flag:&#34;</span>);
</span></span><span style="display:flex;"><span>    rax <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>s2;
</span></span><span style="display:flex;"><span>    rsi <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span>    edi <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;%20s&#34;</span>;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">isoc99_scanf</span> ();
</span></span><span style="display:flex;"><span>    rax <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>s2;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#a6e22e">strcmp</span> (<span style="color:#e6db74">&#34;{hacking_for_fun}&#34;</span>, rax);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;wrong flag!&#34;</span>);
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">puts</span> (<span style="color:#e6db74">&#34;this is the right flag!&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    rdx <span style="color:#f92672">=</span> canary;
</span></span><span style="display:flex;"><span>    rdx <span style="color:#f92672">^=</span> <span style="color:#f92672">*</span>(fs:<span style="color:#ae81ff">0x28</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">stack_chk_fail</span> ();
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>对关键代码进行审计，发现原始数据是</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>{hacking_for_fun}
</span></span></code></pre></div><p>而且flag是对原始数据进行数据上的变换的，根据代码应该是将原始数据中的<code>r</code>和<code>i</code>进行替换，替换成了<code>1</code></p>
<p>因此，最终的flag就是</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{hack1ng_fo1_fun}
</span></span></code></pre></div><h2 id="0x3-内涵的软件">0x3 内涵的软件</h2>
<p>日常逆向走个流程，查一下软件信息</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210807135314713.png" alt="image-20210807135314713"></p>
<p>没有壳，32位程序</p>
<p>丢进Cutter简单看一下，可以发现flag应该就是在反编译的文件中</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210807141104750.png" alt="image-20210807141104750"></p>
<p>结合题目的名字，应该就可以推断出来flag就是那段看起来像是flag的字段，即</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{49d3c93df25caad81232130f3d2ebfad}
</span></span></code></pre></div><h2 id="0x4-新年快乐">0x4 新年快乐</h2>
<p>走下流程，先看看文件信息</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210807162409975.png" alt="image-20210807162409975"></p>
<p>发现文件被UPX进行了加壳处理</p>
<p>进行UPX脱壳后然后丢进Cutter就能看到flag</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210807164305469.png" alt="image-20210807164305469"></p>
<p>审计代码后可以看到flag就是</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{HappyNewYear!}
</span></span></code></pre></div><h2 id="0x5-xor">0x5 xor</h2>
<p>看样子像是ELF文件，使用linux的命令查询一下文件信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>file xor
</span></span></code></pre></div><p>可以得到以下信息</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>xor: Mach-O 64-bit x86_64 executable, flags:&lt;NOUNDEFS|DYLDLINK|TWOLEVEL|PIE&gt;
</span></span></code></pre></div><p>可以知道应该是一个Mac OS的可执行文件，而且是一个64位的程序，丢进IDA pro里面进行逆向得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [rsp+2Ch] [rbp-124h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> __b[<span style="color:#ae81ff">264</span>]; <span style="color:#75715e">// [rsp+40h] [rbp-110h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memset</span>(__b, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x100uLL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Input your flag:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">get_line</span>(__b, <span style="color:#ae81ff">256LL</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#a6e22e">strlen</span>(__b) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">33</span> )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">goto</span> LABEL_7;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>; i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">33</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>    __b[i] <span style="color:#f92672">^=</span> __b[i <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#f92672">!</span><span style="color:#a6e22e">strncmp</span>(__b, global, <span style="color:#ae81ff">0x21uLL</span>) )
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Success&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>LABEL_7:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Failed&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>关键函数应该是在global数组中，下面关键就是找到这个数组里面的数据</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210808061318446.png" alt="image-20210808061318446"></p>
<p>然后顺着这个global往上找，可以找aFKWOXZUPFVMDGH这个变量，数据应该存储在这个变量中，追踪这个变量可以找到内部的数据信息</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210808061948925.png" alt="image-20210808061948925"></p>
<p>然后提取数据得到</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> aFKWOXZUPFVMDGH[] <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">102</span>,  <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">107</span>,  <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">119</span>,  <span style="color:#ae81ff">38</span>,  <span style="color:#ae81ff">79</span>,  <span style="color:#ae81ff">46</span>,  <span style="color:#ae81ff">64</span>,  <span style="color:#ae81ff">17</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">120</span>,  <span style="color:#ae81ff">13</span>,  <span style="color:#ae81ff">90</span>,  <span style="color:#ae81ff">59</span>,  <span style="color:#ae81ff">85</span>,  <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">112</span>,  <span style="color:#ae81ff">25</span>,  <span style="color:#ae81ff">70</span>,  <span style="color:#ae81ff">31</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">118</span>,  <span style="color:#ae81ff">34</span>,  <span style="color:#ae81ff">77</span>,  <span style="color:#ae81ff">35</span>,  <span style="color:#ae81ff">68</span>,  <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">103</span>,   <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">104</span>,  <span style="color:#ae81ff">15</span>, 
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">71</span>,  <span style="color:#ae81ff">50</span>,  <span style="color:#ae81ff">79</span>,   <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>现在拿到数据了，下面就是对数据进行异或操作</p>
<p>由于异或操作是一个非常有趣的操作，就好像是在进行变魔术，非常有意思。因此可以根据异或运算的性质和特点来获取flag</p>
<p>写一个非常简单的异或脚本应该就能出flag了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>flag<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>xor<span style="color:#f92672">=</span>[<span style="color:#ae81ff">102</span>,  <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">107</span>,  <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">119</span>,  <span style="color:#ae81ff">38</span>,  <span style="color:#ae81ff">79</span>,  <span style="color:#ae81ff">46</span>,  <span style="color:#ae81ff">64</span>,  <span style="color:#ae81ff">17</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">120</span>,  <span style="color:#ae81ff">13</span>,  <span style="color:#ae81ff">90</span>,  <span style="color:#ae81ff">59</span>,  <span style="color:#ae81ff">85</span>,  <span style="color:#ae81ff">17</span>, <span style="color:#ae81ff">112</span>,  <span style="color:#ae81ff">25</span>,  <span style="color:#ae81ff">70</span>,  <span style="color:#ae81ff">31</span>, 
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">118</span>,  <span style="color:#ae81ff">34</span>,  <span style="color:#ae81ff">77</span>,  <span style="color:#ae81ff">35</span>,  <span style="color:#ae81ff">68</span>,  <span style="color:#ae81ff">14</span>, <span style="color:#ae81ff">103</span>,   <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">104</span>,  <span style="color:#ae81ff">15</span>, 
</span></span><span style="display:flex;"><span>   <span style="color:#ae81ff">71</span>,  <span style="color:#ae81ff">50</span>,  <span style="color:#ae81ff">79</span>,   <span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">33</span>):
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">+=</span> chr(xor[i]<span style="color:#f92672">^</span>xor[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>运行脚本就能得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{QianQiuWanDai_YiTongJiangHu}
</span></span></code></pre></div><h2 id="0x6-helloworld">0x6 helloworld</h2>
<p>一个APK文件，丢到jadx反编译看看吧</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210808064410804.png" alt="image-20210808064410804"></p>
<p>如果是第一次接触apk程序的逆向工程可能对apk程序的结构不是非常熟悉，不知道怎么定位的主函数。一般而言，apk文件的主函数，也就是入口函数一般都是com.example.xxxx的包里面的MainActivity函数。因此找到这个函数，点开</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210808064814599.png" alt="image-20210808064814599"></p>
<p>flag就摆出来了</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{7631a988259a00816deda84afb29430a}
</span></span></code></pre></div><h2 id="0x7-reverse3">0x7 reverse3</h2>
<p>查一下程序信息</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210808084057284.png" alt="image-20210808084057284"></p>
<p>是一个32位的程序，丢进Cutter里面看看主程序</p>
<p><img src="/images/BUUCTF-REVERSE-1_writeup/image-20210808084559776.png" alt="image-20210808084559776"></p>
<p>找到主程序的反编译代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdint.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int32_t</span> <span style="color:#a6e22e">main</span> (<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_17ch;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_178h;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_ach;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_a0h;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> dest;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_28h;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_ch;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_4h;
</span></span><span style="display:flex;"><span>    edi <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>var_17ch;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5f</span>;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xcccccccc</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span> (edi, eax, ecx);
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#ae81ff">0x41a004</span>);
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">^=</span> ebp;
</span></span><span style="display:flex;"><span>    var_4h <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>    var_a0h <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> var_a0h;
</span></span><span style="display:flex;"><span>        eax<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>        var_a0h <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (var_a0h <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0x64</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">goto</span> label_0;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> var_a0h;
</span></span><span style="display:flex;"><span>        var_178h <span style="color:#f92672">=</span> var_a0h;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (var_178h <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x64</span>) {
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">fcn_00411154</span> ();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ecx <span style="color:#f92672">=</span> var_178h;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>((ebp <span style="color:#f92672">+</span> ecx <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x94</span>)) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>label_0:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fcn_0041132f</span> (<span style="color:#e6db74">&#34;please enter the flag:&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fcn_00411375</span> (<span style="color:#e6db74">&#34;%20s&#34;</span>, var_28h);
</span></span><span style="display:flex;"><span>    esi <span style="color:#f92672">=</span> esp;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>var_ch;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>var_28h;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#a6e22e">fcn_004110c8</span> ();
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#a6e22e">fcn_004110be</span> (var_28h, eax);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> (<span style="color:#f92672">*</span>strncpy)(<span style="color:#66d9ef">void</span>, <span style="color:#66d9ef">void</span>) (dest, eax);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fcn_00411127</span> ();
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>dest;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#a6e22e">fcn_004110c8</span> ();
</span></span><span style="display:flex;"><span>    var_a0h <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>    var_ach <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> var_ach;
</span></span><span style="display:flex;"><span>        eax<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>        var_ach <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">&gt;=</span> var_a0h) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">goto</span> label_1;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> var_ach;
</span></span><span style="display:flex;"><span>        ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ebp <span style="color:#f92672">+</span> eax <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x94</span>));
</span></span><span style="display:flex;"><span>        ecx <span style="color:#f92672">+=</span> var_ach;
</span></span><span style="display:flex;"><span>        edx <span style="color:#f92672">=</span> var_ach;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>((ebp <span style="color:#f92672">+</span> edx <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x94</span>)) <span style="color:#f92672">=</span> cl;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>label_1:
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>dest;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#a6e22e">fcn_004110c8</span> ();
</span></span><span style="display:flex;"><span>    esi <span style="color:#f92672">=</span> esp;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> (<span style="color:#f92672">*</span>strncmp)(<span style="color:#66d9ef">void</span>, <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>, <span style="color:#66d9ef">void</span>) (dest, <span style="color:#e6db74">&#34;e3nifIH9b_C@n@dH&#34;</span>, eax);
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#a6e22e">fcn_00411127</span> ();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fcn_0041132f</span> (<span style="color:#e6db74">&#34;wrong flag!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> <span style="color:#a6e22e">fcn_0041132f</span> (<span style="color:#e6db74">&#34;rigth flag!</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">=</span> ebp;
</span></span><span style="display:flex;"><span>    edx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x415890</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fcn_0041126c</span> (eax);
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">=</span> var_4h;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">^=</span> ebp;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fcn_00411280</span> ();
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fcn_00411127</span> ();
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>主函数也有个关键函数 <code>fcn_004110be</code> ，定位到这个函数，看看这个函数的执行过程</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdint.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int32_t</span> <span style="color:#a6e22e">fcn_004110be</span> (<span style="color:#66d9ef">uint32_t</span> arg_8h, <span style="color:#66d9ef">uint32_t</span> arg_ch, <span style="color:#66d9ef">int32_t</span> arg_10h) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_100h;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_38h;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_2ch;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">size_t</span> size;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> var_14h;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> var_8h;
</span></span><span style="display:flex;"><span>    edi <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>var_100h;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x40</span>;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xcccccccc</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span> (edi, eax, ecx);
</span></span><span style="display:flex;"><span>    var_8h <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    var_14h <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    size <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (arg_8h <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (arg_ch <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">goto</span> label_1;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">goto</span> label_2;
</span></span><span style="display:flex;"><span>label_1:
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> arg_ch;
</span></span><span style="display:flex;"><span>    edx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> edx:eax <span style="color:#f92672">/</span> ecx;
</span></span><span style="display:flex;"><span>    edx <span style="color:#f92672">=</span> edx:eax <span style="color:#f92672">%</span> ecx;
</span></span><span style="display:flex;"><span>    size <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>    edx:eax <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int64_t</span>) eax;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> edx:eax <span style="color:#f92672">/</span> ecx;
</span></span><span style="display:flex;"><span>    edx <span style="color:#f92672">=</span> edx:eax <span style="color:#f92672">%</span> ecx;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (edx <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> size;
</span></span><span style="display:flex;"><span>        eax<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> arg_10h;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">=</span> size;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> ecx;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> size;
</span></span><span style="display:flex;"><span>    eax<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    esi <span style="color:#f92672">=</span> esp;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> (<span style="color:#f92672">*</span>malloc)(<span style="color:#66d9ef">void</span>, <span style="color:#66d9ef">void</span>, <span style="color:#66d9ef">void</span>) (eax, eax, eax);
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#a6e22e">fcn_00411127</span> ();
</span></span><span style="display:flex;"><span>    var_14h <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (var_14h <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> label_2;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> size;
</span></span><span style="display:flex;"><span>    eax<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fcn_004110b9</span> ();
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> arg_8h;
</span></span><span style="display:flex;"><span>    var_8h <span style="color:#f92672">=</span> arg_8h;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> arg_ch;
</span></span><span style="display:flex;"><span>    size <span style="color:#f92672">=</span> arg_ch;
</span></span><span style="display:flex;"><span>    var_2ch <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    var_38h <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>label_0:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (size <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> label_3;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>)) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    ecx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>)) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    edx <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> edx <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>)) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    var_2ch <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> var_2ch;
</span></span><span style="display:flex;"><span>        eax<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>        var_2ch <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (var_2ch <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">3</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">goto</span> label_4;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (size <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> var_2ch;
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">=</span> var_8h;
</span></span><span style="display:flex;"><span>            dl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(ecx);
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>)) <span style="color:#f92672">=</span> dl;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> size;
</span></span><span style="display:flex;"><span>            eax<span style="color:#f92672">--</span>;
</span></span><span style="display:flex;"><span>            size <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> var_8h;
</span></span><span style="display:flex;"><span>            eax<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>            var_8h <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>label_4:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (var_2ch <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> var_2ch;
</span></span><span style="display:flex;"><span>        var_100h <span style="color:#f92672">=</span> var_2ch;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (var_100h <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> (var_100h <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> (var_100h <span style="color:#f92672">!=</span> <span style="color:#ae81ff">3</span>) {
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                    ecx <span style="color:#f92672">=</span> eax <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                    edx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>                    edx <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">+=</span> var_38h;
</span></span><span style="display:flex;"><span>                    cl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> cl;
</span></span><span style="display:flex;"><span>                    edx <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>                    edx<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>                    var_38h <span style="color:#f92672">=</span> edx;
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                    ecx <span style="color:#f92672">=</span> eax <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                    edx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>                    edx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>                    edx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                    ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>                    ecx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xf0</span>;
</span></span><span style="display:flex;"><span>                    ecx <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>                    edx <span style="color:#f92672">|=</span> ecx;
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">+=</span> var_38h;
</span></span><span style="display:flex;"><span>                    cl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> cl;
</span></span><span style="display:flex;"><span>                    edx <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>                    edx<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>                    var_38h <span style="color:#f92672">=</span> edx;
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>                    ecx <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>                    ecx <span style="color:#f92672">+=</span> var_38h;
</span></span><span style="display:flex;"><span>                    dl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">*</span>(ecx) <span style="color:#f92672">=</span> dl;
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>                    eax<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>                    var_38h <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>                    ecx <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>                    ecx <span style="color:#f92672">+=</span> var_38h;
</span></span><span style="display:flex;"><span>                    dl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">*</span>(ecx) <span style="color:#f92672">=</span> dl;
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>                    eax<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>                    var_38h <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                    eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                ecx <span style="color:#f92672">=</span> eax <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                edx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>                edx <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">+=</span> var_38h;
</span></span><span style="display:flex;"><span>                cl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> cl;
</span></span><span style="display:flex;"><span>                edx <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>                edx<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>                var_38h <span style="color:#f92672">=</span> edx;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                ecx <span style="color:#f92672">=</span> eax <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                edx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>                edx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>                edx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>                ecx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xf0</span>;
</span></span><span style="display:flex;"><span>                ecx <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>                edx <span style="color:#f92672">|=</span> ecx;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">+=</span> var_38h;
</span></span><span style="display:flex;"><span>                cl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> cl;
</span></span><span style="display:flex;"><span>                edx <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>                edx<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>                var_38h <span style="color:#f92672">=</span> edx;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>                ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>                ecx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xf</span>;
</span></span><span style="display:flex;"><span>                ecx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>                edx <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                edx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xc0</span>;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>                ecx <span style="color:#f92672">|=</span> eax;
</span></span><span style="display:flex;"><span>                edx <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>                edx <span style="color:#f92672">+=</span> var_38h;
</span></span><span style="display:flex;"><span>                al <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">*</span>(edx) <span style="color:#f92672">=</span> al;
</span></span><span style="display:flex;"><span>                ecx <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>                ecx<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>                var_38h <span style="color:#f92672">=</span> ecx;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>                ecx <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>                ecx <span style="color:#f92672">+=</span> var_38h;
</span></span><span style="display:flex;"><span>                dl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">*</span>(ecx) <span style="color:#f92672">=</span> dl;
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>                eax<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>                var_38h <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>            } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">=</span> eax <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">+=</span> var_38h;
</span></span><span style="display:flex;"><span>            cl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> cl;
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>            edx<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>            var_38h <span style="color:#f92672">=</span> edx;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">=</span> eax <span style="color:#f92672">*</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xf0</span>;
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">|=</span> ecx;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">+=</span> var_38h;
</span></span><span style="display:flex;"><span>            cl <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> cl;
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>            edx<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>            var_38h <span style="color:#f92672">=</span> edx;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xf</span>;
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((edx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0xc0</span>;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">&gt;&gt;=</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">|=</span> eax;
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">+=</span> var_38h;
</span></span><span style="display:flex;"><span>            al <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">*</span>(edx) <span style="color:#f92672">=</span> al;
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>            ecx<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>            var_38h <span style="color:#f92672">=</span> ecx;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>            eax <span style="color:#f92672">&lt;&lt;=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((eax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x41a144</span>));
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">&amp;=</span> <span style="color:#ae81ff">0x3f</span>;
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>            edx <span style="color:#f92672">+=</span> var_38h;
</span></span><span style="display:flex;"><span>            al <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ecx <span style="color:#f92672">+</span> str.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789));
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">*</span>(edx) <span style="color:#f92672">=</span> al;
</span></span><span style="display:flex;"><span>            ecx <span style="color:#f92672">=</span> var_38h;
</span></span><span style="display:flex;"><span>            ecx<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>            var_38h <span style="color:#f92672">=</span> ecx;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">goto</span> label_0;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>label_3:
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">+=</span> var_38h;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(eax) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    eax <span style="color:#f92672">=</span> var_14h;
</span></span><span style="display:flex;"><span>label_2:
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fcn_00411127</span> ();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> eax;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>看函数实现过程的细节像是base64的实现过程，实现之后主程序还有一个移位密码的变换</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> var_ach;
</span></span><span style="display:flex;"><span>        eax<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>        var_ach <span style="color:#f92672">=</span> eax;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (eax <span style="color:#f92672">&gt;=</span> var_a0h) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">goto</span> label_1;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        eax <span style="color:#f92672">=</span> var_ach;
</span></span><span style="display:flex;"><span>        ecx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>((ebp <span style="color:#f92672">+</span> eax <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x94</span>));
</span></span><span style="display:flex;"><span>        ecx <span style="color:#f92672">+=</span> var_ach;
</span></span><span style="display:flex;"><span>        edx <span style="color:#f92672">=</span> var_ach;
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>((ebp <span style="color:#f92672">+</span> edx <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x94</span>)) <span style="color:#f92672">=</span> cl;
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><p>变换后肯定有一个校验的过程，找到校验的数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>e3nifIH9b_C@n@dH
</span></span></code></pre></div><p>最后根据目前收集到的数据和信息编写个python脚本</p>
<p>（感觉挺像密码学的）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;e3nifIH9b_C@n@dH&#34;</span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(c)):
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">+=</span>chr(ord(c[i])<span style="color:#f92672">-</span>i)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag&#34;</span><span style="color:#f92672">+</span>base64<span style="color:#f92672">.</span>b64decode(m)<span style="color:#f92672">.</span>decode()
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>运行脚本就得到flag了</p>
<pre tabindex="0"><code>flag{i_l0ve_you}
</code></pre>]]></content>
        </item>
        
        <item>
            <title>BUUCTF CRYPTO (6) writeup</title>
            <link>/posts/buuctf-crypto-6_writeup/</link>
            <pubDate>Thu, 08 Jul 2021 16:26:32 +0800</pubDate>
            
            <guid>/posts/buuctf-crypto-6_writeup/</guid>
            <description>百题计划，冲呀！冲呀！冲呀！
本次16道题目，难度开始逐渐上升，越来越有挑战性喽！
0x0 RSA &amp;amp; what 开场就是一道RSA题目，真是不错！
附件有四个文件，一个README.txt文件，一个rsa.py算法文件，一个HUB1输出文件和一个HUB2输出文件。看看这些文件都是些什么内容吧！
README.txt：
素数生成算法太麻烦了，有没有取巧的方法呢？ 诶，这里好像有个不错的想法哟。 看起来节约了不少时间呢，嘿嘿嘿…… 顺便问问，应该大家都知道base64吧，用来编码还是很方便的呢！ rsa.py：
from Crypto.Util.number import bytes_to_long, getPrime from random import randint from gmpy2 import powmod p = getPrime(2048) q = getPrime(2048) N = p*q Phi = (p-1)*(q-1) def get_enc_key(N,Phi): e = getPrime(N) if Phi % e == 0: return get_enc_key(N, Phi) else: return e e1 = get_enc_key(randint(10, 12), Phi) e2 = get_enc_key(randint(10, 12), Phi) fr = open(r&amp;#34;./base64&amp;#34;, &amp;#34;rb&amp;#34;)#flag is in this file f1 = open(r&amp;#34;.</description>
            <content type="html"><![CDATA[<p>百题计划，冲呀！冲呀！冲呀！</p>
<p><img src="/images/BUUCTF-CRYPTO-6_writeup/image-20210701110042258.png" alt="image-20210701110042258"></p>
<p>本次16道题目，难度开始逐渐上升，越来越有挑战性喽！</p>
<p><img src="/images/BUUCTF-CRYPTO-6_writeup/image-20210701110832867.png" alt="image-20210701110832867"></p>
<h2 id="0x0-rsa--what">0x0 RSA &amp; what</h2>
<p>开场就是一道RSA题目，真是不错！</p>
<p>附件有四个文件，一个<code>README.txt</code>文件，一个<code>rsa.py</code>算法文件，一个<code>HUB1</code>输出文件和一个<code>HUB2</code>输出文件。看看这些文件都是些什么内容吧！</p>
<p>README.txt：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>素数生成算法太麻烦了，有没有取巧的方法呢？
</span></span><span style="display:flex;"><span>诶，这里好像有个不错的想法哟。
</span></span><span style="display:flex;"><span>看起来节约了不少时间呢，嘿嘿嘿……
</span></span><span style="display:flex;"><span>顺便问问，应该大家都知道base64吧，用来编码还是很方便的呢！
</span></span></code></pre></div><p>rsa.py：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> bytes_to_long, getPrime
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> random <span style="color:#f92672">import</span> randint
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> gmpy2 <span style="color:#f92672">import</span> powmod
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">2048</span>)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">2048</span>)
</span></span><span style="display:flex;"><span>N <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>Phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_enc_key</span>(N,Phi):
</span></span><span style="display:flex;"><span>    e <span style="color:#f92672">=</span> getPrime(N)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> Phi <span style="color:#f92672">%</span> e <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> get_enc_key(N, Phi)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> e
</span></span><span style="display:flex;"><span>e1 <span style="color:#f92672">=</span> get_enc_key(randint(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">12</span>), Phi)
</span></span><span style="display:flex;"><span>e2 <span style="color:#f92672">=</span> get_enc_key(randint(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">12</span>), Phi)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>fr <span style="color:#f92672">=</span> open(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;./base64&#34;</span>, <span style="color:#e6db74">&#34;rb&#34;</span>)<span style="color:#75715e">#flag is in this file</span>
</span></span><span style="display:flex;"><span>f1 <span style="color:#f92672">=</span> open(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;./HUB1&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>)
</span></span><span style="display:flex;"><span>f2 <span style="color:#f92672">=</span> open(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#34;./HUB2&#34;</span>, <span style="color:#e6db74">&#34;wb&#34;</span>)
</span></span><span style="display:flex;"><span>base64 <span style="color:#f92672">=</span> fr<span style="color:#f92672">.</span>read(<span style="color:#ae81ff">255</span>)
</span></span><span style="display:flex;"><span>f1<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> (N, e1))
</span></span><span style="display:flex;"><span>f2<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> (N, e2))
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> len(base64)<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>    pt <span style="color:#f92672">=</span> bytes_to_long(base64)
</span></span><span style="display:flex;"><span>    ct1 <span style="color:#f92672">=</span> powmod(pt, e1, N)
</span></span><span style="display:flex;"><span>    ct2 <span style="color:#f92672">=</span> powmod(pt, e2, N)
</span></span><span style="display:flex;"><span>    f1<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> ct1)
</span></span><span style="display:flex;"><span>    f2<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> ct2)
</span></span><span style="display:flex;"><span>    base64 <span style="color:#f92672">=</span> fr<span style="color:#f92672">.</span>read(<span style="color:#ae81ff">255</span>)
</span></span><span style="display:flex;"><span>fr<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>f1<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>f2<span style="color:#f92672">.</span>close()
</span></span></code></pre></div><p>HUB1：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>785095419718268286866508214304816985447077293766819398728046411166917810820484759314291028976498223661229395009474063173705162627037610993539617751905443039278227583504604808251931083818909467613277587874545761074364427549966555519371913859875313577282243053150056274667798049694695703660313532933165449312949725581708965417273055582216295994587600975970124811496270080896977076946000102701030260990598181466447208054713391526313700681341093922240317428173599031624125155188216489476825606191521182034969120343287691181300399683515414809262700457525876691808180257730351707673660380698973884642306898810000633684878715402823143549139850732982897459698089649561190746850698130299458080255582312696873149210028240898137822888492559957665067936573356367589784593119016624072433872744537432005911668494455733330689385141214653091888017782049043434862620306783436169856564175929871100669913438980899219579329897753233450934770193915434791427728636586218049874617231705308003720066269312729135764175698611068808404054125581540114956463603240222497919384691718744014002554201602395969312999994159599536026359879060218056496345745457493919771337601177449899066579857630036350871090452649830775029695488575574985078428560054253180863725364147
</span></span><span style="display:flex;"><span>1697
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>412629526163150748619328091306742267675740578011800062477174189782151273970783531227579758540364970485350157944321579108232221072397135934034064481497887079641131808838242743811511451355024436983050572020925065644355566434625618133203024215941534926113892937988520918939061441606915556516246057349589921494351383160036280826024605351878408056180907759973804117263002554923041750587548819746346813966673034182913325507826219961923932100526305289894965216608254252188398580139545189681875824089456195044984585824938384521905334289906422454152976834867304693292466676355760173232407753256256317546190171995276258924613533179898467683358934751999655196790168438343198229183747091108262988777659858609744709324571850262293294975336628234767258858873839342596887193772615000676401522431518310648303975593582965021189182246986957349253156736526071639973844039068996404290548474640668851856078201093335425412842295604919065487301340901573809617549185106072798799159726375235125260509158832996701927878713084753334549129580912412168594170659605421750204835970231909591063407612779337478065175988365401590396247576709343727196106058477166945670117868989025903023998142850338956985816131805349549059377047477131270847579095628384569645636821650
</span></span><span style="display:flex;"><span>494644347943710545224678831941589086572700792465459558770782213550069709458568349686998660541810166872034041584767487150140111151788221460027897193248273461607411027815984883969396220626358625041781558277804930212654296704055890683796941327712758797770820006623289146990000114915293539639766846910274034245607746230740851938158390562286057002223177609606376329007676845450142537930798148258428701466415483232670659815791064681384406494388237742330786225557303988025468036820082959712050733095860546860468575857084616069132051094882919253745234762029759124776348047587755897123575123506976140900565238840752841856713613368250071926171873213897914794115466890719123299469964019450899291410760762179836946570945555295288184698184555018368687708432612286248476073758067175481771199066581572870175460016017100414479346437034291784837132240891321931601494414908927713208448927221095745802380014441841139882391378410438764884597938773868771896252329517440068673532468372840830510218585255432000690265226016573313570977945083879214961394087065558376158826938257664840570952233832852869328785568175434516247720356520242602299510374317488182738732700078879665745909603766482100138001417023680647717824323143388857817595766172152883484274718248
</span></span><span style="display:flex;"><span>152942283599728307168144137370127212672611894072038732126041098102628831053000986759260271210671922070555948023688596575415822984026159010574404359474670428678518262175033880513984372909748992727828381694416776740981021730545374002974037896534944567124543272737618380646771071804878796585983783360553761828325817820260204820004421979881871027255562690952334900616675606524933557440263648233514757200263521499508373975003431306847453046714027687108396945719803444444954079308404947126216395526551292104722047878178373207886033071857277857997932255251315982837892164421298202073945919187779856785892717251746704537315003771369737854896595170485152591013676942418134278534037654467840633528916812275267230155352077736583130992587670941654695382287023971261529987384520843829695778029311786431227409189019205818351911572757145556993606643464336196802350204616056286497246016800105003143046120608673496196758720552776772796609670537056331996894322779267635281472481559819839042424017171718303214059720568484939239370144038161541354254182769979771948759413102933987773401644506930205164891773826513161783736386604783484446345744957119469799231796368324927570694496679453313927562345656690240414624431304646248599226046524702364131095964335
</span></span><span style="display:flex;"><span>79717988936247951265489157583697956031893477858854186991051529161879478488281744062318600470906120960002282886511477294555606503083169449335174864424180701080203993329996226566203834693869525797695969610065991941396723959032680019082506816443041598300477625793433080664346470586416385854692124426348587211026568667694805849554780794033764714016521711467557284846737236374990121316809833819996821592832639024026411520407330206281265390130763948165694574512140518775603040182029818771866749548761938870605590174330887949847420877829240131490902432602005681085180807294176837646062568094875766945890382971790015490163385088144673549085079635083262975154206269679142412897438231719704933258660779310737302680265445437771977749959110744959368586293082016067927548564967400845992380076107522755566531760628823374519718763740378295585535591752887339222947397184116326706799921515431185636740825707782742373783475781052674257292910213843986132987466810027275052416774693363446184518901899202502828670309452622347532932678874990809930682575738653876289384151496807194146308614368821006660626870989784697045160231069428458961107751207771093777394616856305293335603892178327520756554333365975114235981173451368131680404850832773147333013716920
</span></span><span style="display:flex;"><span>123111353650401158556639983459870663057297871992927053886971224773529636525110628183715748795987525113177540092814119928708272290370336537110381023134637759740716140969662183269370676630325583385284994943164692397459103195434968057377474610500216801375394703781249039351368816958227409657934091741509357152328382960684515093945552479461382281913961956745154260686029997827565075768703774895750561575155143606297116391666385705899138085693913246313778033627210312268959737394553510894720099165193981333775907531107232556909478156441457899797515694348816961762796703443502856101079430585547997496001098926600499728389113862894833789669213630332988693669889340482430613291490613803204484751470676686041002772556117213612152322606737150858116122936539131795111263513114569794532805886643087299918196635113037777138666914296986040549274559835214505300618256105508764026461518876579387159881983544667258537064954616097750399839661065797883103731694314852301848272092388637114950059216922969842082648527035538090054093890365647676119748995243416337805666557501345234056968476142608491830438065401219751688687373709390057521910942736632126729711606256158399963682990881473178216060827021373776598901281958527655543318413664277921492723185984
</span></span><span style="display:flex;"><span>36869806815936046911848195817405817350259890871483063184373728397968909458432625046025376290214729914038387534731762237978339011724858818860181178811639468996206294711495853807311240013786226884265118119546377272154555615363105236192878292703331473547623021744317034819416624562896226194523639793573028006666236271812390759036235867495803255905843636447252225413871038762657801345647584493917576263471587347202664391908570140389126903204602391093990827188675090199750617303773574821926387194478875191828814971296674530519321530805302667925998711835019806761133078403281404889374663875077339168901297819436499920958268483684335998301056068380228873524800383911402490807139268964095165069610454677558808756444381542173782815227920906224931028457073652453777424387873533280455944646592996920617956675786286711447540353883400282402551158169958389450168079568459656526911857835375748015814860506707921852997096156275804955989964215077733621769938075413007804223217091604613132253046399456747595300404564172224333936405545921819654435437072133387523533568472443532200069133022979195685683508297337961701169394794966256415112246587706103819620428258245999539040721929317130088874161577093962579487428358736401687123174207198251449851429295
</span></span></code></pre></div><p>HUB2：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>785095419718268286866508214304816985447077293766819398728046411166917810820484759314291028976498223661229395009474063173705162627037610993539617751905443039278227583504604808251931083818909467613277587874545761074364427549966555519371913859875313577282243053150056274667798049694695703660313532933165449312949725581708965417273055582216295994587600975970124811496270080896977076946000102701030260990598181466447208054713391526313700681341093922240317428173599031624125155188216489476825606191521182034969120343287691181300399683515414809262700457525876691808180257730351707673660380698973884642306898810000633684878715402823143549139850732982897459698089649561190746850698130299458080255582312696873149210028240898137822888492559957665067936573356367589784593119016624072433872744537432005911668494455733330689385141214653091888017782049043434862620306783436169856564175929871100669913438980899219579329897753233450934770193915434791427728636586218049874617231705308003720066269312729135764175698611068808404054125581540114956463603240222497919384691718744014002554201602395969312999994159599536026359879060218056496345745457493919771337601177449899066579857630036350871090452649830775029695488575574985078428560054253180863725364147
</span></span><span style="display:flex;"><span>599
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>592169079372093727306100216011395857825646323934289480976073629037543922902098120901138454462177159996376654176248238979132528728327590301098966139983157980612320563496546128644967731000716697705104079039156276714872147463350811303393260622707024952543509891692246246277965823414460326811240048060543656588688604452353899779068825120910282167004715339763187734797180326976132213325054697165320479166356562518029805927741656605174809726397565772271562066078076105491745903986597877400370206718954975288721072048333678609055008135809089304229015364348490924974097403734627265297637171818849461766523691595241613878709865506436588268999163342945070495338153600520537498539457396582804692959296612715752573140296135784933206146091436617979599749774330699946637591406356289409716084034451049094715202196203486088368791744107629271647320273259836915312794297246589501008666299165717722507702866033454215783240025504356157664454861755286285777763585177751796252655008206383024707883077513745863312079349790275094080707502392866946325796914450602264462588722052297430827681750827349094323968337670311272933785838850649376115667223821665435911506351891489985627506615492005617098615432522564204152887767244129985681083657783356557756654335186
</span></span><span style="display:flex;"><span>373940646416832740878733255707567753033716583448402000789202767511920210382830343955553654111486728333980557319799362514960627879016797491389812007768832730979916230647641872759001906846747977631675704310179448857128160385701185892914523053669366534408863734305635222625590986006420486092550427301086984563126480814987024980594613542978310129247678826691418335300577577527951623696426435497835228167084738007750914270251001921329521479047662848650808989996085600197309361410863238526802127877523767262921515150984998560136647154865791163316503073285223966216441025637452229043510097323724381056976302288136843260163922706692913035222445496716008888946581535004546355744211680390731257309941902587303353139951102244865270295414474488798335404630458489706639805186573874814586736746232358849677477533671968344154242963289415569487579895910660999043578737461300406937828924818002658292769882181668784501439254131996848948120781562158861495883827848139425862249576454689133681009549361314460818658995959098228995702202268649635363105549975932395335076521137604288520082040121286614922986554652700056148966514178935952363036963217619879899671383604638416567950421350546204434902113156720006282720889591288850271076074941927715678306057176
</span></span><span style="display:flex;"><span>527630926460622936571385649841758214453416849039412401087443444317101857090904711485538107058823056085840539073345920792871368232355475394571098380596835468509997340505604333730547799560998822989747473780307779717715522787724471724766494090783971030594671013168209717686720448579582618378459567979027822271918653169622428153856198907810040224340270362413432495029672123261375400927159831537760709974778708160583252613784358234858583174544777979242887938827573604837766801998381379999076416444683891078093889686055482709838668356120916040352123019019255084513769603803814947774554028717814638951416291274696771515474086351482107953150253616922787262398450376249126999644026382478413080973933173079111305142716133389111399235545279259017424722601848670061556859163943895466553927946412523750166582734005733378328468250568944945912238495877929717101722314678120172228493787964904072583905721074766711732215815561012960394537195757832959268603775112932862105945720853959285187521763557915356428113876893276879775603217718981852114599706699524551973934242045743122744146361596971245034059345915315495232135483464496114770357536576200511490922413208178149869347802988786513451486411409887164516065062084917556120712465074206435831498113605
</span></span><span style="display:flex;"><span>8786437178698940322877889807009957616777351844979869726962356553244050911283984280960665761649310895230455072977431415102053987735969326553978994853162483051544656873294555116009995592043183070208706258164840540599577072097104139505857517663273929851202628854185356185647194933800084230503413037858893307713037149307477830536758283681093517617820169181420796105338681582230788318108428132051793761014952837330456262272828627355701464740578197966332613127307037255647286823496355917642353327912440019621838870388091824748629637425759125214639885130163183752378908729773517053259212525494555880921052679512582051516604297098204363525081039382358483926727008679327719083138865969291911863630382097160230960738043575559330264018212774424527719153248563876760067931499029384228993253862501939337758514377472011933279273181144830381169849387893799390755052093069179605579485710343655570028592595882436632426527654452895431758715126580164902410286422637215098476316042367916779431052267545769495994723721129943616294879642305545894912914632980455031755879087401575310699765408473606166727137934224515998416625122213056208800095077933103150699272650116151674702438463062734472714004926103668378506804002740045547964716693536349447660850580
</span></span><span style="display:flex;"><span>205314962204511500352858372254132533167549960825498949618514841570703199264867431580754674275990554478140637041427842111391746883257447120035947621456863890934062044010795443059281736346976175772415034838334682726635263432655537852942177334888025283748611576171534251461847349566505628290587224150869640386437623371249743165260396675220683302142805646368906930575140628610003919131999295855501215111393294818218799982703289304596989070475000081175510085432290264502023736899104746316830742226946395027029820825791831870857382647221322734605026210073093918331247494307555600335550942340526536281372036612138713881098866303169425501998978400008829873080965592009371176208668290074288903681417933657472279670688597862835627506340169978450918788539270346340385928840299573889292189531738082166408734046381423516467694328971385421907314814283489322619386570046183556572383980777277173349209330683424343658179781015072259378576130442222984963071166207642585589822061597282467850868050737957726423713761694231879497037175627546427449730638216214828463003483408928375620315193290871300316930139260521382533279767663839278693750409419493280753368451508802658272220767624766390639285308433607255253282702383762149755935518922075584637512494819
</span></span><span style="display:flex;"><span>271453634732502613378948161256470991260052778799128789839624515809143527363206813219580098196957510291648493698144497567392065251244844074992734669490296293997386198359280316655904691639367482203210051809125904410431506925238374843856343243276508280641059690938930957474434518308646618959004216831130099873532714372402117796666560677624822509159287675432413016478948594640872091688482149004426363946048517480052906306290126242866034249478040406351940088231081456109195799442996799641647167552689564613346415247906852055588498305665928450828756152103096629274760601528737639415361467941349982213641454967962723875032638267311935042334584913897338553953961877439389588793074211502597238465542889335363559052368180212013206172712561221352833891640659020253527584706465205486408990762759230842192028381048563437724528409174790022752557512795782713125166158329880702730769957185428522011430144840232256419113631679343171680631630775266488738173707357123139368825087043785842169049943237537188129367275730984789479909103397937113837824575137021012333461552176687570010445744268373840742899299977372834041925102853718964831225250407279578465008537542659673685686242773379131904890865110699190451534445434533919127658976874721029586168106207
</span></span></code></pre></div><p>这道题目的关键应该就是加密算法的那个python文件和提示文件，需要看懂并了解rsa.py里面具体的加密算法，是以什么样的方式进行加密的。</p>
<p>审计一下加密算法，发现<code>N</code>使用了两次，可以断定这题是共模攻击的题目，先丢进共模攻击的脚本里面瞧一瞧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">common_modulus</span>(n,c1,c2,e1,e2):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span>(libnum<span style="color:#f92672">.</span>gcd(e1, e2))
</span></span><span style="display:flex;"><span>    _, s1, s2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>gcdext(e1, e2)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> s1 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        s1 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s1
</span></span><span style="display:flex;"><span>        c1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c1,n)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> s2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        s2 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s2
</span></span><span style="display:flex;"><span>        c2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c2,n)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> pow(c1,s1,n) <span style="color:#f92672">*</span> pow(c2,s2,n) <span style="color:#f92672">%</span> n
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">785095419718268286866508214304816985447077293766819398728046411166917810820484759314291028976498223661229395009474063173705162627037610993539617751905443039278227583504604808251931083818909467613277587874545761074364427549966555519371913859875313577282243053150056274667798049694695703660313532933165449312949725581708965417273055582216295994587600975970124811496270080896977076946000102701030260990598181466447208054713391526313700681341093922240317428173599031624125155188216489476825606191521182034969120343287691181300399683515414809262700457525876691808180257730351707673660380698973884642306898810000633684878715402823143549139850732982897459698089649561190746850698130299458080255582312696873149210028240898137822888492559957665067936573356367589784593119016624072433872744537432005911668494455733330689385141214653091888017782049043434862620306783436169856564175929871100669913438980899219579329897753233450934770193915434791427728636586218049874617231705308003720066269312729135764175698611068808404054125581540114956463603240222497919384691718744014002554201602395969312999994159599536026359879060218056496345745457493919771337601177449899066579857630036350871090452649830775029695488575574985078428560054253180863725364147</span>
</span></span><span style="display:flex;"><span>e1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1697</span>
</span></span><span style="display:flex;"><span>e2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">599</span>
</span></span><span style="display:flex;"><span>c1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>c2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>hub1 <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">412629526163150748619328091306742267675740578011800062477174189782151273970783531227579758540364970485350157944321579108232221072397135934034064481497887079641131808838242743811511451355024436983050572020925065644355566434625618133203024215941534926113892937988520918939061441606915556516246057349589921494351383160036280826024605351878408056180907759973804117263002554923041750587548819746346813966673034182913325507826219961923932100526305289894965216608254252188398580139545189681875824089456195044984585824938384521905334289906422454152976834867304693292466676355760173232407753256256317546190171995276258924613533179898467683358934751999655196790168438343198229183747091108262988777659858609744709324571850262293294975336628234767258858873839342596887193772615000676401522431518310648303975593582965021189182246986957349253156736526071639973844039068996404290548474640668851856078201093335425412842295604919065487301340901573809617549185106072798799159726375235125260509158832996701927878713084753334549129580912412168594170659605421750204835970231909591063407612779337478065175988365401590396247576709343727196106058477166945670117868989025903023998142850338956985816131805349549059377047477131270847579095628384569645636821650</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">494644347943710545224678831941589086572700792465459558770782213550069709458568349686998660541810166872034041584767487150140111151788221460027897193248273461607411027815984883969396220626358625041781558277804930212654296704055890683796941327712758797770820006623289146990000114915293539639766846910274034245607746230740851938158390562286057002223177609606376329007676845450142537930798148258428701466415483232670659815791064681384406494388237742330786225557303988025468036820082959712050733095860546860468575857084616069132051094882919253745234762029759124776348047587755897123575123506976140900565238840752841856713613368250071926171873213897914794115466890719123299469964019450899291410760762179836946570945555295288184698184555018368687708432612286248476073758067175481771199066581572870175460016017100414479346437034291784837132240891321931601494414908927713208448927221095745802380014441841139882391378410438764884597938773868771896252329517440068673532468372840830510218585255432000690265226016573313570977945083879214961394087065558376158826938257664840570952233832852869328785568175434516247720356520242602299510374317488182738732700078879665745909603766482100138001417023680647717824323143388857817595766172152883484274718248</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">152942283599728307168144137370127212672611894072038732126041098102628831053000986759260271210671922070555948023688596575415822984026159010574404359474670428678518262175033880513984372909748992727828381694416776740981021730545374002974037896534944567124543272737618380646771071804878796585983783360553761828325817820260204820004421979881871027255562690952334900616675606524933557440263648233514757200263521499508373975003431306847453046714027687108396945719803444444954079308404947126216395526551292104722047878178373207886033071857277857997932255251315982837892164421298202073945919187779856785892717251746704537315003771369737854896595170485152591013676942418134278534037654467840633528916812275267230155352077736583130992587670941654695382287023971261529987384520843829695778029311786431227409189019205818351911572757145556993606643464336196802350204616056286497246016800105003143046120608673496196758720552776772796609670537056331996894322779267635281472481559819839042424017171718303214059720568484939239370144038161541354254182769979771948759413102933987773401644506930205164891773826513161783736386604783484446345744957119469799231796368324927570694496679453313927562345656690240414624431304646248599226046524702364131095964335</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">79717988936247951265489157583697956031893477858854186991051529161879478488281744062318600470906120960002282886511477294555606503083169449335174864424180701080203993329996226566203834693869525797695969610065991941396723959032680019082506816443041598300477625793433080664346470586416385854692124426348587211026568667694805849554780794033764714016521711467557284846737236374990121316809833819996821592832639024026411520407330206281265390130763948165694574512140518775603040182029818771866749548761938870605590174330887949847420877829240131490902432602005681085180807294176837646062568094875766945890382971790015490163385088144673549085079635083262975154206269679142412897438231719704933258660779310737302680265445437771977749959110744959368586293082016067927548564967400845992380076107522755566531760628823374519718763740378295585535591752887339222947397184116326706799921515431185636740825707782742373783475781052674257292910213843986132987466810027275052416774693363446184518901899202502828670309452622347532932678874990809930682575738653876289384151496807194146308614368821006660626870989784697045160231069428458961107751207771093777394616856305293335603892178327520756554333365975114235981173451368131680404850832773147333013716920</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">123111353650401158556639983459870663057297871992927053886971224773529636525110628183715748795987525113177540092814119928708272290370336537110381023134637759740716140969662183269370676630325583385284994943164692397459103195434968057377474610500216801375394703781249039351368816958227409657934091741509357152328382960684515093945552479461382281913961956745154260686029997827565075768703774895750561575155143606297116391666385705899138085693913246313778033627210312268959737394553510894720099165193981333775907531107232556909478156441457899797515694348816961762796703443502856101079430585547997496001098926600499728389113862894833789669213630332988693669889340482430613291490613803204484751470676686041002772556117213612152322606737150858116122936539131795111263513114569794532805886643087299918196635113037777138666914296986040549274559835214505300618256105508764026461518876579387159881983544667258537064954616097750399839661065797883103731694314852301848272092388637114950059216922969842082648527035538090054093890365647676119748995243416337805666557501345234056968476142608491830438065401219751688687373709390057521910942736632126729711606256158399963682990881473178216060827021373776598901281958527655543318413664277921492723185984</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">36869806815936046911848195817405817350259890871483063184373728397968909458432625046025376290214729914038387534731762237978339011724858818860181178811639468996206294711495853807311240013786226884265118119546377272154555615363105236192878292703331473547623021744317034819416624562896226194523639793573028006666236271812390759036235867495803255905843636447252225413871038762657801345647584493917576263471587347202664391908570140389126903204602391093990827188675090199750617303773574821926387194478875191828814971296674530519321530805302667925998711835019806761133078403281404889374663875077339168901297819436499920958268483684335998301056068380228873524800383911402490807139268964095165069610454677558808756444381542173782815227920906224931028457073652453777424387873533280455944646592996920617956675786286711447540353883400282402551158169958389450168079568459656526911857835375748015814860506707921852997096156275804955989964215077733621769938075413007804223217091604613132253046399456747595300404564172224333936405545921819654435437072133387523533568472443532200069133022979195685683508297337961701169394794966256415112246587706103819620428258245999539040721929317130088874161577093962579487428358736401687123174207198251449851429295</span>
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>hub2 <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">592169079372093727306100216011395857825646323934289480976073629037543922902098120901138454462177159996376654176248238979132528728327590301098966139983157980612320563496546128644967731000716697705104079039156276714872147463350811303393260622707024952543509891692246246277965823414460326811240048060543656588688604452353899779068825120910282167004715339763187734797180326976132213325054697165320479166356562518029805927741656605174809726397565772271562066078076105491745903986597877400370206718954975288721072048333678609055008135809089304229015364348490924974097403734627265297637171818849461766523691595241613878709865506436588268999163342945070495338153600520537498539457396582804692959296612715752573140296135784933206146091436617979599749774330699946637591406356289409716084034451049094715202196203486088368791744107629271647320273259836915312794297246589501008666299165717722507702866033454215783240025504356157664454861755286285777763585177751796252655008206383024707883077513745863312079349790275094080707502392866946325796914450602264462588722052297430827681750827349094323968337670311272933785838850649376115667223821665435911506351891489985627506615492005617098615432522564204152887767244129985681083657783356557756654335186</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">373940646416832740878733255707567753033716583448402000789202767511920210382830343955553654111486728333980557319799362514960627879016797491389812007768832730979916230647641872759001906846747977631675704310179448857128160385701185892914523053669366534408863734305635222625590986006420486092550427301086984563126480814987024980594613542978310129247678826691418335300577577527951623696426435497835228167084738007750914270251001921329521479047662848650808989996085600197309361410863238526802127877523767262921515150984998560136647154865791163316503073285223966216441025637452229043510097323724381056976302288136843260163922706692913035222445496716008888946581535004546355744211680390731257309941902587303353139951102244865270295414474488798335404630458489706639805186573874814586736746232358849677477533671968344154242963289415569487579895910660999043578737461300406937828924818002658292769882181668784501439254131996848948120781562158861495883827848139425862249576454689133681009549361314460818658995959098228995702202268649635363105549975932395335076521137604288520082040121286614922986554652700056148966514178935952363036963217619879899671383604638416567950421350546204434902113156720006282720889591288850271076074941927715678306057176</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">527630926460622936571385649841758214453416849039412401087443444317101857090904711485538107058823056085840539073345920792871368232355475394571098380596835468509997340505604333730547799560998822989747473780307779717715522787724471724766494090783971030594671013168209717686720448579582618378459567979027822271918653169622428153856198907810040224340270362413432495029672123261375400927159831537760709974778708160583252613784358234858583174544777979242887938827573604837766801998381379999076416444683891078093889686055482709838668356120916040352123019019255084513769603803814947774554028717814638951416291274696771515474086351482107953150253616922787262398450376249126999644026382478413080973933173079111305142716133389111399235545279259017424722601848670061556859163943895466553927946412523750166582734005733378328468250568944945912238495877929717101722314678120172228493787964904072583905721074766711732215815561012960394537195757832959268603775112932862105945720853959285187521763557915356428113876893276879775603217718981852114599706699524551973934242045743122744146361596971245034059345915315495232135483464496114770357536576200511490922413208178149869347802988786513451486411409887164516065062084917556120712465074206435831498113605</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">8786437178698940322877889807009957616777351844979869726962356553244050911283984280960665761649310895230455072977431415102053987735969326553978994853162483051544656873294555116009995592043183070208706258164840540599577072097104139505857517663273929851202628854185356185647194933800084230503413037858893307713037149307477830536758283681093517617820169181420796105338681582230788318108428132051793761014952837330456262272828627355701464740578197966332613127307037255647286823496355917642353327912440019621838870388091824748629637425759125214639885130163183752378908729773517053259212525494555880921052679512582051516604297098204363525081039382358483926727008679327719083138865969291911863630382097160230960738043575559330264018212774424527719153248563876760067931499029384228993253862501939337758514377472011933279273181144830381169849387893799390755052093069179605579485710343655570028592595882436632426527654452895431758715126580164902410286422637215098476316042367916779431052267545769495994723721129943616294879642305545894912914632980455031755879087401575310699765408473606166727137934224515998416625122213056208800095077933103150699272650116151674702438463062734472714004926103668378506804002740045547964716693536349447660850580</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">205314962204511500352858372254132533167549960825498949618514841570703199264867431580754674275990554478140637041427842111391746883257447120035947621456863890934062044010795443059281736346976175772415034838334682726635263432655537852942177334888025283748611576171534251461847349566505628290587224150869640386437623371249743165260396675220683302142805646368906930575140628610003919131999295855501215111393294818218799982703289304596989070475000081175510085432290264502023736899104746316830742226946395027029820825791831870857382647221322734605026210073093918331247494307555600335550942340526536281372036612138713881098866303169425501998978400008829873080965592009371176208668290074288903681417933657472279670688597862835627506340169978450918788539270346340385928840299573889292189531738082166408734046381423516467694328971385421907314814283489322619386570046183556572383980777277173349209330683424343658179781015072259378576130442222984963071166207642585589822061597282467850868050737957726423713761694231879497037175627546427449730638216214828463003483408928375620315193290871300316930139260521382533279767663839278693750409419493280753368451508802658272220767624766390639285308433607255253282702383762149755935518922075584637512494819</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">271453634732502613378948161256470991260052778799128789839624515809143527363206813219580098196957510291648493698144497567392065251244844074992734669490296293997386198359280316655904691639367482203210051809125904410431506925238374843856343243276508280641059690938930957474434518308646618959004216831130099873532714372402117796666560677624822509159287675432413016478948594640872091688482149004426363946048517480052906306290126242866034249478040406351940088231081456109195799442996799641647167552689564613346415247906852055588498305665928450828756152103096629274760601528737639415361467941349982213641454967962723875032638267311935042334584913897338553953961877439389588793074211502597238465542889335363559052368180212013206172712561221352833891640659020253527584706465205486408990762759230842192028381048563437724528409174790022752557512795782713125166158329880702730769957185428522011430144840232256419113631679343171680631630775266488738173707357123139368825087043785842169049943237537188129367275730984789479909103397937113837824575137021012333461552176687570010445744268373840742899299977372834041925102853718964831225250407279578465008537542659673685686242773379131904890865110699190451534445434533919127658976874721029586168106207</span>
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span> len(hub1) <span style="color:#f92672">==</span> len(hub2)
</span></span><span style="display:flex;"><span>length <span style="color:#f92672">=</span> len(hub2)
</span></span><span style="display:flex;"><span>baseCipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(length):
</span></span><span style="display:flex;"><span>    c1 <span style="color:#f92672">=</span> hub1[i]
</span></span><span style="display:flex;"><span>    c2 <span style="color:#f92672">=</span> hub2[i]
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> common_modulus(n,c1,c2,e1,e2)
</span></span><span style="display:flex;"><span>    baseCipher <span style="color:#f92672">+=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print baseCipher
</span></span></code></pre></div><p>运行脚本后，输出的是一堆base64：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>VEhJUz==
</span></span><span style="display:flex;"><span>RkxBR3==
</span></span><span style="display:flex;"><span>SVN=
</span></span><span style="display:flex;"><span>SElEREVOLo==
</span></span><span style="display:flex;"><span>Q0FO
</span></span><span style="display:flex;"><span>WU9V
</span></span><span style="display:flex;"><span>RklORM==
</span></span><span style="display:flex;"><span>SVT=
</span></span><span style="display:flex;"><span>T1VUP4==
</span></span><span style="display:flex;"><span>RE8=
</span></span><span style="display:flex;"><span>WU9V
</span></span><span style="display:flex;"><span>S05PV9==
</span></span><span style="display:flex;"><span>QkFTRTY0P5==
</span></span><span style="display:flex;"><span>WW91bmdD
</span></span><span style="display:flex;"><span>VEhJTku=
</span></span><span style="display:flex;"><span>WU9V
</span></span><span style="display:flex;"><span>QVJF
</span></span><span style="display:flex;"><span>Tk9U
</span></span><span style="display:flex;"><span>VEhBVE==
</span></span><span style="display:flex;"><span>RkFNSUxJQVI=
</span></span><span style="display:flex;"><span>V0lUSO==
</span></span><span style="display:flex;"><span>QkFTRTY0Lh==
</span></span><span style="display:flex;"><span>QmFzZTY0
</span></span><span style="display:flex;"><span>aXO=
</span></span><span style="display:flex;"><span>YW==
</span></span><span style="display:flex;"><span>Z3JvdXA=
</span></span><span style="display:flex;"><span>b2b=
</span></span><span style="display:flex;"><span>c2ltaWxhcn==
</span></span><span style="display:flex;"><span>YmluYXJ5LXRvLXRleHR=
</span></span><span style="display:flex;"><span>ZW5jb2Rpbme=
</span></span><span style="display:flex;"><span>c2NoZW1lc0==
</span></span><span style="display:flex;"><span>dGhhdD==
</span></span><span style="display:flex;"><span>cmVwcmVzZW50
</span></span><span style="display:flex;"><span>YmluYXJ5
</span></span><span style="display:flex;"><span>ZGF0YW==
</span></span><span style="display:flex;"><span>aW5=
</span></span><span style="display:flex;"><span>YW6=
</span></span><span style="display:flex;"><span>QVNDSUl=
</span></span><span style="display:flex;"><span>c3RyaW5n
</span></span><span style="display:flex;"><span>Zm9ybWF0
</span></span><span style="display:flex;"><span>Ynk=
</span></span><span style="display:flex;"><span>dHJhbnNsYXRpbmd=
</span></span><span style="display:flex;"><span>aXS=
</span></span><span style="display:flex;"><span>aW50b1==
</span></span><span style="display:flex;"><span>YT==
</span></span><span style="display:flex;"><span>cmFkaXgtNjQ=
</span></span><span style="display:flex;"><span>cmVwcmVzZW50YXRpb24u
</span></span><span style="display:flex;"><span>VGhl
</span></span><span style="display:flex;"><span>dGVybc==
</span></span><span style="display:flex;"><span>QmFzZTY0
</span></span><span style="display:flex;"><span>b3JpZ2luYXRlc8==
</span></span><span style="display:flex;"><span>ZnJvbd==
</span></span><span style="display:flex;"><span>YY==
</span></span><span style="display:flex;"><span>c3BlY2lmaWN=
</span></span><span style="display:flex;"><span>TUlNRT==
</span></span><span style="display:flex;"><span>Y29udGVudI==
</span></span><span style="display:flex;"><span>dHJhbnNmZXI=
</span></span><span style="display:flex;"><span>ZW5jb2Rpbmcu
</span></span><span style="display:flex;"><span>VGhl
</span></span><span style="display:flex;"><span>cGFydGljdWxhct==
</span></span><span style="display:flex;"><span>c2V0
</span></span><span style="display:flex;"><span>b2b=
</span></span><span style="display:flex;"><span>NjR=
</span></span><span style="display:flex;"><span>Y2hhcmFjdGVyc5==
</span></span><span style="display:flex;"><span>Y2hvc2Vu
</span></span><span style="display:flex;"><span>dG+=
</span></span><span style="display:flex;"><span>cmVwcmVzZW50
</span></span><span style="display:flex;"><span>dGhl
</span></span><span style="display:flex;"><span>NjQ=
</span></span><span style="display:flex;"><span>cGxhY2UtdmFsdWVz
</span></span><span style="display:flex;"><span>Zm9y
</span></span><span style="display:flex;"><span>dGhl
</span></span><span style="display:flex;"><span>YmFzZd==
</span></span><span style="display:flex;"><span>dmFyaWVz
</span></span><span style="display:flex;"><span>YmV0d2Vlbt==
</span></span><span style="display:flex;"><span>aW1wbGVtZW50YXRpb25zLp==
</span></span><span style="display:flex;"><span>VGhl
</span></span><span style="display:flex;"><span>Z2VuZXJhbI==
</span></span><span style="display:flex;"><span>c3RyYXRlZ3n=
</span></span><span style="display:flex;"><span>aXO=
</span></span><span style="display:flex;"><span>dG9=
</span></span><span style="display:flex;"><span>Y2hvb3Nl
</span></span><span style="display:flex;"><span>NjR=
</span></span><span style="display:flex;"><span>Y2hhcmFjdGVyc5==
</span></span><span style="display:flex;"><span>dGhhdA==
</span></span><span style="display:flex;"><span>YXJl
</span></span><span style="display:flex;"><span>Ym90aN==
</span></span><span style="display:flex;"><span>bWVtYmVyc5==
</span></span><span style="display:flex;"><span>b2a=
</span></span><span style="display:flex;"><span>YS==
</span></span><span style="display:flex;"><span>c3Vic2V0
</span></span><span style="display:flex;"><span>Y29tbW9u
</span></span><span style="display:flex;"><span>dG8=
</span></span><span style="display:flex;"><span>bW9zdM==
</span></span><span style="display:flex;"><span>ZW5jb2RpbmdzLA==
</span></span><span style="display:flex;"><span>YW5k
</span></span><span style="display:flex;"><span>YWxzb8==
</span></span><span style="display:flex;"><span>cHJpbnRhYmxlLg==
</span></span><span style="display:flex;"><span>VGhpc9==
</span></span><span style="display:flex;"><span>Y29tYmluYXRpb25=
</span></span><span style="display:flex;"><span>bGVhdmVz
</span></span><span style="display:flex;"><span>dGhl
</span></span><span style="display:flex;"><span>ZGF0YW==
</span></span><span style="display:flex;"><span>dW5saWtlbHk=
</span></span><span style="display:flex;"><span>dG/=
</span></span><span style="display:flex;"><span>YmV=
</span></span><span style="display:flex;"><span>bW9kaWZpZWS=
</span></span><span style="display:flex;"><span>aW5=
</span></span><span style="display:flex;"><span>dHJhbnNpdE==
</span></span><span style="display:flex;"><span>dGhyb3VnaN==
</span></span><span style="display:flex;"><span>aW5mb3JtYXRpb26=
</span></span><span style="display:flex;"><span>c3lzdGVtcyw=
</span></span><span style="display:flex;"><span>c3VjaN==
</span></span><span style="display:flex;"><span>YXM=
</span></span><span style="display:flex;"><span>RS1tYWlsLD==
</span></span><span style="display:flex;"><span>dGhhdA==
</span></span><span style="display:flex;"><span>d2VyZQ==
</span></span><span style="display:flex;"><span>dHJhZGl0aW9uYWxseQ==
</span></span><span style="display:flex;"><span>bm90
</span></span><span style="display:flex;"><span>OC1iaXQ=
</span></span><span style="display:flex;"><span>Y2xlYW4uWzFd
</span></span><span style="display:flex;"><span>Rm9y
</span></span><span style="display:flex;"><span>ZXhhbXBsZSw=
</span></span><span style="display:flex;"><span>TUlNRSdz
</span></span><span style="display:flex;"><span>QmFzZTY0
</span></span><span style="display:flex;"><span>aW1wbGVtZW50YXRpb24=
</span></span><span style="display:flex;"><span>dXNlcw==
</span></span><span style="display:flex;"><span>QahDWiw=
</span></span><span style="display:flex;"><span>YahDeiw=
</span></span><span style="display:flex;"><span>YW5k
</span></span><span style="display:flex;"><span>MKhDOQ==
</span></span><span style="display:flex;"><span>Zm9y
</span></span><span style="display:flex;"><span>dGhl
</span></span><span style="display:flex;"><span>Zmlyc3Q=
</span></span><span style="display:flex;"><span>NjI=
</span></span><span style="display:flex;"><span>dmFsdWVzLg==
</span></span><span style="display:flex;"><span>T3RoZXI=
</span></span><span style="display:flex;"><span>dmFyaWF0aW9ucw==
</span></span><span style="display:flex;"><span>c2hhcmU=
</span></span><span style="display:flex;"><span>dGhpcw==
</span></span><span style="display:flex;"><span>cHJvcGVydHk=
</span></span><span style="display:flex;"><span>YnV0
</span></span><span style="display:flex;"><span>ZGlmZmVy
</span></span><span style="display:flex;"><span>aW4=
</span></span><span style="display:flex;"><span>dGhl
</span></span><span style="display:flex;"><span>c3ltYm9scw==
</span></span><span style="display:flex;"><span>Y2hvc2Vu
</span></span><span style="display:flex;"><span>Zm9y
</span></span><span style="display:flex;"><span>dGhl
</span></span><span style="display:flex;"><span>bGFzdA==
</span></span><span style="display:flex;"><span>dHdv
</span></span><span style="display:flex;"><span>dmFsdWVzOw==
</span></span><span style="display:flex;"><span>YW4=
</span></span><span style="display:flex;"><span>ZXhhbXBsZQ==
</span></span><span style="display:flex;"><span>aXM=
</span></span><span style="display:flex;"><span>VVRGLTcu
</span></span></code></pre></div><p>看样子像是base64隐写，可以将内容写入一个txt文件，然后借一个base64隐写的脚本处理一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_base64_diff_value</span>(s1, s2):
</span></span><span style="display:flex;"><span>    base64chars <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#39;</span>
</span></span><span style="display:flex;"><span>    res <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> xrange(len(s2)):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> s1[i] <span style="color:#f92672">!=</span> s2[i]:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> abs(base64chars<span style="color:#f92672">.</span>index(s1[i]) <span style="color:#f92672">-</span> base64chars<span style="color:#f92672">.</span>index(s2[i]))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> res
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve_stego</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;cipher.txt&#39;</span>, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>        file_lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
</span></span><span style="display:flex;"><span>        bin_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> file_lines:
</span></span><span style="display:flex;"><span>            steg_line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>            norm_line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;base64&#39;</span>)<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;base64&#39;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>            diff <span style="color:#f92672">=</span> get_base64_diff_value(steg_line, norm_line)
</span></span><span style="display:flex;"><span>            print diff
</span></span><span style="display:flex;"><span>            pads_num <span style="color:#f92672">=</span> steg_line<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#39;=&#39;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> diff:
</span></span><span style="display:flex;"><span>                bin_str <span style="color:#f92672">+=</span> bin(diff)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>zfill(pads_num <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                bin_str <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">*</span> pads_num <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>            print goflag(bin_str)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">goflag</span>(bin_str):
</span></span><span style="display:flex;"><span>    res_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> xrange(<span style="color:#ae81ff">0</span>, len(bin_str), <span style="color:#ae81ff">8</span>):
</span></span><span style="display:flex;"><span>        res_str <span style="color:#f92672">+=</span> chr(int(bin_str[i:i <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>], <span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> res_str
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    solve_stego()
</span></span></code></pre></div><p>运行一个这个脚本，flag就有了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>7c86d8f7d6de33a87f7f9d6b005ce640
</span></span></code></pre></div><p>完整EXP：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">common_modulus</span>(n,c1,c2,e1,e2):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span>(libnum<span style="color:#f92672">.</span>gcd(e1, e2))
</span></span><span style="display:flex;"><span>    _, s1, s2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>gcdext(e1, e2)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> s1 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        s1 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s1
</span></span><span style="display:flex;"><span>        c1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c1,n)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> s2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        s2 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s2
</span></span><span style="display:flex;"><span>        c2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c2,n)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> pow(c1,s1,n) <span style="color:#f92672">*</span> pow(c2,s2,n) <span style="color:#f92672">%</span> n
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">785095419718268286866508214304816985447077293766819398728046411166917810820484759314291028976498223661229395009474063173705162627037610993539617751905443039278227583504604808251931083818909467613277587874545761074364427549966555519371913859875313577282243053150056274667798049694695703660313532933165449312949725581708965417273055582216295994587600975970124811496270080896977076946000102701030260990598181466447208054713391526313700681341093922240317428173599031624125155188216489476825606191521182034969120343287691181300399683515414809262700457525876691808180257730351707673660380698973884642306898810000633684878715402823143549139850732982897459698089649561190746850698130299458080255582312696873149210028240898137822888492559957665067936573356367589784593119016624072433872744537432005911668494455733330689385141214653091888017782049043434862620306783436169856564175929871100669913438980899219579329897753233450934770193915434791427728636586218049874617231705308003720066269312729135764175698611068808404054125581540114956463603240222497919384691718744014002554201602395969312999994159599536026359879060218056496345745457493919771337601177449899066579857630036350871090452649830775029695488575574985078428560054253180863725364147</span>
</span></span><span style="display:flex;"><span>e1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1697</span>
</span></span><span style="display:flex;"><span>e2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">599</span>
</span></span><span style="display:flex;"><span>c1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>c2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>hub1 <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">412629526163150748619328091306742267675740578011800062477174189782151273970783531227579758540364970485350157944321579108232221072397135934034064481497887079641131808838242743811511451355024436983050572020925065644355566434625618133203024215941534926113892937988520918939061441606915556516246057349589921494351383160036280826024605351878408056180907759973804117263002554923041750587548819746346813966673034182913325507826219961923932100526305289894965216608254252188398580139545189681875824089456195044984585824938384521905334289906422454152976834867304693292466676355760173232407753256256317546190171995276258924613533179898467683358934751999655196790168438343198229183747091108262988777659858609744709324571850262293294975336628234767258858873839342596887193772615000676401522431518310648303975593582965021189182246986957349253156736526071639973844039068996404290548474640668851856078201093335425412842295604919065487301340901573809617549185106072798799159726375235125260509158832996701927878713084753334549129580912412168594170659605421750204835970231909591063407612779337478065175988365401590396247576709343727196106058477166945670117868989025903023998142850338956985816131805349549059377047477131270847579095628384569645636821650</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">494644347943710545224678831941589086572700792465459558770782213550069709458568349686998660541810166872034041584767487150140111151788221460027897193248273461607411027815984883969396220626358625041781558277804930212654296704055890683796941327712758797770820006623289146990000114915293539639766846910274034245607746230740851938158390562286057002223177609606376329007676845450142537930798148258428701466415483232670659815791064681384406494388237742330786225557303988025468036820082959712050733095860546860468575857084616069132051094882919253745234762029759124776348047587755897123575123506976140900565238840752841856713613368250071926171873213897914794115466890719123299469964019450899291410760762179836946570945555295288184698184555018368687708432612286248476073758067175481771199066581572870175460016017100414479346437034291784837132240891321931601494414908927713208448927221095745802380014441841139882391378410438764884597938773868771896252329517440068673532468372840830510218585255432000690265226016573313570977945083879214961394087065558376158826938257664840570952233832852869328785568175434516247720356520242602299510374317488182738732700078879665745909603766482100138001417023680647717824323143388857817595766172152883484274718248</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">152942283599728307168144137370127212672611894072038732126041098102628831053000986759260271210671922070555948023688596575415822984026159010574404359474670428678518262175033880513984372909748992727828381694416776740981021730545374002974037896534944567124543272737618380646771071804878796585983783360553761828325817820260204820004421979881871027255562690952334900616675606524933557440263648233514757200263521499508373975003431306847453046714027687108396945719803444444954079308404947126216395526551292104722047878178373207886033071857277857997932255251315982837892164421298202073945919187779856785892717251746704537315003771369737854896595170485152591013676942418134278534037654467840633528916812275267230155352077736583130992587670941654695382287023971261529987384520843829695778029311786431227409189019205818351911572757145556993606643464336196802350204616056286497246016800105003143046120608673496196758720552776772796609670537056331996894322779267635281472481559819839042424017171718303214059720568484939239370144038161541354254182769979771948759413102933987773401644506930205164891773826513161783736386604783484446345744957119469799231796368324927570694496679453313927562345656690240414624431304646248599226046524702364131095964335</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">79717988936247951265489157583697956031893477858854186991051529161879478488281744062318600470906120960002282886511477294555606503083169449335174864424180701080203993329996226566203834693869525797695969610065991941396723959032680019082506816443041598300477625793433080664346470586416385854692124426348587211026568667694805849554780794033764714016521711467557284846737236374990121316809833819996821592832639024026411520407330206281265390130763948165694574512140518775603040182029818771866749548761938870605590174330887949847420877829240131490902432602005681085180807294176837646062568094875766945890382971790015490163385088144673549085079635083262975154206269679142412897438231719704933258660779310737302680265445437771977749959110744959368586293082016067927548564967400845992380076107522755566531760628823374519718763740378295585535591752887339222947397184116326706799921515431185636740825707782742373783475781052674257292910213843986132987466810027275052416774693363446184518901899202502828670309452622347532932678874990809930682575738653876289384151496807194146308614368821006660626870989784697045160231069428458961107751207771093777394616856305293335603892178327520756554333365975114235981173451368131680404850832773147333013716920</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">123111353650401158556639983459870663057297871992927053886971224773529636525110628183715748795987525113177540092814119928708272290370336537110381023134637759740716140969662183269370676630325583385284994943164692397459103195434968057377474610500216801375394703781249039351368816958227409657934091741509357152328382960684515093945552479461382281913961956745154260686029997827565075768703774895750561575155143606297116391666385705899138085693913246313778033627210312268959737394553510894720099165193981333775907531107232556909478156441457899797515694348816961762796703443502856101079430585547997496001098926600499728389113862894833789669213630332988693669889340482430613291490613803204484751470676686041002772556117213612152322606737150858116122936539131795111263513114569794532805886643087299918196635113037777138666914296986040549274559835214505300618256105508764026461518876579387159881983544667258537064954616097750399839661065797883103731694314852301848272092388637114950059216922969842082648527035538090054093890365647676119748995243416337805666557501345234056968476142608491830438065401219751688687373709390057521910942736632126729711606256158399963682990881473178216060827021373776598901281958527655543318413664277921492723185984</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">36869806815936046911848195817405817350259890871483063184373728397968909458432625046025376290214729914038387534731762237978339011724858818860181178811639468996206294711495853807311240013786226884265118119546377272154555615363105236192878292703331473547623021744317034819416624562896226194523639793573028006666236271812390759036235867495803255905843636447252225413871038762657801345647584493917576263471587347202664391908570140389126903204602391093990827188675090199750617303773574821926387194478875191828814971296674530519321530805302667925998711835019806761133078403281404889374663875077339168901297819436499920958268483684335998301056068380228873524800383911402490807139268964095165069610454677558808756444381542173782815227920906224931028457073652453777424387873533280455944646592996920617956675786286711447540353883400282402551158169958389450168079568459656526911857835375748015814860506707921852997096156275804955989964215077733621769938075413007804223217091604613132253046399456747595300404564172224333936405545921819654435437072133387523533568472443532200069133022979195685683508297337961701169394794966256415112246587706103819620428258245999539040721929317130088874161577093962579487428358736401687123174207198251449851429295</span>
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>hub2 <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>        <span style="color:#ae81ff">592169079372093727306100216011395857825646323934289480976073629037543922902098120901138454462177159996376654176248238979132528728327590301098966139983157980612320563496546128644967731000716697705104079039156276714872147463350811303393260622707024952543509891692246246277965823414460326811240048060543656588688604452353899779068825120910282167004715339763187734797180326976132213325054697165320479166356562518029805927741656605174809726397565772271562066078076105491745903986597877400370206718954975288721072048333678609055008135809089304229015364348490924974097403734627265297637171818849461766523691595241613878709865506436588268999163342945070495338153600520537498539457396582804692959296612715752573140296135784933206146091436617979599749774330699946637591406356289409716084034451049094715202196203486088368791744107629271647320273259836915312794297246589501008666299165717722507702866033454215783240025504356157664454861755286285777763585177751796252655008206383024707883077513745863312079349790275094080707502392866946325796914450602264462588722052297430827681750827349094323968337670311272933785838850649376115667223821665435911506351891489985627506615492005617098615432522564204152887767244129985681083657783356557756654335186</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">373940646416832740878733255707567753033716583448402000789202767511920210382830343955553654111486728333980557319799362514960627879016797491389812007768832730979916230647641872759001906846747977631675704310179448857128160385701185892914523053669366534408863734305635222625590986006420486092550427301086984563126480814987024980594613542978310129247678826691418335300577577527951623696426435497835228167084738007750914270251001921329521479047662848650808989996085600197309361410863238526802127877523767262921515150984998560136647154865791163316503073285223966216441025637452229043510097323724381056976302288136843260163922706692913035222445496716008888946581535004546355744211680390731257309941902587303353139951102244865270295414474488798335404630458489706639805186573874814586736746232358849677477533671968344154242963289415569487579895910660999043578737461300406937828924818002658292769882181668784501439254131996848948120781562158861495883827848139425862249576454689133681009549361314460818658995959098228995702202268649635363105549975932395335076521137604288520082040121286614922986554652700056148966514178935952363036963217619879899671383604638416567950421350546204434902113156720006282720889591288850271076074941927715678306057176</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">527630926460622936571385649841758214453416849039412401087443444317101857090904711485538107058823056085840539073345920792871368232355475394571098380596835468509997340505604333730547799560998822989747473780307779717715522787724471724766494090783971030594671013168209717686720448579582618378459567979027822271918653169622428153856198907810040224340270362413432495029672123261375400927159831537760709974778708160583252613784358234858583174544777979242887938827573604837766801998381379999076416444683891078093889686055482709838668356120916040352123019019255084513769603803814947774554028717814638951416291274696771515474086351482107953150253616922787262398450376249126999644026382478413080973933173079111305142716133389111399235545279259017424722601848670061556859163943895466553927946412523750166582734005733378328468250568944945912238495877929717101722314678120172228493787964904072583905721074766711732215815561012960394537195757832959268603775112932862105945720853959285187521763557915356428113876893276879775603217718981852114599706699524551973934242045743122744146361596971245034059345915315495232135483464496114770357536576200511490922413208178149869347802988786513451486411409887164516065062084917556120712465074206435831498113605</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">8786437178698940322877889807009957616777351844979869726962356553244050911283984280960665761649310895230455072977431415102053987735969326553978994853162483051544656873294555116009995592043183070208706258164840540599577072097104139505857517663273929851202628854185356185647194933800084230503413037858893307713037149307477830536758283681093517617820169181420796105338681582230788318108428132051793761014952837330456262272828627355701464740578197966332613127307037255647286823496355917642353327912440019621838870388091824748629637425759125214639885130163183752378908729773517053259212525494555880921052679512582051516604297098204363525081039382358483926727008679327719083138865969291911863630382097160230960738043575559330264018212774424527719153248563876760067931499029384228993253862501939337758514377472011933279273181144830381169849387893799390755052093069179605579485710343655570028592595882436632426527654452895431758715126580164902410286422637215098476316042367916779431052267545769495994723721129943616294879642305545894912914632980455031755879087401575310699765408473606166727137934224515998416625122213056208800095077933103150699272650116151674702438463062734472714004926103668378506804002740045547964716693536349447660850580</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">205314962204511500352858372254132533167549960825498949618514841570703199264867431580754674275990554478140637041427842111391746883257447120035947621456863890934062044010795443059281736346976175772415034838334682726635263432655537852942177334888025283748611576171534251461847349566505628290587224150869640386437623371249743165260396675220683302142805646368906930575140628610003919131999295855501215111393294818218799982703289304596989070475000081175510085432290264502023736899104746316830742226946395027029820825791831870857382647221322734605026210073093918331247494307555600335550942340526536281372036612138713881098866303169425501998978400008829873080965592009371176208668290074288903681417933657472279670688597862835627506340169978450918788539270346340385928840299573889292189531738082166408734046381423516467694328971385421907314814283489322619386570046183556572383980777277173349209330683424343658179781015072259378576130442222984963071166207642585589822061597282467850868050737957726423713761694231879497037175627546427449730638216214828463003483408928375620315193290871300316930139260521382533279767663839278693750409419493280753368451508802658272220767624766390639285308433607255253282702383762149755935518922075584637512494819</span>,
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">271453634732502613378948161256470991260052778799128789839624515809143527363206813219580098196957510291648493698144497567392065251244844074992734669490296293997386198359280316655904691639367482203210051809125904410431506925238374843856343243276508280641059690938930957474434518308646618959004216831130099873532714372402117796666560677624822509159287675432413016478948594640872091688482149004426363946048517480052906306290126242866034249478040406351940088231081456109195799442996799641647167552689564613346415247906852055588498305665928450828756152103096629274760601528737639415361467941349982213641454967962723875032638267311935042334584913897338553953961877439389588793074211502597238465542889335363559052368180212013206172712561221352833891640659020253527584706465205486408990762759230842192028381048563437724528409174790022752557512795782713125166158329880702730769957185428522011430144840232256419113631679343171680631630775266488738173707357123139368825087043785842169049943237537188129367275730984789479909103397937113837824575137021012333461552176687570010445744268373840742899299977372834041925102853718964831225250407279578465008537542659673685686242773379131904890865110699190451534445434533919127658976874721029586168106207</span>
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span> len(hub1) <span style="color:#f92672">==</span> len(hub2)
</span></span><span style="display:flex;"><span>length <span style="color:#f92672">=</span> len(hub2)
</span></span><span style="display:flex;"><span>baseCipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(length):
</span></span><span style="display:flex;"><span>    c1 <span style="color:#f92672">=</span> hub1[i]
</span></span><span style="display:flex;"><span>    c2 <span style="color:#f92672">=</span> hub2[i]
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> common_modulus(n,c1,c2,e1,e2)
</span></span><span style="display:flex;"><span>    baseCipher <span style="color:#f92672">+=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;cipher.txt&#34;</span>,<span style="color:#e6db74">&#34;wb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    f<span style="color:#f92672">.</span>write(baseCipher)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_base64_diff_value</span>(s1, s2):
</span></span><span style="display:flex;"><span>    base64chars <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#39;</span>
</span></span><span style="display:flex;"><span>    res <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> xrange(len(s2)):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> s1[i] <span style="color:#f92672">!=</span> s2[i]:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> abs(base64chars<span style="color:#f92672">.</span>index(s1[i]) <span style="color:#f92672">-</span> base64chars<span style="color:#f92672">.</span>index(s2[i]))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> res
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">solve_stego</span>():
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;cipher.txt&#39;</span>, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>        file_lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
</span></span><span style="display:flex;"><span>        bin_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> file_lines:
</span></span><span style="display:flex;"><span>            steg_line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>            norm_line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;base64&#39;</span>)<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;base64&#39;</span>)<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#39;</span>, <span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>            diff <span style="color:#f92672">=</span> get_base64_diff_value(steg_line, norm_line)
</span></span><span style="display:flex;"><span>            print diff
</span></span><span style="display:flex;"><span>            pads_num <span style="color:#f92672">=</span> steg_line<span style="color:#f92672">.</span>count(<span style="color:#e6db74">&#39;=&#39;</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> diff:
</span></span><span style="display:flex;"><span>                bin_str <span style="color:#f92672">+=</span> bin(diff)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>zfill(pads_num <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                bin_str <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">*</span> pads_num <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>            print goflag(bin_str)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">goflag</span>(bin_str):
</span></span><span style="display:flex;"><span>    res_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> xrange(<span style="color:#ae81ff">0</span>, len(bin_str), <span style="color:#ae81ff">8</span>):
</span></span><span style="display:flex;"><span>        res_str <span style="color:#f92672">+=</span> chr(int(bin_str[i:i <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>], <span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> res_str
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    solve_stego()
</span></span></code></pre></div><hr>
<p>base64隐写其实是利用base64编码原理的一个漏洞进行隐写来进行隐藏数据的一种隐写数据的方式。具体隐写原理和解密脚本，可以参照这篇博客：<a href="https://blog.csdn.net/qq_43431158/article/details/109525795">MISC | base64隐写_Lemon&rsquo;s blog-CSDN博客</a> 讲的很清楚，base64隐写其实也就那回事了。</p>
<h2 id="0x1-wustctf2020大数计算">0x1 [WUSTCTF2020]大数计算</h2>
<p>大数计算，应该是数学题目吧，看看吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag等于 wctf2020{Part1-Part2-Part3-Part4} 每一Part都为数的十六进制形式（不需要0x)，并用 &#39;-&#39; 连接
</span></span><span style="display:flex;"><span>Part1 = 2020*2019*2018* ... *3*2*1 的前8位
</span></span><span style="display:flex;"><span>Part2 = 520^1314 + 2333^666 的前8位
</span></span><span style="display:flex;"><span>Part3 = 宇宙终极问题的答案 x,y,z绝对值和的前8位
</span></span><span style="display:flex;"><span>Part4 = 见图片附件，计算结果乘上1314
</span></span></code></pre></div><p>感觉也不过如此嘛，解决思路还是比较简单的，采用数学计算加搜索引擎应该就解决了</p>
<p>不过还是根据题目写个完整的exp吧，采用sage脚本（由于涉及到的数学计算比较多，选择sagemath编写脚本会简单许多）：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>part1 <span style="color:#f92672">=</span>int(str(factorial(<span style="color:#ae81ff">2020</span>))[:<span style="color:#ae81ff">8</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>part2 <span style="color:#f92672">=</span>int(str((<span style="color:#ae81ff">520</span><span style="color:#f92672">**</span><span style="color:#ae81ff">1314</span>) <span style="color:#f92672">+</span> (<span style="color:#ae81ff">2333</span><span style="color:#f92672">**</span><span style="color:#ae81ff">666</span>))[:<span style="color:#ae81ff">8</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>x_ <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">80538738812075974</span>
</span></span><span style="display:flex;"><span>y_ <span style="color:#f92672">=</span> <span style="color:#ae81ff">80435758145817515</span>
</span></span><span style="display:flex;"><span>z_ <span style="color:#f92672">=</span> <span style="color:#ae81ff">12602123297335631</span>
</span></span><span style="display:flex;"><span>part3 <span style="color:#f92672">=</span>int(str(abs(x_)<span style="color:#f92672">+</span>abs(y_)<span style="color:#f92672">+</span>abs(z_))[:<span style="color:#ae81ff">8</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> var(x)
</span></span><span style="display:flex;"><span>f(x) <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>x
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> integral(f,x,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">22</span>)
</span></span><span style="display:flex;"><span>part4 <span style="color:#f92672">=</span> (result<span style="color:#f92672">+</span><span style="color:#ae81ff">36</span>)<span style="color:#f92672">*</span><span style="color:#ae81ff">1314</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;wctf2020{&#34;</span><span style="color:#f92672">+</span>hex(part1)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;-&#34;</span><span style="color:#f92672">+</span>hex(part2)[<span style="color:#ae81ff">2</span>:] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;-&#34;</span><span style="color:#f92672">+</span> hex(part3)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;-&#34;</span><span style="color:#f92672">+</span>hex(part4)[<span style="color:#ae81ff">2</span>:] <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;}&#34;</span>
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>使用sage运行一下，flag就有了：(中间的x,y,z是宇宙终极问题的解)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>wctf2020{24d231f-403cfd3-108db5e-a6d10}
</span></span></code></pre></div><h2 id="0x2-坏蛋是雷宾">0x2 坏蛋是雷宾</h2>
<p>看题目还是挺有意思的，看看题目具体是什么吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>老牌刺客之王混进了女王的住所。一天，女王得到了一个匿名举报，说她的侍卫里有一个刺客，叫做Rabin，而他的信息就在一份文件里，文件中有附带一个Pk，是523798549，密文是162853095，校验码二进制值是110001，根据说明是放在明文后一起加密的，明文与密文长度相同。加密算法和这位老牌刺客同名。快拯救女王，答案是求得的明文，进行32位md5小写哈希字符串，提交即可。 注意：得到的 flag 请包上 flag{} 提交
</span></span></code></pre></div><p>看到Rabin这个词汇，应该是比较敏感的，因为Rabin算法是一个非常有名的RSA扩展算法，这道题目应该考察的也是Rabin算法进行求解的。应该是使用一个Rabin算法，Rabin算法有很多轮子，可以直接搬来用，或者稍微修改修改也就能得到相应的结果。</p>
<p>题目中Pk就是n， 密文就是c，校验码二进制值是Rabin算法得出四个结果，四个结果的二进制值最后六位数字就是校验码二进制值。只有校验码二进制值与题目给出的校验码二进制值相符合的结果，才是本题的flag</p>
<p>而且题目中的n值非常小，可以直接进行分解。</p>
<p>这里给出一个小脚本求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">162853095</span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">49123</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">10663</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>r <span style="color:#f92672">=</span> pow(c,(p<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">4</span>,p)
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> pow(c,(q<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">/</span><span style="color:#ae81ff">4</span>,q)
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(p,q)
</span></span><span style="display:flex;"><span>b <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(q,p)
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span>(a<span style="color:#f92672">*</span>p<span style="color:#f92672">*</span>s<span style="color:#f92672">+</span>b<span style="color:#f92672">*</span>q<span style="color:#f92672">*</span>r)<span style="color:#f92672">%</span>n
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span>(a<span style="color:#f92672">*</span>p<span style="color:#f92672">*</span>s<span style="color:#f92672">-</span>b<span style="color:#f92672">*</span>q<span style="color:#f92672">*</span>r)<span style="color:#f92672">%</span>n
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m1 <span style="color:#f92672">=</span>  x<span style="color:#f92672">%</span>n
</span></span><span style="display:flex;"><span>m2 <span style="color:#f92672">=</span> (<span style="color:#f92672">-</span>x)<span style="color:#f92672">%</span>n
</span></span><span style="display:flex;"><span>m3 <span style="color:#f92672">=</span> y<span style="color:#f92672">%</span>n
</span></span><span style="display:flex;"><span>m4 <span style="color:#f92672">=</span> (<span style="color:#f92672">-</span>y)<span style="color:#f92672">%</span>n
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>yz <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;110001&#39;</span>
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> [m1,m2,m3,m4]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> result:
</span></span><span style="display:flex;"><span>    bin_i <span style="color:#f92672">=</span> bin(i)[<span style="color:#ae81ff">2</span>:]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>  bin_i[<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>:] <span style="color:#f92672">==</span> yz:
</span></span><span style="display:flex;"><span>        m <span style="color:#f92672">=</span> str(int(bin_i[:<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>],<span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>        flag <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5(m)<span style="color:#f92672">.</span>hexdigest()
</span></span><span style="display:flex;"><span>        print flag
</span></span></code></pre></div><p>运行脚本，就能拿到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>ca5cec442b2734735406d78c88e90f35
</span></span></code></pre></div><h2 id="0x3-hdctf2019together">0x3 [HDCTF2019]together</h2>
<p>看题目together，第一时间相到的应该是RSA题目的共模攻击，看看我的猜测对不对：</p>
<p>题目给出四个文件，两个公钥文件，两个明文文件。非常明显的是RSA共模攻击的题目，下面就是看看RSA公钥的modulus是否相同，就可以进一步确定是否是RSA共模攻击。</p>
<p>经过读取文件进行测试，发现两个公钥文件的modulus数值是一样的。</p>
<p>下面直接丢脚本求解吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.PublicKey <span style="color:#f92672">import</span> RSA
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_key</span>(key_file):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(key_file,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>        data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>        key <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>importKey(data)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> key
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_c</span>(flag_file):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">with</span> open(flag_file) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>        data <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>        c <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>s2n(base64<span style="color:#f92672">.</span>b64decode(data))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> c
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">common_modulus</span>(n,c1,c2,e1,e2):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span>(libnum<span style="color:#f92672">.</span>gcd(e1, e2))
</span></span><span style="display:flex;"><span>    _, s1, s2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>gcdext(e1, e2)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> s1 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        s1 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s1
</span></span><span style="display:flex;"><span>        c1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c1,n)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> s2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        s2 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s2
</span></span><span style="display:flex;"><span>        c2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c2,n)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> pow(c1,s1,n) <span style="color:#f92672">*</span> pow(c2,s2,n) <span style="color:#f92672">%</span> n
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>key1 <span style="color:#f92672">=</span> get_key(<span style="color:#e6db74">&#34;pubkey1.pem&#34;</span>)
</span></span><span style="display:flex;"><span>key2 <span style="color:#f92672">=</span> get_key(<span style="color:#e6db74">&#34;pubkey2.pem&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span>(key1<span style="color:#f92672">.</span>n <span style="color:#f92672">==</span> key2<span style="color:#f92672">.</span>n)
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> key1<span style="color:#f92672">.</span>n
</span></span><span style="display:flex;"><span>e1 <span style="color:#f92672">=</span> key1<span style="color:#f92672">.</span>e
</span></span><span style="display:flex;"><span>e2 <span style="color:#f92672">=</span> key2<span style="color:#f92672">.</span>e
</span></span><span style="display:flex;"><span>c1 <span style="color:#f92672">=</span> get_c(<span style="color:#e6db74">&#34;myflag1&#34;</span>)
</span></span><span style="display:flex;"><span>c2 <span style="color:#f92672">=</span> get_c(<span style="color:#e6db74">&#34;myflag2&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> common_modulus(n,c1,c2,e1,e2)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，就能得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{23re_SDxF_y78hu_5rFgS}
</span></span></code></pre></div><h2 id="0x4-mrctf2020babyrsa">0x4 [MRCTF2020]babyRSA</h2>
<p>RSA题目，应该会有点意思，看看题目具体是什么：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> sympy
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> gmpy2 <span style="color:#f92672">import</span> gcd, invert
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> getPrime, isPrime, getRandomNBitInteger, bytes_to_long, long_to_bytes
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> z3 <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;MRCTF</span><span style="color:#e6db74">{xxxx}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>base <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">GCD</span>(A):
</span></span><span style="display:flex;"><span>    B <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, len(A)):
</span></span><span style="display:flex;"><span>        B <span style="color:#f92672">=</span> gcd(A[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>], A[i])
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> B
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gen_p</span>():
</span></span><span style="display:flex;"><span>    P <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">17</span>)]
</span></span><span style="display:flex;"><span>    P[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">128</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">17</span>):
</span></span><span style="display:flex;"><span>        P[i] <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(P[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;P_p :&#34;</span>, P[<span style="color:#ae81ff">9</span>])
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">17</span>):
</span></span><span style="display:flex;"><span>        n <span style="color:#f92672">*=</span> P[i]
</span></span><span style="display:flex;"><span>    p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>    factor <span style="color:#f92672">=</span> pow(p, base, n)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;P_factor :&#34;</span>, factor)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sympy<span style="color:#f92672">.</span>nextprime(p)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gen_q</span>():
</span></span><span style="display:flex;"><span>    sub_Q <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>    Q_1 <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>    Q_2 <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>    Q <span style="color:#f92672">=</span> sub_Q <span style="color:#f92672">**</span> Q_2 <span style="color:#f92672">%</span> Q_1
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Q_1: &#34;</span>, Q_1)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Q_2: &#34;</span>, Q_2)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;sub_Q: &#34;</span>, sub_Q)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sympy<span style="color:#f92672">.</span>nextprime(Q)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    _E <span style="color:#f92672">=</span> base
</span></span><span style="display:flex;"><span>    _P <span style="color:#f92672">=</span> gen_p()
</span></span><span style="display:flex;"><span>    _Q <span style="color:#f92672">=</span> gen_q()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span> (gcd(_E, (_P <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> (_Q <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    _M <span style="color:#f92672">=</span> bytes_to_long(flag)
</span></span><span style="display:flex;"><span>    _C <span style="color:#f92672">=</span> pow(_M, _E, _P <span style="color:#f92672">*</span> _Q)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Ciphertext = &#34;</span>, _C)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">P_p : 206027926847308612719677572554991143421
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">P_factor : 213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Q_1:  103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Q_2:  151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">sub_Q:  168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Ciphertext =  1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span></code></pre></div><p>一个python文件，应该是这道题目的求解关键，考察的应该就是对于加密算法的审计和算法的逆向运算咯，开始搞吧！</p>
<p>核心代码应该就是这个：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    _E <span style="color:#f92672">=</span> base
</span></span><span style="display:flex;"><span>    _P <span style="color:#f92672">=</span> gen_p()
</span></span><span style="display:flex;"><span>    _Q <span style="color:#f92672">=</span> gen_q()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span> (gcd(_E, (_P <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> (_Q <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    _M <span style="color:#f92672">=</span> bytes_to_long(flag)
</span></span><span style="display:flex;"><span>    _C <span style="color:#f92672">=</span> pow(_M, _E, _P <span style="color:#f92672">*</span> _Q)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Ciphertext = &#34;</span>, _C)
</span></span></code></pre></div><p>根据核心代码，可以找到：</p>
<p><code>base</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>base <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span></code></pre></div><p><code>gen_p()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gen_p</span>():
</span></span><span style="display:flex;"><span>    P <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span> <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">17</span>)]
</span></span><span style="display:flex;"><span>    P[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">128</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">17</span>):
</span></span><span style="display:flex;"><span>        P[i] <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(P[i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;P_p :&#34;</span>, P[<span style="color:#ae81ff">9</span>])
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">17</span>):
</span></span><span style="display:flex;"><span>        n <span style="color:#f92672">*=</span> P[i]
</span></span><span style="display:flex;"><span>    p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>    factor <span style="color:#f92672">=</span> pow(p, base, n)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;P_factor :&#34;</span>, factor)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sympy<span style="color:#f92672">.</span>nextprime(p)
</span></span></code></pre></div><p><code>gen_q()</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gen_q</span>():
</span></span><span style="display:flex;"><span>    sub_Q <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>    Q_1 <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>    Q_2 <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>    Q <span style="color:#f92672">=</span> sub_Q <span style="color:#f92672">**</span> Q_2 <span style="color:#f92672">%</span> Q_1
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Q_1: &#34;</span>, Q_1)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Q_2: &#34;</span>, Q_2)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;sub_Q: &#34;</span>, sub_Q)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sympy<span style="color:#f92672">.</span>nextprime(Q)
</span></span></code></pre></div><p>核心代码就是这些，然后看看具体的输出结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">P_p : 206027926847308612719677572554991143421
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">P_factor : 213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Q_1:  103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Q_2:  151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">sub_Q:  168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Ciphertext =  1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span></code></pre></div><p>分析核心代码后，可以大致推导出来：
$$
P = \text{nextprime}(p^{base} \text{mod}n)
$$</p>
<p>$$
Q = sub_Q ^ {Q_2} \text{mod}Q_1
$$</p>
<p>$$
C = M^E \text{mod}(P\times Q)
$$</p>
<p>根据算法泄露出来的数据，进行还原数据<code>P</code>和<code>Q</code> ，然后根据<code>p</code>和<code>Q</code>的数值进行正常的RSA解密运算，这道题目就over了。</p>
<p>下面给出完整的EXP：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> sympy
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>P_p <span style="color:#f92672">=</span> <span style="color:#ae81ff">206027926847308612719677572554991143421</span>
</span></span><span style="display:flex;"><span>P_factor <span style="color:#f92672">=</span> <span style="color:#ae81ff">213671742765908980787116579976289600595864704574134469173111790965233629909513884704158446946409910475727584342641848597858942209151114627306286393390259700239698869487469080881267182803062488043469138252786381822646126962323295676431679988602406971858136496624861228526070581338082202663895710929460596143281673761666804565161435963957655012011051936180536581488499059517946308650135300428672486819645279969693519039407892941672784362868653243632727928279698588177694171797254644864554162848696210763681197279758130811723700154618280764123396312330032986093579531909363210692564988076206283296967165522152288770019720928264542910922693728918198338839</span>
</span></span><span style="display:flex;"><span>Q_1 <span style="color:#f92672">=</span>  <span style="color:#ae81ff">103766439849465588084625049495793857634556517064563488433148224524638105971161051763127718438062862548184814747601299494052813662851459740127499557785398714481909461631996020048315790167967699932967974484481209879664173009585231469785141628982021847883945871201430155071257803163523612863113967495969578605521</span>
</span></span><span style="display:flex;"><span>Q_2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">151010734276916939790591461278981486442548035032350797306496105136358723586953123484087860176438629843688462671681777513652947555325607414858514566053513243083627810686084890261120641161987614435114887565491866120507844566210561620503961205851409386041194326728437073995372322433035153519757017396063066469743</span>
</span></span><span style="display:flex;"><span>sub_Q <span style="color:#f92672">=</span> <span style="color:#ae81ff">168992529793593315757895995101430241994953638330919314800130536809801824971112039572562389449584350643924391984800978193707795909956472992631004290479273525116959461856227262232600089176950810729475058260332177626961286009876630340945093629959302803189668904123890991069113826241497783666995751391361028949651</span>
</span></span><span style="display:flex;"><span>Ciphertext <span style="color:#f92672">=</span> <span style="color:#ae81ff">1709187240516367141460862187749451047644094885791761673574674330840842792189795049968394122216854491757922647656430908587059997070488674220330847871811836724541907666983042376216411561826640060734307013458794925025684062804589439843027290282034999617915124231838524593607080377300985152179828199569474241678651559771763395596697140206072537688129790126472053987391538280007082203006348029125729650207661362371936196789562658458778312533505938858959644541233578654340925901963957980047639114170033936570060250438906130591377904182111622236567507022711176457301476543461600524993045300728432815672077399879668276471832</span>
</span></span><span style="display:flex;"><span>base <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>_Q <span style="color:#f92672">=</span>sympy<span style="color:#f92672">.</span>nextprime(pow(sub_Q,Q_2,Q_1))
</span></span><span style="display:flex;"><span>P <span style="color:#f92672">=</span> [<span style="color:#66d9ef">None</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">17</span>
</span></span><span style="display:flex;"><span>P[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> P_p
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">9</span>):
</span></span><span style="display:flex;"><span>    P[<span style="color:#ae81ff">9</span><span style="color:#f92672">-</span>(i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)] <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>prevprime(P[<span style="color:#ae81ff">9</span><span style="color:#f92672">-</span>i])
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">16</span>):
</span></span><span style="display:flex;"><span>    P[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(P[i])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>P_phi <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>P_n <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> P:
</span></span><span style="display:flex;"><span>    P_n <span style="color:#f92672">*=</span> i
</span></span><span style="display:flex;"><span>    P_phi <span style="color:#f92672">*=</span> (i<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span>(libnum<span style="color:#f92672">.</span>gcd(base,P_phi)<span style="color:#f92672">==</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>P_d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(base,P_phi)
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> pow(P_factor, P_d, P_n)
</span></span><span style="display:flex;"><span>_P <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(p)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (_Q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> (_P<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> _Q <span style="color:#f92672">*</span> _P
</span></span><span style="display:flex;"><span>_E <span style="color:#f92672">=</span> base
</span></span><span style="display:flex;"><span>_D <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(_E,phi)
</span></span><span style="display:flex;"><span>_M <span style="color:#f92672">=</span> pow(Ciphertext, _D, n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(_M)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行一下脚本，flag就出来了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>MRCTF{sti11_@_b@by_qu3st10n}
</span></span></code></pre></div><h2 id="0x5-网鼎杯-2020-青龙组you_raise_me_up">0x5 [网鼎杯 2020 青龙组]you_raise_me_up</h2>
<p>题目目前看不出什么提示来，直接看题目吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/env python</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># -*- coding: utf-8 -*-</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">512</span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">2</span>, n<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">|</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> pow(m, bytes_to_long(flag), n)
</span></span><span style="display:flex;"><span>print <span style="color:#e6db74">&#39;m = &#39;</span> <span style="color:#f92672">+</span> str(m)
</span></span><span style="display:flex;"><span>print <span style="color:#e6db74">&#39;c = &#39;</span> <span style="color:#f92672">+</span> str(c)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span>
</span></span></code></pre></div><p>非常简单的一个小脚本，但是脚本过程中的加密过程有些特别，麻雀虽小五脏俱全。真可谓浓缩的都是精华，看看大致的加密过程吧：
$$
n = 2^{512}
$$</p>
<p>$$
c = m^{\text{bytes_to_long(flag)}}\text{mod}n
$$</p>
<p>一时半会儿看不出怎么进行求解，求助了下大佬的博客，发现这道题目考察的是一个离散对数问题，即：
$$
\text{bytes_to_long(flag)} = log_{(m\ \text{mod}\ n)} (c\ \text{mod}\ n)
$$
对于这种离散对数的问题，可以使用sage求解，这里使用sage脚本进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">512</span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#ae81ff">391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499</span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(int(discrete_log(c,mod(m,n))))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>非常简单的脚本，运行一下flag就有了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{5f95ca93-1594-762d-ed0b-a9139692cb4a}
</span></span></code></pre></div><h2 id="0x6-bjdctf2020polybius">0x6 [BJDCTF2020]Polybius</h2>
<p>看题目应该是Polybius密码，一种古典密码。看一下题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>密文：ouauuuoooeeaaiaeauieuooeeiea
</span></span><span style="display:flex;"><span>hint：VGhlIGxlbmd0aCBvZiB0aGlzIHBsYWludGV4dDogMTQ=
</span></span><span style="display:flex;"><span>flag:解出明文后，请加上BJD{}
</span></span></code></pre></div><p>波利比奥斯方阵密码，也叫ADFGX密码，一种棋盘密码，解密方式也相对比较简单。因为是一种棋盘密码，也就是根据方阵进行加密。</p>
<p>对hint进行解密，得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>The length of this plaintext: 14
</span></span></code></pre></div><p>密文长度是14x2位，更是说明了这是Polybius方阵密码。不过观察密文内容，发现是aeiou五个字母的重复出现而不是adfgx五个字母的反复出现，因此暂时找不到良好的对应关系，只得进行爆破求解，然后从解出的结果中找到flag。借网上的一个<a href="https://www.cnblogs.com/labster/p/13842837.html">脚本</a>稍微修改一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> itertools
</span></span><span style="display:flex;"><span>ciper <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;ouauuuoooeeaaiaeauieuooeeiea&#39;</span>
</span></span><span style="display:flex;"><span>head <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;aeoiu&#39;</span>
</span></span><span style="display:flex;"><span>headlist <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>num_headlist <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> itertools<span style="color:#f92672">.</span>permutations(head,<span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> x:
</span></span><span style="display:flex;"><span>    temp <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(i)
</span></span><span style="display:flex;"><span>    headlist<span style="color:#f92672">.</span>append(temp)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> headlist:
</span></span><span style="display:flex;"><span>    temp <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> ciper:
</span></span><span style="display:flex;"><span>        temp <span style="color:#f92672">+=</span> str(i<span style="color:#f92672">.</span>index(j) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    num_headlist<span style="color:#f92672">.</span>append(temp)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> num_headlist:
</span></span><span style="display:flex;"><span>    temp <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,len(i),<span style="color:#ae81ff">2</span>):
</span></span><span style="display:flex;"><span>        xx <span style="color:#f92672">=</span> (int(i[j]) <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span><span style="color:#ae81ff">5</span> <span style="color:#f92672">+</span> int(i[j<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]) <span style="color:#f92672">+</span> <span style="color:#ae81ff">96</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> xx<span style="color:#f92672">&gt;</span>ord(<span style="color:#e6db74">&#39;i&#39;</span>):
</span></span><span style="display:flex;"><span>            xx<span style="color:#f92672">+=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        temp <span style="color:#f92672">+=</span> chr(xx)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;flag&#39;</span> <span style="color:#f92672">in</span> temp:
</span></span><span style="display:flex;"><span>        print temp
</span></span></code></pre></div><p>运行一下脚本，flag就有了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flagispolybius
</span></span><span style="display:flex;"><span>flagkxoplubkyx
</span></span></code></pre></div><h2 id="0x7-wustctf2020情书">0x7 [WUSTCTF2020]情书</h2>
<p>看样子好像挺有意思的样子，看看题目吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Premise: Enumerate the alphabet by 0、1、2、.....  、25
</span></span><span style="display:flex;"><span>Using the RSA system 
</span></span><span style="display:flex;"><span>Encryption:0156 0821 1616 0041 0140 2130 1616 0793
</span></span><span style="display:flex;"><span>Public Key:2537 and 13
</span></span><span style="display:flex;"><span>Private Key:2537 and 937
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag: wctf2020{Decryption}
</span></span></code></pre></div><p>看样子是一个小rsa题目，题目公钥和私钥都告知了，密文也有，应该是比较简单的题目。</p>
<p>题目文件第一行提示了是得到的数字是根据字母表的顺序排列，0-25的样子，应该是每段加密的文段进行解密后都是一个数字，数字映射到字母表中就是相应的密码了。</p>
<p>写个简单的脚本就可以处理了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>letters <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>lowercase
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;0156 0821 1616 0041 0140 2130 1616 0793&#34;</span>
</span></span><span style="display:flex;"><span>c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>N <span style="color:#f92672">=</span> <span style="color:#ae81ff">2537</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">13</span>
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> <span style="color:#ae81ff">937</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(letters[pow(int(i),d,N)] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list)
</span></span><span style="display:flex;"><span>print m
</span></span></code></pre></div><p>运行脚本，即可得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>iloveyou
</span></span></code></pre></div><h2 id="0x8-bjdctf2020编码与调制">0x8 [BJDCTF2020]编码与调制</h2>
<p>看题目，这道题目应该是通信的题目。</p>
<p>看看题目内容吧：</p>
<p>两个文件，一个题目求解内容和一个提示图片</p>
<p>题目内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>密文：2559659965656A9A65656996696965A6695669A9695A699569666A5A6A6569666A59695A69AA696569666AA6
</span></span></code></pre></div><p>提示图片：</p>
<p>![I&rsquo;m hint!!!](/images/BUUCTF-CRYPTO-6_writeup/I&rsquo;m hint!!!.png)</p>
<p>大致看一下图片，应该是曼彻斯特编码进行编码的调制。但是题目有两种可能的结果，一种是曼彻斯特编码，另一种就是差分曼彻斯特编码。由于不知道这道题目要求求解的那种编码，只能分别解码。</p>
<p>写个脚本进行测试：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x2559659965656A9A65656996696965A6695669A9695A699569666A5A6A6569666A59695A69AA696569666AA6</span>
</span></span><span style="display:flex;"><span>c_bin <span style="color:#f92672">=</span> bin(c)[<span style="color:#ae81ff">2</span>:]
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,len(c_bin),<span style="color:#ae81ff">2</span>):
</span></span><span style="display:flex;"><span>    test <span style="color:#f92672">=</span> c_bin[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> test <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;10&#34;</span>:
</span></span><span style="display:flex;"><span>        m <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;1&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> test <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;01&#34;</span>:
</span></span><span style="display:flex;"><span>        m <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print libnum<span style="color:#f92672">.</span>n2s(int(m,<span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Dif_m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>,len(c_bin),<span style="color:#ae81ff">3</span>):
</span></span><span style="display:flex;"><span>    test <span style="color:#f92672">=</span> c_bin[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (test <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;00&#34;</span> <span style="color:#f92672">or</span> test <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;11&#34;</span>):
</span></span><span style="display:flex;"><span>        Dif_m <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;1&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> (test <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;10&#34;</span> <span style="color:#f92672">or</span> test <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;01&#34;</span>):
</span></span><span style="display:flex;"><span>        Dif_m <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;0&#34;</span>
</span></span><span style="display:flex;"><span>print libnum<span style="color:#f92672">.</span>n2s(int(Dif_m,<span style="color:#ae81ff">2</span>))
</span></span></code></pre></div><p>运行发现，编码是Manchester编码，而不是差分Manchester编码。得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BJD{DifManchestercode}
</span></span></code></pre></div><h2 id="0x9-actf新生赛crypto-classic1">0x9 [ACTF新生赛]crypto-classic1</h2>
<p>看样子是古典密码学题目没错了，看看都有些什么东西吧：</p>
<p>两个文件，一个提示文件，一个加密的压缩文件。提示文件应该是用来解密压缩文件的。</p>
<p>hint.txt</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>哇，这里有压缩包的密码哦，于是我低下了头，看向了我的双手，试图从中找到某些规律
</span></span><span style="display:flex;"><span>xdfv ujko98 edft54 xdfv pok,.; wsdr43
</span></span></code></pre></div><p>仔细观察一下，发现是非常有规律的，就是键盘密码，观察一下键盘就可以得到结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>circle
</span></span></code></pre></div><p>这应该就是压缩文件的密码，进行解密得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>SRLU{OWSI_S_RDPKHARSA_NXYTFTJT}
</span></span></code></pre></div><p>由于压缩文件名是<code>vigenere.zip</code>, 应该是维吉尼亚密码，根据题目的特点进行观察发现SRLU是对应着ACTF，密钥应该是就是sp。求解得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>ACTF{WHAT_A_CLASSICAL_VIGENERE}
</span></span></code></pre></div><hr>
<p>buu的题目好像是错误，buu给到的 SRLU{LZPL_S_UASHKXUPD_NXYTFTJT}</p>
<p>正确的的数据是 SRLU{OWSI_S_RDPKHARSA_NXYTFTJT}</p>
<h2 id="0xa-utctf2020basic-crypto">0xA [UTCTF2020]basic-crypto</h2>
<p>看样子应该是一道古典密码学的题目，应该是层层套娃的。</p>
<p>看看题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>01010101 01101000 00101101 01101111 01101000 00101100 00100000 01101100 01101111 01101111 01101011 01110011 00100000 01101100 01101001 01101011 01100101 00100000 01110111 01100101 00100000 01101000 01100001 01110110 01100101 00100000 01100001 01101110 01101111 01110100 01101000 01100101 01110010 00100000 01100010 01101100 01101111 01100011 01101011 00100000 01101111 01100110 00100000 01110100 01100101 01111000 01110100 00101100 00100000 01110111 01101001 01110100 01101000 00100000 01110011 01101111 01101101 01100101 00100000 01110011 01101111 01110010 01110100 00100000 01101111 01100110 00100000 01110011 01110000 01100101 01100011 01101001 01100001 01101100 00100000 01100101 01101110 01100011 01101111 01100100 01101001 01101110 01100111 00101110 00100000 01000011 01100001 01101110 00100000 01111001 01101111 01110101 00100000 01100110 01101001 01100111 01110101 01110010 01100101 00100000 01101111 01110101 01110100 00100000 01110111 01101000 01100001 01110100 00100000 01110100 01101000 01101001 01110011 00100000 01100101 01101110 01100011 01101111 01100100 01101001 01101110 01100111 00100000 01101001 01110011 00111111 00100000 00101000 01101000 01101001 01101110 01110100 00111010 00100000 01101001 01100110 00100000 01111001 01101111 01110101 00100000 01101100 01101111 01101111 01101011 00100000 01100011 01100001 01110010 01100101 01100110 01110101 01101100 01101100 01111001 00101100 00100000 01111001 01101111 01110101 00100111 01101100 01101100 00100000 01101110 01101111 01110100 01101001 01100011 01100101 00100000 01110100 01101000 01100001 01110100 00100000 01110100 01101000 01100101 01110010 01100101 00100000 01101111 01101110 01101100 01111001 00100000 01100011 01101000 01100001 01110010 01100001 01100011 01110100 01100101 01110010 01110011 00100000 01110000 01110010 01100101 01110011 01100101 01101110 01110100 00100000 01100001 01110010 01100101 00100000 01000001 00101101 01011010 00101100 00100000 01100001 00101101 01111010 00101100 00100000 00110000 00101101 00111001 00101100 00100000 01100001 01101110 01100100 00100000 01110011 01101111 01101101 01100101 01110100 01101001 01101101 01100101 01110011 00100000 00101111 00100000 01100001 01101110 01100100 00100000 00101011 00101110 00100000 01010011 01100101 01100101 00100000 01101001 01100110 00100000 01111001 01101111 01110101 00100000 01100011 01100001 01101110 00100000 01100110 01101001 01101110 01100100 00100000 01100001 01101110 00100000 01100101 01101110 01100011 01101111 01100100 01101001 01101110 01100111 00100000 01110100 01101000 01100001 01110100 00100000 01101100 01101111 01101111 01101011 01110011 00100000 01101100 01101001 01101011 01100101 00100000 01110100 01101000 01101001 01110011 00100000 01101111 01101110 01100101 00101110 00101001 00001010 01010100 01101101 01010110 00110011 01001001 01000111 01001110 01101111 01011001 01010111 01111000 01110011 01011010 01010111 00110101 01101110 01011010 01010011 01000101 01100111 01010001 00110010 01000110 01110101 01001001 01001000 01101100 01110110 01100100 01010011 01000010 01101101 01100001 01010111 01100100 00110001 01100011 01101101 01010101 01100111 01100010 00110011 01010110 00110000 01001001 01001000 01100100 01101111 01011001 01011000 01010001 01101110 01100011 01111001 01000010 01101110 01100010 00110010 01101100 01110101 01011010 01111001 01000010 01110110 01100010 01101001 01000010 01101111 01011010 01011000 01001010 01101100 01010000 01111001 01000010 01001010 01100100 01000011 01000010 01110011 01100010 00110010 00111001 01110010 01100011 01111001 01000010 01110011 01100001 01010111 01110100 01101100 01001001 01001000 01010010 01101111 01011010 01010011 01000010 01110011 01011010 01011000 01010010 00110000 01011010 01011000 01001010 01111010 01001001 01000111 01000110 01111001 01011010 01010011 01000010 01111010 01100001 01000111 01101100 01101101 01100100 01000111 01010110 01101011 01001001 01000111 01001010 00110101 01001001 01001000 01001110 01110110 01100010 01010111 01010101 01100111 01011001 00110010 00111001 01110101 01100011 00110011 01010010 01101000 01100010 01101110 01010001 01110101 01001001 01000011 01101000 01101111 01100001 01010111 00110101 00110000 01001111 01101001 01000010 00110101 01100010 00110011 01010101 01100111 01100010 01010111 01101100 01101110 01100001 01001000 01010001 01100111 01100100 00110010 01000110 01110101 01100100 01000011 01000010 00110000 01100010 01111001 01000010 01111010 01100100 01000111 01000110 01111001 01100100 01000011 01000010 01110011 01100010 00110010 00111001 01110010 01100001 01010111 00110101 01101110 01001001 01001000 01010110 01110111 01001001 01000110 01001010 01110110 01100010 01010111 01000110 01110101 01001001 01001000 01000010 01101100 01100010 00110011 01000010 01110011 01011010 01010011 01101011 01110101 01000011 01101101 01110100 00110010 01011001 01101110 01001110 01111000 01100011 01101101 01010001 01110011 01001001 01000111 01101100 00110101 01011010 01010011 01100100 01101001 01100010 01111001 01000010 01110010 01100100 01101110 01100100 00110101 01011001 00110010 01010001 01100111 01011010 01001000 01001010 01110110 01011001 01101101 00111000 01101000 01001001 01000110 01101000 00110101 01011010 01111001 01000010 01110111 01100101 01010111 01001001 01100111 01011010 01001000 01001010 01110110 01001001 01001000 01000010 01111010 01100101 01000111 01110100 00110010 01001001 01000011 01101000 01110010 01100101 01000111 00110100 01100111 01100100 00110010 01110100 01110000 01100010 01000111 00111000 01100111 01011010 01001000 01001010 01110110 01001001 01001000 01001010 01110010 01011001 01101101 00110101 01110110 01011001 00110010 01010001 01110101 01001100 01101001 00110100 01110000 01001001 01001000 01110000 01110010 01011001 01101101 01010001 00110110 01001001 01000111 01110011 01100111 01011001 00110010 01010110 01110011 01011001 00110010 01010010 01111010 01011010 01000111 01010110 01101011 01100011 00110011 01101100 00110100 01001001 01000111 00110001 01111010 01100101 01101110 01001010 01110110 01011001 01101001 00110100 01100111 01010101 00110011 01100111 01100111 01011010 01001000 01001010 01110110 01001001 01001000 01000010 00110101 01100100 01101110 01011010 00110101 01011010 00110011 01001110 00110100 01100011 01010011 01000010 01101011 01100010 00110010 01101000 01101011 01001100 01000011 01000010 01010100 01001010 00110010 01011010 01110110 01001001 01000111 01010010 01110010 01100100 01010111 00111001 00110100 01001001 01001000 01100100 01110000 01001001 01001000 01100100 01110110 01011001 00110010 01001110 01110010 01100011 01010111 00111000 01100111 01100001 00110011 01101000 01110101 01001001 01000111 01001010 01110110 01100101 01101110 01011010 01110010 01100010 01010111 00111001 01110101 01001001 01000111 00111001 01101101 01100010 00110010 01001010 01110000 01001001 01000111 01110100 00110010 01100101 01101110 01001010 01110010 01100010 01000111 00111001 01101011 01100011 00110010 00110000 01100111 01100010 01011000 01001010 01110010 01011001 01101101 01110100 01110100 01011010 01000111 00111001 01101001 01001001 01000111 01100100 01111010 01011010 01001000 01001001 01100111 01100001 01111001 01000010 01110100 01100101 01010111 01001010 01101001 01100010 00110010 01001110 00110110 01100101 01011000 01101000 01110101 01100010 00110011 01101000 01110100 01100010 01111001 01000010 01101011 01100101 01010011 01000010 01110010 01001001 01000111 00110101 01111010 01100011 01001000 01000010 01110110 01011001 01101101 00111001 00110100 01011010 01000011 01000010 01110100 01100011 01101101 01110100 01101001 01100001 00110010 00110001 01101011 01100010 00110010 01001001 01100111 01001100 01010011 01000010 00110001 01100101 01001000 01101100 01101110 01100101 01000011 01000010 01110010 01011001 01111001 01000010 01110010 01001001 01000111 01001110 01101100 01100010 01000111 01001110 01101011 01100011 00110010 01010010 01101100 01011010 01001000 01001110 00110101 01100101 01000011 01000010 01110100 01100011 00110011 01110000 01111001 01100010 00110010 01001001 01110101 01001001 01000101 00110001 01110010 01100101 01000011 01000010 01110000 01100101 01010111 01010101 01100111 01100011 01001000 01001110 00110100 01100010 01101001 01000010 01101011 01100011 01101101 00111000 01100111 01100011 01001000 01001110 00110100 01100001 00110011 01011001 01100111 01100011 01001000 01011010 01110010 01100011 01010100 00111000 01100111 01100011 01101110 01001110 00110100 01011010 01000100 01101111 01100111 01010010 00110010 00111000 01100111 01100100 01011000 01101000 00110101 01011010 01111001 01000010 01101011 01100011 01101101 01110100 01101011 01001001 01000111 01010010 01111001 01100010 01111001 01000010 01110111 01100100 01101101 01110100 01111000 01001001 01001000 01001110 01101010 01001001 01001000 01000110 00110101 01100011 00110011 01101000 01111000 01001001 01000111 01010010 00110101 01001001 01000111 01111000 01110110 01001001 01001000 01101100 01110111 01001001 01000111 01010010 01111001 01100010 01111001 01000010 01110111 01100101 01010111 01001010 00110011 01100001 00110010 01010001 01100111 01011010 01010111 01010010 01110111 01100100 01101101 01110100 01111000 01100101 01111001 00110100 01110101 01001100 01101110 00110000 01100111 01001100 01010011 01000010 01101110 01100011 01101110 01001110 01110100 01100011 01101001 01000010 00110011 01100010 00110010 01110100 00110100 01011001 01111001 01000010 01101011 01100011 01101101 01110100 01101011 01001001 01001000 01001110 01110111 01001001 01000111 01101100 00110101 01011010 01010011 01000010 01101010 01100010 00110010 00111000 01100111 01011010 01001000 01001010 01110010 01011010 01000011 01000010 00110110 01100001 00110010 01010010 01101011 01100010 00110010 01001010 00110100 01001100 01000011 01000010 01110000 01100101 01010111 01010101 01100111 01100100 01011000 01101000 00110101 01011010 01111001 01000010 01101110 01100011 01101101 01110100 01101011 01001001 01000111 01010010 01111001 01100010 01111001 01000010 01110100 01100101 01010111 01001010 01101001 01100010 00110010 01001110 00110110 01100101 01011000 01101000 01110101 01100010 00110011 01101000 01110100 01100010 00110010 01001101 01100111 01100011 01001000 01101100 01101001 01001001 01000111 01010101 01110011 01001001 01000111 01010001 01110011 01001001 01001000 01000001 01110011 01001001 01001000 01011001 01100111 01100001 01111001 01110111 01100111 01100001 00110011 01101000 01110101 01001001 01001000 01000101 01100111 01100001 00110010 01001010 01110110 01001100 01101001 01000010 01001010 01100101 01010111 01010101 01100111 01100010 01010111 01110100 00110100 01001001 01001000 01110000 01101001 01100101 01010111 01111000 01110010 01100010 01001000 01011010 01110000 01001001 01000111 01100100 00110101 01011001 01101110 01010101 01100111 01100101 01010111 01010110 01101011 01001001 01000111 01010010 01111001 01100010 01111001 01000010 01101001 01100010 00110011 01100100 01110010 01100011 00110011 01101000 01111010 01100101 01001000 01000101 01100111 01100010 01011000 01001010 01110010 01011001 01101101 01110100 01110100 01011010 01000111 00111001 01101001 01011001 01111001 01000010 01110011 01100001 01010011 01000010 01101001 01100010 00110011 01110000 00110010 01100001 00110010 00110001 01111010 01100101 01001000 01000101 01100111 01011010 01001000 01001010 01110110 01100100 01111001 01000010 01110010 01100101 01000111 00110100 01100111 01100011 00110011 01101000 01110111 01100010 00110010 01001010 01101001 01100011 00110011 01101000 01111000 01001001 01000111 00110001 00110101 01100100 00110011 01100100 00110101 01100101 01000011 01000010 01101110 01100101 01010111 01001010 01110101 01011001 01111001 01000010 01111010 01100101 01000011 01000010 01101011 01100011 01101101 00111000 01100111 01010100 00110011 01101000 01111000 01100100 01101110 01001110 01101010 01100011 01101001 01000010 00110010 01100001 00110011 01101000 01111000 01011010 01010111 01110100 01111000 01100010 01111001 00110100 01100111 01010011 00110011 01101000 00110101 01011010 01001000 01001010 01110110 01011001 01101001 01000010 01111000 01011001 01101101 00111001 01110010 01011010 01000011 01000010 00110011 01100010 00110010 01010010 01111001 01100101 01010111 00110100 01100111 01100011 00110010 01001101 01100111 01011010 01001000 01101011 01100111 01011010 01010111 01001110 01110110 01001001 01001000 01000010 01101001 01100010 00110010 01000110 01101100 01100010 00110011 01101000 01110100 01100001 01010011 01000010 01110010 01100101 01000111 01110100 00110010 01100001 01010111 01001110 01111010 01011001 01111010 01101111 01100111 01011010 00110010 00111000 01100111 01100100 01011000 01101000 00110101 01011010 01111001 01000010 01101011 01100011 01101101 01110100 01101011 01001001 01000011 01100100 01110110 01001010 01111001 01000010 01101010 01100011 01101110 01101100 01101110 01011001 01111001 01000010 01101100 01100101 01101001 01000010 00110011 01100101 01010111 01001110 01101011 01001001 01001000 01101100 01110111 01011010 01000111 00111001 00110100 01001001 01001000 01001110 00110100 01001001 01000111 01010010 01111001 01100010 01111001 01000010 01110010 01100100 01101110 01110000 01111001 01100001 00110010 01111000 01110110 01011010 01000011 01110111 01100111 01011001 00110011 01101011 01100111 01011010 01001000 01001010 01110010 01011010 01000011 01100100 01101010 01001001 01001000 01110000 01101001 01100101 01010111 01111000 01110010 01100010 01001000 01011010 01110000 01001001 01000111 01010010 01111001 01100010 01111001 01000010 00110011 01100101 01010111 01001110 01101011 01001001 01000111 00110001 00110101 01100100 00110011 01100100 00110101 01100101 01000011 01000010 01110100 01100011 01101101 01110100 01101001 01100001 00110010 00110001 01101011 01100010 00110010 01001001 01100111 01100011 00110011 01100111 01100111 01011010 01001000 01001010 01110110 01001001 01000111 01010010 01110110 01100001 01000111 01010001 01110011 01001001 01001000 01000010 00110101 01100100 01101110 01011010 00110101 01011010 00110010 00111001 01110101 01001001 01000111 01111000 01110000 01001001 01000011 01100100 01101011 01001010 01111001 01110111 01100111 01100001 00110011 01101000 01110101 01001001 01000111 01001110 00110101 01001001 01001000 01101100 00110100 01001100 01101001 01000010 01011010 01100101 01000111 00110001 01110110 01001001 01000111 01101100 00110101 01011010 01010011 01000010 00110001 01100101 01001000 01101100 01101110 01001001 01000111 01110011 01100111 01100011 01000111 00111001 01101110 01001001 01000111 00110001 01111001 01100001 00110010 01001010 01110010 01100010 01010111 01010010 01110110 01011001 01101101 01001101 01110011 01001001 01000111 01101100 00110101 01011010 01010011 01000010 01110100 01100001 00110011 01100111 01100111 01100011 00110011 01101000 01110111 01100010 00110010 01001001 01100111 01011010 01001000 01001010 01110110 01001001 01000111 01001010 01110110 01011001 00110010 01010001 01100111 01100101 01011000 01000001 01100111 01011010 01001000 01001010 01110110 01001001 01000111 01100100 00110101 01011001 01101101 00110101 01101010 01001001 01000111 01111000 01110010 01011001 00110010 00111001 01110101 01001001 01001000 01101100 00110100 01001001 01000111 00110001 00110101 01100100 00110011 01100100 00110101 01100101 01000011 01000010 01101110 01100101 01010111 01001010 01110101 01011001 01111001 01000010 01101011 01100011 01101101 01110100 01101011 01001001 01000111 01001110 01111001 01100101 01010111 01100011 01100111 01011010 01011000 01101111 01100111 01100011 00110011 01100111 01100111 01011010 01001000 01001010 01110110 01001001 01000101 00111001 00110100 01100011 01011000 01011010 01111010 01011001 00110011 01001001 01100111 01100100 01101101 01110100 00110100 01100011 01010111 01010110 01110010 01100011 01010111 00111000 01110101 01000011 01101110 01001010 01101110 01100001 01000111 00110101 00110100 01100011 00110010 01010010 01101101 01100101 01011000 01001110 01101011 01100100 01000111 01100100 01101111 01100100 01010011 01000101 01100111 01100011 01010111 01100100 01101101 01001001 01000111 01101100 01111010 01011001 01010111 01110011 01100111 01011001 00110011 01010010 01101111 01100100 01001000 01010110 01110000 01100001 00110010 01010101 01100111 01011010 01000111 01101100 01110010 01001001 01001000 01110000 01110010 01100010 01101110 01010010 01101111 01100001 01000111 01110100 00110100 01001001 01001000 01001010 00110100 01100011 01010111 01111000 01101011 01011010 00110010 00110101 00110100 01100011 00110010 01111000 01110000 01100011 01010011 01000010 01111001 01100001 01011000 01001110 00110101 01100101 01010111 01110100 01101111 01100010 01101101 01110011 01110101 01001001 01000111 01101100 01110010 01100101 01000111 01110011 01100111 01100100 01001000 01010101 01100111 01100011 01111001 01000010 01101010 01100101 01011000 01001110 01110101 01001001 01000111 01001110 01101110 01100101 01000011 01000010 01111010 01100101 01011000 01101011 01100111 01100011 01010111 01100100 01101101 01100101 01000011 01000010 01110000 01100011 00110011 01101000 01101100 01001001 01000111 01110100 01101010 01011001 00110010 01100100 00110100 01011010 01001000 01010101 00110110 01001001 01000111 01011010 01101011 01011001 00110011 01101100 01111010 01100010 01101110 01110100 01101111 01001101 01001000 01011010 01100110 01011010 01000111 01101011 00110000 01011010 01001000 01010110 01100110 01100100 01101101 01101011 00110000 01011010 01000110 00111001 00110000 01011000 00110011 01001001 00110000 01100101 01011000 01101100 01100110 01100011 01101110 01101000 01111000 01100010 01000111 01010001 01110111 01100110 01010011 00110100 01100111 01100011 01010111 01100100 01101101 01001001 01001000 01011010 00110000 01100101 01011000 01101011 01100111 01011001 00110011 01010010 01101111 01011010 01010011 01000010 01101011 01100001 01011000 01001110 01101011 01001001 01001000 01001101 01100111 01100101 01010111 01100100 01101011 01001001 01000111 01100100 01101010 01001001 01001000 01001010 00110100 01100011 01010111 01111000 01101011 01011010 00110010 00110101 00110100 01100011 00110010 01111000 01110000 01100011 01010011 01000010 00110000 01100100 01010011 01000010 01110111 01011010 01101110 01010110 01101011 01001001 01001000 01110000 01101101 01100100 01001000 01101100 01101100 01100100 01000111 01101000 01110101 01001001 01000111 01100100 01101010 01011001 01111001 01000010 01101011 01100001 01011000 01010010 00110001 01001001 01001000 01010110 01101110 01100101 01000111 01010001 01100111 01011010 00110010 01001101 01100111 01100101 01101110 01001110 00110001 01100100 01001000 01001001 01100111 01011001 01101101 01101000 01101110 01100100 01101110 01101100 01110010 01011010 01010111 00110101 01110010 01001100 01000011 01000010 01111010 01100001 01000111 01010101 01100111 01100100 01000111 01010001 01100111 01100101 01000111 01110100 01111010 01100101 01011000 01101100 01111000 01001001 01001000 01010010 00110001 01001001 01000111 01101000 01101110 01011010 01000011 01000010 00110001 01011010 01111001 01000010 00110110 01100011 00110010 01010101 01100111 01100011 00110010 01001110 01101011 01100001 00110011 01100111 01100111 01100011 00110011 01101100 00110101 01001100 01101001 01000010 01110000 01011010 00110010 01111000 01110010 01001001 01001000 01000110 01101110 01011010 01101001 01000010 01110010 01100001 01001000 01000010 01101110 01100011 01010111 01110100 01101100 01001001 01000111 01010010 01110000 01100001 01111001 01000010 01111001 01100001 01011000 01001110 00110101 01100101 01010111 01110100 01101111 01100010 01101101 01110011 01101000
</span></span></code></pre></div><p>一堆二进制码，应该需要进行转码，将二进制码转成字符，可以使用个非常简单的脚本处理一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6dbspan><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>c_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
</span></span><span style="display:flex;"><span>    c_str <span style="color:#f92672">+=</span> libnum<span style="color:#f92672">.</span>n2s(int(i,<span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print c_str
</span></span></code></pre></div><p>得到一个结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Uh-oh, looks like we have another block of text, with some sort of special encoding. Can you figure out what this encoding is? (hint: if you look carefully, you&#39;ll notice that there only characters present are A-Z, a-z, 0-9, and sometimes / and +. See if you can find an encoding that looks like this one.)
</span></span><span style="display:flex;"><span>TmV3IGNoYWxsZW5nZSEgQ2FuIHlvdSBmaWd1cmUgb3V0IHdoYXQncyBnb2luZyBvbiBoZXJlPyBJdCBsb29rcyBsaWtlIHRoZSBsZXR0ZXJzIGFyZSBzaGlmdGVkIGJ5IHNvbWUgY29uc3RhbnQuIChoaW50OiB5b3UgbWlnaHQgd2FudCB0byBzdGFydCBsb29raW5nIHVwIFJvbWFuIHBlb3BsZSkuCmt2YnNxcmQsIGl5ZSdibyBrdnd5Y2QgZHJvYm8hIFh5ZyBweWIgZHJvIHBzeGt2IChreG4gd2tpbG8gZHJvIHJrYm5vY2QuLi4pIHprYmQ6IGsgY2VsY2RzZGVkc3l4IG1zenJvYi4gU3ggZHJvIHB5dnZ5Z3N4cSBkb2hkLCBTJ2ZvIGRrdW94IHdpIHdvY2NrcW8ga3huIGJvenZrbW9uIG9mb2JpIGt2enJrbG9kc20gbXJrYmttZG9iIGdzZHIgayBteWJib2N6eXhub3htbyBkeSBrIG5zcHBvYm94ZCBtcmtia21kb2IgLSB1eHlneCBrYyBrIGNlbGNkc2RlZHN5eCBtc3pyb2IuIE1reCBpeWUgcHN4biBkcm8gcHN4a3YgcHZrcT8gcnN4ZDogR28gdXh5ZyBkcmtkIGRybyBwdmtxIHNjIHF5c3hxIGR5IGxvIHlwIGRybyBweWJ3a2QgZWRwdmtxey4uLn0gLSBncnNtciB3b2t4YyBkcmtkIHNwIGl5ZSBjb28gZHJrZCB6a2Rkb2J4LCBpeWUgdXh5ZyBncmtkIGRybyBteWJib2N6eXhub3htb2MgcHliIGUsIGQsIHAsIHYgaywga3huIHEga2JvLiBJeWUgbWt4IHpieWxrbHZpIGd5YnUgeWVkIGRybyBib3drc3hzeHEgbXJrYmttZG9iYyBsaSBib3p2a21zeHEgZHJvdyBreG4gc3hwb2Jic3hxIG15d3d5eCBneWJuYyBzeCBkcm8gT3hxdnNjciB2a3hxZWtxby4gS3h5ZHJvYiBxYm9rZCB3b2RyeW4gc2MgZHkgZWNvIHBib2Flb3htaSBreGt2aWNzYzogZ28gdXh5ZyBkcmtkICdvJyBjcnlnYyBleiB3eWNkIHlwZG94IHN4IGRybyBrdnpya2xvZCwgY3kgZHJrZCdjIHpieWxrbHZpIGRybyB3eWNkIG15d3d5eCBtcmtia21kb2Igc3ggZHJvIGRvaGQsIHB5dnZ5Z29uIGxpICdkJywga3huIGN5IHl4LiBZeG1vIGl5ZSB1eHlnIGsgcG9nIG1ya2JrbWRvYmMsIGl5ZSBta3ggc3hwb2IgZHJvIGJvY2QgeXAgZHJvIGd5Ym5jIGxrY29uIHl4IG15d3d5eCBneWJuYyBkcmtkIGNyeWcgZXogc3ggZHJvIE94cXZzY3Igdmt4cWVrcW8uCnJnaG54c2RmeXNkdGdodSEgcWdmIGlzYWsgY3RodHVpa2UgZGlrIHprbnRoaGt4IHJ4cWxkZ254c2xpcSByaXN5eWtobmsuIGlreGsgdHUgcyBjeXNuIGNneCBzeXkgcWdmeCBpc3hlIGtjY2d4ZHU6IGZkY3lzbntoMHZfZGk0ZHVfdmk0ZF90X3I0eXlfcnhxbGQwfS4gcWdmIHZ0eXkgY3RoZSBkaXNkIHMgeWdkIGdjIHJ4cWxkZ254c2xpcSB0dSBwZnVkIHpmdHlldGhuIGdjYyBkaXR1IHVneGQgZ2MgenN1dHIgYmhndnlrZW5rLCBzaGUgdGQgeGtzeXlxIHR1IGhnZCB1ZyB6c2Ugc2Nka3ggc3l5LiBpZ2xrIHFnZiBraHBncWtlIGRpayByaXN5eWtobmsh
</span></span></code></pre></div><p>根据解码出来的结构，应该是base64编码，还需要进一步解码，接着这个脚本进行完善：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>c_base64 <span style="color:#f92672">=</span> c_str[c_str<span style="color:#f92672">.</span>find(<span style="color:#e6db74">&#34;Tm&#34;</span>):]
</span></span><span style="display:flex;"><span>print base64<span style="color:#f92672">.</span>b64decode(c_base64)
</span></span></code></pre></div><p>看看输出结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>New challenge! Can you figure out what&#39;s going on here? It looks like the letters are shifted by some constant. (hint: you might want to start looking up Roman people).
</span></span><span style="display:flex;"><span>kvbsqrd, iye&#39;bo kvwycd drobo! Xyg pyb dro psxkv (kxn wkilo dro rkbnocd...) zkbd: k celcdsdedsyx mszrob. Sx dro pyvvygsxq dohd, S&#39;fo dkuox wi wocckqo kxn bozvkmon ofobi kvzrklodsm mrkbkmdob gsdr k mybboczyxnoxmo dy k nsppoboxd mrkbkmdob - uxygx kc k celcdsdedsyx mszrob. Mkx iye psxn dro psxkv pvkq? rsxd: Go uxyg drkd dro pvkq sc qysxq dy lo yp dro pybwkd edpvkq{...} - grsmr wokxc drkd sp iye coo drkd zkddobx, iye uxyg grkd dro mybboczyxnoxmoc pyb e, d, p, v k, kxn q kbo. Iye mkx zbylklvi gybu yed dro bowksxsxq mrkbkmdobc li bozvkmsxq drow kxn sxpobbsxq mywwyx gybnc sx dro Oxqvscr vkxqekqo. Kxydrob qbokd wodryn sc dy eco pboaeoxmi kxkvicsc: go uxyg drkd &#39;o&#39; crygc ez wycd ypdox sx dro kvzrklod, cy drkd&#39;c zbylklvi dro wycd mywwyx mrkbkmdob sx dro dohd, pyvvygon li &#39;d&#39;, kxn cy yx. Yxmo iye uxyg k pog mrkbkmdobc, iye mkx sxpob dro bocd yp dro gybnc lkcon yx mywwyx gybnc drkd cryg ez sx dro Oxqvscr vkxqekqo.
</span></span><span style="display:flex;"><span>rghnxsdfysdtghu! qgf isak cthtuike dik zknthhkx rxqldgnxsliq risyykhnk. ikxk tu s cysn cgx syy qgfx isxe kccgxdu: fdcysn{h0v_di4du_vi4d_t_r4yy_rxqld0}. qgf vtyy cthe disd s ygd gc rxqldgnxsliq tu pfud zftyethn gcc ditu ugxd gc zsutr bhgvykenk, she td xksyyq tu hgd ug zse scdkx syy. iglk qgf khpgqke dik risyykhnk!
</span></span></code></pre></div><p>果然继续啊套娃，看样子新挑战是词频分析，凯撒密码，使用凯撒密码求解得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>alright, you&#39;re almost there! Now for the final (and maybe the hardest...) part: a substitution cipher. In the following text, I&#39;ve taken my message and replaced every alphabetic character with a correspondence to a different character - known as a substitution cipher. Can you find the final flag? hint: We know that the flag is going to be of the format utflag{...} - which means that if you see that pattern, you know what the correspondences for u, t, f, l a, and g are. You can probably work out the remaining characters by replacing them and inferring common words in the English language. Another great method is to use frequency analysis: we know that &#39;e&#39; shows up most often in the alphabet, so that&#39;s probably the most common character in the text, followed by &#39;t&#39;, and so on. Once you know a few characters, you can infer the rest of the words based on common words that show up in the English language.
</span></span><span style="display:flex;"><span>hwxdnitvoitjwxk! gwv yiqa sjxjkyau tya padjxxan hngbtwdnibyg hyiooaxda. yana jk i soid swn ioo gwvn yinu asswntk: vtsoid{x0l_ty4tk_ly4t_j_h4oo_hngbt0}. gwv ljoo sjxu tyit i owt ws hngbtwdnibyg jk fvkt pvjoujxd wss tyjk kwnt ws pikjh rxwloauda, ixu jt naioog jk xwt kw piu istan ioo. ywba gwv axfwgau tya hyiooaxda!
</span></span></code></pre></div><p>看样子最后的挑战，应该是词频分析，丢进<a href="https://quipqiup.com/">在线工具</a>得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>congratulations! you have finished the beginner cryptography challenge. here is a flag for all your hard efforts: utflag{n0w_th4ts_wh4t_i_c4ll_crypt0}. you will find that a lot of cryptography is just building off this sort of basic knowledge, and it really is not so bad after all. hope you enjoyed the challenge!
</span></span></code></pre></div><p>看来顺利完成挑战，拿到了flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>utflag{n0w_th4ts_wh4t_i_c4ll_crypt0}
</span></span></code></pre></div><h2 id="0xb-wustctf2020dp_leaking_1s_very_dangerous">0xB [WUSTCTF2020]dp_leaking_1s_very_d@angerous</h2>
<p>看题目应该是RSA题目的dp泄露问题，dp泄露问题。需要进行推导一下，和前面的RSA2题目一样，可以直接拉那道题的脚本稍微修改一下进行求解。</p>
<p>在求解之前，还是先看看题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>e = 65537
</span></span><span style="display:flex;"><span>n = 156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847
</span></span><span style="display:flex;"><span>c = 108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869
</span></span><span style="display:flex;"><span>dp = 734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825
</span></span></code></pre></div><p>直接拉之前的dp脚本，修改数据得到修改后的脚本</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847</span>
</span></span><span style="display:flex;"><span>dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>temp <span style="color:#f92672">=</span> dp <span style="color:#f92672">*</span>e
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>,e):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (temp<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">%</span>i <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> (temp<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">//</span>i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        y <span style="color:#f92672">=</span> n<span style="color:#f92672">%</span>x
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> y <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            p<span style="color:#f92672">=</span>x
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span> p
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print p</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print q</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> long_to_bytes(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>wctf2020{dp_leaking_1s_very_d@angerous}
</span></span></code></pre></div><h2 id="0xc-afctf2018你听过一次一密么">0xC [AFCTF2018]你听过一次一密么？</h2>
<p>一次一密的题目，应该是比较有难度的题目。</p>
<p>看看题目吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>25030206463d3d393131555f7f1d061d4052111a19544e2e5d
</span></span><span style="display:flex;"><span>0f020606150f203f307f5c0a7f24070747130e16545000035d
</span></span><span style="display:flex;"><span>1203075429152a7020365c167f390f1013170b1006481e1314
</span></span><span style="display:flex;"><span>0f4610170e1e2235787f7853372c0f065752111b15454e0e09
</span></span><span style="display:flex;"><span>081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a18
</span></span><span style="display:flex;"><span>0909075412132e247436425332281a1c561f04071d520f0b11
</span></span><span style="display:flex;"><span>4116111b101e2170203011113a69001b475206011552050219
</span></span><span style="display:flex;"><span>041006064612297020375453342c17545a01451811411a470e
</span></span><span style="display:flex;"><span>021311114a5b0335207f7c167f22001b44520c15544801125d
</span></span><span style="display:flex;"><span>06140611460c26243c7f5c167f3d015446010053005907145d
</span></span><span style="display:flex;"><span>0f05110d160f263f3a7f4210372c03111313090415481d49
</span></span></code></pre></div><p>暂时看不出什么求解方法。只好看看[大佬的wp](<a href="https://www.ruanx.net/many-time-pad/">Many-Time-Pad 攻击 (ruanx.net)</a>) 发现这道题目是采用Many-Time-Pad攻击，是对于流密码的加密进行的攻击方式。目前的知识空缺还不足以让我驾驭这个这道题目的脚本和这道题目的思路方式，于是就借个脚本和大佬的wp来求解吧。</p>
<p>丢个EXP：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/usr/bin/python</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> collections
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sets<span style="color:#f92672">,</span> sys
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 11 unknown ciphertexts (in hex format), all encrpyted with the same key</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c1<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;25030206463d3d393131555f7f1d061d4052111a19544e2e5d&#39;</span>
</span></span><span style="display:flex;"><span>c2<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;0f020606150f203f307f5c0a7f24070747130e16545000035d&#39;</span>
</span></span><span style="display:flex;"><span>c3<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;1203075429152a7020365c167f390f1013170b1006481e1314&#39;</span>
</span></span><span style="display:flex;"><span>c4<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;0f4610170e1e2235787f7853372c0f065752111b15454e0e09&#39;</span>
</span></span><span style="display:flex;"><span>c5<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a18&#39;</span>
</span></span><span style="display:flex;"><span>c6<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;0909075412132e247436425332281a1c561f04071d520f0b11&#39;</span>
</span></span><span style="display:flex;"><span>c7<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;4116111b101e2170203011113a69001b475206011552050219&#39;</span>
</span></span><span style="display:flex;"><span>c8<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;041006064612297020375453342c17545a01451811411a470e&#39;</span>
</span></span><span style="display:flex;"><span>c9<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;021311114a5b0335207f7c167f22001b44520c15544801125d&#39;</span>
</span></span><span style="display:flex;"><span>c10<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;06140611460c26243c7f5c167f3d015446010053005907145d&#39;</span>
</span></span><span style="display:flex;"><span>c11<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;0f05110d160f263f3a7f4210372c03111313090415481d49&#39;</span>
</span></span><span style="display:flex;"><span>ciphers <span style="color:#f92672">=</span> [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11]
</span></span><span style="display:flex;"><span><span style="color:#75715e"># The target ciphertext we want to crack</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#target_cipher = &#34;0529242a631234122d2b36697f13272c207f2021283a6b0c7908&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># XORs two string</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">strxor</span>(a, b):     <span style="color:#75715e"># xor two strings (trims the longer input)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join([chr(ord(x) <span style="color:#f92672">^</span> ord(y)) <span style="color:#66d9ef">for</span> (x, y) <span style="color:#f92672">in</span> zip(a, b)])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">target_fix</span>(target_cipher):
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># To store the final key</span>
</span></span><span style="display:flex;"><span>	final_key <span style="color:#f92672">=</span> [<span style="color:#66d9ef">None</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">150</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># To store the positions we know are broken</span>
</span></span><span style="display:flex;"><span>	known_key_positions <span style="color:#f92672">=</span> set()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># For each ciphertext</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> current_index, ciphertext <span style="color:#f92672">in</span> enumerate(ciphers):
</span></span><span style="display:flex;"><span>		counter <span style="color:#f92672">=</span> collections<span style="color:#f92672">.</span>Counter()
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># for each other ciphertext</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> index, ciphertext2 <span style="color:#f92672">in</span> enumerate(ciphers):
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> current_index <span style="color:#f92672">!=</span> index: <span style="color:#75715e"># don&#39;t xor a ciphertext with itself</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">for</span> indexOfChar, char <span style="color:#f92672">in</span> enumerate(strxor(ciphertext<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>), ciphertext2<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>))): <span style="color:#75715e"># Xor the two ciphertexts</span>
</span></span><span style="display:flex;"><span>					<span style="color:#75715e"># If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don&#39;t know which one)</span>
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">if</span> char <span style="color:#f92672">in</span> string<span style="color:#f92672">.</span>printable <span style="color:#f92672">and</span> char<span style="color:#f92672">.</span>isalpha(): counter[indexOfChar] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span> <span style="color:#75715e"># Increment the counter at this index</span>
</span></span><span style="display:flex;"><span>		knownSpaceIndexes <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># Loop through all positions where a space character was possible in the current_index cipher</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> ind, val <span style="color:#f92672">in</span> counter<span style="color:#f92672">.</span>items():
</span></span><span style="display:flex;"><span>			<span style="color:#75715e"># If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> val <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">7</span>: knownSpaceIndexes<span style="color:#f92672">.</span>append(ind)
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">#print knownSpaceIndexes # Shows all the positions where we now know the key!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e"># Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!</span>
</span></span><span style="display:flex;"><span>		xor_with_spaces <span style="color:#f92672">=</span> strxor(ciphertext<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>),<span style="color:#e6db74">&#39; &#39;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">150</span>)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> knownSpaceIndexes:
</span></span><span style="display:flex;"><span>			<span style="color:#75715e"># Store the key&#39;s value at the correct position</span>
</span></span><span style="display:flex;"><span>			final_key[index] <span style="color:#f92672">=</span> xor_with_spaces[index]<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;hex&#39;</span>)
</span></span><span style="display:flex;"><span>			<span style="color:#75715e"># Record that we known the key at this position</span>
</span></span><span style="display:flex;"><span>			known_key_positions<span style="color:#f92672">.</span>add(index)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Construct a hex key from the currently known key, adding in &#39;00&#39; hex chars where we do not know (to make a complete hex string)</span>
</span></span><span style="display:flex;"><span>	final_key_hex <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join([val <span style="color:#66d9ef">if</span> val <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span> <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#39;00&#39;</span> <span style="color:#66d9ef">for</span> val <span style="color:#f92672">in</span> final_key])
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># Xor the currently known key with the target cipher</span>
</span></span><span style="display:flex;"><span>	output <span style="color:#f92672">=</span> strxor(target_cipher<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>),final_key_hex<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	print <span style="color:#e6db74">&#34;Fix this sentence:&#34;</span>
</span></span><span style="display:flex;"><span>	print <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join([char <span style="color:#66d9ef">if</span> index <span style="color:#f92672">in</span> known_key_positions <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#39;*&#39;</span> <span style="color:#66d9ef">for</span> index, char <span style="color:#f92672">in</span> enumerate(output)])<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;n&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># WAIT.. MANUAL STEP HERE </span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># This output are printing a * if that character is not known yet</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># fix the missing characters like this: &#34;Let*M**k*ow if *o{*a&#34; = &#34;cure, Let Me know if you a&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># if is too hard, change the target_cipher to another one and try again</span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># and we have our key to fix the entire text!</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">#sys.exit(0) #comment and continue if u got a good key</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	target_plaintext <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;cure, Let Me know if you a&#34;</span>
</span></span><span style="display:flex;"><span>	print <span style="color:#e6db74">&#34;Fixed:&#34;</span>
</span></span><span style="display:flex;"><span>	print target_plaintext<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;n&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	key <span style="color:#f92672">=</span> strxor(target_cipher<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>),target_plaintext)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	print <span style="color:#e6db74">&#34;Decrypted msg:&#34;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> cipher <span style="color:#f92672">in</span> ciphers:
</span></span><span style="display:flex;"><span>		print strxor(cipher<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>),key)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	print <span style="color:#e6db74">&#34;nPrivate key recovered: &#34;</span><span style="color:#f92672">+</span>key<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;n&#34;</span>
</span></span><span style="display:flex;"><span>	
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ciphers:
</span></span><span style="display:flex;"><span>	target_fix(i)
</span></span></code></pre></div><p>这道题目也有一个秒杀解法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>pip install mtp
</span></span><span style="display:flex;"><span>mtp Problem.txt
</span></span></code></pre></div><p>也可以获取密钥和明文，得到flag。流密码题目，以后还是有待继续研究和学习的。</p>
<h2 id="0xd-afctf2018base">0xD [AFCTF2018]BASE</h2>
<p>应该会是BASE家族的题目，考察BASE编码。</p>
<p>看题目：</p>
<p>一个非常大的密文文件，文件内容是Base加密。</p>
<p>看样子像是Base，但是发现解码后又是一个Base，之后又是一个不断循环。应该是套了好多层。写个脚本进行循环解码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>file <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;flag_encode.txt&#34;</span>,<span style="color:#e6db74">&#39;r&#39;</span>)
</span></span><span style="display:flex;"><span>file_out <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;flag.txt&#34;</span>,<span style="color:#e6db74">&#39;w&#39;</span>) 
</span></span><span style="display:flex;"><span>base <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span>(<span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>        base <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b32decode(base)<span style="color:#f92672">.</span>decode()
</span></span><span style="display:flex;"><span>        index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>            base <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(base)<span style="color:#f92672">.</span>decode()
</span></span><span style="display:flex;"><span>            index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>                base <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b16decode(base)<span style="color:#f92672">.</span>decode()
</span></span><span style="display:flex;"><span>                index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">except</span>:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;decode finish QWQ！&#34;</span>)
</span></span><span style="display:flex;"><span>                file_out<span style="color:#f92672">.</span>write(base)
</span></span><span style="display:flex;"><span>                file_out<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>                file_out<span style="color:#f92672">.</span>write(str(index))
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span></code></pre></div><p>运行脚本后，查看写入的文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>afctf{U_5h0u1d_Us3_T00l5}
</span></span><span style="display:flex;"><span>30
</span></span></code></pre></div><p>嵌套了30层base，最后也成功拿到了flag。</p>
<h2 id="0xe-npuctf2020classical-cipher">0xE [NPUCTF2020]Classical Cipher</h2>
<p>古典密码的题目，打开看看：</p>
<p>两个文件，一个<code>key.txt</code>解压密码文件，一个<code>flag.zip</code>压缩文件。压缩文件有密码，可以看看<code>key.txt</code>里面具体是什么东西：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>解密后的flag请用flag{}包裹
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>压缩包密码：gsv_pvb_rh_zgyzhs
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>对应明文：   ***_key_**_******
</span></span></code></pre></div><p>对应明文，应该是这个古典密码的提示，k对应p，e对应v以及y对应b。这种古典密码有非常好的对称性，可以自然而然地联想到埃特巴什码。</p>
<p>然后使用Atbash码进行解密，就能得到压缩包的解压密码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>the_key_is_atbash
</span></span></code></pre></div><p>使用解出的密码，解开压缩文件，得到一张图片：</p>
<p><img src="/images/BUUCTF-CRYPTO-6_writeup/flag.png" alt="flag"></p>
<p>看样子奇奇怪怪的，是猪圈密码和古埃及象形密码的组合</p>
<p>直接根据猪圈密码变体和古埃及象形密码的对应关系进行解码得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>classicalcode
</span></span></code></pre></div><hr>
<p>猪圈密码变体：</p>
<p><img src="/images/BUUCTF-CRYPTO-6_writeup/20200820143837525.png" alt="img"></p>
<p>古埃及象形密码：</p>
<p><img src="/images/BUUCTF-CRYPTO-6_writeup/20200820143847305.png" alt="img"></p>
<h2 id="easyprogram">EasyProgram</h2>
<p>简单的程序，应该是针对这个程序进行逆算法设计来完成相应的算法求解来获取到flag，看看题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Eeemmm......this is a easy game.Have fun~ 注意：得到的 flag 请包上 flag{} 提交
</span></span></code></pre></div><p>题目附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>get buf unsign s[256]
</span></span><span style="display:flex;"><span>get buf t[256]
</span></span><span style="display:flex;"><span>we have key:whoami
</span></span><span style="display:flex;"><span>we have flag:????????????????????????????????
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>for i:0 to 256
</span></span><span style="display:flex;"><span>    set s[i]:i
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>for i:0 to 256
</span></span><span style="display:flex;"><span>    set t[i]:key[(i)mod(key.lenth)]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>for i:0 to 256
</span></span><span style="display:flex;"><span>    set j:(j+s[i]+t[i])mod(256)
</span></span><span style="display:flex;"><span>        swap:s[i],s[j]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>for m:0 to 38
</span></span><span style="display:flex;"><span>    set i:(i + 1)mod(256)
</span></span><span style="display:flex;"><span>    set j:(j + S[i])mod(256)
</span></span><span style="display:flex;"><span>    swap:s[i],s[j]
</span></span><span style="display:flex;"><span>    set x:(s[i] + (s[j]mod(256))mod(256))
</span></span><span style="display:flex;"><span>    set flag[m]:flag[m]^s[x]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>fprint flagx to file
</span></span></code></pre></div><p>附件是伪代码文件，写一个逆算法程序脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>key <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;whoami&#34;</span>
</span></span><span style="display:flex;"><span>flags <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> [i <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>)]
</span></span><span style="display:flex;"><span>t <span style="color:#f92672">=</span> [key[i<span style="color:#f92672">%</span>(len(key))] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>)]
</span></span><span style="display:flex;"><span>j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">256</span>):
</span></span><span style="display:flex;"><span>    j <span style="color:#f92672">=</span> (j<span style="color:#f92672">+</span>s[i]<span style="color:#f92672">+</span>ord(t[i]))<span style="color:#f92672">%</span><span style="color:#ae81ff">256</span>
</span></span><span style="display:flex;"><span>    s[i],s[j] <span style="color:#f92672">=</span> s[j],s[i]
</span></span><span style="display:flex;"><span>j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;file.txt&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">38</span>):
</span></span><span style="display:flex;"><span>    i <span style="color:#f92672">=</span> (i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">256</span>
</span></span><span style="display:flex;"><span>    j <span style="color:#f92672">=</span> (j<span style="color:#f92672">+</span>s[i])<span style="color:#f92672">%</span><span style="color:#ae81ff">256</span>
</span></span><span style="display:flex;"><span>    s[i],s[j] <span style="color:#f92672">=</span> s[j],s[i]
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> (s[i]<span style="color:#f92672">+</span>(s[j]<span style="color:#f92672">%</span><span style="color:#ae81ff">256</span>))<span style="color:#f92672">%</span><span style="color:#ae81ff">256</span>
</span></span><span style="display:flex;"><span>    flags <span style="color:#f92672">+=</span> chr(ord(flag[m])<span style="color:#f92672">^</span>s[x])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print flags
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{f238yu28323uf28u2yef2ud8uf289euf}
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title>BUUCTF CRYPTO (5) writeup</title>
            <link>/posts/buuctf-crypto-5_writeup/</link>
            <pubDate>Thu, 01 Jul 2021 10:14:15 +0800</pubDate>
            
            <guid>/posts/buuctf-crypto-5_writeup/</guid>
            <description>密码学百题计划启动！进行勇往直前！
本次的16道题目，也是非常有意思的呢！各种各样的呢……
0x0 浪里淘沙 看样子，应该是个脑洞题没错了
来康康这题的题目：
我有密集恐惧症，所以大家自求多福吧，把获得的单词连在一起提交即可。（我这里有一串数字：4，8，11，15，16） 注意：得到的 flag 请包上 flag{} 提交 这题目好像有点意思，可以从题目中提炼一些信息：
密集恐惧症 获得的单词连在一起提交 我这里有一串数字：4，8，11，15，16 根据提炼的数据进行分享，应该是词频统计类的题目，这题有点意思
看看附件是啥吧：
tonightsuccessnoticenoticewewesuccesstonightweexamplecryptoshouldwebackspacetonightbackspaceexamplelearnwesublimlearnbackspacetheshouldwelearnfoundsublimsystemexamplesublimfoundlearnshouldmorningsublimsystemuserlearnthecryptomorningexamplenoticetonightlearntonightlearntonightsublimenterusermorningfoundtonightweenterfoundnoticethecryptomorningthebackspacelearntonightlearnsublimtonightlearnfoundenterfoundsuccesstonightsuccessuserfoundmorningtonighttheshouldsublimentertonightenterbackspacelearnexamplenoticeexamplefoundsystemsuccesssublimsuccessshouldtonightcryptowelearncryptofoundshouldsublimsublimweentertonightsuccessshouldentertheentercryptouserbackspaceshouldentersystemsuccesssystementerfoundenterlearnexampletonightnoticemorningusertonightlearnmorningtonightfoundfoundsuccessnoticesystementerlearnexamplebackspaceshouldcryptocryptosublimweexampletonighttheshouldthemorningbackspacelearntonightsystemsuccesssuccessbackspacemorningnoticeuserfoundfoundtonightmorningenterenterthefoundbackspacelearnenterentershouldthesystemfounduserlearnlearnsystemnoticetonighttheshouldlearnuserbackspaceweusernoticeshouldthewefoundsystemwecryptocryptowethebackspacesystementershouldtonightsystemnoticemorningsystemweentermorningfoundsuccessusertonightsuccesstonightbackspaceshouldweenterthewesystemusernoticesystemthelearnexamplelearnfoundlearnnoticeexamplesystemthecryptocryptolearnsystemthecryptoenterlearnexamplemorningmorningweenterentersuccessexampleuserthebackspacenoticesublimenterbackspacesuccessbackspacethesublimexamplesystemtheexamplecryptolearnuserexamplelearnsystemusersuccessenterentersuccesstheuserbackspacelearnsuccessbackspacethesublimshouldwebackspaceexamplesuccesssuccesstonightweusershouldsuccessmorningcryptomorningfoundbackspacesublimshouldentershouldnoticesuccessmorningsuccessexamplelearnshouldsublimlearntonightshoulduserbackspacesublimlearncryptosuccessenternoticetonightmorningtonightwesuccessweuserbackspaceexamplewesystemnoticemorningsystemmorningcryptolearnsystemthethefoundcryptouserlearnusersystemwemorningenterexampleshouldlearncryptofoundenterbackspacelearnenterenterbackspaceshouldbackspacetheshouldthesystemshouldshouldsuccessmorningthefoundsystementersystemtonightcryptowelearnexampleexamplesystementerbackspaceshouldtheentersublimtonightfoundfoundsuccesssuccesssystemsublimcryptoshouldentersublimmorninglearnfoundtonightcryptobackspacesuccesscryptowebackspacefoundshouldnoticeshouldmorningnoticesystemcryptosystemlearnsystemnoticemorningsystementerwemorninglearnsuccessfoundwesuccesswetheusercryptousernoticebackspacesuccessshouldtonightmorningentermorninguserenternoticefoundmorningwetonightsystemthecryptotonightcryptosystemuserthefoundexampletonightusersystemcryptosublimmorninguserthefoundbackspaceshouldsuccesscryptotonightsystemnoticebackspaceusershouldenterthecryptomorningwesublimnoticesuccessnoticeusersuccesstonightlearnweuserenterfounduserexampleshouldshouldtonightwelearnthenoticethewefoundmorningexampleshouldexamplethesuccessnoticeenterfoundthecryptonoticeuserlearnuserweenterfoundmorningsystemweexamplenoticethebackspaceexamplesublimtheusermorningtonightthesuccesscryptosuccessusersuccesstonighttonightwelearnenterenterthemorningentersystemcryptobackspacemorningsystemexamplecryptouserexamplelearnsublimsuccessusersystemfoundmorningshouldcryptotonightsublimtheexamplemorningsystemuserexampleweexamplenoticesuccesssublimnoticecryptoshouldbackspaceshouldthetonightfoundsublimbackspacebackspacetonightshouldbackspacesuccesstonightbackspacesuccessmorningsystemcryptobackspaceentertonighttonightnoticelearnshoulduserfoundexamplesystemthesuccessweusertonightcryptousernoticeenternoticebackspaceusersystemfoundusernoticeshouldlearnuserfoundexampleusermorningshouldsuccessmorningmorningexampleexamplefoundsublimfoundenterbackspacenoticelearnfoundmorningcryptonoticecryptoshouldweshouldtonightcryptobackspacesublimcryptosublimenterentersublimentercryptonoticethethesublimexampleenterentershouldlearncryptoentershouldmorninglearnnoticeuserexamplesublimtonightshouldfoundtonightsuccessshouldmorningfoundtheweuserlearnsublimsystembackspacecryptotheusertonightcryptosublimmorningmorningexamplenoticetheenterlearnshouldmorningsublimfoundtonightsublimsublimexamplefounduserexamplethefoundwemorningnoticefoundcryptosuccesssublimsublimexamplethesuccessexamplenoticesuccessbackspacesublimlearnuserexamplesuccesssuccesssystemsuccessmorningmorninglearnexamplemorningtonightfoundbackspaceenternoticemorningentersuccessmorningusermorningbackspacelearncryptoenteruserenteruserthetonighttonightsuccesslearnenterfoundsuccesssystemfoundbackspaceenterlearnsystemsublimcryptoentermorningwetonightshouldlearnenterfoundcryptonoticelearnlearnshouldfoundsuccessexampletonightthesuccessfoundusertonightenterfoundsuccessshouldmorningusernoticemorningsystemsystemsuccessshouldwelearnenterfoundexamplewethefoundweshouldsystemsystemmorningmorningbackspaceshouldentersublimentertonightsuccesssystemsystemcryptousershouldsublimfoundwetonightnoticeexamplewewesuccessfoundusertonightfoundsystemexamplecryptofoundshouldshouldsuccessenterbackspaceexampletonightthelearnnoticeuserlearnsystemsublimfoundlearnsuccesssystemshouldsublimnoticelearnsystemnoticetonightexamplefoundusernoticeenterlearnnoticecryptousersystemmorningthewesystemfoundfoundshouldsystementerenterbackspacesystemsublimcryptousermorninglearnlearntonightsublimlearnenterenterbackspacesystemuserusercryptoentershouldtheusersublimnoticeexamplemorningexamplesublimsublimbackspacesystemexampleshouldsublimlearnfoundenterbackspacelearnmorningmorningfoundthetonightmorningnoticeenterlearnusersystemtonightbackspaceexamplelearntonightbackspaceweshouldcryptosuccessbackspaceexamplesuccesstheshouldmorninguserbackspacelearnthetheshouldcryptocryptotonightbackspacecryptocryptobackspacebackspacenoticeusertonightentermorningfoundweenterexampleenterfoundusersublimsystemtheexampleexamplesystemsuccessusersublimentermorningbackspacesystemfoundlearnsystemshouldsublimsublimentershouldtheusershouldexampleexampleshouldsuccesswelearnfoundsublimshoulduserweentertonightwenoticesublimsystemlearnshouldfoundsuccessuserentersuccessmorningcryptoenteruserfoundexampletonightlearnexampleexamplefoundlearnsuccesssystembackspacecryptonoticethefoundbackspacelearncryptothelearnlearnexamplesuccessnoticenoticesystemmorningcryptotonightnoticenoticeentersuccesscryptoenterbackspacesublimexampleenterfoundtonightcryptotonightsublimnoticesuccesssublimtheentertonighttheshouldthefoundsystemtonightuserbackspacesuccessshouldwebackspacenoticebackspacebackspacenoticewecryptobackspacebackspaceusertonightlearnsuccessmorningusertonightsuccessshouldbackspacecryptoenterentershouldsublimsystemexamplemorningcryptonoticethesuccessthebackspacenoticelearnsublimlearnsuccesscryptothesuccessenternoticecryptosystemsublimsuccesswebackspaceuserenterlearnuserwewemorningsuccesslearncryptobackspacewecryptosystemlearnenterenteruserexamplefoundsystemcryptousernoticefoundusersublimbackspacewesublimnoticemorningshouldexamplenoticecryptoshouldtonightmorningthefoundsystementerentersystemthecryptobackspacesublimlearnsuccessmorningsublimsystemcryptousersublimwesuccessmorningsublimbackspacecryptobackspacesublimthelearnsuccesssublimlearncryptoweweexamplecryptowenoticelearnfoundbackspacesystemsystemexampleshouldlearnsuccesssublimcryptobackspacetonightbackspacemorningmorningnoticeshouldnoticefoundthetheshouldtheshouldfoundfoundcryptosuccessbackspacesuccessshouldweenternoticeweweshouldmorningfoundusersuccessbackspacewenoticeusersuccessenterenterexamplelearnfoundwetonightusercryptothesublimsublimtonightsuccesslearnbackspacetonightentertonightthesublimnoticewefoundcryptobackspaceenterenterlearnlearntonightexamplesystementersublimnoticecryptoshoulduseruserbackspaceuserwesublimmorningwesystemshouldtonighttheusershouldnoticefoundusernoticeentersublimwethewefoundfoundlearnfoundwecryptosystemexamplemorningcryptocryptosublimtheexamplenoticefoundlearnwelearnmorningtheenterthesystemsublimtonightsuccesssystemlearnshouldenterbackspaceentersuccesssuccessbackspaceexamplenoticeentershouldsublimlearnbackspacetheshouldexamplelearnsystemusersublimbackspacebackspacesuccesswelearntonightexamplewecryptoenterwesystemsystemsublimexamplecryptolearnmorningsublimfoundsublimfoundbackspacefoundtonighttonightnoticesuccesssuccessexampleusersuccesstonightsublimcryptosystemweenterexamplesystemthethenoticesublimtonightbackspacenoticesystemexamplethesuccesstonightmorningsuccesstonightwenoticesublimtonightwelearntonightmorningsublimbackspaceenterthetonightenterwecryptofoundtheenternoticebackspacesuccesswesystemuserexamplebackspaceentersuccesstonightsublimwemorningsuccesssuccesswesublimsuccessnoticesublimfoundlearnlearnweexamplecryptonoticelearnweusershoulduserfoundcryptolearnfoundmorningtonightmorningmorningnoticewecryptowewesuccessfoundsublimweuserentershouldshouldshouldsublimbackspacetonightenterwesublimsuccessshouldfoundthethetonightwecryptoweenterfoundcryptoshouldcryptouseruserfoundentersublimsublimthelearntheshouldnoticebackspacefoundsuccessshouldtonightentermorningsystemmorningtonightwenoticelearnbackspaceexampleusershouldnoticesublimsublimexamplethesuccessnoticesystemmorningnoticecryptosystemsublimcryptosystemsuccessshouldmorningbackspaceshouldmorninglearnnoticenoticeshouldthewewesublimsublimnoticeusersuccessentersystemfoundshouldshouldcryptobackspaceusermorningsystemshouldshouldtonightwesublimuserfoundlearnbackspacethetonightmorningexampleuserthefoundbackspaceshouldtonightcryptocryptofounduserexamplenoticecryptousernoticethenoticeshouldweshouldfoundwemorningcryptosuccesslearnfoundtonightsublimnoticenoticewefoundwewesuccesssublimsublimcryptoweexampletonightsuccessfoundshouldsuccesstonightbackspacesystemshouldwesystemnoticebackspaceusersystembackspacewenoticelearnnoticenoticesuccesslearntonightuserlearnsuccessbackspacesuccesswesystemusercryptonoticethesystemusernoticewethesuccessweshouldfoundshouldcryptomorningtonightwethewesuccesslearntheshouldweexampletonightsuccessnoticenoticemorningfoundmorningfoundusersublimsystemsuccessbackspacesuccessmorninguserthefoundweexamplemorningsublimlearnfoundfoundnoticemorningshouldweuserwemorningexamplesuccesssuccessfoundthetheshouldweusershouldtheshouldexamplenoticefoundsuccesssystemfoundshouldsublimbackspacetonightshouldsystemtonightsuccesslearntonightsystemsublimsuccesscryptobackspacesystemsublimmorningmorningshouldmorninglearnsuccesslearnmorningusermorninglearnexamplecryptoshouldbackspacesublimshouldfoundbackspacesystemsystemweexamplesystemtonightsublimmorningmorninguserfoundcryptolearnbackspaceshouldbackspacenoticesublimfoundthecryptousershouldsuccesssystemsuccessshouldsystembackspacesublimshouldsublimsystembackspaceexampleshouldbackspacesublimnoticelearnsublimuserbackspaceusersublimsuccesssublimuserusernoticeshouldsuccessnoticenoticelearnexamplesystemweexamplesublimbackspacebackspacecryptoshouldusercryptosublimbackspacesublimshouldsystemnoticenoticethesuccesssuccesslearnsystemsublimwenoticelearnusersublimsystemusernoticeuserthesuccesslearnwelearnwenoticecryptolearncryptonoticenoticebackspacecryptothecryptousercryptobackspacesuccesslearnthesystemsuccessthesystemsystemcryptosuccessbackspacesublimlearnsublimcryptobackspacelearnsublimusersublimexamplecryptosublimsystemnoticecryptocryptousertheusernoticebackspacenoticenoticethecryptocryptosystembackspacesublimbackspacecryptocryptobackspacesystemuserthenoticesystemsystemsystemusernoticethecryptouserusersystemtheusercryptoexamplenoticecryptoexamplenoticetheexampleexamplethecryptotheusernoticetheexampleexamplecryptotheexampleexamplethenoticethecryptocryptoexampletheexamplecryptocryptothenoticeexamplecryptonoticetheexampleexampleexamplecryptocryptoexampleexamplethenoticethecryptothethethethethetheexampleexamplethetheexampletheexampletheexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample 好多连在一起的词汇，应该是一个简单NTP题目，也就是NLP最基础的一个步骤，分词。
这道题目的大致思路应该是：
分词 词频统计 统计排序 根据排序位置找到指定的单词 拼接单词 根据这个思路，写个脚本处理一下哈：
from collections import Counter // 统计库 import wordninja // 英语单词词库 data=&amp;#34;tonightsuccessnoticenoticewewesuccesstonightweexamplecryptoshouldwebackspacetonightbackspaceexamplelearnwesublimlearnbackspacetheshouldwelearnfoundsublimsystemexamplesublimfoundlearnshouldmorningsublimsystemuserlearnthecryptomorningexamplenoticetonightlearntonightlearntonightsublimenterusermorningfoundtonightweenterfoundnoticethecryptomorningthebackspacelearntonightlearnsublimtonightlearnfoundenterfoundsuccesstonightsuccessuserfoundmorningtonighttheshouldsublimentertonightenterbackspacelearnexamplenoticeexamplefoundsystemsuccesssublimsuccessshouldtonightcryptowelearncryptofoundshouldsublimsublimweentertonightsuccessshouldentertheentercryptouserbackspaceshouldentersystemsuccesssystementerfoundenterlearnexampletonightnoticemorningusertonightlearnmorningtonightfoundfoundsuccessnoticesystementerlearnexamplebackspaceshouldcryptocryptosublimweexampletonighttheshouldthemorningbackspacelearntonightsystemsuccesssuccessbackspacemorningnoticeuserfoundfoundtonightmorningenterenterthefoundbackspacelearnenterentershouldthesystemfounduserlearnlearnsystemnoticetonighttheshouldlearnuserbackspaceweusernoticeshouldthewefoundsystemwecryptocryptowethebackspacesystementershouldtonightsystemnoticemorningsystemweentermorningfoundsuccessusertonightsuccesstonightbackspaceshouldweenterthewesystemusernoticesystemthelearnexamplelearnfoundlearnnoticeexamplesystemthecryptocryptolearnsystemthecryptoenterlearnexamplemorningmorningweenterentersuccessexampleuserthebackspacenoticesublimenterbackspacesuccessbackspacethesublimexamplesystemtheexamplecryptolearnuserexamplelearnsystemusersuccessenterentersuccesstheuserbackspacelearnsuccessbackspacethesublimshouldwebackspaceexamplesuccesssuccesstonightweusershouldsuccessmorningcryptomorningfoundbackspacesublimshouldentershouldnoticesuccessmorningsuccessexamplelearnshouldsublimlearntonightshoulduserbackspacesublimlearncryptosuccessenternoticetonightmorningtonightwesuccessweuserbackspaceexamplewesystemnoticemorningsystemmorningcryptolearnsystemthethefoundcryptouserlearnusersystemwemorningenterexampleshouldlearncryptofoundenterbackspacelearnenterenterbackspaceshouldbackspacetheshouldthesystemshouldshouldsuccessmorningthefoundsystementersystemtonightcryptowelearnexampleexamplesystementerbackspaceshouldtheentersublimtonightfoundfoundsuccesssuccesssystemsublimcryptoshouldentersublimmorninglearnfoundtonightcryptobackspacesuccesscryptowebackspacefoundshouldnoticeshouldmorningnoticesystemcryptosystemlearnsystemnoticemorningsystementerwemorninglearnsuccessfoundwesuccesswetheusercryptousernoticebackspacesuccessshouldtonightmorningentermorninguserenternoticefoundmorningwetonightsystemthecryptotonightcryptosystemuserthefoundexampletonightusersystemcryptosublimmorninguserthefoundbackspaceshouldsuccesscryptotonightsystemnoticebackspaceusershouldenterthecryptomorningwesublimnoticesuccessnoticeusersuccesstonightlearnweuserenterfounduserexampleshouldshouldtonightwelearnthenoticethewefoundmorningexampleshouldexamplethesuccessnoticeenterfoundthecryptonoticeuserlearnuserweenterfoundmorningsystemweexamplenoticethebackspaceexamplesublimtheusermorningtonightthesuccesscryptosuccessusersuccesstonighttonightwelearnenterenterthemorningentersystemcryptobackspacemorningsystemexamplecryptouserexamplelearnsublimsuccessusersystemfoundmorningshouldcryptotonightsublimtheexamplemorningsystemuserexampleweexamplenoticesuccesssublimnoticecryptoshouldbackspaceshouldthetonightfoundsublimbackspacebackspacetonightshouldbackspacesuccesstonightbackspacesuccessmorningsystemcryptobackspaceentertonighttonightnoticelearnshoulduserfoundexamplesystemthesuccessweusertonightcryptousernoticeenternoticebackspaceusersystemfoundusernoticeshouldlearnuserfoundexampleusermorningshouldsuccessmorningmorningexampleexamplefoundsublimfoundenterbackspacenoticelearnfoundmorningcryptonoticecryptoshouldweshouldtonightcryptobackspacesublimcryptosublimenterentersublimentercryptonoticethethesublimexampleenterentershouldlearncryptoentershouldmorninglearnnoticeuserexamplesublimtonightshouldfoundtonightsuccessshouldmorningfoundtheweuserlearnsublimsystembackspacecryptotheusertonightcryptosublimmorningmorningexamplenoticetheenterlearnshouldmorningsublimfoundtonightsublimsublimexamplefounduserexamplethefoundwemorningnoticefoundcryptosuccesssublimsublimexamplethesuccessexamplenoticesuccessbackspacesublimlearnuserexamplesuccesssuccesssystemsuccessmorningmorninglearnexamplemorningtonightfoundbackspaceenternoticemorningentersuccessmorningusermorningbackspacelearncryptoenteruserenteruserthetonighttonightsuccesslearnenterfoundsuccesssystemfoundbackspaceenterlearnsystemsublimcryptoentermorningwetonightshouldlearnenterfoundcryptonoticelearnlearnshouldfoundsuccessexampletonightthesuccessfoundusertonightenterfoundsuccessshouldmorningusernoticemorningsystemsystemsuccessshouldwelearnenterfoundexamplewethefoundweshouldsystemsystemmorningmorningbackspaceshouldentersublimentertonightsuccesssystemsystemcryptousershouldsublimfoundwetonightnoticeexamplewewesuccessfoundusertonightfoundsystemexamplecryptofoundshouldshouldsuccessenterbackspaceexampletonightthelearnnoticeuserlearnsystemsublimfoundlearnsuccesssystemshouldsublimnoticelearnsystemnoticetonightexamplefoundusernoticeenterlearnnoticecryptousersystemmorningthewesystemfoundfoundshouldsystementerenterbackspacesystemsublimcryptousermorninglearnlearntonightsublimlearnenterenterbackspacesystemuserusercryptoentershouldtheusersublimnoticeexamplemorningexamplesublimsublimbackspacesystemexampleshouldsublimlearnfoundenterbackspacelearnmorningmorningfoundthetonightmorningnoticeenterlearnusersystemtonightbackspaceexamplelearntonightbackspaceweshouldcryptosuccessbackspaceexamplesuccesstheshouldmorninguserbackspacelearnthetheshouldcryptocryptotonightbackspacecryptocryptobackspacebackspacenoticeusertonightentermorningfoundweenterexampleenterfoundusersublimsystemtheexampleexamplesystemsuccessusersublimentermorningbackspacesystemfoundlearnsystemshouldsublimsublimentershouldtheusershouldexampleexampleshouldsuccesswelearnfoundsublimshoulduserweentertonightwenoticesublimsystemlearnshouldfoundsuccessuserentersuccessmorningcryptoenteruserfoundexampletonightlearnexampleexamplefoundlearnsuccesssystembackspacecryptonoticethefoundbackspacelearncryptothelearnlearnexamplesuccessnoticenoticesystemmorningcryptotonightnoticenoticeentersuccesscryptoenterbackspacesublimexampleenterfoundtonightcryptotonightsublimnoticesuccesssublimtheentertonighttheshouldthefoundsystemtonightuserbackspacesuccessshouldwebackspacenoticebackspacebackspacenoticewecryptobackspacebackspaceusertonightlearnsuccessmorningusertonightsuccessshouldbackspacecryptoenterentershouldsublimsystemexamplemorningcryptonoticethesuccessthebackspacenoticelearnsublimlearnsuccesscryptothesuccessenternoticecryptosystemsublimsuccesswebackspaceuserenterlearnuserwewemorningsuccesslearncryptobackspacewecryptosystemlearnenterenteruserexamplefoundsystemcryptousernoticefoundusersublimbackspacewesublimnoticemorningshouldexamplenoticecryptoshouldtonightmorningthefoundsystementerentersystemthecryptobackspacesublimlearnsuccessmorningsublimsystemcryptousersublimwesuccessmorningsublimbackspacecryptobackspacesublimthelearnsuccesssublimlearncryptoweweexamplecryptowenoticelearnfoundbackspacesystemsystemexampleshouldlearnsuccesssublimcryptobackspacetonightbackspacemorningmorningnoticeshouldnoticefoundthetheshouldtheshouldfoundfoundcryptosuccessbackspacesuccessshouldweenternoticeweweshouldmorningfoundusersuccessbackspacewenoticeusersuccessenterenterexamplelearnfoundwetonightusercryptothesublimsublimtonightsuccesslearnbackspacetonightentertonightthesublimnoticewefoundcryptobackspaceenterenterlearnlearntonightexamplesystementersublimnoticecryptoshoulduseruserbackspaceuserwesublimmorningwesystemshouldtonighttheusershouldnoticefoundusernoticeentersublimwethewefoundfoundlearnfoundwecryptosystemexamplemorningcryptocryptosublimtheexamplenoticefoundlearnwelearnmorningtheenterthesystemsublimtonightsuccesssystemlearnshouldenterbackspaceentersuccesssuccessbackspaceexamplenoticeentershouldsublimlearnbackspacetheshouldexamplelearnsystemusersublimbackspacebackspacesuccesswelearntonightexamplewecryptoenterwesystemsystemsublimexamplecryptolearnmorningsublimfoundsublimfoundbackspacefoundtonighttonightnoticesuccesssuccessexampleusersuccesstonightsublimcryptosystemweenterexamplesystemthethenoticesublimtonightbackspacenoticesystemexamplethesuccesstonightmorningsuccesstonightwenoticesublimtonightwelearntonightmorningsublimbackspaceenterthetonightenterwecryptofoundtheenternoticebackspacesuccesswesystemuserexamplebackspaceentersuccesstonightsublimwemorningsuccesssuccesswesublimsuccessnoticesublimfoundlearnlearnweexamplecryptonoticelearnweusershoulduserfoundcryptolearnfoundmorningtonightmorningmorningnoticewecryptowewesuccessfoundsublimweuserentershouldshouldshouldsublimbackspacetonightenterwesublimsuccessshouldfoundthethetonightwecryptoweenterfoundcryptoshouldcryptouseruserfoundentersublimsublimthelearntheshouldnoticebackspacefoundsuccessshouldtonightentermorningsystemmorningtonightwenoticelearnbackspaceexampleusershouldnoticesublimsublimexamplethesuccessnoticesystemmorningnoticecryptosystemsublimcryptosystemsuccessshouldmorningbackspaceshouldmorninglearnnoticenoticeshouldthewewesublimsublimnoticeusersuccessentersystemfoundshouldshouldcryptobackspaceusermorningsystemshouldshouldtonightwesublimuserfoundlearnbackspacethetonightmorningexampleuserthefoundbackspaceshouldtonightcryptocryptofounduserexamplenoticecryptousernoticethenoticeshouldweshouldfoundwemorningcryptosuccesslearnfoundtonightsublimnoticenoticewefoundwewesuccesssublimsublimcryptoweexampletonightsuccessfoundshouldsuccesstonightbackspacesystemshouldwesystemnoticebackspaceusersystembackspacewenoticelearnnoticenoticesuccesslearntonightuserlearnsuccessbackspacesuccesswesystemusercryptonoticethesystemusernoticewethesuccessweshouldfoundshouldcryptomorningtonightwethewesuccesslearntheshouldweexampletonightsuccessnoticenoticemorningfoundmorningfoundusersublimsystemsuccessbackspacesuccessmorninguserthefoundweexamplemorningsublimlearnfoundfoundnoticemorningshouldweuserwemorningexamplesuccesssuccessfoundthetheshouldweusershouldtheshouldexamplenoticefoundsuccesssystemfoundshouldsublimbackspacetonightshouldsystemtonightsuccesslearntonightsystemsublimsuccesscryptobackspacesystemsublimmorningmorningshouldmorninglearnsuccesslearnmorningusermorninglearnexamplecryptoshouldbackspacesublimshouldfoundbackspacesystemsystemweexamplesystemtonightsublimmorningmorninguserfoundcryptolearnbackspaceshouldbackspacenoticesublimfoundthecryptousershouldsuccesssystemsuccessshouldsystembackspacesublimshouldsublimsystembackspaceexampleshouldbackspacesublimnoticelearnsublimuserbackspaceusersublimsuccesssublimuserusernoticeshouldsuccessnoticenoticelearnexamplesystemweexamplesublimbackspacebackspacecryptoshouldusercryptosublimbackspacesublimshouldsystemnoticenoticethesuccesssuccesslearnsystemsublimwenoticelearnusersublimsystemusernoticeuserthesuccesslearnwelearnwenoticecryptolearncryptonoticenoticebackspacecryptothecryptousercryptobackspacesuccesslearnthesystemsuccessthesystemsystemcryptosuccessbackspacesublimlearnsublimcryptobackspacelearnsublimusersublimexamplecryptosublimsystemnoticecryptocryptousertheusernoticebackspacenoticenoticethecryptocryptosystembackspacesublimbackspacecryptocryptobackspacesystemuserthenoticesystemsystemsystemusernoticethecryptouserusersystemtheusercryptoexamplenoticecryptoexamplenoticetheexampleexamplethecryptotheusernoticetheexampleexamplecryptotheexampleexamplethenoticethecryptocryptoexampletheexamplecryptocryptothenoticeexamplecryptonoticetheexampleexampleexamplecryptocryptoexampleexamplethenoticethecryptothethethethethetheexampleexamplethetheexampletheexampletheexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample&amp;#34; lm = wordninja.LanguageModel(&amp;#39;my_dict.txt.gz&amp;#39;) // 通过调试写出的简单字典 data_list = lm.split(data) data_count = Counter(data_list) index = 1 hint_list = [4,8,11,15,16] m = &amp;#34;&amp;#34; for i in data_count.most_common(20)[::-1]: if index in hint_list: m += i[0] index += 1 print(m) 运行一下脚本：</description>
            <content type="html"><![CDATA[<p>密码学百题计划启动！进行勇往直前！</p>
<p><img src="/images/BUUCTF-CRYPTO-5_writeup/image-20210628200701835.png" alt="image-20210628200701835"></p>
<p>本次的16道题目，也是非常有意思的呢！各种各样的呢……</p>
<p><img src="/images/BUUCTF-CRYPTO-5_writeup/image-20210628200448759.png" alt="image-20210628200448759"></p>
<h2 id="0x0-浪里淘沙">0x0 浪里淘沙</h2>
<p>看样子，应该是个脑洞题没错了</p>
<p>来康康这题的题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>我有密集恐惧症，所以大家自求多福吧，把获得的单词连在一起提交即可。（我这里有一串数字：4，8，11，15，16） 注意：得到的 flag 请包上 flag{} 提交
</span></span></code></pre></div><p>这题目好像有点意思，可以从题目中提炼一些信息：</p>
<ol>
<li>密集恐惧症</li>
<li>获得的单词连在一起提交</li>
<li>我这里有一串数字：4，8，11，15，16</li>
</ol>
<p>根据提炼的数据进行分享，应该是词频统计类的题目，这题有点意思</p>
<p>看看附件是啥吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>tonightsuccessnoticenoticewewesuccesstonightweexamplecryptoshouldwebackspacetonightbackspaceexamplelearnwesublimlearnbackspacetheshouldwelearnfoundsublimsystemexamplesublimfoundlearnshouldmorningsublimsystemuserlearnthecryptomorningexamplenoticetonightlearntonightlearntonightsublimenterusermorningfoundtonightweenterfoundnoticethecryptomorningthebackspacelearntonightlearnsublimtonightlearnfoundenterfoundsuccesstonightsuccessuserfoundmorningtonighttheshouldsublimentertonightenterbackspacelearnexamplenoticeexamplefoundsystemsuccesssublimsuccessshouldtonightcryptowelearncryptofoundshouldsublimsublimweentertonightsuccessshouldentertheentercryptouserbackspaceshouldentersystemsuccesssystementerfoundenterlearnexampletonightnoticemorningusertonightlearnmorningtonightfoundfoundsuccessnoticesystementerlearnexamplebackspaceshouldcryptocryptosublimweexampletonighttheshouldthemorningbackspacelearntonightsystemsuccesssuccessbackspacemorningnoticeuserfoundfoundtonightmorningenterenterthefoundbackspacelearnenterentershouldthesystemfounduserlearnlearnsystemnoticetonighttheshouldlearnuserbackspaceweusernoticeshouldthewefoundsystemwecryptocryptowethebackspacesystementershouldtonightsystemnoticemorningsystemweentermorningfoundsuccessusertonightsuccesstonightbackspaceshouldweenterthewesystemusernoticesystemthelearnexamplelearnfoundlearnnoticeexamplesystemthecryptocryptolearnsystemthecryptoenterlearnexamplemorningmorningweenterentersuccessexampleuserthebackspacenoticesublimenterbackspacesuccessbackspacethesublimexamplesystemtheexamplecryptolearnuserexamplelearnsystemusersuccessenterentersuccesstheuserbackspacelearnsuccessbackspacethesublimshouldwebackspaceexamplesuccesssuccesstonightweusershouldsuccessmorningcryptomorningfoundbackspacesublimshouldentershouldnoticesuccessmorningsuccessexamplelearnshouldsublimlearntonightshoulduserbackspacesublimlearncryptosuccessenternoticetonightmorningtonightwesuccessweuserbackspaceexamplewesystemnoticemorningsystemmorningcryptolearnsystemthethefoundcryptouserlearnusersystemwemorningenterexampleshouldlearncryptofoundenterbackspacelearnenterenterbackspaceshouldbackspacetheshouldthesystemshouldshouldsuccessmorningthefoundsystementersystemtonightcryptowelearnexampleexamplesystementerbackspaceshouldtheentersublimtonightfoundfoundsuccesssuccesssystemsublimcryptoshouldentersublimmorninglearnfoundtonightcryptobackspacesuccesscryptowebackspacefoundshouldnoticeshouldmorningnoticesystemcryptosystemlearnsystemnoticemorningsystementerwemorninglearnsuccessfoundwesuccesswetheusercryptousernoticebackspacesuccessshouldtonightmorningentermorninguserenternoticefoundmorningwetonightsystemthecryptotonightcryptosystemuserthefoundexampletonightusersystemcryptosublimmorninguserthefoundbackspaceshouldsuccesscryptotonightsystemnoticebackspaceusershouldenterthecryptomorningwesublimnoticesuccessnoticeusersuccesstonightlearnweuserenterfounduserexampleshouldshouldtonightwelearnthenoticethewefoundmorningexampleshouldexamplethesuccessnoticeenterfoundthecryptonoticeuserlearnuserweenterfoundmorningsystemweexamplenoticethebackspaceexamplesublimtheusermorningtonightthesuccesscryptosuccessusersuccesstonighttonightwelearnenterenterthemorningentersystemcryptobackspacemorningsystemexamplecryptouserexamplelearnsublimsuccessusersystemfoundmorningshouldcryptotonightsublimtheexamplemorningsystemuserexampleweexamplenoticesuccesssublimnoticecryptoshouldbackspaceshouldthetonightfoundsublimbackspacebackspacetonightshouldbackspacesuccesstonightbackspacesuccessmorningsystemcryptobackspaceentertonighttonightnoticelearnshoulduserfoundexamplesystemthesuccessweusertonightcryptousernoticeenternoticebackspaceusersystemfoundusernoticeshouldlearnuserfoundexampleusermorningshouldsuccessmorningmorningexampleexamplefoundsublimfoundenterbackspacenoticelearnfoundmorningcryptonoticecryptoshouldweshouldtonightcryptobackspacesublimcryptosublimenterentersublimentercryptonoticethethesublimexampleenterentershouldlearncryptoentershouldmorninglearnnoticeuserexamplesublimtonightshouldfoundtonightsuccessshouldmorningfoundtheweuserlearnsublimsystembackspacecryptotheusertonightcryptosublimmorningmorningexamplenoticetheenterlearnshouldmorningsublimfoundtonightsublimsublimexamplefounduserexamplethefoundwemorningnoticefoundcryptosuccesssublimsublimexamplethesuccessexamplenoticesuccessbackspacesublimlearnuserexamplesuccesssuccesssystemsuccessmorningmorninglearnexamplemorningtonightfoundbackspaceenternoticemorningentersuccessmorningusermorningbackspacelearncryptoenteruserenteruserthetonighttonightsuccesslearnenterfoundsuccesssystemfoundbackspaceenterlearnsystemsublimcryptoentermorningwetonightshouldlearnenterfoundcryptonoticelearnlearnshouldfoundsuccessexampletonightthesuccessfoundusertonightenterfoundsuccessshouldmorningusernoticemorningsystemsystemsuccessshouldwelearnenterfoundexamplewethefoundweshouldsystemsystemmorningmorningbackspaceshouldentersublimentertonightsuccesssystemsystemcryptousershouldsublimfoundwetonightnoticeexamplewewesuccessfoundusertonightfoundsystemexamplecryptofoundshouldshouldsuccessenterbackspaceexampletonightthelearnnoticeuserlearnsystemsublimfoundlearnsuccesssystemshouldsublimnoticelearnsystemnoticetonightexamplefoundusernoticeenterlearnnoticecryptousersystemmorningthewesystemfoundfoundshouldsystementerenterbackspacesystemsublimcryptousermorninglearnlearntonightsublimlearnenterenterbackspacesystemuserusercryptoentershouldtheusersublimnoticeexamplemorningexamplesublimsublimbackspacesystemexampleshouldsublimlearnfoundenterbackspacelearnmorningmorningfoundthetonightmorningnoticeenterlearnusersystemtonightbackspaceexamplelearntonightbackspaceweshouldcryptosuccessbackspaceexamplesuccesstheshouldmorninguserbackspacelearnthetheshouldcryptocryptotonightbackspacecryptocryptobackspacebackspacenoticeusertonightentermorningfoundweenterexampleenterfoundusersublimsystemtheexampleexamplesystemsuccessusersublimentermorningbackspacesystemfoundlearnsystemshouldsublimsublimentershouldtheusershouldexampleexampleshouldsuccesswelearnfoundsublimshoulduserweentertonightwenoticesublimsystemlearnshouldfoundsuccessuserentersuccessmorningcryptoenteruserfoundexampletonightlearnexampleexamplefoundlearnsuccesssystembackspacecryptonoticethefoundbackspacelearncryptothelearnlearnexamplesuccessnoticenoticesystemmorningcryptotonightnoticenoticeentersuccesscryptoenterbackspacesublimexampleenterfoundtonightcryptotonightsublimnoticesuccesssublimtheentertonighttheshouldthefoundsystemtonightuserbackspacesuccessshouldwebackspacenoticebackspacebackspacenoticewecryptobackspacebackspaceusertonightlearnsuccessmorningusertonightsuccessshouldbackspacecryptoenterentershouldsublimsystemexamplemorningcryptonoticethesuccessthebackspacenoticelearnsublimlearnsuccesscryptothesuccessenternoticecryptosystemsublimsuccesswebackspaceuserenterlearnuserwewemorningsuccesslearncryptobackspacewecryptosystemlearnenterenteruserexamplefoundsystemcryptousernoticefoundusersublimbackspacewesublimnoticemorningshouldexamplenoticecryptoshouldtonightmorningthefoundsystementerentersystemthecryptobackspacesublimlearnsuccessmorningsublimsystemcryptousersublimwesuccessmorningsublimbackspacecryptobackspacesublimthelearnsuccesssublimlearncryptoweweexamplecryptowenoticelearnfoundbackspacesystemsystemexampleshouldlearnsuccesssublimcryptobackspacetonightbackspacemorningmorningnoticeshouldnoticefoundthetheshouldtheshouldfoundfoundcryptosuccessbackspacesuccessshouldweenternoticeweweshouldmorningfoundusersuccessbackspacewenoticeusersuccessenterenterexamplelearnfoundwetonightusercryptothesublimsublimtonightsuccesslearnbackspacetonightentertonightthesublimnoticewefoundcryptobackspaceenterenterlearnlearntonightexamplesystementersublimnoticecryptoshoulduseruserbackspaceuserwesublimmorningwesystemshouldtonighttheusershouldnoticefoundusernoticeentersublimwethewefoundfoundlearnfoundwecryptosystemexamplemorningcryptocryptosublimtheexamplenoticefoundlearnwelearnmorningtheenterthesystemsublimtonightsuccesssystemlearnshouldenterbackspaceentersuccesssuccessbackspaceexamplenoticeentershouldsublimlearnbackspacetheshouldexamplelearnsystemusersublimbackspacebackspacesuccesswelearntonightexamplewecryptoenterwesystemsystemsublimexamplecryptolearnmorningsublimfoundsublimfoundbackspacefoundtonighttonightnoticesuccesssuccessexampleusersuccesstonightsublimcryptosystemweenterexamplesystemthethenoticesublimtonightbackspacenoticesystemexamplethesuccesstonightmorningsuccesstonightwenoticesublimtonightwelearntonightmorningsublimbackspaceenterthetonightenterwecryptofoundtheenternoticebackspacesuccesswesystemuserexamplebackspaceentersuccesstonightsublimwemorningsuccesssuccesswesublimsuccessnoticesublimfoundlearnlearnweexamplecryptonoticelearnweusershoulduserfoundcryptolearnfoundmorningtonightmorningmorningnoticewecryptowewesuccessfoundsublimweuserentershouldshouldshouldsublimbackspacetonightenterwesublimsuccessshouldfoundthethetonightwecryptoweenterfoundcryptoshouldcryptouseruserfoundentersublimsublimthelearntheshouldnoticebackspacefoundsuccessshouldtonightentermorningsystemmorningtonightwenoticelearnbackspaceexampleusershouldnoticesublimsublimexamplethesuccessnoticesystemmorningnoticecryptosystemsublimcryptosystemsuccessshouldmorningbackspaceshouldmorninglearnnoticenoticeshouldthewewesublimsublimnoticeusersuccessentersystemfoundshouldshouldcryptobackspaceusermorningsystemshouldshouldtonightwesublimuserfoundlearnbackspacethetonightmorningexampleuserthefoundbackspaceshouldtonightcryptocryptofounduserexamplenoticecryptousernoticethenoticeshouldweshouldfoundwemorningcryptosuccesslearnfoundtonightsublimnoticenoticewefoundwewesuccesssublimsublimcryptoweexampletonightsuccessfoundshouldsuccesstonightbackspacesystemshouldwesystemnoticebackspaceusersystembackspacewenoticelearnnoticenoticesuccesslearntonightuserlearnsuccessbackspacesuccesswesystemusercryptonoticethesystemusernoticewethesuccessweshouldfoundshouldcryptomorningtonightwethewesuccesslearntheshouldweexampletonightsuccessnoticenoticemorningfoundmorningfoundusersublimsystemsuccessbackspacesuccessmorninguserthefoundweexamplemorningsublimlearnfoundfoundnoticemorningshouldweuserwemorningexamplesuccesssuccessfoundthetheshouldweusershouldtheshouldexamplenoticefoundsuccesssystemfoundshouldsublimbackspacetonightshouldsystemtonightsuccesslearntonightsystemsublimsuccesscryptobackspacesystemsublimmorningmorningshouldmorninglearnsuccesslearnmorningusermorninglearnexamplecryptoshouldbackspacesublimshouldfoundbackspacesystemsystemweexamplesystemtonightsublimmorningmorninguserfoundcryptolearnbackspaceshouldbackspacenoticesublimfoundthecryptousershouldsuccesssystemsuccessshouldsystembackspacesublimshouldsublimsystembackspaceexampleshouldbackspacesublimnoticelearnsublimuserbackspaceusersublimsuccesssublimuserusernoticeshouldsuccessnoticenoticelearnexamplesystemweexamplesublimbackspacebackspacecryptoshouldusercryptosublimbackspacesublimshouldsystemnoticenoticethesuccesssuccesslearnsystemsublimwenoticelearnusersublimsystemusernoticeuserthesuccesslearnwelearnwenoticecryptolearncryptonoticenoticebackspacecryptothecryptousercryptobackspacesuccesslearnthesystemsuccessthesystemsystemcryptosuccessbackspacesublimlearnsublimcryptobackspacelearnsublimusersublimexamplecryptosublimsystemnoticecryptocryptousertheusernoticebackspacenoticenoticethecryptocryptosystembackspacesublimbackspacecryptocryptobackspacesystemuserthenoticesystemsystemsystemusernoticethecryptouserusersystemtheusercryptoexamplenoticecryptoexamplenoticetheexampleexamplethecryptotheusernoticetheexampleexamplecryptotheexampleexamplethenoticethecryptocryptoexampletheexamplecryptocryptothenoticeexamplecryptonoticetheexampleexampleexamplecryptocryptoexampleexamplethenoticethecryptothethethethethetheexampleexamplethetheexampletheexampletheexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample
</span></span></code></pre></div><p>好多连在一起的词汇，应该是一个简单NTP题目，也就是NLP最基础的一个步骤，分词。</p>
<p>这道题目的大致思路应该是：</p>
<ol>
<li>分词</li>
<li>词频统计</li>
<li>统计排序</li>
<li>根据排序位置找到指定的单词</li>
<li>拼接单词</li>
</ol>
<p>根据这个思路，写个脚本处理一下哈：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> collections <span style="color:#f92672">import</span> Counter <span style="color:#f92672">//</span> 统计库
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> wordninja <span style="color:#f92672">//</span> 英语单词词库
</span></span><span style="display:flex;"><span>data<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;tonightsuccessnoticenoticewewesuccesstonightweexamplecryptoshouldwebackspacetonightbackspaceexamplelearnwesublimlearnbackspacetheshouldwelearnfoundsublimsystemexamplesublimfoundlearnshouldmorningsublimsystemuserlearnthecryptomorningexamplenoticetonightlearntonightlearntonightsublimenterusermorningfoundtonightweenterfoundnoticethecryptomorningthebackspacelearntonightlearnsublimtonightlearnfoundenterfoundsuccesstonightsuccessuserfoundmorningtonighttheshouldsublimentertonightenterbackspacelearnexamplenoticeexamplefoundsystemsuccesssublimsuccessshouldtonightcryptowelearncryptofoundshouldsublimsublimweentertonightsuccessshouldentertheentercryptouserbackspaceshouldentersystemsuccesssystementerfoundenterlearnexampletonightnoticemorningusertonightlearnmorningtonightfoundfoundsuccessnoticesystementerlearnexamplebackspaceshouldcryptocryptosublimweexampletonighttheshouldthemorningbackspacelearntonightsystemsuccesssuccessbackspacemorningnoticeuserfoundfoundtonightmorningenterenterthefoundbackspacelearnenterentershouldthesystemfounduserlearnlearnsystemnoticetonighttheshouldlearnuserbackspaceweusernoticeshouldthewefoundsystemwecryptocryptowethebackspacesystementershouldtonightsystemnoticemorningsystemweentermorningfoundsuccessusertonightsuccesstonightbackspaceshouldweenterthewesystemusernoticesystemthelearnexamplelearnfoundlearnnoticeexamplesystemthecryptocryptolearnsystemthecryptoenterlearnexamplemorningmorningweenterentersuccessexampleuserthebackspacenoticesublimenterbackspacesuccessbackspacethesublimexamplesystemtheexamplecryptolearnuserexamplelearnsystemusersuccessenterentersuccesstheuserbackspacelearnsuccessbackspacethesublimshouldwebackspaceexamplesuccesssuccesstonightweusershouldsuccessmorningcryptomorningfoundbackspacesublimshouldentershouldnoticesuccessmorningsuccessexamplelearnshouldsublimlearntonightshoulduserbackspacesublimlearncryptosuccessenternoticetonightmorningtonightwesuccessweuserbackspaceexamplewesystemnoticemorningsystemmorningcryptolearnsystemthethefoundcryptouserlearnusersystemwemorningenterexampleshouldlearncryptofoundenterbackspacelearnenterenterbackspaceshouldbackspacetheshouldthesystemshouldshouldsuccessmorningthefoundsystementersystemtonightcryptowelearnexampleexamplesystementerbackspaceshouldtheentersublimtonightfoundfoundsuccesssuccesssystemsublimcryptoshouldentersublimmorninglearnfoundtonightcryptobackspacesuccesscryptowebackspacefoundshouldnoticeshouldmorningnoticesystemcryptosystemlearnsystemnoticemorningsystementerwemorninglearnsuccessfoundwesuccesswetheusercryptousernoticebackspacesuccessshouldtonightmorningentermorninguserenternoticefoundmorningwetonightsystemthecryptotonightcryptosystemuserthefoundexampletonightusersystemcryptosublimmorninguserthefoundbackspaceshouldsuccesscryptotonightsystemnoticebackspaceusershouldenterthecryptomorningwesublimnoticesuccessnoticeusersuccesstonightlearnweuserenterfounduserexampleshouldshouldtonightwelearnthenoticethewefoundmorningexampleshouldexamplethesuccessnoticeenterfoundthecryptonoticeuserlearnuserweenterfoundmorningsystemweexamplenoticethebackspaceexamplesublimtheusermorningtonightthesuccesscryptosuccessusersuccesstonighttonightwelearnenterenterthemorningentersystemcryptobackspacemorningsystemexamplecryptouserexamplelearnsublimsuccessusersystemfoundmorningshouldcryptotonightsublimtheexamplemorningsystemuserexampleweexamplenoticesuccesssublimnoticecryptoshouldbackspaceshouldthetonightfoundsublimbackspacebackspacetonightshouldbackspacesuccesstonightbackspacesuccessmorningsystemcryptobackspaceentertonighttonightnoticelearnshoulduserfoundexamplesystemthesuccessweusertonightcryptousernoticeenternoticebackspaceusersystemfoundusernoticeshouldlearnuserfoundexampleusermorningshouldsuccessmorningmorningexampleexamplefoundsublimfoundenterbackspacenoticelearnfoundmorningcryptonoticecryptoshouldweshouldtonightcryptobackspacesublimcryptosublimenterentersublimentercryptonoticethethesublimexampleenterentershouldlearncryptoentershouldmorninglearnnoticeuserexamplesublimtonightshouldfoundtonightsuccessshouldmorningfoundtheweuserlearnsublimsystembackspacecryptotheusertonightcryptosublimmorningmorningexamplenoticetheenterlearnshouldmorningsublimfoundtonightsublimsublimexamplefounduserexamplethefoundwemorningnoticefoundcryptosuccesssublimsublimexamplethesuccessexamplenoticesuccessbackspacesublimlearnuserexamplesuccesssuccesssystemsuccessmorningmorninglearnexamplemorningtonightfoundbackspaceenternoticemorningentersuccessmorningusermorningbackspacelearncryptoenteruserenteruserthetonighttonightsuccesslearnenterfoundsuccesssystemfoundbackspaceenterlearnsystemsublimcryptoentermorningwetonightshouldlearnenterfoundcryptonoticelearnlearnshouldfoundsuccessexampletonightthesuccessfoundusertonightenterfoundsuccessshouldmorningusernoticemorningsystemsystemsuccessshouldwelearnenterfoundexamplewethefoundweshouldsystemsystemmorningmorningbackspaceshouldentersublimentertonightsuccesssystemsystemcryptousershouldsublimfoundwetonightnoticeexamplewewesuccessfoundusertonightfoundsystemexamplecryptofoundshouldshouldsuccessenterbackspaceexampletonightthelearnnoticeuserlearnsystemsublimfoundlearnsuccesssystemshouldsublimnoticelearnsystemnoticetonightexamplefoundusernoticeenterlearnnoticecryptousersystemmorningthewesystemfoundfoundshouldsystementerenterbackspacesystemsublimcryptousermorninglearnlearntonightsublimlearnenterenterbackspacesystemuserusercryptoentershouldtheusersublimnoticeexamplemorningexamplesublimsublimbackspacesystemexampleshouldsublimlearnfoundenterbackspacelearnmorningmorningfoundthetonightmorningnoticeenterlearnusersystemtonightbackspaceexamplelearntonightbackspaceweshouldcryptosuccessbackspaceexamplesuccesstheshouldmorninguserbackspacelearnthetheshouldcryptocryptotonightbackspacecryptocryptobackspacebackspacenoticeusertonightentermorningfoundweenterexampleenterfoundusersublimsystemtheexampleexamplesystemsuccessusersublimentermorningbackspacesystemfoundlearnsystemshouldsublimsublimentershouldtheusershouldexampleexampleshouldsuccesswelearnfoundsublimshoulduserweentertonightwenoticesublimsystemlearnshouldfoundsuccessuserentersuccessmorningcryptoenteruserfoundexampletonightlearnexampleexamplefoundlearnsuccesssystembackspacecryptonoticethefoundbackspacelearncryptothelearnlearnexamplesuccessnoticenoticesystemmorningcryptotonightnoticenoticeentersuccesscryptoenterbackspacesublimexampleenterfoundtonightcryptotonightsublimnoticesuccesssublimtheentertonighttheshouldthefoundsystemtonightuserbackspacesuccessshouldwebackspacenoticebackspacebackspacenoticewecryptobackspacebackspaceusertonightlearnsuccessmorningusertonightsuccessshouldbackspacecryptoenterentershouldsublimsystemexamplemorningcryptonoticethesuccessthebackspacenoticelearnsublimlearnsuccesscryptothesuccessenternoticecryptosystemsublimsuccesswebackspaceuserenterlearnuserwewemorningsuccesslearncryptobackspacewecryptosystemlearnenterenteruserexamplefoundsystemcryptousernoticefoundusersublimbackspacewesublimnoticemorningshouldexamplenoticecryptoshouldtonightmorningthefoundsystementerentersystemthecryptobackspacesublimlearnsuccessmorningsublimsystemcryptousersublimwesuccessmorningsublimbackspacecryptobackspacesublimthelearnsuccesssublimlearncryptoweweexamplecryptowenoticelearnfoundbackspacesystemsystemexampleshouldlearnsuccesssublimcryptobackspacetonightbackspacemorningmorningnoticeshouldnoticefoundthetheshouldtheshouldfoundfoundcryptosuccessbackspacesuccessshouldweenternoticeweweshouldmorningfoundusersuccessbackspacewenoticeusersuccessenterenterexamplelearnfoundwetonightusercryptothesublimsublimtonightsuccesslearnbackspacetonightentertonightthesublimnoticewefoundcryptobackspaceenterenterlearnlearntonightexamplesystementersublimnoticecryptoshoulduseruserbackspaceuserwesublimmorningwesystemshouldtonighttheusershouldnoticefoundusernoticeentersublimwethewefoundfoundlearnfoundwecryptosystemexamplemorningcryptocryptosublimtheexamplenoticefoundlearnwelearnmorningtheenterthesystemsublimtonightsuccesssystemlearnshouldenterbackspaceentersuccesssuccessbackspaceexamplenoticeentershouldsublimlearnbackspacetheshouldexamplelearnsystemusersublimbackspacebackspacesuccesswelearntonightexamplewecryptoenterwesystemsystemsublimexamplecryptolearnmorningsublimfoundsublimfoundbackspacefoundtonighttonightnoticesuccesssuccessexampleusersuccesstonightsublimcryptosystemweenterexamplesystemthethenoticesublimtonightbackspacenoticesystemexamplethesuccesstonightmorningsuccesstonightwenoticesublimtonightwelearntonightmorningsublimbackspaceenterthetonightenterwecryptofoundtheenternoticebackspacesuccesswesystemuserexamplebackspaceentersuccesstonightsublimwemorningsuccesssuccesswesublimsuccessnoticesublimfoundlearnlearnweexamplecryptonoticelearnweusershoulduserfoundcryptolearnfoundmorningtonightmorningmorningnoticewecryptowewesuccessfoundsublimweuserentershouldshouldshouldsublimbackspacetonightenterwesublimsuccessshouldfoundthethetonightwecryptoweenterfoundcryptoshouldcryptouseruserfoundentersublimsublimthelearntheshouldnoticebackspacefoundsuccessshouldtonightentermorningsystemmorningtonightwenoticelearnbackspaceexampleusershouldnoticesublimsublimexamplethesuccessnoticesystemmorningnoticecryptosystemsublimcryptosystemsuccessshouldmorningbackspaceshouldmorninglearnnoticenoticeshouldthewewesublimsublimnoticeusersuccessentersystemfoundshouldshouldcryptobackspaceusermorningsystemshouldshouldtonightwesublimuserfoundlearnbackspacethetonightmorningexampleuserthefoundbackspaceshouldtonightcryptocryptofounduserexamplenoticecryptousernoticethenoticeshouldweshouldfoundwemorningcryptosuccesslearnfoundtonightsublimnoticenoticewefoundwewesuccesssublimsublimcryptoweexampletonightsuccessfoundshouldsuccesstonightbackspacesystemshouldwesystemnoticebackspaceusersystembackspacewenoticelearnnoticenoticesuccesslearntonightuserlearnsuccessbackspacesuccesswesystemusercryptonoticethesystemusernoticewethesuccessweshouldfoundshouldcryptomorningtonightwethewesuccesslearntheshouldweexampletonightsuccessnoticenoticemorningfoundmorningfoundusersublimsystemsuccessbackspacesuccessmorninguserthefoundweexamplemorningsublimlearnfoundfoundnoticemorningshouldweuserwemorningexamplesuccesssuccessfoundthetheshouldweusershouldtheshouldexamplenoticefoundsuccesssystemfoundshouldsublimbackspacetonightshouldsystemtonightsuccesslearntonightsystemsublimsuccesscryptobackspacesystemsublimmorningmorningshouldmorninglearnsuccesslearnmorningusermorninglearnexamplecryptoshouldbackspacesublimshouldfoundbackspacesystemsystemweexamplesystemtonightsublimmorningmorninguserfoundcryptolearnbackspaceshouldbackspacenoticesublimfoundthecryptousershouldsuccesssystemsuccessshouldsystembackspacesublimshouldsublimsystembackspaceexampleshouldbackspacesublimnoticelearnsublimuserbackspaceusersublimsuccesssublimuserusernoticeshouldsuccessnoticenoticelearnexamplesystemweexamplesublimbackspacebackspacecryptoshouldusercryptosublimbackspacesublimshouldsystemnoticenoticethesuccesssuccesslearnsystemsublimwenoticelearnusersublimsystemusernoticeuserthesuccesslearnwelearnwenoticecryptolearncryptonoticenoticebackspacecryptothecryptousercryptobackspacesuccesslearnthesystemsuccessthesystemsystemcryptosuccessbackspacesublimlearnsublimcryptobackspacelearnsublimusersublimexamplecryptosublimsystemnoticecryptocryptousertheusernoticebackspacenoticenoticethecryptocryptosystembackspacesublimbackspacecryptocryptobackspacesystemuserthenoticesystemsystemsystemusernoticethecryptouserusersystemtheusercryptoexamplenoticecryptoexamplenoticetheexampleexamplethecryptotheusernoticetheexampleexamplecryptotheexampleexamplethenoticethecryptocryptoexampletheexamplecryptocryptothenoticeexamplecryptonoticetheexampleexampleexamplecryptocryptoexampleexamplethenoticethecryptothethethethethetheexampleexamplethetheexampletheexampletheexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexampleexample</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span>lm <span style="color:#f92672">=</span> wordninja<span style="color:#f92672">.</span>LanguageModel(<span style="color:#e6db74">&#39;my_dict.txt.gz&#39;</span>) <span style="color:#f92672">//</span> 通过调试写出的简单字典
</span></span><span style="display:flex;"><span>data_list <span style="color:#f92672">=</span> lm<span style="color:#f92672">.</span>split(data)
</span></span><span style="display:flex;"><span>data_count <span style="color:#f92672">=</span> Counter(data_list)
</span></span><span style="display:flex;"><span>index <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>hint_list <span style="color:#f92672">=</span> [<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">15</span>,<span style="color:#ae81ff">16</span>]
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> data_count<span style="color:#f92672">.</span>most_common(<span style="color:#ae81ff">20</span>)[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> index <span style="color:#f92672">in</span> hint_list:
</span></span><span style="display:flex;"><span>        m <span style="color:#f92672">+=</span> i[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>print(m)
</span></span></code></pre></div><p>运行一下脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>weshouldlearnthecrypto
</span></span></code></pre></div><p>游戏结束！得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{weshouldlearnthecrypto}
</span></span></code></pre></div><h2 id="0x1-afctf2018vigenere">0x1 [AFCTF2018]Vigenere</h2>
<p>维吉尼亚密码，多表替换密码。来瞧瞧题目的附件：</p>
<p>两个附件文件，一个加密的<code>flag_encode.txt</code>和加密算法的<code>Encode.c</code></p>
<p>Encode.c</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdlib.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">freopen</span>(<span style="color:#e6db74">&#34;flag.txt&#34;</span>,<span style="color:#e6db74">&#34;r&#34;</span>,stdin);
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">freopen</span>(<span style="color:#e6db74">&#34;flag_encode.txt&#34;</span>,<span style="color:#e6db74">&#34;w&#34;</span>,stdout);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> key[] <span style="color:#f92672">=</span> <span style="color:#75715e">/*SADLY SAYING! Key is eaten by Monster!*/</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> len <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(key);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> ch;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span>((ch <span style="color:#f92672">=</span> <span style="color:#a6e22e">getchar</span>()) <span style="color:#f92672">!=</span> EOF){
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(ch<span style="color:#f92672">&gt;=</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">&amp;&amp;</span>ch<span style="color:#f92672">&lt;=</span><span style="color:#e6db74">&#39;z&#39;</span>){
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">putchar</span>((ch<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">+</span>key[index<span style="color:#f92672">%</span>len]<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;a&#39;</span>);
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">++</span>index;
</span></span><span style="display:flex;"><span>		}<span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(ch<span style="color:#f92672">&gt;=</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">&amp;&amp;</span>ch<span style="color:#f92672">&lt;=</span><span style="color:#e6db74">&#39;Z&#39;</span>){
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">putchar</span>((ch<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">+</span>key[index<span style="color:#f92672">%</span>len]<span style="color:#f92672">-</span><span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;A&#39;</span>);
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">++</span>index;
</span></span><span style="display:flex;"><span>		}<span style="color:#66d9ef">else</span>{
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">putchar</span>(ch);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>flag_encode.txt</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Yzyj ia zqm Cbatky kf uavin rbgfno ig hnkozku fyyefyjzy sut gha pruyte gu famooybn bhr vqdcpipgu jaaju obecu njde pupfyytrj cpez cklb wnbzqmr ntf li wsfavm azupy nde cufmrf uh lba enxcp, tuk uwjwrnzn inq ksmuh sggcqoa zq obecu zqm Lncu gz Jagaam aaj qx Hwthxn&#39;a Gbj gfnetyk cpez, g fwwang xnapriv li phr uyqnvupk ib mnttqnq xgioerry cpag zjws ohbaul drinsla tuk liufku obecu ovxey zjwg po gnn aecgtsneoa.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Cn poyj vzyoe gxdbhf zq ty oeyl-ndiqkpl, ndag gut mrt cjy yrrgcmd rwwsf, phnz cpel gtw yjdbcnl bl zjwcn Cekjboe cklb yeezjqn htcdcannhum Rvmjlm, phnz juoam vzyoe nxn Tisk, Navarge jvd gng honshoc wf Ugrhcjefy. — Cpag zq kyyuek cpefk taadtf, Mxdeetowhps nxn qnfzklopeq gvwnt Sgf, xarvbrvg gngal fufz ywwrxu xlkm gnn koaygfn kf gnn ooiktfyz, — Tugc ehrtgnyn aae Owrz uh Yireetvmng hguiief jnateaelcre bl cpefk gfxo, ig ob bhr Xkybp os zqm Prurdy po nrcmr bx vg uxoyobp ig, gpv nk iaycqthzg fys Gbbnznzkpl, fwyvtp qtf lqmhzagoxv oa ywub lrvtlqpyku shz oemjvimopy cps cufmrf op koyh suau, af zq lbam fnjtl fkge gksg rrseye vg ybfric bhrot Kubege jvd Ugrhcjefy. Yzuqkpuy, enqknl, wvrn vcytnzn bhnz Igparasnvtf rqfa asggktifngv mdohrm vog hg ubwntkm noe rkybp aaj czaaykwhp cnabms; ntf swyoejrvgye cdf axckaqeaig zuph fnnen gncl gwnxowl aek ogla dvyywsrj vg mqfska, ehvrg wpelf gam shlhwlwbyk cpaa zq jcchg zqmmfknnyo bl gkwlvyjahc tuk owrzy vg qdipn cpel gtw uychycwmrj. Dmn shrt j toam vjuen bl jjufku shz ufaaxagoqfm, lueydqnt opnuninhug tuk usga Oopnkt rbkfwas n jnaitt vg ladhin bhrs wfxar nhbwlhzg Vyopbzram, vz kk ndevx aqguz, kl co tukrz dhza, li pheuf wfs ywub Coikavmrtv, shz tb vawvvjg fys Ghgals sut lbaie ldbuek uwwqrvzh. — Aupn jsm xert cpe cgvayjt faoneegpuy kf gnnae Pungheef; gwl shij am joj zqm nrigkmetl cqqcu iqfmprnowa tuko li wlgka bhrot xinmrx Bgsgkok ib Gbbnznzkpl. Nde uobboee qx nde cxnaeaz Mahc os Mamag Htanwia ob i hvyvglu os xnxenzgv cjjhxrms ntf mmqrcgcqoay, cdf daiowo ia jkjyyt bhsmcg zjw yotnhuqsusgfn kf nt jjsbrwly Pyegwvy bbgj ndefk Bbagku. Li lrbbn bhvy, nwn Bapzb je fadecptrj cw a pgpvcz wbxul.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Hr nck lafhynl hvy Ckmang zx Tajy, vzy iofz fpoykugga aaj wmcryuslu fbx cpe caddcy gbum.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Pe ugu xinbvjmmn uou Yireetxzs gu rsmo Lncb wf vsowxeagk jvd cxgkment ovxoezcfwa, uarnas fauhyjdrj rv tukkj ileegcqoa zkdf dif Gbaeaz uziqlq hn wbggkfyz; aaj fpea yq kooprtmmd, uk jsm qtgkaty akidyytrj cw agzgfx po gnnu.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Hr nck lafhynl tb vckm ktuka Tajy hgl phr glkozsqvupibt xn lnxiw xesgxrktf uh hykpyk, dvlryu lbksr vnwpyk ygohd ekuqndakkb phr xrohg uh Jylrrynvtnzkgh en gnn Tetoudupuek, j zitnv ahasgovibyk vg ndez gwl fbxoaxwbyk cw tlxcfno oarh.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Pe ugu uuhlrj cwgrzjwl hetobtagoxw vkdvkb it crcuyo uaabcay, apuiifbxcibyk, cfx zifzjvt sxqe nde qkywsvzqjs kf gnnqr Caddcy Rrixzdf, lqj nde fuum phxrgma os ljbitakfa phrs rvtb iqejhintlm wvzj zco mrgbcrry.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Jw bws qobaoybgv Lapekbmnggvapa Hbabms ekrwupeqrh, noe urhioiam fqtu scffu fvxvvefy jam enigbqoay qf nde eopptf uh lba pruyte.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Uk jsm nesabmd sut s fknt zrue, nlvwl oupn mqsfunmneoay, cw cnauw iphrxb bo ok gdyytrj, fpeekdq nde Ykpqsygvapa Pbcnzs, vtesjwbyk xn Aatkzchagoxv, hnbg jypuetnl tb zjw Jaocrn it ygtyy boe zqmie kzwlyifk; cpe Fzcly nezgrviam kf nde zkjv tvsg wrlofkm bo nrn lba dntpmrf uh ahrafoxv feuo ocphbac, inq iqfpqlfoxvs jovzcj.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Hr nja eajgspkuekm bo cxgnyjt gnn xocansneoa uo bhryg Knwtry; owr gncl jqrcubm ooyvjoytvtp bhr Rcom boe Tjbuegnatwtvuw wf Sutwccnrxb; zesauahc tb vjas bzjwlo tb kwkohxcyy phroa uitxclcknf nrbhrx, cfx navyrvg gng uijdvzrwnf uh fys Acvawpeoclcknf uo Taaju.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Zy daf ukateaelyz tuk Jlmvtkknnagoxv os Pwknecr hh zesauahc hvy Jasrtv li Hajy owr ryvsvhifnrvg Wafaweaee Ywwrxu.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Zy daf sjle Wafyyo drvnvdrtv gh dif Crtl nrqfy boe zqm trtwjy kf gnnqr blhawas, ntm bhr gogojt ntm xalsgfn kf gnnqr fgnsleef.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>luig vy cxwpf{Jnxwobuqg_O_Cogiqi!}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Hr nck ynepznl a zanlcpuqk xn Nrc Qxzecry, jvd fkpl betuka awnxok ib Oslrkeey vg bwrnyb wue vggjhe ntm mag uwl ndevx bcbfzcfwa.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Hr nja krvv sgknt ab, qn goowm kf ckjke, Fzcfxent Gauiry yandohz cpe Pupkyjt bl xcr ykiamhagaams.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Uk jsm wfsklbeq zq jyjdrx cpe Zonanwrl owleckpvyjt bl jvd farwleoe zx bhr Iknch Pbcnz.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Hr nck wkmoowmd jovz iphrxb bo fadbyyt hy cw a watamzipzrwn sutwccn gu xcr pupknethzrwn, ntf mhwcxtxelrjiwx xy baa tajy; iapent nra Afygfn po gnnqr Nivk ib pekcmnqkf Dycifrjbibt:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Hgl munxcmrvti dungr hxliry qx unmrj czobvu sgknt ab:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Noe vtgnacgowo tuko, ts w mbit Brvgn xlkm cawqsusgfn boe gwg Mhxfwlo wuolp tuka kbkuyj lwmzov gh phr Owpaoovshps bl cpefk Ulupef:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Lxz chzvahc osl xcr Gxcvy sign jtl cgtlm kf gnn eoerf:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Xin izvxaiam Vsras bt da wvzjgop ohx Lwnfkpl:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Zkr qkyziiopy oo ia sjvy pguwm, kf gnn jeakhan kf Gxril oe Lmlu:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Fbx czaayrglpiam da breqfx Oeny cw br ztayz fbx yzegkpvyz oslnvcry:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Hgl wbbrrahvti lba fekn Ayfzge ib Eamuqsu Rcom en n tnqguhqmlent Vawvvtew, yotnhuqsuopy ndeekrv aa Gttcprnxh ooiktfgang, gwl earcjaent oca Bbapvuniry bw af zq jyjdrx rb ag upuy wn rdjupyk cfx big owateaowhp fbx rvteufmwent zqm snsg svooyacm rhrg ahpo gnnae Pungheef
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Lxz tnqkfa wwne xcr Pncjnarf, gkwlvyjahc ohx vwsg bcdowbyk Uiwf gpv uhtrxrvg sapvuieazjtll zjw Zkrzy xn ohx Igparasnvtf:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Lqj mqsckwliam qml kwa Rnoifrclonef, gwl drinslent zqmmfknnyo iabnatrj yand pbcnz tb rgycolnzn noe au ah wly ijaef cjsnoorbnz.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Hr nck uxdvijbeq Mqnynnzkwb hrxg, ts zeprjziam wk iqt bl qqs Cxqlyytvuw inq ccycjg Jga ignopkn qs.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Uk qis crwfxarrj xcr fkck, lwvnmnl ohx eguotf, hdzng uwj nkway, jvd qkullkyrj cpe yoxwm kf baa xebvnw.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Ba if gc bhvy vaga tegwapbxvahc lnxpm Aeskwm kf suamitt Owlyeagaqef zq uiipykjb tuk yglgs bl mmagn, fwmklnzrwn, ntf lsnaath, ilekcvs xetaw eign ealyuzycinpku gz Yrhkuby &amp; Cktxczy fijzcrra hunayrnteq op lba mbyc jaehcjiqs nmna, aaj vgnwlye dvwbxvzs phr Nnid bl c ucriyoimd agvaij.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Hr nja cbtullwiakm wue lgdfkw Pocqzrtu lugea Ijxtvbg gh phr nroh Fkck nk brga Irzy cyuenfz cpevx Egojtee, cw briqey phr kgmchzkgharf uo bhrot xleeajb inq Htwndrrt, xz tb lcdf phrsbmliku ts phroa Paaju.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Zy daf kgkigkf viiefzrk iaywjlacgoxvs nsqfaot hy, jvd ugu whzenbxcrrj vg vniam xv tuk kfbwbvzjvtf uh gon feuwbirxu, lba mrxlqlryu Ahzint Bivnmgk qdofk tvojt tmfa os cjzfnxg, am wn htmqsgopyoesukm lefztmwpibt xn ayr cyyo, srdna aaj eghzigoxvs.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Vt gnyny fzjoe bl vzyoe Bvyzefykgho Wr njde Ckvaneoakm noe Xgvlasf ow bhr sqkn duzhum trxok: Iqr ekymagkf Hypigoxvs ugxw vaea gwawrxgv ijll hh zeckclyz iapdzy. N Vtahye, jnxae pncjuytrx ra tuau eunkrj kg eiktq uyt jnrkh zga vybiak j Byegpl, co ualrb tb hg lba rhrnz os g hjya pruyte.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Aut zure Jk kmea ccfnent ow itgkplcknf zx wue Htanesu hamtuxgf. Qa hnbn eaetgv ndez lawm goow nk tvsn wf nzvwgltf hh bhrot dycifrjbuek vg yttrtm in htyslnaazjjlr pwjcodvicqoa uxwl qs. Jk qivr xgecjdrj cpez uh lba cvxlcmfzcfwas bl xcr rskylwtvuw inq yglnhezkwb hrxg. Oy daik jxprgnwx po gnnqr agvapa jhycqcr gpv gwgagwqmvza, shz wr njde pupboneq zqmm oe vzy piry xn ohx eggioa qrvdekf li zifgeww gngky qshxyitvupk, qdipn fwuyj kfyriggkty vtvwlnucz xcr pupfyytvuwa aaj eglnefvxvdrtew. Ndel zxw hnbg tyan qkjn tb zjw pkipk xn jhyvawa aaj xn cbtushcuvtrby. Jk ommp, tukamfbxg, swmuvkbke vt vzy jepkbaige, yzcyh qkwwuaigk iqr Fkyirnzkgh, wnq nxtd gnge, uo wr nxtd gng jyot bl vinxopv, Yjezona ia Ccj, cj Prglm Feogfxo.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Wr, zqmrrlqjy, phr Xnxrrygfnwtvbna os zjw ojigkm Atnzgk ib Azkaqcn, op Yyjeegu Koamtwmo, Afynubykf, sjlenrrvg gu vzy Oucxnue Wafyy kf gnn eoerf xin tuk amcgovmxa os udz iazgfneoay, mw, ia zjw Hwmr, gwl bl Gwlbkrvzh wf gng yikd Ckxxlr uh lbasr Ixtoaogk, mklrswty caddcoh ntm leprcjy, Phnz cpefk wfcpeq Ixtoaogk une, ntm wf Eoizn kutnc bo ok Hjya aaj Rvdrvgfxang Ycitry, vzup tukh irr Gdkihvrj ozoz gnd Uhlrmrinpk vg nde Oxrbifn Ejisn, ntm bhnz cdf loyocqcnr eghjepzrwn okvoyan gnnu aaj vzy Otnzn wf Txgsn Xrvzjqn, vy cfx kutnc bo ok vgnwlye mqsfunnyz; aaj cpag gu Xlae ntm Qnqkrwhzeaz Bbagku, lbay ugem fhrn Hisee zx teie Ysl, yoaiucdr Vgswa, cbtczapz Cdfeaaina, efzctfesu Ixumrxew, ujd gu mw ayr qlbar Nica aaj Vzcjgf cqqcu Opvyleajnvt Fzclyo mne xn rvmjl xk. — Aaj owr gng kolpbxc wf gnkk Xacygaitvup, ocph n lrzm eknaujcr uw bhr vtgnacgoxv os Jkncje Cxxdiqkpuy, se zaccayra hfadtk cw enij gndee udz Lvbgk, iqr Suabuaku, shz ohx bicekf Zijoe.
</span></span></code></pre></div><p>直接去维吉尼亚密码破解网站进行破解就好，进行破解得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>When in the Course of human events it becomes necessary for one people to dissolve the political bands which have connected them with another and to assume among the powers of the earth, the separate and equal station to which the Laws of Nature and of Nature&#39;s God entitle them, a decent respect to the opinions of mankind requires that they should declare the causes which impel them to the separation.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>We hold these truths to be self-evident, that all men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness. — That to secure these rights, Governments are instituted among Men, deriving their just powers from the consent of the governed, — That whenever any Form of Government becomes destructive of these ends, it is the Right of the People to alter or to abolish it, and to institute new Government, laying its foundation on such principles and organizing its powers in such form, as to them shall seem most likely to effect their Safety and Happiness. Prudence, indeed, will dictate that Governments long established should not be changed for light and transient causes; and accordingly all experience hath shewn that mankind are more disposed to suffer, while evils are sufferable than to right themselves by abolishing the forms to which they are accustomed. But when a long train of abuses and usurpations, pursuing invariably the same Object evinces a design to reduce them under absolute Despotism, it is their right, it is their duty, to throw off such Government, and to provide new Guards for their future security. — Such has been the patient sufferance of these Colonies; and such is now the necessity which constrains them to alter their former Systems of Government. The history of the present King of Great Britain is a history of repeated injuries and usurpations, all having in direct object the establishment of an absolute Tyranny over these States. To prove this, let Facts be submitted to a candid world.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has refused his Assent to Laws, the most wholesome and necessary for the public good.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has forbidden his Governors to pass Laws of immediate and pressing importance, unless suspended in their operation till his Assent should be obtained; and when so suspended, he has utterly neglected to attend to them.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has refused to pass other Laws for the accommodation of large districts of people, unless those people would relinquish the right of Representation in the Legislature, a right inestimable to them and formidable to tyrants only.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has called together legislative bodies at places unusual, uncomfortable, and distant from the depository of their Public Records, for the sole purpose of fatiguing them into compliance with his measures.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has dissolved Representative Houses repeatedly, for opposing with manly firmness his invasions on the rights of the people.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has refused for a long time, after such dissolutions, to cause others to be elected, whereby the Legislative Powers, incapable of Annihilation, have returned to the People at large for their exercise; the State remaining in the mean time exposed to all the dangers of invasion from without, and convulsions within.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has endeavoured to prevent the population of these States; for that purpose obstructing the Laws for Naturalization of Foreigners; refusing to pass others to encourage their migrations hither, and raising the conditions of new Appropriations of Lands.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has obstructed the Administration of Justice by refusing his Assent to Laws for establishing Judiciary Powers.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has made Judges dependent on his Will alone for the tenure of their offices, and the amount and payment of their salaries.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag is afctf{Whooooooo_U_Gotcha!}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has erected a multitude of New Offices, and sent hither swarms of Officers to harass our people and eat out their substance.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has kept among us, in times of peace, Standing Armies without the Consent of our legislatures.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has affected to render the Military independent of and superior to the Civil Power.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has combined with others to subject us to a jurisdiction foreign to our constitution, and unacknowledged by our laws; giving his Assent to their Acts of pretended Legislation:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>For quartering large bodies of armed troops among us:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>For protecting them, by a mock Trial from punishment for any Murders which they should commit on the Inhabitants of these States:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>For cutting off our Trade with all parts of the world:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>For imposing Taxes on us without our Consent:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>For depriving us in many cases, of the benefit of Trial by Jury:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>For transporting us beyond Seas to be tried for pretended offences:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>For abolishing the free System of English Laws in a neighbouring Province, establishing therein an Arbitrary government, and enlarging its Boundaries so as to render it at once an example and fit instrument for introducing the same absolute rule into these Colonies
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>For taking away our Charters, abolishing our most valuable Laws and altering fundamentally the Forms of our Governments:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>For suspending our own Legislatures, and declaring themselves invested with power to legislate for us in all cases whatsoever.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has abdicated Government here, by declaring us out of his Protection and waging War against us.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has plundered our seas, ravaged our coasts, burnt our towns, and destroyed the lives of our people.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He is at this time transporting large Armies of foreign Mercenaries to compleat the works of death, desolation, and tyranny, already begun with circumstances of Cruelty &amp; Perfidy scarcely paralleled in the most barbarous ages, and totally unworthy the Head of a civilized nation.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has constrained our fellow Citizens taken Captive on the high Seas to bear Arms against their Country, to become the executioners of their friends and Brethren, or to fall themselves by their Hands.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>He has excited domestic insurrections amongst us, and has endeavoured to bring on the inhabitants of our frontiers, the merciless Indian Savages whose known rule of warfare, is an undistinguished destruction of all ages, sexes and conditions.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>In every stage of these Oppressions We have Petitioned for Redress in the most humble terms: Our repeated Petitions have been answered only by repeated injury. A Prince, whose character is thus marked by every act which may define a Tyrant, is unfit to be the ruler of a free people.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Nor have We been wanting in attentions to our British brethren. We have warned them from time to time of attempts by their legislature to extend an unwarrantable jurisdiction over us. We have reminded them of the circumstances of our emigration and settlement here. We have appealed to their native justice and magnanimity, and we have conjured them by the ties of our common kindred to disavow these usurpations, which would inevitably interrupt our connections and correspondence. They too have been deaf to the voice of justice and of consanguinity. We must, therefore, acquiesce in the necessity, which denounces our Separation, and hold them, as we hold the rest of mankind, Enemies in War, in Peace Friends.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>We, therefore, the Representatives of the united States of America, in General Congress, Assembled, appealing to the Supreme Judge of the world for the rectitude of our intentions, do, in the Name, and by Authority of the good People of these Colonies, solemnly publish and declare, That these united Colonies are, and of Right ought to be Free and Independent States, that they are Absolved from all Allegiance to the British Crown, and that all political connection between them and the State of Great Britain, is and ought to be totally dissolved; and that as Free and Independent States, they have full Power to levy War, conclude Peace, contract Alliances, establish Commerce, and to do all other Acts and Things which Independent States may of right do. — And for the support of this Declaration, with a firm reliance on the protection of Divine Providence, we mutually pledge to each other our Lives, our Fortunes, and our sacred Honor.
</span></span></code></pre></div><p>在破解得到文字中找到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>afctf{Whooooooo_U_Gotcha!}
</span></span></code></pre></div><h2 id="0x2-npuctf2020这是什么">0x2 [NPUCTF2020]这是什么🐎</h2>
<p>看题目应该是个脑洞题，古典密码学题目，瞧瞧附件吧：</p>
<p>附件是一个<code>attachment</code>文件，没有文件扩展名……那就先探测一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>file attachment
</span></span></code></pre></div><p>得到探测输出：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>attachment: Zip archive data, at least v2.0 to extract
</span></span></code></pre></div><p>应该是一个压缩文件，修改文件名为<code>attachment.zip</code>，然后进行解压，得到了一个图片：</p>
<p><img src="/images/BUUCTF-CRYPTO-5_writeup/flag.jpg" alt="flag"></p>
<p>（这是杂项题目，越做越不像密码学）</p>
<p>这个图片应该就是密码，认真观察一下图片，发现图片底部有密文。</p>
<p>对密文进行分析：</p>
<ol>
<li>日历的周是按英文来进行显示的</li>
<li>密文数组中的首字母好像对应着英文的周</li>
</ol>
<p>因此可以根据以下思路进行解题：</p>
<ol>
<li>根据密码需要对应数字</li>
<li>将数字映射到字母表</li>
<li>讲字母拼接</li>
</ol>
<p>根据思路，写个脚本求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;F1 W1 S22 S21 T12 S11 W1 S13&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode_cal</span>(data):
</span></span><span style="display:flex;"><span>    encode_dict <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;M&#39;</span>:[],
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;T1&#39;</span>:[],
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;W&#39;</span>:[],
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;T2&#39;</span>:[],
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;F&#39;</span>:[],
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;S1&#39;</span>:[],
</span></span><span style="display:flex;"><span>            <span style="color:#e6db74">&#39;S2&#39;</span>:[]
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>    dict_index<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;M&#39;</span>,<span style="color:#e6db74">&#39;T1&#39;</span>,<span style="color:#e6db74">&#39;W&#39;</span>,<span style="color:#e6db74">&#39;T2&#39;</span>,<span style="color:#e6db74">&#39;F&#39;</span>,<span style="color:#e6db74">&#39;S1&#39;</span>,<span style="color:#e6db74">&#39;S2&#39;</span>]
</span></span><span style="display:flex;"><span>    index <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">30</span>):
</span></span><span style="display:flex;"><span>        encode_dict[dict_index[(index<span style="color:#f92672">+</span>i)<span style="color:#f92672">%</span><span style="color:#ae81ff">7</span>]]<span style="color:#f92672">.</span>append(i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    result<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> data:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> len(m)<span style="color:#f92672">==</span><span style="color:#ae81ff">2</span>:
</span></span><span style="display:flex;"><span>            result <span style="color:#f92672">+=</span> string<span style="color:#f92672">.</span>ascii_lowercase[encode_dict[m[<span style="color:#ae81ff">0</span>]][int(m[<span style="color:#ae81ff">1</span>])<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> len(m)<span style="color:#f92672">==</span><span style="color:#ae81ff">3</span>:
</span></span><span style="display:flex;"><span>            result <span style="color:#f92672">+=</span> string<span style="color:#f92672">.</span>ascii_lowercase[encode_dict[m[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">2</span>]][int(m[<span style="color:#ae81ff">2</span>])<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">=</span> encode_cal(c_list)
</span></span><span style="display:flex;"><span>    print(flag)
</span></span></code></pre></div><p>运行脚本，游戏结束！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>calendar
</span></span></code></pre></div><h2 id="0x3-easyrsa">0x3 easyrsa</h2>
<p>rsa题目，来，让我们暴打出题人！</p>
<p>附件是个python源码程序</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> getPrime,bytes_to_long
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sympy <span style="color:#f92672">import</span> Derivative
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> fractions <span style="color:#f92672">import</span> Fraction
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> secret <span style="color:#f92672">import</span> flag
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>q<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>e<span style="color:#f92672">=</span><span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>n<span style="color:#f92672">=</span>p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>z<span style="color:#f92672">=</span>Fraction(<span style="color:#ae81ff">1</span>,Derivative(arctan(p),p))<span style="color:#f92672">-</span>Fraction(<span style="color:#ae81ff">1</span>,Derivative(arth(q),q))
</span></span><span style="display:flex;"><span>m<span style="color:#f92672">=</span>bytes_to_long(flag)
</span></span><span style="display:flex;"><span>c<span style="color:#f92672">=</span>pow(m,e,n)
</span></span><span style="display:flex;"><span>print(c,z,n)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">output:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span></code></pre></div><p>简单审计一下，发现就是道数学题，微分方程的题目。这python程序的关键代码也只有一行：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>z<span style="color:#f92672">=</span>Fraction(<span style="color:#ae81ff">1</span>,Derivative(arctan(p),p))<span style="color:#f92672">-</span>Fraction(<span style="color:#ae81ff">1</span>,Derivative(arth(q),q))
</span></span></code></pre></div><p>应该就是求解方程的事情，因为涉及数学运算，所以写个sage脚本求解吧</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> long_to_bytes
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span>
</span></span><span style="display:flex;"><span>z <span style="color:#f92672">=</span> <span style="color:#ae81ff">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>var(<span style="color:#e6db74">&#39;p, q&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>f1 <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span><span style="color:#f92672">/</span>diff(arctan(p),p))<span style="color:#f92672">-</span>(<span style="color:#ae81ff">1</span><span style="color:#f92672">/</span>diff(arctanh(q),q))
</span></span><span style="display:flex;"><span>f2 <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> sorted(solve([f1<span style="color:#f92672">==</span>z,f2<span style="color:#f92672">==</span>n],(p,q)))
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> result[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> result[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span>int(str(p)[<span style="color:#ae81ff">5</span>:])
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span>int(str(q)[<span style="color:#ae81ff">5</span>:])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> inverse_mod(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> long_to_bytes(m)
</span></span><span style="display:flex;"><span>print(flag)  
</span></span></code></pre></div><blockquote>
<p>由于sagemath是基于python3的开源数学软件，进行sage运行sage脚本是会转换成python格式进行运行，代码非常像python3</p>
</blockquote>
<p>运行脚本，暴打出题人！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>b&#39;BJD{Advanced_mathematics_is_too_hard!!!}&#39;
</span></span></code></pre></div><h2 id="0x4-babyrsa">0x4 babyRSA</h2>
<p>又一个RSA题目，希望这个不单单只是数学运算了，看看题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> flag <span style="color:#f92672">import</span> flag
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">nextPrime</span>(n):
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span> <span style="color:#66d9ef">if</span> n <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">else</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#f92672">not</span> isPrime(n):
</span></span><span style="display:flex;"><span>        n <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> n
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> nextPrime(p)
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p <span style="color:#f92672">*</span> q
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> inverse(e, (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> (q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> pow(bytes_to_long(flag<span style="color:#f92672">.</span>encode()), e, n)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># d = 19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># c = 5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804</span>
</span></span></code></pre></div><p>这道题目的输出是d、c，在算法程序里面暴露出了e。但是n不知道，这就有点麻烦了。简单推导一下公式：
$$
\phi = (p-1)\times(q-1)
$$</p>
<p>$$
d \equiv e^{-1} \text{mod}\phi
$$</p>
<p>$$
d \cdot e \equiv 1\text{mod} \phi
$$</p>
<p>$$
d\cdot e -1 = k \cdot(p-1)\cdot(q-1)
$$
根据推导，可以肯定的是这道题目需要进行爆破。为了提高爆破效率，需要进行缩小范围来进行更快求解。缩小范围需要先进行判断：p和q都是1024位，n就是2048位。进行简单的测试发现ed-1是2064位，那么可以判断出k一定是小于16位的，根据目前的推断来写脚本进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sympy
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> <span style="color:#ae81ff">19275778946037899718035455438175509175723911466127462154506916564101519923603308900331427601983476886255849200332374081996442976307058597390881168155862238533018621944733299208108185814179466844504468163200369996564265921022888670062554504758512453217434777820468049494313818291727050400752551716550403647148197148884408264686846693842118387217753516963449753809860354047619256787869400297858568139700396567519469825398575103885487624463424429913017729585620877168171603444111464692841379661112075123399343270610272287865200880398193573260848268633461983435015031227070217852728240847398084414687146397303110709214913</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">5382723168073828110696168558294206681757991149022777821127563301413483223874527233300721180839298617076705685041174247415826157096583055069337393987892262764211225227035880754417457056723909135525244957935906902665679777101130111392780237502928656225705262431431953003520093932924375902111280077255205118217436744112064069429678632923259898627997145803892753989255615273140300021040654505901442787810653626524305706316663169341797205752938755590056568986738227803487467274114398257187962140796551136220532809687606867385639367743705527511680719955380746377631156468689844150878381460560990755652899449340045313521804</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ed_1 <span style="color:#f92672">=</span> e<span style="color:#f92672">*</span>d<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(pow(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">15</span>),pow(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">16</span>)):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ed_1 <span style="color:#f92672">%</span> k <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        phi <span style="color:#f92672">=</span> ed_1<span style="color:#f92672">//</span>k
</span></span><span style="display:flex;"><span>        base <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>nroot(phi,<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>        p <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(base)
</span></span><span style="display:flex;"><span>        q <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>prevprime(base)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>k <span style="color:#f92672">==</span> ed_1:
</span></span><span style="display:flex;"><span>            n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>求解方式比较暴力，执行脚本就拿到flag了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>NCTF{70u2_nn47h_14_v3ry_gOO0000000d}
</span></span></code></pre></div><h2 id="0x5-afctf2018你能看出这是什么加密么">0x5 [AFCTF2018]你能看出这是什么加密么</h2>
<p>脑洞题，看看题目推测一下这是什么加密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>p=0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4f
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>q=0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e=0x10001
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c=0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6
</span></span></code></pre></div><p>好常规的RSA题目，这是签到题目吧</p>
<p>写个脚本解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">=</span><span style="color:#ae81ff">0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4f</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>q<span style="color:#f92672">=</span><span style="color:#ae81ff">0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e<span style="color:#f92672">=</span><span style="color:#ae81ff">0x10001</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c<span style="color:#f92672">=</span><span style="color:#ae81ff">0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，拿到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>afctf{R54_|5_$0_$imp13}
</span></span></code></pre></div><h2 id="0x6-actf新生赛2020crypto-rsa3">0x6 [ACTF新生赛2020]crypto-rsa3</h2>
<p>RSA算法的题目，有点意思哦！(*^_^*)</p>
<p>瞅一瞅题目附件：</p>
<p>有两个附件，比较常规的形式，一个是<code>output.txt</code>的输出文件，一个<code>rsa3.py</code>的算法文件</p>
<p>rsa3.py：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> flag <span style="color:#f92672">import</span> FLAG
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Cryptodome.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e<span style="color:#f92672">=</span><span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">512</span>)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> int(gmpy2<span style="color:#f92672">.</span>next_prime(p))
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> bytes_to_long(FLAG)
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> pow(m,e,n)
</span></span><span style="display:flex;"><span>print(n)
</span></span><span style="display:flex;"><span>print(c)
</span></span></code></pre></div><p>output.txt：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>177606504836499246970959030226871608885969321778211051080524634084516973331441644993898029573612290095853069264036530459253652875586267946877831055147546910227100566496658148381834683037366134553848011903251252726474047661274223137727688689535823533046778793131902143444408735610821167838717488859902242863683
</span></span><span style="display:flex;"><span>1457390378511382354771000540945361168984775052693073641682375071407490851289703070905749525830483035988737117653971428424612332020925926617395558868160380601912498299922825914229510166957910451841730028919883807634489834128830801407228447221775264711349928156290102782374379406719292116047581560530382210049
</span></span></code></pre></div><p>非常常规的RSA题目，给出了n，c，e。加密算法也比较常规，其中p和q的数值比较接近，可以直接对n开方来得到p和q的数值。根据这一思路，写个脚本求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sympy
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">177606504836499246970959030226871608885969321778211051080524634084516973331441644993898029573612290095853069264036530459253652875586267946877831055147546910227100566496658148381834683037366134553848011903251252726474047661274223137727688689535823533046778793131902143444408735610821167838717488859902242863683</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">1457390378511382354771000540945361168984775052693073641682375071407490851289703070905749525830483035988737117653971428424612332020925926617395558868160380601912498299922825914229510166957910451841730028919883807634489834128830801407228447221775264711349928156290102782374379406719292116047581560530382210049</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>base <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>nroot(n,<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>prevprime(base)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(base)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span>(p<span style="color:#f92672">*</span>q <span style="color:#f92672">==</span> n)
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>actf{p_and_q_should_not_be_so_close_in_value}
</span></span></code></pre></div><h2 id="0x7-鸡藕椒盐味">0x7 鸡藕椒盐味</h2>
<p>题目比较奇怪，那看看题目究竟什么样的题目吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>公司食堂最新出了一种小吃，叫鸡藕椒盐味汉堡，售价八块钱，为了促销，上面有一个验证码，输入后可以再换取一个汉堡。但是问题是每个验证码几乎都有错误,而且打印的时候倒了一下。小明买到了一个汉堡，准备还原验证码，因为一个吃不饱啊验证码如下：1100 1010 0000 ,而且打印的时候倒了一下。把答案哈希一下就可以提交了。(答案为正确值(不包括数字之间的空格)的32位md5值的小写形式) 注意：得到的 flag 请包上 flag{} 提交
</span></span></code></pre></div><p>可以从题目中提炼出一些关键信息：</p>
<ol>
<li>验证码：1100 1010 0000</li>
<li>打印的时候倒了一下</li>
<li>哈希提交。(答案为正确值(不包括数字之间的空格)的32位md5值的小写形式)</li>
<li>而且打印的时候倒了一下</li>
</ol>
<p>这些信息咋看不出来什么东西呀，嘤嘤嘤~</p>
<p>仔细看看题目，鸡藕椒盐味是不是很像是奇偶校验位，应该是这个。可以沿着奇偶校验位的这个方向沿着方向走一下，看看能否找到突破的入口。沿着奇偶校验位进行探索，发现有个海明校验码的东西，而且还有一个海明纠错码。这道题目，应该是使用海明纠错码来进行纠错的，那么什么是海明码呢？可以看看这篇<a href="https://zhuanlan.zhihu.com/p/278326197#:~:text=%E6%B5%B7%E6%98%8E%E7%A0%81%E5%88%A9%E7%94%A8%E7%9B%91%E7%9D%A3%E5%85%AC%E5%BC%8F%E5%AF%B9%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E4%BA%A4%E5%8F%89%E6%A0%A1%E9%AA%8C%EF%BC%8C%E5%88%A9%E7%94%A8%E7%9B%91%E7%9D%A3%E5%85%AC%E5%BC%8F%E7%9A%84%E7%89%B9%E6%80%A7%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%AE%9A%E4%BD%8D%E5%87%BA%E9%94%99%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BD%8D%E7%BD%AE%E3%80%82.%20%E5%9B%A0%E4%B8%BA%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%96%E5%80%BC%E5%8F%AA%E6%9C%89%E4%B8%A4%E7%A7%8D%E7%8A%B6%E6%80%810%E5%92%8C1%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%8F%AA%E8%A6%81%E7%9F%A5%E9%81%93%E5%87%BA%E9%94%99%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E4%BF%AE%E6%94%B9%E5%B0%B1%E5%8F%98%E5%BE%97%E9%9D%9E%E5%B8%B8%E7%9A%84%E5%AE%B9%E6%98%93%EF%BC%8C%E5%8F%AA%E8%A6%81%E5%AF%B9%E5%87%BA%E9%94%99%E4%BD%8D%E7%BD%AE%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8F%96%E5%8F%8D%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%BE%BE%E5%88%B0%E7%BA%A0%E6%AD%A3%E7%9A%84%E7%9B%AE%E7%9A%84%E3%80%82.%20%E4%BE%8B%E5%A6%82%E6%8E%A5%E6%94%B6%E7%AB%AF%E6%94%B6%E4%BA%86%E4%B8%80%E4%B8%B2%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE101011%EF%BC%8C%E7%BB%8F%E8%BF%87%E6%B5%B7%E6%98%8E%E7%A0%81%E8%AE%A1%E7%AE%97%E5%90%8E%E5%BE%97%E5%88%B0%E7%9A%84%E6%95%B0%E5%AD%97%E6%98%AF3%EF%BC%8C%E8%AF%B4%E6%98%8E%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84%E7%AC%AC3%E4%BD%8D%E7%9A%84%E6%95%B0%E6%8D%AE%E5%87%BA%E7%8E%B0%E4%BA%86%E9%94%99%E8%AF%AF%EF%BC%8C%E7%BA%A0%E6%AD%A3%E6%97%B6%E5%8F%AA%E9%9C%80%E8%A6%81%E6%8A%8A%E7%AC%AC%E4%B8%89%E4%BD%8D%E7%9A%841%E5%8F%96%E5%8F%8D%E5%8F%98%E6%88%900%E5%8D%B3%E5%8F%AF%EF%BC%8C%E7%BA%A0%E6%AD%A3%E5%90%8E%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%B2%E6%98%AF100011%E3%80%82.,%E5%85%AC%E5%BC%8F%20%281%29%E4%B8%AD%E6%B5%B7%E6%98%8E%E7%A0%81%E8%99%BD%E7%84%B6%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BA%A0%E9%94%99%EF%BC%8C%E4%BD%86%E6%98%AF%E5%8F%AA%E8%83%BD%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%AF%94%E7%89%B9%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BA%A0%E9%94%99%E3%80%82.%20%E5%A6%82%E6%9E%9C%E6%95%B0%E6%8D%AE%E4%B8%AD%E6%9C%89%E5%A4%9A%E4%B8%AA%E6%AF%94%E7%89%B9%E5%90%8C%E6%97%B6%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%EF%BC%8C%E5%B0%B1%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8%E6%9B%B4%E5%8A%A0%E5%A4%8D%E6%9D%82%E7%9A%84%E6%B5%B7%E6%98%8E%E5%85%AC%E5%BC%8F%E3%80%82.">知乎文章</a>大致原理都有了，根据这篇文章阐述的原理进行脚本编写，应该就可以找出答案了。写下脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;110010100000&#34;</span>
</span></span><span style="display:flex;"><span>c_r <span style="color:#f92672">=</span> c[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>c_list <span style="color:#f92672">=</span>[]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_r:
</span></span><span style="display:flex;"><span>    c_list<span style="color:#f92672">.</span>append(int(i))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>h1 <span style="color:#f92672">=</span> c_list[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">4</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">8</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">^</span> c_list[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>h2 <span style="color:#f92672">=</span> c_list[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">5</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">9</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">^</span> c_list[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>h3 <span style="color:#f92672">=</span> c_list[<span style="color:#ae81ff">4</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">5</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">6</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">^</span> c_list[<span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>h4 <span style="color:#f92672">=</span> c_list[<span style="color:#ae81ff">8</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">9</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">10</span>]<span style="color:#f92672">^</span>c_list[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">^</span> c_list[<span style="color:#ae81ff">7</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mistake_bit <span style="color:#f92672">=</span> int(str(h4)<span style="color:#f92672">+</span>str(h3)<span style="color:#f92672">+</span>str(h2)<span style="color:#f92672">+</span>str(h1),<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> c_list[mistake_bit<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">==</span><span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>    c_list[mistake_bit<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    c_list[mistake_bit<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">+=</span> str(i)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> m[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5(m)<span style="color:#f92672">.</span>hexdigest()
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行一下脚本，flag就有了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>d14084c7ceca6359eaac6df3c234dd3b
</span></span></code></pre></div><h2 id="0x8-actf新生赛2020crypto-classic0">0x8 [ACTF新生赛2020]crypto-classic0</h2>
<p>看题目就知道，这个是古典密码学的题目，看看究竟是在考察些什么古典密码吧：</p>
<p>附件文件里面有三个文件，一个<code>cipher</code>文本文件，一个<code>hint.txt</code>提示文件和一个<code>howtoencrypt.zip</code>加密压缩文件。</p>
<p>hint.txt:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>哼，压缩包的密码？这是小Z童鞋的生日吧==
</span></span></code></pre></div><p>应该是压缩包文件的提示内容</p>
<p>另一个cipher文件需要进行探测一下，使用<code>file</code>命令简单探测一下</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>cipher: International EBCDIC text, with no line terminators
</span></span></code></pre></div><p>是一个纯文本文件，这样可以使用记事本直接打开：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Ygvdmq[lYate[elghqvakl}
</span></span></code></pre></div><p>这个提示应该告诉压缩文件的密码长度，这里可以使用压缩爆破工具进行爆破，经过爆破可以得到密码是<code>19990306</code>。使用密码进行解压得到一个c语言源程序，应该是加密算法。</p>
<p>classic0.c：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span><span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> flag[<span style="color:#ae81ff">25</span>] <span style="color:#f92672">=</span> <span style="color:#f92672">***</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> i;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">25</span>;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>	{
</span></span><span style="display:flex;"><span>		flag[i] <span style="color:#f92672">-=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>		flag[i] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">0x7</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%c&#34;</span>,flag[i]);
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>; 
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>根据这个c程序算法设计一个逆算法应该就可以进行求解，这里写个c语言逆算法：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> flag[<span style="color:#ae81ff">25</span>];
</span></span><span style="display:flex;"><span>    FILE <span style="color:#f92672">*</span>fp <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span>    fp <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>(<span style="color:#e6db74">&#34;cipher.txt&#34;</span>,<span style="color:#e6db74">&#34;r&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fgets</span>(flag,<span style="color:#ae81ff">25</span>,fp);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">25</span>;i<span style="color:#f92672">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        flag[i] <span style="color:#f92672">^=</span> <span style="color:#ae81ff">0x7</span>;
</span></span><span style="display:flex;"><span>        flag[i] <span style="color:#f92672">+=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%c&#34;</span>, flag[i]);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fclose</span>(fp);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>编译并执行得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>actf{my_naive_encrytion}
</span></span></code></pre></div><h2 id="0x9-roarctf2019babyrsa">0x9 [RoarCTF2019]babyRSA</h2>
<p>RSA题目，看看这次又有什么样的惊喜！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> sympy
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">myGetPrime</span>():
</span></span><span style="display:flex;"><span>    A<span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">513</span>)
</span></span><span style="display:flex;"><span>    print(A)
</span></span><span style="display:flex;"><span>    B<span style="color:#f92672">=</span>A<span style="color:#f92672">-</span>random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1e3</span>,<span style="color:#ae81ff">1e5</span>)
</span></span><span style="display:flex;"><span>    print(B)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sympy<span style="color:#f92672">.</span>nextPrime((B<span style="color:#960050;background-color:#1e0010">!</span>)<span style="color:#f92672">%</span>A)
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">=</span>myGetPrime()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>q<span style="color:#f92672">=</span>myGetPrime()
</span></span><span style="display:flex;"><span><span style="color:#75715e">#A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>r<span style="color:#f92672">=</span>myGetPrime()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n<span style="color:#f92672">=</span>p<span style="color:#f92672">*</span>q<span style="color:#f92672">*</span>r
</span></span><span style="display:flex;"><span><span style="color:#75715e">#n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733</span>
</span></span><span style="display:flex;"><span>c<span style="color:#f92672">=</span>pow(flag,e,n)
</span></span><span style="display:flex;"><span><span style="color:#75715e">#e=0x1001</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#c=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#so,what is the flag?</span>
</span></span></code></pre></div><p>代码挺长的，考察的内容是阶乘？是不是要考虑一下递归的方式进行求解？那估计慢的不得了，肯定有更好的算法进行求解，垃圾的我去翻翻了王小云院士写的数学书，发现有个叫威尔逊定理的东西可以用于算法的求解，这道题目就是考察威尔逊定理的内容。</p>
<p>威尔逊定理的内容很简单：
$$
(p-1)! \equiv -1 (\text{mod} p)
$$
其中p为素数</p>
<p>根据威尔逊定理就可以对这道题目进行简单的推导求解：</p>
<p>首先，了解一下算法的加密过程：
$$
p \equiv B_1! \text{mod}A_1
$$</p>
<p>$$
q\equiv B_2! \text{mod}A_2
$$</p>
<p>$$
r \equiv B_3! \text{mod}A_3
$$</p>
<p>$$
n = p \cdot q \cdot r
$$</p>
<p>$$
c \equiv m ^e \text{mod} n
$$</p>
<p>加密过程也是非常清晰，问题是如何更快地计算出p和q的数值，这里就需要用到威尔逊定理来进行相应的计算：</p>
<p>根据代码中的算法，可以看出有一句代码表明：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>B<span style="color:#f92672">=</span>A<span style="color:#f92672">-</span>random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">1e3</span>,<span style="color:#ae81ff">1e5</span>)
</span></span></code></pre></div><p>因此，这里可以根据这一信息使用威尔逊定理进行推导：
$$
(A-1)! \equiv -1\text{mod}A
$$</p>
<p>$$
(A-1)\cdot(A-2)\cdot(A-3)\dots(B+1)\cdot(B)\dots2\cdot1\equiv-1\text{mod} A
$$</p>
<p>$$
(A-1)\cdot(A-2)\cdot(A-3)\dots(B+1)\cdot(B!)\equiv-1\text{mod} A
$$</p>
<p>$$
(A-1)\cdot(A-2)\cdot(A-3)\dots(B+1)\cdot(B!)\equiv(A-1)\text{mod} A
$$</p>
<p>$$
(A-2)\cdot(A-3)\dots(B+1)\cdot(B!)\equiv1\text{mod} A
$$</p>
<p>因此要求<code>(B!)%A</code>可以通过求$(A-2)\cdot(A-1)\dots(B+1)$的逆元来进行优化求解，提高运算的效率，这样分析完，这道题目的大致思路也就有了。根据这个思路，写个脚本求解就好：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sympy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">wilson</span>(A,B):
</span></span><span style="display:flex;"><span>    tmp <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(B<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>,A<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        tmp <span style="color:#f92672">*=</span> i
</span></span><span style="display:flex;"><span>        tmp <span style="color:#f92672">%=</span> A
</span></span><span style="display:flex;"><span>    tmp_inv <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(tmp,A)
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(tmp_inv)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>A1<span style="color:#f92672">=</span><span style="color:#ae81ff">21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407</span>
</span></span><span style="display:flex;"><span>B1<span style="color:#f92672">=</span><span style="color:#ae81ff">21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596</span>
</span></span><span style="display:flex;"><span>A2<span style="color:#f92672">=</span><span style="color:#ae81ff">16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927</span>
</span></span><span style="display:flex;"><span>B2<span style="color:#f92672">=</span><span style="color:#ae81ff">16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026</span>
</span></span><span style="display:flex;"><span>n<span style="color:#f92672">=</span><span style="color:#ae81ff">85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733</span>
</span></span><span style="display:flex;"><span>e<span style="color:#f92672">=</span><span style="color:#ae81ff">0x1001</span>
</span></span><span style="display:flex;"><span>c<span style="color:#f92672">=</span><span style="color:#ae81ff">75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428</span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> wilson(A1, B1)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> wilson(A2, B2)
</span></span><span style="display:flex;"><span>r <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span>(p<span style="color:#f92672">*</span>q)
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(r<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，拿到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>RoarCTF{wm-CongrAtu1ation4-1t4-ju4t-A-bAby-R4A}
</span></span></code></pre></div><p>这道题目还是挺有意思的，考的内容比较综合，是一道不错的RSA题目。</p>
<h2 id="0xa-afctf2018可怜的rsa">0xA [AFCTF2018]可怜的RSA</h2>
<p>这次又有什么花样呢？可怜的RSA</p>
<p>瞧瞧题目：</p>
<p>附件里面有两个文件，一个<code>flag.enc</code>的密文文件和一个<code>public.enc</code>的公钥文件</p>
<p>这道题目的思路应该是读取公钥文件，然后对公钥文件中的modulus进行大数分解，最后使用实际应用的会用到的填充方法进行解密。</p>
<p>思路很简单，根据思路写个脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.PublicKey <span style="color:#f92672">import</span> RSA
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Cipher <span style="color:#f92672">import</span> PKCS1_OAEP
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b64decode
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> sympy.ntheory.factor_ <span style="color:#f92672">import</span> smoothness
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sympy
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;public.key&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    rsakey <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>importKey(f<span style="color:#f92672">.</span>read())
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">=</span> rsakey<span style="color:#f92672">.</span>n
</span></span><span style="display:flex;"><span>    e <span style="color:#f92672">=</span> rsakey<span style="color:#f92672">.</span>e
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>factorint(n)
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> long(result<span style="color:#f92672">.</span>keys()[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> long(result<span style="color:#f92672">.</span>keys()[<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>key_info <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>construct((n,e,d,p,q))
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>importKey(key_info<span style="color:#f92672">.</span>exportKey())
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> PKCS1_OAEP<span style="color:#f92672">.</span>new(key)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;flag.enc&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    c <span style="color:#f92672">=</span> b64decode(f<span style="color:#f92672">.</span>read())
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">=</span> key<span style="color:#f92672">.</span>decrypt(c)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>afctf{R54_|5_$0_B0rin9}
</span></span></code></pre></div><p>这道题目比较偏向于应用方面，涉及到了RSA的加密算法填充方法，不再是裸露再外面的RSA算法。可以进一步了解一下。</p>
<h2 id="0xb-救主捷径">0xB 救主捷径</h2>
<p>救主捷径，应该是一个脑洞题目，看看题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>一个名叫CPU的神秘大陆有26个国家，有些国家之间会有一条无向路，每条路径都有不同的长度和一段神秘代码，救世主尼奥要从国家1出发，赶往国家26拯救大陆，请你帮助救世主选择最短路径，而走过的路的神秘代码连接起来便是flag。 以下是数行数据，每行第一个，第二个数字代表这条路的两个端点国家，第三个数字代表路途长度，最后一个字符串便是神秘代码。路在附件中~ 帮助救世主尼奥吧，他快被吓尿了。。。 注意：得到的 flag 请包上 flag{} 提交
</span></span></code></pre></div><p>看样子应该是广度优先算法的应用，题目中只说到了距离，没有涉及权重，应该就是广度优先算法，看看附件是什么吧！</p>
<pre tabindex="0"><code>1 2 100 FLAG{
2 3 87 AFQWE
2 4 57 ETKLS
2 5 50 WEIVK
2 6 51 AWEIW
3 7 94 QIECJF
3 8 78 QSXKE
3 9 85 QWEIH
4 13 54 WQOJF
4 14 47 KDNVE
4 15 98 QISNV
5 10 43 AEWJV
5 11 32 QWKXF
5 12 44 ASJVL
6 16 59 ASJXJ
6 17 92 QJXNV
6 18 39 SCJJF
6 23 99 SJVHF
7 19 99 WJCNF
8 20 96 SKCNG
9 20 86 SJXHF
10 21 60 SJJCH
11 21 57 SJHGG
12 22 47 SJCHF
14 10 55 EJFHG
16 17 59 ASJVH
18 12 53 SJFHG
18 24 93 SHFVG
21 22 33 SJFHB
19 25 88 ASHHF
20 25 96 SJVHG
22 25 23 SJVHJ
25 26 75 SDEV}
</code></pre><p>根据附件文件绘制个图，也方便进行广度优先算法的使用和计算：</p>
<p><img src="/images/BUUCTF-CRYPTO-5_writeup/image-20210630202812243.png" alt="image-20210630202812243"></p>
<p>根据图示来使用广度优先算法的设计，这里可以使用比较经典的Dijkstra算法来求解最优问题，使用python进行算法实现：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> networkx <span style="color:#66d9ef">as</span> nx
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">Dijkstra</span>(G, start, end):
</span></span><span style="display:flex;"><span>    RG <span style="color:#f92672">=</span> G<span style="color:#f92672">.</span>reverse();
</span></span><span style="display:flex;"><span>    dist <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span>    previous <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> v <span style="color:#f92672">in</span> RG<span style="color:#f92672">.</span>nodes():
</span></span><span style="display:flex;"><span>        dist[v] <span style="color:#f92672">=</span> float(<span style="color:#e6db74">&#39;inf&#39;</span>)
</span></span><span style="display:flex;"><span>        previous[v] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;none&#39;</span>
</span></span><span style="display:flex;"><span>    dist[end] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    u <span style="color:#f92672">=</span> end
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> u <span style="color:#f92672">!=</span> start:
</span></span><span style="display:flex;"><span>        u <span style="color:#f92672">=</span> min(dist, key<span style="color:#f92672">=</span>dist<span style="color:#f92672">.</span>get)
</span></span><span style="display:flex;"><span>        distu <span style="color:#f92672">=</span> dist[u]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">del</span> dist[u]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> u, v <span style="color:#f92672">in</span> RG<span style="color:#f92672">.</span>edges(u):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> v <span style="color:#f92672">in</span> dist:
</span></span><span style="display:flex;"><span>                alt <span style="color:#f92672">=</span> distu <span style="color:#f92672">+</span> RG[u][v][<span style="color:#e6db74">&#39;weight&#39;</span>]
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> alt <span style="color:#f92672">&lt;</span> dist[v]:
</span></span><span style="display:flex;"><span>                    dist[v] <span style="color:#f92672">=</span> alt
</span></span><span style="display:flex;"><span>                    previous[v] <span style="color:#f92672">=</span> u
</span></span><span style="display:flex;"><span>    path <span style="color:#f92672">=</span> (start,)
</span></span><span style="display:flex;"><span>    last <span style="color:#f92672">=</span> start
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> last <span style="color:#f92672">!=</span> end:
</span></span><span style="display:flex;"><span>        nxt <span style="color:#f92672">=</span> previous[last]
</span></span><span style="display:flex;"><span>        path <span style="color:#f92672">+=</span> (nxt,)
</span></span><span style="display:flex;"><span>        last <span style="color:#f92672">=</span> nxt
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> path
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>G <span style="color:#f92672">=</span> nx<span style="color:#f92672">.</span>DiGraph()
</span></span><span style="display:flex;"><span>datalist <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>datadict <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;data.txt&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        datalist<span style="color:#f92672">.</span>append(line)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> datalist:
</span></span><span style="display:flex;"><span>    data <span style="color:#f92672">=</span> i<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>    datadict[data[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;-&#34;</span><span style="color:#f92672">+</span>data[<span style="color:#ae81ff">1</span>]] <span style="color:#f92672">=</span> data[<span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span>    G<span style="color:#f92672">.</span>add_edge(int(data[<span style="color:#ae81ff">0</span>]),int(data[<span style="color:#ae81ff">1</span>]),weight<span style="color:#f92672">=</span>int(data[<span style="color:#ae81ff">2</span>]))
</span></span><span style="display:flex;"><span>rs <span style="color:#f92672">=</span> Dijkstra(G, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">26</span>)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(rs)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">+=</span> datadict[str(rs[i])<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;-&#34;</span><span style="color:#f92672">+</span>str(rs[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>])]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print flag
</span></span><span style="display:flex;"><span>print flag<span style="color:#f92672">.</span>lower()
</span></span></code></pre></div><p>运行脚本，即可获得flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>FLAG{WEIVKASJVLSJCHFSJVHJSDEV}
</span></span><span style="display:flex;"><span>flag{weivkasjvlsjchfsjvhjsdev}
</span></span></code></pre></div><h2 id="0xc-网鼎杯-2020-青龙组boom">0xC [网鼎杯 2020 青龙组]boom</h2>
<p>这道题目，boom的意思爆炸，这道题目应该会有点意思。</p>
<p>来看看题目呀：</p>
<p>看到附件内容是一个exe文件，可执行文件，有点像是逆向题目。首先执行一下exe程序，看看程序会给我们展示什么样的效果？</p>
<p><img src="/images/BUUCTF-CRYPTO-5_writeup/image-20210630213025137.png" alt="image-20210630213025137"></p>
<p>按一下任意键：</p>
<p><img src="/images/BUUCTF-CRYPTO-5_writeup/image-20210630213049828.png" alt="image-20210630213049828"></p>
<p>应该是一个进行答题的exe程序，这里有两条路可以走，第一条路就是通过答题来拿到flag，而第二条路就是通过逆向工具进行逆向。下面绘制一个拓扑图来看看这道题目的思路：</p>
<p><img src="/images/BUUCTF-CRYPTO-5_writeup/image-20210630214244533.png" alt="image-20210630214244533"></p>
<p>无论怎么走，都需要解决题目的问题，这道题目的本意应该是考察数学技能，这道题目就使用IDA逆向工具进行分析，打开IDA看到伪代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#66d9ef">__cdecl</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>argv, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>envp)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> v3; <span style="color:#75715e">// eax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span> Str[<span style="color:#ae81ff">50</span>]; <span style="color:#75715e">// [esp+24h] [ebp-128h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">__int8</span> v6[<span style="color:#ae81ff">50</span>]; <span style="color:#75715e">// [esp+56h] [ebp-F6h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  _DWORD v7[<span style="color:#ae81ff">16</span>]; <span style="color:#75715e">// [esp+88h] [ebp-C4h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> v8[<span style="color:#ae81ff">22</span>]; <span style="color:#75715e">// [esp+C8h] [ebp-84h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">__int64</span> v9; <span style="color:#75715e">// [esp+120h] [ebp-2Ch] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v10; <span style="color:#75715e">// [esp+12Ch] [ebp-20h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v11; <span style="color:#75715e">// [esp+130h] [ebp-1Ch] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v12; <span style="color:#75715e">// [esp+134h] [ebp-18h] BYREF
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> v13; <span style="color:#75715e">// [esp+138h] [ebp-14h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> i; <span style="color:#75715e">// [esp+13Ch] [ebp-10h]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">__main</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">menu</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;pause&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;cls&#34;</span>);
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">70</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">229</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">239</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">230</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">22</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">251</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">54</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">23</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">68</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">106</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">45</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">189</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;first:this string md5:46e5efe6165a5afb361217446a2dbd01&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, Str);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">MD5Init</span>(v8);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(Str);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">MD5Update</span>((<span style="color:#66d9ef">int</span>)v8, Str, v3);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">MD5Final</span>(v8, v6);
</span></span><span style="display:flex;"><span>  v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">15</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v6[i] <span style="color:#f92672">!=</span> v7[i] )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v13 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Game over&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;pause&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Great next level&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;pause&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;cls&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;This time:Here are have some formulas&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;3x-y+z=185&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;2x+3y-z=321&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;x+y+z=173&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;input: x = &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v12);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;input: y = &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v11);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;input : z = &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v10);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> v12 <span style="color:#f92672">-</span> v11 <span style="color:#f92672">+</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">185</span> <span style="color:#f92672">||</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> v12 <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> v11 <span style="color:#f92672">-</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">321</span> <span style="color:#f92672">||</span> v11 <span style="color:#f92672">+</span> v12 <span style="color:#f92672">+</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">173</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Game over&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Great last level coming...&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;pause&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;cls&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Last time: Kill it&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;x*x+x-7943722218936282=0&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;input x: &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%lld&#34;</span>, <span style="color:#f92672">&amp;</span>v9);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v9 <span style="color:#f92672">*</span> (v9 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x1C38C5F50DD7DALL</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Game over&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Great This is your FLAG&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>可以从逆向的伪代码中找到一些比较关键的代码：</p>
<p>原始内存数据</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>  <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;pause&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;cls&#34;</span>);
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">70</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">229</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">239</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">230</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">22</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">5</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">6</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">90</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">7</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">251</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">8</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">54</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">9</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">18</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">10</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">23</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">11</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">68</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">12</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">106</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">13</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">45</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">14</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">189</span>;
</span></span><span style="display:flex;"><span>  v7[<span style="color:#ae81ff">15</span>] <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span></code></pre></div><p>level 1关键代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;first:this string md5:46e5efe6165a5afb361217446a2dbd01&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%s&#34;</span>, Str);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">MD5Init</span>(v8);
</span></span><span style="display:flex;"><span>  v3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(Str);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">MD5Update</span>((<span style="color:#66d9ef">int</span>)v8, Str, v3);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">MD5Final</span>(v8, v6);
</span></span><span style="display:flex;"><span>  v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> ( i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">15</span>; <span style="color:#f92672">++</span>i )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ( v6[i] <span style="color:#f92672">!=</span> v7[i] )
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>      v13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v13 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Game over&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;pause&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Great next level&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;pause&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;cls&#34;</span>);
</span></span></code></pre></div><p>level 2关键代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;This time:Here are have some formulas&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;3x-y+z=185&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;2x+3y-z=321&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;x+y+z=173&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;input: x = &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v12);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;input: y = &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v11);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;input : z = &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%d&#34;</span>, <span style="color:#f92672">&amp;</span>v10);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> v12 <span style="color:#f92672">-</span> v11 <span style="color:#f92672">+</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">185</span> <span style="color:#f92672">||</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> v12 <span style="color:#f92672">+</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">*</span> v11 <span style="color:#f92672">-</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">321</span> <span style="color:#f92672">||</span> v11 <span style="color:#f92672">+</span> v12 <span style="color:#f92672">+</span> v10 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">173</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Game over&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Great last level coming...&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;pause&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">system</span>(<span style="color:#e6db74">&#34;cls&#34;</span>);
</span></span></code></pre></div><p>level 3关键代码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Last time: Kill it&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;x*x+x-7943722218936282=0&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;input x: &#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">scanf</span>(<span style="color:#e6db74">&#34;%lld&#34;</span>, <span style="color:#f92672">&amp;</span>v9);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ( v9 <span style="color:#f92672">*</span> (v9 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x1C38C5F50DD7DALL</span> )
</span></span><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Game over&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">exit</span>(<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">puts</span>(<span style="color:#e6db74">&#34;Great This is your FLAG&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>根据三个关键代码进行代码审计，代码审计还是老基本功了</p>
<p>level 1的关键代码是判断md5值的，使用[cmd5](<a href="https://cmd5.com/">md5在线解密破解,md5解密加密 (cmd5.com)</a>)就可以解出，即：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>Str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;en5oy&#34;</span>;
</span></span></code></pre></div><p>level 2的关键代码是解方程组，使用sage求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>var(<span style="color:#e6db74">&#34;x y z&#34;</span>) 
</span></span><span style="display:flex;"><span>solve([<span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>x<span style="color:#f92672">-</span>y<span style="color:#f92672">+</span>z<span style="color:#f92672">==</span><span style="color:#ae81ff">185</span>,<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>x<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>y<span style="color:#f92672">-</span>z<span style="color:#f92672">==</span><span style="color:#ae81ff">321</span>,x<span style="color:#f92672">+</span>y<span style="color:#f92672">+</span>z<span style="color:#f92672">==</span><span style="color:#ae81ff">173</span>],x,y,z)
</span></span></code></pre></div><p>运行就可以求解得出x，y和z的值：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>[[x <span style="color:#f92672">==</span> <span style="color:#ae81ff">74</span>, y <span style="color:#f92672">==</span> <span style="color:#ae81ff">68</span>, z <span style="color:#f92672">==</span> <span style="color:#ae81ff">31</span>]]
</span></span></code></pre></div><p>因此，可以得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>v12 <span style="color:#f92672">==</span> <span style="color:#ae81ff">74</span>;
</span></span><span style="display:flex;"><span>v11 <span style="color:#f92672">==</span> <span style="color:#ae81ff">68</span>;
</span></span><span style="display:flex;"><span>v10 <span style="color:#f92672">==</span> <span style="color:#ae81ff">31</span>;
</span></span></code></pre></div><p>leve 3的关键代码就是解一元二次方程或者可以简化，就是解<code>v9 * (v9 + 1) == 7943722218936282</code>，可以使用sage直接进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span> solve(x <span style="color:#f92672">*</span> (x <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">==</span> <span style="color:#ae81ff">7943722218936282</span>,x)
</span></span></code></pre></div><p>运行可得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span> [x <span style="color:#f92672">==</span> <span style="color:#ae81ff">89127561</span>, x <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">89127562</span>]
</span></span></code></pre></div><p>由此，可以得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>v9 <span style="color:#f92672">==</span> <span style="color:#ae81ff">89127561</span>;
</span></span></code></pre></div><p>然后进行组合就可以得到flag：</p>
<pre tabindex="0"><code>flag{en5oy_746831_89127561}
</code></pre><h2 id="0xd-roarctf2019rsa">0xD [RoarCTF2019]RSA</h2>
<p>又来了一道RSA题目，看看有些什么东西吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>A=(((y%x)**5)%(x%y))**2019+y**316+(y+1)/x
</span></span><span style="display:flex;"><span>p=next_prime(z*x*y)
</span></span><span style="display:flex;"><span>q=next_prime(z)
</span></span><span style="display:flex;"><span>A =  2683349182678714524247469512793476009861014781004924905484127480308161377768192868061561886577048646432382128960881487463427414176114486885830693959404989743229103516924432512724195654425703453612710310587164417035878308390676612592848750287387318129424195208623440294647817367740878211949147526287091298307480502897462279102572556822231669438279317474828479089719046386411971105448723910594710418093977044179949800373224354729179833393219827789389078869290217569511230868967647963089430594258815146362187250855166897553056073744582946148472068334167445499314471518357535261186318756327890016183228412253724
</span></span><span style="display:flex;"><span>n =  117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127
</span></span><span style="display:flex;"><span>c =  41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128
</span></span></code></pre></div><p>这道题目涉及到了模线性方程，需要考虑模线性方程该如何进行求解。目前，我尚未找到除了爆破外的解法，因此，这次就用爆破来求解，但是要用爆破求解就必然需要考虑爆破时间，如何来缩短爆破时间。</p>
<p>再来看看题目：</p>
<p>题目给定了$A$ 、$n$ 、$c$ ，且满足</p>
<p>$$
A = [ (y \text{ % } x ) ^ 5 \text{ % } ( x \text{ % } y ) ] ^ {2019} + y ^ {316} + \frac{y+1}{x}
$$</p>
<p>根据方程可以得知 $x | y+1$ 因此，可以推断出来 $ y \equiv -1 \text{mod}x$ 。而且由于 $ y+1$ 比 $x$ 大，因此，应该有$x%y=x$ 。于是：</p>
<p>$$
[(y\text{ % }x)^5\text{ % }(x\text{ % }y)]^{2019} = (x-1)^{2019}
$$</p>
<p>因此，可以得到：</p>
<p>$$
A = (x-1)^{2019} + y^{316} + \frac{y+1}{x}
$$</p>
<p>通过观察发现$A$的值是一个2015个bit的数。而且：</p>
<p>$$
A \geq (x-1)^{2019}
$$</p>
<p>显然只有：</p>
<p>$$
x \leq 2
$$</p>
<p>因此进行讨论$x=1 $和$x =2$这两种情况时，发现存在有唯一解，即：</p>
<p>$$
(x,y) = (2,83)
$$</p>
<p>现在$ x $和$ y $知道了，看一下算法的其他细节吧</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>p<span style="color:#f92672">=</span>next_prime(z<span style="color:#f92672">*</span>x<span style="color:#f92672">*</span>y)
</span></span><span style="display:flex;"><span>q<span style="color:#f92672">=</span>next_prime(z)
</span></span></code></pre></div><p>由于已经知道了$x$和$y$ ，因此，可以知道：
$$
n = p \cdot q
$$</p>
<p>$$
n = z\cdot x \cdot y \cdot z
$$</p>
<p>因此可以推出：
$$
q \approx \sqrt{\frac{n}{x\cdot y}}
$$</p>
<p>$$
p \approx x\cdot y \cdot q
$$</p>
<p>于是可以通过爆破求出 $p$ 和 $q$  来进行求解，但是题目没有告知 $e$ ，可以先猜测 $e = 65537$ 。根据这个思路写个完整脚本：^1^</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum<span style="color:#f92672">,</span> gmpy2<span style="color:#f92672">,</span> itertools
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>A <span style="color:#f92672">=</span>  <span style="color:#ae81ff">2683349182678714524247469512793476009861014781004924905484127480308161377768192868061561886577048646432382128960881487463427414176114486885830693959404989743229103516924432512724195654425703453612710310587164417035878308390676612592848750287387318129424195208623440294647817367740878211949147526287091298307480502897462279102572556822231669438279317474828479089719046386411971105448723910594710418093977044179949800373224354729179833393219827789389078869290217569511230868967647963089430594258815146362187250855166897553056073744582946148472068334167445499314471518357535261186318756327890016183228412253724</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span>  <span style="color:#ae81ff">117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span>  <span style="color:#ae81ff">41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>x , y <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">83</span>
</span></span><span style="display:flex;"><span>A_t <span style="color:#f92672">=</span> (((y<span style="color:#f92672">%</span>x)<span style="color:#f92672">**</span><span style="color:#ae81ff">5</span>)<span style="color:#f92672">%</span>(x<span style="color:#f92672">%</span>y))<span style="color:#f92672">**</span><span style="color:#ae81ff">2019</span><span style="color:#f92672">+</span>y<span style="color:#f92672">**</span><span style="color:#ae81ff">316</span><span style="color:#f92672">+</span>(y<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">/</span>x
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span> A_t <span style="color:#f92672">==</span> A
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> q <span style="color:#f92672">in</span> itertools<span style="color:#f92672">.</span>count(gmpy2<span style="color:#f92672">.</span>iroot(n<span style="color:#f92672">//</span><span style="color:#ae81ff">166</span>,<span style="color:#ae81ff">2</span>)[<span style="color:#ae81ff">0</span>]):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> n<span style="color:#f92672">%</span>q <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> n<span style="color:#f92672">//</span>q
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span> n <span style="color:#f92672">==</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e, phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>powmod(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，即可得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>RoarCTF{wm-l1l1ll1l1l1l111ll}
</span></span></code></pre></div><p>这道题目的求解方法是优雅与暴力相结合的，能展现出一种特别的美感，数学推导的优雅和蛮力攻击的暴力。野蛮与优雅，展现出密码学独有美，题目还是挺不错的。</p>
<h2 id="0xe-afctf2018single">0xE [AFCTF2018]Single</h2>
<p>单一的，看看题目给了我们什么包裹吧！</p>
<p>一个<code>Cipher.txt</code>密文文件和一个<code>Encode.cpp</code>加密文件。</p>
<p>Encode.cpp</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c++" data-lang="c++"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bits/stdc++.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">using</span> <span style="color:#66d9ef">namespace</span> std;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	freopen(<span style="color:#e6db74">&#34;Plain.txt&#34;</span>,<span style="color:#e6db74">&#34;r&#34;</span>,stdin);
</span></span><span style="display:flex;"><span>	freopen(<span style="color:#e6db74">&#34;Cipher.txt&#34;</span>,<span style="color:#e6db74">&#34;w&#34;</span>,stdout);
</span></span><span style="display:flex;"><span>	map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>, <span style="color:#66d9ef">char</span><span style="color:#f92672">&gt;</span> f;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> arr[<span style="color:#ae81ff">26</span>];
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">26</span>;<span style="color:#f92672">++</span>i){
</span></span><span style="display:flex;"><span>		arr[i]<span style="color:#f92672">=</span>i;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	random_shuffle(arr,arr<span style="color:#f92672">+</span><span style="color:#ae81ff">26</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">int</span> i<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;i<span style="color:#f92672">&lt;</span><span style="color:#ae81ff">26</span>;<span style="color:#f92672">++</span>i){
</span></span><span style="display:flex;"><span>		f[<span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">+</span>i]<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;a&#39;</span><span style="color:#f92672">+</span>arr[i];
</span></span><span style="display:flex;"><span>		f[<span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">+</span>i]<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;A&#39;</span><span style="color:#f92672">+</span>arr[i];
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">char</span> ch;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span>((ch<span style="color:#f92672">=</span>getchar())<span style="color:#f92672">!=</span>EOF){
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(f.count(ch)){
</span></span><span style="display:flex;"><span>			putchar(f[ch]);
</span></span><span style="display:flex;"><span>		}<span style="color:#66d9ef">else</span>{
</span></span><span style="display:flex;"><span>			putchar(ch);
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Cipher.txt</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Jmqrida rva Lfmz (JRL) eu m uqajemf seny xl enlxdomrexn uajiderc jxoqarerexnu. Rvada mda rvdaa jxooxn rcqau xl JRLu: Paxqmdyc, Mrrmjs-Yalanja mny oekay.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Paxqmdyc-urcfa JRLu vmu m jxiqfa xl giaurexnu (rmusu) en dmnza xl jmrazxdeau. Lxd akmoqfa, Wab, Lxdanuej, Jdcqrx, Benmdc xd uxoarvenz afua. Ramo jmn zmen uxoa qxenru lxd atadc uxftay rmus. Oxda qxenru lxd oxda jxoqfejmray rmusu iuimffc. Rva nakr rmus en jvmen jmn ba xqanay xnfc mlrad uxoa ramo uxfta qdatexiu rmus. Rvan rva zmoa reoa eu xtad uio xl qxenru uvxwu cxi m JRL wenad. Lmoxiu akmoqfa xl uijv JRL eu Yaljxn JRL gimfu.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Waff, mrrmjs-yalanja eu mnxrvad enradaurenz seny xl jxoqarerexnu. Vada atadc ramo vmu xwn narwxds(xd xnfc xna vxur) werv tifnmdmbfa uadtejau. Cxid ramo vmu reoa lxd qmrjvenz cxid uadtejau mny yatafxqenz akqfxeru iuimffc. Ux, rvan xdzmnehadu jxnnajru qmdrejeqmnru xl jxoqarerexn mny rva wmdzmoa urmdru! Cxi uvxify qdxrajr xwn uadtejau lxd yalanja qxenru mny vmjs xqqxnanru lxd mrrmjs qxenru. Veurxdejmffc rveu eu m ledur rcqa xl JRLu, atadcbxyc snxwu mbxir YAL JXN JRL - uxoarvenz fesa m Wxdfy Jiq xl mff xrvad jxoqarerexnu.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Oekay jxoqarerexnu omc tmdc qxuuebfa lxdomru. Er omc ba uxoarvenz fesa wmdzmoa werv uqajemf reoa lxd rmus-bmuay afaoanru (a.z. IJUB eJRL).
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>JRL zmoau xlran rxijv xn omnc xrvad muqajru xl enlxdomrexn uajiderc: jdcqrxzdmqvc, urazx, benmdc mnmfcueu, datadua anzanaadenz, oxbefa uajiderc mny xrvadu. Zxxy ramou zanadmffc vmta urdxnz useffu mny akqadeanja en mff rvaua euuiau.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Iuimffc, lfmz eu uxoa urdenz xl dmnyxo ymrm xd rakr en uxoa lxdomr. Akmoqfa mljrl{Xv_I_lxiny_er_neja_rDc}
</span></span></code></pre></div><p>看样子，应该是一个替换加密的题目。可以直接扔进<a href="https://quipqiup.com/">词频分析网站</a>进行词频分析来求解，得到求解结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>	Capture the Flag (CTF) is a special kind of information security competitions. There are three common types of CTFs: Jeopardy, Attack-Defence and mixed. Jeopardy-style CTFs has a couple of questions (tasks) in range of categories. For example, Web, Forensic, Crypto, Binary or something else. Team can gain some points for every solved task. More points for more complicated tasks usually. The next task in chain can be opened only after some team solve previous task. Then the game time is over sum of points shows you a CTF winer. Famous example of such CTF is Defcon CTF quals. Well, attack-defence is another interesting kind of competitions. Here every team has own network(or only one host) with vulnarable services. Your team has time for patching your services and developing exploits usually. So, then organizers connects participants of competition and the wargame starts! You should protect own services for defence points and hack opponents for attack points. Historically this is a first type of CTFs, everybody knows about DEF CON CTF - something like a World Cup of all other competitions. Mixed competitions may vary possible formats. It may be something like wargame with special time for task-based elements (e.g. UCSB iCTF). CTF games often touch on many other aspects of information security: cryptography, stego, binary analysis, reverse engeneering, mobile security and others. Good teams generally have strong skills and experience in all these issues. Usually, flag is some string of random data or text in some format. Example afctf{Oh_U_found_it_nice_tRy}
</span></span></code></pre></div><p>快瞧，flag就在最后一行！这题就这么完了，有工具真是好(*^_^*)</p>
<h2 id="0xf-wustctf2020bse">0xF [WUSTCTF2020]B@se</h2>
<p>看题目，应该是一道BASE的题目。看看附件会给些什么吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>密文：MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD==
</span></span><span style="display:flex;"><span>JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>oh holy shit, something is missing...
</span></span></code></pre></div><p>这道题目的应该是变换了编码表的base64，修改并替换一下使用base64进行解密，但是变换后的编码表中有四个字母是顺序位置，因此可能会有24种可能的情况。需要进行爆破，首先要知道是那些字符缺失了，然后对缺失字符的数组进行爆破，然后在使用base64替换来进行base64的求解。根据这个思路来写个脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> itertools
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>base64_stand <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>uppercase<span style="color:#f92672">+</span>string<span style="color:#f92672">.</span>lowercase<span style="color:#f92672">+</span>string<span style="color:#f92672">.</span>digits<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;+/&#34;</span>
</span></span><span style="display:flex;"><span>new_base64 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/&#34;</span>
</span></span><span style="display:flex;"><span>lose_letters <span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD==&#34;</span>
</span></span><span style="display:flex;"><span>flags <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">base64_change</span>(c,s,n):
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> n<span style="color:#f92672">.</span>find(i) <span style="color:#f92672">!=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>            result <span style="color:#f92672">+=</span> s[n<span style="color:#f92672">.</span>find(i)]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            result <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(result)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> len(result)<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> len(repr(result)):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> result
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> base64_stand:
</span></span><span style="display:flex;"><span>    test <span style="color:#f92672">=</span> new_base64<span style="color:#f92672">.</span>find(i)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> test <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>        lose_letters <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> list(itertools<span style="color:#f92672">.</span>permutations(lose_letters,<span style="color:#ae81ff">4</span>)):
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(i)
</span></span><span style="display:flex;"><span>    base64_new <span style="color:#f92672">=</span> new_base64<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;****&#34;</span>, m)
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">=</span> base64_change(c, base64_stand, base64_new)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> flag <span style="color:#f92672">and</span> <span style="color:#e6db74">&#34;2020&#34;</span> <span style="color:#f92672">in</span> flag:
</span></span><span style="display:flex;"><span>        flags<span style="color:#f92672">.</span>append(flag)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> flag <span style="color:#f92672">in</span> set(flags):
</span></span><span style="display:flex;"><span>    print flag
</span></span></code></pre></div><p>运行脚本，得到可能的flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>wctf2020{base64_1s_v3ry_e@sy_and_fuN}
</span></span><span style="display:flex;"><span>wctf2020{bare64_!r_v2ry_e@ry_and_fuN}
</span></span></code></pre></div><p>经过测试，flag应该是：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>wctf2220{base64_1s_v3ry_e@sy_and_fuN}
</span></span></code></pre></div><p>本题到此结束！</p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://www.ruanx.net/rsa-solutions/">CTF RSA题解集 (ruanx.net)</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>BUUCTF CRYPTO (4) writeup</title>
            <link>/posts/buuctf-crypto-4_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 17:20:25 +0800</pubDate>
            
            <guid>/posts/buuctf-crypto-4_writeup/</guid>
            <description>沉浸在密码学的世界里面，缓缓浸入题目的海洋，16道crypto题目！
这次的题目，难度也开始逐渐上来咯！当然不仅仅只有难度，还有脑洞！
0x0 古典密码知多少 应该是考察古典密码的题目，点开题目下载附件，瞧一瞧
打开图片就察觉到这题可能会非常草……，果然古典的恶心，应该是三种古典密码的组合，可以清晰地看出有猪圈密码和变种圣堂武士密码，至于剩下那一种密码实在是找不到……，只能无奈地去瞧一瞧大佬的wp，发现是标准银河字母。根据得到的信息进行比对，蓝色的是猪圈密码，橙色的是圣堂武士密码，黑色的是标准银河字母。根据信息，进行解密得：
FGCPFLIRTUASYON 看样子应该还有一层加密，最常见的古典加密方法就是凯撒加密和栅栏密码，经过尝试发现是栅栏密码，使用栅栏密码进行解密得到flag：
FLAGISCRYPTOFUN 猪圈密码对照表：
圣堂武士密码对照表：
标准银河字母对照表：
0x1 [HDCTF2019]bbbbbbrsa 看来又是熟悉的RSA题目，嘤嘤嘤~
下载附件，打开发现有两个文件，一个enc文件，一个encode.py文件
enc文件：
p = 177077389675257695042507998165006460849 n = 37421829509887796274897162249367329400988647145613325367337968063341372726061 c = ==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM encode.py文件：
from base64 import b64encode as b32encode from gmpy2 import invert,gcd,iroot from Crypto.Util.number import * from binascii import a2b_hex,b2a_hex import random flag = &amp;#34;******************************&amp;#34; nbit = 128 p = getPrime(nbit) q = getPrime(nbit) n = p*q print p print n phi = (p-1)*(q-1) e = random.</description>
            <content type="html"><![CDATA[<p>沉浸在密码学的世界里面，缓缓浸入题目的海洋，16道crypto题目！</p>
<p><img src="/images/BUUCTF-CRYPTO-4_writeup/image-17-1024x673.png" alt="img"></p>
<p>这次的题目，难度也开始逐渐上来咯！当然不仅仅只有难度，还有脑洞！</p>
<p><img src="/images/BUUCTF-CRYPTO-4_writeup/image-18.png" alt="img"></p>
<h2 id="0x0-古典密码知多少">0x0 古典密码知多少</h2>
<p>应该是考察古典密码的题目，点开题目下载附件，瞧一瞧</p>
<p><img src="/images/BUUCTF-CRYPTO-4_writeup/image-19.png" alt="img"></p>
<p>打开图片就察觉到这题可能会非常草……，果然古典的恶心，应该是三种古典密码的组合，可以清晰地看出有猪圈密码和变种圣堂武士密码，至于剩下那一种密码实在是找不到……，只能无奈地去瞧一瞧<a href="https://blog.ysneko.com/archives/115/">大佬的wp</a>，发现是标准银河字母。根据得到的信息进行比对，蓝色的是猪圈密码，橙色的是圣堂武士密码，黑色的是标准银河字母。根据信息，进行解密得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>FGCPFLIRTUASYON
</span></span></code></pre></div><p>看样子应该还有一层加密，最常见的古典加密方法就是凯撒加密和栅栏密码，经过尝试发现是栅栏密码，使用栅栏密码进行解密得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>FLAGISCRYPTOFUN
</span></span></code></pre></div><hr>
<p>猪圈密码对照表：</p>
<p><img src="/images/BUUCTF-CRYPTO-4_writeup/20201019010012173.png" alt="img"></p>
<p>圣堂武士密码对照表：</p>
<p><img src="/images/BUUCTF-CRYPTO-4_writeup/20200325180259577.jpg" alt="此图像的alt属性为空；文件名为20200325180259577.jpg"></p>
<p>标准银河字母对照表：</p>
<p><img src="/images/BUUCTF-CRYPTO-4_writeup/t01cf49fe8b6c515f04.png" alt="查看源图像"></p>
<h2 id="0x1-hdctf2019bbbbbbrsa">0x1 [HDCTF2019]bbbbbbrsa</h2>
<p>看来又是熟悉的RSA题目，嘤嘤嘤~</p>
<p>下载附件，打开发现有两个文件，一个enc文件，一个encode.py文件</p>
<p>enc文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>p = 177077389675257695042507998165006460849
</span></span><span style="display:flex;"><span>n = 37421829509887796274897162249367329400988647145613325367337968063341372726061
</span></span><span style="display:flex;"><span>c = ==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM
</span></span></code></pre></div><p>encode.py文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b64encode <span style="color:#66d9ef">as</span> b32encode
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> gmpy2 <span style="color:#f92672">import</span> invert,gcd,iroot
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> binascii <span style="color:#f92672">import</span> a2b_hex,b2a_hex
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;******************************&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nbit <span style="color:#f92672">=</span> <span style="color:#ae81ff">128</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> getPrime(nbit)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> getPrime(nbit)
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print p
</span></span><span style="display:flex;"><span>print n
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">50000</span>,<span style="color:#ae81ff">70000</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> gcd(e,phi) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>		e <span style="color:#f92672">-=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> pow(int(b2a_hex(flag),<span style="color:#ae81ff">16</span>),e,n)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print b32encode(str(c))[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2373740699529364991763589324200093466206785561836101840381622237225512234632</span>
</span></span></code></pre></div><p>题目给了n、p、c而没有给e，根据python源码 e需要爆破一下，写个小脚本解决这道题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> base64 <span style="color:#f92672">import</span> b64decode <span style="color:#66d9ef">as</span> b32decode
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">177077389675257695042507998165006460849</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">37421829509887796274897162249367329400988647145613325367337968063341372726061</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span> p
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> int(b32decode(str(c)[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]))
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> e <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">50000</span>,<span style="color:#ae81ff">70000</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> gmpy2<span style="color:#f92672">.</span>gcd(e,phi) <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>        d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)
</span></span><span style="display:flex;"><span>        m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>        flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;flag&#39;</span> <span style="color:#f92672">in</span> str(flag):
</span></span><span style="display:flex;"><span>            print <span style="color:#e6db74">&#39;e=</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#39;</span><span style="color:#f92672">%</span>e
</span></span><span style="display:flex;"><span>            print flag
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{rs4_1s_s1mpl3!#}
</span></span></code></pre></div><h2 id="0x2-bjdctf2020rsa">0x2 [BJDCTF2020]RSA</h2>
<p>RSA题目，妙呀！下载附件看看：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> getPrime,bytes_to_long
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">=</span>open(<span style="color:#e6db74">&#34;flag&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>)<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>q<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span>(e<span style="color:#f92672">&amp;</span>lt;<span style="color:#ae81ff">100000</span>)
</span></span><span style="display:flex;"><span>n<span style="color:#f92672">=</span>p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>m<span style="color:#f92672">=</span>bytes_to_long(flag)
</span></span><span style="display:flex;"><span>c<span style="color:#f92672">=</span>pow(m,e,n)
</span></span><span style="display:flex;"><span>print c,n
</span></span><span style="display:flex;"><span>print pow(<span style="color:#ae81ff">294</span>,e,n)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">1024</span>)
</span></span><span style="display:flex;"><span>n<span style="color:#f92672">=</span>p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>m<span style="color:#f92672">=</span>bytes_to_long(<span style="color:#e6db74">&#34;BJD&#34;</span><span style="color:#f92672">*</span><span style="color:#ae81ff">32</span>)
</span></span><span style="display:flex;"><span>c<span style="color:#f92672">=</span>pow(m,e,n)
</span></span><span style="display:flex;"><span>print c,n
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">output:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120  13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721  12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;&#39;&#39;</span>
</span></span></code></pre></div><p>一个python源程序，看样子还是有点意思的，发现这里有三个密文，两个n数值，两个n的数值是共用同一个q值，可以使用欧几里得算法求出q，e给出了范围，应该是使用爆破的方法求出e的数值，这里写个小脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span>
</span></span><span style="display:flex;"><span>_294_c <span style="color:#f92672">=</span><span style="color:#ae81ff">381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018</span>
</span></span><span style="display:flex;"><span>BJD_c <span style="color:#f92672">=</span> <span style="color:#ae81ff">979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721</span>
</span></span><span style="display:flex;"><span>BJD_n <span style="color:#f92672">=</span> <span style="color:#ae81ff">12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>gcd(n,BJD_n)
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span> q
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">100000</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> _294_c <span style="color:#f92672">==</span> pow(<span style="color:#ae81ff">294</span>,i,n):
</span></span><span style="display:flex;"><span>        e <span style="color:#f92672">=</span> i
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BJD{p_is_common_divisor}
</span></span></code></pre></div><h2 id="0x3-wustctf2020佛说只能四天">0x3 [WUSTCTF2020]佛说：只能四天</h2>
<p>看题目还挺有意思的，应该是一道古典密码学题目，看下题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>圣经分为《旧约全书》和《新约全书》
</span></span></code></pre></div><p>再看下题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>尊即寂修我劫修如婆愍闍嚤婆莊愍耨羅嚴是喼婆斯吶眾喼修迦慧迦嚩喼斯願嚤摩隸所迦摩吽即塞願修咒莊波斯訶喃壽祗僧若即亦嘇蜜迦須色喼羅囉咒諦若陀喃慧愍夷羅波若劫蜜斯哆咒塞隸蜜波哆咤慧聞亦吽念彌諸嘚嚴諦咒陀叻咤叻諦缽隸祗婆諦嚩阿兜宣囉吽色缽吶諸劫婆咤咤喼愍尊寂色缽嘚闍兜阿婆若叻般壽聞彌即念若降宣空陀壽愍嚤亦喼寂僧迦色莊壽吽哆尊僧喼喃壽嘚兜我空所吶般所即諸吽薩咤諸莊囉隸般咤色空咤亦喃亦色兜哆嘇亦隸空闍修眾哆咒婆菩迦壽薩塞宣嚩缽寂夷摩所修囉菩阿伏嘚宣嚩薩塞菩波吶波菩哆若慧愍蜜訶壽色咒兜摩缽摩諦劫諸陀即壽所波咤聞如訶摩壽宣咤彌即嚩蜜叻劫嘇缽所摩闍壽波壽劫修訶如嚩嘇囉薩色嚤薩壽修闍夷闍是壽僧劫祗蜜嚴嚩我若空伏諦念降若心吽咤隸嘚耨缽伏吽色寂喃喼吽壽夷若心眾祗喃慧嚴即聞空僧須夷嚴叻心願哆波隸塞吶心須嘇摩咤壽嘚吶夷亦心亦喃若咒壽亦壽囑囑
</span></span></code></pre></div><p>唔，好像还有hint，去瞧一瞧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>1. 虽然有点不环保，但hint好像是一次性的，得到后就没有利用价值了。
</span></span><span style="display:flex;"><span>2. 凯撒不是最后一步，by the way，凯撒为什么叫做凯撒？
</span></span></code></pre></div><p>新约全书和旧约全书，用<a href="https://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a>解不出来，“新约全书”可能是提示吧，最后用<a href="http://hi.pcmoe.net/Buddha.html">新约佛论禅</a>解得(注意前面要加上“佛曰：”)：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>平等文明自由友善公正自由诚信富强自由自由平等民主平等自由自由友善敬业平等公正平等富强平等自由平等民主和谐公正自由诚信平等和谐公正公正自由法治平等法治法治法治和谐和谐平等自由和谐自由自由和谐公正自由敬业自由文明和谐平等自由文明和谐平等和谐文明自由和谐自由和谐和谐平等和谐法治公正诚信平等公正诚信民主自由和谐公正民主平等平等平等平等自由和谐和谐和谐平等和谐自由诚信平等和谐自由自由友善敬业平等和谐自由友善敬业平等法治自由法治和谐和谐自由友善公正法治敬业公正友善爱国公正民主法治文明自由民主平等公正自由法治平等文明平等友善自由平等和谐自由友善自由平等文明自由民主自由平等平等敬业自由平等平等诚信富强平等友善敬业公正诚信平等公正友善敬业公正平等平等诚信平等公正自由公正诚信平等法治敬业公正诚信平等法治平等公正友善平等公正诚信自由公正友善敬业法治法治公正公正公正平等公正诚信自由公正和谐公正平等
</span></span></code></pre></div><p>又是套套，应该是社会主义核心价值观密码，使用<a href="http://ctf.ssleye.com/cvencode.html">在线工具</a>解密一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>RLJDQTOVPTQ6O6duws5CD6IB5B52CC57okCaUUC3SO4OSOWG3LynarAVGRZSJRAEYEZ_ooe_doyouknowfence
</span></span></code></pre></div><p>发现后面有一个提示，好像是栅栏密码，需要进行解密，使用<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">在线工具</a>解一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>R5UALCUVJDCGD63RQISZTBOSO54JVBORP5SAT2OEQCWY6CGEO53Z67L_doyouknowCaesar
</span></span></code></pre></div><p>后面又有提示，应该是凯撒密码，由于hint说凯撒密码不是最后一步，因此看密文格式像是base32加密的格式，因此这里需要进行测试检验，经过检验发现是3位的凯撒密码可以成功使用base32。故使用3位凯撒密码解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>O5RXIZRSGAZDA63ONFPWQYLPL54GSYLOM5PXQ2LBNZTV6ZDBL53W67I
</span></span></code></pre></div><p>然后使用base32解密，即可：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>wctf2020{ni_hao_xiang_xiang_da_wo}
</span></span></code></pre></div><h2 id="0x4-mrctf2020天干地支甲子">0x4 [MRCTF2020]天干地支+甲子</h2>
<p>看样子是蛮有意思的样子~，看看题目到底是个啥：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>得到得字符串用MRCTF{}包裹
</span></span><span style="display:flex;"><span>一天Eki收到了一封来自Sndav的信，但是他有点迷希望您来解决一下
</span></span><span style="display:flex;"><span>甲戌
</span></span><span style="display:flex;"><span>甲寅
</span></span><span style="display:flex;"><span>甲寅
</span></span><span style="display:flex;"><span>癸卯
</span></span><span style="display:flex;"><span>己酉 
</span></span><span style="display:flex;"><span>甲寅
</span></span><span style="display:flex;"><span>辛丑
</span></span></code></pre></div><p>看题目应该是考察的是六十甲子纳音表：（和BUUCTF上的传统文化+古典密码那道题目非常类似，估计思路也是相似的）</p>
<p><img src="/images/BUUCTF-CRYPTO-4_writeup/image-139.png" alt="img"></p>
<p>根据六十甲子纳音表编写脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>c_sky <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;甲乙丙丁戊己庚辛壬癸&#34;</span>
</span></span><span style="display:flex;"><span>c_earth <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;子丑寅卯辰巳午未申酉戌亥&#34;</span>
</span></span><span style="display:flex;"><span>c_dict <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">60</span>):
</span></span><span style="display:flex;"><span>    c_dict[c_sky[i<span style="color:#f92672">%</span>len(c_sky)]<span style="color:#f92672">+</span>c_earth[i<span style="color:#f92672">%</span>len(c_earth)]] <span style="color:#f92672">=</span> i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;甲戌 甲寅 甲寅 癸卯 己酉 甲寅 辛丑&#34;</span>
</span></span><span style="display:flex;"><span>c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>m_list <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
</span></span><span style="display:flex;"><span>    m_list<span style="color:#f92672">.</span>append(chr(c_dict[i]<span style="color:#f92672">+</span><span style="color:#ae81ff">60</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(m_list)
</span></span><span style="display:flex;"><span>print(m)
</span></span></code></pre></div><p>运行脚本，得到flag：（注意要python3环境下运行哟！）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Goodjob
</span></span></code></pre></div><h2 id="0x5-mrctf2020vigenere">0x5 [MRCTF2020]vigenere</h2>
<p>看样子应该是维吉尼亚密码，也就是考察多表替换密码的题目，看看题目有些什么东西吧！</p>
<p>两个文件，一个cipher.txt密文文件，一个vigenere.py加密源码文件</p>
<p>vigenere.py文件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> ctf <span style="color:#f92672">import</span> source_text, key_string
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>getdiff <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> char: ord(char)<span style="color:#f92672">-</span>ord(<span style="color:#e6db74">&#39;a&#39;</span>)
</span></span><span style="display:flex;"><span>getchar <span style="color:#f92672">=</span> <span style="color:#66d9ef">lambda</span> num: chr(ord(<span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">+</span>num)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">vigenere</span>(src: chr, key: chr) <span style="color:#f92672">-&amp;</span>gt; chr:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span>(src<span style="color:#f92672">.</span>isalpha() <span style="color:#f92672">and</span> key<span style="color:#f92672">.</span>isalpha())
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>(getchar((getdiff(src) <span style="color:#f92672">+</span> getdiff(key) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">26</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>src <span style="color:#f92672">=</span> source_text<span style="color:#f92672">.</span>lower()
</span></span><span style="display:flex;"><span>count <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span>(len(key_string) <span style="color:#f92672">&amp;</span>gt; <span style="color:#ae81ff">5</span> <span style="color:#f92672">and</span> len(key_string) <span style="color:#f92672">&amp;</span>lt; <span style="color:#ae81ff">10</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> src:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(i<span style="color:#f92672">.</span>isalpha()):
</span></span><span style="display:flex;"><span>        print(vigenere(i, key_string[count <span style="color:#f92672">%</span> len(key_string)]), end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</span></span><span style="display:flex;"><span>        count<span style="color:#f92672">+=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        print(i, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</span></span></code></pre></div><p>cipher.txt</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>g vjganxsymda ux ylt vtvjttajwsgt bl udfteyhfgt
</span></span><span style="display:flex;"><span>oe btlc ckjwc qnxdta 
</span></span><span style="display:flex;"><span>vbbwwrbrtlx su gnw nrshylwmpy cgwps, lum bipee ynecgy gk jaryz frs fzwjp, x puej jgbs udfteyhfgt, gnw sil uuej su zofi. sc okzfpu bl lmi uhzmwi, x nyc dsj bl lmi enyl ys argnj yh nrgsi. nba swi cbz ojprbsw fqdam mx. cdh nsai cb ygaigroysxn jnwwi lr msylte.
</span></span><span style="display:flex;"><span>cw mekr tg jptpzwi kdikjsqtaz, ftv pek oj pxxkdd xd ugnj scr, yg n esqxwxw nba onxw au ywipgkj fyiuujnxn gnss xwnz onxw jnahl avhwwxn vzkjpu nrofch fvwfoh. v jwhppek lmi vyutfp hbiafp hcguj at nxw gyxyjask ib hw seihxsqpn vtvjttajwsx ds zzj xnegfsmtf egz wtrq lt mbcukj sc hy. qty wnbw ss bbxsq vxtnl ys ghrw zw cbx vt cdh vgxwtfy ssc brzzthh bl wsjdeiwricg cw mekr zjzi grgktr ib lwfv.
</span></span><span style="display:flex;"><span>vbbwwrbrtlx hteonj xwroj oyhg vgbigf ljtq iuk utrhrtl tj iuk ytztetwi. cdh nsai crolmig fudngxgkv ssg ekujmkrj gzvh. jk vnh cbz aszxgk qty. nba vt rdg qfta jf, tgw hd lum prdj umw aderv. hcqrxkuerr jgjw cbz dni lvzznr nbaj gsgqkjx. hd aul ylxaq lmei lum hec oaaqh xg, gk yldhmz nx lrxw f tjorah gdaylwyrgogs tgbpwhx. nba ufrcbz. ay mh nt shx ds tsyygr gfi mi txgbw xgywqj iuxgzkw baj hsaykuymkr guymday.
</span></span><span style="display:flex;"><span>qty wnbw ssi rtyfktq of tyg txwfx paj yfxwrxask rbtnjvhnzatr, cbx vnh nba uwipgk lmi lrgdyl ds umw qpeqwytaniwx. cdh jg ssi xtgb sje imqxjek, gzv tgnahw, de zzj ycjxayxta igiih gnsy eaeksic eeunnht baj xsrvkld qdek gwhte zzfr rbadi ft bhlfmcrj td ecl ux dsje oeushvzatrh.
</span></span><span style="display:flex;"><span>lum hppvs lmigr gjj tgbhdjqh nsgsk jf zzfx nba fjis gu ktpkr. egz yhr zznw rygar eh nt wcgjfk lt mcigvj sje vjjgxailx. qpae gk xwryw uvdorwrw sbt&#39;l jbxfz. omigr zzjvt nxw wipy igsjavilx, awrxw yltek swi leuflw, lr caqp xqkfymul zzjq paj sihgryk yltz hq tyg zkssw. lr gjj jdesask dhx gbr hbiafp rbtlwerg. zznw vbbwwrpaiw bmay gjnwt niutvsvty ys iuk utrsvzatrh bl gzv lbxdi, rdg egzvh. baj bsgyj ax hxslwwicg.
</span></span><span style="display:flex;"><span>iqgigfvshi rbtknwif ux yvpayshxxbtk, wianzatrhuohx, ecq zztyvuz aywtyl, swvplkv qmzr g kyecqofl apik as xwr cwg su baj hsbzafngpgogsw. dhxk nw p jujqh iugl nw qbzz jzteeomigr gfi rdjnwwi, qhz ay mh aul bltek tthxry dnzt.
</span></span><span style="display:flex;"><span>jk swi reksymct g otvaq zzfx pyr efc tazww axgngzx eeonnpttk gw tgrpmimrr guhsgqkv gc gniw, jgdaueng ebcww, qxyolfvn sujhi, de ylfxxbt gk fxezz.
</span></span><span style="display:flex;"><span>bi pek uwipgofl e lbxdi awrxw frnbtw, frnjnwwi bne wctgryk mmh bx zjv qrrajjh, au efxirx zta hvtyzppe, cayldhz xjeg bl tjmct igjvrrj asxd fodjrrr uj hscsujrmil.
</span></span><span style="display:flex;"><span>egzv armsq gdaiwuxh bl hwserxld, imcxwxwxbt, aiicgold, qdikejri, ntv hscgkpy hd aul fteye lt yh. gnwd egr gdq fpfkv tr bnzljv, paj lmigr ok ss bnzljv wrxw.
</span></span><span style="display:flex;"><span>tyg vjwsxxgowx lpik ft fdqowx, wd, htdnot lum, bi rntftx dozsnr dejww fn cnqxmrnr utigpogs. at okdnikr zzfx ueue jxwvik, jravmzyicrj kjpu-vtljvtfz, ssh iuk utqbbtojea, baj lskrxffrrr caqp tzkjli. dhx aiicgolnih zgq gi svylwmqhzwi ereukx qpae gk cdhx bzvxfjahxxbtk. ylt btdd ppj zzfx pyr gzv rbtkymihkfy gjyzmwih jumqh vrtwweaye jjgdttaei xf zzj kdyjws vjyk. oj ldck oj axyr tj eqyk lt fjvrv tyg cgjymrhrsw wdyalnscf uf ylpg hsxmh. oal bi rntftx ppiwux iuk ktpjgogsw nba swi pgzwrtivty ys xzvgxi.
</span></span><span style="display:flex;"><span>xa zzj ycvzwi winzwx, cdh nsai ibjsd ggrgljh p ygo, ylt gkdjgdzsmsmrnzatrh ekxtvb nil, blxpn jjtjqosyih lumw sla igswivzmymda gfi mcfadyw iuk vwipzy gk ntslwwwda, csxlxamltr, bvrd, resvygs, htguizikvrdj, ecq hjfrsrok. yltfk vwipzy ezwi auo gi qbxf frtj of zw.
</span></span><span style="display:flex;"><span>nba swi irxjnjxrj gk cdhx gbr ruodivta, yasgt gnwd egr tsymkry as e lbxdi awrxw dsj jodq eajgqx ft vsenkgntlx. ftpgmxi nba xjeg gnwr, cdh kfyvjfz qtyg oajjejpxshmtf cayl iuk hfvtazsq vtfvgswxoodnxxry qty pek lts rbcswhal zg hscsxgsx nbajxiaikk. nr dhx otvaq, gdq xwr ywsxxzkfyw paj wctgryknscf ux mybntayc, ueue ylt qktfwxam lt xwr gfliavi, swi enxlx su n ywfqaryk bldyk, lmi vyutfp rbtnjvhnzatr ds hayw. lr issrdg ywuegnzw ylt noj ylpg iztotf ljtq iuk snv jcuf blxpn onrvf hwfx.
</span></span><span style="display:flex;"><span>xa iznrp, tkjrecl, ljfrrr, xmxwxn, yaskpcujj, minrq frs gnw zrxgkv xxpgkk, dsj nxw yvnvty ys lnxv tju gnw amghy gk pxokjyc ql kjjgivty lypej htwif gl ylt sxgsxxrxk tj rlhwwweniw. yltfk efc zrkh tyi gnw hscggynsc suj f wbnrd ymbr, hmy xwre onpa aul bsgx of f aderv ylpg caqp hbuf gi qygfpiirj as fxg-hwfvxam ejhxn.
</span></span><span style="display:flex;"><span>egzv xaijjehvtyqc doygqiir ofksgzglnsc vtvzwieowx adhrv uigcklzeir zzjqhrrnjw ql vjttdfofl ppjy, as ebrxahe paj wqwtjnwwi, iugl hppvs lt sla yhjiru olxias zzwsjtngzx iuk otvaq. zzjwt ygox adhrv iirygjj msrgk ys qr gftxwrx ashjfzjnea cxgiyrg, tg rsgr tggpt gnss txt ojtr. xa umw aderv, blpgknjv iuk zzqpa sash bne uwipgk ufr qr xwuvdqaujh paj vnwieotzxtq ofkmcvzwqc pg tg hshg. zzj kabhsq gdabwdecpk gk xwbaymx cb rgskte xwvyxekk dsje lshxdeowx xd niutqeyokm.
</span></span><span style="display:flex;"><span>xwryw nrreksxmctrq mshgodj ecq igqscvgd ripfajjw eyguj yh vt lmi hnsw ushvzatr pf zztwt cxwamdhy dtztey gk jgrkvtq paj kjpu-qkljvbvtsymda czt lpq zg wiyril ylt nalmsgvzajw ds jaxxpaz, msmcsujris cuojvh. jk ezwi qkuqegr umw zxezmfp hrrnjw xzsmsi ib egzv hbbwwixttld, ikrt sx at pufymchk lt gdaywsx ib egzv ghrw tzte umw fdqowx. at jodq weeksi sjeywqztf guwshf zzj tantwy wd gnsy rd btw hec nxjjwi baj yldhmzyw.
</span></span><span style="display:flex;"><span>lr caqp reksyi p ponnpxmglnsc bl lmi bvtv nr rlhwwweniw. ren vz tj qdek zzqpak ssh unoj ylpa zzj aderv dsje mgaigaswsxh ugnj qpqk tjjdek.
</span></span><span style="display:flex;"><span>xqev vy ewgis balicrxw hvnczg hvppq efr, eyksxi pqj mshteyutvt ntv hygye twerry.
</span></span></code></pre></div><p>尝试使用<a href="https://www.guballa.de/vigenere-solver">在线工具</a>进行维吉尼亚密码的解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>a declaration of the independence of cyberspace
</span></span><span style="display:flex;"><span>by john perry barlow 
</span></span><span style="display:flex;"><span>governments of the industrial world, you weary giants of flesh and steel, i come from cyberspace, the new home of mind. on behalf of the future, i ask you of the past to leave us alone. you are not welcome among us. you have no sovereignty where we gather.
</span></span><span style="display:flex;"><span>we have no elected government, nor are we likely to have one, so i address you with no greater authority than that with which liberty itself always speaks. i declare the global social space we are building to be naturally independent of the tyrannies you seek to impose on us. you have no moral right to rule us nor do you possess any methods of enforcement we have true reason to fear.
</span></span><span style="display:flex;"><span>governments derive their just powers from the consent of the governed. you have neither solicited nor received ours. we did not invite you. you do not know us, nor do you know our world. cyberspace does not lie within your borders. do not think that you can build it, as though it were a public construction project. you cannot. it is an act of nature and it grows itself through our collective actions.
</span></span><span style="display:flex;"><span>you have not engaged in our great and gathering conversation, nor did you create the wealth of our marketplaces. you do not know our culture, our ethics, or the unwritten codes that already provide our society more order than could be obtained by any of your impositions.
</span></span><span style="display:flex;"><span>you claim there are problems among us that you need to solve. you use this claim as an excuse to invade our precincts. many of these problems don&#39;t exist. where there are real conflicts, where there are wrongs, we will identify them and address them by our means. we are forming our own social contract. this governance will arise according to the conditions of our world, not yours. our world is different.
</span></span><span style="display:flex;"><span>cyberspace consists of transactions, relationships, and thought itself, arrayed like a standing wave in the web of our communications. ours is a world that is both everywhere and nowhere, but it is not where bodies live.
</span></span><span style="display:flex;"><span>we are creating a world that all may enter without privilege or prejudice accorded by race, economic power, military force, or station of birth.
</span></span><span style="display:flex;"><span>we are creating a world where anyone, anywhere may express his or her beliefs, no matter how singular, without fear of being coerced into silence or conformity.
</span></span><span style="display:flex;"><span>your legal concepts of property, expression, identity, movement, and context do not apply to us. they are all based on matter, and there is no matter here.
</span></span><span style="display:flex;"><span>our identities have no bodies, so, unlike you, we cannot obtain order by physical coercion. we believe that from ethics, enlightened self-interest, and the commonweal, our governance will emerge. our identities may be distributed across many of your jurisdictions. the only law that all our constituent cultures would generally recognize is the golden rule. we hope we will be able to build our particular solutions on that basis. but we cannot accept the solutions you are attempting to impose.
</span></span><span style="display:flex;"><span>in the united states, you have today created a law, the telecommunications reform act, which repudiates your own constitution and insults the dreams of jefferson, washington, mill, madison, detoqueville, and brandeis. these dreams must now be born anew in us.
</span></span><span style="display:flex;"><span>you are terrified of your own children, since they are natives in a world where you will always be immigrants. because you fear them, you entrust your bureaucracies with the parental responsibilities you are too cowardly to confront yourselves. in our world, all the sentiments and expressions of humanity, from the debasing to the angelic, are parts of a seamless whole, the global conversation of bits. we cannot separate the air that chokes from the air upon which wings beat.
</span></span><span style="display:flex;"><span>in china, germany, france, russia, singapore, italy and the united states, you are trying to ward off the virus of liberty by erecting guard posts at the frontiers of cyberspace. these may keep out the contagion for a small time, but they will not work in a world that will soon be blanketed in bit-bearing media.
</span></span><span style="display:flex;"><span>your increasingly obsolete information industries would perpetuate themselves by proposing laws, in america and elsewhere, that claim to own speech itself throughout the world. these laws would declare ideas to be another industrial product, no more noble than pig iron. in our world, whatever the human mind may create can be reproduced and distributed infinitely at no cost. the global conveyance of thought no longer requires your factories to accomplish.
</span></span><span style="display:flex;"><span>these increasingly hostile and colonial measures place us in the same position as those previous lovers of freedom and self-determination who had to reject the authorities of distant, uninformed powers. we must declare our virtual selves immune to your sovereignty, even as we continue to consent to your rule over our bodies. we will spread ourselves across the planet so that no one can arrest our thoughts.
</span></span><span style="display:flex;"><span>we will create a civilization of the mind in cyberspace. may it be more humane and fair than the world your governments have made before.
</span></span><span style="display:flex;"><span>flag is mrctf vigenere crypto crack man, please add underscore and curly braces.
</span></span></code></pre></div><p>vigenere解密后，flag已经出现了！</p>
<h2 id="0x6-bjdctf2020rsa_output">0x6 [BJDCTF2020]rsa_output</h2>
<p>看题目应该是RSA题目，看看这次又是什么花样？</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>{<span style="color:#ae81ff">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span>,<span style="color:#ae81ff">2767</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{<span style="color:#ae81ff">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span>,<span style="color:#ae81ff">3659</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>message1<span style="color:#f92672">=</span><span style="color:#ae81ff">20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>message2<span style="color:#f92672">=</span><span style="color:#ae81ff">11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span>
</span></span></code></pre></div><p>看题目的样子，应该是考察共模攻击的题目，直接丢个共模攻击的脚本吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">common_modulus</span>(n,c1,c2,e1,e2):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">assert</span>(libnum<span style="color:#f92672">.</span>gcd(e1,e2))
</span></span><span style="display:flex;"><span>    _, s1 ,s2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>gcdext(e1,e2)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> s1 <span style="color:#f92672">&amp;</span>lt; <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        s1 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s1
</span></span><span style="display:flex;"><span>        c1 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c1,n)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> s2 <span style="color:#f92672">&amp;</span>lt; <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        s2 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s2
</span></span><span style="display:flex;"><span>        c2 <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(c2,n)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> pow(c1,s1,n) <span style="color:#f92672">*</span> pow(c2,s2,n) <span style="color:#f92672">%</span> n
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">2767</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">3659</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c1<span style="color:#f92672">=</span><span style="color:#ae81ff">20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c2<span style="color:#f92672">=</span><span style="color:#ae81ff">11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> common_modulus(n,c1,c2,e1,e2)
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>    print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BJD{r3a_C0mmoN_moD@_4ttack}
</span></span></code></pre></div><h2 id="0x7-mrctf2020keyboard">0x7 [MRCTF2020]keyboard</h2>
<p>键盘密码吗？瞧瞧看吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>得到的flag用
</span></span><span style="display:flex;"><span>MRCTF{xxxxxx}形式上叫
</span></span><span style="display:flex;"><span>都为小写字母
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>6
</span></span><span style="display:flex;"><span>666
</span></span><span style="display:flex;"><span>22
</span></span><span style="display:flex;"><span>444
</span></span><span style="display:flex;"><span>555
</span></span><span style="display:flex;"><span>33
</span></span><span style="display:flex;"><span>7
</span></span><span style="display:flex;"><span>44
</span></span><span style="display:flex;"><span>666
</span></span><span style="display:flex;"><span>66
</span></span><span style="display:flex;"><span>3
</span></span></code></pre></div><p>似曾相识的熟悉内容，用丢个脚本解决吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>keyborad <span style="color:#f92672">=</span> [<span style="color:#66d9ef">None</span>,<span style="color:#66d9ef">None</span>,<span style="color:#e6db74">&#34;ABC&#34;</span>,<span style="color:#e6db74">&#34;DEF&#34;</span>,<span style="color:#e6db74">&#34;GHI&#34;</span>,<span style="color:#e6db74">&#34;JKL&#34;</span>,<span style="color:#e6db74">&#34;MNO&#34;</span>,<span style="color:#e6db74">&#34;PQRS&#34;</span>,<span style="color:#e6db74">&#34;TUV&#34;</span>,<span style="color:#e6db74">&#34;WXYZ&#34;</span>]
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;6 666 22 444 555 33 7 44 666 66 3&#34;</span>
</span></span><span style="display:flex;"><span>c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">+=</span> keyborad[int(i[<span style="color:#ae81ff">0</span>])][len(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print m
</span></span></code></pre></div><p>运行脚本，得到一个错误的flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>MOBILEPHOND
</span></span></code></pre></div><p>需要进行简单拼写检查进行修改，便得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>MOBILEPHONE
</span></span></code></pre></div><h2 id="0x8-bjdctf2020signin">0x8 [BJDCTF2020]signin</h2>
<p>签到题？萌新狂喜！看看是什么样的签到吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>welcome to crypto world！！
</span></span><span style="display:flex;"><span>密文：424a447b57653163306d655f74345f424a444354467d
</span></span></code></pre></div><p>看样子应该是一个HEX编码的密文，解一下就得到flag了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BJD{We1c0me_t4_BJDCTF}
</span></span></code></pre></div><h2 id="0x9-actf新生赛2020crypto-rsa0">0x9 [ACTF新生赛2020]crypto-rsa0</h2>
<p>RSA题目，题目内容应该是比较有意思的：</p>
<p>附件文件有两个文件，一个hint.txt应该是一个提示文件，还有一个压缩包，但是压缩包打不开，嘤嘤嘤~</p>
<p>看看hint.txt里面有什么：</p>
<pre tabindex="0"><code>怎么办呢，出题人也太坏了，竟然把压缩包给伪加密了！
</code></pre><p>感觉有点像是杂项题目……伪加密，那是什么东西？</p>
<p>菜狗查一查……</p>
<p>经过查询发现，好像是zip文件结构中的09标志着是伪加密文件结构，只需要将09修改为00就可以破解伪加密，可以使用一个010edit工具进行修改：</p>
<p><img src="/images/BUUCTF-CRYPTO-4_writeup/image-20.png" alt="img"></p>
<p>然后将09修改成00并将文件进行保持即可进行解压操作</p>
<p>解压得到一个rsa0.py的python源码文件和一个output的文本文件</p>
<p>rsa0.py</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Cryptodome.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>FLAG<span style="color:#f92672">=</span><span style="color:#75715e">#hidden, please solve it</span>
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">=</span>int<span style="color:#f92672">.</span>from_bytes(FLAG,byteorder <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;big&#39;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">512</span>)
</span></span><span style="display:flex;"><span>q<span style="color:#f92672">=</span>getPrime(<span style="color:#ae81ff">512</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(p)
</span></span><span style="display:flex;"><span>print(q)
</span></span><span style="display:flex;"><span>N<span style="color:#f92672">=</span>p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>e<span style="color:#f92672">=</span><span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>enc <span style="color:#f92672">=</span> pow(flag,e,N)
</span></span><span style="display:flex;"><span>print (enc)
</span></span></code></pre></div><p>output</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>9018588066434206377240277162476739271386240173088676526295315163990968347022922841299128274551482926490908399237153883494964743436193853978459947060210411
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>7547005673877738257835729760037765213340036696350766324229143613179932145122130685778504062410137043635958208805698698169847293520149572605026492751740223
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>50996206925961019415256003394743594106061473865032792073035954925875056079762626648452348856255575840166640519334862690063949316515750256545937498213476286637455803452890781264446030732369871044870359838568618176586206041055000297981733272816089806014400846392307742065559331874972274844992047849472203390350
</span></span></code></pre></div><p>根据源代码，可以看出源码已经将p，q，c的数据输出，而且根据源码中的e的数值，写个简单脚本就可以解决了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">9018588066434206377240277162476739271386240173088676526295315163990968347022922841299128274551482926490908399237153883494964743436193853978459947060210411</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">7547005673877738257835729760037765213340036696350766324229143613179932145122130685778504062410137043635958208805698698169847293520149572605026492751740223</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">50996206925961019415256003394743594106061473865032792073035954925875056079762626648452348856255575840166640519334862690063949316515750256545937498213476286637455803452890781264446030732369871044870359838568618176586206041055000297981733272816089806014400846392307742065559331874972274844992047849472203390350</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>actf{n0w_y0u_see_RSA}
</span></span></code></pre></div><h2 id="0xa-一张谍报">0xA 一张谍报</h2>
<p>看样子，应该是一个古典密码学题目，或者脑洞题？</p>
<p>看一下题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>国家能源总部经过派出卧底长期刺探，终于找到一个潜伏已久的国外内鬼：三楼能源楼管老王。由于抓捕仓促，老王服毒自尽了。侦查部门搜出老王每日看的报纸原来是特制的情报。聪明的你能从附件的报纸中找出情报么？flag是老王说的暗号。（由于老王的线人曾今做的土匪，所以用的行话） 注意：得到的 flag 请包上 flag{} 提交
</span></span></code></pre></div><p>附件文件是一个docx文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>国家能源时报2015年3月5日
</span></span><span style="display:flex;"><span>平时要针对性的吃些防辐射菜
</span></span><span style="display:flex;"><span>对于和电脑“朝夕相处”的人们来说,辐射的确是个让人忧心的“副产物”。因此,平时针对性的吃些可以防辐射的菜是很有好处的。特别是现在接近年底，加班加点是家常便饭，对着电脑更是辐射吸收得满满的，唯有趁一日三餐进食的时候吃点防辐射的食物了。
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>朝歌区梆子公司三更放炮
</span></span><span style="display:flex;"><span>老小区居民大爷联合抵制
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>今天上午，朝歌区梆子公司决定，在每天三更天不亮免费在各大小区门口设卡为全城提供二次震耳欲聋的敲更提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的符号是前进。为此，全区老人都蹲在该公司东边树丛合力抵制，不给公司人员放行，场面混乱。李罗鹰住进朝歌区五十年了，人称老鹰头，几年孙子李虎南刚从东北当猎户回来，每月还寄回来几块鼹鼠干。李罗鹰当年遇到的老婆是朝歌一枝花，所以李南虎是长得非常秀气的一个汉子。李罗鹰表示：无论梆子公司做的对错，反正不能打扰他孙子睡觉，子曰：‘睡觉乃人之常情’。梆子公司这是连菩萨睡觉都不放过啊。李南虎表示：梆子公司智商捉急，小心居民猴急跳墙！这三伏天都不给睡觉，这不扯淡么！
</span></span><span style="display:flex;"><span>到了中午人群仍未离散，更有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李南虎仍旧表示爷爷年纪大了，睡不好对身体不好。
</span></span><span style="display:flex;"><span>朝歌区梆子公司三更放炮
</span></span><span style="display:flex;"><span>老小区居民大爷联合抵制
</span></span><span style="display:flex;"><span>喵天上午，汪歌区哞叽公司决定，在每天八哇天不全免费在各大小区门脑设卡为全城提供双次震耳欲聋的敲哇提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的编号是前进。为此，全区眠人都足在该公司流边草丛合力抵制，不给公司人员放行，场面混乱。李罗鸟住进汪歌区五十年了，人称眠鸟顶，几年孙叽李熬值刚从流北当屁户回来，每月还寄回来几块报信干。李罗鸟当年遇到的眠婆是汪歌一枝花，所以李值熬是长得非常秀气的一个汉叽。李罗鸟表示：无论哞叽公司做的对错，反正不能打扰他孙叽睡觉，叽叶：‘睡觉乃人之常情’。哞叽公司这是连衣服睡觉都不放过啊。李值熬表示：哞叽公司智商捉急，小心居民猴急跳墙！这八伏天都不给睡觉，这不扯淡么！
</span></span><span style="display:flex;"><span>到了中午人群仍未离散，哇有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李值熬仍旧表示爷爷年纪大了，睡不好对身体不好。
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>听书做作业
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>喵汪哞叽双哇顶，眠鸟足屁流脑，八哇报信断流脑全叽，眠鸟进北脑上草，八枝遇孙叽，孙叽对熬编叶：值天衣服放鸟捉猴顶。鸟对：北汪罗汉伏熬乱天门。合编放行，卡编扯呼。人离烧草，报信归洞，孙叽找爷爷。
</span></span></code></pre></div><p>这道题目其实更像是一道MISC题目，这道题目的总体思路是和达芬奇密码那道题目有着异曲同工之妙的，</p>
<p>写个处理脚本即可：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>flag_list <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>str1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;今天上午，朝歌区梆子公司决定，在每天三更天不亮免费在各大小区门口设卡为全城提供二次震耳欲聋的敲更提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的符号是前进。为此，全区老人都蹲在该公司东边树丛合力抵制，不给公司人员放行，场面混乱。李罗鹰住进朝歌区五十年了，人称老鹰头，几年孙子李虎南刚从东北当猎户回来，每月还寄回来几块鼹鼠干。李罗鹰当年遇到的老婆是朝歌一枝花，所以李南虎是长得非常秀气的一个汉子。李罗鹰表示：无论梆子公司做的对错，反正不能打扰他孙子睡觉，子曰：‘睡觉 乃人之常情’。梆子公司这是连菩萨睡觉都不放过啊。李南虎表示：梆子公司智商捉急，小心居民猴急跳墙！这三伏天都不给睡觉，这不 扯淡么！到了中午人群仍未离散，更有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李南虎仍旧表示爷爷年纪大了，睡不好对身体不好。&#34;</span>
</span></span><span style="display:flex;"><span>str2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;喵天上午，汪歌区哞叽公司决定，在每天八哇天不全免费在各大小区门脑设卡为全城提供双次震耳欲聋的敲哇提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的编号是前进。为此，全区眠人都足在该公司流边草丛合力抵制，不给公司人员放行，场面混乱。李罗鸟住进汪歌区五十年了，人称眠鸟顶，几年孙叽李熬值刚从流北当屁户回来，每月还寄回来几块报信干。李罗鸟当年遇到的眠婆是汪歌一枝花，所以李值熬是长得非常秀气的一个汉叽。李罗鸟表示：无论哞叽公司做的对错，反正不能打扰他孙叽睡觉，叽叶：‘睡觉 乃人之常情’。哞叽公司这是连衣服睡觉都不放过啊。李值熬表示：哞叽公司智商捉急，小心居民猴急跳墙！这八伏天都不给睡觉，这不 扯淡么！到了中午人群仍未离散，哇有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李值熬仍旧表示爷爷年纪大了，睡不好对身体不好。&#34;</span>
</span></span><span style="display:flex;"><span>str3 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;喵汪哞叽双哇顶，眠鸟足屁流脑，八哇报信断流脑全叽，眠鸟进北脑上草，八枝遇孙叽，孙叽对熬编叶：值天衣服放鸟捉猴顶。鸟对：北汪罗汉伏熬乱天门。合编放行，卡编扯呼。人离烧草，报信归洞，孙叽找爷爷。&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(str3)):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(str2)):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> str3[i] <span style="color:#f92672">==</span> str2[j]:
</span></span><span style="display:flex;"><span>            flag <span style="color:#f92672">+=</span> str1[j]
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>运行脚本得到一段文字：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>今朝梆子二更头，老鹰蹲猎东口，三更鼹鼠断东口亮子，老鹰进北口上树，三枝遇孙子，孙子对虎符曰：南天菩萨放鹰捉猴头。鹰对：北朝罗汉伏虎乱天门。合符放行，卡符扯呼。人离烧树，鼹鼠归洞，孙子找爷爷。
</span></span></code></pre></div><p>而本题的flag就在这段文字中，即flag{南天菩萨放鹰捉猴头}</p>
<h2 id="0xb-samemod">0xB SameMod</h2>
<p>看到题目，不由就联想到了共模攻击，应该是一道RSA题目，瞧瞧看吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>{<span style="color:#ae81ff">6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249</span>,<span style="color:#ae81ff">773</span>}
</span></span><span style="display:flex;"><span>{<span style="color:#ae81ff">6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249</span>,<span style="color:#ae81ff">839</span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>message1<span style="color:#f92672">=</span><span style="color:#ae81ff">3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349</span>
</span></span><span style="display:flex;"><span>message2<span style="color:#f92672">=</span><span style="color:#ae81ff">5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535</span>
</span></span></code></pre></div><p>这熟悉的感觉，共模攻击没错了！</p>
<p>直接丢个共模攻击的脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249</span>
</span></span><span style="display:flex;"><span>e1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">773</span>
</span></span><span style="display:flex;"><span>e2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">839</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c1<span style="color:#f92672">=</span><span style="color:#ae81ff">3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349</span>
</span></span><span style="display:flex;"><span>c2<span style="color:#f92672">=</span><span style="color:#ae81ff">5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">Samemod</span>(n,c1,c2,e1,e2):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">egcd</span>(a,b):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> b <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> a,<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            x,y <span style="color:#f92672">=</span> egcd(b, a <span style="color:#f92672">%</span> b)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> y,x <span style="color:#f92672">-</span> ( a<span style="color:#f92672">//</span>b )<span style="color:#f92672">*</span>y
</span></span><span style="display:flex;"><span>    s <span style="color:#f92672">=</span> egcd(e1,e2)
</span></span><span style="display:flex;"><span>    s1 <span style="color:#f92672">=</span> s[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    s2 <span style="color:#f92672">=</span> s[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> s1<span style="color:#f92672">&amp;</span>lt;<span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        s1 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s1
</span></span><span style="display:flex;"><span>        c1 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(c1,n)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> s2<span style="color:#f92672">&amp;</span>lt;<span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        s2 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span>s2
</span></span><span style="display:flex;"><span>        c2 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(c2,n)
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> pow(c1,s1,n)<span style="color:#f92672">*</span>pow(c2,s2,n) <span style="color:#f92672">%</span>n
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> m
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> Samemod(n, c1, c2, e1, e2)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> str(m)
</span></span><span style="display:flex;"><span>i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> i<span style="color:#f92672">&amp;</span>lt;len(m):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> m[i] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span>:
</span></span><span style="display:flex;"><span>        c <span style="color:#f92672">=</span> chr(int(m[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">3</span>]))
</span></span><span style="display:flex;"><span>        i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        c<span style="color:#f92672">=</span>chr(int(m[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">2</span>]))
</span></span><span style="display:flex;"><span>        i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">+=</span>c
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{whenwethinkitispossible}
</span></span></code></pre></div><h2 id="0xc-gwctf-2019babyrsa">0xC [GWCTF 2019]BabyRSA</h2>
<p>开始了，开始了！RSA的盛宴！</p>
<p>两个文件，一个secret文件，一个encrypt.py文件</p>
<p>secret</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>N<span style="color:#f92672">=</span><span style="color:#ae81ff">636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163</span>
</span></span><span style="display:flex;"><span>m1<span style="color:#f92672">=</span><span style="color:#ae81ff">90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239</span>
</span></span><span style="display:flex;"><span>m2<span style="color:#f92672">=</span><span style="color:#ae81ff">487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546</span>
</span></span></code></pre></div><p>encrypt.py</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sympy
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;GWHT{******}&#39;</span>
</span></span><span style="display:flex;"><span>secret <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;******&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span>(len(flag) <span style="color:#f92672">==</span> <span style="color:#ae81ff">38</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>half <span style="color:#f92672">=</span> len(flag) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag1 <span style="color:#f92672">=</span> flag[:half]
</span></span><span style="display:flex;"><span>flag2 <span style="color:#f92672">=</span> flag[half:]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>secret_num <span style="color:#f92672">=</span> getPrime(<span style="color:#ae81ff">1024</span>) <span style="color:#f92672">*</span> bytes_to_long(secret)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(secret_num)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>nextprime(p)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>N <span style="color:#f92672">=</span> p <span style="color:#f92672">*</span> q
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>F1 <span style="color:#f92672">=</span> bytes_to_long(flag1)
</span></span><span style="display:flex;"><span>F2 <span style="color:#f92672">=</span> bytes_to_long(flag2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c1 <span style="color:#f92672">=</span> F1 <span style="color:#f92672">+</span> F2
</span></span><span style="display:flex;"><span>c2 <span style="color:#f92672">=</span> pow(F1, <span style="color:#ae81ff">3</span>) <span style="color:#f92672">+</span> pow(F2, <span style="color:#ae81ff">3</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span>(c2 <span style="color:#f92672">&amp;</span>lt; N)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m1 <span style="color:#f92672">=</span> pow(c1, e, N)
</span></span><span style="display:flex;"><span>m2 <span style="color:#f92672">=</span> pow(c2, e, N)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>output <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#39;secret&#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>)
</span></span><span style="display:flex;"><span>output<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;N=&#39;</span> <span style="color:#f92672">+</span> str(N) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;n&#39;</span>)
</span></span><span style="display:flex;"><span>output<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;m1=&#39;</span> <span style="color:#f92672">+</span> str(m1) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;n&#39;</span>)
</span></span><span style="display:flex;"><span>output<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#39;m2=&#39;</span> <span style="color:#f92672">+</span> str(m2) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;n&#39;</span>)
</span></span><span style="display:flex;"><span>output<span style="color:#f92672">.</span>close()
</span></span></code></pre></div><p>根据源码文件，可以对源码文件进行简单分析，发现p和q的数值是非常接近的，可以直接对n开平方然后求得下一个素数来得到p，然后再用n除以p来得到q。这道rsa题目使用了套娃，对密文加了一层方程组的套套：</p>
<p>[   c_1 = F_1+F_2  ]</p>
<p>[ c_2 = F_1^3 + F_2^3  ]</p>
<p>其实这道题目也没有太大的难度，扔给脚本直接求解就好：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> sympy
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>N<span style="color:#f92672">=</span><span style="color:#ae81ff">636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163</span>
</span></span><span style="display:flex;"><span>m1<span style="color:#f92672">=</span><span style="color:#ae81ff">90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239</span>
</span></span><span style="display:flex;"><span>m2<span style="color:#f92672">=</span><span style="color:#ae81ff">487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span>sympy<span style="color:#f92672">.</span>nextprime(libnum<span style="color:#f92672">.</span>nroot(N,<span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> N <span style="color:#f92672">//</span> p
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span>(N <span style="color:#f92672">==</span> p<span style="color:#f92672">*</span>q)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
</span></span><span style="display:flex;"><span>c1 <span style="color:#f92672">=</span> pow(m1,d,N)
</span></span><span style="display:flex;"><span>c2 <span style="color:#f92672">=</span> pow(m2,d,N)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;x&#39;</span>)
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;y&#39;</span>)
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>solve([x <span style="color:#f92672">+</span> y <span style="color:#f92672">-</span> c1, x<span style="color:#f92672">**</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> y<span style="color:#f92672">**</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">-</span> c2 ],[x,y])
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print result</span>
</span></span><span style="display:flex;"><span>F1 <span style="color:#f92672">=</span> int(result[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>F2 <span style="color:#f92672">=</span> int(result[<span style="color:#ae81ff">0</span>][<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag1 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(F1)
</span></span><span style="display:flex;"><span>flag2 <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(F2)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> flag2 <span style="color:#f92672">+</span> flag1
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，大约等个2min，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>GWHT{f709e0e2cfe7e530ca8972959a1033b2}
</span></span></code></pre></div><h2 id="0xd-wustctf2020babyrsa">0xD [WUSTCTF2020]babyrsa</h2>
<p>又是一道有点意思的RSA题目，看看题吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">28767758880940662779934612526152562406674613203406706867456395986985664083182</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">73069886771625642807435783661014062604264768481735145873508846925735521695159</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span></code></pre></div><p>拿到这个题目，好像除了爆破n，没有什么别的方法了，那就分解一下n就好了</p>
<p>使用sage分解一下（笑~漫长的等待）,得到分解结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>189239861511125143212536989589123569301*386123125371923651191219869811293586459
</span></span></code></pre></div><p>然后就是愉快地写脚本了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">28767758880940662779934612526152562406674613203406706867456395986985664083182</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">73069886771625642807435783661014062604264768481735145873508846925735521695159</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">189239861511125143212536989589123569301</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">386123125371923651191219869811293586459</span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>wctf2020{just_@_piece_0f_cak3}
</span></span></code></pre></div><h2 id="0xe-rsa4">0xE RSA4</h2>
<p>看看这RSA有什么东西吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>N <span style="color:#f92672">=</span> <span style="color:#ae81ff">331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004</span> 
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>N <span style="color:#f92672">=</span> <span style="color:#ae81ff">302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114</span> 
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>N <span style="color:#f92672">=</span> <span style="color:#ae81ff">332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323</span> 
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242</span>
</span></span></code></pre></div><p>看样子是低加密指数广播攻击了，观察数据发现数据中都是小于5的数字，五进制，这可太恶心了，看来还需要进行一下进制转换。但是题目没有给出e的数值，根据这种攻击可能的情况，e的取值是3，10，17，然后结合中国剩余定理求解，我丢！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span>N1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004</span>
</span></span><span style="display:flex;"><span>c1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>N2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114</span>
</span></span><span style="display:flex;"><span>c2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>N3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323</span>
</span></span><span style="display:flex;"><span>c3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242</span>
</span></span><span style="display:flex;"><span>N <span style="color:#f92672">=</span> [N1,N2,N3]
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> [c1,c2,c3]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">3</span>):
</span></span><span style="display:flex;"><span>    N[i] <span style="color:#f92672">=</span> int(str(N[i]),<span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>    c[i] <span style="color:#f92672">=</span> int(str(c[i]),<span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">CRT</span>(data):
</span></span><span style="display:flex;"><span>    sum_ <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> data:
</span></span><span style="display:flex;"><span>        m <span style="color:#f92672">=</span> m<span style="color:#f92672">*</span>n[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> n,c <span style="color:#f92672">in</span> data:
</span></span><span style="display:flex;"><span>        m1 <span style="color:#f92672">=</span> m<span style="color:#f92672">/</span>n
</span></span><span style="display:flex;"><span>        mr <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(m1,n)
</span></span><span style="display:flex;"><span>        sum_ <span style="color:#f92672">=</span> sum_ <span style="color:#f92672">+</span> mr <span style="color:#f92672">*</span> m1 <span style="color:#f92672">*</span> c
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> sum_ <span style="color:#f92672">%</span> m
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">isprintstr</span>(data):
</span></span><span style="display:flex;"><span>    index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> data:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> string<span style="color:#f92672">.</span>printable:
</span></span><span style="display:flex;"><span>            index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            index <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> index <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>data <span style="color:#f92672">=</span> zip(N,c)
</span></span><span style="display:flex;"><span>m_e <span style="color:#f92672">=</span> CRT(data)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> [<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">17</span>]
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> e:
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>nroot(m_e,i)
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">=</span> isprintstr(libnum<span style="color:#f92672">.</span>n2s(m))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> flag:
</span></span><span style="display:flex;"><span>        print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>noxCTF{D4mn_y0u_h4s74d_wh47_4_b100dy_b4s74rd!}
</span></span></code></pre></div><h2 id="0xf-yxx">0xF yxx</h2>
<p>这是啥？看看题目吧！</p>
<p>附件里面是两个txt文件</p>
<p>明文.txt：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>lovelovelovelovelovelovelovelove
</span></span></code></pre></div><p>密文.txt：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>V
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0
</span></span><span style="display:flex;"><span>0
</span></span><span style="display:flex;"><span>0
</span></span><span style="display:flex;"><span>
</span></span></code></pre></div><p>密文中有很多不可打印的字符，这道题目应该是考察异或操作的，写个脚本读一下转一下数字进行一下异或：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;c.txt&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        c <span style="color:#f92672">+=</span> line
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;m.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        m <span style="color:#f92672">+=</span> line
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m_n <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>s2n(m)
</span></span><span style="display:flex;"><span>c_n <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>s2n(c)
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> m_n<span style="color:#f92672">^</span>c_n
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(result)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag:nctf{xor_xor_xor_biubiubiu}
</span></span></code></pre></div><p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>BJDCTF 2nd CRYPTO_writeup</title>
            <link>/posts/bjdctf-2nd-crypto_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 17:01:41 +0800</pubDate>
            
            <guid>/posts/bjdctf-2nd-crypto_writeup/</guid>
            <description>BJDCTF 2nd的密码学题目有8道题目可以尝试做一做，都挺有意思的。
0x0 签到-y1ng 来康康题目：
welcome to BJDCTF 1079822948 QkpEe1czbGMwbWVfVDBfQkpEQ1RGfQ== 直接使用base64解码就好：
BJD{W3lc0me_T0_BJDCTF} 0x1 老文盲了 下载附件，康康附件有什么好玩的内容：
罼雧締眔擴灝淛匶襫黼瀬鎶軄鶛驕鳓哵眔鞹鰝 不认识的文字内容，不认识怎么办？找找拼音吧，查了一下发现有个汉字转拼音的工具：在线汉字转换拼音工具 (aies.cn)
用一下这个工具得到拼音：
bì jí dì dà kuò hào zhè jiù shì fǔ lài gē zhí jiē jiāo lè bā dà kuò hào 根据拼音得到flag：
BJD{淛匶襫黼瀬鎶軄鶛驕鳓哵} 0x2 cat_flag 下载附件，康康有什么有趣的内容：
附件内容
哇哦！一个gif图片，仔细康康图片，发现猫猫挺像二进制编码的，尝试写个小脚本解决一下：
import libnum cat_list=[ &amp;#34;01000010&amp;#34;, &amp;#34;01001010&amp;#34;, &amp;#34;01000100&amp;#34;, &amp;#34;01111011&amp;#34;, &amp;#34;01001101&amp;#34;, &amp;#34;00100001&amp;#34;, &amp;#34;01100001&amp;#34;, &amp;#34;00110000&amp;#34;, &amp;#34;01111110&amp;#34;, &amp;#34;01111101&amp;#34; ] cat_c = &amp;#34;&amp;#34;.join(cat_list) flag = libnum.n2s(int(cat_c,2)) print flag 运行脚本，得到flag：
BJD{M!a0~} 0x3 灵能精通-y1ng 来康康题目描述：</description>
            <content type="html"><![CDATA[<p>BJDCTF 2nd的密码学题目有8道题目可以尝试做一做，都挺有意思的。</p>
<h2 id="0x0-签到-y1ng">0x0 签到-y1ng</h2>
<p>来康康题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>welcome to BJDCTF
</span></span><span style="display:flex;"><span>1079822948
</span></span><span style="display:flex;"><span>QkpEe1czbGMwbWVfVDBfQkpEQ1RGfQ==
</span></span></code></pre></div><p>直接使用base64解码就好：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BJD{W3lc0me_T0_BJDCTF}
</span></span></code></pre></div><h2 id="0x1-老文盲了">0x1 老文盲了</h2>
<p>下载附件，康康附件有什么好玩的内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>罼雧締眔擴灝淛匶襫黼瀬鎶軄鶛驕鳓哵眔鞹鰝
</span></span></code></pre></div><p>不认识的文字内容，不认识怎么办？找找拼音吧，查了一下发现有个汉字转拼音的工具：<a href="http://www.aies.cn/pinyin.htm">在线汉字转换拼音工具 (aies.cn)</a></p>
<p>用一下这个工具得到拼音：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>bì jí dì dà kuò hào zhè jiù shì fǔ lài gē zhí jiē jiāo lè bā dà kuò hào 
</span></span></code></pre></div><p>根据拼音得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BJD{淛匶襫黼瀬鎶軄鶛驕鳓哵}
</span></span></code></pre></div><h2 id="0x2-cat_flag">0x2 cat_flag</h2>
<p>下载附件，康康有什么有趣的内容：</p>
<p><a href="/images/BJDCTF-2nd-CRYPTO_writeup/image-13.png"><img src="/images/BJDCTF-2nd-CRYPTO_writeup/image-13.png" alt="img"></a></p>
<p><a href="/images/BJDCTF-2nd-CRYPTO_writeup/cat.gif"><img src="/images/BJDCTF-2nd-CRYPTO_writeup/cat.gif" alt="img"></a></p>
<p>附件内容</p>
<p>哇哦！一个gif图片，仔细康康图片，发现猫猫挺像二进制编码的，尝试写个小脚本解决一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>cat_list<span style="color:#f92672">=</span>[
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;01000010&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;01001010&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;01000100&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;01111011&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;01001101&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;00100001&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;01100001&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;00110000&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;01111110&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;01111101&#34;</span>
</span></span><span style="display:flex;"><span>        ]
</span></span><span style="display:flex;"><span>cat_c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(cat_list)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(int(cat_c,<span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BJD{M!a0~}
</span></span></code></pre></div><h2 id="0x3-灵能精通-y1ng">0x3 灵能精通-y1ng</h2>
<p>来康康题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>身经百战的Y1ng已经达到崇高的武术境界，以自律克己来取代狂热者的战斗狂怒与传统的战斗形式。Y1ng所受的训练也进一步将他们的灵能强化到足以瓦解周遭的物质世界。借由集中这股力量，Y1ng能释放灵能能量风暴来摧毁敌人的心智、肉体与器械。
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>得到的 flag 建议用 flag{} 包上提交。
</span></span></code></pre></div><p>感觉题目描述挺有意思，看来出题人也是玩星际的，下载附件瞧一瞧吧！</p>
<p><a href="/images/BJDCTF-2nd-CRYPTO_writeup/jpg.jpg"><img src="/images/BJDCTF-2nd-CRYPTO_writeup/jpg.jpg" alt="img"></a>附件内容</p>
<blockquote>
<p>如果附件打不开，附件的文件名是jpg，这是个hint，可以尝试把附件的文件名扩展名修改为.jpg打开</p>
</blockquote>
<p>附件内容是个图片，看样子好像猪圈密码，不过应该是猪圈密码的变形，圣堂武士密码。</p>
<p>圣堂武士密码是什么呢？</p>
<p>圣堂武士密码无非就是猪圈密码的变种，查表就可以进行求解：</p>
<p><img src="/images/BJDCTF-2nd-CRYPTO_writeup/20200325180259577.jpg" alt="img"></p>
<p>圣堂武士密码表</p>
<p>根据圣堂武士密码的密码表进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>IMKNIGHTSTEMPLAR
</span></span></code></pre></div><p>得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{IMKNIGHTSTEMPLAR}
</span></span></code></pre></div><h2 id="0x4-燕言燕语-y1ng">0x4 燕言燕语-y1ng</h2>
<p>瞧一瞧题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>小燕子，穿花衣，年年春天来这里，我问燕子你为啥来，燕子说:
</span></span><span style="display:flex;"><span>79616E7A69205A4A517B78696C7A765F6971737375686F635F73757A6A677D20
</span></span></code></pre></div><p>看样子还是比较有趣的题目，燕子说的话像是hex编码，简单进行编码解码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>yanzi ZJQ{xilzv_iqssuhoc_suzjg} 
</span></span></code></pre></div><p>像是一个移位替换密码，而且还有密钥，自然而然就联想到多表替换的维吉尼亚密码，使用维吉尼亚密码进行解密，密钥是yanzi。解密得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BJD{yanzi_jiushige_shabi} 
</span></span></code></pre></div><h2 id="0x5-y1nglish-y1ng">0x5 Y1nglish-y1ng</h2>
<p>看看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Y1ng根据English居然独自发明了一门语言，就叫Y1nglish
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>明文都是可读的英文单词，flag如果提交失败，自己读一下，把错误的单词修正，再提交(某个地方的u和i不需要调换顺序，错误点不在那里)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>得到的 flag 建议用 flag{} 包上提交。
</span></span></code></pre></div><p>又是一道有意思的古典密码学题目，下载附件看一看吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Nkbaslk ds sef aslckdqdqst. Sef aslckdqdqst qo lzqtbw usf ufkoplkt zth oscpslsfko. Dpkfk zfk uqjk dwcko su dscqao qt dpqo aslckdqdqst, kzap su npqap qo jkfw mzoqa. Qu wse zfk qtdkfkodkh qt tkdnsfw okaefqdw, nkbaslk ds czfdqaqczdk. Bkd lk dkbb wse z odsfw.
</span></span><span style="display:flex;"><span>Q nzo pzjqtv hqttkf zd z fkodzefztd npkt Pzffw Odkkbk azlk qt, pk qo z Izcztkok ufsl Izczt med tsn pk qo tsd bqjqtv qt Izczt, lzwmk Pzffw qot&#39;d z Izcztkok tzlk med pk qo fkzbbw z Izcztkok. Pzffw nsfwkh qt z bznwkf&#39;o suuqak wkzfo zvs, med pk qo tsn nsfwqtv zd z mztw. Pk vkdo z vssh ozbzfw, med pk zbnzwo msffsno lstkw ufsl pqo ufqktho zth tkjkf czwo qd mzaw. Pzffw ozn lk zth azlk zthozdzd dpk ozlk dzmbk. Pk pzo tkjkf msffsnkh lstkw ufsl lk. Npqbk pk nzo kzdqtv, Q zowkh pql ds bkth lk &amp;2. Ds lw oefcfqok, pk vzjk lk dpk lstkw qllkhqzdkbw. &#39;Q pzjk tkjkf msfffsnkh ztw lstkw ufsl wse,&#39; Pzffw ozqh,&#39;os tsn wse azt czw usf lw hqttkf!&#39; Tsn q nqbb vqjk wse npzd wse nztd.
</span></span><span style="display:flex;"><span>MIH{cwdp0t_Mfed3_u0fa3_sF_geqcgeqc_ZQ_Af4aw}
</span></span></code></pre></div><p>扔到词频分析里面看一看有什么有意思的东西吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>	Welcome to our competition. Our competition is mainly for freshmen and sophomores. There are five types of topics in this competition, each of which is very basic. If you are interested in networy security, welcome to participate. Let me tell you a story. I was having dinner at a restaurant when Harry Steele came in, he is a Japanese from Japan but now he is not living in Japan, maybe Harry isn&#39;t a Japanese name but he is really a Japanese. Harry woryed in a lawyer&#39;s office years ago, but he is now worying at a bany. He gets a good salary, but he always borrows money from his friends and never pays it bacy. Harry saw me and came andsatat the same table. He has never borrowed money from me. While he was eating, I asyed him to lend me &amp;2. To my surprise, he gave me the money immediately. &#39;I have never borrrowed any money from you,&#39; Harry said,&#39;so now you can pay for my dinner!&#39; Now i will give you what you want. BJD{pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4cy}
</span></span></code></pre></div><p>看到flag了，这个会是flag吗？提交发现失败了，需要找找这flag中的错误单词呀！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BJD{pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4cy}
</span></span></code></pre></div><p>仔细看看，可能是“Cr4cy”单词出错了，应该是“Cr4ck”，将y改成k，提交flag就成功了！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BJD{pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4ck}
</span></span></code></pre></div><h2 id="0x6-rsa0">0x6 rsa0</h2>
<p>终于看到了满怀期待的RSA题目了，这个题目需要nc连接，打开kali使用nc连一下：</p>
<p><a href="/images/BJDCTF-2nd-CRYPTO_writeup/image-15.png"><img src="/images/BJDCTF-2nd-CRYPTO_writeup/image-15-1024x121.png" alt="img"></a>nc连接</p>
<p>nc获取了一些信息：</p>
<pre tabindex="0"><code>e=10477063

p+q=17797691537345386808732394196803681705577569713058967120949517816644062502139647331474144263789043199741290898466578874059252164582901136367451369351827816

p-q=1305460584852976150632619140303339956209228307006605810393373145443065968179582165859467446565684139103706614652868361938441145461112269668449569764472982

c=39163440507451196385175391692403807512116238503431942217244080791066873723780085527827581471431177375753278940397090368658088104095247010524149681791425756148064544080426058546466326660811194616137132601269623860143290910244742205045745875133012498997510445277485057284790297158770357940730856250397868755440

flag=??????
</code></pre><p>应该是一道简单的解方程题目，编写python脚本处理一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> sympy
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>e<span style="color:#f92672">=</span><span style="color:#ae81ff">10477063</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pq_add<span style="color:#f92672">=</span><span style="color:#ae81ff">17797691537345386808732394196803681705577569713058967120949517816644062502139647331474144263789043199741290898466578874059252164582901136367451369351827816</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pq_reduce<span style="color:#f92672">=</span><span style="color:#ae81ff">1305460584852976150632619140303339956209228307006605810393373145443065968179582165859467446565684139103706614652868361938441145461112269668449569764472982</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c<span style="color:#f92672">=</span><span style="color:#ae81ff">39163440507451196385175391692403807512116238503431942217244080791066873723780085527827581471431177375753278940397090368658088104095247010524149681791425756148064544080426058546466326660811194616137132601269623860143290910244742205045745875133012498997510445277485057284790297158770357940730856250397868755440</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;p&#39;</span>)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;q&#39;</span>)
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>solve([p<span style="color:#f92672">+</span>q<span style="color:#f92672">-</span>pq_add,p<span style="color:#f92672">-</span>q<span style="color:#f92672">-</span>pq_reduce],[p,q])
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> int(result[p])
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> int(result[q])
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{562f22b9-400d-4ec9-aa76-cd616aac90f1}
</span></span></code></pre></div><h2 id="0x7-rsa1">0x7 rsa1</h2>
<p>RSA题目，这道题目同样也需要nc进行一下连接才能看到信息，用kali连一下吧！</p>
<p><a href="/images/BJDCTF-2nd-CRYPTO_writeup/image-16.png"><img src="/images/BJDCTF-2nd-CRYPTO_writeup/image-16-1024x136.png" alt="img"></a>nc连接</p>
<p>通过nc连接可以得到如下信息：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>e=13978249
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p^2+q^2=151633530567840355748243871671727511189658909500927250886437120180748983135296331316827920586717252371861785059822420509109728958374451816184682503257816598163005301542586939209069221866722313318463885766603690164708951344417890956348605521584906780834058177779608801835165928975303416040686406630968929531010
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p-q=-2118796405660557026785910948566097381644078577714422876494681451389305041193569373390033403177726098952539178824903786390753214478292445023621601397654014
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c=21916668537159292929146888499738761128788996251113020794961311339328734967861189157533491528242915717785269949067916125251437612282270561594687073731637132301015100520285933737661576838469743738400472236913537499783613239148851084298950840310231212420378731161267913668383166553730465799427960831384019988540
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag=??????
</span></span></code></pre></div><p>还是比较类似的考察方法，依旧是解方程，编写一个小脚本求解吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> sympy
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>e<span style="color:#f92672">=</span><span style="color:#ae81ff">13978249</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>f1<span style="color:#f92672">=</span><span style="color:#ae81ff">151633530567840355748243871671727511189658909500927250886437120180748983135296331316827920586717252371861785059822420509109728958374451816184682503257816598163005301542586939209069221866722313318463885766603690164708951344417890956348605521584906780834058177779608801835165928975303416040686406630968929531010</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>f2<span style="color:#f92672">=-</span><span style="color:#ae81ff">2118796405660557026785910948566097381644078577714422876494681451389305041193569373390033403177726098952539178824903786390753214478292445023621601397654014</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c<span style="color:#f92672">=</span><span style="color:#ae81ff">21916668537159292929146888499738761128788996251113020794961311339328734967861189157533491528242915717785269949067916125251437612282270561594687073731637132301015100520285933737661576838469743738400472236913537499783613239148851084298950840310231212420378731161267913668383166553730465799427960831384019988540</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;p&#39;</span>)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;q&#39;</span>)
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>solve([p<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span>q<span style="color:#f92672">**</span><span style="color:#ae81ff">2</span><span style="color:#f92672">-</span>f1,p<span style="color:#f92672">-</span>q<span style="color:#f92672">-</span>f2],[p,q])
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print result</span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> int(result[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> int(result[<span style="color:#ae81ff">1</span>][<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print p,q</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{db0f7d6f-da5a-413b-8dfa-1a82a004c083}
</span></span></code></pre></div><p>BJD 2nd的Crypto题目全部求解，脑洞题目偏多，整体考察比较综合，难度相对较低。</p>
]]></content>
        </item>
        
        <item>
            <title>GKCTF2020 CRYPTO_writeup</title>
            <link>/posts/gkctf2020-crypto_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 16:53:12 +0800</pubDate>
            
            <guid>/posts/gkctf2020-crypto_writeup/</guid>
            <description>GKCTF2020的密码学题目相对而言比较简单，古典密码学题目偏多。而且密码学题目也只有四道题目
0x0 小学生的密码学 打开题目描述，查看题目描述内容：
e(x)=11x+6(mod26) 密文：welcylk （flag为base64形式） 看样子是仿射密码，直接逆就好了，写个python脚本解决吧：
import gmpy2 import string import base64 m = gmpy2.invert(11,26) table = string.ascii_lowercase # print table cipher = &amp;#34;welcylk&amp;#34; plainer = &amp;#34;&amp;#34; for i in cipher: x = table.index(i) j = (x-6)*m %26 # print j plainer += table[j] flag = &amp;#34;flag{&amp;#34;+base64.b64encode(plainer) +&amp;#34;}&amp;#34; print flag 运行脚本，得到flag：
flag{c29yY2VyeQ==} 0x1 汉字的秘密 题目描述：
你能看出汉字的奥秘吗？ 答案形式：flag{小写字母} 和汉字相关的密码，又是考察古典密码，估计是当铺密码
下载附件，发现附件是一个doc文件，查看附件内容：
王壮 夫工 王中 王夫 由由井 井人 夫中 夫夫 井王 土土 夫由 土夫 井中 士夫 王工 王人 土由 由口夫 看样子是当铺密码，没错了，写个脚本处理一下吧：</description>
            <content type="html"><![CDATA[<p>GKCTF2020的密码学题目相对而言比较简单，古典密码学题目偏多。而且密码学题目也只有四道题目</p>
<p><img src="/images/GKCTF2020-Crypto_writeup/WechatIMG1350.jpeg" alt="img"></p>
<h2 id="0x0-小学生的密码学">0x0 小学生的密码学</h2>
<p>打开题目描述，查看题目描述内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>e(x)=11x+6(mod26)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>密文：welcylk
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>（flag为base64形式）
</span></span></code></pre></div><p>看样子是仿射密码，直接逆就好了，写个python脚本解决吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> string
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">26</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>table <span style="color:#f92672">=</span> string<span style="color:#f92672">.</span>ascii_lowercase
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print table</span>
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;welcylk&#34;</span>
</span></span><span style="display:flex;"><span>plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> table<span style="color:#f92672">.</span>index(i)
</span></span><span style="display:flex;"><span>    j <span style="color:#f92672">=</span> (x<span style="color:#f92672">-</span><span style="color:#ae81ff">6</span>)<span style="color:#f92672">*</span>m <span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#    print j</span>
</span></span><span style="display:flex;"><span>    plainer <span style="color:#f92672">+=</span> table[j]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>base64<span style="color:#f92672">.</span>b64encode(plainer) <span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<pre tabindex="0"><code>flag{c29yY2VyeQ==}
</code></pre><h2 id="0x1-汉字的秘密">0x1 汉字的秘密</h2>
<p>题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>你能看出汉字的奥秘吗？ 答案形式：flag{小写字母}
</span></span></code></pre></div><p>和汉字相关的密码，又是考察古典密码，估计是当铺密码</p>
<p>下载附件，发现附件是一个doc文件，查看附件内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>王壮 夫工 王中 王夫 由由井 井人 夫中 夫夫 井王 土土 夫由
</span></span><span style="display:flex;"><span>土夫 井中 士夫 王工 王人 土由 由口夫
</span></span></code></pre></div><p>看样子是当铺密码，没错了，写个脚本处理一下吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>dh <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;田口由中人工大土士王夫井羊壮&#39;</span>
</span></span><span style="display:flex;"><span>ds <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;00123455567899&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;王壮 夫工 王中 王夫 由由井 井人 夫中 夫夫 井王 土土 夫由 土夫 井中 士夫 王工 王人 土由 由口夫&#39;</span>
</span></span><span style="display:flex;"><span>s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dh:
</span></span><span style="display:flex;"><span>        s <span style="color:#f92672">+=</span> ds[dh<span style="color:#f92672">.</span>index(i)]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        s <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39; &#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#print(s)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c_list <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,len(c_list)):
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">+=</span> chr(int(c_list[i])<span style="color:#f92672">+</span>i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> m<span style="color:#f92672">.</span>lower()
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{you_are_good}
</span></span></code></pre></div><hr>
<p>那什么是当铺密码呢？</p>
<p>当铺密码是一种很有意思的密码，专门用来加密数字的，不需要密钥，明文信息包含在加密后的密文中。</p>
<p>它通过一个汉字中隐藏的信息：笔画数，来将汉字和数字关联起来，将汉字定义为明文，将数字定义为密文，加密是将数字映射到对应笔画的汉字，解密是将汉字按照笔画映射回数字。</p>
<p>有很多汉字的笔画数是相同的，所以可能会有多个明文（汉字）对应同一个密文（数字），当然这个主要是看汉字笔画映射表的选择，如果映射表只准备了9个汉字，每种笔画有一个汉字对应则是一对一的，否则是一对多的。一对一的话有个缺点就是如果要加密的明文中有重复数字，比如33，转换为“飞马”比“三三”更难总结出规律，而这种没有秘钥的加密方式重要的就是隐藏自己的规律，所以一对多会更难被破译。[1]</p>
<p>当铺密码就是根据汉字的特点来设计的一种古典密码，还是挺有意思的，虽然不是很实用。</p>
<h2 id="0x2-babycrypto">0x2 babycrypto</h2>
<p>下载附件，查看附件内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span># n:0xb119849bc4523e49c6c038a509a74cda628d4ca0e4d0f28e677d57f3c3c7d0d876ef07d7581fe05a060546fedd7d061d3bc70d679b6c5dd9bc66c5bdad8f2ef898b1e785496c4989daf716a1c89d5c174da494eee7061bcb6d52cafa337fc2a7bba42c918bbd3104dff62ecc9d3704a455a6ce282de0d8129e26c840734ffd302bec5f0a66e0e6d00b5c50fa57c546cff9d7e6a978db77997082b4cb927df9847dfffef55138cb946c62c9f09b968033745b5b6868338c64819a8e92a827265f9abd409359a9471d8c3a2631b80e5b462ba42336717700998ff38536c2436e24ac19228cd2d7a909ead1a8494ff6c3a7151e888e115b68cc6a7a8c6cf8a6c005L
</span></span><span style="display:flex;"><span># e:65537
</span></span><span style="display:flex;"><span># enc:1422566584480199878714663051468143513667934216213366733442059106529451931078271460363335887054199577950679102659270179475911101747625120544429262334214483688332111552004535828182425152965223599160129610990036911146029170033592055768983427904835395850414634659565092191460875900237711597421272312032796440948509724492027247376113218678183443222364531669985128032971256792532015051829041230203814090194611041172775368357197854451201260927117792277559690205342515437625417792867692280849139537687763919269337822899746924269847694138899165820004160319118749298031065800530869562704671435709578921901495688124042302500361
</span></span><span style="display:flex;"><span># p&gt;&gt;128&lt;&lt;128:0xe4e4b390c1d201dae2c00a4669c0865cc5767bc444f5d310f3cfc75872d96feb89e556972c99ae20753e3314240a52df5dccd076a47c6b5d11b531b92d901b2b512aeb0b263bbfd624fe3d52e5e238beeb581ebe012b2f176a4ffd1e0d2aa8c4d3a2656573b727d4d3136513a931428b00000000000000000000000000000000L
</span></span></code></pre></div><p>RSA题目，考察的应该是p的高位泄露，应该是针对p的高位泄露进行设计的攻击算法来进行求解的。经查询发现，coppersmith算法应该是就是解决p高位泄露问题的解密算法，但是这个算法需要使用的开源数学工具sagemath。这里采用sagemath程序解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xb119849bc4523e49c6c038a509a74cda628d4ca0e4d0f28e677d57f3c3c7d0d876ef07d7581fe05a060546fedd7d061d3bc70d679b6c5dd9bc66c5bdad8f2ef898b1e785496c4989daf716a1c89d5c174da494eee7061bcb6d52cafa337fc2a7bba42c918bbd3104dff62ecc9d3704a455a6ce282de0d8129e26c840734ffd302bec5f0a66e0e6d00b5c50fa57c546cff9d7e6a978db77997082b4cb927df9847dfffef55138cb946c62c9f09b968033745b5b6868338c64819a8e92a827265f9abd409359a9471d8c3a2631b80e5b462ba42336717700998ff38536c2436e24ac19228cd2d7a909ead1a8494ff6c3a7151e888e115b68cc6a7a8c6cf8a6c005</span>L
</span></span><span style="display:flex;"><span>p_fake <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xe4e4b390c1d201dae2c00a4669c0865cc5767bc444f5d310f3cfc75872d96feb89e556972c99ae20753e3314240a52df5dccd076a47c6b5d11b531b92d901b2b512aeb0b263bbfd624fe3d52e5e238beeb581ebe012b2f176a4ffd1e0d2aa8c4d3a2656573b727d4d3136513a931428b00000000000000000000000000000000</span>L
</span></span><span style="display:flex;"><span>pbits <span style="color:#f92672">=</span> <span style="color:#ae81ff">1024</span>
</span></span><span style="display:flex;"><span>kbits <span style="color:#f92672">=</span> <span style="color:#ae81ff">128</span>
</span></span><span style="display:flex;"><span>pbar <span style="color:#f92672">=</span> p_fake <span style="color:#f92672">&amp;</span> (<span style="color:#ae81ff">2</span><span style="color:#f92672">^</span>pbits<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span><span style="color:#f92672">^</span>kbits)
</span></span><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;upper </span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> bits (of </span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> bits) is given&#34;</span> <span style="color:#f92672">%</span> (pbits<span style="color:#f92672">-</span>kbits, pbits))
</span></span><span style="display:flex;"><span>PR<span style="color:#f92672">.&lt;</span>x<span style="color:#f92672">&gt;</span> <span style="color:#f92672">=</span> PolynomialRing(Zmod(n))
</span></span><span style="display:flex;"><span>f <span style="color:#f92672">=</span> x <span style="color:#f92672">+</span> pbar
</span></span><span style="display:flex;"><span>x0 <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>small_roots(X<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span><span style="color:#f92672">^</span>kbits, beta<span style="color:#f92672">=</span><span style="color:#ae81ff">0.4</span>)[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>print(hex(int(x0 <span style="color:#f92672">+</span> pbar)))
</span></span></code></pre></div><p>使用sagemath运行可以得到p的数值：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>0xe4e4b390c1d201dae2c00a4669c0865cc5767bc444f5d310f3cfc75872d96feb89e556972c99ae20753e3314240a52df5dccd076a47c6b5d11b531b92d901b2b512aeb0b263bbfd624fe3d52e5e238beeb581ebe012b2f176a4ffd1e0d2aa8c4d3a2656573b727d4d3136513a931428b92826225b6d0e735440b613a8336ffa3
</span></span></code></pre></div><p>然后再使用一常规的RSA脚本进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xb119849bc4523e49c6c038a509a74cda628d4ca0e4d0f28e677d57f3c3c7d0d876ef07d7581fe05a060546fedd7d061d3bc70d679b6c5dd9bc66c5bdad8f2ef898b1e785496c4989daf716a1c89d5c174da494eee7061bcb6d52cafa337fc2a7bba42c918bbd3104dff62ecc9d3704a455a6ce282de0d8129e26c840734ffd302bec5f0a66e0e6d00b5c50fa57c546cff9d7e6a978db77997082b4cb927df9847dfffef55138cb946c62c9f09b968033745b5b6868338c64819a8e92a827265f9abd409359a9471d8c3a2631b80e5b462ba42336717700998ff38536c2436e24ac19228cd2d7a909ead1a8494ff6c3a7151e888e115b68cc6a7a8c6cf8a6c005</span>L
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">1422566584480199878714663051468143513667934216213366733442059106529451931078271460363335887054199577950679102659270179475911101747625120544429262334214483688332111552004535828182425152965223599160129610990036911146029170033592055768983427904835395850414634659565092191460875900237711597421272312032796440948509724492027247376113218678183443222364531669985128032971256792532015051829041230203814090194611041172775368357197854451201260927117792277559690205342515437625417792867692280849139537687763919269337822899746924269847694138899165820004160319118749298031065800530869562704671435709578921901495688124042302500361</span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xe4e4b390c1d201dae2c00a4669c0865cc5767bc444f5d310f3cfc75872d96feb89e556972c99ae20753e3314240a52df5dccd076a47c6b5d11b531b92d901b2b512aeb0b263bbfd624fe3d52e5e238beeb581ebe012b2f176a4ffd1e0d2aa8c4d3a2656573b727d4d3136513a931428b92826225b6d0e735440b613a8336ffa3</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span> p
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{3d0914a1-1e97-4822-a745-c7e20c5179b9}
</span></span></code></pre></div><h2 id="0x3-backdoor">0x3 Backdoor</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>p=k*M+(65537**a %M)
</span></span></code></pre></div><p>根据题目描述可以联想到ROCA漏洞，可以从论文中清晰地看到：</p>
<p><a href="/images/GKCTF2020-Crypto_writeup/image-12.png"><img src="/images/GKCTF2020-Crypto_writeup/image-12.png" alt="img"></a></p>
<p>正好符合这个题目的hint，这个题目的考察要点应该就是<a href="https://crocs.fi.muni.cz/public/papers/rsa_ccs17">ROCA的CVE漏洞</a>。这个CVE的利用再GitHub上面有现成的轮子，进行稍微修改一下就可以使用，这里给出解题的sagemath exp：[2]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>param <span style="color:#f92672">=</span> 
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">512</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;n&#34;</span>: <span style="color:#ae81ff">39</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;a_max&#34;</span>: <span style="color:#ae81ff">62</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;k_max&#34;</span>: <span style="color:#ae81ff">37</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;M&#34;</span>: <span style="color:#ae81ff">0x924cba6ae99dfa084537facc54948df0c23da044d8cabe0edd75bc6</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;M_prime&#34;</span>: <span style="color:#ae81ff">0x1b3e6c9433a7735fa5fc479ffe4027e13bea</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;m&#34;</span>: <span style="color:#ae81ff">5</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;t&#34;</span>: <span style="color:#ae81ff">6</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;c_a&#34;</span>: <span style="color:#ae81ff">0x80000</span>
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">1024</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;n&#34;</span>: <span style="color:#ae81ff">71</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;a_max&#34;</span>: <span style="color:#ae81ff">134</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;k_max&#34;</span>: <span style="color:#ae81ff">37</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;M&#34;</span>: <span style="color:#ae81ff">0x7923ba25d1263232812ac930e9683ac0b02180c32bae1d77aa950c4a18a4e660db8cc90384a394940593408f192de1a05e1b61673ac499416088382</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;M_prime&#34;</span>: <span style="color:#ae81ff">0x24683144f41188c2b1d6a217f81f12888e4e6513c43f3f60e72af8bd9728807483425d1e</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;m&#34;</span>: <span style="color:#ae81ff">4</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;t&#34;</span>: <span style="color:#ae81ff">5</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;c_a&#34;</span>: <span style="color:#ae81ff">0x40000000</span>
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">2048</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;n&#34;</span>: <span style="color:#ae81ff">126</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;a_max&#34;</span>: <span style="color:#ae81ff">434</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;k_max&#34;</span>: <span style="color:#ae81ff">53</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;M&#34;</span>: <span style="color:#ae81ff">0x7cda79f57f60a9b65478052f383ad7dadb714b4f4ac069997c7ff23d34d075fca08fdf20f95fbc5f0a981d65c3a3ee7ff74d769da52e948d6b0270dd736ef61fa99a54f80fb22091b055885dc22b9f17562778dfb2aeac87f51de339f71731d207c0af3244d35129feba028a48402247f4ba1d2b6d0755baff6</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;M_prime&#34;</span>: <span style="color:#ae81ff">0x16928dc3e47b44daf289a60e80e1fc6bd7648d7ef60d1890f3e0a9455efe0abdb7a748131413cebd2e36a76a355c1b664be462e115ac330f9c13344f8f3d1034a02c23396e6</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;m&#34;</span>: <span style="color:#ae81ff">7</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;t&#34;</span>: <span style="color:#ae81ff">8</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;c_a&#34;</span>: <span style="color:#ae81ff">0x400000000</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/coppersmith.sage</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">coppersmith_howgrave_univariate</span>(pol, N, beta, mm, tt, XX):
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    Coppersmith revisited by Howgrave-Graham
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    finds a solution if:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    * b|N, b &gt;= N^beta , 0 &lt; beta &lt;= 1
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    * |x| &lt; XX
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># init</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>    dd <span style="color:#f92672">=</span> pol<span style="color:#f92672">.</span>degree()
</span></span><span style="display:flex;"><span>    nn <span style="color:#f92672">=</span> dd <span style="color:#f92672">*</span> mm <span style="color:#f92672">+</span> tt
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># checks</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">&lt;</span> beta <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">1</span> :
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ValueError</span>(<span style="color:#e6db74">&#34;beta should belongs in (0, 1]&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> pol<span style="color:#f92672">.</span>is_monic():
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">raise</span> <span style="color:#a6e22e">ArithmeticError</span>(<span style="color:#e6db74">&#34;Polynomial must be monic.&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Coppersmith revisited algo for univariate</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">#</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># change ring of pol and x</span>
</span></span><span style="display:flex;"><span>    polZ <span style="color:#f92672">=</span> pol<span style="color:#f92672">.</span>change_ring(ZZ)
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> polZ<span style="color:#f92672">.</span>parent()<span style="color:#f92672">.</span>gen()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># compute polynomials</span>
</span></span><span style="display:flex;"><span>    gg <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ii <span style="color:#f92672">in</span> range(mm):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> jj <span style="color:#f92672">in</span> range(dd):
</span></span><span style="display:flex;"><span>            gg<span style="color:#f92672">.</span>append((x <span style="color:#f92672">*</span> XX)<span style="color:#f92672">**</span>jj <span style="color:#f92672">*</span> N<span style="color:#f92672">**</span>(mm <span style="color:#f92672">-</span> ii) <span style="color:#f92672">*</span> polZ(x <span style="color:#f92672">*</span> XX)<span style="color:#f92672">**</span>ii)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ii <span style="color:#f92672">in</span> range(tt):
</span></span><span style="display:flex;"><span>        gg<span style="color:#f92672">.</span>append((x <span style="color:#f92672">*</span> XX)<span style="color:#f92672">**</span>ii <span style="color:#f92672">*</span> polZ(x <span style="color:#f92672">*</span> XX)<span style="color:#f92672">**</span>mm)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># construct lattice B</span>
</span></span><span style="display:flex;"><span>    BB <span style="color:#f92672">=</span> Matrix(ZZ, nn)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ii <span style="color:#f92672">in</span> range(nn):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> jj <span style="color:#f92672">in</span> range(ii<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>            BB[ii, jj] <span style="color:#f92672">=</span> gg[ii][jj]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># LLL</span>
</span></span><span style="display:flex;"><span>    BB <span style="color:#f92672">=</span> BB<span style="color:#f92672">.</span>LLL(early_red<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>, use_siegel<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># transform shortest vector in polynomial    </span>
</span></span><span style="display:flex;"><span>    new_pol <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> ii <span style="color:#f92672">in</span> range(nn):
</span></span><span style="display:flex;"><span>        new_pol <span style="color:#f92672">+=</span> x<span style="color:#f92672">**</span>ii <span style="color:#f92672">*</span> BB[<span style="color:#ae81ff">0</span>, ii] <span style="color:#f92672">/</span> XX<span style="color:#f92672">**</span>ii
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># factor polynomial</span>
</span></span><span style="display:flex;"><span>    potential_roots <span style="color:#f92672">=</span> new_pol<span style="color:#f92672">.</span>roots()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> [i[<span style="color:#ae81ff">0</span>] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> potential_roots]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Top level of the attack, feeds the queue for the workers</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">roca</span>(N):
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Key is not always of perfect size, infer from size</span>
</span></span><span style="display:flex;"><span>  keylength <span style="color:#f92672">=</span> int(log(N, <span style="color:#ae81ff">2</span>))
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> keylength <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">1000</span> :
</span></span><span style="display:flex;"><span>    keylength <span style="color:#f92672">=</span> <span style="color:#ae81ff">512</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">elif</span>  keylength <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2000</span> :
</span></span><span style="display:flex;"><span>    keylength <span style="color:#f92672">=</span> <span style="color:#ae81ff">1024</span> 
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">elif</span> keylength <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">4000</span> :
</span></span><span style="display:flex;"><span>    keylength <span style="color:#f92672">=</span> <span style="color:#ae81ff">2048</span> 
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    keylength <span style="color:#f92672">=</span> <span style="color:#ae81ff">4096</span> 
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># bruteforce</span>
</span></span><span style="display:flex;"><span>  M_prime <span style="color:#f92672">=</span> param[keylength][<span style="color:#e6db74">&#39;M_prime&#39;</span>]
</span></span><span style="display:flex;"><span>  c_prime <span style="color:#f92672">=</span> discrete_log(N, Mod(<span style="color:#ae81ff">65537</span>, M_prime))
</span></span><span style="display:flex;"><span>  ord_prime <span style="color:#f92672">=</span> Zmod(M_prime)(<span style="color:#ae81ff">65537</span>)<span style="color:#f92672">.</span>multiplicative_order()
</span></span><span style="display:flex;"><span>  top <span style="color:#f92672">=</span> (c_prime <span style="color:#f92672">+</span> ord_prime)<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>  beta <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.5</span> 
</span></span><span style="display:flex;"><span>  mm <span style="color:#f92672">=</span> param[keylength][<span style="color:#e6db74">&#39;m&#39;</span>]
</span></span><span style="display:flex;"><span>  tt <span style="color:#f92672">=</span> param[keylength][<span style="color:#e6db74">&#39;t&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  XX <span style="color:#f92672">=</span> int((<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>pow(N, beta)) <span style="color:#f92672">/</span> M_prime) 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Bruteforce until p, q are found</span>
</span></span><span style="display:flex;"><span>  a_prime <span style="color:#f92672">=</span> floor(c_prime<span style="color:#f92672">/</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> a_prime <span style="color:#f92672">&lt;</span> top:
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Construct polynomial</span>
</span></span><span style="display:flex;"><span>      m_inv <span style="color:#f92672">=</span> int(inverse_mod(M_prime, N))
</span></span><span style="display:flex;"><span>      k_tmp <span style="color:#f92672">=</span> int(pow(<span style="color:#ae81ff">65537</span>, a_prime, M_prime))
</span></span><span style="display:flex;"><span>      known_part_pol <span style="color:#f92672">=</span> int(k_tmp <span style="color:#f92672">*</span> m_inv)
</span></span><span style="display:flex;"><span>      F <span style="color:#f92672">=</span> PolynomialRing(Zmod(N), implementation<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;NTL&#39;</span>, names<span style="color:#f92672">=</span>(<span style="color:#e6db74">&#39;x&#39;</span>,))
</span></span><span style="display:flex;"><span>      (x,) <span style="color:#f92672">=</span> F<span style="color:#f92672">.</span>_first_ngens(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>      pol <span style="color:#f92672">=</span> x <span style="color:#f92672">+</span> known_part_pol
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Get roots of polynomial using coppersmith</span>
</span></span><span style="display:flex;"><span>      roots <span style="color:#f92672">=</span> coppersmith_howgrave_univariate(pol, N, beta, mm, tt, XX)
</span></span><span style="display:flex;"><span>     
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># Check if roots are p, q</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> root <span style="color:#f92672">in</span> roots:
</span></span><span style="display:flex;"><span>        factor1 <span style="color:#f92672">=</span> k_tmp <span style="color:#f92672">+</span> abs(root) <span style="color:#f92672">*</span> M_prime
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> mod(N, factor1) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>          factor2 <span style="color:#f92672">=</span> N <span style="color:#f92672">//</span> factor1
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">return</span> int(factor1), int(factor2)
</span></span><span style="display:flex;"><span>      a_prime <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.PublicKey <span style="color:#f92672">import</span> RSA
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;./pub.pem&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    key <span style="color:#f92672">=</span> RSA<span style="color:#f92672">.</span>import_key(f<span style="color:#f92672">.</span>read())
</span></span><span style="display:flex;"><span>    e <span style="color:#f92672">=</span> key<span style="color:#f92672">.</span>e
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">=</span> key<span style="color:#f92672">.</span>n
</span></span><span style="display:flex;"><span>print(n)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;flag.enc&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    c <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(f<span style="color:#f92672">.</span>read())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>N <span style="color:#f92672">=</span> n
</span></span><span style="display:flex;"><span>print (<span style="color:#e6db74">&#34;[+] Factoring </span><span style="color:#e6db74">%i</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> N)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>factor1, factor2 <span style="color:#f92672">=</span> roca(N)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> factor1
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> factor2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print (<span style="color:#e6db74">&#34;[+] Found factors of N:&#34;</span>)
</span></span><span style="display:flex;"><span>print (<span style="color:#e6db74">&#34;[+] p =&#34;</span> , factor1)
</span></span><span style="display:flex;"><span>print (<span style="color:#e6db74">&#34;[+] q =&#34;</span> , factor2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">assert</span>(p <span style="color:#f92672">*</span> q <span style="color:#f92672">==</span> n)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> inverse(e, (q <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">*</span> (p <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> bytes_to_long(bytes<span style="color:#f92672">.</span>fromhex(str(c)[<span style="color:#ae81ff">2</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]))
</span></span><span style="display:flex;"><span>print(long_to_bytes(pow(c, d, n)))
</span></span></code></pre></div><p>使用sagemath运行得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{760958c9-cca9-458b-9cbe-ea07aa1668e4}
</span></span></code></pre></div><h2 id="参考">参考：</h2>
<ol>
<li><a href="https://www.cnblogs.com/cc11001100/p/9357263.html#:~:text=%E5%BD%93%E9%93%BA%E5%AF%86%E7%A0%81%E6%98%AF%E4%B8%80%E7%A7%8D%E5%BE%88,%E5%8A%A0%E5%AF%86%E5%90%8E%E7%9A%84%E5%AF%86%E6%96%87%E4%B8%AD%E3%80%82">当铺密码-博客园</a></li>
<li><a href="https://blog.chrisyy.top/2020/05/24/gkctf/">GKCTF2020 Crypto Writeup- Chrisyy&rsquo;s blog</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>BUUCTF CRYPTO (3) writeup</title>
            <link>/posts/buuctf-crypto-3_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 16:29:54 +0800</pubDate>
            
            <guid>/posts/buuctf-crypto-3_writeup/</guid>
            <description>同样的味道，同样的感觉，再看密码的世界！
BUUCTF
来审视一下，本次的题目：
题目列表
Morse Cipher Dangerous RSA basic rsa 达芬奇密码 Checkln BabyRSA rsa2 RSA5 密码学的心声 传感器 这是base？ rot Keyboard 这是什么 childRSA 也是同样满满的16道CTF题目，都是密码学题目哟！
0x0 Morse 打开附件，直接就是Morse密码密文：
-..../.----/-..../-..../-..../...--/--.../....-/-..../-..../--.../-.../...--/.----/--.../...--/..---/--.../--.../....-/...../..-./--.../...--/...--/-----/...../..-./...--/...--/...--/....-/...--/...../--.../----./--.../-.. 直接解密摩斯密码得到：
61666374667B317327745F73305F333435797D 得到的16进制密文，对密文进行解密：
成功得到flag：
afctf{1s&amp;#39;t_s0_345y} flag：afctf{1s&amp;rsquo;t_s0_345y}
0x1 Cipher 打开题目描述：
还能提示什么呢？公平的玩吧（密钥自己找） Dncnoqqfliqrpgeklwmppu 注意：得到的 flag 请包上 flag{} 提交, flag{小写字母} 看的非常懵，考察古典密码的题目，唯一的提示就是“公平的玩吧（密钥自己找）”，实在是找不到头绪，看了大佬的WP发现是playfair加密，在网上找到了一个在线工具可以求解playfair加密，这里就使用在线工具进行解密
得到解密结果：Itisnotaproblemhavefun
故得flag: flag{itisnotaproblemhavefun}
0x2 Dangerous RSA 应该是一道典型的RSA题目，直接下载附件
#n: 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793L #e: 0x3 #c:0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365 so,how to get the message? e的值非常小，这道RSA题目应该是考察低加密指数攻击的，直接上脚本：
import gmpy2 import libnum c = 0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365 n = 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793L e = 0x3 m = 0 i = 0 while 1: if(gmpy2.</description>
            <content type="html"><![CDATA[<p>同样的味道，同样的感觉，再看密码的世界！</p>
<p><img src="/images/BUUCTF-CRYPTO-3_writeup/image-136.png" alt="img">BUUCTF</p>
<p>来审视一下，本次的题目：</p>
<p><img src="/images/BUUCTF-CRYPTO-3_writeup/image-15.png" alt="img">题目列表</p>
<ol>
<li>Morse</li>
<li>Cipher</li>
<li>Dangerous RSA</li>
<li>basic rsa</li>
<li>达芬奇密码</li>
<li>Checkln</li>
<li>BabyRSA</li>
<li>rsa2</li>
<li>RSA5</li>
<li>密码学的心声</li>
<li>传感器</li>
<li>这是base？</li>
<li>rot</li>
<li>Keyboard</li>
<li>这是什么</li>
<li>childRSA</li>
</ol>
<p>也是同样满满的16道CTF题目，都是密码学题目哟！</p>
<h2 id="0x0-morse">0x0 Morse</h2>
<p>打开附件，直接就是Morse密码密文：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>-..../.----/-..../-..../-..../...--/--.../....-/-..../-..../--.../-.../...--/.----/--.../...--/..---/--.../--.../....-/...../..-./--.../...--/...--/-----/...../..-./...--/...--/...--/....-/...--/...../--.../----./--.../-..
</span></span></code></pre></div><p>直接解密摩斯密码得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>61666374667B317327745F73305F333435797D
</span></span></code></pre></div><p>得到的16进制密文，对密文进行解密：</p>
<p><img src="/images/BUUCTF-CRYPTO-3_writeup/image-6.png" alt="img"></p>
<p>成功得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>afctf{1s&#39;t_s0_345y}
</span></span></code></pre></div><p>flag：afctf{1s&rsquo;t_s0_345y}</p>
<h2 id="0x1-cipher">0x1 Cipher</h2>
<p>打开题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>还能提示什么呢？公平的玩吧（密钥自己找） Dncnoqqfliqrpgeklwmppu 注意：得到的 flag 请包上 flag{} 提交, flag{小写字母}
</span></span></code></pre></div><p>看的非常懵，考察古典密码的题目，唯一的提示就是“公平的玩吧（密钥自己找）”，实在是找不到头绪，看了大佬的WP发现是playfair加密，在网上找到了一个<a href="http://rumkin.com/tools/cipher/playfair.php">在线工具</a>可以求解playfair加密，这里就使用在线工具进行解密</p>
<p><img src="/images/BUUCTF-CRYPTO-3_writeup/image-7-1024x516.png" alt="img"></p>
<p>得到解密结果：Itisnotaproblemhavefun</p>
<p>故得flag: flag{itisnotaproblemhavefun}</p>
<h2 id="0x2-dangerous-rsa">0x2 Dangerous RSA</h2>
<p>应该是一道典型的RSA题目，直接下载附件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>#n:  0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793L
</span></span><span style="display:flex;"><span>#e:  0x3
</span></span><span style="display:flex;"><span>#c:0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365
</span></span><span style="display:flex;"><span>so,how to get the message?
</span></span></code></pre></div><p>e的值非常小，这道RSA题目应该是考察低加密指数攻击的，直接上脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793</span>L
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x3</span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(gmpy2<span style="color:#f92672">.</span>iroot(c<span style="color:#f92672">+</span>i<span style="color:#f92672">*</span>n,<span style="color:#ae81ff">3</span>)[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">==</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>        m <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>iroot(c<span style="color:#f92672">+</span>i<span style="color:#f92672">*</span>n,<span style="color:#ae81ff">3</span>)[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>    i <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag</p>
<p>flag：flag{25df8caf006ee5db94d48144c33b2c3b}</p>
<h2 id="0x3-basic-rsa">0x3 basic rsa</h2>
<p>应该是RSA加密算法的考察，直接看附件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> binascii <span style="color:#f92672">import</span> a2b_hex,b2a_hex
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;*****************&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">262248800182277040650192055439906580479</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">262854994239322828547925595487519915551</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65533</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> pow(int(b2a_hex(flag),<span style="color:#ae81ff">16</span>),e,n)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print c
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 27565231154623519221597938803435789010285480123476977081867877272451638645710</span>
</span></span></code></pre></div><p>一个非常简单的加密脚本，简单审计一下就能得到结果。这里使用一个脚本解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">27565231154623519221597938803435789010285480123476977081867877272451638645710</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65533</span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">262248800182277040650192055439906580479</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">262854994239322828547925595487519915551</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，获得flag</p>
<p>flag：flag{B4by_Rs4}</p>
<h2 id="0x4-达芬奇密码">0x4 达芬奇密码</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>达芬奇一直是一个有争议的画家，科学家。。。小明为了研究他，从网上找到了名画蒙娜丽莎，一天深夜，小明突然从蒙娜丽莎背后的天空中看到了一串神秘的数字。顺带告诉小明达芬奇家窗台上有一串数字是关键。小明千里迢迢找到了这串数字，请将这个送分题做出来，亲，包邮哦（答案是一串32位十进制数字） 注意：得到的 flag 请包上 flag{} 提交
</span></span></code></pre></div><p>题目应该是和达芬奇有关系，下载附件，查看附件内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>达芬奇隐藏在蒙娜丽莎中的数字列:1 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711 
</span></span><span style="display:flex;"><span>记录在达芬奇窗台口的神秘数字串:36968853882116725547342176952286
</span></span></code></pre></div><p>数字列非常像斐波那契数列，只不过是斐波那契数列进行了乱序而得到的结果。下面的密文应该是根据乱序的结果进行反向乱序得到明文，这里使用一个反乱序的脚本解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>True_c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309&#39;</span>
</span></span><span style="display:flex;"><span>False_c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;1 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711&#39;</span>
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;36968853882116725547342176952286&#39;</span>
</span></span><span style="display:flex;"><span>True_c <span style="color:#f92672">=</span> True_c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39; &#39;</span>)
</span></span><span style="display:flex;"><span>False_c <span style="color:#f92672">=</span> False_c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39; &#39;</span>)
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>]<span style="color:#f92672">*</span><span style="color:#ae81ff">32</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(cipher)):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span>(i <span style="color:#f92672">==</span> <span style="color:#ae81ff">24</span>):
</span></span><span style="display:flex;"><span>        index <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        index <span style="color:#f92672">=</span> True_c<span style="color:#f92672">.</span>index(False_c[i])
</span></span><span style="display:flex;"><span>    result[index] <span style="color:#f92672">=</span> cipher[i]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> result:
</span></span><span style="display:flex;"><span>    print(i,end<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>)
</span></span></code></pre></div><p>运行脚本，得到明文</p>
<p>37995588256861228614165223347687</p>
<p>故本题的flag：flag{37995588256861228614165223347687}</p>
<h2 id="0x5-checkln">0x5 Checkln</h2>
<p>直接下载附件，查看附件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>dikqTCpfRjA8fUBIMD5GNDkwMjNARkUwI0BFTg==
</span></span></code></pre></div><p>看样子，密文像是base64加密过的明文，首先尝试进行base64解密得到密文：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>v)L_F0&lt;}@H0&gt;F49023@FE0#@EN
</span></span></code></pre></div><p>如果对这对古典密码熟悉，看到这一段应该就可以识别出这是ROT47加密的密文，使用ROT47进行解密得到FLAG：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>GXY{Y0u_kNow_much_about_Rot}
</span></span></code></pre></div><p>成功得到flag：GXY{Y0u_kNow_much_about_Rot}</p>
<h2 id="0x6-babyrsa">0x6 BabyRSA</h2>
<p>RSA题目，直接下载附件，查看附件内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>p+q : 0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea
</span></span><span style="display:flex;"><span>(p+1)(q+1) : 0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740
</span></span><span style="display:flex;"><span>e : 0xe6b1bee47bd63f615c7d0a43c529d219
</span></span><span style="display:flex;"><span>d : 0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5
</span></span><span style="display:flex;"><span>enc_flag : 0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a
</span></span></code></pre></div><p>应该是解方程的题目，使用python的sympy库或者sagemath库进行方程求解，这里使用一个脚本就行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> sympy
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sum_pq <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea</span>
</span></span><span style="display:flex;"><span>phi_r <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xe6b1bee47bd63f615c7d0a43c529d219</span>
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5</span>
</span></span><span style="display:flex;"><span>enc_flag <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9a</span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;p&#39;</span>)
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>Symbol(<span style="color:#e6db74">&#39;q&#39;</span>)
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> sympy<span style="color:#f92672">.</span>solve([p<span style="color:#f92672">+</span>q<span style="color:#f92672">-</span>sum_pq,(p<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">-</span>phi_r])
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> int(result[<span style="color:#ae81ff">0</span>][q])
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> int(result[<span style="color:#ae81ff">0</span>][p])
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(enc_flag,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{cc7490e-78ab-11e9-b422-8ba97e5da1fd}
</span></span></code></pre></div><p>flag:flag{cc7490e-78ab-11e9-b422-8ba97e5da1fd}</p>
<h2 id="0x7-rsa2">0x7 rsa2</h2>
<p>RSA题目，看看这次又有什么花样吧！直接下载附件，查看附件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>N <span style="color:#f92672">=</span> <span style="color:#ae81ff">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span> <span style="color:#f92672">+</span> hashlib<span style="color:#f92672">.</span>md5(hex(d))<span style="color:#f92672">.</span>hexdigest() <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;}&#34;</span>
</span></span></code></pre></div><p>附件是一个python程序，简单审计一下，发现e的数值有不太正常，有些过大。应该是RSA低解密指数，采用<a href="https://github.com/pablocelayes/rsa-wiener-attack">rsa-wiener-attack</a>算法可以攻击得到d，拉一些github上的rsa-wiener-attack仓库，使用一个脚本解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> RSAwienerHacker
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>test_d <span style="color:#f92672">=</span>  RSAwienerHacker<span style="color:#f92672">.</span>hack_RSA(e, n)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> test_d:
</span></span><span style="display:flex;"><span>    d <span style="color:#f92672">=</span> test_d
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span> <span style="color:#f92672">+</span> hashlib<span style="color:#f92672">.</span>md5(hex(d))<span style="color:#f92672">.</span>hexdigest()<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{47bf28da384590448e0b0d23909a25a4}
</span></span></code></pre></div><p>flag:flag{47bf28da384590448e0b0d23909a25a4}</p>
<h2 id="0x8-rsa5">0x8 RSA5</h2>
<p>RSA题目，看看这次又有什么有意思的变化，下载附件，查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>m <span style="color:#f92672">=</span> xxxxxxxx
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">==========</span> n c <span style="color:#f92672">==========</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span>
</span></span></code></pre></div><p>观察附件中的数据信息，发现有很多组n，c数据，应该是广播攻击。低加密指数广播攻击，是采用欧几里得算法对多组数据进行求解。这里使用一个脚本求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span>
</span></span><span style="display:flex;"><span>c1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span>
</span></span><span style="display:flex;"><span>c2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span>
</span></span><span style="display:flex;"><span>c3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span>
</span></span><span style="display:flex;"><span>c4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span>
</span></span><span style="display:flex;"><span>c5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n6 <span style="color:#f92672">=</span> <span style="color:#ae81ff">21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span>
</span></span><span style="display:flex;"><span>c6 <span style="color:#f92672">=</span> <span style="color:#ae81ff">20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span>
</span></span><span style="display:flex;"><span>c7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span>
</span></span><span style="display:flex;"><span>c8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span>
</span></span><span style="display:flex;"><span>c9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span>
</span></span><span style="display:flex;"><span>c10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n11 <span style="color:#f92672">=</span> <span style="color:#ae81ff">22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span>
</span></span><span style="display:flex;"><span>c11 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span>
</span></span><span style="display:flex;"><span>c12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span>
</span></span><span style="display:flex;"><span>c13 <span style="color:#f92672">=</span> <span style="color:#ae81ff">14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n14 <span style="color:#f92672">=</span> <span style="color:#ae81ff">27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span>
</span></span><span style="display:flex;"><span>c14 <span style="color:#f92672">=</span> <span style="color:#ae81ff">3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n15 <span style="color:#f92672">=</span> <span style="color:#ae81ff">27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span>
</span></span><span style="display:flex;"><span>c15 <span style="color:#f92672">=</span> <span style="color:#ae81ff">14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n16 <span style="color:#f92672">=</span> <span style="color:#ae81ff">25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span>
</span></span><span style="display:flex;"><span>c16 <span style="color:#f92672">=</span> <span style="color:#ae81ff">17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n17 <span style="color:#f92672">=</span> <span style="color:#ae81ff">23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span>
</span></span><span style="display:flex;"><span>c17 <span style="color:#f92672">=</span> <span style="color:#ae81ff">10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n18 <span style="color:#f92672">=</span> <span style="color:#ae81ff">19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span>
</span></span><span style="display:flex;"><span>c18 <span style="color:#f92672">=</span> <span style="color:#ae81ff">3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n19 <span style="color:#f92672">=</span> <span style="color:#ae81ff">19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span>
</span></span><span style="display:flex;"><span>c19 <span style="color:#f92672">=</span> <span style="color:#ae81ff">6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n20 <span style="color:#f92672">=</span> <span style="color:#ae81ff">26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span>
</span></span><span style="display:flex;"><span>c20 <span style="color:#f92672">=</span> <span style="color:#ae81ff">386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> [n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17,
</span></span><span style="display:flex;"><span>        n18, n19, n20]
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17,
</span></span><span style="display:flex;"><span>        c18, c19, c20]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(n)):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(n)):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(i<span style="color:#f92672">!=</span>j):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span>(gmpy2<span style="color:#f92672">.</span>gcd(n[i],n[j])<span style="color:#f92672">!=</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>                p <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>gcd(n[i],n[j])
</span></span><span style="display:flex;"><span>                q <span style="color:#f92672">=</span> n[i] <span style="color:#f92672">//</span> p
</span></span><span style="display:flex;"><span>                d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e , (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>                m <span style="color:#f92672">=</span> pow(c[i],d,n[i])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>n2s(int(m))
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{abdcbe5fd94e23b3de429223ab9c2fdf}
</span></span></code></pre></div><p>flag:flag{abdcbe5fd94e23b3de429223ab9c2fdf}</p>
<h2 id="0x9-密码学的心声">0x9 密码学的心声</h2>
<p>看题目应该是挺有意思的题目，看看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>二战时期，某国军官与一个音乐家情妇相好，然而自从那时起，他屡战屡败，敌人似乎料事如神。他也有怀疑过他的情妇，但是他经过24小时观察他的情妇，发现她每天都只是作曲，然后弹奏给战地电台，为士兵们鼓气，并未有任何逾越。那么，间谍到底是谁？这张曲谱是否有猫腻？ (答案为一个明文字符串，提交获得的有意义语句通顺字符串即可) 注意：得到的 flag 请包上 flag{} 提交
</span></span></code></pre></div><p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-3_writeup/image-8-723x1024.png" alt="img">附件内容</p>
<p>发现，附件是一个图片，解密的提示和思维应该就藏在图片里面</p>
<p>大致分析一下，图片提供的照片，可以知道是ASCII编码，进制是八进制，八进制一般而言是三个一组，数字以八进制为一组。这样思路就非常明确了，编写Python脚本直接求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;111 114 157 166 145 123 145 143 165 162 151 164 171 126 145 162 171 115 165 143 150&#34;</span>
</span></span><span style="display:flex;"><span>c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">+=</span> chr(int(i,<span style="color:#ae81ff">8</span>))
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>m<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{ILoveSecurityVeryMuch}
</span></span></code></pre></div><p>flag:flag{ILoveSecurityVeryMuch}</p>
<h2 id="0xa-传感器">0xA 传感器</h2>
<p>直接下载附件，查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>5555555595555A65556AA696AA6666666955
</span></span><span style="display:flex;"><span>这是某压力传感器无线数据包解调后但未解码的报文(hex)
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>已知其ID为0xFED31F，请继续将报文完整解码，提交hex。
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>提示1：曼联
</span></span></code></pre></div><p>提示是曼联，又是考察古典密码的题目，真是头疼。经过查询发现是曼彻斯特编码，在wiki百科上面找到曼彻斯特编码的相关信息：</p>
<p>在电信与数据存储中, 曼彻斯特编码（Manchester coding），又称自同步码、相位编码（phase encoding，PE），能够用信号的变化来保持发送设备和接收设备之间的同步。它用电压的变化来分辨0和1，从高电平到低电平的跳变代表1，而从低电平到高电平的跳变代表0(as per G.E.Tomas编码方式)。从高电平到低电平的跳变代表0，而从低电平到高电平的跳变代表1(as per IEEE 802.3编码方式)，下方有所展示。信号的保持不会超过一个比特位的时间间隔。即使是0或1的序列，信号也将在每个时间间隔的中间发生跳变。这种跳变将允许接收设备的时钟与发送设备的时钟保持一致。[1]</p>
<p><img src="/images/BUUCTF-CRYPTO-3_writeup/image.png" alt="img"></p>
<p>根据曼彻斯特编码的原理进行归纳，得到一个异或数据表</p>
<p><img src="/images/BUUCTF-CRYPTO-3_writeup/image-9.png" alt="img"></p>
<p>这个异或数据表应该就是曼彻斯特编码的具体原理，根据这个原理编写python脚本进行解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;5555555595555A65556AA696AA6666666955&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypto</span>(cipher):
</span></span><span style="display:flex;"><span>    tmp<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(cipher)):
</span></span><span style="display:flex;"><span>        a<span style="color:#f92672">=</span>bin(eval(<span style="color:#e6db74">&#39;0x&#39;</span><span style="color:#f92672">+</span>cipher[i]))[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>zfill(<span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>        tmp<span style="color:#f92672">=</span>tmp<span style="color:#f92672">+</span>a[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span>a[<span style="color:#ae81ff">3</span>]
</span></span><span style="display:flex;"><span><span style="color:#75715e">#        print(tmp)</span>
</span></span><span style="display:flex;"><span>    plain <span style="color:#f92672">=</span> [ hex(int(tmp[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>][::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>],<span style="color:#ae81ff">2</span>))[<span style="color:#ae81ff">2</span>:] <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,len(tmp),<span style="color:#ae81ff">8</span>)]
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span>  <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(plain)<span style="color:#f92672">.</span>upper()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> m
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>decrypto(cipher)<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
</span></span><span style="display:flex;"><span>    print flag
</span></span></code></pre></div><p>运行脚本，得到flag</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{FFFFFED31F645055F9}
</span></span></code></pre></div><p>flag:flag{FFFFFED31F645055F9}</p>
<h2 id="0xb-这是base">0xB 这是base？</h2>
<p>应该是考察base的，直接下载附件查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>dict:{0: &#39;J&#39;, 1: &#39;K&#39;, 2: &#39;L&#39;, 3: &#39;M&#39;, 4: &#39;N&#39;, 5: &#39;O&#39;, 6: &#39;x&#39;, 7: &#39;y&#39;, 8: &#39;U&#39;, 9: &#39;V&#39;, 10: &#39;z&#39;, 11: &#39;A&#39;, 12: &#39;B&#39;, 13: &#39;C&#39;, 14: &#39;D&#39;, 15: &#39;E&#39;, 16: &#39;F&#39;, 17: &#39;G&#39;, 18: &#39;H&#39;, 19: &#39;7&#39;, 20: &#39;8&#39;, 21: &#39;9&#39;, 22: &#39;P&#39;, 23: &#39;Q&#39;, 24: &#39;I&#39;, 25: &#39;a&#39;, 26: &#39;b&#39;, 27: &#39;c&#39;, 28: &#39;d&#39;, 29: &#39;e&#39;, 30: &#39;f&#39;, 31: &#39;g&#39;, 32: &#39;h&#39;, 33: &#39;i&#39;, 34: &#39;j&#39;, 35: &#39;k&#39;, 36: &#39;l&#39;, 37: &#39;m&#39;, 38: &#39;W&#39;, 39: &#39;X&#39;, 40: &#39;Y&#39;, 41: &#39;Z&#39;, 42: &#39;0&#39;, 43: &#39;1&#39;, 44: &#39;2&#39;, 45: &#39;3&#39;, 46: &#39;4&#39;, 47: &#39;5&#39;, 48: &#39;6&#39;, 49: &#39;R&#39;, 50: &#39;S&#39;, 51: &#39;T&#39;, 52: &#39;n&#39;, 53: &#39;o&#39;, 54: &#39;p&#39;, 55: &#39;q&#39;, 56: &#39;r&#39;, 57: &#39;s&#39;, 58: &#39;t&#39;, 59: &#39;u&#39;, 60: &#39;v&#39;, 61: &#39;w&#39;, 62: &#39;+&#39;, 63: &#39;/&#39;, 64: &#39;=&#39;}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>chipertext:
</span></span><span style="display:flex;"><span>FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw
</span></span></code></pre></div><p>给出了base64的编码表，但不是标准的base64编码表，首先需要了解base标准的编码表：</p>
<p><img src="/images/BUUCTF-CRYPTO-3_writeup/image-10.png" alt="img">标准的base64表</p>
<p>给出的字典数据和标准的base64表有很大的出出入，需要python脚本简单处理一下转换为标准的base64编码格式，然后再使用base64进行解密。python脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>file_dict <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>: <span style="color:#e6db74">&#39;J&#39;</span>, <span style="color:#ae81ff">1</span>: <span style="color:#e6db74">&#39;K&#39;</span>, <span style="color:#ae81ff">2</span>: <span style="color:#e6db74">&#39;L&#39;</span>, <span style="color:#ae81ff">3</span>: <span style="color:#e6db74">&#39;M&#39;</span>, <span style="color:#ae81ff">4</span>: <span style="color:#e6db74">&#39;N&#39;</span>, <span style="color:#ae81ff">5</span>: <span style="color:#e6db74">&#39;O&#39;</span>, <span style="color:#ae81ff">6</span>: <span style="color:#e6db74">&#39;x&#39;</span>, <span style="color:#ae81ff">7</span>: <span style="color:#e6db74">&#39;y&#39;</span>, <span style="color:#ae81ff">8</span>: <span style="color:#e6db74">&#39;U&#39;</span>, <span style="color:#ae81ff">9</span>: <span style="color:#e6db74">&#39;V&#39;</span>, <span style="color:#ae81ff">10</span>: <span style="color:#e6db74">&#39;z&#39;</span>, <span style="color:#ae81ff">11</span>: <span style="color:#e6db74">&#39;A&#39;</span>, <span style="color:#ae81ff">12</span>: <span style="color:#e6db74">&#39;B&#39;</span>, <span style="color:#ae81ff">13</span>: <span style="color:#e6db74">&#39;C&#39;</span>, <span style="color:#ae81ff">14</span>: <span style="color:#e6db74">&#39;D&#39;</span>, <span style="color:#ae81ff">15</span>: <span style="color:#e6db74">&#39;E&#39;</span>, <span style="color:#ae81ff">16</span>: <span style="color:#e6db74">&#39;F&#39;</span>, <span style="color:#ae81ff">17</span>: <span style="color:#e6db74">&#39;G&#39;</span>, <span style="color:#ae81ff">18</span>: <span style="color:#e6db74">&#39;H&#39;</span>, <span style="color:#ae81ff">19</span>: <span style="color:#e6db74">&#39;7&#39;</span>, <span style="color:#ae81ff">20</span>: <span style="color:#e6db74">&#39;8&#39;</span>, <span style="color:#ae81ff">21</span>: <span style="color:#e6db74">&#39;9&#39;</span>, <span style="color:#ae81ff">22</span>: <span style="color:#e6db74">&#39;P&#39;</span>, <span style="color:#ae81ff">23</span>: <span style="color:#e6db74">&#39;Q&#39;</span>, <span style="color:#ae81ff">24</span>: <span style="color:#e6db74">&#39;I&#39;</span>, <span style="color:#ae81ff">25</span>: <span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#ae81ff">26</span>: <span style="color:#e6db74">&#39;b&#39;</span>, <span style="color:#ae81ff">27</span>: <span style="color:#e6db74">&#39;c&#39;</span>, <span style="color:#ae81ff">28</span>: <span style="color:#e6db74">&#39;d&#39;</span>, <span style="color:#ae81ff">29</span>: <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#ae81ff">30</span>: <span style="color:#e6db74">&#39;f&#39;</span>, <span style="color:#ae81ff">31</span>: <span style="color:#e6db74">&#39;g&#39;</span>, <span style="color:#ae81ff">32</span>: <span style="color:#e6db74">&#39;h&#39;</span>, <span style="color:#ae81ff">33</span>: <span style="color:#e6db74">&#39;i&#39;</span>, <span style="color:#ae81ff">34</span>: <span style="color:#e6db74">&#39;j&#39;</span>, <span style="color:#ae81ff">35</span>: <span style="color:#e6db74">&#39;k&#39;</span>, <span style="color:#ae81ff">36</span>: <span style="color:#e6db74">&#39;l&#39;</span>, <span style="color:#ae81ff">37</span>: <span style="color:#e6db74">&#39;m&#39;</span>, <span style="color:#ae81ff">38</span>: <span style="color:#e6db74">&#39;W&#39;</span>, <span style="color:#ae81ff">39</span>: <span style="color:#e6db74">&#39;X&#39;</span>, <span style="color:#ae81ff">40</span>: <span style="color:#e6db74">&#39;Y&#39;</span>, <span style="color:#ae81ff">41</span>: <span style="color:#e6db74">&#39;Z&#39;</span>, <span style="color:#ae81ff">42</span>: <span style="color:#e6db74">&#39;0&#39;</span>, <span style="color:#ae81ff">43</span>: <span style="color:#e6db74">&#39;1&#39;</span>, <span style="color:#ae81ff">44</span>: <span style="color:#e6db74">&#39;2&#39;</span>, <span style="color:#ae81ff">45</span>: <span style="color:#e6db74">&#39;3&#39;</span>, <span style="color:#ae81ff">46</span>: <span style="color:#e6db74">&#39;4&#39;</span>, <span style="color:#ae81ff">47</span>: <span style="color:#e6db74">&#39;5&#39;</span>, <span style="color:#ae81ff">48</span>: <span style="color:#e6db74">&#39;6&#39;</span>, <span style="color:#ae81ff">49</span>: <span style="color:#e6db74">&#39;R&#39;</span>, <span style="color:#ae81ff">50</span>: <span style="color:#e6db74">&#39;S&#39;</span>, <span style="color:#ae81ff">51</span>: <span style="color:#e6db74">&#39;T&#39;</span>, <span style="color:#ae81ff">52</span>: <span style="color:#e6db74">&#39;n&#39;</span>, <span style="color:#ae81ff">53</span>: <span style="color:#e6db74">&#39;o&#39;</span>, <span style="color:#ae81ff">54</span>: <span style="color:#e6db74">&#39;p&#39;</span>, <span style="color:#ae81ff">55</span>: <span style="color:#e6db74">&#39;q&#39;</span>, <span style="color:#ae81ff">56</span>: <span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#ae81ff">57</span>: <span style="color:#e6db74">&#39;s&#39;</span>, <span style="color:#ae81ff">58</span>: <span style="color:#e6db74">&#39;t&#39;</span>, <span style="color:#ae81ff">59</span>: <span style="color:#e6db74">&#39;u&#39;</span>, <span style="color:#ae81ff">60</span>: <span style="color:#e6db74">&#39;v&#39;</span>, <span style="color:#ae81ff">61</span>: <span style="color:#e6db74">&#39;w&#39;</span>, <span style="color:#ae81ff">62</span>: <span style="color:#e6db74">&#39;+&#39;</span>, <span style="color:#ae81ff">63</span>: <span style="color:#e6db74">&#39;/&#39;</span>, <span style="color:#ae81ff">64</span>: <span style="color:#e6db74">&#39;=&#39;</span>}
</span></span><span style="display:flex;"><span>base64_dict <span style="color:#f92672">=</span>{}
</span></span><span style="display:flex;"><span>index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> (range(<span style="color:#ae81ff">65</span>,<span style="color:#ae81ff">91</span>) <span style="color:#f92672">+</span> range(<span style="color:#ae81ff">97</span>,<span style="color:#ae81ff">123</span>)<span style="color:#f92672">+</span>range(<span style="color:#ae81ff">48</span>,<span style="color:#ae81ff">58</span>)<span style="color:#f92672">+</span>range(<span style="color:#ae81ff">43</span>,<span style="color:#ae81ff">44</span>)<span style="color:#f92672">+</span>range(<span style="color:#ae81ff">47</span>,<span style="color:#ae81ff">48</span>)):
</span></span><span style="display:flex;"><span>    base64_dict[index] <span style="color:#f92672">=</span> chr(i)
</span></span><span style="display:flex;"><span>    index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>chipertext <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw&#34;</span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(chipertext)):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">64</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span>(file_dict[j] <span style="color:#f92672">==</span> chipertext[i]):
</span></span><span style="display:flex;"><span>            m <span style="color:#f92672">+=</span> base64_dict[j]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>BJD{D0_Y0u_kNoW_Th1s_b4se_map}
</span></span></code></pre></div><p>flag:flag{D0_Y0u_kNoW_Th1s_b4se_map}</p>
<h2 id="0xc-rot">0xC rot</h2>
<p>直接下载附件，查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>破解下面的密文：
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>83 89 78 84 45 86 96 45 115 121 110 116 136 132 132 132 108 128 117 118 134 110 123 111 110 127 108 112 124 122 108 118 128 108 131 114 127 134 108 116 124 124 113 108 76 76 76 76 138 23 90 81 66 71 64 69 114 65 112 64 66 63 69 61 70 114 62 66 61 62 69 67 70 63 61 110 110 112 64 68 62 70 61 112 111 112
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag格式flag{}
</span></span></code></pre></div><p>看密文应该是ASCII码，结合题目应该是rot加密，应该是比较常规的rot13加密需要对数据进行-13操作，因为观察一下就可以非常清楚地发现有些ASCII数字超过123，可显示字符，因此可以推断是rot13加密。这里先用一个脚本处理一下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;83 89 78 84 45 86 96 45 115 121 110 116 136 132 132 132 108 128 117 118 134 110 123 111 110 127 108 112 124 122 108 118 128 108 131 114 127 134 108 116 124 124 113 108 76 76 76 76 138 23 90 81 66 71 64 69 114 65 112 64 66 63 69 61 70 114 62 66 61 62 69 67 70 63 61 110 110 112 64 68 62 70 61 112 111 112&#34;</span>
</span></span><span style="display:flex;"><span>c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>c_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
</span></span><span style="display:flex;"><span>    c_str <span style="color:#f92672">+=</span> chr(int(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print c_str
</span></span></code></pre></div><p>运行脚本，得到一个残缺的flag和MD5信息：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>FLAG IS flag{www_shiyanbar_com_is_very_good_????}
</span></span><span style="display:flex;"><span>MD5:38e4c352809e150186920aac37190cbc
</span></span></code></pre></div><p>MD5值应该是校验flag信息的，需要对MD5进行爆破来得到真实的flag，这里使用一个总的python脚本来求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;83 89 78 84 45 86 96 45 115 121 110 116 136 132 132 132 108 128 117 118 134 110 123 111 110 127 108 112 124 122 108 118 128 108 131 114 127 134 108 116 124 124 113 108 76 76 76 76 138 23 90 81 66 71 64 69 114 65 112 64 66 63 69 61 70 114 62 66 61 62 69 67 70 63 61 110 110 112 64 68 62 70 61 112 111 112&#34;</span>
</span></span><span style="display:flex;"><span>c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>c_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
</span></span><span style="display:flex;"><span>    c_str <span style="color:#f92672">+=</span> chr(int(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print c_str</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print c_str.find(&#34;{&#34;)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print c_str.find(&#34;}&#34;)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print c_str.find(&#34;3&#34;)</span>
</span></span><span style="display:flex;"><span>little_flag <span style="color:#f92672">=</span> c_str[<span style="color:#ae81ff">8</span>:<span style="color:#ae81ff">49</span>]
</span></span><span style="display:flex;"><span>flag_md5 <span style="color:#f92672">=</span> c_str[<span style="color:#ae81ff">54</span>:]
</span></span><span style="display:flex;"><span>flag_str <span style="color:#f92672">=</span> little_flag[:<span style="color:#f92672">-</span><span style="color:#ae81ff">5</span>]
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print flag_str</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">49</span>,<span style="color:#ae81ff">123</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">49</span>,<span style="color:#ae81ff">123</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">49</span>,<span style="color:#ae81ff">123</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> l <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">49</span>,<span style="color:#ae81ff">123</span>):
</span></span><span style="display:flex;"><span>                result <span style="color:#f92672">=</span> flag_str <span style="color:#f92672">+</span> chr(i) <span style="color:#f92672">+</span> chr(j) <span style="color:#f92672">+</span> chr(k) <span style="color:#f92672">+</span> chr(l) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;}&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> hashlib<span style="color:#f92672">.</span>md5(result)<span style="color:#f92672">.</span>hexdigest() <span style="color:#f92672">==</span> flag_md5:
</span></span><span style="display:flex;"><span>                    flag <span style="color:#f92672">=</span> result
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{www_shiyanbar_com_is_very_good_@8Mu}
</span></span></code></pre></div><p>flag:flag{www_shiyanbar_com_is_very_good_@8Mu}</p>
<h2 id="0xd-keyboard">0xD Keyboard</h2>
<p>会是键盘密码吗？下载附件，瞧一瞧吧！</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee
</span></span></code></pre></div><p>果真是键盘密码，出现的字符都是26键键盘上面那一排对应的字符，而字符对应0-9的数字正好又对应着九键键盘的数字，而出现的次数代表九键键盘一个键的第几个字符，这样解密思路就非常流畅了。</p>
<p><img src="/images/BUUCTF-CRYPTO-3_writeup/l93LrR.png" alt="img"></p>
<p>根据图示内容编写一个python脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>str_26 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;pqwertyuio&#34;</span>
</span></span><span style="display:flex;"><span>str_9 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;abc def ghi jkl mno pqrs tuv wxyz&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>list_9 <span style="color:#f92672">=</span> str_9<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>dict_26 <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>dict_9 <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>index_26 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>index_9 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> str_26:
</span></span><span style="display:flex;"><span>    dict_26[index_26] <span style="color:#f92672">=</span> i
</span></span><span style="display:flex;"><span>    index_26 <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> i <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span>:
</span></span><span style="display:flex;"><span>        dict_9[i] <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        dict_9[i] <span style="color:#f92672">=</span> list_9[index_9]
</span></span><span style="display:flex;"><span>        index_9 <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print dict_26</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print dict_9</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ooo yyy ii w uuu ee uuuu yyy uuuu y w uuu i i rr w i i rr rrr uuuu rrr uuuu t ii uuuu i w u rrr ee www ee yyy eee www w tt ee&#34;</span>
</span></span><span style="display:flex;"><span>c_list <span style="color:#f92672">=</span> c<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> c_list:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> dict_26[j]:
</span></span><span style="display:flex;"><span>            result <span style="color:#f92672">+=</span> dict_9[j][len(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span> result <span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本，得到flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>flag{youaresosmartthatthisisjustapieceofcake}
</span></span></code></pre></div><p>flag:flag{youaresosmartthatthisisjustapieceofcake}</p>
<h2 id="0xe-这是什么">0xE 这是什么</h2>
<p>查看题目描述：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>小明是一个软件专业的高材生，但是老师布置的这次的作业似乎不怎么靠谱，因为他们老师以前是学物理的！喜欢乱七八糟命名文件，还喜欢奇奇怪怪的编码。你快帮小明看一下这题，小明准备好了一箱子辣条。 注意：得到的 flag 请包上 flag{} 提交
</span></span></code></pre></div><p>题目描述可以看到明显的提示：喜欢乱七八糟命名文件，还喜欢奇奇怪怪的编码。</p>
<p>这道题目应该考察的是奇奇怪怪的编码，下载附件，发现附件是一个apk文件，使用file命令简单查看一下apk文件的类型：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>94f5b952-3710-4609-ab6f-bc11609fdc67.apk: Composite Document File V2 Document, Little Endian, Os: Windows, Version 6.1, Code page: 936, Author: Administrator, Template: Normal.dotm, Last Saved By: Administrator, Revision Number: 5, Name of Creating Application: Microsoft Office Word, Total Editing Time: 07:00, Create Time/Date: Tue Dec 30 03:15:00 2014, Last Saved Time/Date: Tue Dec 30 03:42:00 2014, Number of Pages: 3, Number of Words: 1921, Number of Characters: 10950, Security: 0
</span></span></code></pre></div><p>发现文件应该是一个document文件，可以修改成txt文件查看文件内容</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>邢唷??                &gt;  ?	               H          J      ?    G   欹? €	  餜?             U:   bjbj肴肴                   8@  墷  墷  G2      
</span></span><span style="display:flex;"><span>                                                          ?     P      P  ?      ?      ?      ?      ?                 ?      ?      ?  8   ?     ?     ?      N  l  ?      ?      ?      ?      ?      1      1      1      ?     ?      ?      ?      ?      ?      ?  $   ?  ?    ^   ?                     ?      1                      1      1      1      1      ?              ?      ?      ?              ?  4       ?      ?      ?      1  X   ?      ?      ?      ?      ?              ?                                                      1      ?              ?              ?                                                                              ?      ?          癴櫄??        ?      ?      ?              ?       0   N      ?      ?      ?      ?      ?                                                                              ?              ?      ?  0   1      1      ?      1      1                                      1      1      1      ?      ?                                      ?                                      1      1      1      N      1      1      1      1                                                                                          ?      1      1      1      1      1      1                                                              1      1      1      P    _  :     	                                                                                                                                                                                                                                                                                                                                                                                                                                    [][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+!+[]]]+(![]+[])[+!+[]]+[+[]]+[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+[]]+([][[]]+[])[!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]]+[+[]]+(+(+!+[]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+[+[]])+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+[+[]]+[!+[]+!+[]]+[+[]]+[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]]+[!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][[]]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(![]+[])[+!+[]]+[!+[]+!+[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+([][[]]+[])[+[]]+([][[]]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+(+(!+[]+!+[]+[+!+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]])()(([]+[])[([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()[+[]])[+[]]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+([][[]]+[])[!+[]+!+[]])+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>                                                                                                                                                                                                                                                                                                                                                                                                                                              F:  G:  H:  J:  K:  M:  N:  P:  Q:  T:  U:  赕赕赕赕?                                                                                                                                                                                                                                                                                                                                                                                                                 h韖?  j    h韖? Uho`? h??  ho`? ho`?    G:  I:  J:  L:  M:  O:  P:  R:  S:  T:  U:  ?            ?            ?            ?            ?            ?            ?            ?            ?            ?            ?                                                                                                                                                                                                                                                                                                                         gd	o    gdo`?  6 1?2P :p?? 皞. 捌A!?&#34;?#悹$悹%?  癝班惄j              ?   ?   ?   ?   ?   ?   ?   ?   ?   6  6  6  6  6  6  6  6  6  v  v  v  v  v  v  v  v  v  6  6  6  6  6  6  &gt;  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  ?   6  6     6  6  6  6  6  6  6  6  ?   6  6  6  6  6  6  6  6  6  6  6  6  h  H  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  ?  6  2     ?  ?  ?  ?          0  @  P  `  p  €  ?  ?  ?  ?  ?       2  (  ?  ?     0  @  P  `  p  €  ?  ?  ?  ?  ?          0  @  P  `  p  €  ?  ?  ?  ?  ?          0  @  P  `  p  €  ?  ?  ?  ?  ?          0  @  P  `  p  €  ?  ?  ?  ?  ?          0  @  P  `  p  €  ?  ?  ?  ?  ?          0  @  P  `  p  €  ?  8  X  ?      V  ~      OJ PJ QJ _HmH	nHsH	tH    J  `? J   ??    ck噀     $1$ a$   CJ KH _HaJ mH	nHsH	tH                  $ A ?? $ 
</span></span><span style="display:flex;"><span>        貫祂=刉[SO    B i ?? B       0 nf恏?h   ?  4? 
</span></span><span style="display:flex;"><span>l 4?   a?        k ??    
</span></span><span style="display:flex;"><span>      0 鄀Rh?        N   ? N 
</span></span><span style="display:flex;"><span> 	o 0 u?w  &#39;  $
</span></span><span style="display:flex;"><span>? 9r &amp;d G$ P?    a$  CJ aJ 2 ?? 2  	o 0 u?w  C h a r    CJ KH aJ &lt;    &lt; 
</span></span><span style="display:flex;"><span> 	o 0 u??    $ 
</span></span><span style="display:flex;"><span>? 9r G$ a$  CJ aJ 2 ?? !2  	o 0 u?? C h a r    CJ KH aJ PK     ! 倞??        [Content_Types].xml瑧薺?E鲄卸豶?ヘ微Iw},?浔-j弰4	蛇w旄P?-t#b螜{U畯銧擉T閁^h卍}悒)蛔*1P?	揯鬃W孱0)櫐T闉9&lt;搇?ぼ$yi}佸;纞@囨?顚跄H滖男u?D谞z內/0娗盃瘥?$€?X3aZ⒁锣,癉0j~?叨蝏沩~i&gt;?赝3縗`???[?G殁??跼k.搒粣..椃碼婵?   PK     ! ブх?   6     _rels/.rels剰蟡?囷吔冄}Q颐%v/C/ ?h&#34;?脎O?
</span></span><span style="display:flex;"><span>?劋秣?孂釘?毆免C?薶醰=?偵叅?[xp啠{鄣_糚眩&lt;???堎O糝瓸d焉襃E?b$q_?槥?L吁R?`畯ㄉ趁0虨O??錏n7擫i鋌〃/鉙綈╡械根铸   PK     ! ky??   ?      theme/theme/themeManager.xml蘉
</span></span><span style="display:flex;"><span>?@醹愘7c?Eb菜? C?A菭覠圩邈?芜諞K
</span></span><span style="display:flex;"><span>Y,?
</span></span><span style="display:flex;"><span>奺?埛饇,?ㄚH?l崆骈x纱?逫萻Q}#諓叚递 值+??較?j=婫W栌?釫?&amp;
</span></span><span style="display:flex;"><span>8?   PK     ! ?m?  Q     theme/theme/theme1.xml靁MoE??F{oc&#39;vGu?h覨盵糟x=逎zvg53N?j廐H垈z?饴昛	$石I)*E阓酀欇鮊?IA?裎&gt;秣羌3緓镹男&gt;掤搁U蟇&lt;Db?i4??I呫!f&lt;&amp;MoJi泯?鈛拡 爮?nz生覓鬭梭&lt;!1?qa?X
</span></span><span style="display:flex;"><span>| |#洞┈.E樒妐l瘡F?栀峡鉴鎭窇q?+?|&amp;z?qHv8甹劀?h肠倖鼱O?1,糷z篑?..狨攬??寒t)羛糽d奰?璿k?[9`j组t跐j蜗 帮儱V?蟌w蕏@鲭&lt;飗┕???璙Hu盠
</span></span><span style="display:flex;"><span>葉嶙*蚭o@_熋譠涰霆? 媉澝w/4Vk.迉BF泷Z篡M圭?g邾?€疷R?賽g?1獗Z攌就E 劝?R觿尠i芷袬P?鄒?o鞉/鐤?$}A蒸&gt;L0斈屵呖z?迃rx鳔脅?稔h9T?奣/魁煜???鍃Y?雒&#39;蟸?S琦棌~蜩鶅O_|w??馉镉圚t??乤?d NG?1-Rl苼?諶J鴚T锠疢1Kｃ柩&#34;?o
</span></span><span style="display:flex;"><span>he浪撣幝絇L-憒%??绗臙?甴Y7?qP.L姼=岟薲穛炷?I爋fi??墸?帽?墘B?Rb?J款P_p蒅
</span></span><span style="display:flex;"><span>茛▍i㎏鷗郿訉h汧梚櫷o?;7Q嫵2染媱珼?a?/銐翾?嶺厌W?藬霱卂膗H剄?)薶?胺?:Vi豾?r態裶汐橌&#34;r嫃?帓2l徠a麃C奲此U|嚮!8^顩???軤仯?A魶壭眲V韙鄨?讕厏ls囔?4犁_=,涩返o聻TV	跥陲&#34;苎鎎H唼灮???熯x薜躻-戏蹺鮸褾;氕衯踯`嘼3&#34;G&#39;?e昮H柊O话ㄩ恬愪&#39;?劘i_wp伬?	??靺8?魂i&amp;丩Y%铝?楎謝視=瞩伭?壵阱綔?r6f?提3储淭厥厰)橗:陋Z?K?誏玸ゅ&amp;C鏜兣軟0€ [浪玴@注醏?j扣?媺耏咹唜H?i荤cT5A蕆跑@顢腍驇馴AZC硙i&#39;	RQm伕,zo?僩Q襲{?Y,Nψ??溷ら嵿L_??跆嘫 7C?6韽-fS宄h62密&#34;5咍麥罭H凾[X?5太4X?Y龡豚殖2纅鷎h辈绅痠~tCKF#猥b?+趙?m鑵?4`眹!?U翞!昿5a:倊€{4韒笫m蝘?o?萎c杽8m泛D矹秔S枪姗?豓1铘?#S奿?3E?pS??疳W`る甸q](	┻08樲?w别?n撏A鲺[s枃)k8皓= Aa?R?d趻删c楿咏瞬d)#換ueb?恾满?捷C!ず?i0福&gt;?4魫S?鋥?z虮?F箎?4?sKvUKo瘸椒h垀1砵YU€奥V蠬塔5U8錠k;譁潘鮈9堚寂皹D	荀 ??*|FL?迪鳡?A3兇伂&gt;g?类dm2iV值殍そ杕謌&lt;殒r?[kv抶熞蠃p鎶sj?潩z伛礭[鑚堨?叆Qv??縤u鈨??高?%M2羙J描?u 舘%覎?    PK     ! 
</span></span><span style="display:flex;"><span>褠煻     &#39;   theme/theme/_rels/themeManager.xml.rels剰M
</span></span><span style="display:flex;"><span>?匃倃oo雍?輬协?勪5
</span></span><span style="display:flex;"><span>6?$Q祉
</span></span><span style="display:flex;"><span>?.嘺緳i粭澤c2?h?:闀q毩m胳嶡RN壻;d癭値o7?g慘(M&amp;$R(.1榬&#39;J摐袏T鶂?V?＆A然蠬鱱}狇?|?絙{? 朠?除8塯/]As賲(⑵锑#洩L蔥汉倪    PK-      ! 倞??                      [Content_Types].xmlPK-      ! ブх?   6               +  _rels/.relsPK-      ! ky??   ?                  theme/theme/themeManager.xmlPK-      ! ?m?  Q               ?  theme/theme/theme1.xmlPK-      ! 
</span></span><span style="display:flex;"><span>褠煻     &#39;             ?  theme/theme/_rels/themeManager.xml.relsPK      ]  ?    &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; standalone=&#34;yes&#34;?&gt;
</span></span><span style="display:flex;"><span>&lt;a:clrMap xmlns:a=&#34;http://schemas.openxmlformats.org/drawingml/2006/main&#34; bg1=&#34;lt1&#34; tx1=&#34;dk1&#34; bg2=&#34;lt2&#34; tx2=&#34;dk2&#34; accent1=&#34;accent1&#34; accent2=&#34;accent2&#34; accent3=&#34;accent3&#34; accent4=&#34;accent4&#34; accent5=&#34;accent5&#34; accent6=&#34;accent6&#34; hlink=&#34;hlink&#34; folHlink=&#34;folHlink&#34;/&gt;    U2    @                 	                                 U:        U:       餈     ?                          @ ?        €€€ ?    饞     ?         ?    ?    	?                    
</span></span><span style="display:flex;"><span>?          養    
</span></span><span style="display:flex;"><span>?        S ?   ?   ?       	   ?    ?       餒    ?          ?    ?    	?                    
</span></span><span style="display:flex;"><span>?             ?   G2  G2  I2  I2  J2  J2  L2  M2  O2  P2  R2  S2  V2                         ?          両F 	o ?? o`? 漼? 韖?     G2  I2         @€ F2  F2   (?  F2      F2             U2  `   @      U n k n o w n                                   G?  * 郃x ?             T i m e s   N e w   R o m a n   5?                   €    S y m b o l   3.?  * 郈x ?             A r i a l   7.?   ?? @       ?      C a l i b r i   ;??      ?             媅SO  S i m S u n   A?   ?$ B        ?      C a m b r i a   M a t h      1?  ?  h    向,G牝,G        ?  ?       怺   ?  ?      [       q       ?  ! % ) , . : ; &gt; ? ] } ? ? ? ? ??    &amp; 0 2 3 : !6&#34;000	00
</span></span><span style="display:flex;"><span>0000006??兀﨑?	=@]^?                                                                            $ ( [ { ? ? ?   0
</span></span><span style="display:flex;"><span>0000000Y?;[??                                                ?? ? 個     d      .2  .2                                                                        2?                              HX    	?$P  ?  両F    2                     !                             x   x           ?                 
</span></span><span style="display:flex;"><span> A d m i n i s t r a t o r 
</span></span><span style="display:flex;"><span> A d m i n i s t r a t o r                                                                                                                                                                                                                                                                                                                                                           ?                      鄥燆鵒h珣 +&#39;迟0   h        ?      ?      ?      ?      ?      ?      ?   	   ?        
</span></span><span style="display:flex;"><span>   $     0  
</span></span><span style="display:flex;"><span>   &lt;     H     P     X     `     ?                            Administrator                   Normal.dotm       Administrator         5         Microsoft Office Word   @    闢?    @    Rに??@    ?戔#?         ?     ?                      胀諟.摋 +,0   ?   
</span></span><span style="display:flex;"><span>      X      `      l      t      |      ?      ?      ?      ?      ?      ?               [            .2                                                     	   
</span></span><span style="display:flex;"><span>         
</span></span><span style="display:flex;"><span>                                                             ?&#34;   #   $   %   &amp;   &#39;   (   ?*   +   ,   -   .   /   0   1   2   3   4   5   6   ?8   9   :   ;   &lt;   =   &gt;   ?@   A   B   C   D   E   F   ??I   ???R o o t   E n t r y                                                 	     ?      F            P氣#?K   €       D a t a                                                         
</span></span><span style="display:flex;"><span>                                     !          1 T a b l e                                                                                                )   ?      W o r d D o c u m e n t                                                                                        8@       S u m m a r y I n f o r m a t i o n                           (                                     7           D o c u m e n t S u m m a r y I n f o r m a t i o n           8                                        ?           C o m p O b j                                                                                           e                                                                                                                              ? ?
</span></span><span style="display:flex;"><span>  	     ?      F#   Microsoft Office Word 97-2003 文档 
</span></span><span style="display:flex;"><span>   MSWordDoc     ?瞦                                                                                                                                                                                                                                                                                                                                                                                                                                       
</span></span></code></pre></div><p>发现文件中间有一堆奇奇怪怪的编码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]][([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]((<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]()[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>(<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]))[(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]](<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]])<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]][([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]((<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>(<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]))[(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]](<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]])()([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]][([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]((<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+</span>(<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]]))[(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">+!</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]](<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+!+</span>[]])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]])()(([]<span style="color:#f92672">+</span>[])[([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]]()[<span style="color:#f92672">+</span>[]])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]])<span style="color:#f92672">+</span>([]<span style="color:#f92672">+</span>[])[(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>([][[]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]]()[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[][(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>([<span style="color:#f92672">!</span>[]]<span style="color:#f92672">+</span>[][[]])[<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+!+</span>[]]<span style="color:#f92672">+</span>(<span style="color:#f92672">!!</span>[]<span style="color:#f92672">+</span>[])[<span style="color:#f92672">+!+</span>[]]])[<span style="color:#f92672">!+</span>[]<span style="color:#f92672">+!+</span>[]<span style="color:#f92672">+</span>[<span style="color:#f92672">+</span>[]]])()
</span></span></code></pre></div><p>应该可以非常容易地看出这种编码格式是JSFuck编码，可以去J<a href="http://www.jsfuck.com/">SFuck官方网站</a>进行解密：</p>
<p><img src="/images/BUUCTF-CRYPTO-3_writeup/image-11-1024x305.png" alt="img"></p>
<p>成功拿到flag，flag：flag{a0448fd730b62c13ca80200c4529daa2}</p>
<h2 id="0xf-childrsa">0xF childRSA</h2>
<p>RSA题目，有趣，直接下载附件，查看附件内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> random <span style="color:#f92672">import</span> choice
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> isPrime, sieve_base <span style="color:#66d9ef">as</span> primes
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> flag <span style="color:#f92672">import</span> flag
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getPrime</span>(bits):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        n <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> n<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">&lt;</span> bits:
</span></span><span style="display:flex;"><span>            n <span style="color:#f92672">*=</span> choice(primes)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> isPrime(n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> int<span style="color:#f92672">.</span>from_bytes(flag<span style="color:#f92672">.</span>encode(), <span style="color:#e6db74">&#39;big&#39;</span>)
</span></span><span style="display:flex;"><span>p, q <span style="color:#f92672">=</span> [getPrime(<span style="color:#ae81ff">2048</span>) <span style="color:#66d9ef">for</span> _ <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>)]
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p <span style="color:#f92672">*</span> q
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> pow(m, e, n)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># n = 32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># c = 26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108</span>
</span></span></code></pre></div><p>发现附件文件是一个python程序，可以看到rsa加密算法的具体细节，可以看到一个关键函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getPrime</span>(bits):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span>        n <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> n<span style="color:#f92672">.</span>bit_length() <span style="color:#f92672">&lt;</span> bits:
</span></span><span style="display:flex;"><span>            n <span style="color:#f92672">*=</span> choice(primes)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> isPrime(n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> n <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><p>对函数进行审计发现大素数生成的细节并不是很清晰，需要对Crypto.Util.number库的sieve_base模块进行检索，来获取更多的信息。经过查询发现，sieve_base模块是一个前10000个素数的素数表，可以节约素数生成的时间。使用<a href="https://www.wolframalpha.com/">数学工具</a>查询第10000个素数是104729，但是知道这个好像也没什么用的样子。仅仅知道p和q是生成算法是由小于104729的数随机生成的。这里需要引入一个smooth number的概念：[3]</p>
<p>光滑数（smooth number），或译脆数，是一个可以约数分解为小素数乘积的正整数。光滑数一词是是伦纳德·阿德曼所提出。光滑数在以约数分解为基础的密码学中扮演重要角色。[2]</p>
<p>现在有了两个材料，没有工具，要想解决这道题目，还需要有个工具来处理，费马小定理。这道题目主要是在考察大数分解的方法——Pollard&rsquo;s p-1 method，这个大数分解方法非常巧妙，其数学证明也非常优美。回到题目来，现在我们有这些信息，该如何处理这道题目呢？这里先利用已有的信息进行简单的数学演绎：</p>
<p>首先来康康费马小定理：</p>
<p>$$
a^{p-1} \equiv 1 \quad (\text{mod} p)
$$</p>
<p>也就是说，指数那边每增加( p-1 ) ，其结果仍然不变。指数以( p-1 ) 为一个循环。</p>
<p>我们将其变形一下：</p>
<p>$$
a^{p-1} – 1 \equiv 0 \quad (\text{mod} p)
$$</p>
<p>模p同余0，也就是说( a^{p-1} – 1 ) 是 ( p ) 的倍数。将同余式改写为等式：</p>
<p>$$
a^{t \times (p-1)} – 1 = k\times p
$$</p>
<blockquote>
<p>其中 $t, k$ 是两个整数。</p>
</blockquote>
<p>如果指数( exp )是 ( p-1 ) 的倍数，那么( a^{exp} – 1 )就会是 ( p ) 的倍数。</p>
<blockquote>
<p>上面的( p )均指某一个质数，而非( N=pq )中的( p )</p>
</blockquote>
<p>这里很关键。</p>
<p>如果我们能够找到一个指数( L )，使得对于某一个底数( a )，( a^{L} – 1 ) 是( p )的倍数，但不是( q )的倍数。</p>
<p>这时，我们只要去计算
$$
gcd(a^{L}-1, N)
$$
得到的结果，必定是( p )。也就是说，我们成功地分解了( N )。</p>
<p>那么该怎么去寻找这个( L )呢，这个时候就需要用到光滑数的概念了，需要使用一下光滑数这个不错的材料来进行求解：</p>
<p>对于每一个$n = 2, 3, 4, …$，我们任意选择一个底数$a$（事实上，我们可以简单地选择为2），并计算
$$
gcd(a^{n!-1}, N)
$$</p>
<p>如果结果落在1和( N  ）中间，便可成功进行求解。</p>
<p>现在根据上述算法原理编写python脚本进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> sieve_base <span style="color:#66d9ef">as</span> primes
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108</span>
</span></span><span style="display:flex;"><span>t<span style="color:#f92672">=</span>pow(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">2048</span>)
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x10001</span>
</span></span><span style="display:flex;"><span>k<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">10000</span>):
</span></span><span style="display:flex;"><span>	k<span style="color:#f92672">=</span>pow(k,primes[i],n)
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span>(k<span style="color:#f92672">&gt;</span>t):
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span>(i<span style="color:#f92672">%</span><span style="color:#ae81ff">15</span><span style="color:#f92672">==</span><span style="color:#ae81ff">0</span>):
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span>(gmpy2<span style="color:#f92672">.</span>gcd(k<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,n)<span style="color:#f92672">!=</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>				print(gmpy2<span style="color:#f92672">.</span>gcd(k<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,n))
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">=</span>gmpy2<span style="color:#f92672">.</span>gcd(k<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,n)
</span></span><span style="display:flex;"><span>q<span style="color:#f92672">=</span>n<span style="color:#f92672">//</span>p
</span></span><span style="display:flex;"><span>phi<span style="color:#f92672">=</span>(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d<span style="color:#f92672">=</span>gmpy2<span style="color:#f92672">.</span>invert(e,phi)
</span></span><span style="display:flex;"><span>m<span style="color:#f92672">=</span>pow(c,d,n)
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">=</span>hex(m)[<span style="color:#ae81ff">2</span>:]<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>)
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>运行脚本，可能需要等一段时间，大致7s就能跑出来flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>NCTF{Th3r3_ar3_1ns3cure_RSA_m0duli_7hat_at_f1rst_gl4nce_appe4r_t0_be_s3cur3}
</span></span></code></pre></div><p>flag:flag{Th3r3_ar3_1ns3cure_RSA_m0duli_7hat_at_f1rst_gl4nce_appe4r_t0_be_s3cur3}</p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://wiwiki.kfd.me/wiki/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81">曼彻斯特编码-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E5%85%89%E6%BB%91%E6%95%B8?__cf_chl_jschl_tk__=b5c515d187b62ea09af935ef21c9d5b700a69f48-1623022895-0-AfHh5ZYcD_wNPPZIKv6IUoOgpyBBN51u0oQlfiPznjcgH9GInr9dRIRblQTjVkOq0mjCxntNjxFcA3jJrZdPLzcAKEhjc88WIy3pEjIbEpB1_n720JdpuwY5FK-ApJ1HKWqeGFjkQ6d_Yo-dAXNFVdjYctWy6G_xqejts0Ou-UbtdP8cResDH3AZ06MUuLBpK8Rop4k-GJfveFgVcMGAfzrIUzt6bcABShLT8KlLg13VtGKiQ5MKSBEK8tv0mhABWnbYmD6tKZzauO3DLBedUBxpMlZo5VSBr3Wx5fwBdxPnDXCZR57KE5T97LzgXqWKw3G3dhq29wgUvSzetV-_cDsjhNhYKlQ6izmQXjQ0JOWdhUiPsrF-tQ1f5Ctb5KUO8Ddl95G-6AqXuzZ3EWBAD64mE3HtlB2s1jPsEW9PtfjoeRzVCYfZZ78X-W76hYw86bKV23lnBvV2Qzp0NMWUuXx2dsRSy_6lAjnGl8GYLHZ2X8pwoz4f02P-lmw8OGP4Og">光滑数-维基百科</a></li>
<li><a href="http://yulige.top/?p=752#childRSA213pt_38solvers">NCTF2019-官方writeup</a></li>
</ol>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>BUUCTF CRYPTO (2) writeup</title>
            <link>/posts/buuctf-crypto-2_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 10:34:27 +0800</pubDate>
            
            <guid>/posts/buuctf-crypto-2_writeup/</guid>
            <description>还是BUUCTF的题目，熟悉的感觉，再来一次！
BUUCTF首页
本次的题目大致如下：
CTF题目
题目是16道密码学题目：
传统知识+古典密码 信息化时代的步伐 RSA1 凯撒？转换？呵呵！ old-fashion 萌萌哒的八戒 权限获得第一步 世上无难事 RSA3 RSA2 异性相吸 RSA 还原大师 Unencode robomunication RSAROLL 题目求解： 题目都还比较简单，正常来做就好。
0x0 传统知识+古典密码 下载附件，得到题目
题目信息
应该是考察古典密码的题目，是考察六十甲子顺序纳音表的题目
这里列出六十顺序纳音表：
六十甲子顺序表
根据六十甲子顺序表编写python脚本：
C_sky = &amp;#34;甲乙丙丁戊己庚辛壬癸&amp;#34; C_earth = &amp;#34;子丑寅卯辰巳午未申酉戌亥&amp;#34; C_dict={} for i in range(60): C_dict[C_sky[i%len(C_sky)]+C_earth[i%len(C_earth)]] = str(i+1) cipher = &amp;#34;辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳&amp;#34; cipher_list = cipher.split(&amp;#34;，&amp;#34;) plainer = &amp;#34;&amp;#34; for i in cipher_list: plainer += chr(int(C_dict[i])+60) def decrype(cipher,key): cipher_len = len(cipher) if cipher_len%key == 0: key = cipher_len // key else: key = cipher_len // key + 1 result = {x:&amp;#39;&amp;#39; for x in range(key)} for i in range(cipher_len): a = i%key; result.</description>
            <content type="html"><![CDATA[<p>还是BUUCTF的题目，熟悉的感觉，再来一次！</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-136.png" alt="img">BUUCTF首页</p>
<p>本次的题目大致如下：</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-137.png" alt="img">CTF题目</p>
<p>题目是16道密码学题目：</p>
<ol>
<li>传统知识+古典密码</li>
<li>信息化时代的步伐</li>
<li>RSA1</li>
<li>凯撒？转换？呵呵！</li>
<li>old-fashion</li>
<li>萌萌哒的八戒</li>
<li>权限获得第一步</li>
<li>世上无难事</li>
<li>RSA3</li>
<li>RSA2</li>
<li>异性相吸</li>
<li>RSA</li>
<li>还原大师</li>
<li>Unencode</li>
<li>robomunication</li>
<li>RSAROLL</li>
</ol>
<h2 id="题目求解">题目求解：</h2>
<p>题目都还比较简单，正常来做就好。</p>
<h3 id="0x0-传统知识古典密码">0x0 传统知识+古典密码</h3>
<p>下载附件，得到题目</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-138.png" alt="img"></p>
<p>题目信息</p>
<p>应该是考察古典密码的题目，是考察六十甲子顺序纳音表的题目</p>
<p>这里列出六十顺序纳音表：</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-139.png" alt="img"></p>
<p>六十甲子顺序表</p>
<p>根据六十甲子顺序表编写python脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>C_sky <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;甲乙丙丁戊己庚辛壬癸&#34;</span>
</span></span><span style="display:flex;"><span>C_earth <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;子丑寅卯辰巳午未申酉戌亥&#34;</span>
</span></span><span style="display:flex;"><span>C_dict<span style="color:#f92672">=</span>{}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">60</span>):
</span></span><span style="display:flex;"><span>    C_dict[C_sky[i<span style="color:#f92672">%</span>len(C_sky)]<span style="color:#f92672">+</span>C_earth[i<span style="color:#f92672">%</span>len(C_earth)]] <span style="color:#f92672">=</span> str(i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳&#34;</span>
</span></span><span style="display:flex;"><span>cipher_list <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;，&#34;</span>)
</span></span><span style="display:flex;"><span>plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_list:
</span></span><span style="display:flex;"><span>    plainer <span style="color:#f92672">+=</span> chr(int(C_dict[i])<span style="color:#f92672">+</span><span style="color:#ae81ff">60</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrype</span>(cipher,key):
</span></span><span style="display:flex;"><span>    cipher_len <span style="color:#f92672">=</span> len(cipher)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> cipher_len<span style="color:#f92672">%</span>key <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">//</span> key
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">//</span> key <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> {x:<span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(key)}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(cipher_len):
</span></span><span style="display:flex;"><span>        a <span style="color:#f92672">=</span> i<span style="color:#f92672">%</span>key;
</span></span><span style="display:flex;"><span>        result<span style="color:#f92672">.</span>update({a:result[a]<span style="color:#f92672">+</span>cipher[i]})
</span></span><span style="display:flex;"><span>    plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(key):
</span></span><span style="display:flex;"><span>        plainer <span style="color:#f92672">=</span> plainer <span style="color:#f92672">+</span> result[i]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> plainer
</span></span><span style="display:flex;"><span>plainer_list<span style="color:#f92672">=</span>[]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">20</span>):
</span></span><span style="display:flex;"><span>    plainer_list<span style="color:#f92672">.</span>append(decrype(plainer,n))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plainer_set <span style="color:#f92672">=</span> set(plainer_list)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">Caesar</span>(cipher):
</span></span><span style="display:flex;"><span>    dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
</span></span><span style="display:flex;"><span>        plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
</span></span><span style="display:flex;"><span>                plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>j)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>                plainer <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>        print(plainer<span style="color:#f92672">.</span>upper())
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> plainer_set:
</span></span><span style="display:flex;"><span>    Caesar(i<span style="color:#f92672">.</span>lower())
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;&#34;</span>)
</span></span></code></pre></div><blockquote>
<p>说明：</p>
<ol>
<li>
<p>脚本使用了三种加密算法，分别是传统文化加密，栅栏密码，凯撒密码</p>
</li>
<li>
<p>最终的输出结果是凯撒密码爆破的结果，需要进行筛选</p>
</li>
</ol>
</blockquote>
<p>通过简单的筛选可以得到flag为：flag{SHUANGYU}</p>
<h3 id="0x1-信息化时代的步伐">0x1 信息化时代的步伐</h3>
<p>审题目</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image.png" alt="img"></p>
<p>应该是和中文相关的密码</p>
<p>看附件：</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-1.png" alt="img"></p>
<p>附件是一串数字，应该需要数字和中文进行联系</p>
<p>搜索一下：中文电码</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-2.png" alt="img"></p>
<p>得到了不错的搜索结果</p>
<p>这里涉及了一个中文电码的知识，这是一个比较偏的知识，这里可以积累一下：</p>
<p>中文电码，又称：中文商用电码（Chinese commercial code, CCC）、中文电报码（Chinese telegraph code, CTC）或中文电报明码（Chinese ordinary telegraph code, COTC），原本是用于电报之中传送中文信息的方法。它是第一个将汉字化作电子信号的编码表。[1]</p>
<p>简单来说，就是针对中文设计的一种数字编码方式。</p>
<p>这里直接使用<a href="http://code.mcdvisa.com/">在线脚本</a>进行解码：</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-3.png" alt="img"></p>
<p>解码得出结果，即flag是flag{计算机要从娃娃抓起}</p>
<h3 id="0x2-rsa1">0x2 RSA1</h3>
<p>题目考察RSA加密算法</p>
<p>下载附件，得到数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span> 
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span> 
</span></span><span style="display:flex;"><span>dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span> 
</span></span><span style="display:flex;"><span>dq <span style="color:#f92672">=</span> <span style="color:#ae81ff">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span> 
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span>
</span></span></code></pre></div><p>有p和q，以及dp和dq，但是没有e，n等参数</p>
<p>这道题目是一道典型的dp，dq泄露的RSA题目</p>
<p>由于涉及dp，dq参数，需要推导一下公式：</p>
<p>首先，最基本的RSA求值公式：</p>
<p>$m \equiv c^d\ mod\ n$ 和 $c \equiv m^e\ mod\ n$</p>
<p>然后，这里有不同于常规RSA的新参数dp和dq：</p>
<p>$ d_p \equiv d\ mod\ (p-1) $和 $ d_q \equiv d\ mod\ (q-1) $</p>
<p>下面就需要根据已知的条件进行推导：</p>
<p>$$ m \equiv c^d \ mod\ n \Rightarrow m = c^d + k \cdot n \Rightarrow m = c^d + k \cdot p \cdot q $$</p>
<p>由上面的推导可以得出：</p>
<p>$$ m_p \equiv c^d\  mod \ p  \ m_q \equiv c^d\ mod\ q $$</p>
<p>进一步推导可以得出：</p>
<p>$$ m_p + k \cdot p = c^d$$</p>
<p>将上式带入到$ m_q \equiv c^d \  mod \  q $ 可得：</p>
<p>$$ m_q \equiv m_q + kp\ mod\  q $$</p>
<p>然后简单整理可得：</p>
<p>$$ k \equiv p^{-1} \cdot (m_q - m_p)\  mod\ q $$</p>
<p>故可得：</p>
<p>$$ m \equiv (p^{-1} \cdot (m_q-m_p)\ mod\ q ) \cdot p+ m_p \ mod \  (p \cdot q) $$</p>
<p>同理可得：</p>
<p>$$ m \equiv (p^{-1} \cdot (m_q-m_p)\ mod\ q ) \cdot q+ m_q \ mod \  (p \cdot q) $$</p>
<p>$$ m \equiv (q^{-1} \cdot (m_p-m_q)\ mod\ p ) \cdot p+ m_p \ mod \  (p \cdot q) $$</p>
<p>$$ m \equiv (q^{-1} \cdot (m_p-m_q)\ mod\ p ) \cdot q+ m_q \ mod \  (p \cdot q) $$</p>
<p>根据推导的公式，这里使用一个python脚本解决问题：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span>
</span></span><span style="display:flex;"><span>dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span>
</span></span><span style="display:flex;"><span>dq <span style="color:#f92672">=</span> <span style="color:#ae81ff">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>mp <span style="color:#f92672">=</span> pow(c,dp,p)
</span></span><span style="display:flex;"><span>mq <span style="color:#f92672">=</span> pow(c,dq,q)
</span></span><span style="display:flex;"><span>Ip <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(p,q)
</span></span><span style="display:flex;"><span>Iq <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(q,p)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>m1 <span style="color:#f92672">=</span> ((((mq<span style="color:#f92672">-</span>mp)<span style="color:#f92672">*</span>Ip)<span style="color:#f92672">%</span>q)<span style="color:#f92672">*</span>p<span style="color:#f92672">+</span>mp)<span style="color:#f92672">%</span>(p<span style="color:#f92672">*</span>q)
</span></span><span style="display:flex;"><span>m2 <span style="color:#f92672">=</span> ((((mq<span style="color:#f92672">-</span>mp)<span style="color:#f92672">*</span>Ip)<span style="color:#f92672">%</span>q)<span style="color:#f92672">*</span>q<span style="color:#f92672">+</span>mq)<span style="color:#f92672">%</span>(p<span style="color:#f92672">*</span>q)
</span></span><span style="display:flex;"><span>m3 <span style="color:#f92672">=</span> ((((mp<span style="color:#f92672">-</span>mq)<span style="color:#f92672">*</span>Iq)<span style="color:#f92672">%</span>p)<span style="color:#f92672">*</span>p<span style="color:#f92672">+</span>mp)<span style="color:#f92672">%</span>(p<span style="color:#f92672">*</span>q)
</span></span><span style="display:flex;"><span>m4 <span style="color:#f92672">=</span> ((((mp<span style="color:#f92672">-</span>mq)<span style="color:#f92672">*</span>Iq)<span style="color:#f92672">%</span>p)<span style="color:#f92672">*</span>q<span style="color:#f92672">+</span>mq)<span style="color:#f92672">%</span>(p<span style="color:#f92672">*</span>q)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag1 <span style="color:#f92672">=</span> long_to_bytes(m1)
</span></span><span style="display:flex;"><span>flag2 <span style="color:#f92672">=</span> long_to_bytes(m2)
</span></span><span style="display:flex;"><span>flag3 <span style="color:#f92672">=</span> long_to_bytes(m3)
</span></span><span style="display:flex;"><span>flag4 <span style="color:#f92672">=</span> long_to_bytes(m4)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print <span style="color:#e6db74">&#34;flag:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(flag1)
</span></span><span style="display:flex;"><span>print <span style="color:#e6db74">&#34;flag:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(flag2)
</span></span><span style="display:flex;"><span>print <span style="color:#e6db74">&#34;flag:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(flag3)
</span></span><span style="display:flex;"><span>print <span style="color:#e6db74">&#34;flag:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(flag4)
</span></span></code></pre></div><p>脚本运行即得到flag，即noxCTF{W31c0m3_70_Ch1n470wn}</p>
<p>根据题目要求，故flag： flag{W31c0m3_70_Ch1n470wn}</p>
<h3 id="0x3-凯撒转换呵呵">0x3 凯撒？转换？呵呵！</h3>
<p>题目应该是考察变种凯撒加密的</p>
<pre tabindex="0"><code>MTHJ{CUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO}
注意：得到的 flag 请包上 flag{} 提交, flag{小写字母}
</code></pre><p>这里使用一个<a href="https://quipqiup.com/">在线工具</a>进行求解</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-4-1024x468.png" alt="img"></p>
<p>通过在线工具就得到flag，即flag{substitutioncipherdecryptionisalwayseasyjustlikeapieceofcake}</p>
<p>“忘了是否要进行大小写转换，题目的思路大致就是这样了”</p>
<h3 id="0x4-old-fashion">0x4 old-fashion</h3>
<p>题目描述没什么好说的，直接下载附件，查看附件</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Os drnuzearyuwn, y jtkjzoztzoes douwlr oj y ilzwex eq lsdexosa kn pwodw tsozj eq ufyoszlbz yrl rlufydlx pozw douwlrzlbz, ydderxosa ze y rlatfyr jnjzli; mjy gfbmw vla xy wbfnsy symmyew (mjy vrwm qrvvrf), hlbew rd symmyew, mebhsymw rd symmyew, vbomgeyw rd mjy lxrzy, lfk wr dremj. Mjy eyqybzye kyqbhjyew mjy myom xa hyedrevbfn lf bfzyewy wgxwmbmgmbrf. Wr mjy dsln bw f1_2jyf-k3_jg1-vb-vl_l
</span></span></code></pre></div><p>一段文字，直接丢<a href="https://quipqiup.com/">在线工具</a>里面进行词频分析吧：</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-5-1024x306.png" alt="img"></p>
<p>得到词频分析结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Xl fogkvryoeksg, e hjdhvxvjvxrl fxksao xh e zavsrb rc alfrbxly dg wsxfs jlxvh rc knexlvaiv eoa oaknefab wxvs fxksaovaiv, effrobxly vr e oayjneo hghvaz; the units may be single letters (the most common), pairs of letters, triplets of letters, mixtures of the above, and so forth. The receiver deciphers the text by performing an inverse substitution. So the flag is n1_2hen-d3_hu1-mi-ma_a
</span></span></code></pre></div><p>故得flag：flag{n1_2hen-d3_hu1-mi-ma_a}</p>
<h3 id="0x5-萌萌哒的八戒">0x5 萌萌哒的八戒</h3>
<p>萌萌哒的八戒，应该是猪圈密码</p>
<p>什么是猪圈密码？</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image.png" alt="img"></p>
<p>猪圈密码（英语：pigpen cipher)，亦称共济会密码（masonic cipher）或 共济会员密码（Freemason&rsquo;s cipher），是一种以格子为基础的简单替代式密码。即使使用符号，也不会影响密码分析，亦可用在其它替代式的方法。右边的例子，是把字母填进格子的模样。</p>
<p>早在1700年代，共济会常常使用这种密码保护一些私密纪录或用来通讯，所以又称共济会密码。[2]</p>
<pre tabindex="0"><code>萌萌哒的八戒原来曾经是猪村的村长，从远古时期，猪村就有一种神秘的代码。请从附件中找出代码，看看萌萌哒的猪八戒到底想说啥 注意：得到的 flag 请包上 flag{} 提交
</code></pre><p>题目描述正好和猜想对应，下载附件，查看附件</p>
<p>得到一张图片:</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-6.png" alt="img"></p>
<p>下面那一串应该就是猪圈密码，进行解密：</p>
<p>这里使用在线工具进行解密：</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-7.png" alt="img"></p>
<p>得到flag，即flag{whenthepigwanttoeat}</p>
<h3 id="0x6-权限获得第一步">0x6 权限获得第一步</h3>
<p>这题应该是使用哈希密码破解的方法进行解密</p>
<p>下载附件，查看附件内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>Administrator<span style="color:#960050;background-color:#1e0010">:</span><span style="color:#ae81ff">500</span><span style="color:#960050;background-color:#1e0010">:</span>806EDC27AA52E314AAD3B435B51404EE<span style="color:#960050;background-color:#1e0010">:</span>F4AD50F57683D4260DFD48AA351A17A8::<span style="color:#960050;background-color:#1e0010">:</span>
</span></span></code></pre></div><p>密文明显是windows系统的hash加密，第一段的哈希加密应该是Administrator的用户名，第二段的哈希加密应该是windows系统的密码</p>
<p>直接对第二段哈希值进行哈希破解：</p>
<p>这里使用<a href="https://cmd5.com/">在线工具</a>进行破解：</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-8.png" alt="img"></p>
<p>故flag即为flag{3617656}</p>
<h3 id="0x7-世上无难事">0x7 世上无难事</h3>
<p>打开题目：</p>
<pre tabindex="0"><code>以下是某国现任总统外发的一段指令，经过一种奇异的加密方式，毫无规律，看来只能分析了。请将这段语句还原成通顺语句，并从中找到key作为答案提交，答案是32位，包含小写字母。 注意：得到的 flag 请包上 flag{} 提交
</code></pre><p>下载附件，查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>VIZZB IFIUOJBWO NVXAP OBC XZZ UKHVN IFIUOJBWO HB XVIXW XAW VXFI X QIXN VBD KQ IFIUOJBWO WBKAH NBWXO VBD XJBCN NKG QLKEIU DI XUI VIUI DKNV QNCWIANQ XN DXPIMKIZW VKHV QEVBBZ KA XUZKAHNBA FKUHKAKX XAW DI VXFI HBN QNCWIANQ NCAKAH KA MUBG XZZ XEUBQQ XGIUKEX MUBG PKAWIUHXUNIA NVUBCHV 12NV HUXWI XAW DI XUI SCQN QB HZXW NVXN XZZ EBCZW SBKA CQ NBWXO XAW DI DXAN NB NVXAP DXPIMKIZW MBU JIKAH QCEV XA BCNQNXAWKAH VBQN HKFI OBCUQIZFIQ X JKH UBCAW BM XLLZXCQI XAW NVI PIO KQ 640I11012805M211J0XJ24MM02X1IW09
</span></span></code></pre></div><p>得到一段文字，直接丢到在线工具得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>HELLO EVERYBODY THANK YOU ALL RIGHT EVERYBODY GO AHEAD AND HAVE A SEAT HOW IS EVERYBODY DOING TODAY HOW ABOUT TIM SPICER WE ARE HERE WITH STUDENTS AT WAKEFIELD HIGH SCHOOL IN ARLINGTON VIRGINIA AND WE HAVE GOT STUDENTS TUNING IN FROM ALL ACROSS AMERICA FROM KINDERGARTEN THROUGH 12TH GRADE AND WE ARE JUST SO GLAD THAT ALL COULD JOIN US TODAY AND WE WANT TO THANK WAKEFIELD FOR BEING SUCH AN OUTSTANDING HOST GIVE YOURSELVES A BIG ROUND OF APPLAUSE AND THE KEY IS 640E11012805F211B0AB24FF02A1ED09
</span></span></code></pre></div><p>得到flag，即flag为flag{640e11012805f211b0ab24ff02a1ed09}</p>
<h3 id="0x8-rsa3">0x8 RSA3</h3>
<p>RSA题目，直接下载附件，查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>c1<span style="color:#f92672">=</span><span style="color:#ae81ff">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span>
</span></span><span style="display:flex;"><span>n<span style="color:#f92672">=</span><span style="color:#ae81ff">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span>
</span></span><span style="display:flex;"><span>e1<span style="color:#f92672">=</span><span style="color:#ae81ff">11187289</span>
</span></span><span style="display:flex;"><span>c2<span style="color:#f92672">=</span><span style="color:#ae81ff">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span>
</span></span><span style="display:flex;"><span>e2<span style="color:#f92672">=</span><span style="color:#ae81ff">9647291</span>
</span></span></code></pre></div><p>看到c1，c2，e1，e2应该是RSA共模攻击</p>
<p>RSA共模攻击需要使用到扩展欧几里得定理：</p>
<p>扩展欧几里得算法是欧几里得算法（又叫辗转相除法）的扩展。除了计算a、b两个整数的最大公约数，此算法还能找到整数x、y（其中一个很可能是负数）。通常谈到最大公因子时, 我们都会提到一个非常基本的事实: 给予二整数 a 与 b, 必存在有整数 x 与 y 使得$ ax + by = gcd(a,b) $。有两个数a,b，对它们进行辗转相除法，可得它们的最大公约数——这是众所周知的。然后，收集辗转相除法中产生的式子，倒回去，可以得到$ ax+by=gcd(a,b) $的整数解。[3]</p>
<p>根据维基百科，可以找到扩展欧几里得定理的python算法 [4] :</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">ext_euclid</span>(a, b):
</span></span><span style="display:flex;"><span>    old_s,s<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    old_t,t<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    old_r,r<span style="color:#f92672">=</span>a,b
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> b <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, a
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span>(r<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>):
</span></span><span style="display:flex;"><span>            q<span style="color:#f92672">=</span>old_r<span style="color:#f92672">//</span>r
</span></span><span style="display:flex;"><span>            old_r,r<span style="color:#f92672">=</span>r,old_r<span style="color:#f92672">-</span>q<span style="color:#f92672">*</span>r
</span></span><span style="display:flex;"><span>            old_s,s<span style="color:#f92672">=</span>s,old_s<span style="color:#f92672">-</span>q<span style="color:#f92672">*</span>s
</span></span><span style="display:flex;"><span>            old_t,t<span style="color:#f92672">=</span>t,old_t<span style="color:#f92672">-</span>q<span style="color:#f92672">*</span>t
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> old_s, old_t, old_r
</span></span></code></pre></div><p>这里根据题目要求，使用一个python脚本解决题目：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> gmpy2 <span style="color:#f92672">import</span> invert
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gongmo</span>(n, c1, c2, e1, e2):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">egcd</span>(a, b):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> b <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> a, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            x, y <span style="color:#f92672">=</span> egcd(b, a <span style="color:#f92672">%</span> b)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> y, x <span style="color:#f92672">-</span> (a <span style="color:#f92672">//</span> b) <span style="color:#f92672">*</span> y
</span></span><span style="display:flex;"><span>    s <span style="color:#f92672">=</span> egcd(e1, e2)
</span></span><span style="display:flex;"><span>    s1 <span style="color:#f92672">=</span> s[<span style="color:#ae81ff">0</span>]
</span></span><span style="display:flex;"><span>    s2 <span style="color:#f92672">=</span> s[<span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> s1 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        s1 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span> s1
</span></span><span style="display:flex;"><span>        c1 <span style="color:#f92672">=</span> invert(c1, n)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> s2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        s2 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span> s2
</span></span><span style="display:flex;"><span>        c2 <span style="color:#f92672">=</span> invert(c2, n)
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> pow(c1, s1, n) <span style="color:#f92672">*</span> pow(c2, s2, n) <span style="color:#f92672">%</span> n
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> m
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c1<span style="color:#f92672">=</span><span style="color:#ae81ff">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span>
</span></span><span style="display:flex;"><span>n<span style="color:#f92672">=</span><span style="color:#ae81ff">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span>
</span></span><span style="display:flex;"><span>e1<span style="color:#f92672">=</span><span style="color:#ae81ff">11187289</span>
</span></span><span style="display:flex;"><span>c2<span style="color:#f92672">=</span><span style="color:#ae81ff">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span>
</span></span><span style="display:flex;"><span>e2<span style="color:#f92672">=</span><span style="color:#ae81ff">9647291</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> gongmo(n, c1, c2, e1, e2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print long_to_bytes(result)
</span></span></code></pre></div><p>根据脚本可以直接求出flag：flag{49d91077a1abcb14f1a9d546c80be9ef}</p>
<h3 id="0x9-rsa2">0x9 RSA2</h3>
<p>直接下载附件，打开附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span>
</span></span><span style="display:flex;"><span>dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span>
</span></span></code></pre></div><p>题目考察的应该就是典型的dp泄露问题，这里就进行简单的公式推导：
$$ n = p \cdot q $$</p>
<p>$$ \varphi(n) = (p-1) \cdot (q-1)  $$</p>
<p>$$  d_p \equiv d\ mod\ (p-1) $$</p>
<p>$$ d \equiv e^{-1}\ mod\  \varphi(n) $$</p>
<p>根据已知信息进行推导：</p>
<p>$$ d = e^{-1} + k(p-1)(q-1) \Rightarrow dp \equiv e^{-1} mod\ (p-1)\   $$</p>
<p>同理，也可以推导出：</p>
<p>$$ d = e^{-1} + k(p-1)(q-1) \Rightarrow dp \equiv e^{-1} mod\ (q-1)\  $$</p>
<p>易得：</p>
<p>$$ dp \cdot e -1 = k \cdot (q-1) $$</p>
<p>爆破出k即可求得的q值，进一步即可求得结果，这里使用一个python脚本求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span>
</span></span><span style="display:flex;"><span>dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>temp <span style="color:#f92672">=</span> dp <span style="color:#f92672">*</span>e
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>,e):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (temp<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">%</span>i <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> (temp<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">//</span>i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>        y <span style="color:#f92672">=</span> n<span style="color:#f92672">%</span>x
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> y <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>            p<span style="color:#f92672">=</span>x
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span> p
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print p</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># print q</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> long_to_bytes(m)
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本即可求出flag：flag{wow_leaking_dp_breaks_rsa?_98924743502}</p>
<h3 id="0xa-异性相吸">0xA 异性相吸</h3>
<p>看题目，应该是考察异或操作的题目</p>
<p>下载附件，查看附件</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-9.png" alt="img">附件内容</p>
<p>两个文件，应该是使用异或处理最终得到结果，这里使用一个python脚本进行文件的二进制数据读取，然后进行异或操作求解出flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># env = python3</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> struct
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 读取key.txt文件</span>
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;key.txt&#34;</span>,mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rb&#34;</span>)
</span></span><span style="display:flex;"><span>k <span style="color:#f92672">=</span> key<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>key<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 读取密文.txt文件</span>
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;密文.txt&#34;</span>,mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rb&#34;</span>)
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>cipher<span style="color:#f92672">.</span>close()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 文件二进制数据进行异或处理</span>
</span></span><span style="display:flex;"><span>m<span style="color:#f92672">=</span>int<span style="color:#f92672">.</span>from_bytes(c,byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;big&#34;</span>,signed<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#f92672">^</span>int<span style="color:#f92672">.</span>from_bytes(k,byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;big&#34;</span>,signed<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 求解flag</span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> long_to_bytes(m)<span style="color:#f92672">.</span>decode()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>运行脚本得到flag：flag{ea1bc0988992276b7f95b54a7435e89e}</p>
<h3 id="0xb-rsa">0xB RSA</h3>
<p>RSA题目，直接下载附件，查看附件</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-10.png" alt="img">附件内容</p>
<p>常规的RSA题目，使用openssl工具进行公钥文件的读取和私钥文件的解密</p>
<p>首先使用openssl对公钥文件进行解析：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>&gt; openssl rsa -pubin -in pub.key -modulus -text
</span></span><span style="display:flex;"><span>RSA Public-Key: <span style="color:#f92672">(</span><span style="color:#ae81ff">256</span> bit<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Modulus:
</span></span><span style="display:flex;"><span>    00:c0:33:2c:5c:64:ae:47:18:2f:6c:1c:87:6d:42:
</span></span><span style="display:flex;"><span>    33:69:10:54:5a:58:f7:ee:fe:fc:0b:ca:af:5a:f3:
</span></span><span style="display:flex;"><span>    41:cc:dd
</span></span><span style="display:flex;"><span>Exponent: <span style="color:#ae81ff">65537</span> <span style="color:#f92672">(</span>0x10001<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Modulus<span style="color:#f92672">=</span>C0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD
</span></span><span style="display:flex;"><span>writing RSA key
</span></span><span style="display:flex;"><span>-----BEGIN PUBLIC KEY-----
</span></span><span style="display:flex;"><span>MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMAzLFxkrkcYL2wch21CM2kQVFpY9+7+
</span></span><span style="display:flex;"><span>/AvKr1rzQczdAgMBAAE<span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>-----END PUBLIC KEY-----
</span></span></code></pre></div><p>获得到了n和e</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xC0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span></code></pre></div><p>使用<a href="http://factordb.com/">factordb</a>进行大数分解</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-11-1024x124.png" alt="img">
得到p和q：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>p<span style="color:#f92672">=</span><span style="color:#ae81ff">285960468890451637935629440372639283459</span>
</span></span><span style="display:flex;"><span>q<span style="color:#f92672">=</span><span style="color:#ae81ff">304008741604601924494328155975272418463</span>
</span></span></code></pre></div><p>根据已知的信息，编写python脚本，来获取flag：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> rsa
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> <span style="color:#ae81ff">86934482296048119190666062003494800588905656017203025617216654058378322103517</span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">285960468890451637935629440372639283459</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">304008741604601924494328155975272418463</span>
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>key <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>PrivateKey(n,e,d,p,q)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;flag.enc&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    f <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>decrypt(f,key)<span style="color:#f92672">.</span>decode()
</span></span><span style="display:flex;"><span>    print(flag)
</span></span></code></pre></div><p>执行脚本，获取到flag：flag{decrypt_256}</p>
<h3 id="0xc-还原大师">0xC 还原大师</h3>
<p>打开题目描述：</p>
<pre tabindex="0"><code>我们得到了一串神秘字符串：TASC?O3RJMV?WDJKX?ZM,问号部分是未知大写字母，为了确定这个神秘字符串，我们通过了其他途径获得了这个字串的32位MD5码。但是我们获得它的32位MD5码也是残缺不全，E903???4DAB????08?????51?80??8A?,请猜出神秘字符串的原本模样，并且提交这个字串的32位MD5码作为答案。 注意：得到的 flag 请包上 flag{} 提交
</code></pre><p>题目应该是考察md5加密的暴力破解来还原md5的数值：</p>
<p>根据题目要求编写python脚本进行还原：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span>cipher_dict<span style="color:#f92672">=</span>[]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">65</span>,<span style="color:#ae81ff">91</span>):
</span></span><span style="display:flex;"><span>    cipher_dict<span style="color:#f92672">.</span>append(chr(i))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">md5_encrypt</span>(m):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> hashlib<span style="color:#f92672">.</span>md5(m)<span style="color:#f92672">.</span>hexdigest()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TASC?O3RJMV?WDJKX?ZM&#34;</span>
</span></span><span style="display:flex;"><span>cipher_list<span style="color:#f92672">=</span>[]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#e6db74">&#34;?&#34;</span> <span style="color:#f92672">in</span> cipher:
</span></span><span style="display:flex;"><span>    index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    cipher_list<span style="color:#f92672">.</span>append(cipher[:cipher<span style="color:#f92672">.</span>index(<span style="color:#e6db74">&#34;?&#34;</span>)])
</span></span><span style="display:flex;"><span>    cipher <span style="color:#f92672">=</span> cipher[cipher<span style="color:#f92672">.</span>index(<span style="color:#e6db74">&#34;?&#34;</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher_list<span style="color:#f92672">.</span>append(cipher)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_dict:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> cipher_dict:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> cipher_dict:
</span></span><span style="display:flex;"><span>            md5_str <span style="color:#f92672">=</span>md5_encrypt(cipher_list[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span>i<span style="color:#f92672">+</span>cipher_list[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span>j<span style="color:#f92672">+</span>cipher_list[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">+</span>k<span style="color:#f92672">+</span>cipher_list[<span style="color:#ae81ff">3</span>])<span style="color:#f92672">.</span>upper()
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> md5_str[:<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;E903&#34;</span>:
</span></span><span style="display:flex;"><span>                print <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>md5_str<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
</span></span><span style="display:flex;"><span>                print <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>md5_str<span style="color:#f92672">.</span>lower()<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span></code></pre></div><p>运行脚本就可以获得flag，结果有大写和小写，忘记了具体是要求提交小写flag和大写flag。</p>
<p>运行结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>flag<span style="color:#f92672">{</span>E9032994DABAC08080091151380478A2<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">{</span>e9032994dabac08080091151380478a2<span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="0xd-unencode">0xD Unencode</h3>
<p>看题目应该是考察UUencode编码的题目</p>
<p>下载附件，查看附件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>89FQA9WMD&lt;V1A&lt;V1S83DY.#&lt;W3$Q,2TM]
</span></span></code></pre></div><p>丢<a href="http://ctf.ssleye.com/uu.html">在线工具</a>里面进行解码：</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-12-1024x431.png" alt="img"></p>
<p>解码即可获得flag：flag{dsdasdsa99877LLLKK}</p>
<h3 id="0xe-robomunication">0xE robomunication</h3>
<p>直接下载附件，查看附件：</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-13.png" alt="img">附件内容</p>
<p>发现是一个音频文件，听出来是如下内容：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>bbbb b bpbb bpbb ppp bpp bbbb bp p bb bbb p bbbb b pbp b pbpp bb p bb bbb pbbb ppp ppp bppb pbbb b b bppb
</span></span></code></pre></div><p>发现是一个摩尔斯电码加密，破译得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>HELLOWHATISTHEKEYITISBOOPBEEP
</span></span></code></pre></div><p>对单词进行分割可得：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>HELLO WHAT IS THE KEY IT IS BOOPBEEP
</span></span></code></pre></div><p>故flag是flag:flag{BOOPBEEP}</p>
<h3 id="0xf-rsaroll">0xF RSAROLL</h3>
<p>RSA题目，直接下载附件，查看附件</p>
<p>题目.txt</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>RSA roll！roll！roll！
</span></span><span style="display:flex;"><span>Only number and a-z
</span></span><span style="display:flex;"><span>（don&#39;t use editor
</span></span><span style="display:flex;"><span>which MS provide）
</span></span></code></pre></div><p>data.txt</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>{920139713,19}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>704796792
</span></span><span style="display:flex;"><span>752211152
</span></span><span style="display:flex;"><span>274704164
</span></span><span style="display:flex;"><span>18414022
</span></span><span style="display:flex;"><span>368270835
</span></span><span style="display:flex;"><span>483295235
</span></span><span style="display:flex;"><span>263072905
</span></span><span style="display:flex;"><span>459788476
</span></span><span style="display:flex;"><span>483295235
</span></span><span style="display:flex;"><span>459788476
</span></span><span style="display:flex;"><span>663551792
</span></span><span style="display:flex;"><span>475206804
</span></span><span style="display:flex;"><span>459788476
</span></span><span style="display:flex;"><span>428313374
</span></span><span style="display:flex;"><span>475206804
</span></span><span style="display:flex;"><span>459788476
</span></span><span style="display:flex;"><span>425392137
</span></span><span style="display:flex;"><span>704796792
</span></span><span style="display:flex;"><span>458265677
</span></span><span style="display:flex;"><span>341524652
</span></span><span style="display:flex;"><span>483295235
</span></span><span style="display:flex;"><span>534149509
</span></span><span style="display:flex;"><span>425392137
</span></span><span style="display:flex;"><span>428313374
</span></span><span style="display:flex;"><span>425392137
</span></span><span style="display:flex;"><span>341524652
</span></span><span style="display:flex;"><span>458265677
</span></span><span style="display:flex;"><span>263072905
</span></span><span style="display:flex;"><span>483295235
</span></span><span style="display:flex;"><span>828509797
</span></span><span style="display:flex;"><span>341524652
</span></span><span style="display:flex;"><span>425392137
</span></span><span style="display:flex;"><span>475206804
</span></span><span style="display:flex;"><span>428313374
</span></span><span style="display:flex;"><span>483295235
</span></span><span style="display:flex;"><span>475206804
</span></span><span style="display:flex;"><span>459788476
</span></span><span style="display:flex;"><span>306220148
</span></span></code></pre></div><p>题目考查RSA低加密指数攻击，但是这道题目，可以试试分解一下n然后进行一下拼接</p>
<p>首先可以先去<a href="http://factordb.com/">在线网站</a>进行大数分解：</p>
<p><img src="/images/BUUCTF-CRYPTO-2_writeup/image-14-1024x121.png" alt="img"></p>
<p>得到p和q的数值</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">18443</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">49891</span>
</span></span></code></pre></div><p>然后使用一个python脚本解决问题：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> libnum
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pub_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>cipher_list<span style="color:#f92672">=</span>[]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;data.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
</span></span><span style="display:flex;"><span>    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
</span></span><span style="display:flex;"><span>        line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;{&#34;</span> <span style="color:#f92672">in</span> line:
</span></span><span style="display:flex;"><span>            pub_str <span style="color:#f92672">=</span> line[<span style="color:#ae81ff">1</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">elif</span> line <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span>:
</span></span><span style="display:flex;"><span>            cipher_list<span style="color:#f92672">.</span>append(line)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pub_list<span style="color:#f92672">=</span> pub_str<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>)
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> int(pub_list[<span style="color:#ae81ff">0</span>])
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> int(pub_list[<span style="color:#ae81ff">1</span>])
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">18443</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">49891</span>
</span></span><span style="display:flex;"><span>phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_list:
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> pow(int(i),d,n)
</span></span><span style="display:flex;"><span>    plainer <span style="color:#f92672">=</span> long_to_bytes(m)
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">+=</span> plainer
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>运行脚本获得flag，即flag{13212je2ue28fy71w8u87y31r78eu1e2}</p>
<h2 id="参考">参考：</h2>
<ol>
<li>[标准中文电码(Chinese Commercial Code)简介、用途及查询](<a href="https://www.chasedream.com/show.aspx?id=4487&amp;cid=30#:~:text=">https://www.chasedream.com/show.aspx?id=4487&amp;cid=30#:~:text=</a>中文电码，又称：中文商用电码（Chinese commercial code%2C CCC）、中文电报码（Chinese telegraph,code%2C CTC）或中文电报明码（Chinese ordinary telegraph code%2C COTC），原本是用于电报之中传送中文信息的方法。)</li>
<li><a href="https://wiwiki.kfd.me/wiki/%E8%B1%AC%E5%9C%88%E5%AF%86%E7%A2%BC">猪圈密码-维基百科</a></li>
<li>[扩展欧几里得算法-百度百科](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a>扩展欧几里得算法/2029414?fromtitle=扩展欧几里德算法&amp;fromid=1053275#:~:text=扩展欧几里得算法 （英语：Extended Euclidean algorithm）是 欧几里得算法 （又叫辗转相除法）的扩展。 已知整数a、b，扩展欧几里得算法可以在求得a、b的 最大公约数,by %3D gcd (a%2Cb) 。 有两个数a%2Cb，对它们进行辗转相除法，可得它们的最大公约数——这是众所周知的。 然后，收集辗转相除法中产生的式子，倒回去，可以得到ax%2Bby%3Dgcd (a%2Cb)的整数解。)</li>
<li>[扩展欧几里得算法-维基百科](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a>扩展欧几里得算法/2029414?fromtitle=扩展欧几里德算法&amp;fromid=1053275#:~:text=扩展欧几里得算法 （英语：Extended Euclidean algorithm）是 欧几里得算法 （又叫辗转相除法）的扩展。 已知整数a、b，扩展欧几里得算法可以在求得a、b的 最大公约数,by %3D gcd (a%2Cb) 。 有两个数a%2Cb，对它们进行辗转相除法，可得它们的最大公约数——这是众所周知的。 然后，收集辗转相除法中产生的式子，倒回去，可以得到ax%2Bby%3Dgcd (a%2Cb)的整数解。)</li>
</ol>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>尽沾手襟 淋满眼眶</title>
            <link>/posts/%E5%B0%BD%E6%B2%BE%E6%89%8B%E8%A5%9F-%E6%B7%8B%E6%BB%A1%E7%9C%BC%E7%9C%B6/</link>
            <pubDate>Sat, 26 Jun 2021 08:24:32 +0800</pubDate>
            
            <guid>/posts/%E5%B0%BD%E6%B2%BE%E6%89%8B%E8%A5%9F-%E6%B7%8B%E6%BB%A1%E7%9C%BC%E7%9C%B6/</guid>
            <description>“再论RSA加密算法” 优美的数，自然的码
侦破数的逻辑
看透码的奥秘
RSA加密算法的算法结构是非常严谨的，具有良好的保密性和完整性。正确使用RSA加密算法，可以确保信息传输的安全性。但是根据现代密码学的研究和发现，RSA加密算法已经被攻破了。中国的王小云通过密码分析学的方法，破解了RSA加密算法。
而RSA加密算法在CTF比赛中的地位仍然是不容小视的，在CTF比赛中的密码学部分是经常出没。CTF的密码学题目往往是在考察参赛者对于密码学算法的理解，往往采用的是密码分析学的知识进行密码学破解。密码学经常使用的三个角色是Alice、Bob和Eva，这三个人往往是Alice和Bob在不安全的信道上进行传输信息，而Eva是在窃听不安全信道上面信息的窃听者。而CTF比赛中，参赛者往往就需要扮演Eva的角色，根据题目给到的信息进行密码破译，来获取到Flag。
说来说去，RSA加密算法，RSA加密算法其实就挺简单的，至少算法逻辑是比较简单的。但是在计算机的实际应用中，往往会有编码和其他各种加密的使用，进行综合性的安全性应用。RSA加密算法虽然是比较简单的算法过程，但是随着现代密码学的不断发展和进步，越来越多针对RSA加密算法的攻击方式，因而CTF也根据密码学研究是文献进行革新，演变出来了各种各样针对RSA攻击方法的破译算法。
CTF中RSA题目类型 CTF中常见的RSA题目类型有如下几类：^1^
公钥加密文
这是CTF中最常见最基础的题型，出题人会给你一个公钥文件（通常是以.pem或.pub结尾的文件）和密文（通常叫做flag.enc之类的），你需要分析公钥，提取出（N，e），通过各种攻击手段恢复私钥，然后去解密密文得到flag。
文本文档
对于第一种题型，耿直点的出题人直接给你一个txt文本文档，里面直接写出了（N，e，c）所对应的十进制数值，然后你直接拿去用就行了。当然也不都是给出（N，e，c）的值，有时还会给出其他一些参数，这时就需要思考，这题具体考察的什么攻击方法
pcap文件
有时出题人会给你一个流量包，你需要用wireshark等工具分析，然后根据流量包的通信信息，分析题目考察的攻击方法，你可以提取出所有你解题需要用到的参数，然后进行解密
本地脚本分析
题目会给你一个脚本和一段密文，一般为python编写，你需要逆向文件流程，分析脚本的加密过程，写出对应的解密脚本进行解密
远程脚本利用
这种题型一般难度较大。题目会给你一个运行在远程服务器上的python脚本和服务器地址，你需要分析脚本存在的漏洞，确定攻击算法，然后编写脚本与服务器交互，得到flag
密码学的题目类型也大致就是这些类型了，这些题目类型也展现出了密码学并不是孤立的存在，密码学与网络安全的各个方面都有着较大的联系，并彼此互联。
数据处理 CTF比赛中的CRYPTO题目类型往往会给到一些需要进行数据处理的文件格式：
基本上来说，RSA的题目都是围绕着c，m，e，d，n，p，q这几个参数展开的，但是题目一般不会直接给这种样子的参数，而是通过别的方式给出，这里就需要我们使用一些工具或者自己手工将这些参数提取出来。^2^
pem文件**：**针对此类文件可以直接使用openssl提取，大概使用过的方式有：
openssl rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc openssl rsa -pubin -text -modulus -in warmup -in public.pem pcap文件：针对此类文件可以使用wireshark follow一下。这种问题一般都是写了一个交互的crypto系统，所以可能产生多轮交互。
PPC模式：这种模式是上述pcap文件的交互版，会给一个端口进行一些crypto的交互，参数会在交互中给出。
第二个需要处理的就是明密文，这个方法多多，不多赘述。
RSA加密算法的攻击类型 RSA加密算法题目的攻击类型是各种各样的，常见的攻击方法：
模数分解 解决RSA题目最简单，最暴力，最好使的方法就是分解模数n。如果能够将n分解成功，成功得到p，q的取值，那么可求n的欧拉函数的值。
模数分解往往可以使用多种方式进行分解，素数分解向来就是数学研究领域比较难以攻克的内容。而RSA算法的保密性也是由于素数分解的困难。但是有些简单的RSA题目可以使用素数分解的方法来解决，常用的工具有：foctordb，sagemath
低加密指数攻击 在RSA中e也称为加密指数。由于e是可以随意选取的，选取小一点的e可以缩短加密时间，但是选取不当的话，就会造成安全问题。
e=3时的小明文攻击 当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。
即： $$ c\equiv; m^e ;mod; n $$
如果e=3，且 $ m^e&amp;lt;{n} $，那么：
$$ c= m^e,;e=3 $$</description>
            <content type="html"><![CDATA[<h2 id="再论rsa加密算法">“再论RSA加密算法”</h2>
<blockquote>
<p>优美的数，自然的码</p>
<p>侦破数的逻辑</p>
<p>看透码的奥秘</p>
</blockquote>
<p>RSA加密算法的算法结构是非常严谨的，具有良好的保密性和完整性。正确使用RSA加密算法，可以确保信息传输的安全性。但是根据现代密码学的研究和发现，RSA加密算法已经被攻破了。中国的王小云通过密码分析学的方法，破解了RSA加密算法。</p>
<p>而RSA加密算法在CTF比赛中的地位仍然是不容小视的，在CTF比赛中的密码学部分是经常出没。CTF的密码学题目往往是在考察参赛者对于密码学算法的理解，往往采用的是密码分析学的知识进行密码学破解。密码学经常使用的三个角色是Alice、Bob和Eva，这三个人往往是Alice和Bob在不安全的信道上进行传输信息，而Eva是在窃听不安全信道上面信息的窃听者。而CTF比赛中，参赛者往往就需要扮演Eva的角色，根据题目给到的信息进行密码破译，来获取到Flag。</p>
<p>说来说去，RSA加密算法，RSA加密算法其实就挺简单的，至少算法逻辑是比较简单的。但是在计算机的实际应用中，往往会有编码和其他各种加密的使用，进行综合性的安全性应用。RSA加密算法虽然是比较简单的算法过程，但是随着现代密码学的不断发展和进步，越来越多针对RSA加密算法的攻击方式，因而CTF也根据密码学研究是文献进行革新，演变出来了各种各样针对RSA攻击方法的破译算法。</p>
<h3 id="ctf中rsa题目类型">CTF中RSA题目类型</h3>
<p>CTF中常见的RSA题目类型有如下几类：^1^</p>
<p><strong>公钥加密文</strong></p>
<p>这是CTF中最常见最基础的题型，出题人会给你一个公钥文件（通常是以.pem或.pub结尾的文件）和密文（通常叫做flag.enc之类的），你需要分析公钥，提取出（N，e），通过各种攻击手段恢复私钥，然后去解密密文得到flag。</p>
<p><strong>文本文档</strong></p>
<p>对于第一种题型，耿直点的出题人直接给你一个txt文本文档，里面直接写出了（N，e，c）所对应的十进制数值，然后你直接拿去用就行了。当然也不都是给出（N，e，c）的值，有时还会给出其他一些参数，这时就需要思考，这题具体考察的什么攻击方法</p>
<p><strong>pcap文件</strong></p>
<p>有时出题人会给你一个流量包，你需要用wireshark等工具分析，然后根据流量包的通信信息，分析题目考察的攻击方法，你可以提取出所有你解题需要用到的参数，然后进行解密</p>
<p><strong>本地脚本分析</strong></p>
<p>题目会给你一个脚本和一段密文，一般为python编写，你需要逆向文件流程，分析脚本的加密过程，写出对应的解密脚本进行解密</p>
<p><strong>远程脚本利用</strong></p>
<p>这种题型一般难度较大。题目会给你一个运行在远程服务器上的python脚本和服务器地址，你需要分析脚本存在的漏洞，确定攻击算法，然后编写脚本与服务器交互，得到flag</p>
<p>密码学的题目类型也大致就是这些类型了，这些题目类型也展现出了密码学并不是孤立的存在，密码学与网络安全的各个方面都有着较大的联系，并彼此互联。</p>
<h3 id="数据处理">数据处理</h3>
<p>CTF比赛中的CRYPTO题目类型往往会给到一些需要进行数据处理的文件格式：</p>
<p>基本上来说，RSA的题目都是围绕着c，m，e，d，n，p，q这几个参数展开的，但是题目一般不会直接给这种样子的参数，而是通过别的方式给出，这里就需要我们使用一些工具或者自己手工将这些参数提取出来。^2^</p>
<p>pem文件**：**针对此类文件可以直接使用openssl提取，大概使用过的方式有：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>openssl   rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc
</span></span><span style="display:flex;"><span>openssl   rsa -pubin -text -modulus -in warmup -in public.pem
</span></span></code></pre></div><p>pcap文件：针对此类文件可以使用wireshark follow一下。这种问题一般都是写了一个交互的crypto系统，所以可能产生多轮交互。</p>
<p>PPC模式：这种模式是上述pcap文件的交互版，会给一个端口进行一些crypto的交互，参数会在交互中给出。</p>
<p>第二个需要处理的就是明密文，这个方法多多，不多赘述。</p>
<h3 id="rsa加密算法的攻击类型">RSA加密算法的攻击类型</h3>
<p>RSA加密算法题目的攻击类型是各种各样的，常见的攻击方法：</p>
<h4 id="模数分解">模数分解</h4>
<p>解决RSA题目最简单，最暴力，最好使的方法就是分解模数n。如果能够将n分解成功，成功得到p，q的取值，那么可求n的欧拉函数的值。</p>
<p>模数分解往往可以使用多种方式进行分解，素数分解向来就是数学研究领域比较难以攻克的内容。而RSA算法的保密性也是由于素数分解的困难。但是有些简单的RSA题目可以使用素数分解的方法来解决，常用的工具有：foctordb，sagemath</p>
<h3 id="低加密指数攻击">低加密指数攻击</h3>
<p>在RSA中e也称为加密指数。由于e是可以随意选取的，选取小一点的e可以缩短加密时间，但是选取不当的话，就会造成安全问题。</p>
<h4 id="e3时的小明文攻击">e=3时的小明文攻击</h4>
<p>当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。</p>
<p>即：
$$
c\equiv; m^e ;mod; n
$$</p>
<p>如果e=3，且 $ m^e&lt;{n} $，那么：</p>
<p>$$
c= m^e,;e=3
$$</p>
<p>$$
m=sqrt[3]{c}
$$</p>
<p>如果明文的三次方比n大，但是不是足够大，那么设k，有：</p>
<p>$$
c= m^e+kn
$$</p>
<p>爆破k，如果$ c-kn $能开三次根式，那么可以直接得到明文。</p>
<h4 id="低加密指数广播攻击">低加密指数广播攻击</h4>
<p>如果选取的加密指数较低，并且使用了相同的加密指数给一个接受者的群发送相同的信息，那么可以进行广播攻击得到明文。</p>
<p>即，选取了相同的加密指数e（这里取e=3），对相同的明文m进行了加密并进行了消息的传递，那么有：</p>
<p>$$
c_1\equiv m^e;mod ; n_1 $
$$
$$
c_2\equiv m^e;mod ; n_2 $
$$
$$
c_3\equiv m^e;mod;n_3
$$</p>
<p>对上述等式运用中国剩余定理，在e=3时，可以得到：</p>
<p>$$
c_x\equiv m^3;mod;n_1n_2n_3
$$</p>
<p>通过对 $ c_x $ 进行三次开方可以求得明文。</p>
<h3 id="低解密指数攻击">低解密指数攻击</h3>
<p>与低加密指数相同，低解密指数可以加快解密的过程，但是者也带来了安全问题。Wiener表示如果满足：</p>
<p>$$
d&lt;\frac{1}{3}g n^\frac{1}{4}
$$</p>
<p>那么一种基于连分数(一个数论当中的问题)的特殊攻击类型就可以危害RSA的安全。此时需要满足：</p>
<p>$$
q;&lt;;p;&lt;;2q
$$</p>
<p>如果满足上述条件，通过Wiener Attack可以在多项式时间中分解n。</p>
<p>rsa-wiener-attack的攻击源码开源在了github中，采取python编写，可以很容易使用。</p>
<h3 id="共模攻击">共模攻击</h3>
<p>如果在RSA的使用中使用了相同的模n对相同的明文m进行了加密，那么就可以在不分解n的情况下还原出明文m的值。</p>
<p>即：</p>
<p>$$
c_1\equiv m^{e_1};mod;n
$$
$$
c_2\equiv m^{e_2};mod;n
$$</p>
<p>此时不需要分解n，不需要求解私钥，如果两个加密指数互素，就可以通过共模攻击在两个密文和公钥被嗅探到的情况下还原出明文m的值。</p>
<p>过程如下，首先两个加密指数互质，则：</p>
<p>$$
(e_1,e_2)=1
$$</p>
<p>即存在$ s_2 $，$ s_2 $使得：</p>
<p>$$
s_1e_1+s_2e_2=1
$$</p>
<p>又因为：
$$
c_1 \equiv m^{e_1};mod;n
$$
$$
c_2\equiv m^{e_2};mod;n
$$</p>
<p>通过代入化简可以得出：
$$
c_1^{s_1}c_2^{s_2}\equiv;m;mod;n
$$</p>
<p>明文解出。</p>
<p>RSA的攻击方法肯定不止这五种，随着时代的发展和科技的进步，RSA加密算法被各种各样的破译算法进行攻破。而掌握这几种攻击算法，可以解决RSA题目中的大部分中等题目类型。比较难的题目，也就只能去多看看paper了。</p>
<h3 id="参考">参考</h3>
<ol>
<li><a href="https://www.freebuf.com/articles/others-articles/161475.html">CTF中RSA题型解题思路及技巧，附小白福利-FREEBUF</a></li>
<li><a href="https://www.anquanke.com/post/id/84632">【技术分享】CTF中RSA的常见攻击方法-安全客</a></li>
</ol>
<p>闲聊到此为止，来喝杯茶可好？</p>
]]></content>
        </item>
        
        <item>
            <title>清茶一盏 公杯斟茗</title>
            <link>/posts/%E6%B8%85%E8%8C%B6%E4%B8%80%E7%9B%8F-%E5%85%AC%E6%9D%AF%E6%96%9F%E8%8C%97/</link>
            <pubDate>Sat, 26 Jun 2021 08:20:02 +0800</pubDate>
            
            <guid>/posts/%E6%B8%85%E8%8C%B6%E4%B8%80%E7%9B%8F-%E5%85%AC%E6%9D%AF%E6%96%9F%E8%8C%97/</guid>
            <description>清茶一盏 公杯斟茗 上下运杯，左右轻斟
公杯，私茗，香满阑
清茶，浓茶，甘润田
然君闻几何？
要谈谈RSA加密算法，不妨先聊聊密码学的发展历史和密码学的历程。
密码学早在公元前400多年就已经产生，人类使用密码的历史几乎与使用文字的时间一样长，密码学的发展大致可以分为 3 个阶段: 1949 年之前的古典密码学阶段; 1949 年至 1975 年密码学成为科学的分支; 1976 年以后对称密钥密码算法得到进一步发展，产生了密码学的新方向—公钥密码学。1976 年，W.Diffie 和 M.Hellman 在发表的文章“密码学的新方向”中首次公开提出了公钥密码( Public-key Cryptography) 的概念。公钥密码的提出实现了加密密钥和解密密钥之间的独立，解决了对称密码体制中通信双方必须共享密钥的问题，在密码学界具有划时代的意义。^1^
密码学的历史非常悠久，但是密码学的发展速度并不是非常迅速，直到信息时代的到来以及网络空间安全面临着巨大的威胁，密码学得到了前所未有的飞速发展，RSA公钥密码就是其中的代表。密码学中研究的对象有大致三类：
对称密码 非对称密码 协议 而RSA密码属于非对称密码，公钥密码。RSA也是现代密码学的代表性的内容部分，那么非常经典的RSA密码就是一个什么样的密码呢？
首先，要搞清楚什么是RSA密码：
RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）在1977年一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。
1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中提出了一个与之等效的算法，但该算法被列入机密，直到1997年才得到公开。
对极大整数做因数分解的难度决定了 RSA 算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的 RSA 钥匙才可能被强力方式破解。到目前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的。^2^
RSA加密算法就是三个人提出的一个非对称加密的算法，是一种公钥算法。RSA加密算法进行加密的信息具有良好的安全性和可靠性，正确地使用RSA加密算法可以应对互联网上的大多数针对密码进行的攻击。
RSA加密算法的具体内容是什么呢？
（这里借鉴一下阮一峰的个人博客进行说明）^3^
（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。
（2）甲方获取乙方的公钥，然后用它对信息加密。
（3）乙方得到加密后的信息，用私钥解密。
这是非对称加密的总体流程，简单来说就是公钥加密，私钥解密的算法模式。而RSA加密算法就是公钥算法中的代表性的算法，这经典算法的基本原理还是比较简单易懂的。
RSA加密算法需要一点点的数学基础，也可以说是数论基础。
数学基础 模运算：模运算也可以说是用取余的运算方式
$$ a \equiv b(mod; m)$$
这是最简单的模运算公式，也可以使用简单的Python语法实现：
b = a % m # python语言中%可以进行取余运算 整数环：模运算的延申，无论模运算中的数怎么加减乘除都在模的一个整数环中。</description>
            <content type="html"><![CDATA[<h1 id="清茶一盏-公杯斟茗">清茶一盏 公杯斟茗</h1>
<blockquote>
<p>上下运杯，左右轻斟</p>
<p>公杯，私茗，香满阑</p>
<p>清茶，浓茶，甘润田</p>
<p>然君闻几何？</p>
</blockquote>
<p>要谈谈RSA加密算法，不妨先聊聊密码学的发展历史和密码学的历程。</p>
<p>密码学早在公元前400多年就已经产生，人类使用密码的历史几乎与使用文字的时间一样长，密码学的发展大致可以分为 3 个阶段: 1949 年之前的古典密码学阶段; 1949 年至 1975 年密码学成为科学的分支; 1976 年以后对称密钥密码算法得到进一步发展，产生了密码学的新方向—公钥密码学。1976 年，W.Diffie 和 M.Hellman 在发表的文章“密码学的新方向”中首次公开提出了公钥密码( Public-key Cryptography) 的概念。公钥密码的提出实现了加密密钥和解密密钥之间的独立，解决了对称密码体制中通信双方必须共享密钥的问题，在密码学界具有划时代的意义。^1^</p>
<p>密码学的历史非常悠久，但是密码学的发展速度并不是非常迅速，直到信息时代的到来以及网络空间安全面临着巨大的威胁，密码学得到了前所未有的飞速发展，RSA公钥密码就是其中的代表。密码学中研究的对象有大致三类：</p>
<ol>
<li>对称密码</li>
<li>非对称密码</li>
<li>协议</li>
</ol>
<p>而RSA密码属于非对称密码，公钥密码。RSA也是现代密码学的代表性的内容部分，那么非常经典的RSA密码就是一个什么样的密码呢？</p>
<p>首先，要搞清楚什么是RSA密码：</p>
<p>RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）在1977年一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p>
<p>1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中提出了一个与之等效的算法，但该算法被列入机密，直到1997年才得到公开。</p>
<p>对极大整数做因数分解的难度决定了 RSA 算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的 RSA 钥匙才可能被强力方式破解。到目前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的。^2^</p>
<p>RSA加密算法就是三个人提出的一个非对称加密的算法，是一种公钥算法。RSA加密算法进行加密的信息具有良好的安全性和可靠性，正确地使用RSA加密算法可以应对互联网上的大多数针对密码进行的攻击。</p>
<p>RSA加密算法的具体内容是什么呢？</p>
<p>（这里借鉴一下阮一峰的个人博客进行说明）^3^</p>
<blockquote>
<p>（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。</p>
<p>（2）甲方获取乙方的公钥，然后用它对信息加密。</p>
<p>（3）乙方得到加密后的信息，用私钥解密。</p>
</blockquote>
<p>这是非对称加密的总体流程，简单来说就是公钥加密，私钥解密的算法模式。而RSA加密算法就是公钥算法中的代表性的算法，这经典算法的基本原理还是比较简单易懂的。</p>
<p>RSA加密算法需要一点点的数学基础，也可以说是数论基础。</p>
<h3 id="数学基础">数学基础</h3>
<p><strong>模运算：模运算也可以说是用取余的运算方式</strong></p>
<p>$$ a \equiv b(mod; m)$$</p>
<p>这是最简单的模运算公式，也可以使用简单的Python语法实现：</p>
<pre tabindex="0"><code>b = a % m # python语言中%可以进行取余运算
</code></pre><p><strong>整数环：模运算的延申，无论模运算中的数怎么加减乘除都在模的一个整数环中。</strong></p>
<p>在数论的概念中，模运算主要是针对自然数进行的研究，模运算也是如此。可以把整数环想象成一个钟表，钟表有12个数字，无论怎么加减乘除钟表的数字，指针始终都指在钟表的环中。</p>
<p>这里用简单的数学语言进行表示：</p>
<p>$$ a + c\equiv e(mod;12)$$</p>
<p>$$ a \cdot c\equiv f(mod;12)$$</p>
<p>当然也可以使用Python语法进行表示：</p>
<pre tabindex="0"><code>e = (a+c) % 12
f = (a*c) % 12
</code></pre><p><strong>欧拉函数：求小于该数的素数个数多少的问题的最佳解决方案。</strong></p>
<p>欧拉函数也是数论里面比较重要的概念，欧拉函数的特点使得RSA加密算法有良好的加密性和安全性。</p>
<p>在讲欧拉函数之前，先阐述一下素数的概念：</p>
<blockquote>
<p>素数也叫质数，素数就是只能被1和自身整除的数</p>
<p>互素也叫互质，如果两个数的最大公因数是1，那么则称这两个数是互素的</p>
</blockquote>
<p>什么是欧拉函数呢？</p>
<p>欧拉函数一般使用 φ(n) 表示，一般来说是分为两种情况的：</p>
<p>（1） n是一个素数：</p>
<p>$$ \varphi (n)= n-1$$</p>
<p>（2）n不是一个素数，但是n是两个素数的乘积：</p>
<p>$$ \varphi (n) = (p-1) \cdot (q-1) $$</p>
<p>这就是欧拉函数，和欧拉函数一起使用的还有一个欧拉定理：</p>
<p>在数论中，欧拉定理,（也称费马-欧拉定理）是一个关于同余的性质。欧拉定理表明，若n,a为正整数，且n,a互质，则:</p>
<p>$$ a ^{\varphi(n)} \equiv 1(mod; n) $$</p>
<p>这些大致就是欧拉函数和欧拉定理的大致内容，都是规律性的总结，在RSA算法中加以使用就可以了。</p>
<p><strong>模反元素：如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1。</strong>^3^</p>
<p>这里可以使用数学语言进行解释一下：</p>
<p>$$ a \cdot b \equiv 1(mod;m) $$</p>
<p>就是两个数进行模乘法运算得到的结果是1的两个数互为模反元素，也叫逆元。</p>
<p>在这个等式中，可以说a是b的逆元，也可以说是b是a的逆元。</p>
<p><strong>最后一个数学概念：单向函数，公钥加密算法的核心原理</strong></p>
<p>单向函数就是由x求y简单，而由y求x比较困难的函数叫做单向函数：</p>
<p>$$ y = f(x) $$</p>
<p>$$ x = f^{-1}(y) $$</p>
<p>由于单向函数概念的出现，使得公钥加密私钥解密成为现实。</p>
<p>可是单向函数只是使加密变得容易，而并没有使解密变得容易。于是一个陷门的概念提出使公钥加密私钥解密的加密算法模式真正的变成现实。</p>
<p>什么是陷门呢？</p>
<p>陷门的概念就好比网络安全的后门，单向函数解密不是非常困难嘛，而陷门就是一个特殊的数值可以使单向函数进行解密变得简单。于是陷门就可以作为私钥进行解密。</p>
<p>RSA公钥加密算法的数学知识大致就是这些了。</p>
<p>下面，来聊一聊RSA公钥加密算法的具体过程。</p>
<h3 id="rsa加密算法">RSA加密算法</h3>
<ol>
<li>首先随机选择两个不相等的素数p和q</li>
<li>计算p和q的乘积n</li>
<li>计算n的欧拉函数发φ(n)</li>
<li>随机选择一个整数e，e满足的条件是：1&lt;e&lt;φ(n)</li>
<li>计算e对于φ(n)的模反元素d</li>
<li>将n和e封装成公钥，将n和d封装成私钥</li>
</ol>
<p>具体流程用数学的语言描述：</p>
<p>$$ 1. \quad  p , q$$</p>
<p>$$ 2. \quad p\cdot q = n $$</p>
<p>$$ 3. \quad \varphi (n) $$</p>
<p>$$ 4. \quad  1&lt;e&lt;\varphi (n) $$</p>
<p>$$ 5. \quad e \cdot d \equiv 1 (mod; \varphi (n)) $$</p>
<p>$$ 6. \quad (n , e) , (n , d) $$</p>
<p>当然也可使用python语句进行设计：4</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> gmpy2 <span style="color:#f92672">import</span> mpz
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> binascii
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>rs <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>random_state()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#生成大素数（0-2^1024位）</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_prime</span>():
</span></span><span style="display:flex;"><span>    p <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>mpz_urandomb(rs,<span style="color:#ae81ff">1024</span>)         <span style="color:#75715e">#随机生成一个0~2^1024位的数</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> <span style="color:#f92672">not</span> gmpy2<span style="color:#f92672">.</span>is_prime(p):            <span style="color:#75715e">#判断生成的数是否是素数</span>
</span></span><span style="display:flex;"><span>        p <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>mpz_urandomb(rs,<span style="color:#ae81ff">1024</span>)     
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> p
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#生成密钥e,d</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_e_d</span>(phi):
</span></span><span style="display:flex;"><span>    e <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>mpz_random(rs,phi)            
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> gmpy2<span style="color:#f92672">.</span>gcd(e,phi) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>:
</span></span><span style="display:flex;"><span>        e <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>mpz_random(rs,phi)        <span style="color:#75715e">#随机生成一个0~phi的,与phi互素的数</span>
</span></span><span style="display:flex;"><span>    d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)                 <span style="color:#75715e">#生成d</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> e,d
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#rsa加密</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encrypt</span>(plain_text,e,n):
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> mpz(binascii<span style="color:#f92672">.</span>hexlify(plain_text<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;utf-8&#39;</span>)), <span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span>    cipher_text <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>powmod(m,e,n)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> cipher_text
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#rsa解密</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt</span>(cipher_text,d,n):
</span></span><span style="display:flex;"><span>    m <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>powmod(cipher_text,d,n)
</span></span><span style="display:flex;"><span>    plain_text <span style="color:#f92672">=</span> binascii<span style="color:#f92672">.</span>unhexlify(format(m, <span style="color:#e6db74">&#39;x&#39;</span>))<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> plain_text
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    p <span style="color:#f92672">=</span> create_prime()
</span></span><span style="display:flex;"><span>    q <span style="color:#f92672">=</span> create_prime()
</span></span><span style="display:flex;"><span>    n <span style="color:#f92672">=</span> p <span style="color:#f92672">*</span> q
</span></span><span style="display:flex;"><span>    phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>    e,d <span style="color:#f92672">=</span> get_e_d(phi)
</span></span><span style="display:flex;"><span>    plain_text <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;请输入明文：&#34;</span>)
</span></span><span style="display:flex;"><span>    cipher_text <span style="color:#f92672">=</span> encrypt(plain_text,e,n)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;RSA加密后的密文是：</span><span style="color:#e6db74">%x</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">%</span>cipher_text)
</span></span><span style="display:flex;"><span>    plain_text1 <span style="color:#f92672">=</span> decrypt(cipher_text,d,n)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;RSA解密后的明文是：</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(plain_text1))
</span></span></code></pre></div><p>RSA的加密流程非常简单，只需要大致记忆就可以对RSA算法流程非常清晰，而且明了于心。同时，也会出现一些疑问，这么安全的加密算法会有什么样的漏洞会在CTF比赛中让CTF选手进行攻击呢？</p>
<p>无论再安全的算法，都有可以破解的漏洞存在，“没有绝对安全的系统”。时代在进步，密码学算法也在一步一步的提升，下一篇将揭示RSA公钥密码的常见攻击手段。</p>
<h3 id="参考">参考</h3>
<ol>
<li><a href="https://blog.csdn.net/jiang_xinxing/article/details/89360638">密码学发展简史-CSDN</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/RSA">RSA加密算法-维基百科</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">RSA算法原理-阮一峰</a></li>
<li><a href="https://blog.csdn.net/weixin_43790779/article/details/105999977">python实现RSA算法</a></li>
</ol>
<p>闲聊到此为止，来喝杯茶可好？</p>
]]></content>
        </item>
        
        <item>
            <title>BUUCTF CRYPTO (1) writeup</title>
            <link>/posts/buuctf-crypto-1_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 08:12:56 +0800</pubDate>
            
            <guid>/posts/buuctf-crypto-1_writeup/</guid>
            <description>日常刷题喝茶的平时生活，整理一下题目的思路，捋一捋密码学。
BUUCTF是国内另一个比较不错的CTF的刷题平台，是由北京联合大学创建并维护的CTF大型同性交流沟通的平台，页面制作还是蛮美观滴！
BUUCTF页面
BUUCTF的整体难度是由简单变难的一个过程，前面的题目通常都是比较简单的题目，来看看这次日常的题目：
题目
这次是16道题目：
MD5 Url编码 一眼就解密 看我回旋踢 摩丝 password 变异凯撒 Quoted-printable Rabbit 篱笆墙的影子 RSA 丢失的MD5 Alice与Bob rsarsa 大帝的密码武器 Windows系统密码 MD5 看题目应该是考察MD5加密的暴力破解
什么是MD5加密？
MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。这套算法的程序在 RFC 1321 中被加以规范。
将数据（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。
1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的资料，专家一般建议改用其他算法，如SHA-2。2004年，证实MD5算法无法防止碰撞攻击（英语：Collision_attack），因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。[1]
看看题目描述：
题目描述
下载附件，查看附件内容：
附件内容
附件中给出一段加密数据：e00cf25ad42683b3df678c61f42c6bda
根据题目，应该是MD5加密，去解密网站
进行解密。
cmd5
题目描述中，要求以flag{}形式进行提交，故flag就是flag{admin1}
这道题目考察md5加密的相关知识，签到题。
Url编码 看题目应该是考察Url编码的解码
什么是Url编码？
百分号编码（英语：Percent-encoding），又称：URL编码（URL encoding）是特定上下文的统一资源定位符 （URL）的编码机制，实际上也适用于统一资源标志符（URI）的编码。也用于为 application/x-www-form-urlencoded MIME准备数据，因为它用于通过HTTP的请求操作（request）提交HTML表单数据。[2]
看看题目描述：
题目描述
下载附件，查看附件内容：
附件内容
一段编码的字段：%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d
使用url解码工具解码，也可以使用python进行解码。我个人习惯使用python脚本进行url编码解码：
import urllib.parse cipher = &amp;#39;%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d&amp;#39; print(urllib.parse.unquote(cipher)) 运行脚本就可以出结果：
解码后也就是flag数据：flag{and 1=1}
故本题的flag是flag{and 1=1}</description>
            <content type="html"><![CDATA[<p>日常刷题喝茶的平时生活，整理一下题目的思路，捋一捋密码学。</p>
<p>BUUCTF是国内另一个比较不错的CTF的刷题平台，是由北京联合大学创建并维护的CTF大型同性交流沟通的平台，页面制作还是蛮美观滴！</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-58-1024x717.png" alt="img">BUUCTF页面</p>
<p>BUUCTF的整体难度是由简单变难的一个过程，前面的题目通常都是比较简单的题目，来看看这次日常的题目：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-59.png" alt="img">题目</p>
<p>这次是16道题目：</p>
<ul>
<li>MD5</li>
<li>Url编码</li>
<li>一眼就解密</li>
<li>看我回旋踢</li>
<li>摩丝</li>
<li>password</li>
<li>变异凯撒</li>
<li>Quoted-printable</li>
<li>Rabbit</li>
<li>篱笆墙的影子</li>
<li>RSA</li>
<li>丢失的MD5</li>
<li>Alice与Bob</li>
<li>rsarsa</li>
<li>大帝的密码武器</li>
<li>Windows系统密码</li>
</ul>
<h2 id="md5">MD5</h2>
<p>看题目应该是考察MD5加密的暴力破解</p>
<p>什么是MD5加密？</p>
<p>MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。这套算法的程序在 RFC 1321 中被加以规范。</p>
<p>将数据（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。</p>
<p>1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的资料，专家一般建议改用其他算法，如SHA-2。2004年，证实MD5算法无法防止碰撞攻击（英语：Collision_attack），因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。[1]</p>
<p>看看题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-60.png" alt="img"></p>
<p>题目描述</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-61.png" alt="img"></p>
<p>附件内容</p>
<p>附件中给出一段加密数据：e00cf25ad42683b3df678c61f42c6bda</p>
<p>根据题目，应该是MD5加密，去<a href="https://www.cmd5.com/">解密网站</a></p>
<p>进行解密。</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-62.png" alt="img">cmd5</p>
<p>题目描述中，要求以flag{}形式进行提交，故flag就是flag{admin1}</p>
<p>这道题目考察md5加密的相关知识，签到题。</p>
<h2 id="url编码">Url编码</h2>
<p>看题目应该是考察Url编码的解码</p>
<p>什么是Url编码？</p>
<p>百分号编码（英语：Percent-encoding），又称：URL编码（URL encoding）是特定上下文的统一资源定位符 （URL）的编码机制，实际上也适用于统一资源标志符（URI）的编码。也用于为 application/x-www-form-urlencoded MIME准备数据，因为它用于通过HTTP的请求操作（request）提交HTML表单数据。[2]</p>
<p>看看题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-63.png" alt="img"></p>
<p>题目描述</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-64.png" alt="img"></p>
<p>附件内容</p>
<p>一段编码的字段：%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d</p>
<p>使用url解码工具解码，也可以使用python进行解码。我个人习惯使用python脚本进行url编码解码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> urllib.parse
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%66%</span><span style="color:#e6db74">6c</span><span style="color:#e6db74">%61%</span><span style="color:#e6db74">67%7b</span><span style="color:#e6db74">%61%</span><span style="color:#e6db74">6e</span><span style="color:#e6db74">%64%</span><span style="color:#e6db74">20</span><span style="color:#e6db74">%31%</span><span style="color:#e6db74">3d</span><span style="color:#e6db74">%31%</span><span style="color:#e6db74">7d&#39;</span>
</span></span><span style="display:flex;"><span>print(urllib<span style="color:#f92672">.</span>parse<span style="color:#f92672">.</span>unquote(cipher))
</span></span></code></pre></div><p>运行脚本就可以出结果：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-65.png" alt="img"></p>
<p>解码后也就是flag数据：flag{and 1=1}</p>
<p>故本题的flag是flag{and 1=1}</p>
<p>题目主要考察URL编码，签到题。</p>
<h2 id="一眼就解密">一眼就解密</h2>
<p>题目给不了太多提示</p>
<p>直接点开题目描述看内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-66.png" alt="img"></p>
<p>题目描述</p>
<p>看题目描述中的字符串，字符串的样子像是base64编码：ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=</p>
<p>这里一个脚本进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=&#34;</span>
</span></span><span style="display:flex;"><span>plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>plainer <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(cipher)
</span></span><span style="display:flex;"><span>print plainer
</span></span></code></pre></div><p>运行程序求解得到：flag{THE_FLAG_OF_THIS_STRING}</p>
<p>故本题的flag是flag{THE_FLAG_OF_THIS_STRING}</p>
<p>题目考察base64编码，签到题。</p>
<h2 id="看我回旋踢">看我回旋踢</h2>
<p>看题目，暂时想不出什么密码相关联的内容。</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-67.png" alt="img"></p>
<p>题目描述</p>
<p>只提示了题目提交的flag数据的格式信息</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-68.png" alt="img"></p>
<p>附件内容</p>
<p>看附件给出的字符形式像是替换密码加密的数据，最容易联想到的替换密码就是凯撒密码，尝试使用凯撒密码进行解密：（这里一个脚本求解凯撒密码）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>dict_list <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
</span></span><span style="display:flex;"><span>    dict_list<span style="color:#f92672">.</span>append(chr(ord(<span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">+</span>i))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
</span></span><span style="display:flex;"><span>    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
</span></span><span style="display:flex;"><span>            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>n)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            plainer <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print plainer
</span></span></code></pre></div><blockquote>
<p>凯撒密码的算法思路，在上一篇XCTF CRYPTO的WP中有提到，具体内容可以访问上一篇：</p>
<p><a href="http://zkinghar.top/?p=463">XCTF-CRYPTO-新手区 writeup</a></p>
</blockquote>
<p>运行脚本程序，得到一堆凯撒解密的结果：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>synt<span style="color:#f92672">{</span>5pq1004q-86n5-46q8-o720-oro5on0417r1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>rxms<span style="color:#f92672">{</span>5op1004p-86m5-46p8-n720-nqn5nm0417q1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>qwlr<span style="color:#f92672">{</span>5no1004o-86l5-46o8-m720-mpm5ml0417p1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>pvkq<span style="color:#f92672">{</span>5mn1004n-86k5-46n8-l720-lol5lk0417o1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>oujp<span style="color:#f92672">{</span>5lm1004m-86j5-46m8-k720-knk5kj0417n1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>ntio<span style="color:#f92672">{</span>5kl1004l-86i5-46l8-j720-jmj5ji0417m1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>mshn<span style="color:#f92672">{</span>5jk1004k-86h5-46k8-i720-ili5ih0417l1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>lrgm<span style="color:#f92672">{</span>5ij1004j-86g5-46j8-h720-hkh5hg0417k1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>kqfl<span style="color:#f92672">{</span>5hi1004i-86f5-46i8-g720-gjg5gf0417j1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>jpek<span style="color:#f92672">{</span>5gh1004h-86e5-46h8-f720-fif5fe0417i1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>iodj<span style="color:#f92672">{</span>5fg1004g-86d5-46g8-e720-ehe5ed0417h1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>hnci<span style="color:#f92672">{</span>5ef1004f-86c5-46f8-d720-dgd5dc0417g1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>gmbh<span style="color:#f92672">{</span>5de1004e-86b5-46e8-c720-cfc5cb0417f1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">{</span>5cd1004d-86a5-46d8-b720-beb5ba0417e1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>ekzf<span style="color:#f92672">{</span>5bc1004c-86z5-46c8-a720-ada5az0417d1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>djye<span style="color:#f92672">{</span>5ab1004b-86y5-46b8-z720-zcz5zy0417c1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>cixd<span style="color:#f92672">{</span>5za1004a-86x5-46a8-y720-yby5yx0417b1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>bhwc<span style="color:#f92672">{</span>5yz1004z-86w5-46z8-x720-xax5xw0417a1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>agvb<span style="color:#f92672">{</span>5xy1004y-86v5-46y8-w720-wzw5wv0417z1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>zfua<span style="color:#f92672">{</span>5wx1004x-86u5-46x8-v720-vyv5vu0417y1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>yetz<span style="color:#f92672">{</span>5vw1004w-86t5-46w8-u720-uxu5ut0417x1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>xdsy<span style="color:#f92672">{</span>5uv1004v-86s5-46v8-t720-twt5ts0417w1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>wcrx<span style="color:#f92672">{</span>5tu1004u-86r5-46u8-s720-svs5sr0417v1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>vbqw<span style="color:#f92672">{</span>5st1004t-86q5-46t8-r720-rur5rq0417u1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>uapv<span style="color:#f92672">{</span>5rs1004s-86p5-46s8-q720-qtq5qp0417t1<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>tzou<span style="color:#f92672">{</span>5qr1004r-86o5-46r8-p720-psp5po0417s1<span style="color:#f92672">}</span>
</span></span></code></pre></div><p>在解密的字符列表中，找到符合flag格式的字符段：</p>
<p>flag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}</p>
<p>故本题的flag是：flag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}</p>
<p>题目主要考察凯撒密码，签到题。</p>
<h2 id="摩丝">摩丝</h2>
<p>看题目，可以联想到Morse电码，这题目应该是摩尔斯密码的解密题目</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-69.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述只说了flag{}的格式，下载附件并查看：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-70.png" alt="img"></p>
<p>附件内容</p>
<p>果然是摩尔斯密码，这里一个脚本解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>dict_list <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;.-&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;-...&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;-.-.&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;-..&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;.&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;..-.&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;--.&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;....&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;..&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;.---&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;-.-&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;.-..&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;--&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;-.&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;---&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;.--.&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;--.-&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;.-.&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;...&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;-&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;..-&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;...-&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;.--&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;-..-&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;-.--&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;--..&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;-----&#39;</span>:<span style="color:#e6db74">&#39;0&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;.----&#39;</span>:<span style="color:#e6db74">&#39;1&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;..---&#39;</span>:<span style="color:#e6db74">&#39;2&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;...--&#39;</span>:<span style="color:#e6db74">&#39;3&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;....-&#39;</span>:<span style="color:#e6db74">&#39;4&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;.....&#39;</span>:<span style="color:#e6db74">&#39;5&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;-....&#39;</span>:<span style="color:#e6db74">&#39;6&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;--...&#39;</span>:<span style="color:#e6db74">&#39;7&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;---..&#39;</span>:<span style="color:#e6db74">&#39;8&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;----.&#39;</span>:<span style="color:#e6db74">&#39;9&#39;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#39;..--.-&#39;</span>:<span style="color:#e6db74">&#39;_&#39;</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;.. .-.. --- ...- . -.-- --- ..-&#34;</span>
</span></span><span style="display:flex;"><span>plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
</span></span><span style="display:flex;"><span>    plainer <span style="color:#f92672">+=</span> dict_list[i]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print plainer<span style="color:#f92672">.</span>upper()
</span></span><span style="display:flex;"><span>print plainer<span style="color:#f92672">.</span>lower()
</span></span></code></pre></div><blockquote>
<p>摩尔斯电码的详细介绍，在上一篇XCTF CRYPTO的WP中有提到，具体内容可以访问上一篇：</p>
<p><a href="http://zkinghar.top/?p=463">XCTF-CRYPTO-新手区 writeup</a></p>
</blockquote>
<p>执行一下代码，得到两个数据：</p>
<pre tabindex="0"><code>ILOVEYOU
iloveyou
</code></pre><p>两个数据都可能是flag数据，我记得这道题目的flag数据好像是用大写的，即：flag{ILOVEYOU}，也有可能错。</p>
<p>题目主要考察摩尔斯电码相关知识，签到题。</p>
<h2 id="password">password</h2>
<p>看题目应该是与密码有关系的题目</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-71.png" alt="img"></p>
<p>题目描述</p>
<p>只有flag数据提交格式的相关信息，下载附件并打开：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-72.png" alt="img">附件内容</p>
<p>看到附件内容里面的信息，可以大致判断这道题目应该是社会工程学题目。</p>
<p>什么是社会工程学：</p>
<p>在计算机科学，社会工程学指的是通过与他人的合法交流，来使其心理受到影响，做出某些动作或者是透露一些机密信息的方式。这通常被认为是欺诈他人以收集信息、行骗和入侵计算机系统的行为。在英美普通法系，这一行为一般是被认作侵犯隐私权的。</p>
<p>历史上，社会工程学是隶属于社会学，不过其影响他人心理的效果引起了计算机安全专家的注意。3</p>
<p>简单来说，社会工程学就是利用人性的弱点来进行分析，得到关键性的信息的方式。社会工程学也就是互联网安全体系中存在的威胁性漏洞。</p>
<p>根据题目的信息，可以猜测flag数据可能是flag{zs19900315}或flag{19900315zs}</p>
<p>经过测试发现，flag数据是flag{zs19900315}</p>
<p>题目主要考察社会工程学的知识，签到题。</p>
<h2 id="变异凯撒">变异凯撒</h2>
<p>看题目应该是凯撒密码考察</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-73.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述一如既往的朴素，只告诉了提交的格式</p>
<p>下载附件，并查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-74.png" alt="img"></p>
<p>附件内容</p>
<p>密文中有很多编码的字符，字典集可能不是26字母表，可能是ascii编码表</p>
<p>分析一下附件的加密逻辑：（这里我写了一个小脚本）</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-75.png" alt="img">分析</p>
<p>分析发现移位是ascii码的移位方式，而且移位的数据是一个递增的数列，5作为初始数列，以1为差值的等差数列形式。明文的数值比密文的数值大一些。分析完毕。</p>
<p>这里还是一个脚本解决问题：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;afZ_r9VYfScOeO_UL^RWUc&#34;</span>
</span></span><span style="display:flex;"><span>plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>num <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
</span></span><span style="display:flex;"><span>    plainer <span style="color:#f92672">+=</span>chr(ord(i)<span style="color:#f92672">+</span>num)
</span></span><span style="display:flex;"><span>    num <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print plainer
</span></span></code></pre></div><p>执行脚本，得到flag数据：flag{Caesar_variation}</p>
<p>故flag数据是flag{Caesar_variation}</p>
<p>题目主要考察凯撒密码的原理，简单题。</p>
<h2 id="quoted-printable">Quoted-printable</h2>
<p>题目暂时看不出什么样的信息，题目翻译下来就是字符集</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-76.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述还是一如既往的buu的风格，没有什么提示性的描述</p>
<p>直接下载附件，并查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-77.png" alt="img">附件内容</p>
<p>看到内容，感觉是熟悉的味道：E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6</p>
<p>这里写个小脚本试试16进制解码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6&#34;</span>
</span></span><span style="display:flex;"><span>cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;=&#39;</span>)
</span></span><span style="display:flex;"><span>plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(cipher_arr)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>)
</span></span><span style="display:flex;"><span>print plainer
</span></span></code></pre></div><p>执行编写的脚本，得到数据：那你也很棒哦</p>
<p>这个数据应该就是flag数据了，对数据进行一些修饰得到flag：flag{那你也很棒哦}</p>
<p>故flag是flag{那你也很棒哦}</p>
<p>本题主要考察hex编码，签到题。</p>
<h2 id="rabbit">Rabbit</h2>
<p>看到题目名字还是有些懵懵的，搜索一些发现题目应该是在说Rabbit流密码。</p>
<p>什么是流密码？什么是Rabbit密码？</p>
<p>在密码学中，流密码（英语：Stream cipher），又译为流加密、资料流加密，是一种对称加密算法，加密和解密双方使用相同伪随机加密数据流（pseudo-random stream）作为密钥，明文数据每次与密钥数据流顺次对应加密，得到密文数据流。实践中数据通常是一个位（bit）并用异或（xor）操作加密。</p>
<p>该算法解决了对称加密完善保密性（perfect secrecy）的实际操作困难。“完善保密性”由克劳德·香农于1949年提出。由于完善保密性要求密钥长度不短于明文长度，故而实际操作存在困难，改由较短数据流通过特定算法得到密钥流。[4]</p>
<p>流密码就是基于随机数的对称加密算法，Rabbit密码是流密码的一种：</p>
<p>Rabbit流密码（Rabbit Stream Cipher）简介</p>
<p>Rabbit流密码是由Cryptico公司（<a href="http://www.cryptico.com/">http://www.cryptico.com</a>）设计的，密钥长度128位，</p>
<p>最大加密消息长度为2 Bytes，即16 TB，若消息超过该长度，则需要更换密钥对剩下的消息进行处理。它是目前安全性较高，加/解密速度比较高效的流密码之一，在各种处理器平台上都有不凡的表现。[5]</p>
<p>Cryptico公司好像是已经搜索不到了，而且那个网站的域名也在进行拍卖，以目前的情况，我还找不到有关Rabbit密码的相关算法信息。但是，通过论文的查阅找到了，rabbit算法的内容：[6]</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-82.png" alt="img"></p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-83.png" alt="img"></p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-84.png" alt="img"></p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-85.png" alt="img"></p>
<p>Rabbit密码的加密算法还是比较复杂的，不过通过搜索引擎找到了破解Rabbit密码的现成脚本</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-86.png" alt="img"></p>
<p>题目描述</p>
<p>一如既往没有什么卵用的题目描述</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-87.png" alt="img"></p>
<p>附件内容</p>
<p>附件内容里面是一组密文：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI
</span></span></code></pre></div><p>这里使用在线解密工具进行解密：https://www.sojson.com/encrypt_rabbit.html</p>
<p>（本菜鸡不会写，嘤嘤嘤）</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-88-1024x242.png" alt="img">     解密页面</p>
<p>得到了一个明文：Cute_Rabbit</p>
<p>对得到的明文进行简单的修饰：flag{Cute_Rabbit}</p>
<p>故flag是flag{Cute_Rabbit}</p>
<p>本题主要考察Rabbit流密码加密，简单题</p>
<h2 id="篱笆墙的影子">篱笆墙的影子</h2>
<p>看到题目，这题应该是考察栅栏密码。（篱笆墙也只能联想到栅栏密码了）</p>
<blockquote>
<p>栅栏密码的详细介绍，在上一篇XCTF CRYPTO的WP中有提到，具体内容可以访问上一篇：</p>
<p><a href="http://zkinghar.top/?p=463">XCTF-CRYPTO-新手区 writeup</a></p>
</blockquote>
<p>点开题目描述</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-89.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述就是在说，还是熟悉的味道，唔~。然而也没什么卵用</p>
<p>下载附件，并查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-90.png" alt="img"></p>
<p>附件内容</p>
<p>附件里面的文件中是一段熟悉密文：felhaagv{ewtehtehfilnakgw}</p>
<p>由于不确定是W型还是传统型，直接使用之前写的两个脚本都跑一下：</p>
<p>传统型栅栏密码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>fhetlehhafaiglvn<span style="color:#f92672">{</span>aekwgtwe<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>feiewlltnheaahkatggewvh<span style="color:#f92672">}{</span>f
</span></span><span style="display:flex;"><span>fvtae<span style="color:#f92672">{</span>eklehghwfwati<span style="color:#f92672">}</span>aelghn
</span></span><span style="display:flex;"><span>fgeiwevhl<span style="color:#f92672">}</span>l<span style="color:#f92672">{</span>tnheeaawhkatfg
</span></span><span style="display:flex;"><span>fawen<span style="color:#f92672">}</span>egthalvefkh<span style="color:#f92672">{</span>higaetlw
</span></span><span style="display:flex;"><span>fa<span style="color:#f92672">{</span>ehnweaehfa<span style="color:#f92672">}</span>lgwtikhvtelg
</span></span><span style="display:flex;"><span>fa<span style="color:#f92672">{</span>ehnweaehfa<span style="color:#f92672">}</span>lgwtikhvtelg
</span></span><span style="display:flex;"><span>fhgeeeiaweavwhhlk<span style="color:#f92672">}</span>la<span style="color:#f92672">{</span>ttfng
</span></span><span style="display:flex;"><span>fhgeeeiaweavwhhlk<span style="color:#f92672">}</span>la<span style="color:#f92672">{</span>ttfng
</span></span><span style="display:flex;"><span>fhgeeeiaweavwhhlk<span style="color:#f92672">}</span>la<span style="color:#f92672">{</span>ttfng
</span></span><span style="display:flex;"><span>fhgeeeiaweavwhhlk<span style="color:#f92672">}</span>la<span style="color:#f92672">{</span>ttfng
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
</span></span></code></pre></div><p>W型栅栏密码</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>fhetlehhafaiglvn<span style="color:#f92672">{</span>aekwgtwe<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>fvn<span style="color:#f92672">{</span>eeawltkehhgtaewhaf<span style="color:#f92672">}</span>igl
</span></span><span style="display:flex;"><span>fatkegevhgf<span style="color:#f92672">{</span>leiwlwhtn<span style="color:#f92672">}</span>aeah
</span></span><span style="display:flex;"><span>fatfgieaeghlwntvl<span style="color:#f92672">{</span>ea<span style="color:#f92672">}</span>khehw
</span></span><span style="display:flex;"><span>fh<span style="color:#f92672">{</span>higlteaeawenwahtglvefk<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>fh<span style="color:#f92672">{</span>ehnwafheaeawtik<span style="color:#f92672">}</span>gletglv
</span></span><span style="display:flex;"><span>fla<span style="color:#f92672">{</span>ehnwafhegheavwtik<span style="color:#f92672">}</span>glet
</span></span><span style="display:flex;"><span>fla<span style="color:#f92672">{</span>ttfnwaieeegheavwhhlk<span style="color:#f92672">}</span>g
</span></span><span style="display:flex;"><span>fla<span style="color:#f92672">{</span>ttfng<span style="color:#f92672">}</span>waieeegheavwhhlk
</span></span><span style="display:flex;"><span>fla<span style="color:#f92672">{</span>ttflag<span style="color:#f92672">}</span>wknieeegheavwhh
</span></span><span style="display:flex;"><span>fla<span style="color:#f92672">{</span>theflag<span style="color:#f92672">}</span>wknihteegheavw
</span></span><span style="display:flex;"><span>flavetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>ghea
</span></span><span style="display:flex;"><span>fehavetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>gal
</span></span><span style="display:flex;"><span>felhavetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>ga
</span></span><span style="display:flex;"><span>felhaavetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>g
</span></span><span style="display:flex;"><span>felhaagvetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>felhaagv<span style="color:#f92672">{</span>etheflag<span style="color:#f92672">}</span>wknihtew
</span></span><span style="display:flex;"><span>felhaagv<span style="color:#f92672">{</span>ewtheflag<span style="color:#f92672">}</span>wknihte
</span></span></code></pre></div><p>在跑出来的数据中寻找有关flag的相关信息，经查找发现flag数据是：flag{wethinkwehavetheflag}</p>
<p>故本题的flag就是flag{wethinkwehavetheflag}</p>
<p>题目主要考察栅栏密码，签到题。</p>
<p>本题的解题脚本代码还是扔出来一下吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrype</span>(cipher,key):
</span></span><span style="display:flex;"><span>    cipher_len <span style="color:#f92672">=</span> len(cipher)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> cipher_len<span style="color:#f92672">%</span>key <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">/</span> key
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">/</span> key <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> {x:<span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(key)}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(cipher_len):
</span></span><span style="display:flex;"><span>        a <span style="color:#f92672">=</span> i<span style="color:#f92672">%</span>key;
</span></span><span style="display:flex;"><span>        result<span style="color:#f92672">.</span>update({a:result[a]<span style="color:#f92672">+</span>cipher[i]})
</span></span><span style="display:flex;"><span>    plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(key):
</span></span><span style="display:flex;"><span>        plainer <span style="color:#f92672">=</span> plainer <span style="color:#f92672">+</span> result[i]
</span></span><span style="display:flex;"><span>    print plainer
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;felhaagv</span><span style="color:#e6db74">{ewtehtehfilnakgw}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">20</span>):
</span></span><span style="display:flex;"><span>    decrype(cipher,n)
</span></span></code></pre></div><h2 id="rsa">RSA</h2>
<p>看题目应该是主要考察RSA非对称加密算法的问题，密码学核心考察的问题。</p>
<blockquote>
<p>RSA加密算法的详细介绍，在上一篇XCTF CRYPTO的WP中有提到，具体内容可以访问上一篇：</p>
<p><a href="http://zkinghar.top/?p=463">XCTF-CRYPTO-新手区 writeup</a></p>
</blockquote>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-91.png" alt="img">题目描述</p>
<p>没有太多有用的信息，一如既往</p>
<p>下载附件，并查看附件：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-92.png" alt="img">题目描述</p>
<p>应该是比较简单的RSA题目，这里就是求解一下逆元。</p>
<p>这里写一个脚本进行求解：（使用到了gmpy2库）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">473398607161</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">4511491</span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">17</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ni <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(gmpy2<span style="color:#f92672">.</span>is_prime(n)):
</span></span><span style="display:flex;"><span>    ni <span style="color:#f92672">=</span> n<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    ni <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,ni)
</span></span><span style="display:flex;"><span>print(d)
</span></span></code></pre></div><p>执行脚本，得到运算出的d：125631357777427553</p>
<p>故flag是flag{125631357777427553}</p>
<p>本题主要考察RSA加密算法的简单应用，简单题。</p>
<h2 id="丢失的md5">丢失的MD5</h2>
<p>这道题目，应该是和MD5相关</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-93.png" alt="img"></p>
<p>题目描述</p>
<p>一如既往，没有什么东西</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-94.png" alt="img">附件内容</p>
<p>发现是一个python文件，尝试执行一下这个python代码</p>
<p>获得一段数据：e9032994dabac08080091151380478a2</p>
<p>这段数据是不是flag呢？</p>
<p>康一康源代码吧：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>,<span style="color:#ae81ff">127</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>,<span style="color:#ae81ff">127</span>):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>,<span style="color:#ae81ff">127</span>):
</span></span><span style="display:flex;"><span>            m<span style="color:#f92672">=</span>hashlib<span style="color:#f92672">.</span>md5()
</span></span><span style="display:flex;"><span>            m<span style="color:#f92672">.</span>update(<span style="color:#e6db74">&#39;TASC&#39;</span><span style="color:#f92672">+</span>chr(i)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;O3RJMV&#39;</span><span style="color:#f92672">+</span>chr(j)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;WDJKX&#39;</span><span style="color:#f92672">+</span>chr(k)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;ZM&#39;</span>)
</span></span><span style="display:flex;"><span>            des<span style="color:#f92672">=</span>m<span style="color:#f92672">.</span>hexdigest()
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;e9032&#39;</span> <span style="color:#f92672">in</span> des <span style="color:#f92672">and</span> <span style="color:#e6db74">&#39;da&#39;</span> <span style="color:#f92672">in</span> des <span style="color:#f92672">and</span> <span style="color:#e6db74">&#39;911513&#39;</span> <span style="color:#f92672">in</span> des:
</span></span><span style="display:flex;"><span>                print des
</span></span></code></pre></div><p>源代码中找不到有关flag的相关信息，（这题好难呀），那flag很可能就是python的运行结果</p>
<p>尝试加工一下运行数据：flag{e9032994dabac08080091151380478a2}</p>
<p>尝试提交一下flag，发现成功了（这题真简单）</p>
<p>本题考察python2代码的相关知识，签到题。（谁能想到运行结果就是flag呢？）</p>
<h2 id="alice与bob">Alice与Bob</h2>
<p>Alice和Bob是密码学中经常使用来进行密码描述的人物名称，所以这道题目可能是加密相关。不过，也推断不出更多的信息。</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-95.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述终于是有用了，看样子，这道题目也是一道签到题目。</p>
<p>将题目描述进行提炼即可解密：</p>
<ol>
<li>98554799767,请分解为两个素数</li>
<li>分解后，小的放前面，大的放后面，合成一个新的数字</li>
<li>进行md5的32位小写哈希，提交答案</li>
<li>得到的 flag 请包上 flag{} 提交</li>
</ol>
<p>根据步骤一步一步的来就好</p>
<p>首先需要进行大数分解，这里使用sagemath进行大数分解：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-97.png" alt="img"></p>
<p>得到两个素数101999和966233</p>
<p>然后进行数字组合，小的放前面，大的放后面，即101999966233</p>
<p>然后进行md5加密，这里写一个简单的脚本进行MD5加密（对脚本的热爱）：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> hashlib
</span></span><span style="display:flex;"><span>plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;101999966233&#34;</span>
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5()
</span></span><span style="display:flex;"><span>m<span style="color:#f92672">.</span>update(plainer)
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> m<span style="color:#f92672">.</span>hexdigest()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print cipher
</span></span></code></pre></div><p>执行脚本，得到md5加密的结果：d450209323a847c8d01c6be47c81811a</p>
<p>对MD5的加密结果进行修饰：flag{d450209323a847c8d01c6be47c81811a}</p>
<p>故flag就是flag{d450209323a847c8d01c6be47c81811a}</p>
<p>题目主要考察md5加密和大数分解，签到题</p>
<h2 id="rsarsa">rsarsa</h2>
<p>看题目应该也是考察RSA加密算法的题目</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-98.png" alt="img"></p>
<p>题目描述</p>
<p>没有什么有用的信息，也只是告诉了提交flag的数据格式</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-99.png" alt="img">附件内容</p>
<p>应该是RSA数学计算的题目类型</p>
<p>提炼出附件内容中给到的重要数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483
</span></span><span style="display:flex;"><span>q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407
</span></span><span style="display:flex;"><span>e = 65537
</span></span><span style="display:flex;"><span>c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034
</span></span></code></pre></div><p>这里使用一个脚本来解决问题：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> gmpy2
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>
</span></span><span style="display:flex;"><span>q <span style="color:#f92672">=</span> <span style="color:#ae81ff">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>
</span></span><span style="display:flex;"><span>e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</span></span><span style="display:flex;"><span>c <span style="color:#f92672">=</span> <span style="color:#ae81ff">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span>(gmpy2<span style="color:#f92672">.</span>is_prime(n)):
</span></span><span style="display:flex;"><span>    ni <span style="color:#f92672">=</span> n <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    ni <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,ni)
</span></span><span style="display:flex;"><span>m <span style="color:#f92672">=</span> pow(c,d,n)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(m)
</span></span></code></pre></div><p>运行一下脚本，得到数据：5577446633554466577768879988</p>
<p>对得到的数据进行修饰：flag{5577446633554466577768879988}</p>
<p>故flag就是flag{5577446633554466577768879988}</p>
<p>本题主要考察RSA加密算法相关知识，简单题</p>
<h2 id="大帝的密码武器">大帝的密码武器</h2>
<p>看到题目，感觉有点意思，但是暂时联想不到有用的信息</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-100.png" alt="img"></p>
<p>一如既往，题目描述不能给到太多的信息，仅仅只给到了提交flag的数据格式</p>
<p>下载附件：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-101.png" alt="img">附件</p>
<p>附件是个zip文件，无法打开，尝试修改文件扩展名为zip：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-102.png" alt="img"></p>
<p>打开zip文件：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-103.png" alt="img"></p>
<p>发现有两个文件，依次打开两个文件：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-104.png" alt="img">附件内容</p>
<p>一个题目tip信息，一个需要进行解密的密文</p>
<p>题目tip如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。
</span></span><span style="display:flex;"><span> 以下密文被解开后可以获得一个有意义的单词：FRPHEVGL
</span></span><span style="display:flex;"><span> 你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交。
</span></span></code></pre></div><p>根据描述，罗马三巨头应该自然而然就联想到了凯撒加密。</p>
<p>这里先使用一个脚本解决位移向量问题：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>dict_list <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
</span></span><span style="display:flex;"><span>    dict_list<span style="color:#f92672">.</span>append(chr(ord(<span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">+</span>i))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;FRPHEVGL&#34;</span><span style="color:#f92672">.</span>lower()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
</span></span><span style="display:flex;"><span>    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
</span></span><span style="display:flex;"><span>            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>n)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            plainer <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    print(plainer<span style="color:#f92672">+</span><span style="color:#e6db74">&#34; index:&#34;</span><span style="color:#f92672">+</span>str(n))
</span></span></code></pre></div><p>执行脚本，得到数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>frphevgl index:0
</span></span><span style="display:flex;"><span>eqogdufk index:1
</span></span><span style="display:flex;"><span>dpnfctej index:2
</span></span><span style="display:flex;"><span>comebsdi index:3
</span></span><span style="display:flex;"><span>bnldarch index:4
</span></span><span style="display:flex;"><span>amkczqbg index:5
</span></span><span style="display:flex;"><span>zljbypaf index:6
</span></span><span style="display:flex;"><span>ykiaxoze index:7
</span></span><span style="display:flex;"><span>xjhzwnyd index:8
</span></span><span style="display:flex;"><span>wigyvmxc index:9
</span></span><span style="display:flex;"><span>vhfxulwb index:10
</span></span><span style="display:flex;"><span>ugewtkva index:11
</span></span><span style="display:flex;"><span>tfdvsjuz index:12
</span></span><span style="display:flex;"><span>security index:13
</span></span><span style="display:flex;"><span>rdbtqhsx index:14
</span></span><span style="display:flex;"><span>qcaspgrw index:15
</span></span><span style="display:flex;"><span>pbzrofqv index:16
</span></span><span style="display:flex;"><span>oayqnepu index:17
</span></span><span style="display:flex;"><span>nzxpmdot index:18
</span></span><span style="display:flex;"><span>mywolcns index:19
</span></span><span style="display:flex;"><span>lxvnkbmr index:20
</span></span><span style="display:flex;"><span>kwumjalq index:21
</span></span><span style="display:flex;"><span>jvtlizkp index:22
</span></span><span style="display:flex;"><span>iuskhyjo index:23
</span></span><span style="display:flex;"><span>htrjgxin index:24
</span></span><span style="display:flex;"><span>gsqifwhm index:25
</span></span></code></pre></div><p>发现位移13是一个有意义的单词：<code>security index:13</code></p>
<p>再写一个小脚本求解密文：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ComeChina&#34;</span><span style="color:#f92672">.</span>lower()
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">caesar</span>(n,cipher):
</span></span><span style="display:flex;"><span>    dict_list <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
</span></span><span style="display:flex;"><span>        dict_list<span style="color:#f92672">.</span>append(chr(ord(<span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">+</span>i))
</span></span><span style="display:flex;"><span>    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
</span></span><span style="display:flex;"><span>            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>n)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            plainer <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> plainer
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print caesar(<span style="color:#ae81ff">13</span>,cipher)
</span></span></code></pre></div><p>执行脚本，获得数据：pbzrpuvan</p>
<p>对得到的数据进行修饰：flag{pbzrpuvan}</p>
<p>故flag就是flag{pbzrpuvan}</p>
<p>本题主要考察Caesar加密的相关知识，简单题</p>
<h2 id="windows系统密码">Windows系统密码</h2>
<p>Windows系统密码，根据本菜鸡的知识Windows密码也是使用hash的方式进行加密的，所以本题应该也是在考察hash密码的破解。</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-105.png" alt="img"></p>
<p>题目描述</p>
<p>一如既往，没有什么有用的信息</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-106.png" alt="img">附件内容</p>
<p>附件给出了4对哈希值：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
</span></span><span style="display:flex;"><span> ctf:1002:06af9108f2e1fecf144e2e8adef09efd:a7fcb22a88038f35a8f39d503e7f0062:::
</span></span><span style="display:flex;"><span> Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
</span></span><span style="display:flex;"><span> SUPPORT_388945a0:1001:aad3b435b51404eeaad3b435b51404ee:bef14eee40dffbc345eeb3f58e290d56:::
</span></span></code></pre></div><p>这里解密去<a href="https://cmd5.com/">cmd5</a>网站进行解密，经过反复尝试发现只有</p>
<p>a7fcb22a88038f35a8f39d503e7f0062可以解密出hash数值：</p>
<p><img src="/images/BUUCTF-CRYPTO-1_writeup/image-107.png" alt="img"></p>
<p>hash解密结果就是：good-luck</p>
<p>对hash解密结果进行修饰：flag{good-luck}</p>
<p>故flag就是flag{good-luck}</p>
<p>本题主要考察Windows系统的数据加密方式，简单题</p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://wiwiki.kfd.me/wiki/MD5">MD5-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E7%99%BE%E5%88%86%E5%8F%B7%E7%BC%96%E7%A0%81#%E5%AF%B9%E6%9C%AA%E4%BF%9D%E7%95%99%E5%AD%97%E7%AC%A6%E7%9A%84%E7%99%BE%E5%88%86%E5%8F%B7%E7%BC%96%E7%A0%81">百分号编码-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6">社会工程学-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E4%B8%B2%E6%B5%81%E5%8A%A0%E5%AF%86%E6%B3%95">流密码-维基百科</a></li>
<li><a href="https://zhuanlan.kanxue.com/article-391.htm">Rabbit流密码</a></li>
<li>[张振广,胡予濮,王璐.流密码Rabbit的安全性分析<a href="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFD2011&amp;filename=JSJA201102025&amp;v=m%25mmd2BEiEfT6K6g4XiqkBrHZV8%25mmd2BQ3%25mmd2FWgalODChICHN0Kg3Z7tvJfyIonq%25mmd2BnnJbBSP3Jb">J].计算机科学,2011,38(02):100-102.</a></li>
</ol>
<p>BUUCTF前面的题目偏向简单题目和签到题目，大多数都在考察古典密码，对称密码的相关知识。</p>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>XCTF CRYPTO novice_writeup</title>
            <link>/posts/xctf-crypto-novice_writeup/</link>
            <pubDate>Fri, 25 Jun 2021 22:01:32 +0800</pubDate>
            
            <guid>/posts/xctf-crypto-novice_writeup/</guid>
            <description>这次又是XCTF平台，没错，我又来无聊谈谈解题了
首先先来一张XCTF的首页图片，来开启本次的writeup文章：
xctf首页
这次我们要搞哪些题目的思路呢？这次还是新手区，不过是不一样的新手局，这回盘一盘密码学。
crypto新手区题目
题目数量不变，依然是12道题目：
base64 Caesar Morse 幂数加密 Railfence 不仅仅是Morse 混合编码 easy_RSA easychallenge 转轮机加密 Normal_RSA esay_ECC 在开始进行密码学的题目问题思路分析的开始之前，首先进行一部分知识的了解。
密码学的CTF题目通常都是以附件形式来进行考察的。不像网页需要进入到平台设定的docker靶机中
CTF中密码学题目目前的趋势是越来越难，而且分值越来越高。密码学的题目往往分为编码题目和密码学题目，而密码学题目又会分为古典密码学题目和现代密码学题目。
密码学早在公元前400多年就已经产生，人类使用密码的历史几乎与使用文字的时间一样长，密码学的发展大致可以分为 3 个阶段: 1949 年之前的古典密码学阶段; 1949 年至 1975 年密码学成为科学的分支; 1976 年以后对称密钥密码算法得到进一步发展，产生了密码学的新方向—公钥密码学。1976 年，W.Diffie 和 M.Hellman 在发表的文章“密码学的新方向”中首次公开提出了公钥密码( Public-key Cryptography) 的概念。公钥密码的提出实现了加密密钥和解密密钥之间的独立，解决了对称密码体制中通信双方必须共享密钥的问题，在密码学界具有划时代的意义。[1]
CTF中的编码题目往往会考察一些常用的编码类型，当然也会出现一些比较偏的编码方式进行编码。
常用的编码方式有：ASCii编码，Base64编码，Bin编码，Hex编码，URL编码以及HTML编码。
CTF中的古典密码学题目可以通过查找相关的密码学算法来了解与密码学相关内容的更多信息，通过网络方式进行解决，或者获取一些灵感。古典密码学经常会考察最基础的凯撒密码，栅栏密码，或者替换密码。这些古典密码学的处理思路和方式都比较相似，而且网络已经有很多处理这些密码的算法工具来进行加密和解密。
CTF中的现代密码学题目主要会考察RSA加密算法，ECC加密算法等经典的现代密码学算法。也会有一些新的加密算法题目，这种题目往往需要进行算法分析，通过加密算法的语法逻辑来设计解密算法通过逆元的思维求出明文。
关于密码学的更多内容，可以访问：http://eol.sicau.edu.cn:8080/ 来了解更多密码学相关的内容。
下面就开始本回的题目！
base64 看到这道题目，猜想这道题目可能是考察base64编码方式的密码学题目
进入道题目页面，看看是否可以得到一点tip：
base64题目
没有什么特别的tip，只是给题目一个情景化的描述，没有太多有用信息的描述。
直接下载附件内容，并打开附件文件进行查看：
附件文件
文件内容有一段字符型文字：Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9
根据题目的内容，尝试使用一下base64进行解码，可以使用在线的解码工具，也可以使用python脚本进行解码。这里编写简单的python脚本进行解码：
# python3 脚本 import base64 cipher=&amp;#39;Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9&amp;#39; plainer= base64.b64decode(cipher) print(str(plainer,&amp;#39;utf-8&amp;#39;)) # python2 脚本 import base64 cipher=&amp;#39;Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9&amp;#39; plainer= base64.</description>
            <content type="html"><![CDATA[<p>这次又是XCTF平台，没错，我又来无聊谈谈解题了</p>
<p>首先先来一张XCTF的首页图片，来开启本次的writeup文章：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-86.png" alt="image-86"></p>
<p>xctf首页</p>
<p>这次我们要搞哪些题目的思路呢？这次还是新手区，不过是不一样的新手局，这回盘一盘密码学。</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-87.png" alt="image-87"></p>
<p>crypto新手区题目</p>
<p>题目数量不变，依然是12道题目：</p>
<ul>
<li>base64</li>
<li>Caesar</li>
<li>Morse</li>
<li>幂数加密</li>
<li>Railfence</li>
<li>不仅仅是Morse</li>
<li>混合编码</li>
<li>easy_RSA</li>
<li>easychallenge</li>
<li>转轮机加密</li>
<li>Normal_RSA</li>
<li>esay_ECC</li>
</ul>
<p>在开始进行密码学的题目问题思路分析的开始之前，首先进行一部分知识的了解。</p>
<p>密码学的CTF题目通常都是以附件形式来进行考察的。不像网页需要进入到平台设定的docker靶机中</p>
<p>CTF中密码学题目目前的趋势是越来越难，而且分值越来越高。密码学的题目往往分为编码题目和密码学题目，而密码学题目又会分为古典密码学题目和现代密码学题目。</p>
<p>密码学早在公元前400多年就已经产生，人类使用密码的历史几乎与使用文字的时间一样长，密码学的发展大致可以分为 3 个阶段: 1949 年之前的古典密码学阶段; 1949 年至 1975 年密码学成为科学的分支; 1976 年以后对称密钥密码算法得到进一步发展，产生了密码学的新方向—公钥密码学。1976 年，W.Diffie 和 M.Hellman 在发表的文章“密码学的新方向”中首次公开提出了公钥密码( Public-key Cryptography) 的概念。公钥密码的提出实现了加密密钥和解密密钥之间的独立，解决了对称密码体制中通信双方必须共享密钥的问题，在密码学界具有划时代的意义。[1]</p>
<p>CTF中的编码题目往往会考察一些常用的编码类型，当然也会出现一些比较偏的编码方式进行编码。</p>
<p>常用的编码方式有：ASCii编码，Base64编码，Bin编码，Hex编码，URL编码以及HTML编码。</p>
<p>CTF中的古典密码学题目可以通过查找相关的密码学算法来了解与密码学相关内容的更多信息，通过网络方式进行解决，或者获取一些灵感。古典密码学经常会考察最基础的凯撒密码，栅栏密码，或者替换密码。这些古典密码学的处理思路和方式都比较相似，而且网络已经有很多处理这些密码的算法工具来进行加密和解密。</p>
<p>CTF中的现代密码学题目主要会考察RSA加密算法，ECC加密算法等经典的现代密码学算法。也会有一些新的加密算法题目，这种题目往往需要进行算法分析，通过加密算法的语法逻辑来设计解密算法通过逆元的思维求出明文。</p>
<p>关于密码学的更多内容，可以访问：http://eol.sicau.edu.cn:8080/ 来了解更多密码学相关的内容。</p>
<p>下面就开始本回的题目！</p>
<h2 id="base64">base64</h2>
<p>看到这道题目，猜想这道题目可能是考察base64编码方式的密码学题目</p>
<p>进入道题目页面，看看是否可以得到一点tip：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image.png" alt="img">base64题目</p>
<p>没有什么特别的tip，只是给题目一个情景化的描述，没有太多有用信息的描述。</p>
<p>直接下载附件内容，并打开附件文件进行查看：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-1-1024x120.png" alt="img">附件文件</p>
<p>文件内容有一段字符型文字：Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9</p>
<p>根据题目的内容，尝试使用一下base64进行解码，可以使用在线的解码工具，也可以使用python脚本进行解码。这里编写简单的python脚本进行解码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># python3 脚本</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9&#39;</span>
</span></span><span style="display:flex;"><span>plainer<span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(cipher)
</span></span><span style="display:flex;"><span>print(str(plainer,<span style="color:#e6db74">&#39;utf-8&#39;</span>))
</span></span><span style="display:flex;"><span><span style="color:#75715e"># python2 脚本</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9&#39;</span>
</span></span><span style="display:flex;"><span>plainer<span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(cipher)
</span></span><span style="display:flex;"><span>print(plainer)
</span></span></code></pre></div><p>然后运行python脚本进行解码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>python base64_decode.py <span style="color:#75715e"># 这里创建的python2脚本文件名是base64_decode.py</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>python3 base64_decode3.py <span style="color:#75715e"># 这里创建的python3脚本文件名是base64_decode3.py</span>
</span></span></code></pre></div><p>执行命令后查看执行结果</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-2.png" alt="img"></p>
<p>成功拿到flag数据，这道题目是道签到题。</p>
<p>这道题目主要考察base64编码知识，没有什么难度，就是一道签到题目。</p>
<h2 id="caesar">Caesar</h2>
<p>看到题目，自然就联系到Caesar cipher，翻译成中文就是凯撒密码。</p>
<p>所有解决这道题目的关键就是凯撒密码的密码逻辑了</p>
<p>凯撒密码（英语：Caesar cipher），或称凯撒加密、凯撒变换、变换加密，是一种最简单且最广为人知的加密技术。凯撒密码是一种替换加密技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。这个加密方法是以罗马共和时期凯撒的名字命名的，据称当年凯撒曾用此方法与其将军们进行联系。[2]</p>
<p>点开题目的页面，看看是否有些有用的信息</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-3-1024x301.png" alt="img">Caesar题目</p>
<p>从题目描述中依旧获取不到更多的信息，没有太多有用的信息可以帮助解题</p>
<p>直接下载附件并进行查看：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-4-1024x134.png" alt="img">附件内容</p>
<p>附件内容中，只有一段加密文字：oknqdbqmoq{kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz}</p>
<p>根据题目这应该是凯撒加密算法，可以使用在线的工具进行解密，也可以使用python脚本进行解决，这里使用python脚本进行解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># python2脚本</span>
</span></span><span style="display:flex;"><span>dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;oknqdbqmoq</span><span style="color:#e6db74">{kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
</span></span><span style="display:flex;"><span>    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
</span></span><span style="display:flex;"><span>            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>j)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            plainer <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>    print plainer
</span></span><span style="display:flex;"><span><span style="color:#75715e"># pyhton3脚本</span>
</span></span><span style="display:flex;"><span>dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;oknqdbqmoq</span><span style="color:#e6db74">{kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz}</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
</span></span><span style="display:flex;"><span>    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
</span></span><span style="display:flex;"><span>            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>j)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>            plainer <span style="color:#f92672">+=</span> i
</span></span><span style="display:flex;"><span>    print(plainer)
</span></span></code></pre></div><p>这道题目的python2和python3脚本差别不大，虽然密码学的大多数题目还是推荐使用python2进行编写，但是对于使用sagemath的密码学题目，python3还是比较适合。下面运行python脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># python2 </span>
</span></span><span style="display:flex;"><span>python Caesar_decode<span style="color:#f92672">.</span>py
</span></span><span style="display:flex;"><span><span style="color:#75715e"># python3</span>
</span></span><span style="display:flex;"><span>python3 Caesar_decode3<span style="color:#f92672">.</span>py
</span></span></code></pre></div><p>查看终端显示的运行结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-5.png" alt="img">运行结果</p>
<p>从运行结果发现：cyberpeace{you_have_learned_caesar_encryption} 应该是有明显含义的解密的文段，很可能是这道题目的flag。尝试进行提交，发现这段数据就是flag数据。</p>
<p>这道题目解决，题目没有什么难度，算是签到题。</p>
<p>题目主要考察凯撒密码的相关知识，非常直接的解密方法，没有什么难度。</p>
<h2 id="morse">Morse</h2>
<p>看到题目Morse，自然而然便联想到了摩尔斯电码。这道题目有可能是在考察摩尔斯电码。</p>
<p>点开题目页面，看看题目描述中会有什么有用的信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-6-1024x280.png" alt="img">Morse题目</p>
<p>题目描述依然是大片无用的信息，但是最后提示了提交flag的格式和内容要求。</p>
<p>直接打开附件并进行查看需要进行解密的内容：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-7-1024x101.png" alt="img">附件内容</p>
<p>文件内容非常像bin方式的加密，但是考虑到题目Morse，应该是Morse电码方式的加密</p>
<p>首先，需要了解什么摩尔斯电码：</p>
<p>摩尔斯电码（英语：Morse code）是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。是由美国人艾尔菲德·维尔与萨缪尔·摩尔斯在1836年发明。[3]</p>
<p>摩尔斯电码是一种早期的数字化通信形式，但是它不同于现代只使用0和1两种状态的二进制代码，它的代码包括五种：</p>
<ol>
<li>点（·）：1</li>
<li>划（-）：111</li>
<li>字符内部的停顿（在点和划之间）：0</li>
<li>字符之间的停顿：000</li>
<li>单词之间的停顿：0000000</li>
</ol>
<p>根据摩尔斯电码的知识点，这道题目可以使用在线工具进行解密，也可以使用python脚本进行解密。这里使用python脚本进行解密：</p>
<blockquote>
<p>这里的密文文段和摩尔斯代码的文段不太一致，需要进行一下代换。这里使用 1 代表 - ，0 代表 ·</p>
<p>来进行摩尔斯电码的解密算法的设计和编写。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># python2脚本</span>
</span></span><span style="display:flex;"><span>dict_list <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;01&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1000&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1010&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;100&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0010&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;110&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0000&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;00&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0111&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;101&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0100&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;11&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;10&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;111&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0110&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1101&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;010&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;000&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;001&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0001&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;011&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1001&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1011&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1100&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>
</span></span><span style="display:flex;"><span>             }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110&#34;</span>
</span></span><span style="display:flex;"><span>plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
</span></span><span style="display:flex;"><span>    plainer <span style="color:#f92672">+=</span> dict_list[i]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print plainer
</span></span><span style="display:flex;"><span><span style="color:#75715e"># python3脚本</span>
</span></span><span style="display:flex;"><span>dict_list <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;01&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1000&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1010&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;100&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0010&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;110&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0000&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;00&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0111&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;101&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0100&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;11&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;10&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;111&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0110&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1101&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;010&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;000&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;001&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;0001&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;011&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1001&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1011&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
</span></span><span style="display:flex;"><span>             <span style="color:#e6db74">&#39;1100&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>
</span></span><span style="display:flex;"><span>             }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110&#34;</span>
</span></span><span style="display:flex;"><span>plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
</span></span><span style="display:flex;"><span>    plainer <span style="color:#f92672">+=</span> dict_list[i]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(plainer)
</span></span></code></pre></div><p>这道题目的python2和python3的求解脚本差别也不是非常大，执行脚本后直接查看执行结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-8.png" alt="img">执行结果</p>
<p>发现执行结果是一句有意义的句子，应该就是flag数据了。然后再利用题目描述所说的信息对执行出来的flag数据进行个加帽处理：cyberpeace{morsecodeissointeresting}</p>
<p>题目解决，题目也是签到题，没有什么难度。</p>
<p>题目主要考察了摩尔斯电码的解密方法，以及摩尔斯电码相关知识，签到题。</p>
<h2 id="幂数加密">幂数加密</h2>
<p>看到题目的时候有些懵逼，本菜鸡不太了解什么的是幂数加密，于是只能求助一下搜索引擎。</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-9.png" alt="img">二进制幂数加密-百度百科</p>
<p>好像是一个加密方法，这种加密方法大致逻辑是：</p>
<ol>
<li>将明文对应字母序列</li>
<li>对字母序列进行处理加密</li>
<li>使用间隔符进行间隔</li>
<li>获得密文</li>
</ol>
<p>现在知道这种加密方法，点开题目的描述看看是否可以获取到更多的信息</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-10-1024x284.png" alt="img">幂数加密题目</p>
<p>题目描述中仅仅告诉了需要提交的flag格式，和flag数据类型。题目描述的其他信息都是无用的信息。</p>
<p>将附件下载下来并查看附件中的密文信息内容：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-11-1024x69.png" alt="img">附件资料</p>
<p>发现密文数据不太对劲呀，二进制幂数加密的数据都是01234的形式，这个密文的形式是01248的形式</p>
<p>于是作为菜鸡的我只能去再次求助于搜索引擎了，查到了云影密码：</p>
<h3 id="01248云影密码">01248云影密码</h3>
<p>原理：有1，2，4，8这四个数字，可以通过加法来用这四个数字表示0-9中的任何一个数字，列如0=28， 也就是0=2+8，同理7=124， 9=18。这样之后再用1-26来表示26个英文字母，就有了密文与明文之间的对应关系。引入0来作为间隔，以免出现混乱。所以云影密码又叫“01248密码”。[4]</p>
<p>看来密文是云影密码没错了，由于云影密码是比较少见的密码，而是加密逻辑比较简单，网络上几乎没有什么可用的在线工具。这道题目可以使用手工解密，也可以使用python脚本进行解密。这里使用python脚本进行解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># python2</span>
</span></span><span style="display:flex;"><span>dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;8842101220480224404014224202480122&#34;</span>
</span></span><span style="display:flex;"><span>cipher_array <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;0&#34;</span>)
</span></span><span style="display:flex;"><span>cipher_arr <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_array:
</span></span><span style="display:flex;"><span>    k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(i)):
</span></span><span style="display:flex;"><span>        k <span style="color:#f92672">+=</span> int(i[j])
</span></span><span style="display:flex;"><span>    cipher_arr<span style="color:#f92672">.</span>append(k)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> cipher_arr:
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">+=</span> dict_list[m<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print flag
</span></span><span style="display:flex;"><span><span style="color:#75715e"># python3</span>
</span></span><span style="display:flex;"><span>dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;8842101220480224404014224202480122&#34;</span>
</span></span><span style="display:flex;"><span>cipher_array <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;0&#34;</span>)
</span></span><span style="display:flex;"><span>cipher_arr <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_array:
</span></span><span style="display:flex;"><span>    k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(i)):
</span></span><span style="display:flex;"><span>        k <span style="color:#f92672">+=</span> int(i[j])
</span></span><span style="display:flex;"><span>    cipher_arr<span style="color:#f92672">.</span>append(k)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> cipher_arr:
</span></span><span style="display:flex;"><span>    flag <span style="color:#f92672">+=</span> dict_list[m<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(flag)
</span></span></code></pre></div><p>执行python脚本并查看终端输出的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-12.png" alt="img"></p>
<p>获取到明文，然后对明文加个flag数据形式的帽子并进行字母大写：cyberpeace{WELLDONE}</p>
<p>这道题目解决，题目属于签到题，没有什么难度</p>
<p>这道题目主要考察幂数加密的知识，（云影密码的设计逻辑其实和幂数加密相似，只是在设计过程进行了修改。）题目难度比较低·，签到题。</p>
<h2 id="railfence">Railfence</h2>
<p>看到题目大致知道考察的是什么密码的加密算法了，题目是栅栏，应该就是栅栏密码的密码知识考察</p>
<p>什么是栅栏密码呢？</p>
<p>所谓栅栏密码，就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。（一般不超过30个，也就是一、两句话）。加密原理：</p>
<ol>
<li>把将要传递的信息中的字母交替排成上下两行。</li>
<li>再将下面一行字母排在上面一行的后边，从而形成一段密码。[5]</li>
</ol>
<p>栅栏密码大致就是一种分组密码的一种密码算法，便于更好理解栅栏密码，这里有一个例子：</p>
<p>明文：THE LONGEST DAY MUST HAVE AN END5</p>
<p>加密：</p>
<ol>
<li>把将要传递的信息中的字母交替排成上下两行。
T E O G S D Y U T A E N N
H L N E T A M S H V A E D</li>
<li>密文：将下面一行字母排在上面一行的后边。
TEOGSDYUTAENN HLNETAMSHVAED</li>
</ol>
<p>解密：</p>
<p>先将密文分为两行</p>
<p>T E O G S D Y U T A E N N</p>
<p>H L N E T A M S H V A E D</p>
<p>再按上下上下的顺序组合成一句话明文：</p>
<p>THE LONGEST DAY MUST HAVE AN EN</p>
<p>现在知识也大致了解了，点开题目揭开这道题目的真实面目吧！</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-13-1024x266.png" alt="img">Railfence题目</p>
<p>题目描述中也暗示了是栅栏密码的信息</p>
<p>于是直接下载附件，看看附件中的描述内容密文究竟是啥样：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-14-1024x120.png" alt="img">附件内容</p>
<p>密文形式看样子像是解密出来直接就是flag数据。</p>
<p>这道题目可以使用在线工具进行解密，也可以使用python脚本进行解密。这里还是一如既往，使用python脚本进行解密：（这道题目比较狗，是W型的栅栏密码解密）</p>
<blockquote>
<p>栅栏密码有两种类型：一种是传统型栅栏密码，一种是W型栅栏密码，W型栅栏密码比较复杂。</p>
</blockquote>
<p>传统型栅栏密码脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrype</span>(cipher,key):
</span></span><span style="display:flex;"><span>    cipher_len <span style="color:#f92672">=</span> len(cipher)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> cipher_len<span style="color:#f92672">%</span>key <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span>        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">/</span> key
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">/</span> key <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    result <span style="color:#f92672">=</span> {x:<span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(key)}
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(cipher_len):
</span></span><span style="display:flex;"><span>        a <span style="color:#f92672">=</span> i<span style="color:#f92672">%</span>key;
</span></span><span style="display:flex;"><span>        result<span style="color:#f92672">.</span>update({a:result[a]<span style="color:#f92672">+</span>cipher[i]})
</span></span><span style="display:flex;"><span>    plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(key):
</span></span><span style="display:flex;"><span>        plainer <span style="color:#f92672">=</span> plainer <span style="color:#f92672">+</span> result[i]
</span></span><span style="display:flex;"><span>    print plainer
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TEOGSDYUTAENNHLNETAMSHVAED&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span>    decrype(cipher,n)
</span></span></code></pre></div><p>W型栅栏密码脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fence</span>(lst, numrails):
</span></span><span style="display:flex;"><span>    fence <span style="color:#f92672">=</span> [[<span style="color:#66d9ef">None</span>] <span style="color:#f92672">*</span> len(lst) <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(numrails)]
</span></span><span style="display:flex;"><span>    rails <span style="color:#f92672">=</span>list(range(numrails <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>))<span style="color:#f92672">+</span> list(range(numrails <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> n, x <span style="color:#f92672">in</span> enumerate(lst):
</span></span><span style="display:flex;"><span>        fence[rails[n <span style="color:#f92672">%</span> len(rails)]][n] <span style="color:#f92672">=</span> x
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> [c <span style="color:#66d9ef">for</span> rail <span style="color:#f92672">in</span> fence <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> rail <span style="color:#66d9ef">if</span> c <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode</span>(text, n):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(fence(text, n))
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode</span>(text, n):
</span></span><span style="display:flex;"><span>    rng <span style="color:#f92672">=</span> range(len(text))
</span></span><span style="display:flex;"><span>    pos <span style="color:#f92672">=</span> fence(rng, n)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(text[pos<span style="color:#f92672">.</span>index(n)] <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> rng)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>z <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ccehgyaefnpeoobe</span><span style="color:#e6db74">{lcirg}</span><span style="color:#e6db74">epriec_ora_g&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">10</span>):
</span></span><span style="display:flex;"><span>    y <span style="color:#f92672">=</span> decode(z,i)
</span></span><span style="display:flex;"><span>    print(y) 
</span></span></code></pre></div><p>这道题目是W型的栅栏密码，这里使用W型栅栏密码的脚本进行破解：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-15.png" alt="img"></p>
<p>成功跑出flag数据：cyberpeace{railfence_cipher_gogogo}</p>
<p>题目解决，这道题目属于简单题目</p>
<p>题目主要考察对栅栏密码的知识全面性考察，如果知识不全面可能会有一点绕，不容易解出。难度算是简单题目。</p>
<h2 id="不仅仅是morse">不仅仅是Morse</h2>
<p>看题目应该知道这道题目不是非常简单的样子，应该是一个复合加密的题目，就是涉及多种加密算法的加密。</p>
<p>点开题目页面，希望可以获取到更多关于题目的tip：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-16-1024x205.png" alt="img">题目页面</p>
<p>题目描述中有两个重要的tip信息：flag的数据格式和flag是一种食物的单词。对于解题有主要作用的是flag数据是一种食物的单词。</p>
<p>下面打开附件，进行解密：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-17.png" alt="img">附件内容</p>
<p>看来是一个摩尔斯电码的加密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>--/.-/-.--/..--.-/-..././..--.-/..../.-/...-/./..--.-/.-/-./---/-/...././.-./..--.-/-.././-.-./---/-.././..../..../..../..../.-/.-/.-/.-/.-/-.../.-/.-/-.../-.../-.../.-/.-/-.../-.../.-/.-/.-/.-/.-/.-/.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/.-/.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../-.../.-/.-/.-/-.../-.../.-/.-/-.../.-/.-/.-/.-/-.../.-/-.../.-/.-/-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/-.../-.../.-/.-/-.../-.../-.../.-/-.../.-/.-/.-/-.../.-/-.../.-/-.../-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../-.../.-/.-/-.../-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/-.../-.../.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/-.../-.../.-
</span></span></code></pre></div><p>首先先编写一个摩尔斯电码的解密脚本：（当然也可以使用在线的摩尔斯电码解密工具进行解密）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># python2</span>
</span></span><span style="display:flex;"><span>dict_list <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#39;.-&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;-...&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;-.-.&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;-..&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;.&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;..-.&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;--.&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;....&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;..&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;.---&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;-.-&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;.-..&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;--&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;-.&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;---&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;.--.&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;--.-&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;.-.&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;...&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;-&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;..-&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;...-&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;.--&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;-..-&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;-.--&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;--..&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;..--.-&#39;</span>:<span style="color:#e6db74">&#39;_&#39;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;--/.-/-.--/..--.-/-..././..--.-/..../.-/...-/./..--.-/.-/-./---/-/...././.-./..--.-/-.././-.-./---/-.././..../..../..../..../.-/.-/.-/.-/.-/-.../.-/.-/-.../-.../-.../.-/.-/-.../-.../.-/.-/.-/.-/.-/.-/.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/.-/.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../-.../.-/.-/.-/-.../-.../.-/.-/-.../.-/.-/.-/.-/-.../.-/-.../.-/.-/-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/-.../-.../.-/.-/-.../-.../-.../.-/-.../.-/.-/.-/-.../.-/-.../.-/-.../-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../-.../.-/.-/-.../-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/-.../-.../.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/-.../-.../.-&#34;</span>
</span></span><span style="display:flex;"><span>plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;/&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
</span></span><span style="display:flex;"><span>	plainer <span style="color:#f92672">+=</span> dict_list[i]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print plainer
</span></span></code></pre></div><p>执行编写好的python脚本，并查看终端的返回结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-18.png" alt="img"></p>
<p>获得一段解密后的文段：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>may_be_have_another_decodehhhhaaaaabaabbbaabbaaaaaaaabaababaaaaaaabbabaaabbaaabbaabaaaababaabaaabbabaaabaaabaababbaabbbabaaabababbaaabbabaaabaabaabaaaabbabbaabbaabaabaaabaabaabaababaabbabaaaabbabaabba
</span></span></code></pre></div><p>仔细看看文段，好像出题人想要我们去解密后面那段ab组成的密文</p>
<p>那段密文形式没有见过，于是本菜鸡又去求助搜索引擎了。搜索发现是培根密码，正好于tip相对应了。那什么是培根密码呢？</p>
<p>培根密码，又名倍康尼密码（英语：Bacon&rsquo;s cipher）是由法兰西斯·培根发明的一种隐写术。</p>
<p>加密时，明文中的每个字母都会转换成一组五个英文字母。其转换依靠下表：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>a AAAAA   g AABBA    n ABBAA   t BAABA
</span></span><span style="display:flex;"><span>b AAAAB   h AABBB    o ABBAB   u-v BAABB 
</span></span><span style="display:flex;"><span>c AAABA   i-j ABAAA  p ABBBA   w BABAA
</span></span><span style="display:flex;"><span>d AAABB   k ABAAB    q ABBBB   x BABAB
</span></span><span style="display:flex;"><span>e AABAA   l ABABA    r BAAAA   y BABBA
</span></span><span style="display:flex;"><span>f AABAB   m ABABB    s BAAAB   z BABBB
</span></span></code></pre></div><p>这只是一款最常用的加密表，有另外一款将每种字母配以不同的字母组予以转换，即I与J、U与V皆有不同编号。</p>
<p>加密者需使用两种不同字体，分别代表A和B。准备好一篇包含相同AB字数的假信息后，按照密文格式化假信息，即依密文中每个字母是A还是B分别套用两种字体。</p>
<p>解密时，将上述方法倒转。所有字体一转回A，字体二转回B，以后再按上表拼回字母。</p>
<p>法兰西斯·培根另外准备了一种方法，其将大小写分别看作A与B，可用于无法使用不同字体的场合（例如只能处理纯文本时）。但这样比起字体不同更容易被看出来，而且和语言对大小写的要求也不太兼容。</p>
<p>培根密码本质上是将二进制信息通过样式的区别，加在了正常书写之上。培根密码所包含的信息可以和用于承载其的文章完全无关。[6]</p>
<p>将摩尔斯电码解密出来的文段的后半部分取出作为密文，即：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>aaaaabaabbbaabbaaaaaaaabaababaaaaaaabbabaaabbaaabbaabaaaababaabaaabbabaaabaaabaababbaabbbabaaabababbaaabbabaaabaabaabaaaabbabbaabbaabaabaaabaabaabaababaabbabaaaabbabaabba
</span></span></code></pre></div><p>可以使用网上的培根密码工具进行解密也可以使用python脚本进行解密，这里使用python脚本进行解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># python2</span>
</span></span><span style="display:flex;"><span>dict_list<span style="color:#f92672">=</span>{            
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#39;aaaaa&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;aaaab&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;aaaba&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;aaabb&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;aabaa&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;aabab&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;aabba&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;aabbb&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;abaaa&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;abaab&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;ababa&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;ababb&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;abbaa&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;abbab&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;abbba&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;abbbb&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,  
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;baaaa&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;baaab&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;baaba&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;baabb&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;babaa&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;babab&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;babba&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;babbb&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>, 
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;bbaaa&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#39;bbaab&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;aaaaabaabbbaabbaaaaaaaabaababaaaaaaabbabaaabbaaabbaabaaaababaabaaabbabaaabaaabaababbaabbbabaaabababbaaabbabaaabaabaabaaaabbabbaabbaabaabaaabaabaabaababaabbabaaaabbabaabba&#34;</span>
</span></span><span style="display:flex;"><span>plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>cipher_arr <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span>[cipher_arr<span style="color:#f92672">.</span>append(cipher[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>]) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,len(cipher),<span style="color:#ae81ff">5</span>)]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
</span></span><span style="display:flex;"><span>	plainer <span style="color:#f92672">=</span>plainer<span style="color:#f92672">+</span>dict_list[i]
</span></span><span style="display:flex;"><span>print plainer
</span></span></code></pre></div><p>执行python脚本，并查看终端返回的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-19.png" alt="img"></p>
<p>看来输出的结果应该就是未成熟的flag数据：attackanddefenceworldisinteresting</p>
<p>对这个数据进行加帽处理：cyberpeace{attackanddefenceworldisinteresting}</p>
<p>flag数据成功拿到</p>
<p>这道题目主要考察古典密码学的替换加密算法知识，难度上应该算是简单题，思路也是比较流畅的。</p>
<h2 id="混合编码">混合编码</h2>
<p>看到题目，这道题应该是考察编码相关的知识的内容</p>
<p>点开题目页面，看看能得到什么关键信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-20-1024x293.png" alt="img">混合编码题目</p>
<p>题目描述中就有一个关键信息，就是题目的要求提交的flag数据格式信息，没有其他关键性的信息了</p>
<p>下载附件并打开查看密文：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-21-1024x150.png" alt="img">附件内容</p>
<p>附件中的密文内容看样子像是base64编码格式的：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>JiM3NjsmIzEyMjsmIzY5OyYjMTIwOyYjNzk7JiM4MzsmIzU2OyYjMTIwOyYjNzc7JiM2ODsmIzY5OyYjMTE4OyYjNzc7JiM4NDsmIzY1OyYjNTI7JiM3NjsmIzEyMjsmIzEwNzsmIzUzOyYjNzY7JiMxMjI7JiM2OTsmIzEyMDsmIzc3OyYjODM7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiMxMDc7JiMxMTg7JiM3NzsmIzg0OyYjNjU7JiMxMjA7JiM3NjsmIzEyMjsmIzY5OyYjMTIwOyYjNzg7JiMxMDU7JiM1NjsmIzEyMDsmIzc3OyYjODQ7JiM2OTsmIzExODsmIzc5OyYjODQ7JiM5OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzUwOyYjNzY7JiMxMjI7JiM2OTsmIzEyMDsmIzc4OyYjMTA1OyYjNTY7JiM1MzsmIzc4OyYjMTIxOyYjNTY7JiM1MzsmIzc5OyYjODM7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiM5OTsmIzExODsmIzc5OyYjODQ7JiM5OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzExOTsmIzc2OyYjMTIyOyYjNjk7JiMxMTk7JiM3NzsmIzY3OyYjNTY7JiMxMjA7JiM3NzsmIzY4OyYjNjU7JiMxMTg7JiM3NzsmIzg0OyYjNjU7JiMxMjA7JiM3NjsmIzEyMjsmIzY5OyYjMTE5OyYjNzc7JiMxMDU7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiM2OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzExOTsmIzc2OyYjMTIyOyYjMTA3OyYjNTM7JiM3NjsmIzEyMjsmIzY5OyYjMTE5OyYjNzc7JiM4MzsmIzU2OyYjMTIwOyYjNzc7JiM4NDsmIzEwNzsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzEyMDsmIzc2OyYjMTIyOyYjNjk7JiMxMjA7JiM3ODsmIzY3OyYjNTY7JiMxMjA7JiM3NzsmIzY4OyYjMTAzOyYjMTE4OyYjNzc7JiM4NDsmIzY1OyYjMTE5Ow==
</span></span></code></pre></div><p>使用在base64关卡中的python脚本进行base64解密（当然也可以使用在线工具进行base64解密）</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-22-1024x63.png" alt="img"></p>
<p>接出来的数据好像又是一种编码格式：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#52;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#69;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#50;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#53;&amp;#78;&amp;#121;&amp;#56;&amp;#53;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#99;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#65;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#103;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#119;
</span></span></code></pre></div><p>看样子应该是ascii编码格式，可以使用在线的ascii编码工具进行解密，也可使用python脚本进行解密，一如既往，这里使用python脚本进行解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># python2</span>
</span></span><span style="display:flex;"><span>cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#52;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#69;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#50;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#53;&amp;#78;&amp;#121;&amp;#56;&amp;#53;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#99;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#65;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#103;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#119;&#34;</span>
</span></span><span style="display:flex;"><span>plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>cipher_arr <span style="color:#f92672">=</span> cipher[<span style="color:#ae81ff">2</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;;&amp;#&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span>  cipher_arr:    
</span></span><span style="display:flex;"><span>	plainer <span style="color:#f92672">+=</span> chr(int(i))
</span></span><span style="display:flex;"><span>print plainer
</span></span></code></pre></div><p>执行编写好的python代码并查看终端输出情况：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-24-1024x51.png" alt="img"></p>
<p>输出的解密信息像是base64格式的编码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>LzExOS8xMDEvMTA4Lzk5LzExMS8xMDkvMTAxLzExNi8xMTEvOTcvMTE2LzExNi85Ny85OS8xMDcvOTcvMTEwLzEwMC8xMDAvMTAxLzEwMi8xMDEvMTEwLzk5LzEwMS8xMTkvMTExLzExNC8xMDgvMTAw
</span></span></code></pre></div><p>可以再使用一次base64解码的python脚本进行base64解码（也可以使用在线base64工具进行解码）：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-25.png" alt="img"></p>
<p>解码后又是一段ascii的编码格式，这里还是编写一个ascii解码的python脚本：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># python2</span>
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/119/101/108/99/111/109/101/116/111/97/116/116/97/99/107/97/110/100/100/101/102/101/110/99/101/119/111/114/108/100&#34;</span>
</span></span><span style="display:flex;"><span>plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>cipher_arr <span style="color:#f92672">=</span> cipher[<span style="color:#ae81ff">1</span>:]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;/&#39;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:    
</span></span><span style="display:flex;"><span>	plainer <span style="color:#f92672">+=</span> chr(int(i))
</span></span><span style="display:flex;"><span>print plainer
</span></span></code></pre></div><p>执行编写好的python代码并查看终端输出的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-26.png" alt="img"></p>
<p>解码出来的数据应该就是flag数据：welcometoattackanddefenceworld</p>
<p>根据题目要求，需要对这个flag数据进行加帽处理：cyberpeace{welcometoattackanddefenceworld}</p>
<p>题目解决，题目属于简单题目，思路就是反复套娃操作：base64-&gt;ASCII-&gt;base64-&gt;ASCII</p>
<p>题目主要考察对编码数据的识别和基本编码方式的解决，简单题。</p>
<h2 id="easy_rsa">easy_RSA</h2>
<p>看题目，这应该是考察到ctf中密码学的核心模块，也就是现代密码学的部分，RSA加密算法。</p>
<p>什么是RSA加密算法？</p>
<p>RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）在1977年一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p>
<p>对极大整数做因数分解的难度决定了 RSA 算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的 RSA 钥匙才可能被强力方式破解。到目前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的。[7]</p>
<p>RSA是现在密码学的一个典型代表，加密过程不像古典密码学中的密码那么简单，加密过程是非常复杂的。RSA加密算法的安全性也是相当高的。</p>
<h3 id="rsa算法">RSA算法</h3>
<p>密钥生成的步骤 [8]</p>
<p>我们通过一个例子，来理解RSA算法。假设爱丽丝要与鲍勃进行加密通信，她该怎么生成公钥和私钥呢？</p>
<p><strong>第一步，随机选择两个不相等的质数p和q。</strong></p>
<p>爱丽丝选择了61和53。（实际应用中，这两个质数越大，就越难破解。）</p>
<p><strong>第二步，计算p和q的乘积n。</strong></p>
<p>爱丽丝就把61和53相乘。</p>
<blockquote>
<p>$$
n = 61×53 = 3233
$$</p>
</blockquote>
<p>n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位。</p>
<p><strong>第三步，计算n的欧拉函数φ(n)。</strong></p>
<blockquote>
<p>n是质数，则 φ(n)=n-1
$$
n = p_1 × p_2
$$</p>
<p>$$
φ(n) = φ(p_1 \cdot p_2) = φ(p_1)\cdot φ(p_1)
$$</p>
<p>$$
=&gt; φ(n) = (p-1)(q-1)
$$</p>
</blockquote>
<p>爱丽丝算出φ(3233)等于60×52，即3120。</p>
<p><strong>第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。</strong></p>
<p>爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</p>
<p><strong>第五步，计算e对于φ(n)的模反元素d。</strong></p>
<p>所谓”模反元素”就是指有一个整数d，可以使得ed被φ(n)除的余数为1。</p>
<blockquote>
<p>$$
ed ≡ 1 (mod φ(n))
$$</p>
</blockquote>
<p>这个式子等价于</p>
<blockquote>
<p>$$
ed - 1 = kφ(n)
$$</p>
</blockquote>
<p>于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。(-k = y)</p>
<blockquote>
<p>$$
ex + φ(n)y = 1
$$</p>
</blockquote>
<p>已知 e=17, φ(n)=3120，</p>
<blockquote>
<p>$$
17x + 3120y = 1
$$</p>
</blockquote>
<p>这个方程可以用“扩展欧几里得算法”(又叫辗转相除法)求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。</p>
<p>至此所有计算完成。</p>
<p><strong>第六步，将n和e封装成公钥，n和d封装成私钥。</strong></p>
<p>在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。</p>
<p>实际应用中，公钥和私钥的数据都采用ASN.1格式表达。</p>
<p>这些RSA加密算法的流程和重要的几个参数是解决RSA算法密码学题目的核心，只有清晰地了解RSA加密算法的每个细节，面对RSA题目才能胸有成竹、游刃有余。</p>
<p>点开题目，看看题目描述能给出哪些提示吧：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-27-1024x280.png" alt="img">easy_RSA</p>
<p>题目中只有提交格式的提示，除此之外，都是描述性的信息，但是对解题没有太多作用。</p>
<p>下载附件，直接查看附件中的信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-28.png" alt="img">附件内容</p>
<p>这道题目应该是简单的计算，即根据RSA设计的算法过程进行逆向计算。这道题目可以使用rsatool工具进行直接求解，本菜鸡还是编写一个python脚本进行求解吧：（此脚本只能针对简单问题）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># python2</span>
</span></span><span style="display:flex;"><span>p<span style="color:#f92672">=</span><span style="color:#ae81ff">473398607161</span>
</span></span><span style="display:flex;"><span>q<span style="color:#f92672">=</span><span style="color:#ae81ff">4511491</span>e<span style="color:#f92672">=</span><span style="color:#ae81ff">17</span>
</span></span><span style="display:flex;"><span>pn<span style="color:#f92672">=</span>(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>flag<span style="color:#f92672">=</span>(pn<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">/</span>e
</span></span><span style="display:flex;"><span>print flag
</span></span></code></pre></div><p>执行编写的脚本，查看终端输出的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-29.png" alt="img"></p>
<p>这段输出的数据应该就是flag数据：125631357777427553</p>
<p>给这段flag数据加个帽子：cyberpeace{125631357777427553}</p>
<p>这道题目是RSA题目中的签到题，难度非常低，思路也非常简单</p>
<p>题目主要考察RSA加密算法的过程，签到题。</p>
<h2 id="easychallenge">easychallenge</h2>
<p>这道题的题目似乎看不出什么门路来，于是只能点开题目描述的页面：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-30-1024x292.png" alt="img">easychallenge题目</p>
<p>这道题目应该是在说程序方面的问题，题目描述也得到不了太多有用的信息，于是下载附件来获取到这道题目的真实面目：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-31.png" alt="img"></p>
<p>发现附件是一个python的一个可以执行的文件，查看文件的属性：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-32.png" alt="img"></p>
<p>发现是一个pyc文件，本菜鸡不知道什么是pyc文件，于是通过互联网的搜索引擎求助一波：</p>
<p>pyc是一种二进制文件，是由Python文件经过编译后所生成的文件，它是一种byte code，Python文件变成pyc文件后，加载的速度有所提高，而且pyc还是一种跨平台的字节码，由python的虚拟机来执行的，就类似于JAVA或者.NET的虚拟机的概念。pyc的内容与python的版本是相关的，不同版本编译后的pyc文件是不同的，例如2.5版本编译的是pyc文件，而2.4版本编译的python是无法执行的。[9]</p>
<p>pyc文件是py文件经过编译的文件格式，文件内容是一种可执行字节码，尝试执行一下这个文件：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-33.png" alt="img"></p>
<p>发现需要执行一下这个文件，需要输入flag数据，看来flag数据很可能就在这个文件内部。这里就需要进行反编译，即把pyc文件打回原形。通过互联网的搜索引擎查询到python内置了一个uncompyle模块可以进行pyc反编译。</p>
<p>于是可以使用<code>pip install uncompyle </code>命令安装一下uncompyle。</p>
<p>在命令行中执行：<code>uncompyle6 -o test.py '.\42aa1a89e3ae48c38e8b713051557020 (1).pyc'</code></p>
<p>文件应该成功输出成了一个test.py文件。</p>
<p>通过代码编辑器，查看到这个文件的源代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># uncompyle6 version 3.7.4</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Python bytecode 2.7 (62211)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Decompiled from: Python 3.8.6 (tags/v3.8.6:db45529, Sep 23 2020, 15:52:53) [MSC v.1927 64 bit (AMD64)]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Embedded file name: ans.py</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Compiled at: 2018-08-09 11:29:44</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode1</span>(ans):    
</span></span><span style="display:flex;"><span>	s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ans:
</span></span><span style="display:flex;"><span>    	x <span style="color:#f92672">=</span> ord(i) <span style="color:#f92672">^</span> <span style="color:#ae81ff">36</span>
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">+</span> <span style="color:#ae81ff">25</span>
</span></span><span style="display:flex;"><span>        s <span style="color:#f92672">+=</span> chr(x)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> s
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode2</span>(ans):
</span></span><span style="display:flex;"><span>	s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>    
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ans:
</span></span><span style="display:flex;"><span>    	x <span style="color:#f92672">=</span> ord(i) <span style="color:#f92672">+</span> <span style="color:#ae81ff">36</span>
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">^</span> <span style="color:#ae81ff">36</span>
</span></span><span style="display:flex;"><span>        s <span style="color:#f92672">+=</span> chr(x)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> s
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode3</span>(ans):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> base64<span style="color:#f92672">.</span>b32encode(ans)
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39; &#39;</span>
</span></span><span style="display:flex;"><span>print <span style="color:#e6db74">&#39;Please Input your flag:&#39;</span>
</span></span><span style="display:flex;"><span>flag <span style="color:#f92672">=</span> raw_input()
</span></span><span style="display:flex;"><span>final <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E===&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> encode3(encode2(encode1(flag))) <span style="color:#f92672">==</span> final:
</span></span><span style="display:flex;"><span>	print <span style="color:#e6db74">&#39;correct&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>	print <span style="color:#e6db74">&#39;wrong&#39;</span>
</span></span></code></pre></div><p>看到文件源代码，发现flag数据是进行三次加密的：</p>
<ol>
<li>异或处理-&gt;加数值chuli-&gt;ASCII编码</li>
<li>加数值处理-&gt;异或处理-&gt;ASCII编码</li>
<li>base32编码处理</li>
</ol>
<p>我们可以根据这个代码逻辑逆向设计一个加密算法脚本来解决：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># python2</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> base64
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode1</span>(ans):
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> base64<span style="color:#f92672">.</span>b32decode(ans)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode2</span>(ans):
</span></span><span style="display:flex;"><span>	s<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ans:
</span></span><span style="display:flex;"><span>    	x <span style="color:#f92672">=</span> ord(i) <span style="color:#f92672">^</span> <span style="color:#ae81ff">36</span>
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">-</span><span style="color:#ae81ff">36</span>
</span></span><span style="display:flex;"><span>    	s <span style="color:#f92672">+=</span> chr(x)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> s
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode3</span>(ans):
</span></span><span style="display:flex;"><span>	s<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>    
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ans:
</span></span><span style="display:flex;"><span>    	x <span style="color:#f92672">=</span> ord(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">25</span>
</span></span><span style="display:flex;"><span>        x <span style="color:#f92672">=</span> x <span style="color:#f92672">^</span> <span style="color:#ae81ff">36</span>
</span></span><span style="display:flex;"><span>        s <span style="color:#f92672">+=</span> chr(x)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> s
</span></span><span style="display:flex;"><span>cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E===&#34;</span>
</span></span><span style="display:flex;"><span>plainer <span style="color:#f92672">=</span> decode3(decode2(decode1(cipher)))
</span></span><span style="display:flex;"><span>print plainer
</span></span></code></pre></div><p>执行一下编写好的代码，查看终端输出的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-35.png" alt="img"></p>
<p>看输出结果，应该是flag数据没错了。</p>
<p>再次执行以下pyc程序验证一下：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-36.png" alt="img"></p>
<p>看来是没错了，成功获取这道题目的flag数据：cyberpeace{interestinghhhhh}</p>
<p>这道题目的难度上也是简单题，思路也是比较流畅的。</p>
<p>题目主要考察pyc文件的反编译，以及编码和密码学的一些简单理论。简单题。</p>
<h2 id="转轮机加密">转轮机加密</h2>
<p>看到题目有些懵懵的，本菜鸡不知道啥是转轮机加密，于是只能求助一下搜索引擎来获取与转轮机加密相关的更多信息：</p>
<p>转轮机是古典加密方法的集大成者，二战时轴心国普遍应用了该技术，可惜惨遭盟军攻破，德日还蒙在鼓里，一定程度上改变了最终的战局。</p>
<p>转轮机的原理概括起来就是循环置换的多表代换技术，尤其是多筒转轮机，可重复使用数以万计的字母替换表。</p>
<p>以三筒转轮机为例：</p>
<p><img src="../../../../Note/Blog/post_5.assets/929265-20160422083905866-1151128365.jpg" alt="img"></p>
<p>有三个可以独立旋转的圆筒，每个圆筒内部有26个输入引脚和26个输出引脚，内部连线使得输入与输出唯一连接。</p>
<p>每按一下输入键（旋转键），快速转子旋转一个引脚，当快速转子转满一轮（循环归位）时，带动中速转子旋转一个引脚，以此类推，类似钟表的秒分时。</p>
<p>今天，转轮机的意义在于它曾经给目前最广泛使用的密码&ndash;数据加密标准DES指明了方向。[10]</p>
<p>转轮机加密是一种古典密码学的一种加密方法，应该是古典密码学的分组密码</p>
<p>加密过程大致是：</p>
<p>明文-&gt;分组处理（类似于栅栏密码处理方式）-&gt;文段内容位移+密文-&gt;多文段顺序重排+密钥-&gt;密文组</p>
<p>下面点开题目描述，看看可以得到什么信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-37-1024x272.png" alt="img">转轮机加密题目</p>
<p>根据题目描述的信息，可以获得以下几点提示：</p>
<ol>
<li>二战</li>
<li>托马斯·杰斐逊</li>
<li>flag格式</li>
</ol>
<p>下面下载附件，并进行查看：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-38.png" alt="img">附件内容</p>
<p>要想获取到flag数据，应该就需要对附件内容的数据进行机密，这里编写一个python脚本来解密：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># python2</span>
</span></span><span style="display:flex;"><span>dict_list <span style="color:#f92672">=</span> {            
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;1&#39;</span>:<span style="color:#e6db74">&#39;ZWAXJGDLUBVIQHKYPNTCRMOSFE&#39;</span>,            <span style="color:#e6db74">&#39;2&#39;</span>:<span style="color:#e6db74">&#39;KPBELNACZDTRXMJQOYHGVSFUWI&#39;</span>,            <span style="color:#e6db74">&#39;3&#39;</span>:<span style="color:#e6db74">&#39;BDMAIZVRNSJUWFHTEQGYXPLOCK&#39;</span>,            <span style="color:#e6db74">&#39;4&#39;</span>:<span style="color:#e6db74">&#39;RPLNDVHGFCUKTEBSXQYIZMJWAO&#39;</span>,            <span style="color:#e6db74">&#39;5&#39;</span>:<span style="color:#e6db74">&#39;IHFRLABEUOTSGJVDKCPMNZQWXY&#39;</span>,            <span style="color:#e6db74">&#39;6&#39;</span>:<span style="color:#e6db74">&#39;AMKGHIWPNYCJBFZDRUSLOQXVET&#39;</span>,            <span style="color:#e6db74">&#39;7&#39;</span>:<span style="color:#e6db74">&#39;GWTHSPYBXIZULVKMRAFDCEONJQ&#39;</span>,            <span style="color:#e6db74">&#39;8&#39;</span>:<span style="color:#e6db74">&#39;NOZUTWDCVRJLXKISEFAPMYGHBQ&#39;</span>,            <span style="color:#e6db74">&#39;9&#39;</span>:<span style="color:#e6db74">&#39;XPLTDSRFHENYVUBMCQWAOIKZGJ&#39;</span>,            <span style="color:#e6db74">&#39;10&#39;</span>:<span style="color:#e6db74">&#39;UDNAJFBOWTGVRSCZQKELMXYIHP&#39;</span>,            <span style="color:#e6db74">&#39;11&#39;</span>:<span style="color:#e6db74">&#39;MNBVCXZQWERTPOIUYALSKDJFHG&#39;</span>,            <span style="color:#e6db74">&#39;12&#39;</span>:<span style="color:#e6db74">&#39;LVNCMXZPQOWEIURYTASBKJDFHG&#39;</span>,             <span style="color:#e6db74">&#39;13&#39;</span>:<span style="color:#e6db74">&#39;JZQAWSXCDERFVBGTYHNUMKILOP&#39;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>key<span style="color:#f92672">=</span>[<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">13</span>,<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">6</span>]
</span></span><span style="display:flex;"><span>cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;NFQKSEVOQOFNP&#34;</span>
</span></span><span style="display:flex;"><span>cipher_arr<span style="color:#f92672">=</span>[]
</span></span><span style="display:flex;"><span>plainer_arr<span style="color:#f92672">=</span>[]
</span></span><span style="display:flex;"><span>plainer_list<span style="color:#f92672">=</span>[]
</span></span><span style="display:flex;"><span>index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> key:
</span></span><span style="display:flex;"><span>	cipher_arr<span style="color:#f92672">.</span>append(dict_list[str(i)])
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> cipher_arr:
</span></span><span style="display:flex;"><span>    	location <span style="color:#f92672">=</span> j<span style="color:#f92672">.</span>index(cipher[index])
</span></span><span style="display:flex;"><span>        str_get <span style="color:#f92672">=</span> j[location:] <span style="color:#f92672">+</span> j[:location]    	
</span></span><span style="display:flex;"><span>        plainer_arr<span style="color:#f92672">.</span>append(str_get)
</span></span><span style="display:flex;"><span>        index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(plainer_arr[<span style="color:#ae81ff">0</span>])):
</span></span><span style="display:flex;"><span>	str_get<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>    
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> plainer_arr:
</span></span><span style="display:flex;"><span>    	str_get <span style="color:#f92672">+=</span> j[i]
</span></span><span style="display:flex;"><span>print str_get<span style="color:#f92672">.</span>lower()
</span></span></code></pre></div><p>执行刚刚编写好的python脚本，并在终端命令行中查看执行结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-39.png" alt="img"></p>
<p>得到了一个明文的列表：</p>
<pre tabindex="0"><code>nfqksevoqofnpahgcxiusnwcbnctwpcubfotuvyzetmdrmezgkccdqhneyczuvtxjtgszrtqwtrezbrypqfawawsbqfxxywvsaxdcswzmpbxbbojczxedjlxygkigvqqrrqoiitjkdrkytuoczhydzljeipsykufhfgullzolhblrnhjbxmmiogdvlugxvkxjuqvmkamlpiiywyxsambkvlqsiaavfireintheholeuzaulcdkfprstwvfoomsyaupkairdtpxrppdldmkncsjzfnmnnjkpsegzphtyadfgbjojqqecgjvhheunvaonrhfhgilwjdwwymbbgmw
</code></pre><p>列表中存在明文，这时候需要看看题目描述的3个tip：</p>
<ol>
<li>二战</li>
<li>托马斯·杰斐逊</li>
<li>flag格式</li>
</ol>
<p>由于转轮机加密是托马斯·杰斐逊发明的，因而tip2已经使用，tip3是要在提交的时候使用，这时候还有一个tip1，二战。找一下明文列表中是否有与二战相关的文段。</p>
<p>发现文段：fireinthehole 与二战相关，这个明文段应该就是flag数据了。</p>
<p>根据题目描述的flag数据要求，fireinthehole就是正确的flag数据了。</p>
<p>题目解决，题目的思路也是比较流畅简单的，难度上算是简单题。</p>
<p>题目主要考察的是古典密码学中的转轮机加密，简单题。</p>
<h2 id="normal_rsa">Normal_RSA</h2>
<p>看到题目，感觉这道题目应该不简单，明显的一道RSA加密算法题目，估计也是考察RSA加密算法相关知识的题目。</p>
<p>直接点开题目描述，看看可以获取到什么有用的tip</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-40-1024x273.png" alt="img">Normal_RSA题目</p>
<p>根据题目描述，这道题目应该是需要使用到工具的。RSA加密算法题目通常会使用到openssl，rsatool，factordb，sagemath工具进行rsa的公钥私钥的运算。</p>
<p>下载附件，查看附件有什么东西吧：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-41.png" alt="img">附件</p>
<p>附件个压缩文件，我们对压缩文件进行解压获得一个文件夹：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-42.png" alt="img"></p>
<p>打开这个文件夹：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-43.png" alt="img">文件夹内容</p>
<p>发现有两个文件，一个是公钥，一个是密文。pem格式的文件应该是openssl的一种文件格式</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-44.png" alt="img"></p>
<p>这里使用openssl来获取到公钥文件的e和n，使用openssl的rsa功能之前可以先看看rsa功能的帮助：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-45.png" alt="img">openssl rsa帮助</p>
<p>了解了大致参数，执行命令<code>rsa -pubin -text -modulus -in pubkey.pem</code> 来获取e和n的数据：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-46.png" alt="img"></p>
<p>exponent就是e，modulus就是n。</p>
<p>这里的e是十进制的，n是十六进制的：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>Exponent: 65537 (0x10001)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Modulus=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD
</span></span></code></pre></div><p>需要进行转换，使用ipython交互求出十进制数值：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-48.png" alt="img"></p>
<p>现在得到：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>n=87924348264132406875276140514499937145050893665602592992418171647042491658461
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e=65537
</span></span></code></pre></div><p>下面需要求出p和q，这里需要进行大数分解，这里使用<a href="http://factordb.com/">focterdb</a>进行大数分解：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-49-1024x111.png" alt="img"></p>
<p>现在得到的数据有：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>p=275127860351348928173285174381581152299
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>q=319576316814478949870590164193048041239
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>n=87924348264132406875276140514499937145050893665602592992418171647042491658461
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>e=65537
</span></span></code></pre></div><p>现在这些数据可以求出参数d了，这里使用rsatool求解参数d、生成私钥文件：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>python ~/rsatool/rsatool.py  -f PEM -o private.pem  -p <span style="color:#ae81ff">275127860351348928173285174381581152299</span> -q <span style="color:#ae81ff">319576316814478949870590164193048041239</span> -e <span style="color:#ae81ff">65537</span> 
</span></span></code></pre></div><p><img src="/images/XCTF-CRYPTO-novice_writeup/image-53-1024x313.png" alt="img"></p>
<p>现在得到了私钥文件和公钥文件了，可以使用openssl进行解密了</p>
<p>opensssl解密RSA加密算法的模块是rsautl，解密之前，先看看rsautl的帮助：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-51.png" alt="img"></p>
<p>了解大致参数后，执行命令开始进行求解：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span> rsautl -in flag.enc -inkey private.pem -out flag.txt -decrypt
</span></span></code></pre></div><p>然后查看生成的txt文件内容：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-54.png" alt="img"></p>
<p>成功获取到flag数据：PCTF{256b_i5_m3dium}</p>
<p>题目解决，题目是比较常规的RSA题目，题目主要考察RSA知识的掌握以及RSA工具的使用。</p>
<p>题目难度上，题目算是简单题目。</p>
<h2 id="esay_ecc">esay_ECC</h2>
<p>看到题目，这道题目应该是一个比较难的题目，题目考察到的是ecc加密算法，是密码学中比较难也是比较核心的考察点。ecc加密算法也是ctf密码学的难点。什么是ecc加密算法？</p>
<p>椭圆曲线密码学（英语：Elliptic Curve Cryptography，缩写：ECC）是一种基于椭圆曲线数学的公开密钥加密算法。椭圆曲线在密码学中的使用是在1985年由Neal Koblitz（英语：Neal Koblitz）和Victor Miller（英语：Victor Miller）分别独立提出的。</p>
<p>ECC的主要优势是它相比RSA加密算法使用较小的密钥长度并提供相当等级的安全性。ECC的另一个优势是可以定义群之间的双线性映射，基于Weil对或是Tate对；双线性映射已经在密码学中发现了大量的应用，例如基于身份的加密。[11]</p>
<p>点开题目，看看题目能给我们什么有用的信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-55-1024x301.png" alt="img">easy_ECC题目</p>
<p>题目的描述提示了ecc基本原理和提交的flag格式。这道题目解决的关键应该就是ecc基本原理。</p>
<p>点开附件进行下载，查看附件内容：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-56.png" alt="img">附件内容</p>
<p>本菜鸡现在实在是看不懂ecc加密算法的基本原理，这道题目直接搬大佬的脚本求解：[12]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>Gx <span style="color:#f92672">=</span> <span style="color:#ae81ff">6478678675</span>
</span></span><span style="display:flex;"><span>Gy <span style="color:#f92672">=</span> <span style="color:#ae81ff">5636379357093</span>
</span></span><span style="display:flex;"><span>a <span style="color:#f92672">=</span> <span style="color:#ae81ff">16546484</span> 
</span></span><span style="display:flex;"><span>b <span style="color:#f92672">=</span> <span style="color:#ae81ff">4548674875</span>
</span></span><span style="display:flex;"><span>p <span style="color:#f92672">=</span> <span style="color:#ae81ff">15424654874903</span>
</span></span><span style="display:flex;"><span>k <span style="color:#f92672">=</span> <span style="color:#ae81ff">546768</span>
</span></span><span style="display:flex;"><span>x <span style="color:#f92672">=</span> Gx
</span></span><span style="display:flex;"><span>y <span style="color:#f92672">=</span> Gy
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(k<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (x<span style="color:#f92672">==</span>Gx <span style="color:#f92672">and</span> y<span style="color:#f92672">==</span>Gy):
</span></span><span style="display:flex;"><span>        inv <span style="color:#f92672">=</span> pow(<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>Gy, p<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>,p)
</span></span><span style="display:flex;"><span>        temp <span style="color:#f92672">=</span> (<span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>Gx<span style="color:#f92672">*</span>Gx<span style="color:#f92672">+</span>a)<span style="color:#f92672">*</span>inv<span style="color:#f92672">%</span>p
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        inv <span style="color:#f92672">=</span> pow((x<span style="color:#f92672">-</span>Gx), p<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>,p)
</span></span><span style="display:flex;"><span>        temp <span style="color:#f92672">=</span> (y<span style="color:#f92672">-</span>Gy)<span style="color:#f92672">*</span>inv<span style="color:#f92672">%</span>p
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    xr <span style="color:#f92672">=</span> (temp<span style="color:#f92672">*</span>temp<span style="color:#f92672">-</span>Gx<span style="color:#f92672">-</span>x)<span style="color:#f92672">%</span>p
</span></span><span style="display:flex;"><span>    yr <span style="color:#f92672">=</span> (temp<span style="color:#f92672">*</span>(x<span style="color:#f92672">-</span>xr)<span style="color:#f92672">-</span>y)<span style="color:#f92672">%</span>p
</span></span><span style="display:flex;"><span> <span style="color:#75715e">#print(i,xr,yr)</span>
</span></span><span style="display:flex;"><span>    x <span style="color:#f92672">=</span> xr
</span></span><span style="display:flex;"><span>    y <span style="color:#f92672">=</span> yr
</span></span><span style="display:flex;"><span>print(x<span style="color:#f92672">+</span>y)
</span></span></code></pre></div><p>执行脚本进行求解：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-57.png" alt="img"></p>
<p>解出来的数值：19477226185390。对解出来的数值加个帽子：cyberpeace{19477226185390}</p>
<p>flag数据就是：cyberpeace{19477226185390}</p>
<p>题目解决，难度适中，主要考察ecc基本原理（本菜鸡现在看不懂，嘤嘤嘤）</p>
<h2 id="参考">参考：</h2>
<ol>
<li><a href="https://blog.csdn.net/jiang_xinxing/article/details/89360638">密码学发展简史</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81">凯撒密码-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81">摩尔斯电码-维基百科</a></li>
<li><a href="https://www.jianshu.com/p/b5aa5cf60f83">01248云影密码-简书</a></li>
<li><a href="https://baike.baidu.com/item/%E6%A0%85%E6%A0%8F%E5%AF%86%E7%A0%81/228209">栅栏密码-百度百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E5%9F%B9%E6%A0%B9%E5%AF%86%E7%A2%BC">培根密码-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">RSA加密算法-维基百科</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html">RSA加密算法-阮一峰</a></li>
<li><a href="https://www.php.cn/python-tutorials-416352.html">什么是.pyc文件-Python教程-PHP中文网</a></li>
<li><a href="https://www.cnblogs.com/block2016/p/5419894.html">古典加密方法（三）转轮机 - block2016 - 博客园</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6?__cf_chl_jschl_tk__=a9978b71ec35dea51611bffa9ddfde17af6370e0-1617507761-0-AS1qzJ-oZAEq_LTzowb0J7phGWNrxR30GyxWwo6CyT69z-ihrCQkPQyVQt09Ilbvz62nswUGfiKGW0V7wr81F8k7VR2CTAXsMzT-d0exQRmElW9n_yv_SYJl2ZMXNsx1IF8xd9OYYwHGTSD_-s2IngOPyneCJ2vgpXqo9Ni7n7kPjZpACS3_rMdRHNdn9nCJNQX7QmB-220VQx5FnGlcQZzU9u4WOLCZDnB04Ui439-MF7E9NDg4g3poRLyDAA2mB3SznYOkHvz-9GPxSImOa87p75BN9SNM69QUdhG0fuDleenL6XoNzcYBuM-Q1lgNA-S_BnZsPAuTtUo3aDdZNP8woYFz6qr5K2WzLVQ-fYEofJN4TCVQPCn1f1PbnffLiUhOHT342PmSBmuo0xDZy6RHHJMOjFSeWT5TixJIYYmYiz2EbnrifJikVyt0-CZycYnh_-QPhzzbqleCFm90uSXCfvMuTtZ9kAzWZHqBLVpLcS1VS6spCfFZYw78f9bC7pUZUqcNYyB7pY_vhuQX6Mg">椭圆曲线密码学-维基百科</a></li>
<li><a href="https://blog.csdn.net/weixin_46227016/article/details/111565136">XCTF easy_ECC WP</a></li>
</ol>
<p>XCTF的新手区密码学题目可能难度不是很高，但是XCTF新手区的密码学题目涉及的范围还是比较广的。从编码到密码，从古典到现代，从rsa到ecc都有涉及，密码学考察的基本知识都涉及到了。</p>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>XCTF WEB novice Writeup</title>
            <link>/posts/xctf-web-novice_writeup/</link>
            <pubDate>Fri, 25 Jun 2021 21:08:13 +0800</pubDate>
            
            <guid>/posts/xctf-web-novice_writeup/</guid>
            <description>来点时效性的文章，不能总闲聊吧？
XCTF是一个国内比较常用的CTF的刷题网站，网站页面如下：
XCTF攻防世界页面
初次写writeup，解题思路可能不是很明确。
本次要解决的题目如下：
XCTF WEB新手区题目
view source robots backup cookie disabled button weak auth simple php get post xff referer webshell command execution simple js view_source 进入到题目页面中，获取与解题相关的信息
view_source题目
根据题目要求可知，鼠标右键不可用了。
我们进入环境来一探究竟
靶机环境
靶机展示的页面非常简单，说flag不在这儿，我不大相信，尝试使用右键查看源代码
发现右键不能使用。看来靶机的代码把浏览器的右键给禁用了，解决方法有两个：
使用F12进行检查源代码 开启浏览器禁用js模式 这里使用F12进行查看源代码（开启禁用js模式比较麻烦）
页面源代码
F12成功打开页面源代码调试，可以看到flag就在源代码的注释中，简单题
本题主要考察对浏览器调试器的使用技巧，没有什么难度。
robots 进入到题目页面环境中，查看题目信息和相关描述。
robots题目
题目描述中提到了robots协议，本菜鸡不知道什么是robots协议，但是可以肯定robots协议就是本题的突破点，我去搜索查找一下有关robots协议的相关信息。
robots协议相关信息
根据百度百科的说明，其实robots协议就是网站目录下的robots.txt文件
预备的知识信息获取到了，下面进入到靶机环境，去拿flag
靶机页面
靶机页面是个空白页面，在靶机地址后面输入/robots.txt尝试找到flag
进入到robots.txt页面寻找有关flag的相关信息
robots.txt页面信息
根据robots.txt展示的页面信息，可知flag就在flag_1s_h3re.php文件中
那就进入到这个文件中
flag_1s_h3re.php文件页面
成功拿到flag数据信息，题目也是简单题
这道题目主要考察robots协议的相关知识以及网站目录的部分知识，也是简单题，思路非常明确
backup 进入到题目页面中，寻找有用的题目突破信息
backup题目
根据题目描述，这道题目是在考察备份文件，备份文件是解题的关键
根据备份文件的相关信息可知，备份文件通常都是后缀名.bak的文件
已有知识准备好了，现在进入到靶机环境中拿flag
靶机页面
靶机直接就把提示摆到页面上面了，直接访问index.php.bak文件就可以了
一般来说index.php的备份文件就是index.php.bak文件
访问url/index.php.bak，备份文件成功被下载下来
备份文件
打开备份文件寻找信息
备份文件信息</description>
            <content type="html"><![CDATA[<p>来点时效性的文章，不能总闲聊吧？</p>
<p><a href="https://adworld.xctf.org.cn/">XCTF</a>是一个国内比较常用的CTF的刷题网站，网站页面如下：</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-1.png" alt="image-1">XCTF攻防世界页面</p>
<p>初次写writeup，解题思路可能不是很明确。</p>
<p>本次要解决的题目如下：</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-2.png" alt="image-2">XCTF WEB新手区题目</p>
<ul>
<li>view source</li>
<li>robots</li>
<li>backup</li>
<li>cookie</li>
<li>disabled button</li>
<li>weak auth</li>
<li>simple php</li>
<li>get post</li>
<li>xff referer</li>
<li>webshell</li>
<li>command execution</li>
<li>simple js</li>
</ul>
<h2 id="view_source">view_source</h2>
<p>进入到题目页面中，获取与解题相关的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-3.png" alt="image-3">view_source题目</p>
<p>根据题目要求可知，鼠标右键不可用了。</p>
<p>我们进入环境来一探究竟</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-4.png" alt="image-4">靶机环境</p>
<p>靶机展示的页面非常简单，说flag不在这儿，我不大相信，尝试使用右键查看源代码</p>
<p>发现右键不能使用。看来靶机的代码把浏览器的右键给禁用了，解决方法有两个：</p>
<ol>
<li>使用F12进行检查源代码</li>
<li>开启浏览器禁用js模式</li>
</ol>
<p>这里使用F12进行查看源代码（开启禁用js模式比较麻烦）</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-5.png" alt="image-5"></p>
<p>页面源代码</p>
<p>F12成功打开页面源代码调试，可以看到flag就在源代码的注释中，简单题</p>
<p>本题主要考察对浏览器调试器的使用技巧，没有什么难度。</p>
<h2 id="robots">robots</h2>
<p>进入到题目页面环境中，查看题目信息和相关描述。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-6.png" alt="image-6">robots题目</p>
<p>题目描述中提到了robots协议，本菜鸡不知道什么是robots协议，但是可以肯定robots协议就是本题的突破点，我去搜索查找一下有关robots协议的相关信息。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-7.png" alt="image-7">robots协议相关信息</p>
<p>根据百度百科的说明，其实robots协议就是网站目录下的robots.txt文件</p>
<p>预备的知识信息获取到了，下面进入到靶机环境，去拿flag</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-8.png" alt="image-8">靶机页面</p>
<p>靶机页面是个空白页面，在靶机地址后面输入/robots.txt尝试找到flag</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-9.png" alt="image-9"></p>
<p>进入到robots.txt页面寻找有关flag的相关信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-10.png" alt="image-10"></p>
<p>robots.txt页面信息</p>
<p>根据robots.txt展示的页面信息，可知flag就在flag_1s_h3re.php文件中</p>
<p>那就进入到这个文件中</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-11.png" alt="image-11">flag_1s_h3re.php文件页面</p>
<p>成功拿到flag数据信息，题目也是简单题</p>
<p>这道题目主要考察robots协议的相关知识以及网站目录的部分知识，也是简单题，思路非常明确</p>
<h2 id="backup">backup</h2>
<p>进入到题目页面中，寻找有用的题目突破信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-12-1024x292.png" alt="image-12-1024x292">backup题目</p>
<p>根据题目描述，这道题目是在考察备份文件，备份文件是解题的关键</p>
<p>根据备份文件的相关信息可知，备份文件通常都是后缀名.bak的文件</p>
<p>已有知识准备好了，现在进入到靶机环境中拿flag</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-13.png" alt="image-13">靶机页面</p>
<p>靶机直接就把提示摆到页面上面了，直接访问index.php.bak文件就可以了</p>
<p>一般来说index.php的备份文件就是index.php.bak文件</p>
<p>访问url/index.php.bak，备份文件成功被下载下来</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-14.png" alt="image-14"></p>
<p>备份文件</p>
<p>打开备份文件寻找信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-15.png" alt="image-15">备份文件信息</p>
<p>发现flag数据就在备份文件中，题目解决，也是一道简单题目</p>
<p>题目主要考察的就是备份文件的相关知识，简单题，思路非常明确</p>
<h2 id="cookie">cookie</h2>
<p>进入到题目页面，寻找与解题相关的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-16-1024x282.png" alt="image-16-1024x282">cookie题目</p>
<p>题目描述和题目明显提示是cookie相关的知识，cookie的知识一般做web安全都是必须知道且需要了解的一个重要的知识点。这里搬出MDN上面对于<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">cookie</a>的说明，cookie知识不清楚的可以去MDN页面中了解</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-17.png" alt="image-17">MDN cookie</p>
<p>简单来说，cookie就是存储在用户服务器上的一段信息内容</p>
<p>可以使用浏览器的调试器查看该页面的cookie数据，准备知识现在已经完备。</p>
<p>进入到靶机环境，拿flag！</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-18.png" alt="image-18"></p>
<p>靶机页面</p>
<p>靶机页面信息展示的很明确，就是cookie</p>
<p>打开F12调试器查看cookie信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-19-1024x234.png" alt="image-19-1024x234">cookie数据</p>
<p>发现有很多条cookie数据，不知道该选择哪一条cookie数据，我发现这些cookie的domain信息不太一样。有四条的domain信息是baidu.com，只有一条的domain信息是靶机的ip地址，看来需要的cookie信息就是domain信息是靶机ip地址的那条cookie</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-20.png" alt="image-20">靶机cookie数据</p>
<p>cookie的键值对是look-here:cookie.php，cookie.php显然不是flag数据，估计是想让我们访问这个文件，我们来访问一下这个文件</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-21.png" alt="image-21"></p>
<p>cookie.php页面信息</p>
<p>这个页面展示的内容也是非常简单的，让我们去看看response信息。</p>
<p>可能有人会问response是什么？response就是http头部信息的响应信息，在调试器的网络那一栏可以查看到页面的http头部信息。关于http头部信息的更多内容，可以访问<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">MDN的HTTP头部列表</a></p>
<p>打开浏览器的调试器</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-22-1024x140.png" alt="image-22-1024x140">网络响应数据</p>
<p>如果响应数据中没有任何信息，可以刷新一下页面来找到响应数据</p>
<p>然后我们选择响应数据中的cookie.php的数据信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-23.png" alt="image-23">cookie.php的响应信息</p>
<p>发现响应标头的信息中有flag数据，本题也就成功解出，也是简单题目，跟着引导走，很快就能拿到flag</p>
<p>题目主要考察cookie相关知识和htpp头的相关知识内容，这里也可以使用burp suite来抓包获取http信息，简单题，思路也相对比较流畅。</p>
<h2 id="disabled-button">disabled button</h2>
<p>看到这个题目就大致知道这道题目的考察目标了，应该是一道非常简单的题目</p>
<p>来看看题目内容有什么具体的描述信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-24-1024x287.png" alt="img">disabled_button题目</p>
<p>根据题目描述可以知道，这道题目是考察前端知识的。根据题目disabled_button，这道题目很可能是在考察html标签属性的，下面我们进入到题目中一探究竟</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-25.png" alt="img"></p>
<p>靶机页面</p>
<p>页面展示的信息非常清晰不能按的按钮，而且flag信息就藏在这个按钮后面</p>
<p>直接点开F12查看源代码</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-26.png" alt="img">源代码检查</p>
<p>发现input标签有关disabled属性，我们将disabled属性删除，按钮就可以按了</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-27.png" alt="img"></p>
<p>源代码修改</p>
<p>然后返回到页面上去，发现按钮可以被按下</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-28.png" alt="img"></p>
<p>按钮页面</p>
<p>按下按钮，查看可以获取到的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-29.png" alt="img"></p>
<p>flag信息</p>
<p>成功获取到flag信息，题目解决，这道题目非常简单，应该是道签到题</p>
<p>题目主要考察前端的html知识，签到题</p>
<h2 id="weak-auth">weak auth</h2>
<p>进入到题目页面，查看可以利用的信息及提示</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-30-1024x277.png" alt="img">weak_auth</p>
<p>根据题目和题目描述信息可以知道，这道题目是一个登录页面，而且采用的是弱口令进行认证的页面。</p>
<p>考察的信息应该是暴力破解的知识以及暴力破解的工具使用。</p>
<p>这里说一下暴力破解的内容知识：</p>
<p>暴力破解也叫蛮力攻击，是一种非常无脑的攻击手段，经常会和社会工程学一起采用来达到成功破解用户密码的效果。</p>
<p>蛮力攻击（英语：Brute-force attack），又称为穷举攻击（英语：Exhaustive attack）或暴力破解，是一种密码分析的方法，即将密码进行逐个推算直到找出真正的密码为止。例如：一个已知是四位数并且全部由阿拉伯数字组成的密码，其可能共有10000种组合，因此最多尝试9999次就能找到正确的密码。理论上除了具有完善保密性的密码以外，利用这种方法可以破解任何一种密码，问题只在于如何缩短试误时间。有些人运用计算机来增加效率，有些人透过字典攻击（英语：Dictionary attack）来缩小密码组合的范围。[1]</p>
<p>如果要解决这道题目，就必不可少一些暴力破解会使用的工具来进行暴力破解。暴力破解工具有很多，一般来说，web安全会有一些比较常用的暴力破解工具，这道题目可能需要使用到kali操作系统来辅助解题。常用的暴力破解工具一般有：Hydra，Medusa，Burp suite。</p>
<p>这里可能使用到Hydra进行暴力破解，这里说明一些Hydra的暴力破解的方法和相关参数</p>
<p><strong>hydra</strong> 是一个支持众多协议的爆破工具，已经集成到KaliLinux中，直接在终端打开即可。[2]</p>
<p>常用的hydra的暴力破解命令：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>1、破解ssh： 
</span></span><span style="display:flex;"><span>hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip ssh 
</span></span><span style="display:flex;"><span>hydra -l 用户名 -p 密码字典 -t 线程 -o save.log -vV ip ssh 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>2、破解ftp： 
</span></span><span style="display:flex;"><span>hydra ip ftp -l 用户名 -P 密码字典 -t 线程<span style="color:#f92672">(</span>默认16<span style="color:#f92672">)</span> -vV 
</span></span><span style="display:flex;"><span>hydra ip ftp -l 用户名 -P 密码字典 -e ns -vV 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>3、get方式提交，破解web登录： 
</span></span><span style="display:flex;"><span>hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip http-get /admin/ 
</span></span><span style="display:flex;"><span>hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f ip http-get /admin/index.php
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>4、post方式提交，破解web登录： 
</span></span><span style="display:flex;"><span>hydra -l 用户名 -P 密码字典 -s <span style="color:#ae81ff">80</span> ip http-post-form <span style="color:#e6db74">&#34;/admin/login.php:username=^USER^&amp;password=^PASS^&amp;submit=login:sorry password&#34;</span> 
</span></span><span style="display:flex;"><span>hydra -t <span style="color:#ae81ff">3</span> -l admin -P pass.txt -o out.txt -f 10.36.16.18 http-post-form <span style="color:#e6db74">&#34;login.php:id=^USER^&amp;passwd=^PASS^:&lt;title&gt;wrong username or password&lt;/title&gt;&#34;</span> 
</span></span><span style="display:flex;"><span>（参数说明：-t同时线程数3，-l用户名是admin，字典pass.txt，保存为out.txt，-f 当破解了一个密码就停止， 10.36.16.18目标ip，http-post-form表示破解是采用http的post方式提交的表单密码破解,&lt;title&gt;中 的内容是表示错误猜解的返回信息提示。） 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>5、破解https： 
</span></span><span style="display:flex;"><span>hydra -m /index.php -l muts -P pass.txt 10.36.16.18 https 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>6、破解teamspeak： 
</span></span><span style="display:flex;"><span>hydra -l 用户名 -P 密码字典 -s 端口号 -vV ip teamspeak 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>7、破解cisco： 
</span></span><span style="display:flex;"><span>hydra -P pass.txt 10.36.16.18 cisco 
</span></span><span style="display:flex;"><span>hydra -m cloud -P pass.txt 10.36.16.18 cisco-enable 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>8、破解smb： 
</span></span><span style="display:flex;"><span>hydra -l administrator -P pass.txt 10.36.16.18 smb 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>9、破解pop3： 
</span></span><span style="display:flex;"><span>hydra -l muts -P pass.txt my.pop3.mail pop3 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>10、破解rdp： 
</span></span><span style="display:flex;"><span>hydra ip rdp -l administrator -P pass.txt -V 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>11、破解http-proxy： 
</span></span><span style="display:flex;"><span>hydra -l admin -P pass.txt http-proxy://10.36.16.18 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>12、破解imap： 
</span></span><span style="display:flex;"><span>hydra -L user.txt -p secret 10.36.16.18 imap PLAIN 
</span></span><span style="display:flex;"><span>hydra -C defaults.txt -6 imap://<span style="color:#f92672">[</span>fe80::2c:31ff:fe12:ac11<span style="color:#f92672">]</span>:143/PLAIN
</span></span></code></pre></div><p>这些常用的命令解决这道题目应该是足够的。</p>
<p>现在工具和知识都已经准备完毕了，进入靶机来一探究竟</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-31.png" alt="img"></p>
<p>weak_auth页面</p>
<p>非常简单的一个登录认证页面，先进行简单的密码猜测</p>
<p>使用root:root进行登录尝试</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-32.png" alt="img"></p>
<p>弹出提示，please login as admin，说明登录的用户名必须要素admin</p>
<p>下面试试admin:admin进行登录尝试</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-33.png" alt="img"></p>
<p>弹出提示，password error，登录错误的提示，然后点击确定查看一下页面的源代码</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-34.png" alt="img">靶机error页面源代码</p>
<p>发现登录错误关键字error，然后查看页面的响应标头确定传输方式</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-35.png" alt="img"></p>
<p>发现页面数据的传输方式是post方式进行传输的。而且页面存在着跳转，hydra的易用性相对较差，这里需要选用burpsuite进行暴力破解</p>
<p>进入到kali系统中，抓取页面信息进行暴力破解攻击</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-36.png" alt="img">bp抓到的数据包</p>
<p>右键将页面发送到intruder页面中</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-37.png" alt="img"></p>
<p>然后点击intruder页面进行暴力破解的设置</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-38-1024x287.png" alt="img"></p>
<p>调整好参数，然后进入到option的配置页面中进行攻击，（最好找一个弱口令字典）</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-41-1024x490.png" alt="img"></p>
<p>简单设置进行暴力破解的字典，然后设置匹配项。由于我们知道页面登录失败的时候会出现password error的选项，因此进入到option页面中设置匹配。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-42.png" alt="img"></p>
<p>点击clear将所有的匹配规则清除</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-43.png" alt="img"></p>
<p>点击add将error的匹配规则添加进去</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-44.png" alt="img"></p>
<p>然后点击start attack开始攻击</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-45.png" alt="img"></p>
<p>稍微等一下，等攻击结果出现</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-46.png" alt="img"></p>
<p>发现123456这个密码没有匹配到error的规则，然后进入到页面中将123456密码输入进去</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-47.png" alt="img"></p>
<p>进入到跳转页面中，成功找到flag数据。</p>
<p>本题也成功解决，题目的思路也是比较简单的。考察的要点就是暴力破解，通过暴力破解解决问题。</p>
<p>题目属于简单题。</p>
<h2 id="simple-php">simple php</h2>
<p>这道题的题目是simple_php，应该是一道考察php代码的简单题目</p>
<p>进入到题目页面，来获取到更多信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-48-1024x287.png" alt="img">simple_php题目</p>
<p>页面中的题目描述信息也是在说php代码的问题，这道题目应该是在考察php代码的简单使用情况</p>
<p>进入到靶机环境来一探究竟</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-49.png" alt="img"></p>
<p>直接展示出源代码，这应该是一道简单的php代码审计题目，本菜鸡的php基础还可以，这道题目主要是考察php代码的特性和缺陷。</p>
<p>这道题目中有三个特性进行了考察：</p>
<ol>
<li>php中的字符串在进行比较的时候都会被当作0来处理</li>
<li>php中的变量如果被赋值了数字加字符，在进行数值判断的时候，字符会被忽略</li>
<li>php中的<code>is_numeric()</code>函数会判断变量是否是纯数字，如果是纯数字就返回true，如果不是纯数字就返回false</li>
</ol>
<p>有时候php代码审计的题目遇到不认识的代码或者函数，可以进行搜索引擎的使用和查找</p>
<p>代码可控的地方是get传输的数据，a和b参数作为数据接收并进行传递的</p>
<p>由于这道题目比较简单，直接在url上面进行构造</p>
<p>构造payload：<code>url?a=Flag&amp;b=1235s</code></p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-50.png" alt="img"></p>
<p>成功获取到flag数据，题目解决。</p>
<p>题目主要考察get传输方式和php代码的特性，思路也比较简单，分析代码的逻辑进行简单的注入就可以解决问题。属于简单题目。</p>
<h2 id="get-post">get post</h2>
<p>看题目，这道题目应该是考察http的传输数据的方式，get传输方式和post传输数据的方式</p>
<p>点开题目，希望可以从题目页面中获取到更多的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-51-1024x307.png" alt="img">get_post题目</p>
<p>题目描述也是说用get和post方式，看来这道题目的关键点就是get和post传输数据的方式。</p>
<p>由于这里涉及的post方式的传输，这里需要使用一个Hackbar的插件攻击来辅助进行注入进攻来获取到flag数据。这里给出hackbar的GitHub地址：https://github.com/Hack-Free/HackBar，如果没有这个工具可以进行下载使用。</p>
<p>现在工具齐全了，可以进行尝试去拿flag了，打开靶机进入到环境中</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-52.png" alt="img"></p>
<p>页面中展示的信息非常明确，而且比较明了。为了方便操作，进入到kali系统中的已装好hackbar的firefox浏览器中进行操作。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-53-1024x222.png" alt="img"></p>
<p>首先使用get方法进行提交，点击execut进行传输</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-54.png" alt="img"></p>
<p>页面内容发生了变化，这次使用post数据进行传输</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-55-1024x333.png" alt="img"></p>
<p>点击execute进行传输数据</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-56.png" alt="img"></p>
<p>数据传输过去后，页面发生变化，然后flag数据就展示在眼前，题目解决。</p>
<p>这道题目的思路非常清晰，就是引导性的题目，没有什么难度，应该是道签到题目。</p>
<p>题目考察的知识点是http传输数据的方式，属于签到题。</p>
<h2 id="xff-referer">xff referer</h2>
<p>刚开始看到这个题目标题的时候还是有点懵逼的，因为本菜鸡并不知道什么是xff和referer</p>
<p>于是使用搜索引擎解决一下问题</p>
<p><strong><code>X-Forwarded-For</code></strong> (XFF) 在客户端访问服务器的过程中如果需要经过HTTP代理或者负载均衡服务器，可以被用来获取最初发起请求的客户端的IP地址，这个消息首部成为事实上的标准。在消息流从客户端流向服务器的过程中被拦截的情况下，服务器端的访问日志只能记录代理服务器或者负载均衡服务器的IP地址。如果想要获得最初发起请求的客户端的IP地址的话，那么 X-Forwarded-For 就派上了用场。[3]</p>
<p><code>**Referer**</code> 请求头包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。服务端一般使用 <code>Referer</code> 请求头识别访问来源，可能会以此进行统计分析、日志记录以及缓存优化等。[4]</p>
<p>发现Xff和Referer就是一个可以进行IP代理的东西和一个可以进行来源记录的东西</p>
<p>再去查一下Xff和Referer的语法格式，确保对于Xff和Referer的知识掌握的比较完善。</p>
<p>于是再去MDN上查看一波：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-http" data-lang="http"><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">X-Forwarded-For: &lt;client&gt;, &lt;proxy1&gt;, &lt;proxy2&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"># 示例
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">X-Forwarded-For: 2001:db8:85a3:8d3:1319:8a2e:370:7348
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">X-Forwarded-For: 203.0.113.195
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">X-Forwarded-For: 203.0.113.195, 70.41.3.18, 150.172.238.178
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Referer: &lt;url&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"># 示例
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">Referer: https://developer.mozilla.org/en-US/docs/Web/JavaScript
</span></span></span></code></pre></div><p>点开题目查看，题目中又有些什么信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-57-1024x287.png" alt="img">xff_referer题目</p>
<p>根据题目描述，xff和referer是可以伪造的，可以知道这道题目应该是伪造xff和referer的题目，由于xff和referer都是http头部的信息，所以需要使用burp suite进行抓包来伪造xff和referer信息，需要先启动一下kali操作系统。</p>
<p>目前，知识基础和工具基础都准备好了，进入到靶机环境</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-58.png" alt="img">靶机环境</p>
<p>要求ip必须为123.123.123.123，用burp suite抓到数据包，修改xff数据来进行伪造</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-59.png" alt="img"></p>
<p>然后进行放行来查看页面情况</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-60.png" alt="img"></p>
<p>页面返回了一个必须来自https://www.google.com</p>
<p>再次抓包，设置一下referer和xff的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-61.png" alt="img"></p>
<p>将数据包放行，然后查看页面信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-62.png" alt="img"></p>
<p>最后，页面成功出现flag信息，题目成功解决，题目比较简单，具有引导性</p>
<p>题目属于简单的题目，应该算是签到题，题目主要考察对于xff和referer的http头部信息的了解和掌握，思路比较流程，具有引导性。</p>
<h2 id="webshell">webshell</h2>
<p>看到这个·题目，首先第一反应是上传php一句话木马拿webshell。可能有人不解，什么是webshell？什么是一句话木马？这里搬出百度百科的解释，对webshell简单说明：</p>
<p>webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种代码执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服务器WEB目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。[5]</p>
<p>webshell简单来说就是命令执行的环境，而一句话木马就是在创建一个可以连接到网站的命令执行环境的一个后门程序，这个后门程序通常都是比较简单，比较小的文件。可以通过网站的文件上传漏洞进行文件上传，创建后门木马。</p>
<p>进入到题目页面，看看可以获取到什么额外的信息：</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-63-1024x274.png" alt="img">webshell题目</p>
<p>根据题目描述，这道题目应是考察一句话木马的题目，而且是php一句话木马的题目。</p>
<p>根据目前的推出和知识分析，进入环境来看看怎么拿flag</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-64.png" alt="img">靶机环境</p>
<p>靶机环境中的页面直接把页面中写入的php一句话木马展示出来了，是通过post方式进行参数传递的。</p>
<p>这道题目可以使用hackbar插件进行post数据的传输，首先进行hello world输出来测试webshell的稳定性，根据页面回显情况来进行下一步操作。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-66-1024x352.png" alt="img"></p>
<p>查看一下，页面的回显情况</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-71.png" alt="img"></p>
<p>页面将hello world成功输出到页面上面，说明页面会直接将代码执行结果回显到页面上面，回显效果良好。</p>
<p>接下来，讲一个的php的小技巧：</p>
<blockquote>
<p>php代码中的反引号```可以直接执行终端shell命令.并返回输出</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-php" data-lang="php"><span style="display:flex;"><span><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">echo</span> <span style="color:#e6db74">`ls`</span>; <span style="color:#75715e">#会将ls命令的输出结果输出到php页面上面
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>下面我们就可以根据这个小技巧来构造payload：<code>shell=echo </code>ls<code>;</code></p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-67-1024x340.png" alt="img"></p>
<p>查看页面返回的结果</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-68.png" alt="img"></p>
<p>发现网站的站点目录下有两个文件，一个是index.php文件，一个是flag.txt文件</p>
<p>显然flag文件肯定就是目标文件，需要查看到flag.txt文件中究竟写了些什么样的内容，flag.txt文件很可能藏着flag文件</p>
<p>构造payload：<code>shell=echo </code>cat flag.txt<code>;</code></p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-69-1024x363.png" alt="img"></p>
<p>查看页面显示的结果</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-70.png" alt="img"></p>
<p>发现flag.txt文件中写的就是flag数据，题目解决</p>
<p>题目主要考察php一句话木马，php特性和linux命令的简单使用，整体思路还是比较流畅的，题目难度比较简单，顺着思路就可以解决了。当然此题有多种解法。</p>
<h2 id="command-execution">command execution</h2>
<p>看到题目，可能是考察命令执行漏洞的题目，从题目也获取不到太多信息</p>
<p>直接点开题目页面，来看看有没有更多的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-72-1024x290.png" alt="img">command_execution题目</p>
<p>题目描述说是ping功能，题目可能于ping功能有些出入，进入靶场环境看看情况</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-73.png" alt="img"></p>
<p>靶机环境</p>
<p>页面非常简单，好像就是一个ping功能的页面，首先试试使用127.0.0.1地址进行测试</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-74.png" alt="img"></p>
<p>发现这是一个命令执行环境，可控的地方就是输入框</p>
<p>来分析一下输入框的输入模式：</p>
<blockquote>
<p>输入框可以输入ip地址和url地址</p>
<p>输入的内容前方会被增加<code>ping -c 3 </code>的代码</p>
<p>输入内容的后面不会增加任何额外代码</p>
<p>页面输出内容会把终端输出内容返回</p>
</blockquote>
<p>因此，这里可以使用一点shell的语法技巧来构造payload</p>
<p><code>&amp;&amp;</code>在shell语法中是前面的命令执行成功后继续执行后面的代码</p>
<pre tabindex="0"><code>ping -c 3 127.0.0.1 &amp;&amp; ls # 会先执行ping命令，ping命令执行成功会再执行ls命令
</code></pre><p>于是构造payload：<code>127.0.0.1 &amp;&amp; ls</code> ，并输入到输入框中来执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-75.png" alt="img"></p>
<p>发现网站页面下没有藏有flag文件，下一个可能的目录是home目录或是root目录</p>
<p>访问root目录需要权限，于是先查看一下ping功能的用户权限</p>
<p>构造payload：<code>127.0.0.1 &amp;&amp; id</code> ，并输入到输入框中来执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-76.png" alt="img"></p>
<p>发现ping的权限仅仅知识apache的权限，使用的服务器很可能是Ubuntu服务</p>
<p>构造payload：<code>127.0.0.1 &amp;&amp; uname -a</code> ，并输入到输入框中执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-77.png" alt="img"></p>
<p>发现服务器确实是Ubuntu服务器</p>
<p>根据目前收集到的信息，可能只能访问到home目录下，那就先尝试查看到home目录，如果home目录下没有再尝试提权进入到root目录下</p>
<p>构造查看home目录的payload：<code>127.0.0.1 &amp;&amp; ls /home </code>，输入到输入框中执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-78.png" alt="img"></p>
<p>发现home目录下存在有flag文件，让本菜鸡来瞧瞧这个flag.txt里面写的啥</p>
<p>构造payload：<code>127.0.0.1 &amp;&amp; cat /home/flag.txt </code>，输入到输入框中执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-79.png" alt="img"></p>
<p>发现flag.txt里面写的就是flag数据，题目解决</p>
<p>题目主要考察linux命令行的使用以及对于命令执行漏洞的觉察，题目的解题思路还是比较流畅的，题目应该也属于简单题。难度并不是很高。</p>
<h2 id="simple-js">simple js</h2>
<p>看到题目，应该是一个简单JavaScript代码审计的题目</p>
<p>进入到题目页面中，希望可以获取到更多相关的数据</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-80-1024x304.png" alt="img">simple_js题目</p>
<p>看到题目的难度系数，可知这道题目应该不简单，网页一直输入不对密码，这应该是一个提示</p>
<p>下面就直接进入到靶机环境来看看情况</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-81.png" alt="img"></p>
<p>页面直接就是一个提示框，先随便输入点内容</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-82.png" alt="img"></p>
<p>就报出了另一个提示框，然后页面内容是空白的</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-83.png" alt="img"></p>
<p>这种情况下，只能尝试从F12检查源代码中找到一些有用的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-84.png" alt="img"></p>
<p>在源代码检查的过程中找到了js的代码，这道题目应该是对js源代码的审计</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">dechiffre</span>(<span style="color:#a6e22e">pass_enc</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass_enc</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">l</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">o</span>, <span style="color:#a6e22e">p</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>.<span style="color:#a6e22e">length</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> (<span style="color:#a6e22e">l</span>) <span style="color:#f92672">+</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>.<span style="color:#a6e22e">length</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>(<span style="color:#a6e22e">tab2</span>[<span style="color:#ae81ff">17</span>]);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pass</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>String[<span style="color:#e6db74">&#34;fromCharCode&#34;</span>](<span style="color:#a6e22e">dechiffre</span>(<span style="color:#e6db74">&#34;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&#34;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">h</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">prompt</span>(<span style="color:#e6db74">&#39;Enter password&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">dechiffre</span>(<span style="color:#a6e22e">h</span>));
</span></span></code></pre></div><p>然后对这段js代码进行简单分析：</p>
<blockquote>
<ol>
<li>
<p>从js代码整体来看，代码先定义了一个dechiffre的函数，然后定义了一个字符串数组，然后使用了两个功能性函数进行弹窗。</p>
</li>
<li>
<p>整段js代码的核心应该是应该是定义的dechiffre的函数，对于dechiffre函数的分析应该就是解决这道题目的关键性问题</p>
</li>
</ol>
</blockquote>
<p>下面对JS源代码中的dechiffre函数进行分析：</p>
<p>首先将dechiffre函数内部进行划分</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">dechiffre</span>(<span style="color:#a6e22e">pass_enc</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 变量定义区
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass_enc</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">l</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">o</span>, <span style="color:#a6e22e">p</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 变量处理区
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>.<span style="color:#a6e22e">length</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> (<span style="color:#a6e22e">l</span>) <span style="color:#f92672">+</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>.<span style="color:#a6e22e">length</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 逻辑处理区
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 最终输出区
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>(<span style="color:#a6e22e">tab2</span>[<span style="color:#ae81ff">17</span>]);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pass</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>js函数被划分成四个区域：</p>
<ol>
<li>变量定义区</li>
<li>变量处理区</li>
<li>逻辑处理区</li>
<li>最终输出区</li>
</ol>
<p>下面对这四个分区进行逐一分析</p>
<p>变量定义区：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass_enc</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">l</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">o</span>, <span style="color:#a6e22e">p</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
</span></span></code></pre></div><blockquote>
<ol>
<li>
<p>定义了一个pass变量并赋值&quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;</p>
</li>
<li>
<p>定义了一个tab变量并赋值pass_enc参数进行分隔成数组</p>
</li>
<li>
<p>定义了一个tab2变量并赋值pass变量进行分隔成数组[70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65]</p>
</li>
<li>
<p>定义了变量i，j，k，l并赋值为0，定义了变量m，n，o，p并赋值为“”</p>
</li>
</ol>
</blockquote>
<p>变量处理区</p>
<pre tabindex="0"><code>    i = 0;
    j = tab.length;
    k = j + (l) + (n = 0);
    n = tab2.length;
</code></pre><blockquote>
<ol>
<li>
<p>将变量i再次赋值为0</p>
</li>
<li>
<p>将变量j赋值为tab的长度</p>
</li>
<li>
<p>将变量k赋值为j的值加上l和n=0的数值</p>
</li>
<li>
<p>将变量n赋值为tab2的长度，即n=18</p>
</li>
</ol>
</blockquote>
<p>逻辑处理区</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
</span></span><span style="display:flex;"><span>    }
</span></span></code></pre></div><blockquote>
<ol>
<li>
<p>对于第一个循环，初始值i被赋值为0，限制条件是i&lt;18，循环条件是i++</p>
<p>循环内部是对于o变量的处理，第一个赋值语句是无用的赋值语句，由于下面的语句会对o进行   重新赋值处理。下面<code>p += String.fromCharCode((o = tab2[i]));</code>语句涉及了string对象和fromCharCode（）函数。经过搜索和查询，发现fromcharcode函数是将unicode值转换为字符的函数，属于String对象的api。这条语句的作用是对p变量进行累计赋值处理。如果i==5循环就结束。</p>
</li>
<li>
<p>对于第二个循环，初始值i被赋值为0，限制条件是i&lt;18，循环条件是i++</p>
<p>循环内部依旧是对于o变量的处理，还是和第一个循环非常类似的处理，都是最终对于p变量进行累计赋值。</p>
</li>
<li>
<p>两个循环都是对于p变量进行累加赋值。</p>
</li>
</ol>
</blockquote>
<p>最终输出区</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>    <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>(<span style="color:#a6e22e">tab2</span>[<span style="color:#ae81ff">17</span>]);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pass</span>;
</span></span></code></pre></div><blockquote>
<ol>
<li>
<p>仍然是对p变量进行赋值处理</p>
</li>
<li>
<p>将p的值赋值给pass</p>
</li>
<li>
<p>将pass变量返回</p>
</li>
</ol>
</blockquote>
<p>总体对这个函数进行分析，这个函数根本没有涉及任何传入参数的处理情况，简单来说就是没有tab数组任何事情。无论传入什么变量都只返回tab2数组的数据。</p>
<p>再看看代码最后的调用情况</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>String[<span style="color:#e6db74">&#34;fromCharCode&#34;</span>](<span style="color:#a6e22e">dechiffre</span>(<span style="color:#e6db74">&#34;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&#34;</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">h</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">prompt</span>(<span style="color:#e6db74">&#39;Enter password&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">dechiffre</span>(<span style="color:#a6e22e">h</span>));
</span></span></code></pre></div><blockquote>
<ol>
<li>
<p>这个函数被调用两次。</p>
</li>
<li>
<p>第一次是调用了dechiffre并传入参数</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>“\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30”
</span></span></code></pre></div><p>作为函数的实参进行传入数据</p>
<ol start="3">
<li>第二次是调用了用户输入的数据（无论传入什么数据结果都一样）</li>
</ol>
</blockquote>
<p>所以这个JavaScript的代码中肯定藏有flag，flag可能藏在第一次传入的参数中</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span>\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30
</span></span></code></pre></div><p>编写js文件对第一次传入的参数进行处理</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">html</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#f92672">title</span>&gt;test&lt;/<span style="color:#f92672">title</span>&gt;
</span></span><span style="display:flex;"><span>	&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span>&gt;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">input</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&#34;</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">o</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab</span><span style="color:#f92672">=</span><span style="color:#a6e22e">input</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
</span></span><span style="display:flex;"><span>		document.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">tab</span>);
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">tab</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
</span></span><span style="display:flex;"><span>			<span style="color:#a6e22e">result</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span><span style="color:#f92672">=</span><span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span>]))
</span></span><span style="display:flex;"><span>		}
</span></span><span style="display:flex;"><span>    	document.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">result</span>);
</span></span><span style="display:flex;"><span>	&lt;/<span style="color:#f92672">script</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">head</span>&gt;
</span></span><span style="display:flex;"><span>&lt;<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">body</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">html</span>&gt;
</span></span></code></pre></div><p>在浏览器上运行一下这段代码</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-85.png" alt="img"></p>
<p>undefined后面那段字符就是flag数据：786OsErtk12</p>
<p>这道题目也解决了，分析过程比较复杂，需要一定的JavaScript基础。难度其实也应该是一道简单题目，但是思路比较绕，如果比较灵敏可以直接找到关键数据，对关键数据进行unicode解码在进行ascii解码就能得出flag数据。</p>
<p>这里提供几个网址，便于js基础不是非常牢固的人补习一下：</p>
<p><a href="https://javascript.ruanyifeng.com/">https://javascript.ruanyifeng.com/</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">https://www.liaoxuefeng.com/wiki/1022910821149312</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/learn/JavaScript">https://developer.mozilla.org/zh-CN/docs/learn/JavaScript</a></p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://wiwiki.kfd.me/wiki/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3">WIKI百科-蛮力攻击</a></li>
<li><a href="https://www.jianshu.com/p/4da49f179cee">爆破工具 Hydra 简单使用</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Forwarded-For">X-Forwarded-For MDN</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referer">Referer MDN</a></li>
<li><a href="https://baike.baidu.com/item/WEBSHELL">webshell 百度百科</a></li>
</ol>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
    </channel>
</rss>
