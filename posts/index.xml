<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on ZCodeTea Blog</title>
        <link>https://zcodetea.github.io/posts/</link>
        <description>Recent content in Posts on ZCodeTea Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 26 Jun 2021 10:34:27 +0800</lastBuildDate>
        <atom:link href="https://zcodetea.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>BUUCTF CRYPTO [17~32] writeup</title>
            <link>https://zcodetea.github.io/posts/buuctf-crypto-17-32_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 10:34:27 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/buuctf-crypto-17-32_writeup/</guid>
            <description>还是BUUCTF的题目，熟悉的感觉，再来一次！
BUUCTF首页
本次的题目大致如下：
CTF题目
题目是16道密码学题目：
 传统知识+古典密码 信息化时代的步伐 RSA1 凯撒？转换？呵呵！ old-fashion 萌萌哒的八戒 权限获得第一步 世上无难事 RSA3 RSA2 异性相吸 RSA 还原大师 Unencode robomunication RSAROLL  题目求解： 题目都还比较简单，正常来做就好。
0x0 传统知识+古典密码 下载附件，得到题目

题目信息
应该是考察古典密码的题目，是考察六十甲子顺序纳音表的题目
这里列出六十顺序纳音表：

六十甲子顺序表
根据六十甲子顺序表编写python脚本：
C_sky = &amp;#34;甲乙丙丁戊己庚辛壬癸&amp;#34; C_earth = &amp;#34;子丑寅卯辰巳午未申酉戌亥&amp;#34; C_dict={} for i in range(60): C_dict[C_sky[i%len(C_sky)]+C_earth[i%len(C_earth)]] = str(i+1) cipher = &amp;#34;辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳&amp;#34; cipher_list = cipher.split(&amp;#34;，&amp;#34;) plainer = &amp;#34;&amp;#34; for i in cipher_list: plainer += chr(int(C_dict[i])+60) def decrype(cipher,key): cipher_len = len(cipher) if cipher_len%key == 0: key = cipher_len // key else: key = cipher_len // key + 1 result = {x:&amp;#39;&amp;#39; for x in range(key)} for i in range(cipher_len): a = i%key; result.</description>
            <content type="html"><![CDATA[<p>还是BUUCTF的题目，熟悉的感觉，再来一次！</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-136.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-136.png" alt="img"></a>BUUCTF首页</p>
<p>本次的题目大致如下：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-137.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-137.png" alt="img"></a>CTF题目</p>
<p>题目是16道密码学题目：</p>
<ol>
<li>传统知识+古典密码</li>
<li>信息化时代的步伐</li>
<li>RSA1</li>
<li>凯撒？转换？呵呵！</li>
<li>old-fashion</li>
<li>萌萌哒的八戒</li>
<li>权限获得第一步</li>
<li>世上无难事</li>
<li>RSA3</li>
<li>RSA2</li>
<li>异性相吸</li>
<li>RSA</li>
<li>还原大师</li>
<li>Unencode</li>
<li>robomunication</li>
<li>RSAROLL</li>
</ol>
<h2 id="题目求解">题目求解：</h2>
<p>题目都还比较简单，正常来做就好。</p>
<h3 id="0x0-传统知识古典密码">0x0 传统知识+古典密码</h3>
<p>下载附件，得到题目</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-138.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-138.png" alt="img"></a></p>
<p>题目信息</p>
<p>应该是考察古典密码的题目，是考察六十甲子顺序纳音表的题目</p>
<p>这里列出六十顺序纳音表：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-139.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-139.png" alt="img"></a></p>
<p>六十甲子顺序表</p>
<p>根据六十甲子顺序表编写python脚本：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">C_sky <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;甲乙丙丁戊己庚辛壬癸&#34;</span>
C_earth <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;子丑寅卯辰巳午未申酉戌亥&#34;</span>
C_dict<span style="color:#f92672">=</span>{}
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">60</span>):
    C_dict[C_sky[i<span style="color:#f92672">%</span>len(C_sky)]<span style="color:#f92672">+</span>C_earth[i<span style="color:#f92672">%</span>len(C_earth)]] <span style="color:#f92672">=</span> str(i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;辛卯，癸巳，丙戌，辛未，庚辰，癸酉，己卯，癸巳&#34;</span>
cipher_list <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;，&#34;</span>)
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_list:
    plainer <span style="color:#f92672">+=</span> chr(int(C_dict[i])<span style="color:#f92672">+</span><span style="color:#ae81ff">60</span>)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrype</span>(cipher,key):
    cipher_len <span style="color:#f92672">=</span> len(cipher)
    <span style="color:#66d9ef">if</span> cipher_len<span style="color:#f92672">%</span>key <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">//</span> key
    <span style="color:#66d9ef">else</span>:
        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">//</span> key <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
    result <span style="color:#f92672">=</span> {x:<span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(key)}
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(cipher_len):
        a <span style="color:#f92672">=</span> i<span style="color:#f92672">%</span>key;
        result<span style="color:#f92672">.</span>update({a:result[a]<span style="color:#f92672">+</span>cipher[i]})
    plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(key):
        plainer <span style="color:#f92672">=</span> plainer <span style="color:#f92672">+</span> result[i]
    <span style="color:#66d9ef">return</span> plainer
plainer_list<span style="color:#f92672">=</span>[]
<span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">20</span>):
    plainer_list<span style="color:#f92672">.</span>append(decrype(plainer,n))

plainer_set <span style="color:#f92672">=</span> set(plainer_list)

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">Caesar</span>(cipher):
    dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
        plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
        <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
            <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
                plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>j)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]

            <span style="color:#66d9ef">else</span>:
                plainer <span style="color:#f92672">+=</span> i
        print(plainer<span style="color:#f92672">.</span>upper())

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> plainer_set:
    Caesar(i<span style="color:#f92672">.</span>lower())
    print(<span style="color:#e6db74">&#34;&#34;</span>)
</code></pre></div><blockquote>
<p>说明：</p>
<ol>
<li>
<p>脚本使用了三种加密算法，分别是传统文化加密，栅栏密码，凯撒密码</p>
</li>
<li>
<p>最终的输出结果是凯撒密码爆破的结果，需要进行筛选</p>
</li>
</ol>
</blockquote>
<p>通过简单的筛选可以得到flag为：flag{SHUANGYU}</p>
<h3 id="0x1-信息化时代的步伐">0x1 信息化时代的步伐</h3>
<p>审题目</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image.png" alt="img"></a></p>
<p>应该是和中文相关的密码</p>
<p>看附件：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-1.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-1.png" alt="img"></a></p>
<p>附件是一串数字，应该需要数字和中文进行联系</p>
<p>搜索一下：中文电码</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-2.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-2.png" alt="img"></a></p>
<p>得到了不错的搜索结果</p>
<p>这里涉及了一个中文电码的知识，这是一个比较偏的知识，这里可以积累一下：</p>
<p>中文电码，又称：中文商用电码（Chinese commercial code, CCC）、中文电报码（Chinese telegraph code, CTC）或中文电报明码（Chinese ordinary telegraph code, COTC），原本是用于电报之中传送中文信息的方法。它是第一个将汉字化作电子信号的编码表。[1]</p>
<p>简单来说，就是针对中文设计的一种数字编码方式。</p>
<p>这里直接使用<a href="http://code.mcdvisa.com/">在线脚本</a>进行解码：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-3.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-3.png" alt="img"></a></p>
<p>解码得出结果，即flag是flag{计算机要从娃娃抓起}</p>
<h3 id="0x2-rsa1">0x2 RSA1</h3>
<p>题目考察RSA加密算法</p>
<p>下载附件，得到数据：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">p <span style="color:#f92672">=</span> <span style="color:#ae81ff">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span> 
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span> 
dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span> 
dq <span style="color:#f92672">=</span> <span style="color:#ae81ff">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span> 
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span>
</code></pre></div><p>有p和q，以及dp和dq，但是没有e，n等参数</p>
<p>这道题目是一道典型的dp，dq泄露的RSA题目</p>
<p>由于涉及dp，dq参数，需要推导一下公式：</p>
<p>首先，最基本的RSA求值公式：</p>
<p>$m \equiv c^d\ mod\ n$ 和 $c \equiv m^e\ mod\ n$</p>
<p>然后，这里有不同于常规RSA的新参数dp和dq：</p>
<p>$ d_p \equiv d\ mod\ (p-1) $和 $ d_q \equiv d\ mod\ (q-1) $</p>
<p>下面就需要根据已知的条件进行推导：</p>
<p>$$ m \equiv c^d \ mod\ n \Rightarrow m = c^d + k \cdot n \Rightarrow m = c^d + k \cdot p \cdot q $$</p>
<p>由上面的推导可以得出：</p>
<p>$$ m_p \equiv c^d\  mod \ p  \ m_q \equiv c^d\ mod\ q $$</p>
<p>进一步推导可以得出：</p>
<p>$$ m_p + k \cdot p = c^d$$</p>
<p>将上式带入到$ m_q \equiv c^d \  mod \  q $ 可得：</p>
<p>$$ m_q \equiv m_q + kp\ mod\  q $$</p>
<p>然后简单整理可得：</p>
<p>$$ k \equiv p^{-1} \cdot (m_q - m_p)\  mod\ q $$</p>
<p>故可得：</p>
<p>$$ m \equiv (p^{-1} \cdot (m_q-m_p)\ mod\ q ) \cdot p+ m_p \ mod \  (p \cdot q) $$</p>
<p>同理可得：</p>
<p>$$ m \equiv (p^{-1} \cdot (m_q-m_p)\ mod\ q ) \cdot q+ m_q \ mod \  (p \cdot q) $$</p>
<p>$$ m \equiv (q^{-1} \cdot (m_p-m_q)\ mod\ p ) \cdot p+ m_p \ mod \  (p \cdot q) $$</p>
<p>$$ m \equiv (q^{-1} \cdot (m_p-m_q)\ mod\ p ) \cdot q+ m_q \ mod \  (p \cdot q) $$</p>
<p>根据推导的公式，这里使用一个python脚本解决问题：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

p <span style="color:#f92672">=</span> <span style="color:#ae81ff">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span>
dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span>
dq <span style="color:#f92672">=</span> <span style="color:#ae81ff">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span>

mp <span style="color:#f92672">=</span> pow(c,dp,p)
mq <span style="color:#f92672">=</span> pow(c,dq,q)
Ip <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(p,q)
Iq <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(q,p)

m1 <span style="color:#f92672">=</span> ((((mq<span style="color:#f92672">-</span>mp)<span style="color:#f92672">*</span>Ip)<span style="color:#f92672">%</span>q)<span style="color:#f92672">*</span>p<span style="color:#f92672">+</span>mp)<span style="color:#f92672">%</span>(p<span style="color:#f92672">*</span>q)
m2 <span style="color:#f92672">=</span> ((((mq<span style="color:#f92672">-</span>mp)<span style="color:#f92672">*</span>Ip)<span style="color:#f92672">%</span>q)<span style="color:#f92672">*</span>q<span style="color:#f92672">+</span>mq)<span style="color:#f92672">%</span>(p<span style="color:#f92672">*</span>q)
m3 <span style="color:#f92672">=</span> ((((mp<span style="color:#f92672">-</span>mq)<span style="color:#f92672">*</span>Iq)<span style="color:#f92672">%</span>p)<span style="color:#f92672">*</span>p<span style="color:#f92672">+</span>mp)<span style="color:#f92672">%</span>(p<span style="color:#f92672">*</span>q)
m4 <span style="color:#f92672">=</span> ((((mp<span style="color:#f92672">-</span>mq)<span style="color:#f92672">*</span>Iq)<span style="color:#f92672">%</span>p)<span style="color:#f92672">*</span>q<span style="color:#f92672">+</span>mq)<span style="color:#f92672">%</span>(p<span style="color:#f92672">*</span>q)

flag1 <span style="color:#f92672">=</span> long_to_bytes(m1)
flag2 <span style="color:#f92672">=</span> long_to_bytes(m2)
flag3 <span style="color:#f92672">=</span> long_to_bytes(m3)
flag4 <span style="color:#f92672">=</span> long_to_bytes(m4)

print <span style="color:#e6db74">&#34;flag:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(flag1)
print <span style="color:#e6db74">&#34;flag:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(flag2)
print <span style="color:#e6db74">&#34;flag:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(flag3)
print <span style="color:#e6db74">&#34;flag:</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(flag4)
</code></pre></div><p>脚本运行即得到flag，即noxCTF{W31c0m3_70_Ch1n470wn}</p>
<p>根据题目要求，故flag： flag{W31c0m3_70_Ch1n470wn}</p>
<h3 id="0x3-凯撒转换呵呵">0x3 凯撒？转换？呵呵！</h3>
<p>题目应该是考察变种凯撒加密的</p>
<pre><code>MTHJ{CUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO}
注意：得到的 flag 请包上 flag{} 提交, flag{小写字母}
</code></pre><p>这里使用一个<a href="https://quipqiup.com/">在线工具</a>进行求解</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-4.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-4-1024x468.png" alt="img"></a></p>
<p>通过在线工具就得到flag，即flag{substitutioncipherdecryptionisalwayseasyjustlikeapieceofcake}</p>
<p>“忘了是否要进行大小写转换，题目的思路大致就是这样了”</p>
<h3 id="0x4-old-fashion">0x4 old-fashion</h3>
<p>题目描述没什么好说的，直接下载附件，查看附件</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Os drnuzearyuwn, y jtkjzoztzoes douwlr oj y ilzwex eq lsdexosa kn pwodw tsozj eq ufyoszlbz yrl rlufydlx pozw douwlrzlbz, ydderxosa ze y rlatfyr jnjzli; mjy gfbmw vla xy wbfnsy symmyew (mjy vrwm qrvvrf), hlbew rd symmyew, mebhsymw rd symmyew, vbomgeyw rd mjy lxrzy, lfk wr dremj. Mjy eyqybzye kyqbhjyew mjy myom xa hyedrevbfn lf bfzyewy wgxwmbmgmbrf. Wr mjy dsln bw f1_2jyf-k3_jg1-vb-vl_l
</code></pre></div><p>一段文字，直接丢<a href="https://quipqiup.com/">在线工具</a>里面进行词频分析吧：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-5.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-5-1024x306.png" alt="img"></a></p>
<p>得到词频分析结果：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Xl fogkvryoeksg, e hjdhvxvjvxrl fxksao xh e zavsrb rc alfrbxly dg wsxfs jlxvh rc knexlvaiv eoa oaknefab wxvs fxksaovaiv, effrobxly vr e oayjneo hghvaz; the units may be single letters (the most common), pairs of letters, triplets of letters, mixtures of the above, and so forth. The receiver deciphers the text by performing an inverse substitution. So the flag is n1_2hen-d3_hu1-mi-ma_a
</code></pre></div><p>故得flag：flag{n1_2hen-d3_hu1-mi-ma_a}</p>
<h3 id="0x5-萌萌哒的八戒">0x5 萌萌哒的八戒</h3>
<p>萌萌哒的八戒，应该是猪圈密码</p>
<p>什么是猪圈密码？</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image.png" alt="img"></p>
<p>猪圈密码（英语：pigpen cipher)，亦称共济会密码（masonic cipher）或 共济会员密码（Freemason&rsquo;s cipher），是一种以格子为基础的简单替代式密码。即使使用符号，也不会影响密码分析，亦可用在其它替代式的方法。右边的例子，是把字母填进格子的模样。</p>
<p>早在1700年代，共济会常常使用这种密码保护一些私密纪录或用来通讯，所以又称共济会密码。[2]</p>
<pre><code>萌萌哒的八戒原来曾经是猪村的村长，从远古时期，猪村就有一种神秘的代码。请从附件中找出代码，看看萌萌哒的猪八戒到底想说啥 注意：得到的 flag 请包上 flag{} 提交
</code></pre><p>题目描述正好和猜想对应，下载附件，查看附件</p>
<p>得到一张图片:</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-6.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-6.png" alt="img"></a></p>
<p>下面那一串应该就是猪圈密码，进行解密：</p>
<p>这里使用在线工具进行解密：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-7.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-7.png" alt="img"></a></p>
<p>得到flag，即flag{whenthepigwanttoeat}</p>
<h3 id="0x6-权限获得第一步">0x6 权限获得第一步</h3>
<p>这题应该是使用哈希密码破解的方法进行解密</p>
<p>下载附件，查看附件内容：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">Administrator<span style="color:#960050;background-color:#1e0010">:</span>500<span style="color:#960050;background-color:#1e0010">:</span>806EDC27AA52E314AAD3B435B51404EE<span style="color:#960050;background-color:#1e0010">:</span>F4AD50F57683D4260DFD48AA351A17A8::<span style="color:#960050;background-color:#1e0010">:</span>
</code></pre></div><p>密文明显是windows系统的hash加密，第一段的哈希加密应该是Administrator的用户名，第二段的哈希加密应该是windows系统的密码</p>
<p>直接对第二段哈希值进行哈希破解：</p>
<p>这里使用<a href="https://cmd5.com/">在线工具</a>进行破解：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-8.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-8.png" alt="img"></a></p>
<p>故flag即为flag{3617656}</p>
<h3 id="0x7-世上无难事">0x7 世上无难事</h3>
<p>打开题目：</p>
<pre><code>以下是某国现任总统外发的一段指令，经过一种奇异的加密方式，毫无规律，看来只能分析了。请将这段语句还原成通顺语句，并从中找到key作为答案提交，答案是32位，包含小写字母。 注意：得到的 flag 请包上 flag{} 提交
</code></pre><p>下载附件，查看附件：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">VIZZB IFIUOJBWO NVXAP OBC XZZ UKHVN IFIUOJBWO HB XVIXW XAW VXFI X QIXN VBD KQ IFIUOJBWO WBKAH NBWXO VBD XJBCN NKG QLKEIU DI XUI VIUI DKNV QNCWIANQ XN DXPIMKIZW VKHV QEVBBZ KA XUZKAHNBA FKUHKAKX XAW DI VXFI HBN QNCWIANQ NCAKAH KA MUBG XZZ XEUBQQ XGIUKEX MUBG PKAWIUHXUNIA NVUBCHV 12NV HUXWI XAW DI XUI SCQN QB HZXW NVXN XZZ EBCZW SBKA CQ NBWXO XAW DI DXAN NB NVXAP DXPIMKIZW MBU JIKAH QCEV XA BCNQNXAWKAH VBQN HKFI OBCUQIZFIQ X JKH UBCAW BM XLLZXCQI XAW NVI PIO KQ 640I11012805M211J0XJ24MM02X1IW09
</code></pre></div><p>得到一段文字，直接丢到在线工具得：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">HELLO EVERYBODY THANK YOU ALL RIGHT EVERYBODY GO AHEAD AND HAVE A SEAT HOW IS EVERYBODY DOING TODAY HOW ABOUT TIM SPICER WE ARE HERE WITH STUDENTS AT WAKEFIELD HIGH SCHOOL IN ARLINGTON VIRGINIA AND WE HAVE GOT STUDENTS TUNING IN FROM ALL ACROSS AMERICA FROM KINDERGARTEN THROUGH 12TH GRADE AND WE ARE JUST SO GLAD THAT ALL COULD JOIN US TODAY AND WE WANT TO THANK WAKEFIELD FOR BEING SUCH AN OUTSTANDING HOST GIVE YOURSELVES A BIG ROUND OF APPLAUSE AND THE KEY IS 640E11012805F211B0AB24FF02A1ED09
</code></pre></div><p>得到flag，即flag为flag{640e11012805f211b0ab24ff02a1ed09}</p>
<h3 id="0x8-rsa3">0x8 RSA3</h3>
<p>RSA题目，直接下载附件，查看附件：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">c1<span style="color:#f92672">=</span><span style="color:#ae81ff">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span>
n<span style="color:#f92672">=</span><span style="color:#ae81ff">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span>
e1<span style="color:#f92672">=</span><span style="color:#ae81ff">11187289</span>
c2<span style="color:#f92672">=</span><span style="color:#ae81ff">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span>
e2<span style="color:#f92672">=</span><span style="color:#ae81ff">9647291</span>
</code></pre></div><p>看到c1，c2，e1，e2应该是RSA共模攻击</p>
<p>RSA共模攻击需要使用到扩展欧几里得定理：</p>
<p>扩展欧几里得算法是欧几里得算法（又叫辗转相除法）的扩展。除了计算a、b两个整数的最大公约数，此算法还能找到整数x、y（其中一个很可能是负数）。通常谈到最大公因子时, 我们都会提到一个非常基本的事实: 给予二整数 a 与 b, 必存在有整数 x 与 y 使得$ ax + by = gcd(a,b) $。有两个数a,b，对它们进行辗转相除法，可得它们的最大公约数——这是众所周知的。然后，收集辗转相除法中产生的式子，倒回去，可以得到$ ax+by=gcd(a,b) $的整数解。[3]</p>
<p>根据维基百科，可以找到扩展欧几里得定理的python算法 [4] :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">ext_euclid</span>(a, b):
    old_s,s<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>
    old_t,t<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>
    old_r,r<span style="color:#f92672">=</span>a,b
    <span style="color:#66d9ef">if</span> b <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, a
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">while</span>(r<span style="color:#f92672">!=</span><span style="color:#ae81ff">0</span>):
            q<span style="color:#f92672">=</span>old_r<span style="color:#f92672">//</span>r
            old_r,r<span style="color:#f92672">=</span>r,old_r<span style="color:#f92672">-</span>q<span style="color:#f92672">*</span>r
            old_s,s<span style="color:#f92672">=</span>s,old_s<span style="color:#f92672">-</span>q<span style="color:#f92672">*</span>s
            old_t,t<span style="color:#f92672">=</span>t,old_t<span style="color:#f92672">-</span>q<span style="color:#f92672">*</span>t
    <span style="color:#66d9ef">return</span> old_s, old_t, old_r
</code></pre></div><p>这里根据题目要求，使用一个python脚本解决题目：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> gmpy2 <span style="color:#f92672">import</span> invert
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">gongmo</span>(n, c1, c2, e1, e2):
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">egcd</span>(a, b):
        <span style="color:#66d9ef">if</span> b <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            <span style="color:#66d9ef">return</span> a, <span style="color:#ae81ff">0</span>
        <span style="color:#66d9ef">else</span>:
            x, y <span style="color:#f92672">=</span> egcd(b, a <span style="color:#f92672">%</span> b)
            <span style="color:#66d9ef">return</span> y, x <span style="color:#f92672">-</span> (a <span style="color:#f92672">//</span> b) <span style="color:#f92672">*</span> y
    s <span style="color:#f92672">=</span> egcd(e1, e2)
    s1 <span style="color:#f92672">=</span> s[<span style="color:#ae81ff">0</span>]
    s2 <span style="color:#f92672">=</span> s[<span style="color:#ae81ff">1</span>]

    <span style="color:#66d9ef">if</span> s1 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
        s1 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span> s1
        c1 <span style="color:#f92672">=</span> invert(c1, n)
    <span style="color:#66d9ef">elif</span> s2 <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>:
        s2 <span style="color:#f92672">=</span> <span style="color:#f92672">-</span> s2
        c2 <span style="color:#f92672">=</span> invert(c2, n)
    m <span style="color:#f92672">=</span> pow(c1, s1, n) <span style="color:#f92672">*</span> pow(c2, s2, n) <span style="color:#f92672">%</span> n
    <span style="color:#66d9ef">return</span> m

c1<span style="color:#f92672">=</span><span style="color:#ae81ff">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span>
n<span style="color:#f92672">=</span><span style="color:#ae81ff">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span>
e1<span style="color:#f92672">=</span><span style="color:#ae81ff">11187289</span>
c2<span style="color:#f92672">=</span><span style="color:#ae81ff">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span>
e2<span style="color:#f92672">=</span><span style="color:#ae81ff">9647291</span>

result <span style="color:#f92672">=</span> gongmo(n, c1, c2, e1, e2)

print long_to_bytes(result)
</code></pre></div><p>根据脚本可以直接求出flag：flag{49d91077a1abcb14f1a9d546c80be9ef}</p>
<h3 id="0x9-rsa2">0x9 RSA2</h3>
<p>直接下载附件，打开附件：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span>
dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span>

c <span style="color:#f92672">=</span> <span style="color:#ae81ff">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span>
</code></pre></div><p>题目考察的应该就是典型的dp泄露问题，这里就进行简单的公式推导：
$$ n = p \cdot q $$</p>
<p>$$ \varphi(n) = (p-1) \cdot (q-1)  $$</p>
<p>$$  d_p \equiv d\ mod\ (p-1) $$</p>
<p>$$ d \equiv e^{-1}\ mod\  \varphi(n) $$</p>
<p>根据已知信息进行推导：</p>
<p>$$ d = e^{-1} + k(p-1)(q-1) \Rightarrow dp \equiv e^{-1} mod\ (p-1)\   $$</p>
<p>同理，也可以推导出：</p>
<p>$$ d = e^{-1} + k(p-1)(q-1) \Rightarrow dp \equiv e^{-1} mod\ (q-1)\  $$</p>
<p>易得：</p>
<p>$$ dp \cdot e -1 = k \cdot (q-1) $$</p>
<p>爆破出k即可求得的q值，进一步即可求得结果，这里使用一个python脚本求解：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">import</span> gmpy2

e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span>
dp <span style="color:#f92672">=</span> <span style="color:#ae81ff">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span>

c <span style="color:#f92672">=</span> <span style="color:#ae81ff">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span>

temp <span style="color:#f92672">=</span> dp <span style="color:#f92672">*</span>e
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">1</span>,e):
    <span style="color:#66d9ef">if</span> (temp<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">%</span>i <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        x <span style="color:#f92672">=</span> (temp<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">//</span>i <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
        y <span style="color:#f92672">=</span> n<span style="color:#f92672">%</span>x
        <span style="color:#66d9ef">if</span> y <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
            p<span style="color:#f92672">=</span>x
            <span style="color:#66d9ef">break</span>
q <span style="color:#f92672">=</span> n <span style="color:#f92672">//</span> p

<span style="color:#75715e"># print p</span>
<span style="color:#75715e"># print q</span>

phi <span style="color:#f92672">=</span> (q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)
m <span style="color:#f92672">=</span> pow(c,d,n)
flag <span style="color:#f92672">=</span> long_to_bytes(m)
print flag
</code></pre></div><p>运行脚本即可求出flag：flag{wow_leaking_dp_breaks_rsa?_98924743502}</p>
<h3 id="0xa-异性相吸">0xA 异性相吸</h3>
<p>看题目，应该是考察异或操作的题目</p>
<p>下载附件，查看附件</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-9.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-9.png" alt="img"></a>附件内容</p>
<p>两个文件，应该是使用异或处理最终得到结果，这里使用一个python脚本进行文件的二进制数据读取，然后进行异或操作求解出flag：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># env = python3</span>
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">import</span> struct

<span style="color:#75715e"># 读取key.txt文件</span>
key <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;key.txt&#34;</span>,mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rb&#34;</span>)
k <span style="color:#f92672">=</span> key<span style="color:#f92672">.</span>read()
key<span style="color:#f92672">.</span>close()

<span style="color:#75715e"># 读取密文.txt文件</span>
cipher <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;密文.txt&#34;</span>,mode<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rb&#34;</span>)
c <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>read()
cipher<span style="color:#f92672">.</span>close()

<span style="color:#75715e"># 文件二进制数据进行异或处理</span>
m<span style="color:#f92672">=</span>int<span style="color:#f92672">.</span>from_bytes(c,byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;big&#34;</span>,signed<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#f92672">^</span>int<span style="color:#f92672">.</span>from_bytes(k,byteorder<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;big&#34;</span>,signed<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)

<span style="color:#75715e"># 求解flag</span>
flag <span style="color:#f92672">=</span> long_to_bytes(m)<span style="color:#f92672">.</span>decode()

print(flag)
</code></pre></div><p>运行脚本得到flag：flag{ea1bc0988992276b7f95b54a7435e89e}</p>
<h3 id="0xb-rsa">0xB RSA</h3>
<p>RSA题目，直接下载附件，查看附件</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-10.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-10.png" alt="img"></a>附件内容</p>
<p>常规的RSA题目，使用openssl工具进行公钥文件的读取和私钥文件的解密</p>
<p>首先使用openssl对公钥文件进行解析：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">&gt; openssl rsa -pubin -in pub.key -modulus -text
RSA Public-Key: <span style="color:#f92672">(</span><span style="color:#ae81ff">256</span> bit<span style="color:#f92672">)</span>
Modulus:
    00:c0:33:2c:5c:64:ae:47:18:2f:6c:1c:87:6d:42:
    33:69:10:54:5a:58:f7:ee:fe:fc:0b:ca:af:5a:f3:
    41:cc:dd
Exponent: <span style="color:#ae81ff">65537</span> <span style="color:#f92672">(</span>0x10001<span style="color:#f92672">)</span>
Modulus<span style="color:#f92672">=</span>C0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD
writing RSA key
-----BEGIN PUBLIC KEY-----
MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMAzLFxkrkcYL2wch21CM2kQVFpY9+7+
/AvKr1rzQczdAgMBAAE<span style="color:#f92672">=</span>
-----END PUBLIC KEY-----
</code></pre></div><p>获得到了n和e</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">n <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xC0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
</code></pre></div><p>使用<a href="http://factordb.com/">factordb</a>进行大数分解</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-11.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-11-1024x124.png" alt="img"></a></p>
<p>得到p和q：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">p<span style="color:#f92672">=</span><span style="color:#ae81ff">285960468890451637935629440372639283459</span>
q<span style="color:#f92672">=</span><span style="color:#ae81ff">304008741604601924494328155975272418463</span>
</code></pre></div><p>根据已知的信息，编写python脚本，来获取flag：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># </span>
<span style="color:#f92672">import</span> rsa
<span style="color:#f92672">import</span> libnum

e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
n <span style="color:#f92672">=</span> <span style="color:#ae81ff">86934482296048119190666062003494800588905656017203025617216654058378322103517</span>
p <span style="color:#f92672">=</span> <span style="color:#ae81ff">285960468890451637935629440372639283459</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">304008741604601924494328155975272418463</span>
d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))

key <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>PrivateKey(n,e,d,p,q)

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;flag.enc&#34;</span>,<span style="color:#e6db74">&#34;rb&#34;</span>) <span style="color:#66d9ef">as</span> f:
    f <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>read()
    flag <span style="color:#f92672">=</span> rsa<span style="color:#f92672">.</span>decrypt(f,key)<span style="color:#f92672">.</span>decode()
    print(flag)
</code></pre></div><p>执行脚本，获取到flag：flag{decrypt_256}</p>
<h3 id="0xc-还原大师">0xC 还原大师</h3>
<p>打开题目描述：</p>
<pre><code>我们得到了一串神秘字符串：TASC?O3RJMV?WDJKX?ZM,问号部分是未知大写字母，为了确定这个神秘字符串，我们通过了其他途径获得了这个字串的32位MD5码。但是我们获得它的32位MD5码也是残缺不全，E903???4DAB????08?????51?80??8A?,请猜出神秘字符串的原本模样，并且提交这个字串的32位MD5码作为答案。 注意：得到的 flag 请包上 flag{} 提交
</code></pre><p>题目应该是考察md5加密的暴力破解来还原md5的数值：</p>
<p>根据题目要求编写python脚本进行还原：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> hashlib
cipher_dict<span style="color:#f92672">=</span>[]
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">65</span>,<span style="color:#ae81ff">91</span>):
    cipher_dict<span style="color:#f92672">.</span>append(chr(i))

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">md5_encrypt</span>(m):
    <span style="color:#66d9ef">return</span> hashlib<span style="color:#f92672">.</span>md5(m)<span style="color:#f92672">.</span>hexdigest()

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TASC?O3RJMV?WDJKX?ZM&#34;</span>
cipher_list<span style="color:#f92672">=</span>[]
<span style="color:#66d9ef">while</span> <span style="color:#e6db74">&#34;?&#34;</span> <span style="color:#f92672">in</span> cipher:
    index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    cipher_list<span style="color:#f92672">.</span>append(cipher[:cipher<span style="color:#f92672">.</span>index(<span style="color:#e6db74">&#34;?&#34;</span>)])
    cipher <span style="color:#f92672">=</span> cipher[cipher<span style="color:#f92672">.</span>index(<span style="color:#e6db74">&#34;?&#34;</span>)<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>:]

cipher_list<span style="color:#f92672">.</span>append(cipher)

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_dict:
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> cipher_dict:
        <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> cipher_dict:
            md5_str <span style="color:#f92672">=</span>md5_encrypt(cipher_list[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">+</span>i<span style="color:#f92672">+</span>cipher_list[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">+</span>j<span style="color:#f92672">+</span>cipher_list[<span style="color:#ae81ff">2</span>]<span style="color:#f92672">+</span>k<span style="color:#f92672">+</span>cipher_list[<span style="color:#ae81ff">3</span>])<span style="color:#f92672">.</span>upper()
            <span style="color:#66d9ef">if</span> md5_str[:<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;E903&#34;</span>:
                print <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>md5_str<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
                print <span style="color:#e6db74">&#34;flag{&#34;</span><span style="color:#f92672">+</span>md5_str<span style="color:#f92672">.</span>lower()<span style="color:#f92672">+</span><span style="color:#e6db74">&#34;}&#34;</span>
                <span style="color:#66d9ef">break</span>
</code></pre></div><p>运行脚本就可以获得flag，结果有大写和小写，忘记了具体是要求提交小写flag和大写flag。</p>
<p>运行结果：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">flag<span style="color:#f92672">{</span>E9032994DABAC08080091151380478A2<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>e9032994dabac08080091151380478a2<span style="color:#f92672">}</span>
</code></pre></div><h3 id="0xd-unencode">0xD Unencode</h3>
<p>看题目应该是考察UUencode编码的题目</p>
<p>下载附件，查看附件：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">89FQA9WMD&lt;V1A&lt;V1S83DY.#&lt;W3$Q,2TM]
</code></pre></div><p>丢<a href="http://ctf.ssleye.com/uu.html">在线工具</a>里面进行解码：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-12.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-12-1024x431.png" alt="img"></a></p>
<p>解码即可获得flag：flag{dsdasdsa99877LLLKK}</p>
<h3 id="0xe-robomunication">0xE robomunication</h3>
<p>直接下载附件，查看附件：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-13.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-13.png" alt="img"></a>附件内容</p>
<p>发现是一个音频文件，听出来是如下内容：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">bbbb b bpbb bpbb ppp bpp bbbb bp p bb bbb p bbbb b pbp b pbpp bb p bb bbb pbbb ppp ppp bppb pbbb b b bppb
</code></pre></div><p>发现是一个摩尔斯电码加密，破译得：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">HELLOWHATISTHEKEYITISBOOPBEEP
</code></pre></div><p>对单词进行分割可得：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">HELLO WHAT IS THE KEY IT IS BOOPBEEP
</code></pre></div><p>故flag是flag:flag{BOOPBEEP}</p>
<h3 id="0xf-rsaroll">0xF RSAROLL</h3>
<p>RSA题目，直接下载附件，查看附件</p>
<p>题目.txt</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">RSA roll！roll！roll！
Only number and a-z
（don&#39;t use editor
which MS provide）
</code></pre></div><p>data.txt</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">{920139713,19}

704796792
752211152
274704164
18414022
368270835
483295235
263072905
459788476
483295235
459788476
663551792
475206804
459788476
428313374
475206804
459788476
425392137
704796792
458265677
341524652
483295235
534149509
425392137
428313374
425392137
341524652
458265677
263072905
483295235
828509797
341524652
425392137
475206804
428313374
483295235
475206804
459788476
306220148
</code></pre></div><p>题目考查RSA低加密指数攻击，但是这道题目，可以试试分解一下n然后进行一下拼接</p>
<p>首先可以先去<a href="http://factordb.com/">在线网站</a>进行大数分解：</p>
<p><a href="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-14.png"><img src="/images/BUUCTF-CRYPTO-%5B17-32%5D_writeup/image-14-1024x121.png" alt="img"></a></p>
<p>得到p和q的数值</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">p <span style="color:#f92672">=</span> <span style="color:#ae81ff">18443</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">49891</span>
</code></pre></div><p>然后使用一个python脚本解决问题：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> libnum
<span style="color:#f92672">from</span> Crypto.Util.number <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>

pub_str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
cipher_list<span style="color:#f92672">=</span>[]
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;data.txt&#34;</span>) <span style="color:#66d9ef">as</span> f:
    lines <span style="color:#f92672">=</span> f<span style="color:#f92672">.</span>readlines()
    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> lines:
        line <span style="color:#f92672">=</span> line<span style="color:#f92672">.</span>strip(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
        <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;{&#34;</span> <span style="color:#f92672">in</span> line:
            pub_str <span style="color:#f92672">=</span> line[<span style="color:#ae81ff">1</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
        <span style="color:#66d9ef">elif</span> line <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span>:
            cipher_list<span style="color:#f92672">.</span>append(line)

pub_list<span style="color:#f92672">=</span> pub_str<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;,&#34;</span>)
n <span style="color:#f92672">=</span> int(pub_list[<span style="color:#ae81ff">0</span>])
e <span style="color:#f92672">=</span> int(pub_list[<span style="color:#ae81ff">1</span>])
p <span style="color:#f92672">=</span> <span style="color:#ae81ff">18443</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">49891</span>
phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
d <span style="color:#f92672">=</span> libnum<span style="color:#f92672">.</span>invmod(e,phi)

flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_list:
    m <span style="color:#f92672">=</span> pow(int(i),d,n)
    plainer <span style="color:#f92672">=</span> long_to_bytes(m)
    flag <span style="color:#f92672">+=</span> plainer

print flag
</code></pre></div><p>运行脚本获得flag，即flag{13212je2ue28fy71w8u87y31r78eu1e2}</p>
<h2 id="参考">参考：</h2>
<ol>
<li>[标准中文电码(Chinese Commercial Code)简介、用途及查询](<a href="https://www.chasedream.com/show.aspx?id=4487&amp;cid=30#:~:text=">https://www.chasedream.com/show.aspx?id=4487&amp;cid=30#:~:text=</a>中文电码，又称：中文商用电码（Chinese commercial code%2C CCC）、中文电报码（Chinese telegraph,code%2C CTC）或中文电报明码（Chinese ordinary telegraph code%2C COTC），原本是用于电报之中传送中文信息的方法。)</li>
<li><a href="https://wiwiki.kfd.me/wiki/%E8%B1%AC%E5%9C%88%E5%AF%86%E7%A2%BC">猪圈密码-维基百科</a></li>
<li>[扩展欧几里得算法-百度百科](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a>扩展欧几里得算法/2029414?fromtitle=扩展欧几里德算法&amp;fromid=1053275#:~:text=扩展欧几里得算法 （英语：Extended Euclidean algorithm）是 欧几里得算法 （又叫辗转相除法）的扩展。 已知整数a、b，扩展欧几里得算法可以在求得a、b的 最大公约数,by %3D gcd (a%2Cb) 。 有两个数a%2Cb，对它们进行辗转相除法，可得它们的最大公约数——这是众所周知的。 然后，收集辗转相除法中产生的式子，倒回去，可以得到ax%2Bby%3Dgcd (a%2Cb)的整数解。)</li>
<li>[扩展欧几里得算法-维基百科](<a href="https://baike.baidu.com/item/">https://baike.baidu.com/item/</a>扩展欧几里得算法/2029414?fromtitle=扩展欧几里德算法&amp;fromid=1053275#:~:text=扩展欧几里得算法 （英语：Extended Euclidean algorithm）是 欧几里得算法 （又叫辗转相除法）的扩展。 已知整数a、b，扩展欧几里得算法可以在求得a、b的 最大公约数,by %3D gcd (a%2Cb) 。 有两个数a%2Cb，对它们进行辗转相除法，可得它们的最大公约数——这是众所周知的。 然后，收集辗转相除法中产生的式子，倒回去，可以得到ax%2Bby%3Dgcd (a%2Cb)的整数解。)</li>
</ol>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>尽沾手襟 淋满眼眶</title>
            <link>https://zcodetea.github.io/posts/%E5%B0%BD%E6%B2%BE%E6%89%8B%E8%A5%9F-%E6%B7%8B%E6%BB%A1%E7%9C%BC%E7%9C%B6/</link>
            <pubDate>Sat, 26 Jun 2021 08:24:32 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/%E5%B0%BD%E6%B2%BE%E6%89%8B%E8%A5%9F-%E6%B7%8B%E6%BB%A1%E7%9C%BC%E7%9C%B6/</guid>
            <description>“再论RSA加密算法”  优美的数，自然的码
侦破数的逻辑
看透码的奥秘
 RSA加密算法的算法结构是非常严谨的，具有良好的保密性和完整性。正确使用RSA加密算法，可以确保信息传输的安全性。但是根据现代密码学的研究和发现，RSA加密算法已经被攻破了。中国的王小云通过密码分析学的方法，破解了RSA加密算法。
而RSA加密算法在CTF比赛中的地位仍然是不容小视的，在CTF比赛中的密码学部分是经常出没。CTF的密码学题目往往是在考察参赛者对于密码学算法的理解，往往采用的是密码分析学的知识进行密码学破解。密码学经常使用的三个角色是Alice、Bob和Eva，这三个人往往是Alice和Bob在不安全的信道上进行传输信息，而Eva是在窃听不安全信道上面信息的窃听者。而CTF比赛中，参赛者往往就需要扮演Eva的角色，根据题目给到的信息进行密码破译，来获取到Flag。
说来说去，RSA加密算法，RSA加密算法其实就挺简单的，至少算法逻辑是比较简单的。但是在计算机的实际应用中，往往会有编码和其他各种加密的使用，进行综合性的安全性应用。RSA加密算法虽然是比较简单的算法过程，但是随着现代密码学的不断发展和进步，越来越多针对RSA加密算法的攻击方式，因而CTF也根据密码学研究是文献进行革新，演变出来了各种各样针对RSA攻击方法的破译算法。
CTF中RSA题目类型 CTF中常见的RSA题目类型有如下几类：^1^
公钥加密文
这是CTF中最常见最基础的题型，出题人会给你一个公钥文件（通常是以.pem或.pub结尾的文件）和密文（通常叫做flag.enc之类的），你需要分析公钥，提取出（N，e），通过各种攻击手段恢复私钥，然后去解密密文得到flag。
文本文档
对于第一种题型，耿直点的出题人直接给你一个txt文本文档，里面直接写出了（N，e，c）所对应的十进制数值，然后你直接拿去用就行了。当然也不都是给出（N，e，c）的值，有时还会给出其他一些参数，这时就需要思考，这题具体考察的什么攻击方法
pcap文件
有时出题人会给你一个流量包，你需要用wireshark等工具分析，然后根据流量包的通信信息，分析题目考察的攻击方法，你可以提取出所有你解题需要用到的参数，然后进行解密
本地脚本分析
题目会给你一个脚本和一段密文，一般为python编写，你需要逆向文件流程，分析脚本的加密过程，写出对应的解密脚本进行解密
远程脚本利用
这种题型一般难度较大。题目会给你一个运行在远程服务器上的python脚本和服务器地址，你需要分析脚本存在的漏洞，确定攻击算法，然后编写脚本与服务器交互，得到flag
密码学的题目类型也大致就是这些类型了，这些题目类型也展现出了密码学并不是孤立的存在，密码学与网络安全的各个方面都有着较大的联系，并彼此互联。
数据处理 CTF比赛中的CRYPTO题目类型往往会给到一些需要进行数据处理的文件格式：
基本上来说，RSA的题目都是围绕着c，m，e，d，n，p，q这几个参数展开的，但是题目一般不会直接给这种样子的参数，而是通过别的方式给出，这里就需要我们使用一些工具或者自己手工将这些参数提取出来。^2^
pem文件**：**针对此类文件可以直接使用openssl提取，大概使用过的方式有：
openssl rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc openssl rsa -pubin -text -modulus -in warmup -in public.pem pcap文件：针对此类文件可以使用wireshark follow一下。这种问题一般都是写了一个交互的crypto系统，所以可能产生多轮交互。
PPC模式：这种模式是上述pcap文件的交互版，会给一个端口进行一些crypto的交互，参数会在交互中给出。
第二个需要处理的就是明密文，这个方法多多，不多赘述。
RSA加密算法的攻击类型 RSA加密算法题目的攻击类型是各种各样的，常见的攻击方法：
模数分解 解决RSA题目最简单，最暴力，最好使的方法就是分解模数n。如果能够将n分解成功，成功得到p，q的取值，那么可求n的欧拉函数的值。
模数分解往往可以使用多种方式进行分解，素数分解向来就是数学研究领域比较难以攻克的内容。而RSA算法的保密性也是由于素数分解的困难。但是有些简单的RSA题目可以使用素数分解的方法来解决，常用的工具有：foctordb，sagemath
低加密指数攻击 在RSA中e也称为加密指数。由于e是可以随意选取的，选取小一点的e可以缩短加密时间，但是选取不当的话，就会造成安全问题。
e=3时的小明文攻击 当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。
即： $$ c\equiv; m^e ;mod; n $$
如果e=3，且 $ m^e&amp;lt;{n} $，那么：
$$ c= m^e,;e=3 $$</description>
            <content type="html"><![CDATA[<h2 id="再论rsa加密算法">“再论RSA加密算法”</h2>
<blockquote>
<p>优美的数，自然的码</p>
<p>侦破数的逻辑</p>
<p>看透码的奥秘</p>
</blockquote>
<p>RSA加密算法的算法结构是非常严谨的，具有良好的保密性和完整性。正确使用RSA加密算法，可以确保信息传输的安全性。但是根据现代密码学的研究和发现，RSA加密算法已经被攻破了。中国的王小云通过密码分析学的方法，破解了RSA加密算法。</p>
<p>而RSA加密算法在CTF比赛中的地位仍然是不容小视的，在CTF比赛中的密码学部分是经常出没。CTF的密码学题目往往是在考察参赛者对于密码学算法的理解，往往采用的是密码分析学的知识进行密码学破解。密码学经常使用的三个角色是Alice、Bob和Eva，这三个人往往是Alice和Bob在不安全的信道上进行传输信息，而Eva是在窃听不安全信道上面信息的窃听者。而CTF比赛中，参赛者往往就需要扮演Eva的角色，根据题目给到的信息进行密码破译，来获取到Flag。</p>
<p>说来说去，RSA加密算法，RSA加密算法其实就挺简单的，至少算法逻辑是比较简单的。但是在计算机的实际应用中，往往会有编码和其他各种加密的使用，进行综合性的安全性应用。RSA加密算法虽然是比较简单的算法过程，但是随着现代密码学的不断发展和进步，越来越多针对RSA加密算法的攻击方式，因而CTF也根据密码学研究是文献进行革新，演变出来了各种各样针对RSA攻击方法的破译算法。</p>
<h3 id="ctf中rsa题目类型">CTF中RSA题目类型</h3>
<p>CTF中常见的RSA题目类型有如下几类：^1^</p>
<p><strong>公钥加密文</strong></p>
<p>这是CTF中最常见最基础的题型，出题人会给你一个公钥文件（通常是以.pem或.pub结尾的文件）和密文（通常叫做flag.enc之类的），你需要分析公钥，提取出（N，e），通过各种攻击手段恢复私钥，然后去解密密文得到flag。</p>
<p><strong>文本文档</strong></p>
<p>对于第一种题型，耿直点的出题人直接给你一个txt文本文档，里面直接写出了（N，e，c）所对应的十进制数值，然后你直接拿去用就行了。当然也不都是给出（N，e，c）的值，有时还会给出其他一些参数，这时就需要思考，这题具体考察的什么攻击方法</p>
<p><strong>pcap文件</strong></p>
<p>有时出题人会给你一个流量包，你需要用wireshark等工具分析，然后根据流量包的通信信息，分析题目考察的攻击方法，你可以提取出所有你解题需要用到的参数，然后进行解密</p>
<p><strong>本地脚本分析</strong></p>
<p>题目会给你一个脚本和一段密文，一般为python编写，你需要逆向文件流程，分析脚本的加密过程，写出对应的解密脚本进行解密</p>
<p><strong>远程脚本利用</strong></p>
<p>这种题型一般难度较大。题目会给你一个运行在远程服务器上的python脚本和服务器地址，你需要分析脚本存在的漏洞，确定攻击算法，然后编写脚本与服务器交互，得到flag</p>
<p>密码学的题目类型也大致就是这些类型了，这些题目类型也展现出了密码学并不是孤立的存在，密码学与网络安全的各个方面都有着较大的联系，并彼此互联。</p>
<h3 id="数据处理">数据处理</h3>
<p>CTF比赛中的CRYPTO题目类型往往会给到一些需要进行数据处理的文件格式：</p>
<p>基本上来说，RSA的题目都是围绕着c，m，e，d，n，p，q这几个参数展开的，但是题目一般不会直接给这种样子的参数，而是通过别的方式给出，这里就需要我们使用一些工具或者自己手工将这些参数提取出来。^2^</p>
<p>pem文件**：**针对此类文件可以直接使用openssl提取，大概使用过的方式有：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">openssl   rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc
openssl   rsa -pubin -text -modulus -in warmup -in public.pem
</code></pre></div><p>pcap文件：针对此类文件可以使用wireshark follow一下。这种问题一般都是写了一个交互的crypto系统，所以可能产生多轮交互。</p>
<p>PPC模式：这种模式是上述pcap文件的交互版，会给一个端口进行一些crypto的交互，参数会在交互中给出。</p>
<p>第二个需要处理的就是明密文，这个方法多多，不多赘述。</p>
<h3 id="rsa加密算法的攻击类型">RSA加密算法的攻击类型</h3>
<p>RSA加密算法题目的攻击类型是各种各样的，常见的攻击方法：</p>
<h4 id="模数分解">模数分解</h4>
<p>解决RSA题目最简单，最暴力，最好使的方法就是分解模数n。如果能够将n分解成功，成功得到p，q的取值，那么可求n的欧拉函数的值。</p>
<p>模数分解往往可以使用多种方式进行分解，素数分解向来就是数学研究领域比较难以攻克的内容。而RSA算法的保密性也是由于素数分解的困难。但是有些简单的RSA题目可以使用素数分解的方法来解决，常用的工具有：foctordb，sagemath</p>
<h3 id="低加密指数攻击">低加密指数攻击</h3>
<p>在RSA中e也称为加密指数。由于e是可以随意选取的，选取小一点的e可以缩短加密时间，但是选取不当的话，就会造成安全问题。</p>
<h4 id="e3时的小明文攻击">e=3时的小明文攻击</h4>
<p>当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。</p>
<p>即：
$$
c\equiv; m^e ;mod; n
$$</p>
<p>如果e=3，且 $ m^e&lt;{n} $，那么：</p>
<p>$$
c= m^e,;e=3
$$</p>
<p>$$
m=sqrt[3]{c}
$$</p>
<p>如果明文的三次方比n大，但是不是足够大，那么设k，有：</p>
<p>$$
c= m^e+kn
$$</p>
<p>爆破k，如果$ c-kn $能开三次根式，那么可以直接得到明文。</p>
<h4 id="低加密指数广播攻击">低加密指数广播攻击</h4>
<p>如果选取的加密指数较低，并且使用了相同的加密指数给一个接受者的群发送相同的信息，那么可以进行广播攻击得到明文。</p>
<p>即，选取了相同的加密指数e（这里取e=3），对相同的明文m进行了加密并进行了消息的传递，那么有：</p>
<p>$$
c_1\equiv m^e;mod ; n_1 $
$$
$$
c_2\equiv m^e;mod ; n_2 $
$$
$$
c_3\equiv m^e;mod;n_3
$$</p>
<p>对上述等式运用中国剩余定理，在e=3时，可以得到：</p>
<p>$$
c_x\equiv m^3;mod;n_1n_2n_3
$$</p>
<p>通过对 $ c_x $ 进行三次开方可以求得明文。</p>
<h3 id="低解密指数攻击">低解密指数攻击</h3>
<p>与低加密指数相同，低解密指数可以加快解密的过程，但是者也带来了安全问题。Wiener表示如果满足：</p>
<p>$$
d&lt;\frac{1}{3}g n^\frac{1}{4}
$$</p>
<p>那么一种基于连分数(一个数论当中的问题)的特殊攻击类型就可以危害RSA的安全。此时需要满足：</p>
<p>$$
q;&lt;;p;&lt;;2q
$$</p>
<p>如果满足上述条件，通过Wiener Attack可以在多项式时间中分解n。</p>
<p>rsa-wiener-attack的攻击源码开源在了github中，采取python编写，可以很容易使用。</p>
<h3 id="共模攻击">共模攻击</h3>
<p>如果在RSA的使用中使用了相同的模n对相同的明文m进行了加密，那么就可以在不分解n的情况下还原出明文m的值。</p>
<p>即：</p>
<p>$$
c_1\equiv m^{e_1};mod;n
$$
$$
c_2\equiv m^{e_2};mod;n
$$</p>
<p>此时不需要分解n，不需要求解私钥，如果两个加密指数互素，就可以通过共模攻击在两个密文和公钥被嗅探到的情况下还原出明文m的值。</p>
<p>过程如下，首先两个加密指数互质，则：</p>
<p>$$
(e_1,e_2)=1
$$</p>
<p>即存在$ s_2 $，$ s_2 $使得：</p>
<p>$$
s_1e_1+s_2e_2=1
$$</p>
<p>又因为：
$$
c_1 \equiv m^{e_1};mod;n
$$
$$
c_2\equiv m^{e_2};mod;n
$$</p>
<p>通过代入化简可以得出：
$$
c_1^{s_1}c_2^{s_2}\equiv;m;mod;n
$$</p>
<p>明文解出。</p>
<p>RSA的攻击方法肯定不止这五种，随着时代的发展和科技的进步，RSA加密算法被各种各样的破译算法进行攻破。而掌握这几种攻击算法，可以解决RSA题目中的大部分中等题目类型。比较难的题目，也就只能去多看看paper了。</p>
<h3 id="参考">参考</h3>
<ol>
<li><a href="https://www.freebuf.com/articles/others-articles/161475.html">CTF中RSA题型解题思路及技巧，附小白福利-FREEBUF</a></li>
<li><a href="https://www.anquanke.com/post/id/84632">【技术分享】CTF中RSA的常见攻击方法-安全客</a></li>
</ol>
<p>闲聊到此为止，来喝杯茶可好？</p>
]]></content>
        </item>
        
        <item>
            <title>清茶一盏 公杯斟茗</title>
            <link>https://zcodetea.github.io/posts/%E6%B8%85%E8%8C%B6%E4%B8%80%E7%9B%8F-%E5%85%AC%E6%9D%AF%E6%96%9F%E8%8C%97/</link>
            <pubDate>Sat, 26 Jun 2021 08:20:02 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/%E6%B8%85%E8%8C%B6%E4%B8%80%E7%9B%8F-%E5%85%AC%E6%9D%AF%E6%96%9F%E8%8C%97/</guid>
            <description>“细论RSA加密算法”  上下运杯，左右轻斟
公杯，私茗，香满阑
清茶，浓茶，甘润田
然君闻几何？
 要谈谈RSA加密算法，不妨先聊聊密码学的发展历史和密码学的历程。
密码学早在公元前400多年就已经产生，人类使用密码的历史几乎与使用文字的时间一样长，密码学的发展大致可以分为 3 个阶段: 1949 年之前的古典密码学阶段; 1949 年至 1975 年密码学成为科学的分支; 1976 年以后对称密钥密码算法得到进一步发展，产生了密码学的新方向—公钥密码学。1976 年，W.Diffie 和 M.Hellman 在发表的文章“密码学的新方向”中首次公开提出了公钥密码( Public-key Cryptography) 的概念。公钥密码的提出实现了加密密钥和解密密钥之间的独立，解决了对称密码体制中通信双方必须共享密钥的问题，在密码学界具有划时代的意义。1
密码学的历史非常悠久，但是密码学的发展速度并不是非常迅速，直到信息时代的到来以及网络空间安全面临着巨大的威胁，密码学得到了前所未有的飞速发展，RSA公钥密码就是其中的代表。密码学中研究的对象有大致三类：
 对称密码 非对称密码 协议  而RSA密码属于非对称密码，公钥密码。RSA也是现代密码学的代表性的内容部分，那么非常经典的RSA密码就是一个什么样的密码呢？
首先，要搞清楚什么是RSA密码：
RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）在1977年一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。
1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中提出了一个与之等效的算法，但该算法被列入机密，直到1997年才得到公开。
对极大整数做因数分解的难度决定了 RSA 算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的 RSA 钥匙才可能被强力方式破解。到目前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的。2
RSA加密算法就是三个人提出的一个非对称加密的算法，是一种公钥算法。RSA加密算法进行加密的信息具有良好的安全性和可靠性，正确地使用RSA加密算法可以应对互联网上的大多数针对密码进行的攻击。
RSA加密算法的具体内容是什么呢？
（这里借鉴一下阮一峰的个人博客进行说明）3
 （1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。
（2）甲方获取乙方的公钥，然后用它对信息加密。
（3）乙方得到加密后的信息，用私钥解密。
 这是非对称加密的总体流程，简单来说就是公钥加密，私钥解密的算法模式。而RSA加密算法就是公钥算法中的代表性的算法，这经典算法的基本原理还是比较简单易懂的。
RSA加密算法需要一点点的数学基础，也可以说是数论基础。
数学基础 模运算：模运算也可以说是用取余的运算方式
\[ a \equiv b(mod\; m)\]
这是最简单的模运算公式，也可以使用简单的Python语法实现：
b = a % m # python语言中%可以进行取余运算 整数环：模运算的延申，无论模运算中的数怎么加减乘除都在模的一个整数环中。</description>
            <content type="html"><![CDATA[<h2 id="细论rsa加密算法">“细论RSA加密算法”</h2>

<blockquote>
<p>上下运杯，左右轻斟</p>

<p>公杯，私茗，香满阑</p>

<p>清茶，浓茶，甘润田</p>

<p>然君闻几何？</p>
</blockquote>

<p>要谈谈RSA加密算法，不妨先聊聊密码学的发展历史和密码学的历程。</p>

<p>密码学早在公元前400多年就已经产生，人类使用密码的历史几乎与使用文字的时间一样长，密码学的发展大致可以分为 3 个阶段: 1949 年之前的古典密码学阶段; 1949 年至 1975 年密码学成为科学的分支; 1976 年以后对称密钥密码算法得到进一步发展，产生了密码学的新方向—公钥密码学。1976 年，W.Diffie 和 M.Hellman 在发表的文章“密码学的新方向”中首次公开提出了公钥密码( Public-key Cryptography) 的概念。公钥密码的提出实现了加密密钥和解密密钥之间的独立，解决了对称密码体制中通信双方必须共享密钥的问题，在密码学界具有划时代的意义。<sup>1</sup></p>

<p>密码学的历史非常悠久，但是密码学的发展速度并不是非常迅速，直到信息时代的到来以及网络空间安全面临着巨大的威胁，密码学得到了前所未有的飞速发展，RSA公钥密码就是其中的代表。密码学中研究的对象有大致三类：</p>

<ol>
<li>对称密码</li>
<li>非对称密码</li>
<li>协议</li>
</ol>

<p>而RSA密码属于非对称密码，公钥密码。RSA也是现代密码学的代表性的内容部分，那么非常经典的RSA密码就是一个什么样的密码呢？</p>

<p>首先，要搞清楚什么是RSA密码：</p>

<p>RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）在1977年一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p>

<p>1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中提出了一个与之等效的算法，但该算法被列入机密，直到1997年才得到公开。</p>

<p>对极大整数做因数分解的难度决定了 RSA 算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的 RSA 钥匙才可能被强力方式破解。到目前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的。<sup>2</sup></p>

<p>RSA加密算法就是三个人提出的一个非对称加密的算法，是一种公钥算法。RSA加密算法进行加密的信息具有良好的安全性和可靠性，正确地使用RSA加密算法可以应对互联网上的大多数针对密码进行的攻击。</p>

<p>RSA加密算法的具体内容是什么呢？</p>

<p>（这里借鉴一下阮一峰的个人博客进行说明）<sup>3</sup></p>

<blockquote>
<p>（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。</p>

<p>（2）甲方获取乙方的公钥，然后用它对信息加密。</p>

<p>（3）乙方得到加密后的信息，用私钥解密。</p>
</blockquote>

<p>这是非对称加密的总体流程，简单来说就是公钥加密，私钥解密的算法模式。而RSA加密算法就是公钥算法中的代表性的算法，这经典算法的基本原理还是比较简单易懂的。</p>

<p>RSA加密算法需要一点点的数学基础，也可以说是数论基础。</p>

<h3 id="数学基础">数学基础</h3>

<p><strong>模运算：模运算也可以说是用取余的运算方式</strong></p>

<p><span  class="math">\[ a \equiv b(mod\; m)\]</span></p>

<p>这是最简单的模运算公式，也可以使用简单的Python语法实现：</p>
<pre><code>b = a % m # python语言中%可以进行取余运算</code></pre>
<p><strong>整数环：模运算的延申，无论模运算中的数怎么加减乘除都在模的一个整数环中。</strong></p>

<p>在数论的概念中，模运算主要是针对自然数进行的研究，模运算也是如此。可以把整数环想象成一个钟表，钟表有12个数字，无论怎么加减乘除钟表的数字，指针始终都指在钟表的环中。</p>

<p>这里用简单的数学语言进行表示：</p>

<p><span  class="math">\[ a + c\equiv e(mod\;12)\]</span></p>

<p><span  class="math">\[ a \cdot c\equiv f(mod\;12)\]</span></p>

<p>当然也可以使用Python语法进行表示：</p>
<pre><code>e = (a+c) % 12
f = (a*c) % 12</code></pre>
<p><strong>欧拉函数：求小于该数的素数个数多少的问题的最佳解决方案。</strong></p>

<p>欧拉函数也是数论里面比较重要的概念，欧拉函数的特点使得RSA加密算法有良好的加密性和安全性。</p>

<p>在讲欧拉函数之前，先阐述一下素数的概念：</p>

<blockquote>
<p>素数也叫质数，素数就是只能被1和自身整除的数</p>

<p>互素也叫互质，如果两个数的最大公因数是1，那么则称这两个数是互素的</p>
</blockquote>

<p>什么是欧拉函数呢？</p>

<p>欧拉函数一般使用 φ(n) 表示，一般来说是分为两种情况的：</p>

<p>（1） n是一个素数：</p>

<p><span  class="math">\[ \varphi (n)= n-1\]</span></p>

<p>（2）n不是一个素数，但是n是两个素数的乘积：</p>

<p><span  class="math">\[ \varphi (n) = (p-1) \cdot (q-1) \]</span></p>

<p>这就是欧拉函数，和欧拉函数一起使用的还有一个欧拉定理：</p>

<p>在数论中，欧拉定理,（也称费马-欧拉定理）是一个关于同余的性质。欧拉定理表明，若n,a为正整数，且n,a互质，则:</p>

<p><span  class="math">\[ a ^{\varphi(n)} \equiv 1(mod\; n) \]</span></p>

<p>这些大致就是欧拉函数和欧拉定理的大致内容，都是规律性的总结，在RSA算法中加以使用就可以了。</p>

<p><strong>模反元素：如果两个正整数a和n互质，那么一定可以找到整数b，使得 ab-1 被n整除，或者说ab被n除的余数是1。</strong><sup>3</sup></p>

<p>这里可以使用数学语言进行解释一下：</p>

<p><span  class="math">\[ a \cdot b \equiv 1(mod\;m) \]</span></p>

<p>就是两个数进行模乘法运算得到的结果是1的两个数互为模反元素，也叫逆元。</p>

<p>在这个等式中，可以说a是b的逆元，也可以说是b是a的逆元。</p>

<p><strong>最后一个数学概念：单向函数，公钥加密算法的核心原理</strong></p>

<p>单向函数就是由x求y简单，而由y求x比较困难的函数叫做单向函数：</p>

<p><span  class="math">\[ y = f(x) \]</span></p>

<p><span  class="math">\[ x = f^{-1}(y) \]</span></p>

<p>由于单向函数概念的出现，使得公钥加密私钥解密成为现实。</p>

<p>可是单向函数只是使加密变得容易，而并没有使解密变得容易。于是一个陷门的概念提出使公钥加密私钥解密的加密算法模式真正的变成现实。</p>

<p>什么是陷门呢？</p>

<p>陷门的概念就好比网络安全的后门，单向函数解密不是非常困难嘛，而陷门就是一个特殊的数值可以使单向函数进行解密变得简单。于是陷门就可以作为私钥进行解密。</p>

<p>RSA公钥加密算法的数学知识大致就是这些了。</p>

<p>下面，来聊一聊RSA公钥加密算法的具体过程。</p>

<h3 id="rsa加密算法">RSA加密算法</h3>

<ol>
<li>首先随机选择两个不相等的素数p和q</li>
<li>计算p和q的乘积n</li>
<li>计算n的欧拉函数发φ(n)</li>
<li>随机选择一个整数e，e满足的条件是：1&lt;e&lt;φ(n)</li>
<li>计算e对于φ(n)的模反元素d</li>
<li>将n和e封装成公钥，将n和d封装成私钥</li>
</ol>

<p>具体流程用数学的语言描述：</p>

<p><span  class="math">\[ 1. \quad  p , q\]</span></p>

<p><span  class="math">\[ 2. \quad p\cdot q = n \]</span></p>

<p><span  class="math">\[ 3. \quad \varphi (n) \]</span></p>

<p><span  class="math">\[ 4. \quad  1<e<\varphi (n) \]</span></p>

<p><span  class="math">\[ 5. \quad e \cdot d \equiv 1 (mod\; \varphi (n)) \]</span></p>

<p><span  class="math">\[ 6. \quad (n , e) , (n , d) \]</span></p>

<p>当然也可使用python语句进行设计：4</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">import</span> gmpy2
<span style="color:#f92672">from</span> gmpy2 <span style="color:#f92672">import</span> mpz
<span style="color:#f92672">import</span> binascii

rs <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>random_state()

<span style="color:#75715e">#生成大素数（0-2^1024位）</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_prime</span>():
    p <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>mpz_urandomb(rs,<span style="color:#ae81ff">1024</span>)         <span style="color:#75715e">#随机生成一个0~2^1024位的数</span>
    <span style="color:#66d9ef">while</span> <span style="color:#f92672">not</span> gmpy2<span style="color:#f92672">.</span>is_prime(p):            <span style="color:#75715e">#判断生成的数是否是素数</span>
        p <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>mpz_urandomb(rs,<span style="color:#ae81ff">1024</span>)     
    <span style="color:#66d9ef">return</span> p

<span style="color:#75715e">#生成密钥e,d</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_e_d</span>(phi):
    e <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>mpz_random(rs,phi)            
    <span style="color:#66d9ef">while</span> gmpy2<span style="color:#f92672">.</span>gcd(e,phi) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">1</span>:
        e <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>mpz_random(rs,phi)        <span style="color:#75715e">#随机生成一个0~phi的,与phi互素的数</span>
    d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,phi)                 <span style="color:#75715e">#生成d</span>
    <span style="color:#66d9ef">return</span> e,d

<span style="color:#75715e">#rsa加密</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encrypt</span>(plain_text,e,n):
    m <span style="color:#f92672">=</span> mpz(binascii<span style="color:#f92672">.</span>hexlify(plain_text<span style="color:#f92672">.</span>encode(<span style="color:#e6db74">&#39;utf-8&#39;</span>)), <span style="color:#ae81ff">16</span>)
    cipher_text <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>powmod(m,e,n)
    <span style="color:#66d9ef">return</span> cipher_text

<span style="color:#75715e">#rsa解密</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrypt</span>(cipher_text,d,n):
    m <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>powmod(cipher_text,d,n)
    plain_text <span style="color:#f92672">=</span> binascii<span style="color:#f92672">.</span>unhexlify(format(m, <span style="color:#e6db74">&#39;x&#39;</span>))<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;utf-8&#39;</span>)
    <span style="color:#66d9ef">return</span> plain_text

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
    p <span style="color:#f92672">=</span> create_prime()
    q <span style="color:#f92672">=</span> create_prime()
    n <span style="color:#f92672">=</span> p <span style="color:#f92672">*</span> q
    phi <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
    e,d <span style="color:#f92672">=</span> get_e_d(phi)
    plain_text <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;请输入明文：&#34;</span>)
    cipher_text <span style="color:#f92672">=</span> encrypt(plain_text,e,n)
    print(<span style="color:#e6db74">&#34;RSA加密后的密文是：</span><span style="color:#e6db74">%x</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">%</span>cipher_text)
    plain_text1 <span style="color:#f92672">=</span> decrypt(cipher_text,d,n)
    print(<span style="color:#e6db74">&#34;RSA解密后的明文是：</span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(plain_text1))</code></pre></div>
<p>RSA的加密流程非常简单，只需要大致记忆就可以对RSA算法流程非常清晰，而且明了于心。同时，也会出现一些疑问，这么安全的加密算法会有什么样的漏洞会在CTF比赛中让CTF选手进行攻击呢？</p>

<p>无论再安全的算法，都有可以破解的漏洞存在，“没有绝对安全的系统”。时代在进步，密码学算法也在一步一步的提升，下一篇将揭示RSA公钥密码的常见攻击手段。</p>

<h3 id="参考">参考</h3>

<ol>
<li><a href="https://blog.csdn.net/jiang_xinxing/article/details/89360638">密码学发展简史-CSDN</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/RSA">RSA加密算法-维基百科</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">RSA算法原理-阮一峰</a></li>
<li><a href="https://blog.csdn.net/weixin_43790779/article/details/105999977">python实现RSA算法</a></li>
</ol>

<p>闲聊到此为止，来喝杯茶可好？</p>
]]></content>
        </item>
        
        <item>
            <title>BUUCTF CRYPTO [1~16] writeup</title>
            <link>https://zcodetea.github.io/posts/buuctf-crypto-1-16_writeup/</link>
            <pubDate>Sat, 26 Jun 2021 08:12:56 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/buuctf-crypto-1-16_writeup/</guid>
            <description>日常刷题喝茶的平时生活，整理一下题目的思路，捋一捋密码学。
BUUCTF是国内另一个比较不错的CTF的刷题平台，是由北京联合大学创建并维护的CTF大型同性交流沟通的平台，页面制作还是蛮美观滴！
BUUCTF页面
BUUCTF的整体难度是由简单变难的一个过程，前面的题目通常都是比较简单的题目，来看看这次日常的题目：
题目
这次是16道题目：
 MD5 Url编码 一眼就解密 看我回旋踢 摩丝 password 变异凯撒 Quoted-printable Rabbit 篱笆墙的影子 RSA 丢失的MD5 Alice与Bob rsarsa 大帝的密码武器 Windows系统密码  MD5 看题目应该是考察MD5加密的暴力破解
什么是MD5加密？
MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。这套算法的程序在 RFC 1321 中被加以规范。
将数据（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。
1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的资料，专家一般建议改用其他算法，如SHA-2。2004年，证实MD5算法无法防止碰撞攻击（英语：Collision_attack），因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。[1]
看看题目描述：
题目描述
下载附件，查看附件内容：
附件内容
附件中给出一段加密数据：e00cf25ad42683b3df678c61f42c6bda
根据题目，应该是MD5加密，去解密网站
进行解密。
cmd5
题目描述中，要求以flag{}形式进行提交，故flag就是flag{admin1}
这道题目考察md5加密的相关知识，签到题。
Url编码 看题目应该是考察Url编码的解码
什么是Url编码？
百分号编码（英语：Percent-encoding），又称：URL编码（URL encoding）是特定上下文的统一资源定位符 （URL）的编码机制，实际上也适用于统一资源标志符（URI）的编码。也用于为 application/x-www-form-urlencoded MIME准备数据，因为它用于通过HTTP的请求操作（request）提交HTML表单数据。[2]
看看题目描述：
题目描述
下载附件，查看附件内容：
附件内容
一段编码的字段：%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d
使用url解码工具解码，也可以使用python进行解码。我个人习惯使用python脚本进行url编码解码：
import urllib.parse cipher = &amp;#39;%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d&amp;#39; print(urllib.parse.unquote(cipher)) 运行脚本就可以出结果：
解码后也就是flag数据：flag{and 1=1}</description>
            <content type="html"><![CDATA[<p>日常刷题喝茶的平时生活，整理一下题目的思路，捋一捋密码学。</p>
<p>BUUCTF是国内另一个比较不错的CTF的刷题平台，是由北京联合大学创建并维护的CTF大型同性交流沟通的平台，页面制作还是蛮美观滴！</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-58-1024x717.png" alt="img">BUUCTF页面</p>
<p>BUUCTF的整体难度是由简单变难的一个过程，前面的题目通常都是比较简单的题目，来看看这次日常的题目：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-59.png" alt="img">题目</p>
<p>这次是16道题目：</p>
<ul>
<li>MD5</li>
<li>Url编码</li>
<li>一眼就解密</li>
<li>看我回旋踢</li>
<li>摩丝</li>
<li>password</li>
<li>变异凯撒</li>
<li>Quoted-printable</li>
<li>Rabbit</li>
<li>篱笆墙的影子</li>
<li>RSA</li>
<li>丢失的MD5</li>
<li>Alice与Bob</li>
<li>rsarsa</li>
<li>大帝的密码武器</li>
<li>Windows系统密码</li>
</ul>
<h2 id="md5">MD5</h2>
<p>看题目应该是考察MD5加密的暴力破解</p>
<p>什么是MD5加密？</p>
<p>MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。这套算法的程序在 RFC 1321 中被加以规范。</p>
<p>将数据（如一段文字）运算变为另一固定长度值，是散列算法的基础原理。</p>
<p>1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的资料，专家一般建议改用其他算法，如SHA-2。2004年，证实MD5算法无法防止碰撞攻击（英语：Collision_attack），因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。[1]</p>
<p>看看题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-60.png" alt="img"></p>
<p>题目描述</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-61.png" alt="img"></p>
<p>附件内容</p>
<p>附件中给出一段加密数据：e00cf25ad42683b3df678c61f42c6bda</p>
<p>根据题目，应该是MD5加密，去<a href="https://www.cmd5.com/">解密网站</a></p>
<p>进行解密。</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-62.png" alt="img">cmd5</p>
<p>题目描述中，要求以flag{}形式进行提交，故flag就是flag{admin1}</p>
<p>这道题目考察md5加密的相关知识，签到题。</p>
<h2 id="url编码">Url编码</h2>
<p>看题目应该是考察Url编码的解码</p>
<p>什么是Url编码？</p>
<p>百分号编码（英语：Percent-encoding），又称：URL编码（URL encoding）是特定上下文的统一资源定位符 （URL）的编码机制，实际上也适用于统一资源标志符（URI）的编码。也用于为 application/x-www-form-urlencoded MIME准备数据，因为它用于通过HTTP的请求操作（request）提交HTML表单数据。[2]</p>
<p>看看题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-63.png" alt="img"></p>
<p>题目描述</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-64.png" alt="img"></p>
<p>附件内容</p>
<p>一段编码的字段：%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d</p>
<p>使用url解码工具解码，也可以使用python进行解码。我个人习惯使用python脚本进行url编码解码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> urllib.parse

cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%66%</span><span style="color:#e6db74">6c</span><span style="color:#e6db74">%61%</span><span style="color:#e6db74">67%7b</span><span style="color:#e6db74">%61%</span><span style="color:#e6db74">6e</span><span style="color:#e6db74">%64%</span><span style="color:#e6db74">20</span><span style="color:#e6db74">%31%</span><span style="color:#e6db74">3d</span><span style="color:#e6db74">%31%</span><span style="color:#e6db74">7d&#39;</span>
print(urllib<span style="color:#f92672">.</span>parse<span style="color:#f92672">.</span>unquote(cipher))
</code></pre></div><p>运行脚本就可以出结果：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-65.png" alt="img"></p>
<p>解码后也就是flag数据：flag{and 1=1}</p>
<p>故本题的flag是flag{and 1=1}</p>
<p>题目主要考察URL编码，签到题。</p>
<h2 id="一眼就解密">一眼就解密</h2>
<p>题目给不了太多提示</p>
<p>直接点开题目描述看内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-66.png" alt="img"></p>
<p>题目描述</p>
<p>看题目描述中的字符串，字符串的样子像是base64编码：ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=</p>
<p>这里一个脚本进行求解：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64

cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=&#34;</span>
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

plainer <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(cipher)
print plainer
</code></pre></div><p>运行程序求解得到：flag{THE_FLAG_OF_THIS_STRING}</p>
<p>故本题的flag是flag{THE_FLAG_OF_THIS_STRING}</p>
<p>题目考察base64编码，签到题。</p>
<h2 id="看我回旋踢">看我回旋踢</h2>
<p>看题目，暂时想不出什么密码相关联的内容。</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-67.png" alt="img"></p>
<p>题目描述</p>
<p>只提示了题目提交的flag数据的格式信息</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-68.png" alt="img"></p>
<p>附件内容</p>
<p>看附件给出的字符形式像是替换密码加密的数据，最容易联想到的替换密码就是凯撒密码，尝试使用凯撒密码进行解密：（这里一个脚本求解凯撒密码）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">dict_list <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
    dict_list<span style="color:#f92672">.</span>append(chr(ord(<span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">+</span>i))

cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}&#34;</span>

<span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>n)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]
        <span style="color:#66d9ef">else</span>:
            plainer <span style="color:#f92672">+=</span> i

    print plainer
</code></pre></div><blockquote>
<p>凯撒密码的算法思路，在上一篇XCTF CRYPTO的WP中有提到，具体内容可以访问上一篇：</p>
<p><a href="http://zkinghar.top/?p=463">XCTF-CRYPTO-新手区 writeup</a></p>
</blockquote>
<p>运行脚本程序，得到一堆凯撒解密的结果：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">synt<span style="color:#f92672">{</span>5pq1004q-86n5-46q8-o720-oro5on0417r1<span style="color:#f92672">}</span>
rxms<span style="color:#f92672">{</span>5op1004p-86m5-46p8-n720-nqn5nm0417q1<span style="color:#f92672">}</span>
qwlr<span style="color:#f92672">{</span>5no1004o-86l5-46o8-m720-mpm5ml0417p1<span style="color:#f92672">}</span>
pvkq<span style="color:#f92672">{</span>5mn1004n-86k5-46n8-l720-lol5lk0417o1<span style="color:#f92672">}</span>
oujp<span style="color:#f92672">{</span>5lm1004m-86j5-46m8-k720-knk5kj0417n1<span style="color:#f92672">}</span>
ntio<span style="color:#f92672">{</span>5kl1004l-86i5-46l8-j720-jmj5ji0417m1<span style="color:#f92672">}</span>
mshn<span style="color:#f92672">{</span>5jk1004k-86h5-46k8-i720-ili5ih0417l1<span style="color:#f92672">}</span>
lrgm<span style="color:#f92672">{</span>5ij1004j-86g5-46j8-h720-hkh5hg0417k1<span style="color:#f92672">}</span>
kqfl<span style="color:#f92672">{</span>5hi1004i-86f5-46i8-g720-gjg5gf0417j1<span style="color:#f92672">}</span>
jpek<span style="color:#f92672">{</span>5gh1004h-86e5-46h8-f720-fif5fe0417i1<span style="color:#f92672">}</span>
iodj<span style="color:#f92672">{</span>5fg1004g-86d5-46g8-e720-ehe5ed0417h1<span style="color:#f92672">}</span>
hnci<span style="color:#f92672">{</span>5ef1004f-86c5-46f8-d720-dgd5dc0417g1<span style="color:#f92672">}</span>
gmbh<span style="color:#f92672">{</span>5de1004e-86b5-46e8-c720-cfc5cb0417f1<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>5cd1004d-86a5-46d8-b720-beb5ba0417e1<span style="color:#f92672">}</span>
ekzf<span style="color:#f92672">{</span>5bc1004c-86z5-46c8-a720-ada5az0417d1<span style="color:#f92672">}</span>
djye<span style="color:#f92672">{</span>5ab1004b-86y5-46b8-z720-zcz5zy0417c1<span style="color:#f92672">}</span>
cixd<span style="color:#f92672">{</span>5za1004a-86x5-46a8-y720-yby5yx0417b1<span style="color:#f92672">}</span>
bhwc<span style="color:#f92672">{</span>5yz1004z-86w5-46z8-x720-xax5xw0417a1<span style="color:#f92672">}</span>
agvb<span style="color:#f92672">{</span>5xy1004y-86v5-46y8-w720-wzw5wv0417z1<span style="color:#f92672">}</span>
zfua<span style="color:#f92672">{</span>5wx1004x-86u5-46x8-v720-vyv5vu0417y1<span style="color:#f92672">}</span>
yetz<span style="color:#f92672">{</span>5vw1004w-86t5-46w8-u720-uxu5ut0417x1<span style="color:#f92672">}</span>
xdsy<span style="color:#f92672">{</span>5uv1004v-86s5-46v8-t720-twt5ts0417w1<span style="color:#f92672">}</span>
wcrx<span style="color:#f92672">{</span>5tu1004u-86r5-46u8-s720-svs5sr0417v1<span style="color:#f92672">}</span>
vbqw<span style="color:#f92672">{</span>5st1004t-86q5-46t8-r720-rur5rq0417u1<span style="color:#f92672">}</span>
uapv<span style="color:#f92672">{</span>5rs1004s-86p5-46s8-q720-qtq5qp0417t1<span style="color:#f92672">}</span>
tzou<span style="color:#f92672">{</span>5qr1004r-86o5-46r8-p720-psp5po0417s1<span style="color:#f92672">}</span>
</code></pre></div><p>在解密的字符列表中，找到符合flag格式的字符段：</p>
<p>flag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}</p>
<p>故本题的flag是：flag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}</p>
<p>题目主要考察凯撒密码，签到题。</p>
<h2 id="摩丝">摩丝</h2>
<p>看题目，可以联想到Morse电码，这题目应该是摩尔斯密码的解密题目</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-69.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述只说了flag{}的格式，下载附件并查看：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-70.png" alt="img"></p>
<p>附件内容</p>
<p>果然是摩尔斯密码，这里一个脚本解决：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">dict_list <span style="color:#f92672">=</span> {
        <span style="color:#e6db74">&#39;.-&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
        <span style="color:#e6db74">&#39;-...&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
        <span style="color:#e6db74">&#39;-.-.&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
        <span style="color:#e6db74">&#39;-..&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
        <span style="color:#e6db74">&#39;.&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
        <span style="color:#e6db74">&#39;..-.&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
        <span style="color:#e6db74">&#39;--.&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
        <span style="color:#e6db74">&#39;....&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>,
        <span style="color:#e6db74">&#39;..&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
        <span style="color:#e6db74">&#39;.---&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
        <span style="color:#e6db74">&#39;-.-&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
        <span style="color:#e6db74">&#39;.-..&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
        <span style="color:#e6db74">&#39;--&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
        <span style="color:#e6db74">&#39;-.&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
        <span style="color:#e6db74">&#39;---&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>,
        <span style="color:#e6db74">&#39;.--.&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,
        <span style="color:#e6db74">&#39;--.-&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
        <span style="color:#e6db74">&#39;.-.&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
        <span style="color:#e6db74">&#39;...&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
        <span style="color:#e6db74">&#39;-&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
        <span style="color:#e6db74">&#39;..-&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
        <span style="color:#e6db74">&#39;...-&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
        <span style="color:#e6db74">&#39;.--&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
        <span style="color:#e6db74">&#39;-..-&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>,
        <span style="color:#e6db74">&#39;-.--&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
        <span style="color:#e6db74">&#39;--..&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>,
        <span style="color:#e6db74">&#39;-----&#39;</span>:<span style="color:#e6db74">&#39;0&#39;</span>,
        <span style="color:#e6db74">&#39;.----&#39;</span>:<span style="color:#e6db74">&#39;1&#39;</span>,
        <span style="color:#e6db74">&#39;..---&#39;</span>:<span style="color:#e6db74">&#39;2&#39;</span>,
        <span style="color:#e6db74">&#39;...--&#39;</span>:<span style="color:#e6db74">&#39;3&#39;</span>,
        <span style="color:#e6db74">&#39;....-&#39;</span>:<span style="color:#e6db74">&#39;4&#39;</span>,
        <span style="color:#e6db74">&#39;.....&#39;</span>:<span style="color:#e6db74">&#39;5&#39;</span>,
        <span style="color:#e6db74">&#39;-....&#39;</span>:<span style="color:#e6db74">&#39;6&#39;</span>,
        <span style="color:#e6db74">&#39;--...&#39;</span>:<span style="color:#e6db74">&#39;7&#39;</span>,
        <span style="color:#e6db74">&#39;---..&#39;</span>:<span style="color:#e6db74">&#39;8&#39;</span>,
        <span style="color:#e6db74">&#39;----.&#39;</span>:<span style="color:#e6db74">&#39;9&#39;</span>,
        <span style="color:#e6db74">&#39;..--.-&#39;</span>:<span style="color:#e6db74">&#39;_&#39;</span>
        }
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;.. .-.. --- ...- . -.-- --- ..-&#34;</span>
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
    plainer <span style="color:#f92672">+=</span> dict_list[i]

print plainer<span style="color:#f92672">.</span>upper()
print plainer<span style="color:#f92672">.</span>lower()
</code></pre></div><blockquote>
<p>摩尔斯电码的详细介绍，在上一篇XCTF CRYPTO的WP中有提到，具体内容可以访问上一篇：</p>
<p><a href="http://zkinghar.top/?p=463">XCTF-CRYPTO-新手区 writeup</a></p>
</blockquote>
<p>执行一下代码，得到两个数据：</p>
<pre><code>ILOVEYOU
iloveyou
</code></pre><p>两个数据都可能是flag数据，我记得这道题目的flag数据好像是用大写的，即：flag{ILOVEYOU}，也有可能错。</p>
<p>题目主要考察摩尔斯电码相关知识，签到题。</p>
<h2 id="password">password</h2>
<p>看题目应该是与密码有关系的题目</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-71.png" alt="img"></p>
<p>题目描述</p>
<p>只有flag数据提交格式的相关信息，下载附件并打开：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-72.png" alt="img">附件内容</p>
<p>看到附件内容里面的信息，可以大致判断这道题目应该是社会工程学题目。</p>
<p>什么是社会工程学：</p>
<p>在计算机科学，社会工程学指的是通过与他人的合法交流，来使其心理受到影响，做出某些动作或者是透露一些机密信息的方式。这通常被认为是欺诈他人以收集信息、行骗和入侵计算机系统的行为。在英美普通法系，这一行为一般是被认作侵犯隐私权的。</p>
<p>历史上，社会工程学是隶属于社会学，不过其影响他人心理的效果引起了计算机安全专家的注意。3</p>
<p>简单来说，社会工程学就是利用人性的弱点来进行分析，得到关键性的信息的方式。社会工程学也就是互联网安全体系中存在的威胁性漏洞。</p>
<p>根据题目的信息，可以猜测flag数据可能是flag{zs19900315}或flag{19900315zs}</p>
<p>经过测试发现，flag数据是flag{zs19900315}</p>
<p>题目主要考察社会工程学的知识，签到题。</p>
<h2 id="变异凯撒">变异凯撒</h2>
<p>看题目应该是凯撒密码考察</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-73.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述一如既往的朴素，只告诉了提交的格式</p>
<p>下载附件，并查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-74.png" alt="img"></p>
<p>附件内容</p>
<p>密文中有很多编码的字符，字典集可能不是26字母表，可能是ascii编码表</p>
<p>分析一下附件的加密逻辑：（这里我写了一个小脚本）</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-75.png" alt="img">分析</p>
<p>分析发现移位是ascii码的移位方式，而且移位的数据是一个递增的数列，5作为初始数列，以1为差值的等差数列形式。明文的数值比密文的数值大一些。分析完毕。</p>
<p>这里还是一个脚本解决问题：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;afZ_r9VYfScOeO_UL^RWUc&#34;</span>
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

num <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
    plainer <span style="color:#f92672">+=</span>chr(ord(i)<span style="color:#f92672">+</span>num)
    num <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>

print plainer
</code></pre></div><p>执行脚本，得到flag数据：flag{Caesar_variation}</p>
<p>故flag数据是flag{Caesar_variation}</p>
<p>题目主要考察凯撒密码的原理，简单题。</p>
<h2 id="quoted-printable">Quoted-printable</h2>
<p>题目暂时看不出什么样的信息，题目翻译下来就是字符集</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-76.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述还是一如既往的buu的风格，没有什么提示性的描述</p>
<p>直接下载附件，并查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-77.png" alt="img">附件内容</p>
<p>看到内容，感觉是熟悉的味道：E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6</p>
<p>这里写个小脚本试试16进制解码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6&#34;</span>
cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;=&#39;</span>)
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(cipher_arr)<span style="color:#f92672">.</span>decode(<span style="color:#e6db74">&#39;hex&#39;</span>)
print plainer
</code></pre></div><p>执行编写的脚本，得到数据：那你也很棒哦</p>
<p>这个数据应该就是flag数据了，对数据进行一些修饰得到flag：flag{那你也很棒哦}</p>
<p>故flag是flag{那你也很棒哦}</p>
<p>本题主要考察hex编码，签到题。</p>
<h2 id="rabbit">Rabbit</h2>
<p>看到题目名字还是有些懵懵的，搜索一些发现题目应该是在说Rabbit流密码。</p>
<p>什么是流密码？什么是Rabbit密码？</p>
<p>在密码学中，流密码（英语：Stream cipher），又译为流加密、资料流加密，是一种对称加密算法，加密和解密双方使用相同伪随机加密数据流（pseudo-random stream）作为密钥，明文数据每次与密钥数据流顺次对应加密，得到密文数据流。实践中数据通常是一个位（bit）并用异或（xor）操作加密。</p>
<p>该算法解决了对称加密完善保密性（perfect secrecy）的实际操作困难。“完善保密性”由克劳德·香农于1949年提出。由于完善保密性要求密钥长度不短于明文长度，故而实际操作存在困难，改由较短数据流通过特定算法得到密钥流。[4]</p>
<p>流密码就是基于随机数的对称加密算法，Rabbit密码是流密码的一种：</p>
<p>Rabbit流密码（Rabbit Stream Cipher）简介</p>
<p>Rabbit流密码是由Cryptico公司（<a href="http://www.cryptico.com/">http://www.cryptico.com</a>）设计的，密钥长度128位，</p>
<p>最大加密消息长度为2 Bytes，即16 TB，若消息超过该长度，则需要更换密钥对剩下的消息进行处理。它是目前安全性较高，加/解密速度比较高效的流密码之一，在各种处理器平台上都有不凡的表现。[5]</p>
<p>Cryptico公司好像是已经搜索不到了，而且那个网站的域名也在进行拍卖，以目前的情况，我还找不到有关Rabbit密码的相关算法信息。但是，通过论文的查阅找到了，rabbit算法的内容：[6]</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-82.png" alt="img"></p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-83.png" alt="img"></p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-84.png" alt="img"></p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-85.png" alt="img"></p>
<p>Rabbit密码的加密算法还是比较复杂的，不过通过搜索引擎找到了破解Rabbit密码的现成脚本</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-86.png" alt="img"></p>
<p>题目描述</p>
<p>一如既往没有什么卵用的题目描述</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-87.png" alt="img"></p>
<p>附件内容</p>
<p>附件内容里面是一组密文：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI
</code></pre></div><p>这里使用在线解密工具进行解密：https://www.sojson.com/encrypt_rabbit.html</p>
<p>（本菜鸡不会写，嘤嘤嘤）</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-88-1024x242.png" alt="img">     解密页面</p>
<p>得到了一个明文：Cute_Rabbit</p>
<p>对得到的明文进行简单的修饰：flag{Cute_Rabbit}</p>
<p>故flag是flag{Cute_Rabbit}</p>
<p>本题主要考察Rabbit流密码加密，简单题</p>
<h2 id="篱笆墙的影子">篱笆墙的影子</h2>
<p>看到题目，这题应该是考察栅栏密码。（篱笆墙也只能联想到栅栏密码了）</p>
<blockquote>
<p>栅栏密码的详细介绍，在上一篇XCTF CRYPTO的WP中有提到，具体内容可以访问上一篇：</p>
<p><a href="http://zkinghar.top/?p=463">XCTF-CRYPTO-新手区 writeup</a></p>
</blockquote>
<p>点开题目描述</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-89.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述就是在说，还是熟悉的味道，唔~。然而也没什么卵用</p>
<p>下载附件，并查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-90.png" alt="img"></p>
<p>附件内容</p>
<p>附件里面的文件中是一段熟悉密文：felhaagv{ewtehtehfilnakgw}</p>
<p>由于不确定是W型还是传统型，直接使用之前写的两个脚本都跑一下：</p>
<p>传统型栅栏密码</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">fhetlehhafaiglvn<span style="color:#f92672">{</span>aekwgtwe<span style="color:#f92672">}</span>
feiewlltnheaahkatggewvh<span style="color:#f92672">}{</span>f
fvtae<span style="color:#f92672">{</span>eklehghwfwati<span style="color:#f92672">}</span>aelghn
fgeiwevhl<span style="color:#f92672">}</span>l<span style="color:#f92672">{</span>tnheeaawhkatfg
fawen<span style="color:#f92672">}</span>egthalvefkh<span style="color:#f92672">{</span>higaetlw
fa<span style="color:#f92672">{</span>ehnweaehfa<span style="color:#f92672">}</span>lgwtikhvtelg
fa<span style="color:#f92672">{</span>ehnweaehfa<span style="color:#f92672">}</span>lgwtikhvtelg
fhgeeeiaweavwhhlk<span style="color:#f92672">}</span>la<span style="color:#f92672">{</span>ttfng
fhgeeeiaweavwhhlk<span style="color:#f92672">}</span>la<span style="color:#f92672">{</span>ttfng
fhgeeeiaweavwhhlk<span style="color:#f92672">}</span>la<span style="color:#f92672">{</span>ttfng
fhgeeeiaweavwhhlk<span style="color:#f92672">}</span>la<span style="color:#f92672">{</span>ttfng
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
flag<span style="color:#f92672">{</span>wethinkwehavetheflag<span style="color:#f92672">}</span>
</code></pre></div><p>W型栅栏密码</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">fhetlehhafaiglvn<span style="color:#f92672">{</span>aekwgtwe<span style="color:#f92672">}</span>
fvn<span style="color:#f92672">{</span>eeawltkehhgtaewhaf<span style="color:#f92672">}</span>igl
fatkegevhgf<span style="color:#f92672">{</span>leiwlwhtn<span style="color:#f92672">}</span>aeah
fatfgieaeghlwntvl<span style="color:#f92672">{</span>ea<span style="color:#f92672">}</span>khehw
fh<span style="color:#f92672">{</span>higlteaeawenwahtglvefk<span style="color:#f92672">}</span>
fh<span style="color:#f92672">{</span>ehnwafheaeawtik<span style="color:#f92672">}</span>gletglv
fla<span style="color:#f92672">{</span>ehnwafhegheavwtik<span style="color:#f92672">}</span>glet
fla<span style="color:#f92672">{</span>ttfnwaieeegheavwhhlk<span style="color:#f92672">}</span>g
fla<span style="color:#f92672">{</span>ttfng<span style="color:#f92672">}</span>waieeegheavwhhlk
fla<span style="color:#f92672">{</span>ttflag<span style="color:#f92672">}</span>wknieeegheavwhh
fla<span style="color:#f92672">{</span>theflag<span style="color:#f92672">}</span>wknihteegheavw
flavetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>ghea
fehavetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>gal
felhavetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>ga
felhaavetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>g
felhaagvetheflag<span style="color:#f92672">}</span>wknihtew<span style="color:#f92672">{</span>
felhaagv<span style="color:#f92672">{</span>etheflag<span style="color:#f92672">}</span>wknihtew
felhaagv<span style="color:#f92672">{</span>ewtheflag<span style="color:#f92672">}</span>wknihte
</code></pre></div><p>在跑出来的数据中寻找有关flag的相关信息，经查找发现flag数据是：flag{wethinkwehavetheflag}</p>
<p>故本题的flag就是flag{wethinkwehavetheflag}</p>
<p>题目主要考察栅栏密码，签到题。</p>
<p>本题的解题脚本代码还是扔出来一下吧：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrype</span>(cipher,key):
    cipher_len <span style="color:#f92672">=</span> len(cipher)
    <span style="color:#66d9ef">if</span> cipher_len<span style="color:#f92672">%</span>key <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">/</span> key
    <span style="color:#66d9ef">else</span>:
        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">/</span> key <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
    result <span style="color:#f92672">=</span> {x:<span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(key)}
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(cipher_len):
        a <span style="color:#f92672">=</span> i<span style="color:#f92672">%</span>key;
        result<span style="color:#f92672">.</span>update({a:result[a]<span style="color:#f92672">+</span>cipher[i]})
    plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(key):
        plainer <span style="color:#f92672">=</span> plainer <span style="color:#f92672">+</span> result[i]
    print plainer

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;felhaagv</span><span style="color:#e6db74">{ewtehtehfilnakgw}</span><span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">20</span>):
    decrype(cipher,n)
</code></pre></div><h2 id="rsa">RSA</h2>
<p>看题目应该是主要考察RSA非对称加密算法的问题，密码学核心考察的问题。</p>
<blockquote>
<p>RSA加密算法的详细介绍，在上一篇XCTF CRYPTO的WP中有提到，具体内容可以访问上一篇：</p>
<p><a href="http://zkinghar.top/?p=463">XCTF-CRYPTO-新手区 writeup</a></p>
</blockquote>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-91.png" alt="img">题目描述</p>
<p>没有太多有用的信息，一如既往</p>
<p>下载附件，并查看附件：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-92.png" alt="img">题目描述</p>
<p>应该是比较简单的RSA题目，这里就是求解一下逆元。</p>
<p>这里写一个脚本进行求解：（使用到了gmpy2库）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2

p <span style="color:#f92672">=</span> <span style="color:#ae81ff">473398607161</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">4511491</span>
n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">17</span>

ni <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">if</span>(gmpy2<span style="color:#f92672">.</span>is_prime(n)):
    ni <span style="color:#f92672">=</span> n<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">else</span>:
    ni <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)

d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,ni)
print(d)
</code></pre></div><p>执行脚本，得到运算出的d：125631357777427553</p>
<p>故flag是flag{125631357777427553}</p>
<p>本题主要考察RSA加密算法的简单应用，简单题。</p>
<h2 id="丢失的md5">丢失的MD5</h2>
<p>这道题目，应该是和MD5相关</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-93.png" alt="img"></p>
<p>题目描述</p>
<p>一如既往，没有什么东西</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-94.png" alt="img">附件内容</p>
<p>发现是一个python文件，尝试执行一下这个python代码</p>
<p>获得一段数据：e9032994dabac08080091151380478a2</p>
<p>这段数据是不是flag呢？</p>
<p>康一康源代码吧：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> hashlib
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>,<span style="color:#ae81ff">127</span>):
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>,<span style="color:#ae81ff">127</span>):
        <span style="color:#66d9ef">for</span> k <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">32</span>,<span style="color:#ae81ff">127</span>):
            m<span style="color:#f92672">=</span>hashlib<span style="color:#f92672">.</span>md5()
            m<span style="color:#f92672">.</span>update(<span style="color:#e6db74">&#39;TASC&#39;</span><span style="color:#f92672">+</span>chr(i)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;O3RJMV&#39;</span><span style="color:#f92672">+</span>chr(j)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;WDJKX&#39;</span><span style="color:#f92672">+</span>chr(k)<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;ZM&#39;</span>)
            des<span style="color:#f92672">=</span>m<span style="color:#f92672">.</span>hexdigest()
            <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#39;e9032&#39;</span> <span style="color:#f92672">in</span> des <span style="color:#f92672">and</span> <span style="color:#e6db74">&#39;da&#39;</span> <span style="color:#f92672">in</span> des <span style="color:#f92672">and</span> <span style="color:#e6db74">&#39;911513&#39;</span> <span style="color:#f92672">in</span> des:
                print des
</code></pre></div><p>源代码中找不到有关flag的相关信息，（这题好难呀），那flag很可能就是python的运行结果</p>
<p>尝试加工一下运行数据：flag{e9032994dabac08080091151380478a2}</p>
<p>尝试提交一下flag，发现成功了（这题真简单）</p>
<p>本题考察python2代码的相关知识，签到题。（谁能想到运行结果就是flag呢？）</p>
<h2 id="alice与bob">Alice与Bob</h2>
<p>Alice和Bob是密码学中经常使用来进行密码描述的人物名称，所以这道题目可能是加密相关。不过，也推断不出更多的信息。</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-95.png" alt="img"></p>
<p>题目描述</p>
<p>题目描述终于是有用了，看样子，这道题目也是一道签到题目。</p>
<p>将题目描述进行提炼即可解密：</p>
<ol>
<li>98554799767,请分解为两个素数</li>
<li>分解后，小的放前面，大的放后面，合成一个新的数字</li>
<li>进行md5的32位小写哈希，提交答案</li>
<li>得到的 flag 请包上 flag{} 提交</li>
</ol>
<p>根据步骤一步一步的来就好</p>
<p>首先需要进行大数分解，这里使用sagemath进行大数分解：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-97.png" alt="img"></p>
<p>得到两个素数101999和966233</p>
<p>然后进行数字组合，小的放前面，大的放后面，即101999966233</p>
<p>然后进行md5加密，这里写一个简单的脚本进行MD5加密（对脚本的热爱）：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> hashlib
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;101999966233&#34;</span>
m <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5()
m<span style="color:#f92672">.</span>update(plainer)
cipher <span style="color:#f92672">=</span> m<span style="color:#f92672">.</span>hexdigest()

print cipher
</code></pre></div><p>执行脚本，得到md5加密的结果：d450209323a847c8d01c6be47c81811a</p>
<p>对MD5的加密结果进行修饰：flag{d450209323a847c8d01c6be47c81811a}</p>
<p>故flag就是flag{d450209323a847c8d01c6be47c81811a}</p>
<p>题目主要考察md5加密和大数分解，签到题</p>
<h2 id="rsarsa">rsarsa</h2>
<p>看题目应该也是考察RSA加密算法的题目</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-98.png" alt="img"></p>
<p>题目描述</p>
<p>没有什么有用的信息，也只是告诉了提交flag的数据格式</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-99.png" alt="img">附件内容</p>
<p>应该是RSA数学计算的题目类型</p>
<p>提炼出附件内容中给到的重要数据：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483
q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407
e = 65537
c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034
</code></pre></div><p>这里使用一个脚本来解决问题：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> gmpy2

p <span style="color:#f92672">=</span> <span style="color:#ae81ff">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span>
q <span style="color:#f92672">=</span> <span style="color:#ae81ff">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span>
e <span style="color:#f92672">=</span> <span style="color:#ae81ff">65537</span>
c <span style="color:#f92672">=</span> <span style="color:#ae81ff">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>

n <span style="color:#f92672">=</span> p<span style="color:#f92672">*</span>q
<span style="color:#66d9ef">if</span>(gmpy2<span style="color:#f92672">.</span>is_prime(n)):
    ni <span style="color:#f92672">=</span> n <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">else</span>:
    ni <span style="color:#f92672">=</span> (p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)

d <span style="color:#f92672">=</span> gmpy2<span style="color:#f92672">.</span>invert(e,ni)
m <span style="color:#f92672">=</span> pow(c,d,n)

print(m)
</code></pre></div><p>运行一下脚本，得到数据：5577446633554466577768879988</p>
<p>对得到的数据进行修饰：flag{5577446633554466577768879988}</p>
<p>故flag就是flag{5577446633554466577768879988}</p>
<p>本题主要考察RSA加密算法相关知识，简单题</p>
<h2 id="大帝的密码武器">大帝的密码武器</h2>
<p>看到题目，感觉有点意思，但是暂时联想不到有用的信息</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-100.png" alt="img"></p>
<p>一如既往，题目描述不能给到太多的信息，仅仅只给到了提交flag的数据格式</p>
<p>下载附件：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-101.png" alt="img">附件</p>
<p>附件是个zip文件，无法打开，尝试修改文件扩展名为zip：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-102.png" alt="img"></p>
<p>打开zip文件：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-103.png" alt="img"></p>
<p>发现有两个文件，依次打开两个文件：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-104.png" alt="img">附件内容</p>
<p>一个题目tip信息，一个需要进行解密的密文</p>
<p>题目tip如下：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">公元前一百年，在罗马出生了一位对世界影响巨大的人物，他生前是罗马三巨头之一。他率先使用了一种简单的加密函，因此这种加密方法以他的名字命名。
 以下密文被解开后可以获得一个有意义的单词：FRPHEVGL
 你可以用这个相同的加密向量加密附件中的密文，作为答案进行提交。
</code></pre></div><p>根据描述，罗马三巨头应该自然而然就联想到了凯撒加密。</p>
<p>这里先使用一个脚本解决位移向量问题：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">dict_list <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
    dict_list<span style="color:#f92672">.</span>append(chr(ord(<span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">+</span>i))

cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;FRPHEVGL&#34;</span><span style="color:#f92672">.</span>lower()

<span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>n)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]
        <span style="color:#66d9ef">else</span>:
            plainer <span style="color:#f92672">+=</span> i

    print(plainer<span style="color:#f92672">+</span><span style="color:#e6db74">&#34; index:&#34;</span><span style="color:#f92672">+</span>str(n))
</code></pre></div><p>执行脚本，得到数据：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">frphevgl index:0
eqogdufk index:1
dpnfctej index:2
comebsdi index:3
bnldarch index:4
amkczqbg index:5
zljbypaf index:6
ykiaxoze index:7
xjhzwnyd index:8
wigyvmxc index:9
vhfxulwb index:10
ugewtkva index:11
tfdvsjuz index:12
security index:13
rdbtqhsx index:14
qcaspgrw index:15
pbzrofqv index:16
oayqnepu index:17
nzxpmdot index:18
mywolcns index:19
lxvnkbmr index:20
kwumjalq index:21
jvtlizkp index:22
iuskhyjo index:23
htrjgxin index:24
gsqifwhm index:25
</code></pre></div><p>发现位移13是一个有意义的单词：<code>security index:13</code></p>
<p>再写一个小脚本求解密文：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ComeChina&#34;</span><span style="color:#f92672">.</span>lower()
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">caesar</span>(n,cipher):
    dict_list <span style="color:#f92672">=</span> []
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
        dict_list<span style="color:#f92672">.</span>append(chr(ord(<span style="color:#e6db74">&#39;a&#39;</span>)<span style="color:#f92672">+</span>i))
    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>n)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]
        <span style="color:#66d9ef">else</span>:
            plainer <span style="color:#f92672">+=</span> i

    <span style="color:#66d9ef">return</span> plainer

print caesar(<span style="color:#ae81ff">13</span>,cipher)
</code></pre></div><p>执行脚本，获得数据：pbzrpuvan</p>
<p>对得到的数据进行修饰：flag{pbzrpuvan}</p>
<p>故flag就是flag{pbzrpuvan}</p>
<p>本题主要考察Caesar加密的相关知识，简单题</p>
<h2 id="windows系统密码">Windows系统密码</h2>
<p>Windows系统密码，根据本菜鸡的知识Windows密码也是使用hash的方式进行加密的，所以本题应该也是在考察hash密码的破解。</p>
<p>点开题目描述：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-105.png" alt="img"></p>
<p>题目描述</p>
<p>一如既往，没有什么有用的信息</p>
<p>下载附件，查看附件内容：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-106.png" alt="img">附件内容</p>
<p>附件给出了4对哈希值：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
 ctf:1002:06af9108f2e1fecf144e2e8adef09efd:a7fcb22a88038f35a8f39d503e7f0062:::
 Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
 SUPPORT_388945a0:1001:aad3b435b51404eeaad3b435b51404ee:bef14eee40dffbc345eeb3f58e290d56:::
</code></pre></div><p>这里解密去<a href="https://cmd5.com/">cmd5</a>网站进行解密，经过反复尝试发现只有</p>
<p>a7fcb22a88038f35a8f39d503e7f0062可以解密出hash数值：</p>
<p><img src="/images/BUUCTF-CRYPTO-%5B1-16%5D_writeup/image-107.png" alt="img"></p>
<p>hash解密结果就是：good-luck</p>
<p>对hash解密结果进行修饰：flag{good-luck}</p>
<p>故flag就是flag{good-luck}</p>
<p>本题主要考察Windows系统的数据加密方式，简单题</p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://wiwiki.kfd.me/wiki/MD5">MD5-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E7%99%BE%E5%88%86%E5%8F%B7%E7%BC%96%E7%A0%81#%E5%AF%B9%E6%9C%AA%E4%BF%9D%E7%95%99%E5%AD%97%E7%AC%A6%E7%9A%84%E7%99%BE%E5%88%86%E5%8F%B7%E7%BC%96%E7%A0%81">百分号编码-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E7%A4%BE%E4%BC%9A%E5%B7%A5%E7%A8%8B%E5%AD%A6">社会工程学-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E4%B8%B2%E6%B5%81%E5%8A%A0%E5%AF%86%E6%B3%95">流密码-维基百科</a></li>
<li><a href="https://zhuanlan.kanxue.com/article-391.htm">Rabbit流密码</a></li>
<li>[张振广,胡予濮,王璐.流密码Rabbit的安全性分析<a href="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFD2011&amp;filename=JSJA201102025&amp;v=m%25mmd2BEiEfT6K6g4XiqkBrHZV8%25mmd2BQ3%25mmd2FWgalODChICHN0Kg3Z7tvJfyIonq%25mmd2BnnJbBSP3Jb">J].计算机科学,2011,38(02):100-102.</a></li>
</ol>
<p>BUUCTF前面的题目偏向简单题目和签到题目，大多数都在考察古典密码，对称密码的相关知识。</p>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>XCTF CRYPTO novice_writeup</title>
            <link>https://zcodetea.github.io/posts/xctf-crypto-novice_writeup/</link>
            <pubDate>Fri, 25 Jun 2021 22:01:32 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/xctf-crypto-novice_writeup/</guid>
            <description>这次又是XCTF平台，没错，我又来无聊谈谈解题了
首先先来一张XCTF的首页图片，来开启本次的writeup文章：
xctf首页
这次我们要搞哪些题目的思路呢？这次还是新手区，不过是不一样的新手局，这回盘一盘密码学。
crypto新手区题目
题目数量不变，依然是12道题目：
 base64 Caesar Morse 幂数加密 Railfence 不仅仅是Morse 混合编码 easy_RSA easychallenge 转轮机加密 Normal_RSA esay_ECC  在开始进行密码学的题目问题思路分析的开始之前，首先进行一部分知识的了解。
密码学的CTF题目通常都是以附件形式来进行考察的。不像网页需要进入到平台设定的docker靶机中
CTF中密码学题目目前的趋势是越来越难，而且分值越来越高。密码学的题目往往分为编码题目和密码学题目，而密码学题目又会分为古典密码学题目和现代密码学题目。
密码学早在公元前400多年就已经产生，人类使用密码的历史几乎与使用文字的时间一样长，密码学的发展大致可以分为 3 个阶段: 1949 年之前的古典密码学阶段; 1949 年至 1975 年密码学成为科学的分支; 1976 年以后对称密钥密码算法得到进一步发展，产生了密码学的新方向—公钥密码学。1976 年，W.Diffie 和 M.Hellman 在发表的文章“密码学的新方向”中首次公开提出了公钥密码( Public-key Cryptography) 的概念。公钥密码的提出实现了加密密钥和解密密钥之间的独立，解决了对称密码体制中通信双方必须共享密钥的问题，在密码学界具有划时代的意义。[1]
CTF中的编码题目往往会考察一些常用的编码类型，当然也会出现一些比较偏的编码方式进行编码。
常用的编码方式有：ASCii编码，Base64编码，Bin编码，Hex编码，URL编码以及HTML编码。
CTF中的古典密码学题目可以通过查找相关的密码学算法来了解与密码学相关内容的更多信息，通过网络方式进行解决，或者获取一些灵感。古典密码学经常会考察最基础的凯撒密码，栅栏密码，或者替换密码。这些古典密码学的处理思路和方式都比较相似，而且网络已经有很多处理这些密码的算法工具来进行加密和解密。
CTF中的现代密码学题目主要会考察RSA加密算法，ECC加密算法等经典的现代密码学算法。也会有一些新的加密算法题目，这种题目往往需要进行算法分析，通过加密算法的语法逻辑来设计解密算法通过逆元的思维求出明文。
关于密码学的更多内容，可以访问：http://eol.sicau.edu.cn:8080/ 来了解更多密码学相关的内容。
下面就开始本回的题目！
base64 看到这道题目，猜想这道题目可能是考察base64编码方式的密码学题目
进入道题目页面，看看是否可以得到一点tip：
base64题目
没有什么特别的tip，只是给题目一个情景化的描述，没有太多有用信息的描述。
直接下载附件内容，并打开附件文件进行查看：
附件文件
文件内容有一段字符型文字：Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9
根据题目的内容，尝试使用一下base64进行解码，可以使用在线的解码工具，也可以使用python脚本进行解码。这里编写简单的python脚本进行解码：
# python3 脚本 import base64 cipher=&amp;#39;Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9&amp;#39; plainer= base64.b64decode(cipher) print(str(plainer,&amp;#39;utf-8&amp;#39;)) # python2 脚本 import base64 cipher=&amp;#39;Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9&amp;#39; plainer= base64.</description>
            <content type="html"><![CDATA[<p>这次又是XCTF平台，没错，我又来无聊谈谈解题了</p>
<p>首先先来一张XCTF的首页图片，来开启本次的writeup文章：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-86.png" alt="image-86"></p>
<p>xctf首页</p>
<p>这次我们要搞哪些题目的思路呢？这次还是新手区，不过是不一样的新手局，这回盘一盘密码学。</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-87.png" alt="image-87"></p>
<p>crypto新手区题目</p>
<p>题目数量不变，依然是12道题目：</p>
<ul>
<li>base64</li>
<li>Caesar</li>
<li>Morse</li>
<li>幂数加密</li>
<li>Railfence</li>
<li>不仅仅是Morse</li>
<li>混合编码</li>
<li>easy_RSA</li>
<li>easychallenge</li>
<li>转轮机加密</li>
<li>Normal_RSA</li>
<li>esay_ECC</li>
</ul>
<p>在开始进行密码学的题目问题思路分析的开始之前，首先进行一部分知识的了解。</p>
<p>密码学的CTF题目通常都是以附件形式来进行考察的。不像网页需要进入到平台设定的docker靶机中</p>
<p>CTF中密码学题目目前的趋势是越来越难，而且分值越来越高。密码学的题目往往分为编码题目和密码学题目，而密码学题目又会分为古典密码学题目和现代密码学题目。</p>
<p>密码学早在公元前400多年就已经产生，人类使用密码的历史几乎与使用文字的时间一样长，密码学的发展大致可以分为 3 个阶段: 1949 年之前的古典密码学阶段; 1949 年至 1975 年密码学成为科学的分支; 1976 年以后对称密钥密码算法得到进一步发展，产生了密码学的新方向—公钥密码学。1976 年，W.Diffie 和 M.Hellman 在发表的文章“密码学的新方向”中首次公开提出了公钥密码( Public-key Cryptography) 的概念。公钥密码的提出实现了加密密钥和解密密钥之间的独立，解决了对称密码体制中通信双方必须共享密钥的问题，在密码学界具有划时代的意义。[1]</p>
<p>CTF中的编码题目往往会考察一些常用的编码类型，当然也会出现一些比较偏的编码方式进行编码。</p>
<p>常用的编码方式有：ASCii编码，Base64编码，Bin编码，Hex编码，URL编码以及HTML编码。</p>
<p>CTF中的古典密码学题目可以通过查找相关的密码学算法来了解与密码学相关内容的更多信息，通过网络方式进行解决，或者获取一些灵感。古典密码学经常会考察最基础的凯撒密码，栅栏密码，或者替换密码。这些古典密码学的处理思路和方式都比较相似，而且网络已经有很多处理这些密码的算法工具来进行加密和解密。</p>
<p>CTF中的现代密码学题目主要会考察RSA加密算法，ECC加密算法等经典的现代密码学算法。也会有一些新的加密算法题目，这种题目往往需要进行算法分析，通过加密算法的语法逻辑来设计解密算法通过逆元的思维求出明文。</p>
<p>关于密码学的更多内容，可以访问：http://eol.sicau.edu.cn:8080/ 来了解更多密码学相关的内容。</p>
<p>下面就开始本回的题目！</p>
<h2 id="base64">base64</h2>
<p>看到这道题目，猜想这道题目可能是考察base64编码方式的密码学题目</p>
<p>进入道题目页面，看看是否可以得到一点tip：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image.png" alt="img">base64题目</p>
<p>没有什么特别的tip，只是给题目一个情景化的描述，没有太多有用信息的描述。</p>
<p>直接下载附件内容，并打开附件文件进行查看：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-1-1024x120.png" alt="img">附件文件</p>
<p>文件内容有一段字符型文字：Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9</p>
<p>根据题目的内容，尝试使用一下base64进行解码，可以使用在线的解码工具，也可以使用python脚本进行解码。这里编写简单的python脚本进行解码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python3 脚本</span>
<span style="color:#f92672">import</span> base64

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9&#39;</span>
plainer<span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(cipher)
print(str(plainer,<span style="color:#e6db74">&#39;utf-8&#39;</span>))
<span style="color:#75715e"># python2 脚本</span>
<span style="color:#f92672">import</span> base64

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9&#39;</span>
plainer<span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>b64decode(cipher)
print(plainer)
</code></pre></div><p>然后运行python脚本进行解码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">python base64_decode.py <span style="color:#75715e"># 这里创建的python2脚本文件名是base64_decode.py</span>

python3 base64_decode3.py <span style="color:#75715e"># 这里创建的python3脚本文件名是base64_decode3.py</span>
</code></pre></div><p>执行命令后查看执行结果</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-2.png" alt="img"></p>
<p>成功拿到flag数据，这道题目是道签到题。</p>
<p>这道题目主要考察base64编码知识，没有什么难度，就是一道签到题目。</p>
<h2 id="caesar">Caesar</h2>
<p>看到题目，自然就联系到Caesar cipher，翻译成中文就是凯撒密码。</p>
<p>所有解决这道题目的关键就是凯撒密码的密码逻辑了</p>
<p>凯撒密码（英语：Caesar cipher），或称凯撒加密、凯撒变换、变换加密，是一种最简单且最广为人知的加密技术。凯撒密码是一种替换加密技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。这个加密方法是以罗马共和时期凯撒的名字命名的，据称当年凯撒曾用此方法与其将军们进行联系。[2]</p>
<p>点开题目的页面，看看是否有些有用的信息</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-3-1024x301.png" alt="img">Caesar题目</p>
<p>从题目描述中依旧获取不到更多的信息，没有太多有用的信息可以帮助解题</p>
<p>直接下载附件并进行查看：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-4-1024x134.png" alt="img">附件内容</p>
<p>附件内容中，只有一段加密文字：oknqdbqmoq{kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz}</p>
<p>根据题目这应该是凯撒加密算法，可以使用在线的工具进行解密，也可以使用python脚本进行解决，这里使用python脚本进行解密：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2脚本</span>
dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;oknqdbqmoq</span><span style="color:#e6db74">{kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz}</span><span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>j)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]

        <span style="color:#66d9ef">else</span>:
            plainer <span style="color:#f92672">+=</span> i
    print plainer
<span style="color:#75715e"># pyhton3脚本</span>
dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;oknqdbqmoq</span><span style="color:#e6db74">{kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz}</span><span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">26</span>):
    plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher:
        <span style="color:#66d9ef">if</span> i <span style="color:#f92672">in</span> dict_list:
            plainer <span style="color:#f92672">+=</span> dict_list[(dict_list<span style="color:#f92672">.</span>index(i)<span style="color:#f92672">-</span>j)<span style="color:#f92672">%</span><span style="color:#ae81ff">26</span>]

        <span style="color:#66d9ef">else</span>:
            plainer <span style="color:#f92672">+=</span> i
    print(plainer)
</code></pre></div><p>这道题目的python2和python3脚本差别不大，虽然密码学的大多数题目还是推荐使用python2进行编写，但是对于使用sagemath的密码学题目，python3还是比较适合。下面运行python脚本：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2 </span>
python Caesar_decode<span style="color:#f92672">.</span>py
<span style="color:#75715e"># python3</span>
python3 Caesar_decode3<span style="color:#f92672">.</span>py
</code></pre></div><p>查看终端显示的运行结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-5.png" alt="img">运行结果</p>
<p>从运行结果发现：cyberpeace{you_have_learned_caesar_encryption} 应该是有明显含义的解密的文段，很可能是这道题目的flag。尝试进行提交，发现这段数据就是flag数据。</p>
<p>这道题目解决，题目没有什么难度，算是签到题。</p>
<p>题目主要考察凯撒密码的相关知识，非常直接的解密方法，没有什么难度。</p>
<h2 id="morse">Morse</h2>
<p>看到题目Morse，自然而然便联想到了摩尔斯电码。这道题目有可能是在考察摩尔斯电码。</p>
<p>点开题目页面，看看题目描述中会有什么有用的信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-6-1024x280.png" alt="img">Morse题目</p>
<p>题目描述依然是大片无用的信息，但是最后提示了提交flag的格式和内容要求。</p>
<p>直接打开附件并进行查看需要进行解密的内容：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-7-1024x101.png" alt="img">附件内容</p>
<p>文件内容非常像bin方式的加密，但是考虑到题目Morse，应该是Morse电码方式的加密</p>
<p>首先，需要了解什么摩尔斯电码：</p>
<p>摩尔斯电码（英语：Morse code）是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。是由美国人艾尔菲德·维尔与萨缪尔·摩尔斯在1836年发明。[3]</p>
<p>摩尔斯电码是一种早期的数字化通信形式，但是它不同于现代只使用0和1两种状态的二进制代码，它的代码包括五种：</p>
<ol>
<li>点（·）：1</li>
<li>划（-）：111</li>
<li>字符内部的停顿（在点和划之间）：0</li>
<li>字符之间的停顿：000</li>
<li>单词之间的停顿：0000000</li>
</ol>
<p>根据摩尔斯电码的知识点，这道题目可以使用在线工具进行解密，也可以使用python脚本进行解密。这里使用python脚本进行解密：</p>
<blockquote>
<p>这里的密文文段和摩尔斯代码的文段不太一致，需要进行一下代换。这里使用 1 代表 - ，0 代表 ·</p>
<p>来进行摩尔斯电码的解密算法的设计和编写。</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2脚本</span>
dict_list <span style="color:#f92672">=</span> {
             <span style="color:#e6db74">&#39;01&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
             <span style="color:#e6db74">&#39;1000&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
             <span style="color:#e6db74">&#39;1010&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
             <span style="color:#e6db74">&#39;100&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
             <span style="color:#e6db74">&#39;0&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
             <span style="color:#e6db74">&#39;0010&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
             <span style="color:#e6db74">&#39;110&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
             <span style="color:#e6db74">&#39;0000&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>,
             <span style="color:#e6db74">&#39;00&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
             <span style="color:#e6db74">&#39;0111&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
             <span style="color:#e6db74">&#39;101&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
             <span style="color:#e6db74">&#39;0100&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
             <span style="color:#e6db74">&#39;11&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
             <span style="color:#e6db74">&#39;10&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
             <span style="color:#e6db74">&#39;111&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>,
             <span style="color:#e6db74">&#39;0110&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,
             <span style="color:#e6db74">&#39;1101&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
             <span style="color:#e6db74">&#39;010&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
             <span style="color:#e6db74">&#39;000&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
             <span style="color:#e6db74">&#39;1&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
             <span style="color:#e6db74">&#39;001&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
             <span style="color:#e6db74">&#39;0001&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
             <span style="color:#e6db74">&#39;011&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
             <span style="color:#e6db74">&#39;1001&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>,
             <span style="color:#e6db74">&#39;1011&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
             <span style="color:#e6db74">&#39;1100&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>
             }

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110&#34;</span>
plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>

cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
    plainer <span style="color:#f92672">+=</span> dict_list[i]

print plainer
<span style="color:#75715e"># python3脚本</span>
dict_list <span style="color:#f92672">=</span> {
             <span style="color:#e6db74">&#39;01&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
             <span style="color:#e6db74">&#39;1000&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
             <span style="color:#e6db74">&#39;1010&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
             <span style="color:#e6db74">&#39;100&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
             <span style="color:#e6db74">&#39;0&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
             <span style="color:#e6db74">&#39;0010&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
             <span style="color:#e6db74">&#39;110&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
             <span style="color:#e6db74">&#39;0000&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>,
             <span style="color:#e6db74">&#39;00&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
             <span style="color:#e6db74">&#39;0111&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
             <span style="color:#e6db74">&#39;101&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
             <span style="color:#e6db74">&#39;0100&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
             <span style="color:#e6db74">&#39;11&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
             <span style="color:#e6db74">&#39;10&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
             <span style="color:#e6db74">&#39;111&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>,
             <span style="color:#e6db74">&#39;0110&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,
             <span style="color:#e6db74">&#39;1101&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
             <span style="color:#e6db74">&#39;010&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
             <span style="color:#e6db74">&#39;000&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
             <span style="color:#e6db74">&#39;1&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
             <span style="color:#e6db74">&#39;001&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
             <span style="color:#e6db74">&#39;0001&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
             <span style="color:#e6db74">&#39;011&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
             <span style="color:#e6db74">&#39;1001&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>,
             <span style="color:#e6db74">&#39;1011&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
             <span style="color:#e6db74">&#39;1100&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>
             }

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110&#34;</span>
plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>

cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34; &#34;</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
    plainer <span style="color:#f92672">+=</span> dict_list[i]

print(plainer)
</code></pre></div><p>这道题目的python2和python3的求解脚本差别也不是非常大，执行脚本后直接查看执行结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-8.png" alt="img">执行结果</p>
<p>发现执行结果是一句有意义的句子，应该就是flag数据了。然后再利用题目描述所说的信息对执行出来的flag数据进行个加帽处理：cyberpeace{morsecodeissointeresting}</p>
<p>题目解决，题目也是签到题，没有什么难度。</p>
<p>题目主要考察了摩尔斯电码的解密方法，以及摩尔斯电码相关知识，签到题。</p>
<h2 id="幂数加密">幂数加密</h2>
<p>看到题目的时候有些懵逼，本菜鸡不太了解什么的是幂数加密，于是只能求助一下搜索引擎。</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-9.png" alt="img">二进制幂数加密-百度百科</p>
<p>好像是一个加密方法，这种加密方法大致逻辑是：</p>
<ol>
<li>将明文对应字母序列</li>
<li>对字母序列进行处理加密</li>
<li>使用间隔符进行间隔</li>
<li>获得密文</li>
</ol>
<p>现在知道这种加密方法，点开题目的描述看看是否可以获取到更多的信息</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-10-1024x284.png" alt="img">幂数加密题目</p>
<p>题目描述中仅仅告诉了需要提交的flag格式，和flag数据类型。题目描述的其他信息都是无用的信息。</p>
<p>将附件下载下来并查看附件中的密文信息内容：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-11-1024x69.png" alt="img">附件资料</p>
<p>发现密文数据不太对劲呀，二进制幂数加密的数据都是01234的形式，这个密文的形式是01248的形式</p>
<p>于是作为菜鸡的我只能去再次求助于搜索引擎了，查到了云影密码：</p>
<h3 id="01248云影密码">01248云影密码</h3>
<p>原理：有1，2，4，8这四个数字，可以通过加法来用这四个数字表示0-9中的任何一个数字，列如0=28， 也就是0=2+8，同理7=124， 9=18。这样之后再用1-26来表示26个英文字母，就有了密文与明文之间的对应关系。引入0来作为间隔，以免出现混乱。所以云影密码又叫“01248密码”。[4]</p>
<p>看来密文是云影密码没错了，由于云影密码是比较少见的密码，而是加密逻辑比较简单，网络上几乎没有什么可用的在线工具。这道题目可以使用手工解密，也可以使用python脚本进行解密。这里使用python脚本进行解密：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;8842101220480224404014224202480122&#34;</span>
cipher_array <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;0&#34;</span>)
cipher_arr <span style="color:#f92672">=</span> []
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_array:
    k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(i)):
        k <span style="color:#f92672">+=</span> int(i[j])
    cipher_arr<span style="color:#f92672">.</span>append(k)
<span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> cipher_arr:
    flag <span style="color:#f92672">+=</span> dict_list[m<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

print flag
<span style="color:#75715e"># python3</span>
dict_list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>,<span style="color:#e6db74">&#39;b&#39;</span>,<span style="color:#e6db74">&#39;c&#39;</span>,<span style="color:#e6db74">&#39;d&#39;</span>,<span style="color:#e6db74">&#39;e&#39;</span>,<span style="color:#e6db74">&#39;f&#39;</span>,<span style="color:#e6db74">&#39;g&#39;</span>,<span style="color:#e6db74">&#39;h&#39;</span>,<span style="color:#e6db74">&#39;i&#39;</span>,<span style="color:#e6db74">&#39;j&#39;</span>,<span style="color:#e6db74">&#39;k&#39;</span>,<span style="color:#e6db74">&#39;l&#39;</span>,<span style="color:#e6db74">&#39;m&#39;</span>,<span style="color:#e6db74">&#39;n&#39;</span>,<span style="color:#e6db74">&#39;o&#39;</span>,<span style="color:#e6db74">&#39;p&#39;</span>,<span style="color:#e6db74">&#39;q&#39;</span>,<span style="color:#e6db74">&#39;r&#39;</span>,<span style="color:#e6db74">&#39;s&#39;</span>,<span style="color:#e6db74">&#39;t&#39;</span>,<span style="color:#e6db74">&#39;u&#39;</span>,<span style="color:#e6db74">&#39;v&#39;</span>,<span style="color:#e6db74">&#39;w&#39;</span>,<span style="color:#e6db74">&#39;x&#39;</span>,<span style="color:#e6db74">&#39;y&#39;</span>,<span style="color:#e6db74">&#39;z&#39;</span>]

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;8842101220480224404014224202480122&#34;</span>
cipher_array <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;0&#34;</span>)
cipher_arr <span style="color:#f92672">=</span> []
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_array:
    k <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    <span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> range(len(i)):
        k <span style="color:#f92672">+=</span> int(i[j])
    cipher_arr<span style="color:#f92672">.</span>append(k)
<span style="color:#66d9ef">for</span> m <span style="color:#f92672">in</span> cipher_arr:
    flag <span style="color:#f92672">+=</span> dict_list[m<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]

print(flag)
</code></pre></div><p>执行python脚本并查看终端输出的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-12.png" alt="img"></p>
<p>获取到明文，然后对明文加个flag数据形式的帽子并进行字母大写：cyberpeace{WELLDONE}</p>
<p>这道题目解决，题目属于签到题，没有什么难度</p>
<p>这道题目主要考察幂数加密的知识，（云影密码的设计逻辑其实和幂数加密相似，只是在设计过程进行了修改。）题目难度比较低·，签到题。</p>
<h2 id="railfence">Railfence</h2>
<p>看到题目大致知道考察的是什么密码的加密算法了，题目是栅栏，应该就是栅栏密码的密码知识考察</p>
<p>什么是栅栏密码呢？</p>
<p>所谓栅栏密码，就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。（一般不超过30个，也就是一、两句话）。加密原理：</p>
<ol>
<li>把将要传递的信息中的字母交替排成上下两行。</li>
<li>再将下面一行字母排在上面一行的后边，从而形成一段密码。[5]</li>
</ol>
<p>栅栏密码大致就是一种分组密码的一种密码算法，便于更好理解栅栏密码，这里有一个例子：</p>
<p>明文：THE LONGEST DAY MUST HAVE AN END5</p>
<p>加密：</p>
<ol>
<li>把将要传递的信息中的字母交替排成上下两行。
T E O G S D Y U T A E N N
H L N E T A M S H V A E D</li>
<li>密文：将下面一行字母排在上面一行的后边。
TEOGSDYUTAENN HLNETAMSHVAED</li>
</ol>
<p>解密：</p>
<p>先将密文分为两行</p>
<p>T E O G S D Y U T A E N N</p>
<p>H L N E T A M S H V A E D</p>
<p>再按上下上下的顺序组合成一句话明文：</p>
<p>THE LONGEST DAY MUST HAVE AN EN</p>
<p>现在知识也大致了解了，点开题目揭开这道题目的真实面目吧！</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-13-1024x266.png" alt="img">Railfence题目</p>
<p>题目描述中也暗示了是栅栏密码的信息</p>
<p>于是直接下载附件，看看附件中的描述内容密文究竟是啥样：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-14-1024x120.png" alt="img">附件内容</p>
<p>密文形式看样子像是解密出来直接就是flag数据。</p>
<p>这道题目可以使用在线工具进行解密，也可以使用python脚本进行解密。这里还是一如既往，使用python脚本进行解密：（这道题目比较狗，是W型的栅栏密码解密）</p>
<blockquote>
<p>栅栏密码有两种类型：一种是传统型栅栏密码，一种是W型栅栏密码，W型栅栏密码比较复杂。</p>
</blockquote>
<p>传统型栅栏密码脚本：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decrype</span>(cipher,key):
    cipher_len <span style="color:#f92672">=</span> len(cipher)
    <span style="color:#66d9ef">if</span> cipher_len<span style="color:#f92672">%</span>key <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">/</span> key
    <span style="color:#66d9ef">else</span>:
        key <span style="color:#f92672">=</span> cipher_len <span style="color:#f92672">/</span> key <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
    result <span style="color:#f92672">=</span> {x:<span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> range(key)}
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(cipher_len):
        a <span style="color:#f92672">=</span> i<span style="color:#f92672">%</span>key;
        result<span style="color:#f92672">.</span>update({a:result[a]<span style="color:#f92672">+</span>cipher[i]})
    plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(key):
        plainer <span style="color:#f92672">=</span> plainer <span style="color:#f92672">+</span> result[i]
    print plainer

cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;TEOGSDYUTAENNHLNETAMSHVAED&#34;</span>
<span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">10</span>):
    decrype(cipher,n)
</code></pre></div><p>W型栅栏密码脚本：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">fence</span>(lst, numrails):
    fence <span style="color:#f92672">=</span> [[<span style="color:#66d9ef">None</span>] <span style="color:#f92672">*</span> len(lst) <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> range(numrails)]
    rails <span style="color:#f92672">=</span>list(range(numrails <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>))<span style="color:#f92672">+</span> list(range(numrails <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>))
    <span style="color:#66d9ef">for</span> n, x <span style="color:#f92672">in</span> enumerate(lst):
        fence[rails[n <span style="color:#f92672">%</span> len(rails)]][n] <span style="color:#f92672">=</span> x
    <span style="color:#66d9ef">return</span> [c <span style="color:#66d9ef">for</span> rail <span style="color:#f92672">in</span> fence <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> rail <span style="color:#66d9ef">if</span> c <span style="color:#f92672">is</span> <span style="color:#f92672">not</span> <span style="color:#66d9ef">None</span>]

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode</span>(text, n):
    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(fence(text, n))

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode</span>(text, n):
    rng <span style="color:#f92672">=</span> range(len(text))
    pos <span style="color:#f92672">=</span> fence(rng, n)
    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;&#39;</span><span style="color:#f92672">.</span>join(text[pos<span style="color:#f92672">.</span>index(n)] <span style="color:#66d9ef">for</span> n <span style="color:#f92672">in</span> rng)

z <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ccehgyaefnpeoobe</span><span style="color:#e6db74">{lcirg}</span><span style="color:#e6db74">epriec_ora_g&#34;</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">10</span>):
    y <span style="color:#f92672">=</span> decode(z,i)
    print(y) 
</code></pre></div><p>这道题目是W型的栅栏密码，这里使用W型栅栏密码的脚本进行破解：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-15.png" alt="img"></p>
<p>成功跑出flag数据：cyberpeace{railfence_cipher_gogogo}</p>
<p>题目解决，这道题目属于简单题目</p>
<p>题目主要考察对栅栏密码的知识全面性考察，如果知识不全面可能会有一点绕，不容易解出。难度算是简单题目。</p>
<h2 id="不仅仅是morse">不仅仅是Morse</h2>
<p>看题目应该知道这道题目不是非常简单的样子，应该是一个复合加密的题目，就是涉及多种加密算法的加密。</p>
<p>点开题目页面，希望可以获取到更多关于题目的tip：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-16-1024x205.png" alt="img">题目页面</p>
<p>题目描述中有两个重要的tip信息：flag的数据格式和flag是一种食物的单词。对于解题有主要作用的是flag数据是一种食物的单词。</p>
<p>下面打开附件，进行解密：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-17.png" alt="img">附件内容</p>
<p>看来是一个摩尔斯电码的加密：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">--/.-/-.--/..--.-/-..././..--.-/..../.-/...-/./..--.-/.-/-./---/-/...././.-./..--.-/-.././-.-./---/-.././..../..../..../..../.-/.-/.-/.-/.-/-.../.-/.-/-.../-.../-.../.-/.-/-.../-.../.-/.-/.-/.-/.-/.-/.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/.-/.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../-.../.-/.-/.-/-.../-.../.-/.-/-.../.-/.-/.-/.-/-.../.-/-.../.-/.-/-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/-.../-.../.-/.-/-.../-.../-.../.-/-.../.-/.-/.-/-.../.-/-.../.-/-.../-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../-.../.-/.-/-.../-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/-.../-.../.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/-.../-.../.-
</code></pre></div><p>首先先编写一个摩尔斯电码的解密脚本：（当然也可以使用在线的摩尔斯电码解密工具进行解密）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
dict_list <span style="color:#f92672">=</span> {
	<span style="color:#e6db74">&#39;.-&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
    <span style="color:#e6db74">&#39;-...&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
    <span style="color:#e6db74">&#39;-.-.&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
    <span style="color:#e6db74">&#39;-..&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
    <span style="color:#e6db74">&#39;.&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
    <span style="color:#e6db74">&#39;..-.&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
    <span style="color:#e6db74">&#39;--.&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
    <span style="color:#e6db74">&#39;....&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>,
    <span style="color:#e6db74">&#39;..&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
    <span style="color:#e6db74">&#39;.---&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
    <span style="color:#e6db74">&#39;-.-&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
    <span style="color:#e6db74">&#39;.-..&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
    <span style="color:#e6db74">&#39;--&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
    <span style="color:#e6db74">&#39;-.&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
    <span style="color:#e6db74">&#39;---&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>,
    <span style="color:#e6db74">&#39;.--.&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,
    <span style="color:#e6db74">&#39;--.-&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
    <span style="color:#e6db74">&#39;.-.&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
    <span style="color:#e6db74">&#39;...&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
    <span style="color:#e6db74">&#39;-&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
    <span style="color:#e6db74">&#39;..-&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
    <span style="color:#e6db74">&#39;...-&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
    <span style="color:#e6db74">&#39;.--&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
    <span style="color:#e6db74">&#39;-..-&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>,
    <span style="color:#e6db74">&#39;-.--&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
    <span style="color:#e6db74">&#39;--..&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>,
    <span style="color:#e6db74">&#39;..--.-&#39;</span>:<span style="color:#e6db74">&#39;_&#39;</span>
    }
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;--/.-/-.--/..--.-/-..././..--.-/..../.-/...-/./..--.-/.-/-./---/-/...././.-./..--.-/-.././-.-./---/-.././..../..../..../..../.-/.-/.-/.-/.-/-.../.-/.-/-.../-.../-.../.-/.-/-.../-.../.-/.-/.-/.-/.-/.-/.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/.-/.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../-.../.-/.-/.-/-.../-.../.-/.-/-.../.-/.-/.-/.-/-.../.-/-.../.-/.-/-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/-.../-.../.-/.-/-.../-.../-.../.-/-.../.-/.-/.-/-.../.-/-.../.-/-.../-.../.-/.-/.-/-.../-.../.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../-.../.-/.-/-.../-.../.-/.-/-.../.-/.-/-.../.-/.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/.-/-.../.-/-.../.-/.-/-.../-.../.-/-.../.-/.-/.-/.-/-.../-.../.-/-.../.-/.-/-.../-.../.-&#34;</span>
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
cipher_arr <span style="color:#f92672">=</span> cipher<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;/&#39;</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
	plainer <span style="color:#f92672">+=</span> dict_list[i]

print plainer
</code></pre></div><p>执行编写好的python脚本，并查看终端的返回结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-18.png" alt="img"></p>
<p>获得一段解密后的文段：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">may_be_have_another_decodehhhhaaaaabaabbbaabbaaaaaaaabaababaaaaaaabbabaaabbaaabbaabaaaababaabaaabbabaaabaaabaababbaabbbabaaabababbaaabbabaaabaabaabaaaabbabbaabbaabaabaaabaabaabaababaabbabaaaabbabaabba
</code></pre></div><p>仔细看看文段，好像出题人想要我们去解密后面那段ab组成的密文</p>
<p>那段密文形式没有见过，于是本菜鸡又去求助搜索引擎了。搜索发现是培根密码，正好于tip相对应了。那什么是培根密码呢？</p>
<p>培根密码，又名倍康尼密码（英语：Bacon&rsquo;s cipher）是由法兰西斯·培根发明的一种隐写术。</p>
<p>加密时，明文中的每个字母都会转换成一组五个英文字母。其转换依靠下表：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">a AAAAA   g AABBA    n ABBAA   t BAABA
b AAAAB   h AABBB    o ABBAB   u-v BAABB 
c AAABA   i-j ABAAA  p ABBBA   w BABAA
d AAABB   k ABAAB    q ABBBB   x BABAB
e AABAA   l ABABA    r BAAAA   y BABBA
f AABAB   m ABABB    s BAAAB   z BABBB
</code></pre></div><p>这只是一款最常用的加密表，有另外一款将每种字母配以不同的字母组予以转换，即I与J、U与V皆有不同编号。</p>
<p>加密者需使用两种不同字体，分别代表A和B。准备好一篇包含相同AB字数的假信息后，按照密文格式化假信息，即依密文中每个字母是A还是B分别套用两种字体。</p>
<p>解密时，将上述方法倒转。所有字体一转回A，字体二转回B，以后再按上表拼回字母。</p>
<p>法兰西斯·培根另外准备了一种方法，其将大小写分别看作A与B，可用于无法使用不同字体的场合（例如只能处理纯文本时）。但这样比起字体不同更容易被看出来，而且和语言对大小写的要求也不太兼容。</p>
<p>培根密码本质上是将二进制信息通过样式的区别，加在了正常书写之上。培根密码所包含的信息可以和用于承载其的文章完全无关。[6]</p>
<p>将摩尔斯电码解密出来的文段的后半部分取出作为密文，即：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">aaaaabaabbbaabbaaaaaaaabaababaaaaaaabbabaaabbaaabbaabaaaababaabaaabbabaaabaaabaababbaabbbabaaabababbaaabbabaaabaabaabaaaabbabbaabbaabaabaaabaabaabaababaabbabaaaabbabaabba
</code></pre></div><p>可以使用网上的培根密码工具进行解密也可以使用python脚本进行解密，这里使用python脚本进行解密：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
dict_list<span style="color:#f92672">=</span>{            
	<span style="color:#e6db74">&#39;aaaaa&#39;</span>:<span style="color:#e6db74">&#39;a&#39;</span>,
    <span style="color:#e6db74">&#39;aaaab&#39;</span>:<span style="color:#e6db74">&#39;b&#39;</span>,
    <span style="color:#e6db74">&#39;aaaba&#39;</span>:<span style="color:#e6db74">&#39;c&#39;</span>,
    <span style="color:#e6db74">&#39;aaabb&#39;</span>:<span style="color:#e6db74">&#39;d&#39;</span>,
    <span style="color:#e6db74">&#39;aabaa&#39;</span>:<span style="color:#e6db74">&#39;e&#39;</span>,
    <span style="color:#e6db74">&#39;aabab&#39;</span>:<span style="color:#e6db74">&#39;f&#39;</span>,
    <span style="color:#e6db74">&#39;aabba&#39;</span>:<span style="color:#e6db74">&#39;g&#39;</span>,
    <span style="color:#e6db74">&#39;aabbb&#39;</span>:<span style="color:#e6db74">&#39;h&#39;</span>, 
    <span style="color:#e6db74">&#39;abaaa&#39;</span>:<span style="color:#e6db74">&#39;i&#39;</span>,
    <span style="color:#e6db74">&#39;abaab&#39;</span>:<span style="color:#e6db74">&#39;j&#39;</span>,
    <span style="color:#e6db74">&#39;ababa&#39;</span>:<span style="color:#e6db74">&#39;k&#39;</span>,
    <span style="color:#e6db74">&#39;ababb&#39;</span>:<span style="color:#e6db74">&#39;l&#39;</span>,
    <span style="color:#e6db74">&#39;abbaa&#39;</span>:<span style="color:#e6db74">&#39;m&#39;</span>,
    <span style="color:#e6db74">&#39;abbab&#39;</span>:<span style="color:#e6db74">&#39;n&#39;</span>,
    <span style="color:#e6db74">&#39;abbba&#39;</span>:<span style="color:#e6db74">&#39;o&#39;</span>, 
    <span style="color:#e6db74">&#39;abbbb&#39;</span>:<span style="color:#e6db74">&#39;p&#39;</span>,  
    <span style="color:#e6db74">&#39;baaaa&#39;</span>:<span style="color:#e6db74">&#39;q&#39;</span>,
    <span style="color:#e6db74">&#39;baaab&#39;</span>:<span style="color:#e6db74">&#39;r&#39;</span>,
    <span style="color:#e6db74">&#39;baaba&#39;</span>:<span style="color:#e6db74">&#39;s&#39;</span>,
    <span style="color:#e6db74">&#39;baabb&#39;</span>:<span style="color:#e6db74">&#39;t&#39;</span>,
    <span style="color:#e6db74">&#39;babaa&#39;</span>:<span style="color:#e6db74">&#39;u&#39;</span>,
    <span style="color:#e6db74">&#39;babab&#39;</span>:<span style="color:#e6db74">&#39;v&#39;</span>,
    <span style="color:#e6db74">&#39;babba&#39;</span>:<span style="color:#e6db74">&#39;w&#39;</span>,
    <span style="color:#e6db74">&#39;babbb&#39;</span>:<span style="color:#e6db74">&#39;x&#39;</span>, 
    <span style="color:#e6db74">&#39;bbaaa&#39;</span>:<span style="color:#e6db74">&#39;y&#39;</span>,
    <span style="color:#e6db74">&#39;bbaab&#39;</span>:<span style="color:#e6db74">&#39;z&#39;</span>
    }
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;aaaaabaabbbaabbaaaaaaaabaababaaaaaaabbabaaabbaaabbaabaaaababaabaaabbabaaabaaabaababbaabbbabaaabababbaaabbabaaabaabaabaaaabbabbaabbaabaabaaabaabaabaababaabbabaaaabbabaabba&#34;</span>
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
cipher_arr <span style="color:#f92672">=</span> []
[cipher_arr<span style="color:#f92672">.</span>append(cipher[i:i<span style="color:#f92672">+</span><span style="color:#ae81ff">5</span>]) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">0</span>,len(cipher),<span style="color:#ae81ff">5</span>)]
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:
	plainer <span style="color:#f92672">=</span>plainer<span style="color:#f92672">+</span>dict_list[i]
print plainer
</code></pre></div><p>执行python脚本，并查看终端返回的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-19.png" alt="img"></p>
<p>看来输出的结果应该就是未成熟的flag数据：attackanddefenceworldisinteresting</p>
<p>对这个数据进行加帽处理：cyberpeace{attackanddefenceworldisinteresting}</p>
<p>flag数据成功拿到</p>
<p>这道题目主要考察古典密码学的替换加密算法知识，难度上应该算是简单题，思路也是比较流畅的。</p>
<h2 id="混合编码">混合编码</h2>
<p>看到题目，这道题应该是考察编码相关的知识的内容</p>
<p>点开题目页面，看看能得到什么关键信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-20-1024x293.png" alt="img">混合编码题目</p>
<p>题目描述中就有一个关键信息，就是题目的要求提交的flag数据格式信息，没有其他关键性的信息了</p>
<p>下载附件并打开查看密文：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-21-1024x150.png" alt="img">附件内容</p>
<p>附件中的密文内容看样子像是base64编码格式的：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">JiM3NjsmIzEyMjsmIzY5OyYjMTIwOyYjNzk7JiM4MzsmIzU2OyYjMTIwOyYjNzc7JiM2ODsmIzY5OyYjMTE4OyYjNzc7JiM4NDsmIzY1OyYjNTI7JiM3NjsmIzEyMjsmIzEwNzsmIzUzOyYjNzY7JiMxMjI7JiM2OTsmIzEyMDsmIzc3OyYjODM7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiMxMDc7JiMxMTg7JiM3NzsmIzg0OyYjNjU7JiMxMjA7JiM3NjsmIzEyMjsmIzY5OyYjMTIwOyYjNzg7JiMxMDU7JiM1NjsmIzEyMDsmIzc3OyYjODQ7JiM2OTsmIzExODsmIzc5OyYjODQ7JiM5OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzUwOyYjNzY7JiMxMjI7JiM2OTsmIzEyMDsmIzc4OyYjMTA1OyYjNTY7JiM1MzsmIzc4OyYjMTIxOyYjNTY7JiM1MzsmIzc5OyYjODM7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiM5OTsmIzExODsmIzc5OyYjODQ7JiM5OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzExOTsmIzc2OyYjMTIyOyYjNjk7JiMxMTk7JiM3NzsmIzY3OyYjNTY7JiMxMjA7JiM3NzsmIzY4OyYjNjU7JiMxMTg7JiM3NzsmIzg0OyYjNjU7JiMxMjA7JiM3NjsmIzEyMjsmIzY5OyYjMTE5OyYjNzc7JiMxMDU7JiM1NjsmIzEyMDsmIzc3OyYjNjg7JiM2OTsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzExOTsmIzc2OyYjMTIyOyYjMTA3OyYjNTM7JiM3NjsmIzEyMjsmIzY5OyYjMTE5OyYjNzc7JiM4MzsmIzU2OyYjMTIwOyYjNzc7JiM4NDsmIzEwNzsmIzExODsmIzc3OyYjODQ7JiM2OTsmIzEyMDsmIzc2OyYjMTIyOyYjNjk7JiMxMjA7JiM3ODsmIzY3OyYjNTY7JiMxMjA7JiM3NzsmIzY4OyYjMTAzOyYjMTE4OyYjNzc7JiM4NDsmIzY1OyYjMTE5Ow==
</code></pre></div><p>使用在base64关卡中的python脚本进行base64解密（当然也可以使用在线工具进行base64解密）</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-22-1024x63.png" alt="img"></p>
<p>接出来的数据好像又是一种编码格式：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#52;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#69;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#50;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#53;&amp;#78;&amp;#121;&amp;#56;&amp;#53;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#99;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#65;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#103;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#119;
</code></pre></div><p>看样子应该是ascii编码格式，可以使用在线的ascii编码工具进行解密，也可使用python脚本进行解密，一如既往，这里使用python脚本进行解密：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#52;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#69;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#50;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#105;&amp;#56;&amp;#53;&amp;#78;&amp;#121;&amp;#56;&amp;#53;&amp;#79;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#99;&amp;#118;&amp;#79;&amp;#84;&amp;#99;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#65;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#105;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#69;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#119;&amp;#76;&amp;#122;&amp;#107;&amp;#53;&amp;#76;&amp;#122;&amp;#69;&amp;#119;&amp;#77;&amp;#83;&amp;#56;&amp;#120;&amp;#77;&amp;#84;&amp;#107;&amp;#118;&amp;#77;&amp;#84;&amp;#69;&amp;#120;&amp;#76;&amp;#122;&amp;#69;&amp;#120;&amp;#78;&amp;#67;&amp;#56;&amp;#120;&amp;#77;&amp;#68;&amp;#103;&amp;#118;&amp;#77;&amp;#84;&amp;#65;&amp;#119;&#34;</span>
plainer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>
cipher_arr <span style="color:#f92672">=</span> cipher[<span style="color:#ae81ff">2</span>:<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;;&amp;#&#39;</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span>  cipher_arr:    
	plainer <span style="color:#f92672">+=</span> chr(int(i))
print plainer
</code></pre></div><p>执行编写好的python代码并查看终端输出情况：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-24-1024x51.png" alt="img"></p>
<p>输出的解密信息像是base64格式的编码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">LzExOS8xMDEvMTA4Lzk5LzExMS8xMDkvMTAxLzExNi8xMTEvOTcvMTE2LzExNi85Ny85OS8xMDcvOTcvMTEwLzEwMC8xMDAvMTAxLzEwMi8xMDEvMTEwLzk5LzEwMS8xMTkvMTExLzExNC8xMDgvMTAw
</code></pre></div><p>可以再使用一次base64解码的python脚本进行base64解码（也可以使用在线base64工具进行解码）：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-25.png" alt="img"></p>
<p>解码后又是一段ascii的编码格式，这里还是编写一个ascii解码的python脚本：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;/119/101/108/99/111/109/101/116/111/97/116/116/97/99/107/97/110/100/100/101/102/101/110/99/101/119/111/114/108/100&#34;</span>
plainer <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>
cipher_arr <span style="color:#f92672">=</span> cipher[<span style="color:#ae81ff">1</span>:]<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#39;/&#39;</span>)
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> cipher_arr:    
	plainer <span style="color:#f92672">+=</span> chr(int(i))
print plainer
</code></pre></div><p>执行编写好的python代码并查看终端输出的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-26.png" alt="img"></p>
<p>解码出来的数据应该就是flag数据：welcometoattackanddefenceworld</p>
<p>根据题目要求，需要对这个flag数据进行加帽处理：cyberpeace{welcometoattackanddefenceworld}</p>
<p>题目解决，题目属于简单题目，思路就是反复套娃操作：base64-&gt;ASCII-&gt;base64-&gt;ASCII</p>
<p>题目主要考察对编码数据的识别和基本编码方式的解决，简单题。</p>
<h2 id="easy_rsa">easy_RSA</h2>
<p>看题目，这应该是考察到ctf中密码学的核心模块，也就是现代密码学的部分，RSA加密算法。</p>
<p>什么是RSA加密算法？</p>
<p>RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）在1977年一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p>
<p>对极大整数做因数分解的难度决定了 RSA 算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的 RSA 钥匙才可能被强力方式破解。到目前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的。[7]</p>
<p>RSA是现在密码学的一个典型代表，加密过程不像古典密码学中的密码那么简单，加密过程是非常复杂的。RSA加密算法的安全性也是相当高的。</p>
<h3 id="rsa算法">RSA算法</h3>
<p>密钥生成的步骤 [8]</p>
<p>我们通过一个例子，来理解RSA算法。假设爱丽丝要与鲍勃进行加密通信，她该怎么生成公钥和私钥呢？</p>
<p><strong>第一步，随机选择两个不相等的质数p和q。</strong></p>
<p>爱丽丝选择了61和53。（实际应用中，这两个质数越大，就越难破解。）</p>
<p><strong>第二步，计算p和q的乘积n。</strong></p>
<p>爱丽丝就把61和53相乘。</p>
<blockquote>
<p>$$
n = 61×53 = 3233
$$</p>
</blockquote>
<p>n的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位。</p>
<p><strong>第三步，计算n的欧拉函数φ(n)。</strong></p>
<blockquote>
<p>n是质数，则 φ(n)=n-1
$$
n = p_1 × p_2
$$</p>
<p>$$
φ(n) = φ(p_1 \cdot p_2) = φ(p_1)\cdot φ(p_1)
$$</p>
<p>$$
=&gt; φ(n) = (p-1)(q-1)
$$</p>
</blockquote>
<p>爱丽丝算出φ(3233)等于60×52，即3120。</p>
<p><strong>第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(n)，且e与φ(n) 互质。</strong></p>
<p>爱丽丝就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</p>
<p><strong>第五步，计算e对于φ(n)的模反元素d。</strong></p>
<p>所谓”模反元素”就是指有一个整数d，可以使得ed被φ(n)除的余数为1。</p>
<blockquote>
<p>$$
ed ≡ 1 (mod φ(n))
$$</p>
</blockquote>
<p>这个式子等价于</p>
<blockquote>
<p>$$
ed - 1 = kφ(n)
$$</p>
</blockquote>
<p>于是，找到模反元素d，实质上就是对下面这个二元一次方程求解。(-k = y)</p>
<blockquote>
<p>$$
ex + φ(n)y = 1
$$</p>
</blockquote>
<p>已知 e=17, φ(n)=3120，</p>
<blockquote>
<p>$$
17x + 3120y = 1
$$</p>
</blockquote>
<p>这个方程可以用“扩展欧几里得算法”(又叫辗转相除法)求解，此处省略具体过程。总之，爱丽丝算出一组整数解为 (x,y)=(2753,-15)，即 d=2753。</p>
<p>至此所有计算完成。</p>
<p><strong>第六步，将n和e封装成公钥，n和d封装成私钥。</strong></p>
<p>在爱丽丝的例子中，n=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。</p>
<p>实际应用中，公钥和私钥的数据都采用ASN.1格式表达。</p>
<p>这些RSA加密算法的流程和重要的几个参数是解决RSA算法密码学题目的核心，只有清晰地了解RSA加密算法的每个细节，面对RSA题目才能胸有成竹、游刃有余。</p>
<p>点开题目，看看题目描述能给出哪些提示吧：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-27-1024x280.png" alt="img">easy_RSA</p>
<p>题目中只有提交格式的提示，除此之外，都是描述性的信息，但是对解题没有太多作用。</p>
<p>下载附件，直接查看附件中的信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-28.png" alt="img">附件内容</p>
<p>这道题目应该是简单的计算，即根据RSA设计的算法过程进行逆向计算。这道题目可以使用rsatool工具进行直接求解，本菜鸡还是编写一个python脚本进行求解吧：（此脚本只能针对简单问题）</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
p<span style="color:#f92672">=</span><span style="color:#ae81ff">473398607161</span>
q<span style="color:#f92672">=</span><span style="color:#ae81ff">4511491</span>e<span style="color:#f92672">=</span><span style="color:#ae81ff">17</span>
pn<span style="color:#f92672">=</span>(p<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">*</span>(q<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
flag<span style="color:#f92672">=</span>(pn<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)<span style="color:#f92672">/</span>e
print flag
</code></pre></div><p>执行编写的脚本，查看终端输出的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-29.png" alt="img"></p>
<p>这段输出的数据应该就是flag数据：125631357777427553</p>
<p>给这段flag数据加个帽子：cyberpeace{125631357777427553}</p>
<p>这道题目是RSA题目中的签到题，难度非常低，思路也非常简单</p>
<p>题目主要考察RSA加密算法的过程，签到题。</p>
<h2 id="easychallenge">easychallenge</h2>
<p>这道题的题目似乎看不出什么门路来，于是只能点开题目描述的页面：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-30-1024x292.png" alt="img">easychallenge题目</p>
<p>这道题目应该是在说程序方面的问题，题目描述也得到不了太多有用的信息，于是下载附件来获取到这道题目的真实面目：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-31.png" alt="img"></p>
<p>发现附件是一个python的一个可以执行的文件，查看文件的属性：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-32.png" alt="img"></p>
<p>发现是一个pyc文件，本菜鸡不知道什么是pyc文件，于是通过互联网的搜索引擎求助一波：</p>
<p>pyc是一种二进制文件，是由Python文件经过编译后所生成的文件，它是一种byte code，Python文件变成pyc文件后，加载的速度有所提高，而且pyc还是一种跨平台的字节码，由python的虚拟机来执行的，就类似于JAVA或者.NET的虚拟机的概念。pyc的内容与python的版本是相关的，不同版本编译后的pyc文件是不同的，例如2.5版本编译的是pyc文件，而2.4版本编译的python是无法执行的。[9]</p>
<p>pyc文件是py文件经过编译的文件格式，文件内容是一种可执行字节码，尝试执行一下这个文件：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-33.png" alt="img"></p>
<p>发现需要执行一下这个文件，需要输入flag数据，看来flag数据很可能就在这个文件内部。这里就需要进行反编译，即把pyc文件打回原形。通过互联网的搜索引擎查询到python内置了一个uncompyle模块可以进行pyc反编译。</p>
<p>于是可以使用<code>pip install uncompyle </code>命令安装一下uncompyle。</p>
<p>在命令行中执行：<code>uncompyle6 -o test.py '.\42aa1a89e3ae48c38e8b713051557020 (1).pyc'</code></p>
<p>文件应该成功输出成了一个test.py文件。</p>
<p>通过代码编辑器，查看到这个文件的源代码：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># uncompyle6 version 3.7.4</span>
<span style="color:#75715e"># Python bytecode 2.7 (62211)</span>
<span style="color:#75715e"># Decompiled from: Python 3.8.6 (tags/v3.8.6:db45529, Sep 23 2020, 15:52:53) [MSC v.1927 64 bit (AMD64)]</span>
<span style="color:#75715e"># Embedded file name: ans.py</span>
<span style="color:#75715e"># Compiled at: 2018-08-09 11:29:44</span>
<span style="color:#f92672">import</span> base64
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode1</span>(ans):    
	s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ans:
    	x <span style="color:#f92672">=</span> ord(i) <span style="color:#f92672">^</span> <span style="color:#ae81ff">36</span>
        x <span style="color:#f92672">=</span> x <span style="color:#f92672">+</span> <span style="color:#ae81ff">25</span>
        s <span style="color:#f92672">+=</span> chr(x)
    <span style="color:#66d9ef">return</span> s
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode2</span>(ans):
	s <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>    
	<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ans:
    	x <span style="color:#f92672">=</span> ord(i) <span style="color:#f92672">+</span> <span style="color:#ae81ff">36</span>
        x <span style="color:#f92672">=</span> x <span style="color:#f92672">^</span> <span style="color:#ae81ff">36</span>
        s <span style="color:#f92672">+=</span> chr(x)
    <span style="color:#66d9ef">return</span> s
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encode3</span>(ans):
    <span style="color:#66d9ef">return</span> base64<span style="color:#f92672">.</span>b32encode(ans)
flag <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39; &#39;</span>
print <span style="color:#e6db74">&#39;Please Input your flag:&#39;</span>
flag <span style="color:#f92672">=</span> raw_input()
final <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E===&#39;</span>
<span style="color:#66d9ef">if</span> encode3(encode2(encode1(flag))) <span style="color:#f92672">==</span> final:
	print <span style="color:#e6db74">&#39;correct&#39;</span>
<span style="color:#66d9ef">else</span>:
	print <span style="color:#e6db74">&#39;wrong&#39;</span>
</code></pre></div><p>看到文件源代码，发现flag数据是进行三次加密的：</p>
<ol>
<li>异或处理-&gt;加数值chuli-&gt;ASCII编码</li>
<li>加数值处理-&gt;异或处理-&gt;ASCII编码</li>
<li>base32编码处理</li>
</ol>
<p>我们可以根据这个代码逻辑逆向设计一个加密算法脚本来解决：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
<span style="color:#f92672">import</span> base64
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode1</span>(ans):
	<span style="color:#66d9ef">return</span> base64<span style="color:#f92672">.</span>b32decode(ans)
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode2</span>(ans):
	s<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ans:
    	x <span style="color:#f92672">=</span> ord(i) <span style="color:#f92672">^</span> <span style="color:#ae81ff">36</span>
        x <span style="color:#f92672">=</span> x <span style="color:#f92672">-</span><span style="color:#ae81ff">36</span>
    	s <span style="color:#f92672">+=</span> chr(x)
    <span style="color:#66d9ef">return</span> s
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">decode3</span>(ans):
	s<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>    
	<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> ans:
    	x <span style="color:#f92672">=</span> ord(i)<span style="color:#f92672">-</span><span style="color:#ae81ff">25</span>
        x <span style="color:#f92672">=</span> x <span style="color:#f92672">^</span> <span style="color:#ae81ff">36</span>
        s <span style="color:#f92672">+=</span> chr(x)
    <span style="color:#66d9ef">return</span> s
cipher <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E===&#34;</span>
plainer <span style="color:#f92672">=</span> decode3(decode2(decode1(cipher)))
print plainer
</code></pre></div><p>执行一下编写好的代码，查看终端输出的结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-35.png" alt="img"></p>
<p>看输出结果，应该是flag数据没错了。</p>
<p>再次执行以下pyc程序验证一下：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-36.png" alt="img"></p>
<p>看来是没错了，成功获取这道题目的flag数据：cyberpeace{interestinghhhhh}</p>
<p>这道题目的难度上也是简单题，思路也是比较流畅的。</p>
<p>题目主要考察pyc文件的反编译，以及编码和密码学的一些简单理论。简单题。</p>
<h2 id="转轮机加密">转轮机加密</h2>
<p>看到题目有些懵懵的，本菜鸡不知道啥是转轮机加密，于是只能求助一下搜索引擎来获取与转轮机加密相关的更多信息：</p>
<p>转轮机是古典加密方法的集大成者，二战时轴心国普遍应用了该技术，可惜惨遭盟军攻破，德日还蒙在鼓里，一定程度上改变了最终的战局。</p>
<p>转轮机的原理概括起来就是循环置换的多表代换技术，尤其是多筒转轮机，可重复使用数以万计的字母替换表。</p>
<p>以三筒转轮机为例：</p>
<p><img src="../../../../Note/Blog/post_5.assets/929265-20160422083905866-1151128365.jpg" alt="img"></p>
<p>有三个可以独立旋转的圆筒，每个圆筒内部有26个输入引脚和26个输出引脚，内部连线使得输入与输出唯一连接。</p>
<p>每按一下输入键（旋转键），快速转子旋转一个引脚，当快速转子转满一轮（循环归位）时，带动中速转子旋转一个引脚，以此类推，类似钟表的秒分时。</p>
<p>今天，转轮机的意义在于它曾经给目前最广泛使用的密码&ndash;数据加密标准DES指明了方向。[10]</p>
<p>转轮机加密是一种古典密码学的一种加密方法，应该是古典密码学的分组密码</p>
<p>加密过程大致是：</p>
<p>明文-&gt;分组处理（类似于栅栏密码处理方式）-&gt;文段内容位移+密文-&gt;多文段顺序重排+密钥-&gt;密文组</p>
<p>下面点开题目描述，看看可以得到什么信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-37-1024x272.png" alt="img">转轮机加密题目</p>
<p>根据题目描述的信息，可以获得以下几点提示：</p>
<ol>
<li>二战</li>
<li>托马斯·杰斐逊</li>
<li>flag格式</li>
</ol>
<p>下面下载附件，并进行查看：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-38.png" alt="img">附件内容</p>
<p>要想获取到flag数据，应该就需要对附件内容的数据进行机密，这里编写一个python脚本来解密：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># python2</span>
dict_list <span style="color:#f92672">=</span> {            
<span style="color:#e6db74">&#39;1&#39;</span>:<span style="color:#e6db74">&#39;ZWAXJGDLUBVIQHKYPNTCRMOSFE&#39;</span>,            <span style="color:#e6db74">&#39;2&#39;</span>:<span style="color:#e6db74">&#39;KPBELNACZDTRXMJQOYHGVSFUWI&#39;</span>,            <span style="color:#e6db74">&#39;3&#39;</span>:<span style="color:#e6db74">&#39;BDMAIZVRNSJUWFHTEQGYXPLOCK&#39;</span>,            <span style="color:#e6db74">&#39;4&#39;</span>:<span style="color:#e6db74">&#39;RPLNDVHGFCUKTEBSXQYIZMJWAO&#39;</span>,            <span style="color:#e6db74">&#39;5&#39;</span>:<span style="color:#e6db74">&#39;IHFRLABEUOTSGJVDKCPMNZQWXY&#39;</span>,            <span style="color:#e6db74">&#39;6&#39;</span>:<span style="color:#e6db74">&#39;AMKGHIWPNYCJBFZDRUSLOQXVET&#39;</span>,            <span style="color:#e6db74">&#39;7&#39;</span>:<span style="color:#e6db74">&#39;GWTHSPYBXIZULVKMRAFDCEONJQ&#39;</span>,            <span style="color:#e6db74">&#39;8&#39;</span>:<span style="color:#e6db74">&#39;NOZUTWDCVRJLXKISEFAPMYGHBQ&#39;</span>,            <span style="color:#e6db74">&#39;9&#39;</span>:<span style="color:#e6db74">&#39;XPLTDSRFHENYVUBMCQWAOIKZGJ&#39;</span>,            <span style="color:#e6db74">&#39;10&#39;</span>:<span style="color:#e6db74">&#39;UDNAJFBOWTGVRSCZQKELMXYIHP&#39;</span>,            <span style="color:#e6db74">&#39;11&#39;</span>:<span style="color:#e6db74">&#39;MNBVCXZQWERTPOIUYALSKDJFHG&#39;</span>,            <span style="color:#e6db74">&#39;12&#39;</span>:<span style="color:#e6db74">&#39;LVNCMXZPQOWEIURYTASBKJDFHG&#39;</span>,             <span style="color:#e6db74">&#39;13&#39;</span>:<span style="color:#e6db74">&#39;JZQAWSXCDERFVBGTYHNUMKILOP&#39;</span>
}
key<span style="color:#f92672">=</span>[<span style="color:#ae81ff">2</span>,<span style="color:#ae81ff">3</span>,<span style="color:#ae81ff">7</span>,<span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">13</span>,<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">9</span>,<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">8</span>,<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">4</span>,<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">6</span>]
cipher<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;NFQKSEVOQOFNP&#34;</span>
cipher_arr<span style="color:#f92672">=</span>[]
plainer_arr<span style="color:#f92672">=</span>[]
plainer_list<span style="color:#f92672">=</span>[]
index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> key:
	cipher_arr<span style="color:#f92672">.</span>append(dict_list[str(i)])
	<span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> cipher_arr:
    	location <span style="color:#f92672">=</span> j<span style="color:#f92672">.</span>index(cipher[index])
        str_get <span style="color:#f92672">=</span> j[location:] <span style="color:#f92672">+</span> j[:location]    	
        plainer_arr<span style="color:#f92672">.</span>append(str_get)
        index <span style="color:#f92672">+=</span> <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(plainer_arr[<span style="color:#ae81ff">0</span>])):
	str_get<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>    
	<span style="color:#66d9ef">for</span> j <span style="color:#f92672">in</span> plainer_arr:
    	str_get <span style="color:#f92672">+=</span> j[i]
print str_get<span style="color:#f92672">.</span>lower()
</code></pre></div><p>执行刚刚编写好的python脚本，并在终端命令行中查看执行结果：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-39.png" alt="img"></p>
<p>得到了一个明文的列表：</p>
<pre><code>nfqksevoqofnpahgcxiusnwcbnctwpcubfotuvyzetmdrmezgkccdqhneyczuvtxjtgszrtqwtrezbrypqfawawsbqfxxywvsaxdcswzmpbxbbojczxedjlxygkigvqqrrqoiitjkdrkytuoczhydzljeipsykufhfgullzolhblrnhjbxmmiogdvlugxvkxjuqvmkamlpiiywyxsambkvlqsiaavfireintheholeuzaulcdkfprstwvfoomsyaupkairdtpxrppdldmkncsjzfnmnnjkpsegzphtyadfgbjojqqecgjvhheunvaonrhfhgilwjdwwymbbgmw
</code></pre><p>列表中存在明文，这时候需要看看题目描述的3个tip：</p>
<ol>
<li>二战</li>
<li>托马斯·杰斐逊</li>
<li>flag格式</li>
</ol>
<p>由于转轮机加密是托马斯·杰斐逊发明的，因而tip2已经使用，tip3是要在提交的时候使用，这时候还有一个tip1，二战。找一下明文列表中是否有与二战相关的文段。</p>
<p>发现文段：fireinthehole 与二战相关，这个明文段应该就是flag数据了。</p>
<p>根据题目描述的flag数据要求，fireinthehole就是正确的flag数据了。</p>
<p>题目解决，题目的思路也是比较流畅简单的，难度上算是简单题。</p>
<p>题目主要考察的是古典密码学中的转轮机加密，简单题。</p>
<h2 id="normal_rsa">Normal_RSA</h2>
<p>看到题目，感觉这道题目应该不简单，明显的一道RSA加密算法题目，估计也是考察RSA加密算法相关知识的题目。</p>
<p>直接点开题目描述，看看可以获取到什么有用的tip</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-40-1024x273.png" alt="img">Normal_RSA题目</p>
<p>根据题目描述，这道题目应该是需要使用到工具的。RSA加密算法题目通常会使用到openssl，rsatool，factordb，sagemath工具进行rsa的公钥私钥的运算。</p>
<p>下载附件，查看附件有什么东西吧：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-41.png" alt="img">附件</p>
<p>附件个压缩文件，我们对压缩文件进行解压获得一个文件夹：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-42.png" alt="img"></p>
<p>打开这个文件夹：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-43.png" alt="img">文件夹内容</p>
<p>发现有两个文件，一个是公钥，一个是密文。pem格式的文件应该是openssl的一种文件格式</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-44.png" alt="img"></p>
<p>这里使用openssl来获取到公钥文件的e和n，使用openssl的rsa功能之前可以先看看rsa功能的帮助：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-45.png" alt="img">openssl rsa帮助</p>
<p>了解了大致参数，执行命令<code>rsa -pubin -text -modulus -in pubkey.pem</code> 来获取e和n的数据：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-46.png" alt="img"></p>
<p>exponent就是e，modulus就是n。</p>
<p>这里的e是十进制的，n是十六进制的：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">Exponent: 65537 (0x10001)

Modulus=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD
</code></pre></div><p>需要进行转换，使用ipython交互求出十进制数值：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-48.png" alt="img"></p>
<p>现在得到：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">n=87924348264132406875276140514499937145050893665602592992418171647042491658461

e=65537
</code></pre></div><p>下面需要求出p和q，这里需要进行大数分解，这里使用<a href="http://factordb.com/">focterdb</a>进行大数分解：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-49-1024x111.png" alt="img"></p>
<p>现在得到的数据有：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">p=275127860351348928173285174381581152299

q=319576316814478949870590164193048041239

n=87924348264132406875276140514499937145050893665602592992418171647042491658461

e=65537
</code></pre></div><p>现在这些数据可以求出参数d了，这里使用rsatool求解参数d、生成私钥文件：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">python ~/rsatool/rsatool.py  -f PEM -o private.pem  -p <span style="color:#ae81ff">275127860351348928173285174381581152299</span> -q <span style="color:#ae81ff">319576316814478949870590164193048041239</span> -e <span style="color:#ae81ff">65537</span> 
</code></pre></div><p><img src="/images/XCTF-CRYPTO-novice_writeup/image-53-1024x313.png" alt="img"></p>
<p>现在得到了私钥文件和公钥文件了，可以使用openssl进行解密了</p>
<p>opensssl解密RSA加密算法的模块是rsautl，解密之前，先看看rsautl的帮助：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-51.png" alt="img"></p>
<p>了解大致参数后，执行命令开始进行求解：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> rsautl -in flag.enc -inkey private.pem -out flag.txt -decrypt
</code></pre></div><p>然后查看生成的txt文件内容：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-54.png" alt="img"></p>
<p>成功获取到flag数据：PCTF{256b_i5_m3dium}</p>
<p>题目解决，题目是比较常规的RSA题目，题目主要考察RSA知识的掌握以及RSA工具的使用。</p>
<p>题目难度上，题目算是简单题目。</p>
<h2 id="esay_ecc">esay_ECC</h2>
<p>看到题目，这道题目应该是一个比较难的题目，题目考察到的是ecc加密算法，是密码学中比较难也是比较核心的考察点。ecc加密算法也是ctf密码学的难点。什么是ecc加密算法？</p>
<p>椭圆曲线密码学（英语：Elliptic Curve Cryptography，缩写：ECC）是一种基于椭圆曲线数学的公开密钥加密算法。椭圆曲线在密码学中的使用是在1985年由Neal Koblitz（英语：Neal Koblitz）和Victor Miller（英语：Victor Miller）分别独立提出的。</p>
<p>ECC的主要优势是它相比RSA加密算法使用较小的密钥长度并提供相当等级的安全性。ECC的另一个优势是可以定义群之间的双线性映射，基于Weil对或是Tate对；双线性映射已经在密码学中发现了大量的应用，例如基于身份的加密。[11]</p>
<p>点开题目，看看题目能给我们什么有用的信息：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-55-1024x301.png" alt="img">easy_ECC题目</p>
<p>题目的描述提示了ecc基本原理和提交的flag格式。这道题目解决的关键应该就是ecc基本原理。</p>
<p>点开附件进行下载，查看附件内容：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-56.png" alt="img">附件内容</p>
<p>本菜鸡现在实在是看不懂ecc加密算法的基本原理，这道题目直接搬大佬的脚本求解：[12]</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">Gx <span style="color:#f92672">=</span> <span style="color:#ae81ff">6478678675</span>
Gy <span style="color:#f92672">=</span> <span style="color:#ae81ff">5636379357093</span>
a <span style="color:#f92672">=</span> <span style="color:#ae81ff">16546484</span> 
b <span style="color:#f92672">=</span> <span style="color:#ae81ff">4548674875</span>
p <span style="color:#f92672">=</span> <span style="color:#ae81ff">15424654874903</span>
k <span style="color:#f92672">=</span> <span style="color:#ae81ff">546768</span>
x <span style="color:#f92672">=</span> Gx
y <span style="color:#f92672">=</span> Gy
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(k<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>):
    <span style="color:#66d9ef">if</span> (x<span style="color:#f92672">==</span>Gx <span style="color:#f92672">and</span> y<span style="color:#f92672">==</span>Gy):
        inv <span style="color:#f92672">=</span> pow(<span style="color:#ae81ff">2</span><span style="color:#f92672">*</span>Gy, p<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>,p)
        temp <span style="color:#f92672">=</span> (<span style="color:#ae81ff">3</span><span style="color:#f92672">*</span>Gx<span style="color:#f92672">*</span>Gx<span style="color:#f92672">+</span>a)<span style="color:#f92672">*</span>inv<span style="color:#f92672">%</span>p
    <span style="color:#66d9ef">else</span>:
        inv <span style="color:#f92672">=</span> pow((x<span style="color:#f92672">-</span>Gx), p<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>,p)
        temp <span style="color:#f92672">=</span> (y<span style="color:#f92672">-</span>Gy)<span style="color:#f92672">*</span>inv<span style="color:#f92672">%</span>p

    xr <span style="color:#f92672">=</span> (temp<span style="color:#f92672">*</span>temp<span style="color:#f92672">-</span>Gx<span style="color:#f92672">-</span>x)<span style="color:#f92672">%</span>p
    yr <span style="color:#f92672">=</span> (temp<span style="color:#f92672">*</span>(x<span style="color:#f92672">-</span>xr)<span style="color:#f92672">-</span>y)<span style="color:#f92672">%</span>p
 <span style="color:#75715e">#print(i,xr,yr)</span>
    x <span style="color:#f92672">=</span> xr
    y <span style="color:#f92672">=</span> yr
print(x<span style="color:#f92672">+</span>y)
</code></pre></div><p>执行脚本进行求解：</p>
<p><img src="/images/XCTF-CRYPTO-novice_writeup/image-57.png" alt="img"></p>
<p>解出来的数值：19477226185390。对解出来的数值加个帽子：cyberpeace{19477226185390}</p>
<p>flag数据就是：cyberpeace{19477226185390}</p>
<p>题目解决，难度适中，主要考察ecc基本原理（本菜鸡现在看不懂，嘤嘤嘤）</p>
<h2 id="参考">参考：</h2>
<ol>
<li><a href="https://blog.csdn.net/jiang_xinxing/article/details/89360638">密码学发展简史</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81">凯撒密码-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81">摩尔斯电码-维基百科</a></li>
<li><a href="https://www.jianshu.com/p/b5aa5cf60f83">01248云影密码-简书</a></li>
<li><a href="https://baike.baidu.com/item/%E6%A0%85%E6%A0%8F%E5%AF%86%E7%A0%81/228209">栅栏密码-百度百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E5%9F%B9%E6%A0%B9%E5%AF%86%E7%A2%BC">培根密码-维基百科</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">RSA加密算法-维基百科</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html">RSA加密算法-阮一峰</a></li>
<li><a href="https://www.php.cn/python-tutorials-416352.html">什么是.pyc文件-Python教程-PHP中文网</a></li>
<li><a href="https://www.cnblogs.com/block2016/p/5419894.html">古典加密方法（三）转轮机 - block2016 - 博客园</a></li>
<li><a href="https://wiwiki.kfd.me/wiki/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6?__cf_chl_jschl_tk__=a9978b71ec35dea51611bffa9ddfde17af6370e0-1617507761-0-AS1qzJ-oZAEq_LTzowb0J7phGWNrxR30GyxWwo6CyT69z-ihrCQkPQyVQt09Ilbvz62nswUGfiKGW0V7wr81F8k7VR2CTAXsMzT-d0exQRmElW9n_yv_SYJl2ZMXNsx1IF8xd9OYYwHGTSD_-s2IngOPyneCJ2vgpXqo9Ni7n7kPjZpACS3_rMdRHNdn9nCJNQX7QmB-220VQx5FnGlcQZzU9u4WOLCZDnB04Ui439-MF7E9NDg4g3poRLyDAA2mB3SznYOkHvz-9GPxSImOa87p75BN9SNM69QUdhG0fuDleenL6XoNzcYBuM-Q1lgNA-S_BnZsPAuTtUo3aDdZNP8woYFz6qr5K2WzLVQ-fYEofJN4TCVQPCn1f1PbnffLiUhOHT342PmSBmuo0xDZy6RHHJMOjFSeWT5TixJIYYmYiz2EbnrifJikVyt0-CZycYnh_-QPhzzbqleCFm90uSXCfvMuTtZ9kAzWZHqBLVpLcS1VS6spCfFZYw78f9bC7pUZUqcNYyB7pY_vhuQX6Mg">椭圆曲线密码学-维基百科</a></li>
<li><a href="https://blog.csdn.net/weixin_46227016/article/details/111565136">XCTF easy_ECC WP</a></li>
</ol>
<p>XCTF的新手区密码学题目可能难度不是很高，但是XCTF新手区的密码学题目涉及的范围还是比较广的。从编码到密码，从古典到现代，从rsa到ecc都有涉及，密码学考察的基本知识都涉及到了。</p>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>XCTF WEB novice Writeup</title>
            <link>https://zcodetea.github.io/posts/xctf-web-novice_writeup/</link>
            <pubDate>Fri, 25 Jun 2021 21:08:13 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/xctf-web-novice_writeup/</guid>
            <description>来点时效性的文章，不能总闲聊吧？
XCTF是一个国内比较常用的CTF的刷题网站，网站页面如下：
XCTF攻防世界页面
初次写writeup，解题思路可能不是很明确。
本次要解决的题目如下：
XCTF WEB新手区题目
 view source robots backup cookie disabled button weak auth simple php get post xff referer webshell command execution simple js  view_source 进入到题目页面中，获取与解题相关的信息
view_source题目
根据题目要求可知，鼠标右键不可用了。
我们进入环境来一探究竟
靶机环境
靶机展示的页面非常简单，说flag不在这儿，我不大相信，尝试使用右键查看源代码
发现右键不能使用。看来靶机的代码把浏览器的右键给禁用了，解决方法有两个：
 使用F12进行检查源代码 开启浏览器禁用js模式  这里使用F12进行查看源代码（开启禁用js模式比较麻烦）
页面源代码
F12成功打开页面源代码调试，可以看到flag就在源代码的注释中，简单题
本题主要考察对浏览器调试器的使用技巧，没有什么难度。
robots 进入到题目页面环境中，查看题目信息和相关描述。
robots题目
题目描述中提到了robots协议，本菜鸡不知道什么是robots协议，但是可以肯定robots协议就是本题的突破点，我去搜索查找一下有关robots协议的相关信息。
robots协议相关信息
根据百度百科的说明，其实robots协议就是网站目录下的robots.txt文件
预备的知识信息获取到了，下面进入到靶机环境，去拿flag
靶机页面
靶机页面是个空白页面，在靶机地址后面输入/robots.txt尝试找到flag
进入到robots.txt页面寻找有关flag的相关信息
robots.txt页面信息
根据robots.txt展示的页面信息，可知flag就在flag_1s_h3re.php文件中
那就进入到这个文件中
flag_1s_h3re.php文件页面
成功拿到flag数据信息，题目也是简单题
这道题目主要考察robots协议的相关知识以及网站目录的部分知识，也是简单题，思路非常明确
backup 进入到题目页面中，寻找有用的题目突破信息
backup题目
根据题目描述，这道题目是在考察备份文件，备份文件是解题的关键
根据备份文件的相关信息可知，备份文件通常都是后缀名.bak的文件
已有知识准备好了，现在进入到靶机环境中拿flag
靶机页面
靶机直接就把提示摆到页面上面了，直接访问index.php.bak文件就可以了
一般来说index.php的备份文件就是index.php.bak文件</description>
            <content type="html"><![CDATA[<p>来点时效性的文章，不能总闲聊吧？</p>
<p><a href="https://adworld.xctf.org.cn/">XCTF</a>是一个国内比较常用的CTF的刷题网站，网站页面如下：</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-1.png" alt="image-1">XCTF攻防世界页面</p>
<p>初次写writeup，解题思路可能不是很明确。</p>
<p>本次要解决的题目如下：</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-2.png" alt="image-2">XCTF WEB新手区题目</p>
<ul>
<li>view source</li>
<li>robots</li>
<li>backup</li>
<li>cookie</li>
<li>disabled button</li>
<li>weak auth</li>
<li>simple php</li>
<li>get post</li>
<li>xff referer</li>
<li>webshell</li>
<li>command execution</li>
<li>simple js</li>
</ul>
<h2 id="view_source">view_source</h2>
<p>进入到题目页面中，获取与解题相关的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-3.png" alt="image-3">view_source题目</p>
<p>根据题目要求可知，鼠标右键不可用了。</p>
<p>我们进入环境来一探究竟</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-4.png" alt="image-4">靶机环境</p>
<p>靶机展示的页面非常简单，说flag不在这儿，我不大相信，尝试使用右键查看源代码</p>
<p>发现右键不能使用。看来靶机的代码把浏览器的右键给禁用了，解决方法有两个：</p>
<ol>
<li>使用F12进行检查源代码</li>
<li>开启浏览器禁用js模式</li>
</ol>
<p>这里使用F12进行查看源代码（开启禁用js模式比较麻烦）</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-5.png" alt="image-5"></p>
<p>页面源代码</p>
<p>F12成功打开页面源代码调试，可以看到flag就在源代码的注释中，简单题</p>
<p>本题主要考察对浏览器调试器的使用技巧，没有什么难度。</p>
<h2 id="robots">robots</h2>
<p>进入到题目页面环境中，查看题目信息和相关描述。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-6.png" alt="image-6">robots题目</p>
<p>题目描述中提到了robots协议，本菜鸡不知道什么是robots协议，但是可以肯定robots协议就是本题的突破点，我去搜索查找一下有关robots协议的相关信息。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-7.png" alt="image-7">robots协议相关信息</p>
<p>根据百度百科的说明，其实robots协议就是网站目录下的robots.txt文件</p>
<p>预备的知识信息获取到了，下面进入到靶机环境，去拿flag</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-8.png" alt="image-8">靶机页面</p>
<p>靶机页面是个空白页面，在靶机地址后面输入/robots.txt尝试找到flag</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-9.png" alt="image-9"></p>
<p>进入到robots.txt页面寻找有关flag的相关信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-10.png" alt="image-10"></p>
<p>robots.txt页面信息</p>
<p>根据robots.txt展示的页面信息，可知flag就在flag_1s_h3re.php文件中</p>
<p>那就进入到这个文件中</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-11.png" alt="image-11">flag_1s_h3re.php文件页面</p>
<p>成功拿到flag数据信息，题目也是简单题</p>
<p>这道题目主要考察robots协议的相关知识以及网站目录的部分知识，也是简单题，思路非常明确</p>
<h2 id="backup">backup</h2>
<p>进入到题目页面中，寻找有用的题目突破信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-12-1024x292.png" alt="image-12-1024x292">backup题目</p>
<p>根据题目描述，这道题目是在考察备份文件，备份文件是解题的关键</p>
<p>根据备份文件的相关信息可知，备份文件通常都是后缀名.bak的文件</p>
<p>已有知识准备好了，现在进入到靶机环境中拿flag</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-13.png" alt="image-13">靶机页面</p>
<p>靶机直接就把提示摆到页面上面了，直接访问index.php.bak文件就可以了</p>
<p>一般来说index.php的备份文件就是index.php.bak文件</p>
<p>访问url/index.php.bak，备份文件成功被下载下来</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-14.png" alt="image-14"></p>
<p>备份文件</p>
<p>打开备份文件寻找信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-15.png" alt="image-15">备份文件信息</p>
<p>发现flag数据就在备份文件中，题目解决，也是一道简单题目</p>
<p>题目主要考察的就是备份文件的相关知识，简单题，思路非常明确</p>
<h2 id="cookie">cookie</h2>
<p>进入到题目页面，寻找与解题相关的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-16-1024x282.png" alt="image-16-1024x282">cookie题目</p>
<p>题目描述和题目明显提示是cookie相关的知识，cookie的知识一般做web安全都是必须知道且需要了解的一个重要的知识点。这里搬出MDN上面对于<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies">cookie</a>的说明，cookie知识不清楚的可以去MDN页面中了解</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-17.png" alt="image-17">MDN cookie</p>
<p>简单来说，cookie就是存储在用户服务器上的一段信息内容</p>
<p>可以使用浏览器的调试器查看该页面的cookie数据，准备知识现在已经完备。</p>
<p>进入到靶机环境，拿flag！</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-18.png" alt="image-18"></p>
<p>靶机页面</p>
<p>靶机页面信息展示的很明确，就是cookie</p>
<p>打开F12调试器查看cookie信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-19-1024x234.png" alt="image-19-1024x234">cookie数据</p>
<p>发现有很多条cookie数据，不知道该选择哪一条cookie数据，我发现这些cookie的domain信息不太一样。有四条的domain信息是baidu.com，只有一条的domain信息是靶机的ip地址，看来需要的cookie信息就是domain信息是靶机ip地址的那条cookie</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-20.png" alt="image-20">靶机cookie数据</p>
<p>cookie的键值对是look-here:cookie.php，cookie.php显然不是flag数据，估计是想让我们访问这个文件，我们来访问一下这个文件</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-21.png" alt="image-21"></p>
<p>cookie.php页面信息</p>
<p>这个页面展示的内容也是非常简单的，让我们去看看response信息。</p>
<p>可能有人会问response是什么？response就是http头部信息的响应信息，在调试器的网络那一栏可以查看到页面的http头部信息。关于http头部信息的更多内容，可以访问<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">MDN的HTTP头部列表</a></p>
<p>打开浏览器的调试器</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-22-1024x140.png" alt="image-22-1024x140">网络响应数据</p>
<p>如果响应数据中没有任何信息，可以刷新一下页面来找到响应数据</p>
<p>然后我们选择响应数据中的cookie.php的数据信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-23.png" alt="image-23">cookie.php的响应信息</p>
<p>发现响应标头的信息中有flag数据，本题也就成功解出，也是简单题目，跟着引导走，很快就能拿到flag</p>
<p>题目主要考察cookie相关知识和htpp头的相关知识内容，这里也可以使用burp suite来抓包获取http信息，简单题，思路也相对比较流畅。</p>
<h2 id="disabled-button">disabled button</h2>
<p>看到这个题目就大致知道这道题目的考察目标了，应该是一道非常简单的题目</p>
<p>来看看题目内容有什么具体的描述信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-24-1024x287.png" alt="img">disabled_button题目</p>
<p>根据题目描述可以知道，这道题目是考察前端知识的。根据题目disabled_button，这道题目很可能是在考察html标签属性的，下面我们进入到题目中一探究竟</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-25.png" alt="img"></p>
<p>靶机页面</p>
<p>页面展示的信息非常清晰不能按的按钮，而且flag信息就藏在这个按钮后面</p>
<p>直接点开F12查看源代码</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-26.png" alt="img">源代码检查</p>
<p>发现input标签有关disabled属性，我们将disabled属性删除，按钮就可以按了</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-27.png" alt="img"></p>
<p>源代码修改</p>
<p>然后返回到页面上去，发现按钮可以被按下</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-28.png" alt="img"></p>
<p>按钮页面</p>
<p>按下按钮，查看可以获取到的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-29.png" alt="img"></p>
<p>flag信息</p>
<p>成功获取到flag信息，题目解决，这道题目非常简单，应该是道签到题</p>
<p>题目主要考察前端的html知识，签到题</p>
<h2 id="weak-auth">weak auth</h2>
<p>进入到题目页面，查看可以利用的信息及提示</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-30-1024x277.png" alt="img">weak_auth</p>
<p>根据题目和题目描述信息可以知道，这道题目是一个登录页面，而且采用的是弱口令进行认证的页面。</p>
<p>考察的信息应该是暴力破解的知识以及暴力破解的工具使用。</p>
<p>这里说一下暴力破解的内容知识：</p>
<p>暴力破解也叫蛮力攻击，是一种非常无脑的攻击手段，经常会和社会工程学一起采用来达到成功破解用户密码的效果。</p>
<p>蛮力攻击（英语：Brute-force attack），又称为穷举攻击（英语：Exhaustive attack）或暴力破解，是一种密码分析的方法，即将密码进行逐个推算直到找出真正的密码为止。例如：一个已知是四位数并且全部由阿拉伯数字组成的密码，其可能共有10000种组合，因此最多尝试9999次就能找到正确的密码。理论上除了具有完善保密性的密码以外，利用这种方法可以破解任何一种密码，问题只在于如何缩短试误时间。有些人运用计算机来增加效率，有些人透过字典攻击（英语：Dictionary attack）来缩小密码组合的范围。[1]</p>
<p>如果要解决这道题目，就必不可少一些暴力破解会使用的工具来进行暴力破解。暴力破解工具有很多，一般来说，web安全会有一些比较常用的暴力破解工具，这道题目可能需要使用到kali操作系统来辅助解题。常用的暴力破解工具一般有：Hydra，Medusa，Burp suite。</p>
<p>这里可能使用到Hydra进行暴力破解，这里说明一些Hydra的暴力破解的方法和相关参数</p>
<p><strong>hydra</strong> 是一个支持众多协议的爆破工具，已经集成到KaliLinux中，直接在终端打开即可。[2]</p>
<p>常用的hydra的暴力破解命令：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">1、破解ssh： 
hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip ssh 
hydra -l 用户名 -p 密码字典 -t 线程 -o save.log -vV ip ssh 


2、破解ftp： 
hydra ip ftp -l 用户名 -P 密码字典 -t 线程<span style="color:#f92672">(</span>默认16<span style="color:#f92672">)</span> -vV 
hydra ip ftp -l 用户名 -P 密码字典 -e ns -vV 


3、get方式提交，破解web登录： 
hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns ip http-get /admin/ 
hydra -l 用户名 -p 密码字典 -t 线程 -vV -e ns -f ip http-get /admin/index.php


4、post方式提交，破解web登录： 
hydra -l 用户名 -P 密码字典 -s <span style="color:#ae81ff">80</span> ip http-post-form <span style="color:#e6db74">&#34;/admin/login.php:username=^USER^&amp;password=^PASS^&amp;submit=login:sorry password&#34;</span> 
hydra -t <span style="color:#ae81ff">3</span> -l admin -P pass.txt -o out.txt -f 10.36.16.18 http-post-form <span style="color:#e6db74">&#34;login.php:id=^USER^&amp;passwd=^PASS^:&lt;title&gt;wrong username or password&lt;/title&gt;&#34;</span> 
（参数说明：-t同时线程数3，-l用户名是admin，字典pass.txt，保存为out.txt，-f 当破解了一个密码就停止， 10.36.16.18目标ip，http-post-form表示破解是采用http的post方式提交的表单密码破解,&lt;title&gt;中 的内容是表示错误猜解的返回信息提示。） 


5、破解https： 
hydra -m /index.php -l muts -P pass.txt 10.36.16.18 https 

6、破解teamspeak： 
hydra -l 用户名 -P 密码字典 -s 端口号 -vV ip teamspeak 

7、破解cisco： 
hydra -P pass.txt 10.36.16.18 cisco 
hydra -m cloud -P pass.txt 10.36.16.18 cisco-enable 

8、破解smb： 
hydra -l administrator -P pass.txt 10.36.16.18 smb 

9、破解pop3： 
hydra -l muts -P pass.txt my.pop3.mail pop3 

10、破解rdp： 
hydra ip rdp -l administrator -P pass.txt -V 

11、破解http-proxy： 
hydra -l admin -P pass.txt http-proxy://10.36.16.18 

12、破解imap： 
hydra -L user.txt -p secret 10.36.16.18 imap PLAIN 
hydra -C defaults.txt -6 imap://<span style="color:#f92672">[</span>fe80::2c:31ff:fe12:ac11<span style="color:#f92672">]</span>:143/PLAIN
</code></pre></div><p>这些常用的命令解决这道题目应该是足够的。</p>
<p>现在工具和知识都已经准备完毕了，进入靶机来一探究竟</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-31.png" alt="img"></p>
<p>weak_auth页面</p>
<p>非常简单的一个登录认证页面，先进行简单的密码猜测</p>
<p>使用root:root进行登录尝试</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-32.png" alt="img"></p>
<p>弹出提示，please login as admin，说明登录的用户名必须要素admin</p>
<p>下面试试admin:admin进行登录尝试</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-33.png" alt="img"></p>
<p>弹出提示，password error，登录错误的提示，然后点击确定查看一下页面的源代码</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-34.png" alt="img">靶机error页面源代码</p>
<p>发现登录错误关键字error，然后查看页面的响应标头确定传输方式</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-35.png" alt="img"></p>
<p>发现页面数据的传输方式是post方式进行传输的。而且页面存在着跳转，hydra的易用性相对较差，这里需要选用burpsuite进行暴力破解</p>
<p>进入到kali系统中，抓取页面信息进行暴力破解攻击</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-36.png" alt="img">bp抓到的数据包</p>
<p>右键将页面发送到intruder页面中</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-37.png" alt="img"></p>
<p>然后点击intruder页面进行暴力破解的设置</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-38-1024x287.png" alt="img"></p>
<p>调整好参数，然后进入到option的配置页面中进行攻击，（最好找一个弱口令字典）</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-41-1024x490.png" alt="img"></p>
<p>简单设置进行暴力破解的字典，然后设置匹配项。由于我们知道页面登录失败的时候会出现password error的选项，因此进入到option页面中设置匹配。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-42.png" alt="img"></p>
<p>点击clear将所有的匹配规则清除</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-43.png" alt="img"></p>
<p>点击add将error的匹配规则添加进去</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-44.png" alt="img"></p>
<p>然后点击start attack开始攻击</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-45.png" alt="img"></p>
<p>稍微等一下，等攻击结果出现</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-46.png" alt="img"></p>
<p>发现123456这个密码没有匹配到error的规则，然后进入到页面中将123456密码输入进去</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-47.png" alt="img"></p>
<p>进入到跳转页面中，成功找到flag数据。</p>
<p>本题也成功解决，题目的思路也是比较简单的。考察的要点就是暴力破解，通过暴力破解解决问题。</p>
<p>题目属于简单题。</p>
<h2 id="simple-php">simple php</h2>
<p>这道题的题目是simple_php，应该是一道考察php代码的简单题目</p>
<p>进入到题目页面，来获取到更多信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-48-1024x287.png" alt="img">simple_php题目</p>
<p>页面中的题目描述信息也是在说php代码的问题，这道题目应该是在考察php代码的简单使用情况</p>
<p>进入到靶机环境来一探究竟</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-49.png" alt="img"></p>
<p>直接展示出源代码，这应该是一道简单的php代码审计题目，本菜鸡的php基础还可以，这道题目主要是考察php代码的特性和缺陷。</p>
<p>这道题目中有三个特性进行了考察：</p>
<ol>
<li>php中的字符串在进行比较的时候都会被当作0来处理</li>
<li>php中的变量如果被赋值了数字加字符，在进行数值判断的时候，字符会被忽略</li>
<li>php中的<code>is_numeric()</code>函数会判断变量是否是纯数字，如果是纯数字就返回true，如果不是纯数字就返回false</li>
</ol>
<p>有时候php代码审计的题目遇到不认识的代码或者函数，可以进行搜索引擎的使用和查找</p>
<p>代码可控的地方是get传输的数据，a和b参数作为数据接收并进行传递的</p>
<p>由于这道题目比较简单，直接在url上面进行构造</p>
<p>构造payload：<code>url?a=Flag&amp;b=1235s</code></p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-50.png" alt="img"></p>
<p>成功获取到flag数据，题目解决。</p>
<p>题目主要考察get传输方式和php代码的特性，思路也比较简单，分析代码的逻辑进行简单的注入就可以解决问题。属于简单题目。</p>
<h2 id="get-post">get post</h2>
<p>看题目，这道题目应该是考察http的传输数据的方式，get传输方式和post传输数据的方式</p>
<p>点开题目，希望可以从题目页面中获取到更多的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-51-1024x307.png" alt="img">get_post题目</p>
<p>题目描述也是说用get和post方式，看来这道题目的关键点就是get和post传输数据的方式。</p>
<p>由于这里涉及的post方式的传输，这里需要使用一个Hackbar的插件攻击来辅助进行注入进攻来获取到flag数据。这里给出hackbar的GitHub地址：https://github.com/Hack-Free/HackBar，如果没有这个工具可以进行下载使用。</p>
<p>现在工具齐全了，可以进行尝试去拿flag了，打开靶机进入到环境中</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-52.png" alt="img"></p>
<p>页面中展示的信息非常明确，而且比较明了。为了方便操作，进入到kali系统中的已装好hackbar的firefox浏览器中进行操作。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-53-1024x222.png" alt="img"></p>
<p>首先使用get方法进行提交，点击execut进行传输</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-54.png" alt="img"></p>
<p>页面内容发生了变化，这次使用post数据进行传输</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-55-1024x333.png" alt="img"></p>
<p>点击execute进行传输数据</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-56.png" alt="img"></p>
<p>数据传输过去后，页面发生变化，然后flag数据就展示在眼前，题目解决。</p>
<p>这道题目的思路非常清晰，就是引导性的题目，没有什么难度，应该是道签到题目。</p>
<p>题目考察的知识点是http传输数据的方式，属于签到题。</p>
<h2 id="xff-referer">xff referer</h2>
<p>刚开始看到这个题目标题的时候还是有点懵逼的，因为本菜鸡并不知道什么是xff和referer</p>
<p>于是使用搜索引擎解决一下问题</p>
<p><strong><code>X-Forwarded-For</code></strong> (XFF) 在客户端访问服务器的过程中如果需要经过HTTP代理或者负载均衡服务器，可以被用来获取最初发起请求的客户端的IP地址，这个消息首部成为事实上的标准。在消息流从客户端流向服务器的过程中被拦截的情况下，服务器端的访问日志只能记录代理服务器或者负载均衡服务器的IP地址。如果想要获得最初发起请求的客户端的IP地址的话，那么 X-Forwarded-For 就派上了用场。[3]</p>
<p><code>**Referer**</code> 请求头包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。服务端一般使用 <code>Referer</code> 请求头识别访问来源，可能会以此进行统计分析、日志记录以及缓存优化等。[4]</p>
<p>发现Xff和Referer就是一个可以进行IP代理的东西和一个可以进行来源记录的东西</p>
<p>再去查一下Xff和Referer的语法格式，确保对于Xff和Referer的知识掌握的比较完善。</p>
<p>于是再去MDN上查看一波：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-http" data-lang="http"><span style="color:#960050;background-color:#1e0010">X-Forwarded-For: &lt;client&gt;, &lt;proxy1&gt;, &lt;proxy2&gt;
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"># 示例
</span><span style="color:#960050;background-color:#1e0010">X-Forwarded-For: 2001:db8:85a3:8d3:1319:8a2e:370:7348
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">X-Forwarded-For: 203.0.113.195
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">X-Forwarded-For: 203.0.113.195, 70.41.3.18, 150.172.238.178
</span><span style="color:#960050;background-color:#1e0010">Referer: &lt;url&gt;
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"># 示例
</span><span style="color:#960050;background-color:#1e0010">Referer: https://developer.mozilla.org/en-US/docs/Web/JavaScript
</span></code></pre></div><p>点开题目查看，题目中又有些什么信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-57-1024x287.png" alt="img">xff_referer题目</p>
<p>根据题目描述，xff和referer是可以伪造的，可以知道这道题目应该是伪造xff和referer的题目，由于xff和referer都是http头部的信息，所以需要使用burp suite进行抓包来伪造xff和referer信息，需要先启动一下kali操作系统。</p>
<p>目前，知识基础和工具基础都准备好了，进入到靶机环境</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-58.png" alt="img">靶机环境</p>
<p>要求ip必须为123.123.123.123，用burp suite抓到数据包，修改xff数据来进行伪造</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-59.png" alt="img"></p>
<p>然后进行放行来查看页面情况</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-60.png" alt="img"></p>
<p>页面返回了一个必须来自https://www.google.com</p>
<p>再次抓包，设置一下referer和xff的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-61.png" alt="img"></p>
<p>将数据包放行，然后查看页面信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-62.png" alt="img"></p>
<p>最后，页面成功出现flag信息，题目成功解决，题目比较简单，具有引导性</p>
<p>题目属于简单的题目，应该算是签到题，题目主要考察对于xff和referer的http头部信息的了解和掌握，思路比较流程，具有引导性。</p>
<h2 id="webshell">webshell</h2>
<p>看到这个·题目，首先第一反应是上传php一句话木马拿webshell。可能有人不解，什么是webshell？什么是一句话木马？这里搬出百度百科的解释，对webshell简单说明：</p>
<p>webshell就是以asp、php、jsp或者cgi等网页文件形式存在的一种代码执行环境，也可以将其称做为一种网页后门。黑客在入侵了一个网站后，通常会将asp或php后门文件与网站服务器WEB目录下正常的网页文件混在一起，然后就可以使用浏览器来访问asp或者php后门，得到一个命令执行环境，以达到控制网站服务器的目的。[5]</p>
<p>webshell简单来说就是命令执行的环境，而一句话木马就是在创建一个可以连接到网站的命令执行环境的一个后门程序，这个后门程序通常都是比较简单，比较小的文件。可以通过网站的文件上传漏洞进行文件上传，创建后门木马。</p>
<p>进入到题目页面，看看可以获取到什么额外的信息：</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-63-1024x274.png" alt="img">webshell题目</p>
<p>根据题目描述，这道题目应是考察一句话木马的题目，而且是php一句话木马的题目。</p>
<p>根据目前的推出和知识分析，进入环境来看看怎么拿flag</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-64.png" alt="img">靶机环境</p>
<p>靶机环境中的页面直接把页面中写入的php一句话木马展示出来了，是通过post方式进行参数传递的。</p>
<p>这道题目可以使用hackbar插件进行post数据的传输，首先进行hello world输出来测试webshell的稳定性，根据页面回显情况来进行下一步操作。</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-66-1024x352.png" alt="img"></p>
<p>查看一下，页面的回显情况</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-71.png" alt="img"></p>
<p>页面将hello world成功输出到页面上面，说明页面会直接将代码执行结果回显到页面上面，回显效果良好。</p>
<p>接下来，讲一个的php的小技巧：</p>
<blockquote>
<p>php代码中的反引号```可以直接执行终端shell命令.并返回输出</p>
</blockquote>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#f92672">&lt;?</span><span style="color:#a6e22e">php</span> 
    <span style="color:#66d9ef">echo</span> <span style="color:#e6db74">`ls`</span>; <span style="color:#75715e">#会将ls命令的输出结果输出到php页面上面
</span><span style="color:#75715e"></span><span style="color:#75715e">?&gt;</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>下面我们就可以根据这个小技巧来构造payload：<code>shell=echo </code>ls<code>;</code></p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-67-1024x340.png" alt="img"></p>
<p>查看页面返回的结果</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-68.png" alt="img"></p>
<p>发现网站的站点目录下有两个文件，一个是index.php文件，一个是flag.txt文件</p>
<p>显然flag文件肯定就是目标文件，需要查看到flag.txt文件中究竟写了些什么样的内容，flag.txt文件很可能藏着flag文件</p>
<p>构造payload：<code>shell=echo </code>cat flag.txt<code>;</code></p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-69-1024x363.png" alt="img"></p>
<p>查看页面显示的结果</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-70.png" alt="img"></p>
<p>发现flag.txt文件中写的就是flag数据，题目解决</p>
<p>题目主要考察php一句话木马，php特性和linux命令的简单使用，整体思路还是比较流畅的，题目难度比较简单，顺着思路就可以解决了。当然此题有多种解法。</p>
<h2 id="command-execution">command execution</h2>
<p>看到题目，可能是考察命令执行漏洞的题目，从题目也获取不到太多信息</p>
<p>直接点开题目页面，来看看有没有更多的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-72-1024x290.png" alt="img">command_execution题目</p>
<p>题目描述说是ping功能，题目可能于ping功能有些出入，进入靶场环境看看情况</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-73.png" alt="img"></p>
<p>靶机环境</p>
<p>页面非常简单，好像就是一个ping功能的页面，首先试试使用127.0.0.1地址进行测试</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-74.png" alt="img"></p>
<p>发现这是一个命令执行环境，可控的地方就是输入框</p>
<p>来分析一下输入框的输入模式：</p>
<blockquote>
<p>输入框可以输入ip地址和url地址</p>
<p>输入的内容前方会被增加<code>ping -c 3 </code>的代码</p>
<p>输入内容的后面不会增加任何额外代码</p>
<p>页面输出内容会把终端输出内容返回</p>
</blockquote>
<p>因此，这里可以使用一点shell的语法技巧来构造payload</p>
<p><code>&amp;&amp;</code>在shell语法中是前面的命令执行成功后继续执行后面的代码</p>
<pre><code>ping -c 3 127.0.0.1 &amp;&amp; ls # 会先执行ping命令，ping命令执行成功会再执行ls命令
</code></pre><p>于是构造payload：<code>127.0.0.1 &amp;&amp; ls</code> ，并输入到输入框中来执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-75.png" alt="img"></p>
<p>发现网站页面下没有藏有flag文件，下一个可能的目录是home目录或是root目录</p>
<p>访问root目录需要权限，于是先查看一下ping功能的用户权限</p>
<p>构造payload：<code>127.0.0.1 &amp;&amp; id</code> ，并输入到输入框中来执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-76.png" alt="img"></p>
<p>发现ping的权限仅仅知识apache的权限，使用的服务器很可能是Ubuntu服务</p>
<p>构造payload：<code>127.0.0.1 &amp;&amp; uname -a</code> ，并输入到输入框中执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-77.png" alt="img"></p>
<p>发现服务器确实是Ubuntu服务器</p>
<p>根据目前收集到的信息，可能只能访问到home目录下，那就先尝试查看到home目录，如果home目录下没有再尝试提权进入到root目录下</p>
<p>构造查看home目录的payload：<code>127.0.0.1 &amp;&amp; ls /home </code>，输入到输入框中执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-78.png" alt="img"></p>
<p>发现home目录下存在有flag文件，让本菜鸡来瞧瞧这个flag.txt里面写的啥</p>
<p>构造payload：<code>127.0.0.1 &amp;&amp; cat /home/flag.txt </code>，输入到输入框中执行</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-79.png" alt="img"></p>
<p>发现flag.txt里面写的就是flag数据，题目解决</p>
<p>题目主要考察linux命令行的使用以及对于命令执行漏洞的觉察，题目的解题思路还是比较流畅的，题目应该也属于简单题。难度并不是很高。</p>
<h2 id="simple-js">simple js</h2>
<p>看到题目，应该是一个简单JavaScript代码审计的题目</p>
<p>进入到题目页面中，希望可以获取到更多相关的数据</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-80-1024x304.png" alt="img">simple_js题目</p>
<p>看到题目的难度系数，可知这道题目应该不简单，网页一直输入不对密码，这应该是一个提示</p>
<p>下面就直接进入到靶机环境来看看情况</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-81.png" alt="img"></p>
<p>页面直接就是一个提示框，先随便输入点内容</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-82.png" alt="img"></p>
<p>就报出了另一个提示框，然后页面内容是空白的</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-83.png" alt="img"></p>
<p>这种情况下，只能尝试从F12检查源代码中找到一些有用的信息</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-84.png" alt="img"></p>
<p>在源代码检查的过程中找到了js的代码，这道题目应该是对js源代码的审计</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">dechiffre</span>(<span style="color:#a6e22e">pass_enc</span>) {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&#34;</span>;
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass_enc</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">l</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
        <span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">o</span>, <span style="color:#a6e22e">p</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
    <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>.<span style="color:#a6e22e">length</span>;
    <span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> (<span style="color:#a6e22e">l</span>) <span style="color:#f92672">+</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>);
    <span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>.<span style="color:#a6e22e">length</span>;
    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
        <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;
    }
    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
            <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
    }
    <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>(<span style="color:#a6e22e">tab2</span>[<span style="color:#ae81ff">17</span>]);
    <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p</span>;
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pass</span>;
}
String[<span style="color:#e6db74">&#34;fromCharCode&#34;</span>](<span style="color:#a6e22e">dechiffre</span>(<span style="color:#e6db74">&#34;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&#34;</span>));

<span style="color:#a6e22e">h</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">prompt</span>(<span style="color:#e6db74">&#39;Enter password&#39;</span>);
<span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">dechiffre</span>(<span style="color:#a6e22e">h</span>));
</code></pre></div><p>然后对这段js代码进行简单分析：</p>
<blockquote>
<ol>
<li>
<p>从js代码整体来看，代码先定义了一个dechiffre的函数，然后定义了一个字符串数组，然后使用了两个功能性函数进行弹窗。</p>
</li>
<li>
<p>整段js代码的核心应该是应该是定义的dechiffre的函数，对于dechiffre函数的分析应该就是解决这道题目的关键性问题</p>
</li>
</ol>
</blockquote>
<p>下面对JS源代码中的dechiffre函数进行分析：</p>
<p>首先将dechiffre函数内部进行划分</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">dechiffre</span>(<span style="color:#a6e22e">pass_enc</span>) {

    <span style="color:#75715e">// 变量定义区
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&#34;</span>;
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass_enc</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">l</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
        <span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">o</span>, <span style="color:#a6e22e">p</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;

    <span style="color:#75715e">// 变量处理区
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>.<span style="color:#a6e22e">length</span>;
    <span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">+</span> (<span style="color:#a6e22e">l</span>) <span style="color:#f92672">+</span> (<span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>);
    <span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>.<span style="color:#a6e22e">length</span>;

    <span style="color:#75715e">// 逻辑处理区
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
        <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;
    }
    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
            <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
    }

    <span style="color:#75715e">// 最终输出区
</span><span style="color:#75715e"></span>    <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>(<span style="color:#a6e22e">tab2</span>[<span style="color:#ae81ff">17</span>]);
    <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p</span>;
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pass</span>;
}
</code></pre></div><p>js函数被划分成四个区域：</p>
<ol>
<li>变量定义区</li>
<li>变量处理区</li>
<li>逻辑处理区</li>
<li>最终输出区</li>
</ol>
<p>下面对这四个分区进行逐一分析</p>
<p>变量定义区：</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&#34;</span>;
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass_enc</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">pass</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span>, <span style="color:#a6e22e">j</span>, <span style="color:#a6e22e">k</span>, <span style="color:#a6e22e">l</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
        <span style="color:#a6e22e">m</span>, <span style="color:#a6e22e">n</span>, <span style="color:#a6e22e">o</span>, <span style="color:#a6e22e">p</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>;
</code></pre></div><blockquote>
<ol>
<li>
<p>定义了一个pass变量并赋值&quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;</p>
</li>
<li>
<p>定义了一个tab变量并赋值pass_enc参数进行分隔成数组</p>
</li>
<li>
<p>定义了一个tab2变量并赋值pass变量进行分隔成数组[70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65]</p>
</li>
<li>
<p>定义了变量i，j，k，l并赋值为0，定义了变量m，n，o，p并赋值为“”</p>
</li>
</ol>
</blockquote>
<p>变量处理区</p>
<pre><code>    i = 0;
    j = tab.length;
    k = j + (l) + (n = 0);
    n = tab2.length;
</code></pre><blockquote>
<ol>
<li>
<p>将变量i再次赋值为0</p>
</li>
<li>
<p>将变量j赋值为tab的长度</p>
</li>
<li>
<p>将变量k赋值为j的值加上l和n=0的数值</p>
</li>
<li>
<p>将变量n赋值为tab2的长度，即n=18</p>
</li>
</ol>
</blockquote>
<p>逻辑处理区</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
        <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">5</span>) <span style="color:#66d9ef">break</span>;
    }
    <span style="color:#66d9ef">for</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>); <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> (<span style="color:#a6e22e">k</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">j</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>); <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span> <span style="color:#f92672">-</span> <span style="color:#a6e22e">l</span>];
        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">5</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">k</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>)
            <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">tab2</span>[<span style="color:#a6e22e">i</span>]));
    }
</code></pre></div><blockquote>
<ol>
<li>
<p>对于第一个循环，初始值i被赋值为0，限制条件是i&lt;18，循环条件是i++</p>
<p>循环内部是对于o变量的处理，第一个赋值语句是无用的赋值语句，由于下面的语句会对o进行   重新赋值处理。下面<code>p += String.fromCharCode((o = tab2[i]));</code>语句涉及了string对象和fromCharCode（）函数。经过搜索和查询，发现fromcharcode函数是将unicode值转换为字符的函数，属于String对象的api。这条语句的作用是对p变量进行累计赋值处理。如果i==5循环就结束。</p>
</li>
<li>
<p>对于第二个循环，初始值i被赋值为0，限制条件是i&lt;18，循环条件是i++</p>
<p>循环内部依旧是对于o变量的处理，还是和第一个循环非常类似的处理，都是最终对于p变量进行累计赋值。</p>
</li>
<li>
<p>两个循环都是对于p变量进行累加赋值。</p>
</li>
</ol>
</blockquote>
<p>最终输出区</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">    <span style="color:#a6e22e">p</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>(<span style="color:#a6e22e">tab2</span>[<span style="color:#ae81ff">17</span>]);
    <span style="color:#a6e22e">pass</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">p</span>;
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">pass</span>;
</code></pre></div><blockquote>
<ol>
<li>
<p>仍然是对p变量进行赋值处理</p>
</li>
<li>
<p>将p的值赋值给pass</p>
</li>
<li>
<p>将pass变量返回</p>
</li>
</ol>
</blockquote>
<p>总体对这个函数进行分析，这个函数根本没有涉及任何传入参数的处理情况，简单来说就是没有tab数组任何事情。无论传入什么变量都只返回tab2数组的数据。</p>
<p>再看看代码最后的调用情况</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript">String[<span style="color:#e6db74">&#34;fromCharCode&#34;</span>](<span style="color:#a6e22e">dechiffre</span>(<span style="color:#e6db74">&#34;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&#34;</span>));

<span style="color:#a6e22e">h</span> <span style="color:#f92672">=</span> window.<span style="color:#a6e22e">prompt</span>(<span style="color:#e6db74">&#39;Enter password&#39;</span>);
<span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">dechiffre</span>(<span style="color:#a6e22e">h</span>));
</code></pre></div><blockquote>
<ol>
<li>
<p>这个函数被调用两次。</p>
</li>
<li>
<p>第一次是调用了dechiffre并传入参数</p>
</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">“\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30”
</code></pre></div><p>作为函数的实参进行传入数据</p>
<ol start="3">
<li>第二次是调用了用户输入的数据（无论传入什么数据结果都一样）</li>
</ol>
</blockquote>
<p>所以这个JavaScript的代码中肯定藏有flag，flag可能藏在第一次传入的参数中</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30
</code></pre></div><p>编写js文件对第一次传入的参数进行处理</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#75715e">&lt;!DOCTYPE html&gt;</span>
&lt;<span style="color:#f92672">html</span>&gt;
&lt;<span style="color:#f92672">head</span>&gt;
	&lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>&gt;
	&lt;<span style="color:#f92672">title</span>&gt;test&lt;/<span style="color:#f92672">title</span>&gt;
	&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text/javascript&#34;</span>&gt;
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">input</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&#34;</span>;
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span>;
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">o</span><span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>;
		<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">tab</span><span style="color:#f92672">=</span><span style="color:#a6e22e">input</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;,&#39;</span>);
		document.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">tab</span>);
		<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">tab</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>){
			<span style="color:#a6e22e">result</span> <span style="color:#f92672">+=</span> String.<span style="color:#a6e22e">fromCharCode</span>((<span style="color:#a6e22e">o</span><span style="color:#f92672">=</span><span style="color:#a6e22e">tab</span>[<span style="color:#a6e22e">i</span>]))
		}
    	document.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">result</span>);
	&lt;/<span style="color:#f92672">script</span>&gt;
&lt;/<span style="color:#f92672">head</span>&gt;
&lt;<span style="color:#f92672">body</span>&gt;

&lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div><p>在浏览器上运行一下这段代码</p>
<p><img src="/images/XCTF-WEB-novice_writeup/image-85.png" alt="img"></p>
<p>undefined后面那段字符就是flag数据：786OsErtk12</p>
<p>这道题目也解决了，分析过程比较复杂，需要一定的JavaScript基础。难度其实也应该是一道简单题目，但是思路比较绕，如果比较灵敏可以直接找到关键数据，对关键数据进行unicode解码在进行ascii解码就能得出flag数据。</p>
<p>这里提供几个网址，便于js基础不是非常牢固的人补习一下：</p>
<p><a href="https://javascript.ruanyifeng.com/">https://javascript.ruanyifeng.com/</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">https://www.liaoxuefeng.com/wiki/1022910821149312</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/learn/JavaScript">https://developer.mozilla.org/zh-CN/docs/learn/JavaScript</a></p>
<h2 id="参考">参考</h2>
<ol>
<li><a href="https://wiwiki.kfd.me/wiki/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3">WIKI百科-蛮力攻击</a></li>
<li><a href="https://www.jianshu.com/p/4da49f179cee">爆破工具 Hydra 简单使用</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Forwarded-For">X-Forwarded-For MDN</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referer">Referer MDN</a></li>
<li><a href="https://baike.baidu.com/item/WEBSHELL">webshell 百度百科</a></li>
</ol>
<p>本期wp分享到此为止，有时间再来喝杯茶呀！</p>
]]></content>
        </item>
        
        <item>
            <title>My First Post</title>
            <link>https://zcodetea.github.io/posts/my-first-post/</link>
            <pubDate>Fri, 25 Jun 2021 17:24:00 +0800</pubDate>
            
            <guid>https://zcodetea.github.io/posts/my-first-post/</guid>
            <description></description>
            <content type="html"><![CDATA[]]></content>
        </item>
        
    </channel>
</rss>
