<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>crypto on ZCodeTea Blog</title>
    <link>https://zcodetea.github.io/tags/crypto/</link>
    <description>Recent content in crypto on ZCodeTea Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 29 Jan 2022 09:25:11 +0800</lastBuildDate><atom:link href="https://zcodetea.github.io/tags/crypto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数学之美,程序之巧</title>
      <link>https://zcodetea.github.io/posts/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E%E7%A8%8B%E5%BA%8F%E4%B9%8B%E5%B7%A7/</link>
      <pubDate>Sat, 29 Jan 2022 09:25:11 +0800</pubDate>
      
      <guid>https://zcodetea.github.io/posts/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E%E7%A8%8B%E5%BA%8F%E4%B9%8B%E5%B7%A7/</guid>
      <description>数学之美，程序之巧 计算机程序，简单来说，就是指令和数据的组合。程序可以通过算法组成相应的逻辑系统，逻辑系统可以根据编写者需求来完成各种各样的事情。
计算机内部数据处理方式是什么样？
这个问题可以从机器语言开始说起，如果要说到机器语言自然就要聊一聊编程语言喽：
编程语言（英语：programming language），是用来定义计算机程序的形式语言。它是一种被标准化的交流技巧，用来向计算机发出指令。一种能够让程序员准确地定义计算机所需要使用数据的计算机语言，并精确地定义在不同情况下所应当采取的行动。^1^
机器语言是编程语言最初的一个代表，机器语言的表示方式通常是101010的二进制方式，这也是计算机运行最底层的内容和最底层的模块，在101010的运算模式是非常适合计算机进行计算的。编程就是数据和指令的集合，而计算机就是将101010的二进制数字进行运算，计算机的运算方式通常由逻辑运算和算术运算。但是这和数学有什么关系吗？计算机的运算是数学理论产生的产物，集成电路上闪动的光波，跳动的粒子都是多少数学家理论的产物呀！
话说回来，机器语言现在几乎都不使用，都在使用高级编程语言。根据现在的情况，编程语言有大致三代。第一代编程语言是机器语言，编写非常复杂。第二代编程语言是汇编语言，编写相对机器语言简单了许多，但是仍然是比较复杂的语言。第三代编程语言是现在非常经常使用的高级编程语言，C语言，C++语言，Java语言等静态语言以及Python，PHP，Ruby，JavaScript等动态语言。发展到第三代编程语言，编程的难度大大降低。
但是，编程和数学有什么关系呢？
个人认为，编程本身是美的，数学亦是美的。编程的美是基于数学的逻辑，数学的理论和数学中的各种各样的奇妙变换。编程如果接触到了比较底层的内容，也就到了最核心的部分——数据结构和算法，而数据结构和算法很多的知识都是基于数学的思考。这里用算法里面的时间复杂度和数学中的微积分做一下对比：
$$ O(n \cdot \ln:n) $$
$$ f(x) = n \cdot \ln : n $$
这两个公式是非常相像的，而时间复杂度的比较其实也是基于微积分中极限的概念进行比较的。
如果要比较 (O(\ln : n)) 和 (O(n))的时间复杂度，该怎么比较呢？
这里可以使用微积分中的无穷小比较来进行比较的，同样是采用微积分中的极限的思想来进行比较的：
$$ \lim_{x \to +\infty} \frac{\ln : n}{n} = 0 $$
这个式子在微积分中是非常常见的概念，通过数学的证明来证明这个结论。根据这个结论就可以非常容易的判断出时间复杂度之间的大小。这是数学在编程算法中的一个应用。通过这个应用可以说明计算机编程和数学之间的微妙关系。
进行数学问题研究的人员往往是高深的数学家，而进行计算机编程的人员往往是秃头的程序员，程序员很少研究数学问题，但是程序员也了解一部分数学知识。而数学家和程序员之间又有什么关系呢？
程序员是敲代码，负责对功能的实现，是应用方面的。而数学家是解决数学问题的，使用数学优美的证明和严谨的逻辑来证明数学问题，是理论方面的。看起来是没有什么必然的联系，其实进行连接的中介就是计算机科学家，他们负责对计算机理论的研究和算法的创新求解，他们会整合数学家的最新的研究成功并尝试融入到计算机理论中去。程序员可以从计算机理论中的很多相关内容中，进行代码和设计方面的功能实现，优化服务。
现在的大时代趋势是万物互联，每个学科都不在是孤立存在的学科，学科之间彼此有着多重的交叉。随着时代的进步，学科交叉应该会越来越明显，而计算机和数学关系是非常密切的，应该会最先进行交叉研究，其实现在已经进行交叉研究了。
我个人认为程序员应该是有一种对于数学的热爱，看到数学优美的证明会心生惊叹，面对数学问题会竭尽全力去攻克数学问题。其实这其实也是程序员对于程序和代码的一种态度，一种专业素养。程序员往往都会追求完美，希望程序可以不断优化不断进行完善，更少的BUG，更高的性能。这无非不是对于数学赞扬和感叹。
数学之美，程序之巧，尽展心中，会现颅内。
参考  编程语言-维基百科  闲聊到此为止，来喝杯茶可好？</description>
    </item>
    
    <item>
      <title>浅谈椭圆曲线加密算法(ECC)</title>
      <link>https://zcodetea.github.io/posts/%E6%B5%85%E8%B0%88%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95ecc/</link>
      <pubDate>Sat, 29 Jan 2022 09:22:23 +0800</pubDate>
      
      <guid>https://zcodetea.github.io/posts/%E6%B5%85%E8%B0%88%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95ecc/</guid>
      <description>浅谈椭圆曲线加密算法（ECC） 椭圆曲线加密算法是近十年提出的一个非对称加密算法，这个加密算法非常复杂，加密的数据具有良好的保密性。加密效果比RSA加密算法都高。这次不可能全部将ECC加密算法讲完，只能简单聊聊ECC加密算法的基本概念和ECC加密算法的数学基础了。
什么是ECC加密算法？
椭圆曲线密码学（英语：Elliptic Curve Cryptography，缩写：ECC）是一种基于椭圆曲线数学的公开密钥加密算法。椭圆曲线在密码学中的使用是在1985年由Neal Koblitz（英语：Neal Koblitz）和Victor Miller（英语：Victor Miller）分别独立提出的。
ECC的主要优势是它相比RSA加密算法使用较小的密钥长度并提供相当等级的安全性[1]。ECC的另一个优势是可以定义群之间的双线性映射，基于Weil对或是Tate对；双线性映射已经在密码学中发现了大量的应用，例如基于身份的加密。^1^
椭圆曲线加密算法，简称ECC，是基于椭圆曲线数学理论实现的一种非对称加密算法。相比RSA，ECC优势是可以使用更短的密钥，来实现与RSA相当或更高的安全，RSA加密算法也是一种非对称加密算法，在公开密钥加密和电子商业中RSA被广泛使用。据研究，160位ECC加密安全性相当于1024位RSA加密，210位ECC加密安全性相当于2048位RSA加密（有待考证）。^2^
ECC加密算法需要的数学理论基础相对来说是比较高的层次方面，远比RSA的数学难度高。看来，数学上层理论的基础是对密码学产生了比较大的影响。下面，来简单聊聊数学基础吧。
数学基础 阿贝尔群  刚看到这个的时候，我的第一反应是：这是什么东西？（一脸懵逼）
 阿贝尔群其实就是针对椭圆曲线的概念抽象的一个群，简单来说就是针对椭圆曲线的加减乘除规则。概念的变换，就像刚开始学习微积分的加减乘除规则转换到矩阵的加减乘除规律一样。群其实就是一种推广的矩阵。那么，阿贝尔群定义了些什么有趣的东西呢？
 封闭性：如果$ a $和$ b $ 都是阿贝尔群的成员，那么 $ a + b $ 也是阿贝尔群的成员 结合律：$ (a+b)+c=a+(b+c) $ 单位元：如果$ a+0=0+a=a $，则 $ 0 $就是单位元 逆元：对于任意值$ a $必定存在$ b $，使得$ a+b=0 $ 交换律：$ a + b = b + a $  根据这个定义整数集是个阿贝尔群。
椭圆曲线的数学性质 加法 过曲线上的两点$ A $、$ B $画一条直线，找到直线与椭圆曲线的交点，交点关于$ x $轴对称位置的点，定义为$ A+B $，即为加法。</description>
    </item>
    
    <item>
      <title>杯茗藏香，君闻几何</title>
      <link>https://zcodetea.github.io/posts/%E6%9D%AF%E8%8C%97%E8%97%8F%E9%A6%99%E5%90%9B%E9%97%BB%E5%87%A0%E4%BD%95/</link>
      <pubDate>Sat, 29 Jan 2022 08:07:30 +0800</pubDate>
      
      <guid>https://zcodetea.github.io/posts/%E6%9D%AF%E8%8C%97%E8%97%8F%E9%A6%99%E5%90%9B%E9%97%BB%E5%87%A0%E4%BD%95/</guid>
      <description>杯茗藏香，君闻几何 “浅谈密码学”  密文寥寥，清茶袅袅。
杯杯入境，字字明心。
 密码学是主要研究密码编码和解码的一种学科，主要目标是提供在不安全的信道上的安全通信机制^1^
根据OWASP上面的定义来开启我们的闲聊。“密码学是主要研究密码编码和解码的一种学科”，这里有两个比较关键的词汇。密码编码和解码，密码比较好理解。平时我们注册一个账户的时候通常就需要一个密码来进行登入，密码和账户构成了网络账户的基本符号。那么，编码和解码又该怎么理解呢？
编码是信息从一种形式或格式转换为另一种形式的过程，也称为计算机编程语言的代码简称编码。^2^
编码，简单来说就是对内容进行编制，来确保内容不会影响到互联网整体的传输过程。在互联网中，数据传输通常是采用http，ftp，https等协议进行传输的。这些协议中也会有些特殊的字符有特殊的功能性作用，如果不进行编码，可能会出现预期之外的事故。当然编码也有一些安全性的作用，可以确保数据传输过程中数据不是特别明显的暴露，有较大的截获风险。
编码是互联网中不可或缺的一种数据处理方式。
解码是一种用特定方法，把数码还原成它所代表的内容或将电脉冲信号、光信号、无线电波等转换成它所代表的信息、数据等的过程。解码是受传者将接受到的符号或代码还原为信息的过程，与编码过程相对应。^3^
解码，就是将编码的内容进行还原的过程。意思很明了，在互联网中一般会将解码后的信息展示给用户，在数据传输的过程中，将数据进行编码传输。为什么这样做？一方面是为了用户的使用体验，另一方面是为了数据传输的正常进行和安全性保障。
OWASP的密码学定义相对来说是比较狭义的，只对互联网中的简单过程进行了定义，将密码学研究的范围缩小了。
那么，密码学是什么呢？
密码学，就是将OWASP对于密码学的定义进行推广和扩充。编码不仅仅限制于互联网、计算机领域中，解码也不仅仅仅限于互联网、计算机领域方面。编码就变成了加密的一个子集，解码就变成了解密的一个子集。加密前的数据就有了一个比较完整的概念，即明文。加密后的数据也有了一个名字叫密文。进行加密的工具叫做密钥。这些是密码学的基础性的概念。这些概念和体系形成了密码学的大集体。
下面是百度百科给出的对于密码学的具体定义和描述。
密码学（在西欧语文中，源于希腊语kryptós“隐藏的”，和gráphein“书写”）是研究如何隐密地传递信息的学科。在现代特别指对信息以及其传输的数学性研究，常被认为是数学和计算机科学的分支，和信息论也密切相关。著名的密码学者Ron Rivest解释道：“密码学是关于如何在敌人存在的环境中通讯”，自工程学的角度，这相当于密码学与纯数学的异同。密码学是信息安全等相关议题，如认证、访问控制的核心。密码学的首要目的是隐藏信息的涵义，并不是隐藏信息的存在。密码学也促进了计算机科学，特别是在于电脑与网络安全所使用的技术，如访问控制与信息的机密性。密码学已被应用在日常生活：包括自动柜员机的芯片卡、电脑使用者存取密码、电子商务等等。^4^
密码学不仅仅只是计算机领域的内容，也是一种比较多元化的体系，但是主要应用于计算机领域。密码学会涉及到很多与数学相关联的知识体系，从微积分到线性代数、概率论以及离散数学，再从线性代数到抽象代数，再从抽象代数到数论。几乎数学方面比较难的模块都涉及到了密码学中，仿佛富有丰富的能量和特别的活力。
这回只是对密码学的初步探索和学习，有时候知识都是相通的，都是彼此有联系的存在。密码学何尝不是呢？喝杯茶其实也是种生活种的密码学。
密码学有密文和明文，茶叶中有遗传密码和表现型，有香气分子和味觉感受。密码学应该是和生物学一样，是非常beautiful的学科，一定非常好玩！
请君先闻龙井香，道出多少古时芳。
参考：  http://www.owasp.org.cn/ https://baike.baidu.com/item/%E7%BC%96%E7%A0%81/80092 https://baike.baidu.com/item/%E8%A7%A3%E7%A0%81 https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E5%AD%A6  闲聊到此为止，来喝杯茶可好？</description>
    </item>
    
    <item>
      <title>尽沾手襟 淋满眼眶</title>
      <link>https://zcodetea.github.io/posts/%E5%B0%BD%E6%B2%BE%E6%89%8B%E8%A5%9F-%E6%B7%8B%E6%BB%A1%E7%9C%BC%E7%9C%B6/</link>
      <pubDate>Sat, 26 Jun 2021 08:24:32 +0800</pubDate>
      
      <guid>https://zcodetea.github.io/posts/%E5%B0%BD%E6%B2%BE%E6%89%8B%E8%A5%9F-%E6%B7%8B%E6%BB%A1%E7%9C%BC%E7%9C%B6/</guid>
      <description>“再论RSA加密算法”  优美的数，自然的码
侦破数的逻辑
看透码的奥秘
 RSA加密算法的算法结构是非常严谨的，具有良好的保密性和完整性。正确使用RSA加密算法，可以确保信息传输的安全性。但是根据现代密码学的研究和发现，RSA加密算法已经被攻破了。中国的王小云通过密码分析学的方法，破解了RSA加密算法。
而RSA加密算法在CTF比赛中的地位仍然是不容小视的，在CTF比赛中的密码学部分是经常出没。CTF的密码学题目往往是在考察参赛者对于密码学算法的理解，往往采用的是密码分析学的知识进行密码学破解。密码学经常使用的三个角色是Alice、Bob和Eva，这三个人往往是Alice和Bob在不安全的信道上进行传输信息，而Eva是在窃听不安全信道上面信息的窃听者。而CTF比赛中，参赛者往往就需要扮演Eva的角色，根据题目给到的信息进行密码破译，来获取到Flag。
说来说去，RSA加密算法，RSA加密算法其实就挺简单的，至少算法逻辑是比较简单的。但是在计算机的实际应用中，往往会有编码和其他各种加密的使用，进行综合性的安全性应用。RSA加密算法虽然是比较简单的算法过程，但是随着现代密码学的不断发展和进步，越来越多针对RSA加密算法的攻击方式，因而CTF也根据密码学研究是文献进行革新，演变出来了各种各样针对RSA攻击方法的破译算法。
CTF中RSA题目类型 CTF中常见的RSA题目类型有如下几类：^1^
公钥加密文
这是CTF中最常见最基础的题型，出题人会给你一个公钥文件（通常是以.pem或.pub结尾的文件）和密文（通常叫做flag.enc之类的），你需要分析公钥，提取出（N，e），通过各种攻击手段恢复私钥，然后去解密密文得到flag。
文本文档
对于第一种题型，耿直点的出题人直接给你一个txt文本文档，里面直接写出了（N，e，c）所对应的十进制数值，然后你直接拿去用就行了。当然也不都是给出（N，e，c）的值，有时还会给出其他一些参数，这时就需要思考，这题具体考察的什么攻击方法
pcap文件
有时出题人会给你一个流量包，你需要用wireshark等工具分析，然后根据流量包的通信信息，分析题目考察的攻击方法，你可以提取出所有你解题需要用到的参数，然后进行解密
本地脚本分析
题目会给你一个脚本和一段密文，一般为python编写，你需要逆向文件流程，分析脚本的加密过程，写出对应的解密脚本进行解密
远程脚本利用
这种题型一般难度较大。题目会给你一个运行在远程服务器上的python脚本和服务器地址，你需要分析脚本存在的漏洞，确定攻击算法，然后编写脚本与服务器交互，得到flag
密码学的题目类型也大致就是这些类型了，这些题目类型也展现出了密码学并不是孤立的存在，密码学与网络安全的各个方面都有着较大的联系，并彼此互联。
数据处理 CTF比赛中的CRYPTO题目类型往往会给到一些需要进行数据处理的文件格式：
基本上来说，RSA的题目都是围绕着c，m，e，d，n，p，q这几个参数展开的，但是题目一般不会直接给这种样子的参数，而是通过别的方式给出，这里就需要我们使用一些工具或者自己手工将这些参数提取出来。^2^
pem文件**：**针对此类文件可以直接使用openssl提取，大概使用过的方式有：
openssl rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc openssl rsa -pubin -text -modulus -in warmup -in public.pem pcap文件：针对此类文件可以使用wireshark follow一下。这种问题一般都是写了一个交互的crypto系统，所以可能产生多轮交互。
PPC模式：这种模式是上述pcap文件的交互版，会给一个端口进行一些crypto的交互，参数会在交互中给出。
第二个需要处理的就是明密文，这个方法多多，不多赘述。
RSA加密算法的攻击类型 RSA加密算法题目的攻击类型是各种各样的，常见的攻击方法：
模数分解 解决RSA题目最简单，最暴力，最好使的方法就是分解模数n。如果能够将n分解成功，成功得到p，q的取值，那么可求n的欧拉函数的值。
模数分解往往可以使用多种方式进行分解，素数分解向来就是数学研究领域比较难以攻克的内容。而RSA算法的保密性也是由于素数分解的困难。但是有些简单的RSA题目可以使用素数分解的方法来解决，常用的工具有：foctordb，sagemath
低加密指数攻击 在RSA中e也称为加密指数。由于e是可以随意选取的，选取小一点的e可以缩短加密时间，但是选取不当的话，就会造成安全问题。
e=3时的小明文攻击 当e=3时，如果明文过小，导致明文的三次方仍然小于n，那么通过直接对密文三次开方，即可得到明文。
即： $$ c\equiv; m^e ;mod; n $$
如果e=3，且 $ m^e&amp;lt;{n} $，那么：
$$ c= m^e,;e=3 $$</description>
    </item>
    
    <item>
      <title>清茶一盏 公杯斟茗</title>
      <link>https://zcodetea.github.io/posts/%E6%B8%85%E8%8C%B6%E4%B8%80%E7%9B%8F-%E5%85%AC%E6%9D%AF%E6%96%9F%E8%8C%97/</link>
      <pubDate>Sat, 26 Jun 2021 08:20:02 +0800</pubDate>
      
      <guid>https://zcodetea.github.io/posts/%E6%B8%85%E8%8C%B6%E4%B8%80%E7%9B%8F-%E5%85%AC%E6%9D%AF%E6%96%9F%E8%8C%97/</guid>
      <description>清茶一盏 公杯斟茗  上下运杯，左右轻斟
公杯，私茗，香满阑
清茶，浓茶，甘润田
然君闻几何？
 要谈谈RSA加密算法，不妨先聊聊密码学的发展历史和密码学的历程。
密码学早在公元前400多年就已经产生，人类使用密码的历史几乎与使用文字的时间一样长，密码学的发展大致可以分为 3 个阶段: 1949 年之前的古典密码学阶段; 1949 年至 1975 年密码学成为科学的分支; 1976 年以后对称密钥密码算法得到进一步发展，产生了密码学的新方向—公钥密码学。1976 年，W.Diffie 和 M.Hellman 在发表的文章“密码学的新方向”中首次公开提出了公钥密码( Public-key Cryptography) 的概念。公钥密码的提出实现了加密密钥和解密密钥之间的独立，解决了对称密码体制中通信双方必须共享密钥的问题，在密码学界具有划时代的意义。^1^
密码学的历史非常悠久，但是密码学的发展速度并不是非常迅速，直到信息时代的到来以及网络空间安全面临着巨大的威胁，密码学得到了前所未有的飞速发展，RSA公钥密码就是其中的代表。密码学中研究的对象有大致三类：
 对称密码 非对称密码 协议  而RSA密码属于非对称密码，公钥密码。RSA也是现代密码学的代表性的内容部分，那么非常经典的RSA密码就是一个什么样的密码呢？
首先，要搞清楚什么是RSA密码：
RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）在1977年一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。
1973年，在英国政府通讯总部工作的数学家克利福德·柯克斯（Clifford Cocks）在一个内部文件中提出了一个与之等效的算法，但该算法被列入机密，直到1997年才得到公开。
对极大整数做因数分解的难度决定了 RSA 算法的可靠性。换言之，对一极大整数做因数分解愈困难，RSA 算法愈可靠。假如有人找到一种快速因数分解的算法的话，那么用 RSA 加密的信息的可靠性就会极度下降。但找到这样的算法的可能性是非常小的。今天只有短的 RSA 钥匙才可能被强力方式破解。到目前为止，世界上还没有任何可靠的攻击RSA算法的方式。只要其钥匙的长度足够长，用RSA加密的信息实际上是不能被破解的。^2^
RSA加密算法就是三个人提出的一个非对称加密的算法，是一种公钥算法。RSA加密算法进行加密的信息具有良好的安全性和可靠性，正确地使用RSA加密算法可以应对互联网上的大多数针对密码进行的攻击。
RSA加密算法的具体内容是什么呢？
（这里借鉴一下阮一峰的个人博客进行说明）^3^
 （1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。
（2）甲方获取乙方的公钥，然后用它对信息加密。
（3）乙方得到加密后的信息，用私钥解密。
 这是非对称加密的总体流程，简单来说就是公钥加密，私钥解密的算法模式。而RSA加密算法就是公钥算法中的代表性的算法，这经典算法的基本原理还是比较简单易懂的。
RSA加密算法需要一点点的数学基础，也可以说是数论基础。
数学基础 模运算：模运算也可以说是用取余的运算方式
$$ a \equiv b(mod; m)$$
这是最简单的模运算公式，也可以使用简单的Python语法实现：
b = a % m # python语言中%可以进行取余运算 整数环：模运算的延申，无论模运算中的数怎么加减乘除都在模的一个整数环中。</description>
    </item>
    
  </channel>
</rss>
