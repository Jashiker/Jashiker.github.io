<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>note on Code &amp; Tea Cyberspace</title>
    <link>https://zcodetea.github.io/tags/note/</link>
    <description>Recent content in note on Code &amp; Tea Cyberspace</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 03 Feb 2022 09:56:53 +0800</lastBuildDate><atom:link href="https://zcodetea.github.io/tags/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>汇编语言 笔记</title>
      <link>https://zcodetea.github.io/posts/asm/</link>
      <pubDate>Thu, 03 Feb 2022 09:56:53 +0800</pubDate>
      
      <guid>https://zcodetea.github.io/posts/asm/</guid>
      <description>汇编语言 概述 编程形式
 开关&amp;ndash;&amp;gt;打孔&amp;ndash;&amp;gt;输入设备
 汇编语言的出现
mov eax, 5 mov ebx, 6 add eax, ebx 汇编程序的执行
 汇编代码 -&amp;gt; 汇编程序 -&amp;gt; 处理器可识别 01010101 -&amp;gt; 处理器执行
 学习汇编的意义  开发时调试 逆向时候的代码阅读 某些特殊技术的使用（如shellcode、壳）   shellcode：可以运行在任意位置的代码（汇编语言）
壳：加壳或脱壳都需要用的汇编语言
 环境配置
  Ollydbg
  Visual Studio 2015
  x16 汇编 通用寄存器    16位寄存器 高8位 低8位     AX AH AL   BX BH BL   CX CH CL   DX DH DL   SI \ \   DI \ \   SP \ \   BP \ \    内存字节序 :chestnut: 0x12345678</description>
    </item>
    
    <item>
      <title>C语言核心内容 笔记</title>
      <link>https://zcodetea.github.io/posts/c-core/</link>
      <pubDate>Tue, 01 Feb 2022 19:01:04 +0800</pubDate>
      
      <guid>https://zcodetea.github.io/posts/c-core/</guid>
      <description>C语言核心 函数 基本函数
#include &amp;lt;stdio.h&amp;gt; // 函数的声明 void Hello(); int main() { // 最简单函数的调用  Hello(); return 0; } void Hello() { printf(&amp;#34;Hello!\n&amp;#34;); } #include &amp;lt;stdio.h&amp;gt;  void Hello() { printf(&amp;#34;Hello!\n&amp;#34;); } int main() { // 最简单函数的调用  Hello(); return 0; } 函数的定义 返回值类型 函数名(参数列表) { 函数体 } 函数声明 所谓声明就是（Declaration）,就是告诉编译器我要使用这个函数，你现在没有找到它的定义不要紧，请不要报错，稍后我会把定义补上
参数 形参 形式参数
实参 实际参数
传值和传址 传递数值 会受到作用域的限制
传递地址 任意门不会受到作用域的限制
可变参数 #include &amp;lt;stdarg.h&amp;gt;
 va_list va_start va_arg va_end  #include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>C语言基础 笔记</title>
      <link>https://zcodetea.github.io/posts/c-basic/</link>
      <pubDate>Tue, 01 Feb 2022 18:48:50 +0800</pubDate>
      
      <guid>https://zcodetea.github.io/posts/c-basic/</guid>
      <description>C语言基础 概述 main函数 main函数是C语言的主函数，每个C语言程序都必须存在一个main函数，因为在程序开始的时候就会调用，它是程序执行的起点，当main函数的类型为int的时候表示函数返回一个整数值，类型为VOID表示函数不接受任何参数。main函数的函数体包括左花括号和右花括号之间的任何内容。
printf函数 printf()函数是格式化输出函数，一般用于向标准输出设备按规定格式输出信息
printf()函数的调用格式为：printf(&amp;quot;&amp;lt;格式化字符串&amp;gt;, &amp;lt;参量表&amp;gt;&amp;quot;)
格式输出，它是c语言中产生格式化输出的函数（在stdio.h中定义）。用于向终端（显示器、控制台等）输出字符。格式控制由要输出的文字和数据格式说明组成。要输出的文字除了可以使用字母、数字、空格和一些数字符号以外，还可以使用一些转义字符表示特殊的含义。主要包括%d, %o, %x, %g, %c, %s, 以及换行符\n
空白与注释 空白在C语言里并没有什么特殊的约定来限制你的使用，它的作用仅仅只是似的程序更好理解，更好的显示出程序的结构，仅此而已
在C语言里存在以下两种注释方式
 // 单行注释 /*多行注释*/  基础介绍 运行机制：C语言–&amp;gt; 汇编语言–&amp;gt;机器语言–&amp;gt;CPU
 编译型语言VS解释性语言
 编译型语言：编译为可执行文件，直接由CPU执行 解释型语言：编译为字节码，由解释器交给CPU执行   程序执行  编写 gcc test.c -o test编译 ./test执行  格式化输入
#include &amp;lt;studio.h&amp;gt;int main(){ printf(&amp;#39;hello world&amp;#39;); return 0; } 输入输出函数 输入函数 scanf(&amp;quot;%?&amp;quot;, temp);
输出函数 printf(&amp;quot;%?&amp;quot;, temp);
转义字符    转义字符 含义     \a 响铃(BEL)   \b 退格(BS)，将当前位置移到前一列   \f 换页(FF)，将当前位置移到下页开头   \n 换行(LF)，将当前位置移到下一行开头   \r 回车(CR)，将当前位置移到本行开头   \t 水平制表(HT)，跳到下一个TAB位置   \v 垂直制表   \\ 表示(\)   \&#39; 表示(‘)   \&amp;quot; 表示(“)   \?</description>
    </item>
    
    <item>
      <title>Java面向对象之多态 笔记</title>
      <link>https://zcodetea.github.io/posts/java-polymorphic/</link>
      <pubDate>Sat, 29 Jan 2022 19:01:51 +0800</pubDate>
      
      <guid>https://zcodetea.github.io/posts/java-polymorphic/</guid>
      <description>Java面向对象之多态 方法重写 子类和父类同名方法   子类和父类同名方法，方法重写
  前提：需要有继承关系
  方法重写表现：
方法名必须相同
参数列表必须相同
返回值类型必须相同
修饰符：范围可以扩大或相同，但是不能缩小 public &amp;gt; protected &amp;gt;default
  方法重写
public class Animal { public void eat() { System.out.println(&amp;#34;动物去吃东西&amp;#34;); } } public class Cat extends Animal { public void eat() { System.out.println(&amp;#34;猫喜欢吃鱼&amp;#34;); } } public class Dog { public void eat() { System.out.println(&amp;#34;狗喜欢吃骨头&amp;#34;); } } 不能重写父类的private方法，如果定义的话只是定义了一个新方法，不是方法重写
运行时多态   后期绑定
如果被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式也被称之为后期绑定
  运行时多态
方法重写是根据实际的类型决定调用哪个重写的方法，发生在运行期间，也叫做运行时多态
  多态</description>
    </item>
    
    <item>
      <title>Java面向对象之继承 笔记</title>
      <link>https://zcodetea.github.io/posts/java-extends/</link>
      <pubDate>Sat, 29 Jan 2022 18:54:26 +0800</pubDate>
      
      <guid>https://zcodetea.github.io/posts/java-extends/</guid>
      <description>Java面向对象之继承 类的继承机制 继承的的作用   继承的作用：减少重复的冗余的相同属性和方法
  多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中
  那么多个类无需再定义这些相同属性和行为，只要继承那个类即可
  public class Person { // 姓名  private String name; // 年龄  private int age; public void setName(String name) { this.name = name; } public void setAge(int age) { this.age = age; } public void eat() { System.out.println(&amp;#34;吃饭&amp;#34;); } } public class Student extends Person { } 子类和父类的继承机制  继承关系是两个类，一个为子类（派生类），一个父类（基类）。 子类继承父类，使用关键字extends来表示 extends的意思是“扩展”，子类是对父类的扩展 java中类只有单继承，没有多继承（一个儿子只有一个直接的爸爸，但是爸爸可以有多个儿子）  Java的单继承  Java不支持多继承，只允许一个类直接继承另一个类 子类只能有一个父类，extends关键字后面只能有一个类名  Java继承的顶级父类：Object类简介  Object类是Java中所有类的始祖 Java中的每一个类都是由它扩展而来，但是并不需要明确写出要继承它 自然的，所有Java类都拥有了其方法  toString()方法</description>
    </item>
    
    <item>
      <title>Java 面向对象之类和对象 笔记</title>
      <link>https://zcodetea.github.io/posts/java-object/</link>
      <pubDate>Sat, 29 Jan 2022 18:47:56 +0800</pubDate>
      
      <guid>https://zcodetea.github.io/posts/java-object/</guid>
      <description>Java 面向对象之类和对象 面向对象与面向过程 面向过程  面向过程编程就是分析出解决问题的步骤 然后使用函数把这些步骤一步步实现 重心放在完成的每个过程上  面向对象  构成问题事务分解成各个对象 描述某个事物在整个解决问题的步骤中的行为  面向过程和面向对象区别  面向过程就是步骤，就是解决问题按部就班 面向对象关注的解决问题所需要的对象 面向过程就是自己办事，面向对象就是托人办事  现实世界的面向对象 类和对象：
 类(class)是抽象的 对象(object)是具体的  汽车类(class) –new–&amp;gt;实例(instance)
Java的类和对象 Java的类  类可以看作是一个模板 用于描述一类对象的行为和状态  Java的类的描述 public class Person { // 姓名  String name; // 年龄  int age; // 身高  int height; // 唱歌  void sing() { } // 跳舞  void dance() { } } Java的对象  万物皆对象 对象是具体的物体 拥有属性 拥有行为 把很多零散的构建成一个整体 具有唯一性  类和创建对象 public class Person { // 姓名  String name; // 年龄  int age; // 身高  int height; public static void main(String[] args) { Person p = new Person(); p.</description>
    </item>
    
    <item>
      <title>Java基础语法 笔记</title>
      <link>https://zcodetea.github.io/posts/java-basic/</link>
      <pubDate>Sat, 29 Jan 2022 16:27:52 +0800</pubDate>
      
      <guid>https://zcodetea.github.io/posts/java-basic/</guid>
      <description>Java基础语法 概述 JVM
 JVM：Java虚拟机，简称JVM Java程序的跨平台性的核心是JVM  JRE和JDK
 JRE：Java程序运行环境 JDK：Java程序开发工具包  安装 Java官方网站：http://oracle.com
Java JDK SE8
环境变量：Java_Home
%Java_Home% /bin
 bin目录：
java.exe
javac.exe
 第一个Java程序 Java是纯面向对象高级编程语言
开发步骤
 定义类 class public classclass名与源文件名一致，且一个文件只能有一个 主方法 main 入口函数 系统输出：编译  public class HelloWorld { /** * public class：公共类名，一个文件只有一个 * 类名：HelloWorld 与文件名一致 */ public static void main(String[] args) { /** * static：静态 * void：返回值的类型 * main：方法名，严格定义 * String：字符串 * []：数组 * args：参数名 */ Syetem.</description>
    </item>
    
  </channel>
</rss>